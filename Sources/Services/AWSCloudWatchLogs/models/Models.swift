// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You don't have sufficient permissions to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchLogsClientTypes.AccountPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case lastUpdatedTime
        case policyDocument
        case policyName
        case policyType
        case scope
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = self.accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let lastUpdatedTime = self.lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime, forKey: .lastUpdatedTime)
        }
        if let policyDocument = self.policyDocument {
            try encodeContainer.encode(policyDocument, forKey: .policyDocument)
        }
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let policyType = self.policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// A structure that contains information about one CloudWatch Logs account policy.
    public struct AccountPolicy: Swift.Equatable {
        /// The Amazon Web Services account ID that the policy applies to.
        public var accountId: Swift.String?
        /// The date and time that this policy was most recently updated.
        public var lastUpdatedTime: Swift.Int?
        /// The policy document for this account policy. The JSON specified in policyDocument can be up to 30,720 characters.
        public var policyDocument: Swift.String?
        /// The name of the account policy.
        public var policyName: Swift.String?
        /// The type of policy for this account policy.
        public var policyType: CloudWatchLogsClientTypes.PolicyType?
        /// The scope of the account policy.
        public var scope: CloudWatchLogsClientTypes.Scope?

        public init(
            accountId: Swift.String? = nil,
            lastUpdatedTime: Swift.Int? = nil,
            policyDocument: Swift.String? = nil,
            policyName: Swift.String? = nil,
            policyType: CloudWatchLogsClientTypes.PolicyType? = nil,
            scope: CloudWatchLogsClientTypes.Scope? = nil
        )
        {
            self.accountId = accountId
            self.lastUpdatedTime = lastUpdatedTime
            self.policyDocument = policyDocument
            self.policyName = policyName
            self.policyType = policyType
            self.scope = scope
        }
    }

}

extension CloudWatchLogsClientTypes.Anomaly: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case active
        case anomalyDetectorArn
        case anomalyId
        case description
        case firstSeen
        case histogram
        case isPatternLevelSuppression
        case lastSeen
        case logGroupArnList
        case logSamples
        case patternId
        case patternRegex
        case patternString
        case patternTokens
        case priority
        case state
        case suppressed
        case suppressedDate
        case suppressedUntil
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let active = self.active {
            try encodeContainer.encode(active, forKey: .active)
        }
        if let anomalyDetectorArn = self.anomalyDetectorArn {
            try encodeContainer.encode(anomalyDetectorArn, forKey: .anomalyDetectorArn)
        }
        if let anomalyId = self.anomalyId {
            try encodeContainer.encode(anomalyId, forKey: .anomalyId)
        }
        if let description = self.description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if firstSeen != 0 {
            try encodeContainer.encode(firstSeen, forKey: .firstSeen)
        }
        if let histogram = histogram {
            var histogramContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .histogram)
            for (dictKey0, histogram0) in histogram {
                try histogramContainer.encode(histogram0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let isPatternLevelSuppression = self.isPatternLevelSuppression {
            try encodeContainer.encode(isPatternLevelSuppression, forKey: .isPatternLevelSuppression)
        }
        if lastSeen != 0 {
            try encodeContainer.encode(lastSeen, forKey: .lastSeen)
        }
        if let logGroupArnList = logGroupArnList {
            var logGroupArnListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logGroupArnList)
            for loggrouparn0 in logGroupArnList {
                try logGroupArnListContainer.encode(loggrouparn0)
            }
        }
        if let logSamples = logSamples {
            var logSamplesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logSamples)
            for logevent0 in logSamples {
                try logSamplesContainer.encode(logevent0)
            }
        }
        if let patternId = self.patternId {
            try encodeContainer.encode(patternId, forKey: .patternId)
        }
        if let patternRegex = self.patternRegex {
            try encodeContainer.encode(patternRegex, forKey: .patternRegex)
        }
        if let patternString = self.patternString {
            try encodeContainer.encode(patternString, forKey: .patternString)
        }
        if let patternTokens = patternTokens {
            var patternTokensContainer = encodeContainer.nestedUnkeyedContainer(forKey: .patternTokens)
            for patterntoken0 in patternTokens {
                try patternTokensContainer.encode(patterntoken0)
            }
        }
        if let priority = self.priority {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let state = self.state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let suppressed = self.suppressed {
            try encodeContainer.encode(suppressed, forKey: .suppressed)
        }
        if suppressedDate != 0 {
            try encodeContainer.encode(suppressedDate, forKey: .suppressedDate)
        }
        if suppressedUntil != 0 {
            try encodeContainer.encode(suppressedUntil, forKey: .suppressedUntil)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let anomalyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .anomalyId)
        anomalyId = anomalyIdDecoded
        let patternIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .patternId)
        patternId = patternIdDecoded
        let anomalyDetectorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .anomalyDetectorArn)
        anomalyDetectorArn = anomalyDetectorArnDecoded
        let patternStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .patternString)
        patternString = patternStringDecoded
        let patternRegexDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .patternRegex)
        patternRegex = patternRegexDecoded
        let priorityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .priority)
        priority = priorityDecoded
        let firstSeenDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .firstSeen) ?? 0
        firstSeen = firstSeenDecoded
        let lastSeenDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastSeen) ?? 0
        lastSeen = lastSeenDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let activeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .active)
        active = activeDecoded
        let stateDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.State.self, forKey: .state)
        state = stateDecoded
        let histogramContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .histogram)
        var histogramDecoded0: [Swift.String:Swift.Int]? = nil
        if let histogramContainer = histogramContainer {
            histogramDecoded0 = [Swift.String:Swift.Int]()
            for (key0, count0) in histogramContainer {
                if let count0 = count0 {
                    histogramDecoded0?[key0] = count0
                }
            }
        }
        histogram = histogramDecoded0
        let logSamplesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logSamples)
        var logSamplesDecoded0:[Swift.String]? = nil
        if let logSamplesContainer = logSamplesContainer {
            logSamplesDecoded0 = [Swift.String]()
            for string0 in logSamplesContainer {
                if let string0 = string0 {
                    logSamplesDecoded0?.append(string0)
                }
            }
        }
        logSamples = logSamplesDecoded0
        let patternTokensContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.PatternToken?].self, forKey: .patternTokens)
        var patternTokensDecoded0:[CloudWatchLogsClientTypes.PatternToken]? = nil
        if let patternTokensContainer = patternTokensContainer {
            patternTokensDecoded0 = [CloudWatchLogsClientTypes.PatternToken]()
            for structure0 in patternTokensContainer {
                if let structure0 = structure0 {
                    patternTokensDecoded0?.append(structure0)
                }
            }
        }
        patternTokens = patternTokensDecoded0
        let logGroupArnListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logGroupArnList)
        var logGroupArnListDecoded0:[Swift.String]? = nil
        if let logGroupArnListContainer = logGroupArnListContainer {
            logGroupArnListDecoded0 = [Swift.String]()
            for string0 in logGroupArnListContainer {
                if let string0 = string0 {
                    logGroupArnListDecoded0?.append(string0)
                }
            }
        }
        logGroupArnList = logGroupArnListDecoded0
        let suppressedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .suppressed)
        suppressed = suppressedDecoded
        let suppressedDateDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .suppressedDate) ?? 0
        suppressedDate = suppressedDateDecoded
        let suppressedUntilDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .suppressedUntil) ?? 0
        suppressedUntil = suppressedUntilDecoded
        let isPatternLevelSuppressionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isPatternLevelSuppression)
        isPatternLevelSuppression = isPatternLevelSuppressionDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// This structure represents one anomaly that has been found by a logs anomaly detector. For more information about patterns and anomalies, see [CreateLogAnomalyDetector](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateLogAnomalyDetector.html).
    public struct Anomaly: Swift.Equatable {
        /// Specifies whether this anomaly is still ongoing.
        /// This member is required.
        public var active: Swift.Bool?
        /// The ARN of the anomaly detector that identified this anomaly.
        /// This member is required.
        public var anomalyDetectorArn: Swift.String?
        /// The unique ID that CloudWatch Logs assigned to this anomaly.
        /// This member is required.
        public var anomalyId: Swift.String?
        /// A human-readable description of the anomaly. This description is generated by CloudWatch Logs.
        /// This member is required.
        public var description: Swift.String?
        /// The date and time when the anomaly detector first saw this anomaly. It is specified as epoch time, which is the number of seconds since January 1, 1970, 00:00:00 UTC.
        /// This member is required.
        public var firstSeen: Swift.Int
        /// A map showing times when the anomaly detector ran, and the number of occurrences of this anomaly that were detected at each of those runs. The times are specified in epoch time, which is the number of seconds since January 1, 1970, 00:00:00 UTC.
        /// This member is required.
        public var histogram: [Swift.String:Swift.Int]?
        /// If this anomaly is suppressed, this field is true if the suppression is because the pattern is suppressed. If false, then only this particular anomaly is suppressed.
        public var isPatternLevelSuppression: Swift.Bool?
        /// The date and time when the anomaly detector most recently saw this anomaly. It is specified as epoch time, which is the number of seconds since January 1, 1970, 00:00:00 UTC.
        /// This member is required.
        public var lastSeen: Swift.Int
        /// An array of ARNS of the log groups that contained log events considered to be part of this anomaly.
        /// This member is required.
        public var logGroupArnList: [Swift.String]?
        /// An array of sample log event messages that are considered to be part of this anomaly.
        /// This member is required.
        public var logSamples: [Swift.String]?
        /// The ID of the pattern used to help identify this anomaly.
        /// This member is required.
        public var patternId: Swift.String?
        /// The pattern used to help identify this anomaly, in regular expression format.
        public var patternRegex: Swift.String?
        /// The pattern used to help identify this anomaly, in string format.
        /// This member is required.
        public var patternString: Swift.String?
        /// An array of structures where each structure contains information about one token that makes up the pattern.
        /// This member is required.
        public var patternTokens: [CloudWatchLogsClientTypes.PatternToken]?
        /// The priority level of this anomaly, as determined by CloudWatch Logs. Priority is computed based on log severity labels such as FATAL and ERROR and the amount of deviation from the baseline. Possible values are HIGH, MEDIUM, and LOW.
        public var priority: Swift.String?
        /// Indicates the current state of this anomaly. If it is still being treated as an anomaly, the value is Active. If you have suppressed this anomaly by using the [UpdateAnomaly](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateAnomaly.html) operation, the value is Suppressed. If this behavior is now considered to be normal, the value is Baseline.
        /// This member is required.
        public var state: CloudWatchLogsClientTypes.State?
        /// Indicates whether this anomaly is currently suppressed. To suppress an anomaly, use [UpdateAnomaly](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateAnomaly.html).
        public var suppressed: Swift.Bool?
        /// If the anomaly is suppressed, this indicates when it was suppressed.
        public var suppressedDate: Swift.Int
        /// If the anomaly is suppressed, this indicates when the suppression will end. If this value is 0, the anomaly was suppressed with no expiration, with the INFINITE value.
        public var suppressedUntil: Swift.Int

        public init(
            active: Swift.Bool? = nil,
            anomalyDetectorArn: Swift.String? = nil,
            anomalyId: Swift.String? = nil,
            description: Swift.String? = nil,
            firstSeen: Swift.Int = 0,
            histogram: [Swift.String:Swift.Int]? = nil,
            isPatternLevelSuppression: Swift.Bool? = nil,
            lastSeen: Swift.Int = 0,
            logGroupArnList: [Swift.String]? = nil,
            logSamples: [Swift.String]? = nil,
            patternId: Swift.String? = nil,
            patternRegex: Swift.String? = nil,
            patternString: Swift.String? = nil,
            patternTokens: [CloudWatchLogsClientTypes.PatternToken]? = nil,
            priority: Swift.String? = nil,
            state: CloudWatchLogsClientTypes.State? = nil,
            suppressed: Swift.Bool? = nil,
            suppressedDate: Swift.Int = 0,
            suppressedUntil: Swift.Int = 0
        )
        {
            self.active = active
            self.anomalyDetectorArn = anomalyDetectorArn
            self.anomalyId = anomalyId
            self.description = description
            self.firstSeen = firstSeen
            self.histogram = histogram
            self.isPatternLevelSuppression = isPatternLevelSuppression
            self.lastSeen = lastSeen
            self.logGroupArnList = logGroupArnList
            self.logSamples = logSamples
            self.patternId = patternId
            self.patternRegex = patternRegex
            self.patternString = patternString
            self.patternTokens = patternTokens
            self.priority = priority
            self.state = state
            self.suppressed = suppressed
            self.suppressedDate = suppressedDate
            self.suppressedUntil = suppressedUntil
        }
    }

}

extension CloudWatchLogsClientTypes.AnomalyDetector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectorArn
        case anomalyDetectorStatus
        case anomalyVisibilityTime
        case creationTimeStamp
        case detectorName
        case evaluationFrequency
        case filterPattern
        case kmsKeyId
        case lastModifiedTimeStamp
        case logGroupArnList
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anomalyDetectorArn = self.anomalyDetectorArn {
            try encodeContainer.encode(anomalyDetectorArn, forKey: .anomalyDetectorArn)
        }
        if let anomalyDetectorStatus = self.anomalyDetectorStatus {
            try encodeContainer.encode(anomalyDetectorStatus.rawValue, forKey: .anomalyDetectorStatus)
        }
        if let anomalyVisibilityTime = self.anomalyVisibilityTime {
            try encodeContainer.encode(anomalyVisibilityTime, forKey: .anomalyVisibilityTime)
        }
        if creationTimeStamp != 0 {
            try encodeContainer.encode(creationTimeStamp, forKey: .creationTimeStamp)
        }
        if let detectorName = self.detectorName {
            try encodeContainer.encode(detectorName, forKey: .detectorName)
        }
        if let evaluationFrequency = self.evaluationFrequency {
            try encodeContainer.encode(evaluationFrequency.rawValue, forKey: .evaluationFrequency)
        }
        if let filterPattern = self.filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if lastModifiedTimeStamp != 0 {
            try encodeContainer.encode(lastModifiedTimeStamp, forKey: .lastModifiedTimeStamp)
        }
        if let logGroupArnList = logGroupArnList {
            var logGroupArnListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logGroupArnList)
            for loggrouparn0 in logGroupArnList {
                try logGroupArnListContainer.encode(loggrouparn0)
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let anomalyDetectorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .anomalyDetectorArn)
        anomalyDetectorArn = anomalyDetectorArnDecoded
        let detectorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorName)
        detectorName = detectorNameDecoded
        let logGroupArnListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logGroupArnList)
        var logGroupArnListDecoded0:[Swift.String]? = nil
        if let logGroupArnListContainer = logGroupArnListContainer {
            logGroupArnListDecoded0 = [Swift.String]()
            for string0 in logGroupArnListContainer {
                if let string0 = string0 {
                    logGroupArnListDecoded0?.append(string0)
                }
            }
        }
        logGroupArnList = logGroupArnListDecoded0
        let evaluationFrequencyDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.EvaluationFrequency.self, forKey: .evaluationFrequency)
        evaluationFrequency = evaluationFrequencyDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let anomalyDetectorStatusDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.AnomalyDetectorStatus.self, forKey: .anomalyDetectorStatus)
        anomalyDetectorStatus = anomalyDetectorStatusDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let creationTimeStampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .creationTimeStamp) ?? 0
        creationTimeStamp = creationTimeStampDecoded
        let lastModifiedTimeStampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastModifiedTimeStamp) ?? 0
        lastModifiedTimeStamp = lastModifiedTimeStampDecoded
        let anomalyVisibilityTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .anomalyVisibilityTime)
        anomalyVisibilityTime = anomalyVisibilityTimeDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Contains information about one anomaly detector in the account.
    public struct AnomalyDetector: Swift.Equatable {
        /// The ARN of the anomaly detector.
        public var anomalyDetectorArn: Swift.String?
        /// Specifies the current status of the anomaly detector. To pause an anomaly detector, use the enabled parameter in the [UpdateLogAnomalyDetector](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateLogAnomalyDetector.html) operation.
        public var anomalyDetectorStatus: CloudWatchLogsClientTypes.AnomalyDetectorStatus?
        /// The number of days used as the life cycle of anomalies. After this time, anomalies are automatically baselined and the anomaly detector model will treat new occurrences of similar event as normal.
        public var anomalyVisibilityTime: Swift.Int?
        /// The date and time when this anomaly detector was created.
        public var creationTimeStamp: Swift.Int
        /// The name of the anomaly detector.
        public var detectorName: Swift.String?
        /// Specifies how often the anomaly detector runs and look for anomalies.
        public var evaluationFrequency: CloudWatchLogsClientTypes.EvaluationFrequency?
        /// A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.
        public var filterPattern: Swift.String?
        /// The ID of the KMS key assigned to this anomaly detector, if any.
        public var kmsKeyId: Swift.String?
        /// The date and time when this anomaly detector was most recently modified.
        public var lastModifiedTimeStamp: Swift.Int
        /// A list of the ARNs of the log groups that this anomaly detector watches.
        public var logGroupArnList: [Swift.String]?

        public init(
            anomalyDetectorArn: Swift.String? = nil,
            anomalyDetectorStatus: CloudWatchLogsClientTypes.AnomalyDetectorStatus? = nil,
            anomalyVisibilityTime: Swift.Int? = nil,
            creationTimeStamp: Swift.Int = 0,
            detectorName: Swift.String? = nil,
            evaluationFrequency: CloudWatchLogsClientTypes.EvaluationFrequency? = nil,
            filterPattern: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            lastModifiedTimeStamp: Swift.Int = 0,
            logGroupArnList: [Swift.String]? = nil
        )
        {
            self.anomalyDetectorArn = anomalyDetectorArn
            self.anomalyDetectorStatus = anomalyDetectorStatus
            self.anomalyVisibilityTime = anomalyVisibilityTime
            self.creationTimeStamp = creationTimeStamp
            self.detectorName = detectorName
            self.evaluationFrequency = evaluationFrequency
            self.filterPattern = filterPattern
            self.kmsKeyId = kmsKeyId
            self.lastModifiedTimeStamp = lastModifiedTimeStamp
            self.logGroupArnList = logGroupArnList
        }
    }

}

extension CloudWatchLogsClientTypes {
    public enum AnomalyDetectorStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case analyzing
        case deleted
        case failed
        case initializing
        case paused
        case training
        case sdkUnknown(Swift.String)

        public static var allCases: [AnomalyDetectorStatus] {
            return [
                .analyzing,
                .deleted,
                .failed,
                .initializing,
                .paused,
                .training,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .analyzing: return "ANALYZING"
            case .deleted: return "DELETED"
            case .failed: return "FAILED"
            case .initializing: return "INITIALIZING"
            case .paused: return "PAUSED"
            case .training: return "TRAINING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AnomalyDetectorStatus(rawValue: rawValue) ?? AnomalyDetectorStatus.sdkUnknown(rawValue)
        }
    }
}

extension AssociateKmsKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId
        case logGroupName
        case resourceIdentifier
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let resourceIdentifier = self.resourceIdentifier {
            try encodeContainer.encode(resourceIdentifier, forKey: .resourceIdentifier)
        }
    }
}

extension AssociateKmsKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AssociateKmsKeyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the KMS key to use when encrypting log data. This must be a symmetric KMS key. For more information, see [Amazon Resource Names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms) and [Using Symmetric and Asymmetric Keys](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html).
    /// This member is required.
    public var kmsKeyId: Swift.String?
    /// The name of the log group. In your AssociateKmsKey operation, you must specify either the resourceIdentifier parameter or the logGroup parameter, but you can't specify both.
    public var logGroupName: Swift.String?
    /// Specifies the target for this operation. You must specify one of the following:
    ///
    /// * Specify the following ARN to have future [GetQueryResults](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_GetQueryResults.html) operations in this account encrypt the results with the specified KMS key. Replace REGION and ACCOUNT_ID with your Region and account ID. arn:aws:logs:REGION:ACCOUNT_ID:query-result:*
    ///
    /// * Specify the ARN of a log group to have CloudWatch Logs use the KMS key to encrypt log events that are ingested and stored by that log group. The log group ARN must be in the following format. Replace REGION and ACCOUNT_ID with your Region and account ID. arn:aws:logs:REGION:ACCOUNT_ID:log-group:LOG_GROUP_NAME
    ///
    ///
    /// In your AssociateKmsKey operation, you must specify either the resourceIdentifier parameter or the logGroup parameter, but you can't specify both.
    public var resourceIdentifier: Swift.String?

    public init(
        kmsKeyId: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        resourceIdentifier: Swift.String? = nil
    )
    {
        self.kmsKeyId = kmsKeyId
        self.logGroupName = logGroupName
        self.resourceIdentifier = resourceIdentifier
    }
}

struct AssociateKmsKeyInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let kmsKeyId: Swift.String?
    let resourceIdentifier: Swift.String?
}

extension AssociateKmsKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId
        case logGroupName
        case resourceIdentifier
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let resourceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceIdentifier)
        resourceIdentifier = resourceIdentifierDecoded
    }
}

extension AssociateKmsKeyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct AssociateKmsKeyOutput: Swift.Equatable {

    public init() { }
}

enum AssociateKmsKeyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CancelExportTaskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let taskId = self.taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
    }
}

extension CancelExportTaskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CancelExportTaskInput: Swift.Equatable {
    /// The ID of the export task.
    /// This member is required.
    public var taskId: Swift.String?

    public init(
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct CancelExportTaskInputBody: Swift.Equatable {
    let taskId: Swift.String?
}

extension CancelExportTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskId
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
    }
}

extension CancelExportTaskOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct CancelExportTaskOutput: Swift.Equatable {

    public init() { }
}

enum CancelExportTaskOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidOperationException": return try await InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ConflictException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// This operation attempted to create a resource that already exists.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CreateDeliveryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryDestinationArn
        case deliverySourceName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryDestinationArn = self.deliveryDestinationArn {
            try encodeContainer.encode(deliveryDestinationArn, forKey: .deliveryDestinationArn)
        }
        if let deliverySourceName = self.deliverySourceName {
            try encodeContainer.encode(deliverySourceName, forKey: .deliverySourceName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateDeliveryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDeliveryInput: Swift.Equatable {
    /// The ARN of the delivery destination to use for this delivery.
    /// This member is required.
    public var deliveryDestinationArn: Swift.String?
    /// The name of the delivery source to use for this delivery.
    /// This member is required.
    public var deliverySourceName: Swift.String?
    /// An optional list of key-value pairs to associate with the resource. For more information about tagging, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html)
    public var tags: [Swift.String:Swift.String]?

    public init(
        deliveryDestinationArn: Swift.String? = nil,
        deliverySourceName: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.deliveryDestinationArn = deliveryDestinationArn
        self.deliverySourceName = deliverySourceName
        self.tags = tags
    }
}

struct CreateDeliveryInputBody: Swift.Equatable {
    let deliverySourceName: Swift.String?
    let deliveryDestinationArn: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateDeliveryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryDestinationArn
        case deliverySourceName
        case tags
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliverySourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliverySourceName)
        deliverySourceName = deliverySourceNameDecoded
        let deliveryDestinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryDestinationArn)
        deliveryDestinationArn = deliveryDestinationArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateDeliveryOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateDeliveryOutputBody = try responseDecoder.decode(responseBody: data)
            self.delivery = output.delivery
        } else {
            self.delivery = nil
        }
    }
}

public struct CreateDeliveryOutput: Swift.Equatable {
    /// A structure that contains information about the delivery that you just created.
    public var delivery: CloudWatchLogsClientTypes.Delivery?

    public init(
        delivery: CloudWatchLogsClientTypes.Delivery? = nil
    )
    {
        self.delivery = delivery
    }
}

struct CreateDeliveryOutputBody: Swift.Equatable {
    let delivery: CloudWatchLogsClientTypes.Delivery?
}

extension CreateDeliveryOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delivery
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.Delivery.self, forKey: .delivery)
        delivery = deliveryDecoded
    }
}

enum CreateDeliveryOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateExportTaskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination
        case destinationPrefix
        case from
        case logGroupName
        case logStreamNamePrefix
        case taskName
        case to
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let destinationPrefix = self.destinationPrefix {
            try encodeContainer.encode(destinationPrefix, forKey: .destinationPrefix)
        }
        if let from = self.from {
            try encodeContainer.encode(from, forKey: .from)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamNamePrefix = self.logStreamNamePrefix {
            try encodeContainer.encode(logStreamNamePrefix, forKey: .logStreamNamePrefix)
        }
        if let taskName = self.taskName {
            try encodeContainer.encode(taskName, forKey: .taskName)
        }
        if let to = self.to {
            try encodeContainer.encode(to, forKey: .to)
        }
    }
}

extension CreateExportTaskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateExportTaskInput: Swift.Equatable {
    /// The name of S3 bucket for the exported log data. The bucket must be in the same Amazon Web Services Region.
    /// This member is required.
    public var destination: Swift.String?
    /// The prefix used as the start of the key for every object exported. If you don't specify a value, the default is exportedlogs.
    public var destinationPrefix: Swift.String?
    /// The start time of the range for the request, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp earlier than this time are not exported.
    /// This member is required.
    public var from: Swift.Int?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// Export only log streams that match the provided prefix. If you don't specify a value, no prefix filter is applied.
    public var logStreamNamePrefix: Swift.String?
    /// The name of the export task.
    public var taskName: Swift.String?
    /// The end time of the range for the request, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not exported. You must specify a time that is not earlier than when this log group was created.
    /// This member is required.
    public var to: Swift.Int?

    public init(
        destination: Swift.String? = nil,
        destinationPrefix: Swift.String? = nil,
        from: Swift.Int? = nil,
        logGroupName: Swift.String? = nil,
        logStreamNamePrefix: Swift.String? = nil,
        taskName: Swift.String? = nil,
        to: Swift.Int? = nil
    )
    {
        self.destination = destination
        self.destinationPrefix = destinationPrefix
        self.from = from
        self.logGroupName = logGroupName
        self.logStreamNamePrefix = logStreamNamePrefix
        self.taskName = taskName
        self.to = to
    }
}

struct CreateExportTaskInputBody: Swift.Equatable {
    let taskName: Swift.String?
    let logGroupName: Swift.String?
    let logStreamNamePrefix: Swift.String?
    let from: Swift.Int?
    let to: Swift.Int?
    let destination: Swift.String?
    let destinationPrefix: Swift.String?
}

extension CreateExportTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination
        case destinationPrefix
        case from
        case logGroupName
        case logStreamNamePrefix
        case taskName
        case to
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskName)
        taskName = taskNameDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamNamePrefix)
        logStreamNamePrefix = logStreamNamePrefixDecoded
        let fromDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .from)
        from = fromDecoded
        let toDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .to)
        to = toDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
        let destinationPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationPrefix)
        destinationPrefix = destinationPrefixDecoded
    }
}

extension CreateExportTaskOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateExportTaskOutputBody = try responseDecoder.decode(responseBody: data)
            self.taskId = output.taskId
        } else {
            self.taskId = nil
        }
    }
}

public struct CreateExportTaskOutput: Swift.Equatable {
    /// The ID of the export task.
    public var taskId: Swift.String?

    public init(
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct CreateExportTaskOutputBody: Swift.Equatable {
    let taskId: Swift.String?
}

extension CreateExportTaskOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskId
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
    }
}

enum CreateExportTaskOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceAlreadyExistsException": return try await ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateLogAnomalyDetectorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyVisibilityTime
        case detectorName
        case evaluationFrequency
        case filterPattern
        case kmsKeyId
        case logGroupArnList
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anomalyVisibilityTime = self.anomalyVisibilityTime {
            try encodeContainer.encode(anomalyVisibilityTime, forKey: .anomalyVisibilityTime)
        }
        if let detectorName = self.detectorName {
            try encodeContainer.encode(detectorName, forKey: .detectorName)
        }
        if let evaluationFrequency = self.evaluationFrequency {
            try encodeContainer.encode(evaluationFrequency.rawValue, forKey: .evaluationFrequency)
        }
        if let filterPattern = self.filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let logGroupArnList = logGroupArnList {
            var logGroupArnListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logGroupArnList)
            for loggrouparn0 in logGroupArnList {
                try logGroupArnListContainer.encode(loggrouparn0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateLogAnomalyDetectorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLogAnomalyDetectorInput: Swift.Equatable {
    /// The number of days to have visibility on an anomaly. After this time period has elapsed for an anomaly, it will be automatically baselined and the anomaly detector will treat new occurrences of a similar anomaly as normal. Therefore, if you do not correct the cause of an anomaly during the time period specified in anomalyVisibilityTime, it will be considered normal going forward and will not be detected as an anomaly.
    public var anomalyVisibilityTime: Swift.Int?
    /// A name for this anomaly detector.
    public var detectorName: Swift.String?
    /// Specifies how often the anomaly detector is to run and look for anomalies. Set this value according to the frequency that the log group receives new logs. For example, if the log group receives new log events every 10 minutes, then 15 minutes might be a good setting for evaluationFrequency .
    public var evaluationFrequency: CloudWatchLogsClientTypes.EvaluationFrequency?
    /// You can use this parameter to limit the anomaly detection model to examine only log events that match the pattern you specify here. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
    public var filterPattern: Swift.String?
    /// Optionally assigns a KMS key to secure this anomaly detector and its findings. If a key is assigned, the anomalies found and the model used by this detector are encrypted at rest with the key. If a key is assigned to an anomaly detector, a user must have permissions for both this key and for the anomaly detector to retrieve information about the anomalies that it finds. For more information about using a KMS key and to see the required IAM policy, see [Use a KMS key with an anomaly detector](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/LogsAnomalyDetection-KMS.html).
    public var kmsKeyId: Swift.String?
    /// An array containing the ARN of the log group that this anomaly detector will watch. You can specify only one log group ARN.
    /// This member is required.
    public var logGroupArnList: [Swift.String]?
    /// An optional list of key-value pairs to associate with the resource. For more information about tagging, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html)
    public var tags: [Swift.String:Swift.String]?

    public init(
        anomalyVisibilityTime: Swift.Int? = nil,
        detectorName: Swift.String? = nil,
        evaluationFrequency: CloudWatchLogsClientTypes.EvaluationFrequency? = nil,
        filterPattern: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        logGroupArnList: [Swift.String]? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.anomalyVisibilityTime = anomalyVisibilityTime
        self.detectorName = detectorName
        self.evaluationFrequency = evaluationFrequency
        self.filterPattern = filterPattern
        self.kmsKeyId = kmsKeyId
        self.logGroupArnList = logGroupArnList
        self.tags = tags
    }
}

struct CreateLogAnomalyDetectorInputBody: Swift.Equatable {
    let logGroupArnList: [Swift.String]?
    let detectorName: Swift.String?
    let evaluationFrequency: CloudWatchLogsClientTypes.EvaluationFrequency?
    let filterPattern: Swift.String?
    let kmsKeyId: Swift.String?
    let anomalyVisibilityTime: Swift.Int?
    let tags: [Swift.String:Swift.String]?
}

extension CreateLogAnomalyDetectorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyVisibilityTime
        case detectorName
        case evaluationFrequency
        case filterPattern
        case kmsKeyId
        case logGroupArnList
        case tags
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupArnListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logGroupArnList)
        var logGroupArnListDecoded0:[Swift.String]? = nil
        if let logGroupArnListContainer = logGroupArnListContainer {
            logGroupArnListDecoded0 = [Swift.String]()
            for string0 in logGroupArnListContainer {
                if let string0 = string0 {
                    logGroupArnListDecoded0?.append(string0)
                }
            }
        }
        logGroupArnList = logGroupArnListDecoded0
        let detectorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorName)
        detectorName = detectorNameDecoded
        let evaluationFrequencyDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.EvaluationFrequency.self, forKey: .evaluationFrequency)
        evaluationFrequency = evaluationFrequencyDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let anomalyVisibilityTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .anomalyVisibilityTime)
        anomalyVisibilityTime = anomalyVisibilityTimeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateLogAnomalyDetectorOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateLogAnomalyDetectorOutputBody = try responseDecoder.decode(responseBody: data)
            self.anomalyDetectorArn = output.anomalyDetectorArn
        } else {
            self.anomalyDetectorArn = nil
        }
    }
}

public struct CreateLogAnomalyDetectorOutput: Swift.Equatable {
    /// The ARN of the log anomaly detector that you just created.
    public var anomalyDetectorArn: Swift.String?

    public init(
        anomalyDetectorArn: Swift.String? = nil
    )
    {
        self.anomalyDetectorArn = anomalyDetectorArn
    }
}

struct CreateLogAnomalyDetectorOutputBody: Swift.Equatable {
    let anomalyDetectorArn: Swift.String?
}

extension CreateLogAnomalyDetectorOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectorArn
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let anomalyDetectorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .anomalyDetectorArn)
        anomalyDetectorArn = anomalyDetectorArnDecoded
    }
}

enum CreateLogAnomalyDetectorOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateLogGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId
        case logGroupClass
        case logGroupName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let logGroupClass = self.logGroupClass {
            try encodeContainer.encode(logGroupClass.rawValue, forKey: .logGroupClass)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateLogGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLogGroupInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the KMS key to use when encrypting log data. For more information, see [Amazon Resource Names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms).
    public var kmsKeyId: Swift.String?
    /// Use this parameter to specify the log group class for this log group. There are two classes:
    ///
    /// * The Standard log class supports all CloudWatch Logs features.
    ///
    /// * The Infrequent Access log class supports a subset of CloudWatch Logs features and incurs lower costs.
    ///
    ///
    /// If you omit this parameter, the default of STANDARD is used. After a log group is created, its class can't be changed. For details about the features supported by each class, see [Log classes](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch_Logs_Log_Classes.html)
    public var logGroupClass: CloudWatchLogsClientTypes.LogGroupClass?
    /// A name for the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The key-value pairs to use for the tags. You can grant users access to certain log groups while preventing them from accessing other log groups. To do so, tag your groups and use IAM policies that refer to those tags. To assign tags when you create a log group, you must have either the logs:TagResource or logs:TagLogGroup permission. For more information about tagging, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html). For more information about using tags to control access, see [Controlling access to Amazon Web Services resources using tags](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html).
    public var tags: [Swift.String:Swift.String]?

    public init(
        kmsKeyId: Swift.String? = nil,
        logGroupClass: CloudWatchLogsClientTypes.LogGroupClass? = nil,
        logGroupName: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.kmsKeyId = kmsKeyId
        self.logGroupClass = logGroupClass
        self.logGroupName = logGroupName
        self.tags = tags
    }
}

struct CreateLogGroupInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let kmsKeyId: Swift.String?
    let tags: [Swift.String:Swift.String]?
    let logGroupClass: CloudWatchLogsClientTypes.LogGroupClass?
}

extension CreateLogGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId
        case logGroupClass
        case logGroupName
        case tags
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let logGroupClassDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.LogGroupClass.self, forKey: .logGroupClass)
        logGroupClass = logGroupClassDecoded
    }
}

extension CreateLogGroupOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct CreateLogGroupOutput: Swift.Equatable {

    public init() { }
}

enum CreateLogGroupOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceAlreadyExistsException": return try await ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateLogStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case logStreamName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
    }
}

extension CreateLogStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLogStreamInput: Swift.Equatable {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The name of the log stream.
    /// This member is required.
    public var logStreamName: Swift.String?

    public init(
        logGroupName: Swift.String? = nil,
        logStreamName: Swift.String? = nil
    )
    {
        self.logGroupName = logGroupName
        self.logStreamName = logStreamName
    }
}

struct CreateLogStreamInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let logStreamName: Swift.String?
}

extension CreateLogStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case logStreamName
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
    }
}

extension CreateLogStreamOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct CreateLogStreamOutput: Swift.Equatable {

    public init() { }
}

enum CreateLogStreamOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceAlreadyExistsException": return try await ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DataAlreadyAcceptedException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DataAlreadyAcceptedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.expectedSequenceToken = output.expectedSequenceToken
            self.properties.message = output.message
        } else {
            self.properties.expectedSequenceToken = nil
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The event was already logged. PutLogEvents actions are now always accepted and never return DataAlreadyAcceptedException regardless of whether a given batch of log events has already been accepted.
public struct DataAlreadyAcceptedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var expectedSequenceToken: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DataAlreadyAcceptedException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        expectedSequenceToken: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.expectedSequenceToken = expectedSequenceToken
        self.properties.message = message
    }
}

struct DataAlreadyAcceptedExceptionBody: Swift.Equatable {
    let expectedSequenceToken: Swift.String?
    let message: Swift.String?
}

extension DataAlreadyAcceptedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expectedSequenceToken
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expectedSequenceTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expectedSequenceToken)
        expectedSequenceToken = expectedSequenceTokenDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchLogsClientTypes {
    public enum DataProtectionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activated
        case archived
        case deleted
        case disabled
        case sdkUnknown(Swift.String)

        public static var allCases: [DataProtectionStatus] {
            return [
                .activated,
                .archived,
                .deleted,
                .disabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activated: return "ACTIVATED"
            case .archived: return "ARCHIVED"
            case .deleted: return "DELETED"
            case .disabled: return "DISABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataProtectionStatus(rawValue: rawValue) ?? DataProtectionStatus.sdkUnknown(rawValue)
        }
    }
}

extension DeleteAccountPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyName
        case policyType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let policyType = self.policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
    }
}

extension DeleteAccountPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteAccountPolicyInput: Swift.Equatable {
    /// The name of the policy to delete.
    /// This member is required.
    public var policyName: Swift.String?
    /// The type of policy to delete. Currently, the only valid value is DATA_PROTECTION_POLICY.
    /// This member is required.
    public var policyType: CloudWatchLogsClientTypes.PolicyType?

    public init(
        policyName: Swift.String? = nil,
        policyType: CloudWatchLogsClientTypes.PolicyType? = nil
    )
    {
        self.policyName = policyName
        self.policyType = policyType
    }
}

struct DeleteAccountPolicyInputBody: Swift.Equatable {
    let policyName: Swift.String?
    let policyType: CloudWatchLogsClientTypes.PolicyType?
}

extension DeleteAccountPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyName
        case policyType
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
    }
}

extension DeleteAccountPolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteAccountPolicyOutput: Swift.Equatable {

    public init() { }
}

enum DeleteAccountPolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteDataProtectionPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupIdentifier
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupIdentifier = self.logGroupIdentifier {
            try encodeContainer.encode(logGroupIdentifier, forKey: .logGroupIdentifier)
        }
    }
}

extension DeleteDataProtectionPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDataProtectionPolicyInput: Swift.Equatable {
    /// The name or ARN of the log group that you want to delete the data protection policy for.
    /// This member is required.
    public var logGroupIdentifier: Swift.String?

    public init(
        logGroupIdentifier: Swift.String? = nil
    )
    {
        self.logGroupIdentifier = logGroupIdentifier
    }
}

struct DeleteDataProtectionPolicyInputBody: Swift.Equatable {
    let logGroupIdentifier: Swift.String?
}

extension DeleteDataProtectionPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupIdentifier
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupIdentifier)
        logGroupIdentifier = logGroupIdentifierDecoded
    }
}

extension DeleteDataProtectionPolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteDataProtectionPolicyOutput: Swift.Equatable {

    public init() { }
}

enum DeleteDataProtectionPolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteDeliveryDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DeleteDeliveryDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDeliveryDestinationInput: Swift.Equatable {
    /// The name of the delivery destination that you want to delete. You can find a list of delivery destionation names by using the [DescribeDeliveryDestinations](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeDeliveryDestinations.html) operation.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteDeliveryDestinationInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeleteDeliveryDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteDeliveryDestinationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteDeliveryDestinationOutput: Swift.Equatable {

    public init() { }
}

enum DeleteDeliveryDestinationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteDeliveryDestinationPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryDestinationName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryDestinationName = self.deliveryDestinationName {
            try encodeContainer.encode(deliveryDestinationName, forKey: .deliveryDestinationName)
        }
    }
}

extension DeleteDeliveryDestinationPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDeliveryDestinationPolicyInput: Swift.Equatable {
    /// The name of the delivery destination that you want to delete the policy for.
    /// This member is required.
    public var deliveryDestinationName: Swift.String?

    public init(
        deliveryDestinationName: Swift.String? = nil
    )
    {
        self.deliveryDestinationName = deliveryDestinationName
    }
}

struct DeleteDeliveryDestinationPolicyInputBody: Swift.Equatable {
    let deliveryDestinationName: Swift.String?
}

extension DeleteDeliveryDestinationPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryDestinationName
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryDestinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryDestinationName)
        deliveryDestinationName = deliveryDestinationNameDecoded
    }
}

extension DeleteDeliveryDestinationPolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteDeliveryDestinationPolicyOutput: Swift.Equatable {

    public init() { }
}

enum DeleteDeliveryDestinationPolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteDeliveryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }
}

extension DeleteDeliveryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDeliveryInput: Swift.Equatable {
    /// The unique ID of the delivery to delete. You can find the ID of a delivery with the [DescribeDeliveries](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeDeliveries.html) operation.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct DeleteDeliveryInputBody: Swift.Equatable {
    let id: Swift.String?
}

extension DeleteDeliveryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension DeleteDeliveryOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteDeliveryOutput: Swift.Equatable {

    public init() { }
}

enum DeleteDeliveryOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteDeliverySourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension DeleteDeliverySourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDeliverySourceInput: Swift.Equatable {
    /// The name of the delivery source that you want to delete.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct DeleteDeliverySourceInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension DeleteDeliverySourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DeleteDeliverySourceOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteDeliverySourceOutput: Swift.Equatable {

    public init() { }
}

enum DeleteDeliverySourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationName = self.destinationName {
            try encodeContainer.encode(destinationName, forKey: .destinationName)
        }
    }
}

extension DeleteDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDestinationInput: Swift.Equatable {
    /// The name of the destination.
    /// This member is required.
    public var destinationName: Swift.String?

    public init(
        destinationName: Swift.String? = nil
    )
    {
        self.destinationName = destinationName
    }
}

struct DeleteDestinationInputBody: Swift.Equatable {
    let destinationName: Swift.String?
}

extension DeleteDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationName
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationName)
        destinationName = destinationNameDecoded
    }
}

extension DeleteDestinationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteDestinationOutput: Swift.Equatable {

    public init() { }
}

enum DeleteDestinationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteLogAnomalyDetectorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectorArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anomalyDetectorArn = self.anomalyDetectorArn {
            try encodeContainer.encode(anomalyDetectorArn, forKey: .anomalyDetectorArn)
        }
    }
}

extension DeleteLogAnomalyDetectorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteLogAnomalyDetectorInput: Swift.Equatable {
    /// The ARN of the anomaly detector to delete. You can find the ARNs of log anomaly detectors in your account by using the [ListLogAnomalyDetectors](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListLogAnomalyDetectors.html) operation.
    /// This member is required.
    public var anomalyDetectorArn: Swift.String?

    public init(
        anomalyDetectorArn: Swift.String? = nil
    )
    {
        self.anomalyDetectorArn = anomalyDetectorArn
    }
}

struct DeleteLogAnomalyDetectorInputBody: Swift.Equatable {
    let anomalyDetectorArn: Swift.String?
}

extension DeleteLogAnomalyDetectorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectorArn
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let anomalyDetectorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .anomalyDetectorArn)
        anomalyDetectorArn = anomalyDetectorArnDecoded
    }
}

extension DeleteLogAnomalyDetectorOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteLogAnomalyDetectorOutput: Swift.Equatable {

    public init() { }
}

enum DeleteLogAnomalyDetectorOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteLogGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

extension DeleteLogGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteLogGroupInput: Swift.Equatable {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?

    public init(
        logGroupName: Swift.String? = nil
    )
    {
        self.logGroupName = logGroupName
    }
}

struct DeleteLogGroupInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
}

extension DeleteLogGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension DeleteLogGroupOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteLogGroupOutput: Swift.Equatable {

    public init() { }
}

enum DeleteLogGroupOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteLogStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case logStreamName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
    }
}

extension DeleteLogStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteLogStreamInput: Swift.Equatable {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The name of the log stream.
    /// This member is required.
    public var logStreamName: Swift.String?

    public init(
        logGroupName: Swift.String? = nil,
        logStreamName: Swift.String? = nil
    )
    {
        self.logGroupName = logGroupName
        self.logStreamName = logStreamName
    }
}

struct DeleteLogStreamInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let logStreamName: Swift.String?
}

extension DeleteLogStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case logStreamName
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
    }
}

extension DeleteLogStreamOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteLogStreamOutput: Swift.Equatable {

    public init() { }
}

enum DeleteLogStreamOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteMetricFilterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterName
        case logGroupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterName = self.filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

extension DeleteMetricFilterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteMetricFilterInput: Swift.Equatable {
    /// The name of the metric filter.
    /// This member is required.
    public var filterName: Swift.String?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?

    public init(
        filterName: Swift.String? = nil,
        logGroupName: Swift.String? = nil
    )
    {
        self.filterName = filterName
        self.logGroupName = logGroupName
    }
}

struct DeleteMetricFilterInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let filterName: Swift.String?
}

extension DeleteMetricFilterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterName
        case logGroupName
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterName)
        filterName = filterNameDecoded
    }
}

extension DeleteMetricFilterOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteMetricFilterOutput: Swift.Equatable {

    public init() { }
}

enum DeleteMetricFilterOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteQueryDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryDefinitionId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queryDefinitionId = self.queryDefinitionId {
            try encodeContainer.encode(queryDefinitionId, forKey: .queryDefinitionId)
        }
    }
}

extension DeleteQueryDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteQueryDefinitionInput: Swift.Equatable {
    /// The ID of the query definition that you want to delete. You can use [DescribeQueryDefinitions](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeQueryDefinitions.html) to retrieve the IDs of your saved query definitions.
    /// This member is required.
    public var queryDefinitionId: Swift.String?

    public init(
        queryDefinitionId: Swift.String? = nil
    )
    {
        self.queryDefinitionId = queryDefinitionId
    }
}

struct DeleteQueryDefinitionInputBody: Swift.Equatable {
    let queryDefinitionId: Swift.String?
}

extension DeleteQueryDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryDefinitionId
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryDefinitionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryDefinitionId)
        queryDefinitionId = queryDefinitionIdDecoded
    }
}

extension DeleteQueryDefinitionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DeleteQueryDefinitionOutputBody = try responseDecoder.decode(responseBody: data)
            self.success = output.success
        } else {
            self.success = false
        }
    }
}

public struct DeleteQueryDefinitionOutput: Swift.Equatable {
    /// A value of TRUE indicates that the operation succeeded. FALSE indicates that the operation failed.
    public var success: Swift.Bool

    public init(
        success: Swift.Bool = false
    )
    {
        self.success = success
    }
}

struct DeleteQueryDefinitionOutputBody: Swift.Equatable {
    let success: Swift.Bool
}

extension DeleteQueryDefinitionOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case success
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let successDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .success) ?? false
        success = successDecoded
    }
}

enum DeleteQueryDefinitionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }
}

extension DeleteResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteResourcePolicyInput: Swift.Equatable {
    /// The name of the policy to be revoked. This parameter is required.
    public var policyName: Swift.String?

    public init(
        policyName: Swift.String? = nil
    )
    {
        self.policyName = policyName
    }
}

struct DeleteResourcePolicyInputBody: Swift.Equatable {
    let policyName: Swift.String?
}

extension DeleteResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyName
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
    }
}

extension DeleteResourcePolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteResourcePolicyOutput: Swift.Equatable {

    public init() { }
}

enum DeleteResourcePolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteRetentionPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

extension DeleteRetentionPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRetentionPolicyInput: Swift.Equatable {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?

    public init(
        logGroupName: Swift.String? = nil
    )
    {
        self.logGroupName = logGroupName
    }
}

struct DeleteRetentionPolicyInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
}

extension DeleteRetentionPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension DeleteRetentionPolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteRetentionPolicyOutput: Swift.Equatable {

    public init() { }
}

enum DeleteRetentionPolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteSubscriptionFilterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterName
        case logGroupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterName = self.filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

extension DeleteSubscriptionFilterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteSubscriptionFilterInput: Swift.Equatable {
    /// The name of the subscription filter.
    /// This member is required.
    public var filterName: Swift.String?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?

    public init(
        filterName: Swift.String? = nil,
        logGroupName: Swift.String? = nil
    )
    {
        self.filterName = filterName
        self.logGroupName = logGroupName
    }
}

struct DeleteSubscriptionFilterInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let filterName: Swift.String?
}

extension DeleteSubscriptionFilterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterName
        case logGroupName
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterName)
        filterName = filterNameDecoded
    }
}

extension DeleteSubscriptionFilterOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteSubscriptionFilterOutput: Swift.Equatable {

    public init() { }
}

enum DeleteSubscriptionFilterOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CloudWatchLogsClientTypes.Delivery: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case deliveryDestinationArn
        case deliveryDestinationType
        case deliverySourceName
        case id
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let deliveryDestinationArn = self.deliveryDestinationArn {
            try encodeContainer.encode(deliveryDestinationArn, forKey: .deliveryDestinationArn)
        }
        if let deliveryDestinationType = self.deliveryDestinationType {
            try encodeContainer.encode(deliveryDestinationType.rawValue, forKey: .deliveryDestinationType)
        }
        if let deliverySourceName = self.deliverySourceName {
            try encodeContainer.encode(deliverySourceName, forKey: .deliverySourceName)
        }
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let deliverySourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliverySourceName)
        deliverySourceName = deliverySourceNameDecoded
        let deliveryDestinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryDestinationArn)
        deliveryDestinationArn = deliveryDestinationArnDecoded
        let deliveryDestinationTypeDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.DeliveryDestinationType.self, forKey: .deliveryDestinationType)
        deliveryDestinationType = deliveryDestinationTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CloudWatchLogsClientTypes {
    /// This structure contains information about one delivery in your account. A delivery is a connection between a logical delivery source and a logical delivery destination. For more information, see [CreateDelivery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html). You can't update an existing delivery. You can only create and delete deliveries.
    public struct Delivery: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that uniquely identifies this delivery.
        public var arn: Swift.String?
        /// The ARN of the delivery destination that is associated with this delivery.
        public var deliveryDestinationArn: Swift.String?
        /// Displays whether the delivery destination associated with this delivery is CloudWatch Logs, Amazon S3, or Kinesis Data Firehose.
        public var deliveryDestinationType: CloudWatchLogsClientTypes.DeliveryDestinationType?
        /// The name of the delivery source that is associated with this delivery.
        public var deliverySourceName: Swift.String?
        /// The unique ID that identifies this delivery in your account.
        public var id: Swift.String?
        /// The tags that have been assigned to this delivery.
        public var tags: [Swift.String:Swift.String]?

        public init(
            arn: Swift.String? = nil,
            deliveryDestinationArn: Swift.String? = nil,
            deliveryDestinationType: CloudWatchLogsClientTypes.DeliveryDestinationType? = nil,
            deliverySourceName: Swift.String? = nil,
            id: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.arn = arn
            self.deliveryDestinationArn = deliveryDestinationArn
            self.deliveryDestinationType = deliveryDestinationType
            self.deliverySourceName = deliverySourceName
            self.id = id
            self.tags = tags
        }
    }

}

extension CloudWatchLogsClientTypes.DeliveryDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case deliveryDestinationConfiguration
        case deliveryDestinationType
        case name
        case outputFormat
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let deliveryDestinationConfiguration = self.deliveryDestinationConfiguration {
            try encodeContainer.encode(deliveryDestinationConfiguration, forKey: .deliveryDestinationConfiguration)
        }
        if let deliveryDestinationType = self.deliveryDestinationType {
            try encodeContainer.encode(deliveryDestinationType.rawValue, forKey: .deliveryDestinationType)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputFormat = self.outputFormat {
            try encodeContainer.encode(outputFormat.rawValue, forKey: .outputFormat)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let deliveryDestinationTypeDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.DeliveryDestinationType.self, forKey: .deliveryDestinationType)
        deliveryDestinationType = deliveryDestinationTypeDecoded
        let outputFormatDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.OutputFormat.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
        let deliveryDestinationConfigurationDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.DeliveryDestinationConfiguration.self, forKey: .deliveryDestinationConfiguration)
        deliveryDestinationConfiguration = deliveryDestinationConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CloudWatchLogsClientTypes {
    /// This structure contains information about one delivery destination in your account. A delivery destination is an Amazon Web Services resource that represents an Amazon Web Services service that logs can be sent to. CloudWatch Logs, Amazon S3, are supported as Kinesis Data Firehose delivery destinations. To configure logs delivery between a supported Amazon Web Services service and a destination, you must do the following:
    ///
    /// * Create a delivery source, which is a logical object that represents the resource that is actually sending the logs. For more information, see [PutDeliverySource](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDeliverySource.html).
    ///
    /// * Create a delivery destination, which is a logical object that represents the actual delivery destination.
    ///
    /// * If you are delivering logs cross-account, you must use [PutDeliveryDestinationPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDeliveryDestinationPolicy.html) in the destination account to assign an IAM policy to the destination. This policy allows delivery to that destination.
    ///
    /// * Create a delivery by pairing exactly one delivery source and one delivery destination. For more information, see [CreateDelivery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html).
    ///
    ///
    /// You can configure a single delivery source to send logs to multiple destinations by creating multiple deliveries. You can also create multiple deliveries to configure multiple delivery sources to send logs to the same delivery destination.
    public struct DeliveryDestination: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that uniquely identifies this delivery destination.
        public var arn: Swift.String?
        /// A structure that contains the ARN of the Amazon Web Services resource that will receive the logs.
        public var deliveryDestinationConfiguration: CloudWatchLogsClientTypes.DeliveryDestinationConfiguration?
        /// Displays whether this delivery destination is CloudWatch Logs, Amazon S3, or Kinesis Data Firehose.
        public var deliveryDestinationType: CloudWatchLogsClientTypes.DeliveryDestinationType?
        /// The name of this delivery destination.
        public var name: Swift.String?
        /// The format of the logs that are sent to this delivery destination.
        public var outputFormat: CloudWatchLogsClientTypes.OutputFormat?
        /// The tags that have been assigned to this delivery destination.
        public var tags: [Swift.String:Swift.String]?

        public init(
            arn: Swift.String? = nil,
            deliveryDestinationConfiguration: CloudWatchLogsClientTypes.DeliveryDestinationConfiguration? = nil,
            deliveryDestinationType: CloudWatchLogsClientTypes.DeliveryDestinationType? = nil,
            name: Swift.String? = nil,
            outputFormat: CloudWatchLogsClientTypes.OutputFormat? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.arn = arn
            self.deliveryDestinationConfiguration = deliveryDestinationConfiguration
            self.deliveryDestinationType = deliveryDestinationType
            self.name = name
            self.outputFormat = outputFormat
            self.tags = tags
        }
    }

}

extension CloudWatchLogsClientTypes.DeliveryDestinationConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationResourceArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationResourceArn = self.destinationResourceArn {
            try encodeContainer.encode(destinationResourceArn, forKey: .destinationResourceArn)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationResourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationResourceArn)
        destinationResourceArn = destinationResourceArnDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// A structure that contains information about one logs delivery destination.
    public struct DeliveryDestinationConfiguration: Swift.Equatable {
        /// The ARN of the Amazon Web Services destination that this delivery destination represents. That Amazon Web Services destination can be a log group in CloudWatch Logs, an Amazon S3 bucket, or a delivery stream in Kinesis Data Firehose.
        /// This member is required.
        public var destinationResourceArn: Swift.String?

        public init(
            destinationResourceArn: Swift.String? = nil
        )
        {
            self.destinationResourceArn = destinationResourceArn
        }
    }

}

extension CloudWatchLogsClientTypes {
    public enum DeliveryDestinationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cwl
        case fh
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliveryDestinationType] {
            return [
                .cwl,
                .fh,
                .s3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cwl: return "CWL"
            case .fh: return "FH"
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DeliveryDestinationType(rawValue: rawValue) ?? DeliveryDestinationType.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchLogsClientTypes.DeliverySource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case logType
        case name
        case resourceArns
        case service
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let logType = self.logType {
            try encodeContainer.encode(logType, forKey: .logType)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceArns = resourceArns {
            var resourceArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceArns)
            for arn0 in resourceArns {
                try resourceArnsContainer.encode(arn0)
            }
        }
        if let service = self.service {
            try encodeContainer.encode(service, forKey: .service)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let resourceArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceArns)
        var resourceArnsDecoded0:[Swift.String]? = nil
        if let resourceArnsContainer = resourceArnsContainer {
            resourceArnsDecoded0 = [Swift.String]()
            for string0 in resourceArnsContainer {
                if let string0 = string0 {
                    resourceArnsDecoded0?.append(string0)
                }
            }
        }
        resourceArns = resourceArnsDecoded0
        let serviceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .service)
        service = serviceDecoded
        let logTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logType)
        logType = logTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CloudWatchLogsClientTypes {
    /// This structure contains information about one delivery source in your account. A delivery source is an Amazon Web Services resource that sends logs to an Amazon Web Services destination. The destination can be CloudWatch Logs, Amazon S3, or Kinesis Data Firehose. Only some Amazon Web Services services support being configured as a delivery source. These services are listed as Supported [V2 Permissions] in the table at [Enabling logging from Amazon Web Services services.](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html) To configure logs delivery between a supported Amazon Web Services service and a destination, you must do the following:
    ///
    /// * Create a delivery source, which is a logical object that represents the resource that is actually sending the logs. For more information, see [PutDeliverySource](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDeliverySource.html).
    ///
    /// * Create a delivery destination, which is a logical object that represents the actual delivery destination. For more information, see [PutDeliveryDestination](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDeliveryDestination.html).
    ///
    /// * If you are delivering logs cross-account, you must use [PutDeliveryDestinationPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDeliveryDestinationPolicy.html) in the destination account to assign an IAM policy to the destination. This policy allows delivery to that destination.
    ///
    /// * Create a delivery by pairing exactly one delivery source and one delivery destination. For more information, see [CreateDelivery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html).
    ///
    ///
    /// You can configure a single delivery source to send logs to multiple destinations by creating multiple deliveries. You can also create multiple deliveries to configure multiple delivery sources to send logs to the same delivery destination.
    public struct DeliverySource: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that uniquely identifies this delivery source.
        public var arn: Swift.String?
        /// The type of log that the source is sending. For valid values for this parameter, see the documentation for the source service.
        public var logType: Swift.String?
        /// The unique name of the delivery source.
        public var name: Swift.String?
        /// This array contains the ARN of the Amazon Web Services resource that sends logs and is represented by this delivery source. Currently, only one ARN can be in the array.
        public var resourceArns: [Swift.String]?
        /// The Amazon Web Services service that is sending logs.
        public var service: Swift.String?
        /// The tags that have been assigned to this delivery source.
        public var tags: [Swift.String:Swift.String]?

        public init(
            arn: Swift.String? = nil,
            logType: Swift.String? = nil,
            name: Swift.String? = nil,
            resourceArns: [Swift.String]? = nil,
            service: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil
        )
        {
            self.arn = arn
            self.logType = logType
            self.name = name
            self.resourceArns = resourceArns
            self.service = service
            self.tags = tags
        }
    }

}

extension DescribeAccountPoliciesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIdentifiers
        case policyName
        case policyType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIdentifiers = accountIdentifiers {
            var accountIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIdentifiers)
            for accountid0 in accountIdentifiers {
                try accountIdentifiersContainer.encode(accountid0)
            }
        }
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let policyType = self.policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
    }
}

extension DescribeAccountPoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeAccountPoliciesInput: Swift.Equatable {
    /// If you are using an account that is set up as a monitoring account for CloudWatch unified cross-account observability, you can use this to specify the account ID of a source account. If you do, the operation returns the account policy for the specified account. Currently, you can specify only one account ID in this parameter. If you omit this parameter, only the policy in the current account is returned.
    public var accountIdentifiers: [Swift.String]?
    /// Use this parameter to limit the returned policies to only the policy with the name that you specify.
    public var policyName: Swift.String?
    /// Use this parameter to limit the returned policies to only the policies that match the policy type that you specify. Currently, the only valid value is DATA_PROTECTION_POLICY.
    /// This member is required.
    public var policyType: CloudWatchLogsClientTypes.PolicyType?

    public init(
        accountIdentifiers: [Swift.String]? = nil,
        policyName: Swift.String? = nil,
        policyType: CloudWatchLogsClientTypes.PolicyType? = nil
    )
    {
        self.accountIdentifiers = accountIdentifiers
        self.policyName = policyName
        self.policyType = policyType
    }
}

struct DescribeAccountPoliciesInputBody: Swift.Equatable {
    let policyType: CloudWatchLogsClientTypes.PolicyType?
    let policyName: Swift.String?
    let accountIdentifiers: [Swift.String]?
}

extension DescribeAccountPoliciesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIdentifiers
        case policyName
        case policyType
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyTypeDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let accountIdentifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIdentifiers)
        var accountIdentifiersDecoded0:[Swift.String]? = nil
        if let accountIdentifiersContainer = accountIdentifiersContainer {
            accountIdentifiersDecoded0 = [Swift.String]()
            for string0 in accountIdentifiersContainer {
                if let string0 = string0 {
                    accountIdentifiersDecoded0?.append(string0)
                }
            }
        }
        accountIdentifiers = accountIdentifiersDecoded0
    }
}

extension DescribeAccountPoliciesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeAccountPoliciesOutputBody = try responseDecoder.decode(responseBody: data)
            self.accountPolicies = output.accountPolicies
        } else {
            self.accountPolicies = nil
        }
    }
}

public struct DescribeAccountPoliciesOutput: Swift.Equatable {
    /// An array of structures that contain information about the CloudWatch Logs account policies that match the specified filters.
    public var accountPolicies: [CloudWatchLogsClientTypes.AccountPolicy]?

    public init(
        accountPolicies: [CloudWatchLogsClientTypes.AccountPolicy]? = nil
    )
    {
        self.accountPolicies = accountPolicies
    }
}

struct DescribeAccountPoliciesOutputBody: Swift.Equatable {
    let accountPolicies: [CloudWatchLogsClientTypes.AccountPolicy]?
}

extension DescribeAccountPoliciesOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountPolicies
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountPoliciesContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.AccountPolicy?].self, forKey: .accountPolicies)
        var accountPoliciesDecoded0:[CloudWatchLogsClientTypes.AccountPolicy]? = nil
        if let accountPoliciesContainer = accountPoliciesContainer {
            accountPoliciesDecoded0 = [CloudWatchLogsClientTypes.AccountPolicy]()
            for structure0 in accountPoliciesContainer {
                if let structure0 = structure0 {
                    accountPoliciesDecoded0?.append(structure0)
                }
            }
        }
        accountPolicies = accountPoliciesDecoded0
    }
}

enum DescribeAccountPoliciesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeDeliveriesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeDeliveriesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDeliveriesInput: Swift.Equatable {
    /// Optionally specify the maximum number of deliveries to return in the response.
    public var limit: Swift.Int?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeDeliveriesInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let limit: Swift.Int?
}

extension DescribeDeliveriesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit
        case nextToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeDeliveriesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeDeliveriesOutputBody = try responseDecoder.decode(responseBody: data)
            self.deliveries = output.deliveries
            self.nextToken = output.nextToken
        } else {
            self.deliveries = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeDeliveriesOutput: Swift.Equatable {
    /// An array of structures. Each structure contains information about one delivery in the account.
    public var deliveries: [CloudWatchLogsClientTypes.Delivery]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        deliveries: [CloudWatchLogsClientTypes.Delivery]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deliveries = deliveries
        self.nextToken = nextToken
    }
}

struct DescribeDeliveriesOutputBody: Swift.Equatable {
    let deliveries: [CloudWatchLogsClientTypes.Delivery]?
    let nextToken: Swift.String?
}

extension DescribeDeliveriesOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveries
        case nextToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveriesContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.Delivery?].self, forKey: .deliveries)
        var deliveriesDecoded0:[CloudWatchLogsClientTypes.Delivery]? = nil
        if let deliveriesContainer = deliveriesContainer {
            deliveriesDecoded0 = [CloudWatchLogsClientTypes.Delivery]()
            for structure0 in deliveriesContainer {
                if let structure0 = structure0 {
                    deliveriesDecoded0?.append(structure0)
                }
            }
        }
        deliveries = deliveriesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum DescribeDeliveriesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeDeliveryDestinationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeDeliveryDestinationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDeliveryDestinationsInput: Swift.Equatable {
    /// Optionally specify the maximum number of delivery destinations to return in the response.
    public var limit: Swift.Int?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeDeliveryDestinationsInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let limit: Swift.Int?
}

extension DescribeDeliveryDestinationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit
        case nextToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeDeliveryDestinationsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeDeliveryDestinationsOutputBody = try responseDecoder.decode(responseBody: data)
            self.deliveryDestinations = output.deliveryDestinations
            self.nextToken = output.nextToken
        } else {
            self.deliveryDestinations = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeDeliveryDestinationsOutput: Swift.Equatable {
    /// An array of structures. Each structure contains information about one delivery destination in the account.
    public var deliveryDestinations: [CloudWatchLogsClientTypes.DeliveryDestination]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        deliveryDestinations: [CloudWatchLogsClientTypes.DeliveryDestination]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deliveryDestinations = deliveryDestinations
        self.nextToken = nextToken
    }
}

struct DescribeDeliveryDestinationsOutputBody: Swift.Equatable {
    let deliveryDestinations: [CloudWatchLogsClientTypes.DeliveryDestination]?
    let nextToken: Swift.String?
}

extension DescribeDeliveryDestinationsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryDestinations
        case nextToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryDestinationsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.DeliveryDestination?].self, forKey: .deliveryDestinations)
        var deliveryDestinationsDecoded0:[CloudWatchLogsClientTypes.DeliveryDestination]? = nil
        if let deliveryDestinationsContainer = deliveryDestinationsContainer {
            deliveryDestinationsDecoded0 = [CloudWatchLogsClientTypes.DeliveryDestination]()
            for structure0 in deliveryDestinationsContainer {
                if let structure0 = structure0 {
                    deliveryDestinationsDecoded0?.append(structure0)
                }
            }
        }
        deliveryDestinations = deliveryDestinationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum DescribeDeliveryDestinationsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeDeliverySourcesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeDeliverySourcesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDeliverySourcesInput: Swift.Equatable {
    /// Optionally specify the maximum number of delivery sources to return in the response.
    public var limit: Swift.Int?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeDeliverySourcesInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let limit: Swift.Int?
}

extension DescribeDeliverySourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit
        case nextToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeDeliverySourcesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeDeliverySourcesOutputBody = try responseDecoder.decode(responseBody: data)
            self.deliverySources = output.deliverySources
            self.nextToken = output.nextToken
        } else {
            self.deliverySources = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeDeliverySourcesOutput: Swift.Equatable {
    /// An array of structures. Each structure contains information about one delivery source in the account.
    public var deliverySources: [CloudWatchLogsClientTypes.DeliverySource]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        deliverySources: [CloudWatchLogsClientTypes.DeliverySource]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deliverySources = deliverySources
        self.nextToken = nextToken
    }
}

struct DescribeDeliverySourcesOutputBody: Swift.Equatable {
    let deliverySources: [CloudWatchLogsClientTypes.DeliverySource]?
    let nextToken: Swift.String?
}

extension DescribeDeliverySourcesOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliverySources
        case nextToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliverySourcesContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.DeliverySource?].self, forKey: .deliverySources)
        var deliverySourcesDecoded0:[CloudWatchLogsClientTypes.DeliverySource]? = nil
        if let deliverySourcesContainer = deliverySourcesContainer {
            deliverySourcesDecoded0 = [CloudWatchLogsClientTypes.DeliverySource]()
            for structure0 in deliverySourcesContainer {
                if let structure0 = structure0 {
                    deliverySourcesDecoded0?.append(structure0)
                }
            }
        }
        deliverySources = deliverySourcesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum DescribeDeliverySourcesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeDestinationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationNamePrefix = "DestinationNamePrefix"
        case limit
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationNamePrefix = self.destinationNamePrefix {
            try encodeContainer.encode(destinationNamePrefix, forKey: .destinationNamePrefix)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeDestinationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDestinationsInput: Swift.Equatable {
    /// The prefix to match. If you don't specify a value, no prefix filter is applied.
    public var destinationNamePrefix: Swift.String?
    /// The maximum number of items returned. If you don't specify a value, the default maximum value of 50 items is used.
    public var limit: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init(
        destinationNamePrefix: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.destinationNamePrefix = destinationNamePrefix
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeDestinationsInputBody: Swift.Equatable {
    let destinationNamePrefix: Swift.String?
    let nextToken: Swift.String?
    let limit: Swift.Int?
}

extension DescribeDestinationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationNamePrefix = "DestinationNamePrefix"
        case limit
        case nextToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationNamePrefix)
        destinationNamePrefix = destinationNamePrefixDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeDestinationsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeDestinationsOutputBody = try responseDecoder.decode(responseBody: data)
            self.destinations = output.destinations
            self.nextToken = output.nextToken
        } else {
            self.destinations = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeDestinationsOutput: Swift.Equatable {
    /// The destinations.
    public var destinations: [CloudWatchLogsClientTypes.Destination]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        destinations: [CloudWatchLogsClientTypes.Destination]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.destinations = destinations
        self.nextToken = nextToken
    }
}

struct DescribeDestinationsOutputBody: Swift.Equatable {
    let destinations: [CloudWatchLogsClientTypes.Destination]?
    let nextToken: Swift.String?
}

extension DescribeDestinationsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinations
        case nextToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.Destination?].self, forKey: .destinations)
        var destinationsDecoded0:[CloudWatchLogsClientTypes.Destination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [CloudWatchLogsClientTypes.Destination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum DescribeDestinationsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeExportTasksInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit
        case nextToken
        case statusCode
        case taskId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let statusCode = self.statusCode {
            try encodeContainer.encode(statusCode.rawValue, forKey: .statusCode)
        }
        if let taskId = self.taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
    }
}

extension DescribeExportTasksInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeExportTasksInput: Swift.Equatable {
    /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    public var limit: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?
    /// The status code of the export task. Specifying a status code filters the results to zero or more export tasks.
    public var statusCode: CloudWatchLogsClientTypes.ExportTaskStatusCode?
    /// The ID of the export task. Specifying a task ID filters the results to one or zero export tasks.
    public var taskId: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        statusCode: CloudWatchLogsClientTypes.ExportTaskStatusCode? = nil,
        taskId: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.statusCode = statusCode
        self.taskId = taskId
    }
}

struct DescribeExportTasksInputBody: Swift.Equatable {
    let taskId: Swift.String?
    let statusCode: CloudWatchLogsClientTypes.ExportTaskStatusCode?
    let nextToken: Swift.String?
    let limit: Swift.Int?
}

extension DescribeExportTasksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit
        case nextToken
        case statusCode
        case taskId
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.ExportTaskStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeExportTasksOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeExportTasksOutputBody = try responseDecoder.decode(responseBody: data)
            self.exportTasks = output.exportTasks
            self.nextToken = output.nextToken
        } else {
            self.exportTasks = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeExportTasksOutput: Swift.Equatable {
    /// The export tasks.
    public var exportTasks: [CloudWatchLogsClientTypes.ExportTask]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        exportTasks: [CloudWatchLogsClientTypes.ExportTask]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.exportTasks = exportTasks
        self.nextToken = nextToken
    }
}

struct DescribeExportTasksOutputBody: Swift.Equatable {
    let exportTasks: [CloudWatchLogsClientTypes.ExportTask]?
    let nextToken: Swift.String?
}

extension DescribeExportTasksOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportTasks
        case nextToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportTasksContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.ExportTask?].self, forKey: .exportTasks)
        var exportTasksDecoded0:[CloudWatchLogsClientTypes.ExportTask]? = nil
        if let exportTasksContainer = exportTasksContainer {
            exportTasksDecoded0 = [CloudWatchLogsClientTypes.ExportTask]()
            for structure0 in exportTasksContainer {
                if let structure0 = structure0 {
                    exportTasksDecoded0?.append(structure0)
                }
            }
        }
        exportTasks = exportTasksDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum DescribeExportTasksOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeLogGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIdentifiers
        case includeLinkedAccounts
        case limit
        case logGroupClass
        case logGroupNamePattern
        case logGroupNamePrefix
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIdentifiers = accountIdentifiers {
            var accountIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIdentifiers)
            for accountid0 in accountIdentifiers {
                try accountIdentifiersContainer.encode(accountid0)
            }
        }
        if let includeLinkedAccounts = self.includeLinkedAccounts {
            try encodeContainer.encode(includeLinkedAccounts, forKey: .includeLinkedAccounts)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupClass = self.logGroupClass {
            try encodeContainer.encode(logGroupClass.rawValue, forKey: .logGroupClass)
        }
        if let logGroupNamePattern = self.logGroupNamePattern {
            try encodeContainer.encode(logGroupNamePattern, forKey: .logGroupNamePattern)
        }
        if let logGroupNamePrefix = self.logGroupNamePrefix {
            try encodeContainer.encode(logGroupNamePrefix, forKey: .logGroupNamePrefix)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeLogGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLogGroupsInput: Swift.Equatable {
    /// When includeLinkedAccounts is set to True, use this parameter to specify the list of accounts to search. You can specify as many as 20 account IDs in the array.
    public var accountIdentifiers: [Swift.String]?
    /// If you are using a monitoring account, set this to True to have the operation return log groups in the accounts listed in accountIdentifiers. If this parameter is set to true and accountIdentifiers contains a null value, the operation returns all log groups in the monitoring account and all log groups in all source accounts that are linked to the monitoring account.
    public var includeLinkedAccounts: Swift.Bool?
    /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    public var limit: Swift.Int?
    /// Specifies the log group class for this log group. There are two classes:
    ///
    /// * The Standard log class supports all CloudWatch Logs features.
    ///
    /// * The Infrequent Access log class supports a subset of CloudWatch Logs features and incurs lower costs.
    ///
    ///
    /// For details about the features supported by each class, see [Log classes](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch_Logs_Log_Classes.html)
    public var logGroupClass: CloudWatchLogsClientTypes.LogGroupClass?
    /// If you specify a string for this parameter, the operation returns only log groups that have names that match the string based on a case-sensitive substring search. For example, if you specify Foo, log groups named FooBar, aws/Foo, and GroupFoo would match, but foo, F/o/o and Froo would not match. If you specify logGroupNamePattern in your request, then only arn, creationTime, and logGroupName are included in the response. logGroupNamePattern and logGroupNamePrefix are mutually exclusive. Only one of these parameters can be passed.
    public var logGroupNamePattern: Swift.String?
    /// The prefix to match. logGroupNamePrefix and logGroupNamePattern are mutually exclusive. Only one of these parameters can be passed.
    public var logGroupNamePrefix: Swift.String?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init(
        accountIdentifiers: [Swift.String]? = nil,
        includeLinkedAccounts: Swift.Bool? = nil,
        limit: Swift.Int? = nil,
        logGroupClass: CloudWatchLogsClientTypes.LogGroupClass? = nil,
        logGroupNamePattern: Swift.String? = nil,
        logGroupNamePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accountIdentifiers = accountIdentifiers
        self.includeLinkedAccounts = includeLinkedAccounts
        self.limit = limit
        self.logGroupClass = logGroupClass
        self.logGroupNamePattern = logGroupNamePattern
        self.logGroupNamePrefix = logGroupNamePrefix
        self.nextToken = nextToken
    }
}

struct DescribeLogGroupsInputBody: Swift.Equatable {
    let accountIdentifiers: [Swift.String]?
    let logGroupNamePrefix: Swift.String?
    let logGroupNamePattern: Swift.String?
    let nextToken: Swift.String?
    let limit: Swift.Int?
    let includeLinkedAccounts: Swift.Bool?
    let logGroupClass: CloudWatchLogsClientTypes.LogGroupClass?
}

extension DescribeLogGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIdentifiers
        case includeLinkedAccounts
        case limit
        case logGroupClass
        case logGroupNamePattern
        case logGroupNamePrefix
        case nextToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdentifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIdentifiers)
        var accountIdentifiersDecoded0:[Swift.String]? = nil
        if let accountIdentifiersContainer = accountIdentifiersContainer {
            accountIdentifiersDecoded0 = [Swift.String]()
            for string0 in accountIdentifiersContainer {
                if let string0 = string0 {
                    accountIdentifiersDecoded0?.append(string0)
                }
            }
        }
        accountIdentifiers = accountIdentifiersDecoded0
        let logGroupNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupNamePrefix)
        logGroupNamePrefix = logGroupNamePrefixDecoded
        let logGroupNamePatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupNamePattern)
        logGroupNamePattern = logGroupNamePatternDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let includeLinkedAccountsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeLinkedAccounts)
        includeLinkedAccounts = includeLinkedAccountsDecoded
        let logGroupClassDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.LogGroupClass.self, forKey: .logGroupClass)
        logGroupClass = logGroupClassDecoded
    }
}

extension DescribeLogGroupsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeLogGroupsOutputBody = try responseDecoder.decode(responseBody: data)
            self.logGroups = output.logGroups
            self.nextToken = output.nextToken
        } else {
            self.logGroups = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeLogGroupsOutput: Swift.Equatable {
    /// The log groups. If the retentionInDays value is not included for a log group, then that log group's events do not expire.
    public var logGroups: [CloudWatchLogsClientTypes.LogGroup]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        logGroups: [CloudWatchLogsClientTypes.LogGroup]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.logGroups = logGroups
        self.nextToken = nextToken
    }
}

struct DescribeLogGroupsOutputBody: Swift.Equatable {
    let logGroups: [CloudWatchLogsClientTypes.LogGroup]?
    let nextToken: Swift.String?
}

extension DescribeLogGroupsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroups
        case nextToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.LogGroup?].self, forKey: .logGroups)
        var logGroupsDecoded0:[CloudWatchLogsClientTypes.LogGroup]? = nil
        if let logGroupsContainer = logGroupsContainer {
            logGroupsDecoded0 = [CloudWatchLogsClientTypes.LogGroup]()
            for structure0 in logGroupsContainer {
                if let structure0 = structure0 {
                    logGroupsDecoded0?.append(structure0)
                }
            }
        }
        logGroups = logGroupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum DescribeLogGroupsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeLogStreamsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case descending
        case limit
        case logGroupIdentifier
        case logGroupName
        case logStreamNamePrefix
        case nextToken
        case orderBy
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let descending = self.descending {
            try encodeContainer.encode(descending, forKey: .descending)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupIdentifier = self.logGroupIdentifier {
            try encodeContainer.encode(logGroupIdentifier, forKey: .logGroupIdentifier)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamNamePrefix = self.logStreamNamePrefix {
            try encodeContainer.encode(logStreamNamePrefix, forKey: .logStreamNamePrefix)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let orderBy = self.orderBy {
            try encodeContainer.encode(orderBy.rawValue, forKey: .orderBy)
        }
    }
}

extension DescribeLogStreamsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLogStreamsInput: Swift.Equatable {
    /// If the value is true, results are returned in descending order. If the value is to false, results are returned in ascending order. The default value is false.
    public var descending: Swift.Bool?
    /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    public var limit: Swift.Int?
    /// Specify either the name or ARN of the log group to view. If the log group is in a source account and you are using a monitoring account, you must use the log group ARN. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupIdentifier: Swift.String?
    /// The name of the log group. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupName: Swift.String?
    /// The prefix to match. If orderBy is LastEventTime, you cannot specify this parameter.
    public var logStreamNamePrefix: Swift.String?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?
    /// If the value is LogStreamName, the results are ordered by log stream name. If the value is LastEventTime, the results are ordered by the event time. The default value is LogStreamName. If you order the results by event time, you cannot specify the logStreamNamePrefix parameter. lastEventTimestamp represents the time of the most recent log event in the log stream in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. lastEventTimestamp updates on an eventual consistency basis. It typically updates in less than an hour from ingestion, but in rare situations might take longer.
    public var orderBy: CloudWatchLogsClientTypes.OrderBy?

    public init(
        descending: Swift.Bool? = nil,
        limit: Swift.Int? = nil,
        logGroupIdentifier: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        logStreamNamePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        orderBy: CloudWatchLogsClientTypes.OrderBy? = nil
    )
    {
        self.descending = descending
        self.limit = limit
        self.logGroupIdentifier = logGroupIdentifier
        self.logGroupName = logGroupName
        self.logStreamNamePrefix = logStreamNamePrefix
        self.nextToken = nextToken
        self.orderBy = orderBy
    }
}

struct DescribeLogStreamsInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let logGroupIdentifier: Swift.String?
    let logStreamNamePrefix: Swift.String?
    let orderBy: CloudWatchLogsClientTypes.OrderBy?
    let descending: Swift.Bool?
    let nextToken: Swift.String?
    let limit: Swift.Int?
}

extension DescribeLogStreamsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case descending
        case limit
        case logGroupIdentifier
        case logGroupName
        case logStreamNamePrefix
        case nextToken
        case orderBy
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logGroupIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupIdentifier)
        logGroupIdentifier = logGroupIdentifierDecoded
        let logStreamNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamNamePrefix)
        logStreamNamePrefix = logStreamNamePrefixDecoded
        let orderByDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.OrderBy.self, forKey: .orderBy)
        orderBy = orderByDecoded
        let descendingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .descending)
        descending = descendingDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeLogStreamsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeLogStreamsOutputBody = try responseDecoder.decode(responseBody: data)
            self.logStreams = output.logStreams
            self.nextToken = output.nextToken
        } else {
            self.logStreams = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeLogStreamsOutput: Swift.Equatable {
    /// The log streams.
    public var logStreams: [CloudWatchLogsClientTypes.LogStream]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        logStreams: [CloudWatchLogsClientTypes.LogStream]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.logStreams = logStreams
        self.nextToken = nextToken
    }
}

struct DescribeLogStreamsOutputBody: Swift.Equatable {
    let logStreams: [CloudWatchLogsClientTypes.LogStream]?
    let nextToken: Swift.String?
}

extension DescribeLogStreamsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logStreams
        case nextToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logStreamsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.LogStream?].self, forKey: .logStreams)
        var logStreamsDecoded0:[CloudWatchLogsClientTypes.LogStream]? = nil
        if let logStreamsContainer = logStreamsContainer {
            logStreamsDecoded0 = [CloudWatchLogsClientTypes.LogStream]()
            for structure0 in logStreamsContainer {
                if let structure0 = structure0 {
                    logStreamsDecoded0?.append(structure0)
                }
            }
        }
        logStreams = logStreamsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum DescribeLogStreamsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeMetricFiltersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterNamePrefix
        case limit
        case logGroupName
        case metricName
        case metricNamespace
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterNamePrefix = self.filterNamePrefix {
            try encodeContainer.encode(filterNamePrefix, forKey: .filterNamePrefix)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let metricNamespace = self.metricNamespace {
            try encodeContainer.encode(metricNamespace, forKey: .metricNamespace)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeMetricFiltersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeMetricFiltersInput: Swift.Equatable {
    /// The prefix to match. CloudWatch Logs uses the value that you set here only if you also include the logGroupName parameter in your request.
    public var filterNamePrefix: Swift.String?
    /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    public var limit: Swift.Int?
    /// The name of the log group.
    public var logGroupName: Swift.String?
    /// Filters results to include only those with the specified metric name. If you include this parameter in your request, you must also include the metricNamespace parameter.
    public var metricName: Swift.String?
    /// Filters results to include only those in the specified namespace. If you include this parameter in your request, you must also include the metricName parameter.
    public var metricNamespace: Swift.String?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init(
        filterNamePrefix: Swift.String? = nil,
        limit: Swift.Int? = nil,
        logGroupName: Swift.String? = nil,
        metricName: Swift.String? = nil,
        metricNamespace: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filterNamePrefix = filterNamePrefix
        self.limit = limit
        self.logGroupName = logGroupName
        self.metricName = metricName
        self.metricNamespace = metricNamespace
        self.nextToken = nextToken
    }
}

struct DescribeMetricFiltersInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let filterNamePrefix: Swift.String?
    let nextToken: Swift.String?
    let limit: Swift.Int?
    let metricName: Swift.String?
    let metricNamespace: Swift.String?
}

extension DescribeMetricFiltersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterNamePrefix
        case limit
        case logGroupName
        case metricName
        case metricNamespace
        case nextToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterNamePrefix)
        filterNamePrefix = filterNamePrefixDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricNamespace)
        metricNamespace = metricNamespaceDecoded
    }
}

extension DescribeMetricFiltersOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeMetricFiltersOutputBody = try responseDecoder.decode(responseBody: data)
            self.metricFilters = output.metricFilters
            self.nextToken = output.nextToken
        } else {
            self.metricFilters = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeMetricFiltersOutput: Swift.Equatable {
    /// The metric filters.
    public var metricFilters: [CloudWatchLogsClientTypes.MetricFilter]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        metricFilters: [CloudWatchLogsClientTypes.MetricFilter]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.metricFilters = metricFilters
        self.nextToken = nextToken
    }
}

struct DescribeMetricFiltersOutputBody: Swift.Equatable {
    let metricFilters: [CloudWatchLogsClientTypes.MetricFilter]?
    let nextToken: Swift.String?
}

extension DescribeMetricFiltersOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricFilters
        case nextToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricFiltersContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.MetricFilter?].self, forKey: .metricFilters)
        var metricFiltersDecoded0:[CloudWatchLogsClientTypes.MetricFilter]? = nil
        if let metricFiltersContainer = metricFiltersContainer {
            metricFiltersDecoded0 = [CloudWatchLogsClientTypes.MetricFilter]()
            for structure0 in metricFiltersContainer {
                if let structure0 = structure0 {
                    metricFiltersDecoded0?.append(structure0)
                }
            }
        }
        metricFilters = metricFiltersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum DescribeMetricFiltersOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeQueriesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case maxResults
        case nextToken
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

extension DescribeQueriesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeQueriesInput: Swift.Equatable {
    /// Limits the returned queries to only those for the specified log group.
    public var logGroupName: Swift.String?
    /// Limits the number of returned queries to the specified number.
    public var maxResults: Swift.Int?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// Limits the returned queries to only those that have the specified status. Valid values are Cancelled, Complete, Failed, Running, and Scheduled.
    public var status: CloudWatchLogsClientTypes.QueryStatus?

    public init(
        logGroupName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: CloudWatchLogsClientTypes.QueryStatus? = nil
    )
    {
        self.logGroupName = logGroupName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct DescribeQueriesInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let status: CloudWatchLogsClientTypes.QueryStatus?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeQueriesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case maxResults
        case nextToken
        case status
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.QueryStatus.self, forKey: .status)
        status = statusDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeQueriesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeQueriesOutputBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.queries = output.queries
        } else {
            self.nextToken = nil
            self.queries = nil
        }
    }
}

public struct DescribeQueriesOutput: Swift.Equatable {
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// The list of queries that match the request.
    public var queries: [CloudWatchLogsClientTypes.QueryInfo]?

    public init(
        nextToken: Swift.String? = nil,
        queries: [CloudWatchLogsClientTypes.QueryInfo]? = nil
    )
    {
        self.nextToken = nextToken
        self.queries = queries
    }
}

struct DescribeQueriesOutputBody: Swift.Equatable {
    let queries: [CloudWatchLogsClientTypes.QueryInfo]?
    let nextToken: Swift.String?
}

extension DescribeQueriesOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case queries
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queriesContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.QueryInfo?].self, forKey: .queries)
        var queriesDecoded0:[CloudWatchLogsClientTypes.QueryInfo]? = nil
        if let queriesContainer = queriesContainer {
            queriesDecoded0 = [CloudWatchLogsClientTypes.QueryInfo]()
            for structure0 in queriesContainer {
                if let structure0 = structure0 {
                    queriesDecoded0?.append(structure0)
                }
            }
        }
        queries = queriesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum DescribeQueriesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeQueryDefinitionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
        case queryDefinitionNamePrefix
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let queryDefinitionNamePrefix = self.queryDefinitionNamePrefix {
            try encodeContainer.encode(queryDefinitionNamePrefix, forKey: .queryDefinitionNamePrefix)
        }
    }
}

extension DescribeQueryDefinitionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeQueryDefinitionsInput: Swift.Equatable {
    /// Limits the number of returned query definitions to the specified number.
    public var maxResults: Swift.Int?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// Use this parameter to filter your results to only the query definitions that have names that start with the prefix you specify.
    public var queryDefinitionNamePrefix: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        queryDefinitionNamePrefix: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.queryDefinitionNamePrefix = queryDefinitionNamePrefix
    }
}

struct DescribeQueryDefinitionsInputBody: Swift.Equatable {
    let queryDefinitionNamePrefix: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeQueryDefinitionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
        case queryDefinitionNamePrefix
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryDefinitionNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryDefinitionNamePrefix)
        queryDefinitionNamePrefix = queryDefinitionNamePrefixDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeQueryDefinitionsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeQueryDefinitionsOutputBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.queryDefinitions = output.queryDefinitions
        } else {
            self.nextToken = nil
            self.queryDefinitions = nil
        }
    }
}

public struct DescribeQueryDefinitionsOutput: Swift.Equatable {
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// The list of query definitions that match your request.
    public var queryDefinitions: [CloudWatchLogsClientTypes.QueryDefinition]?

    public init(
        nextToken: Swift.String? = nil,
        queryDefinitions: [CloudWatchLogsClientTypes.QueryDefinition]? = nil
    )
    {
        self.nextToken = nextToken
        self.queryDefinitions = queryDefinitions
    }
}

struct DescribeQueryDefinitionsOutputBody: Swift.Equatable {
    let queryDefinitions: [CloudWatchLogsClientTypes.QueryDefinition]?
    let nextToken: Swift.String?
}

extension DescribeQueryDefinitionsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case queryDefinitions
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryDefinitionsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.QueryDefinition?].self, forKey: .queryDefinitions)
        var queryDefinitionsDecoded0:[CloudWatchLogsClientTypes.QueryDefinition]? = nil
        if let queryDefinitionsContainer = queryDefinitionsContainer {
            queryDefinitionsDecoded0 = [CloudWatchLogsClientTypes.QueryDefinition]()
            for structure0 in queryDefinitionsContainer {
                if let structure0 = structure0 {
                    queryDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        queryDefinitions = queryDefinitionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum DescribeQueryDefinitionsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeResourcePoliciesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeResourcePoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeResourcePoliciesInput: Swift.Equatable {
    /// The maximum number of resource policies to be displayed with one call of this API.
    public var limit: Swift.Int?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeResourcePoliciesInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let limit: Swift.Int?
}

extension DescribeResourcePoliciesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit
        case nextToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeResourcePoliciesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeResourcePoliciesOutputBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.resourcePolicies = output.resourcePolicies
        } else {
            self.nextToken = nil
            self.resourcePolicies = nil
        }
    }
}

public struct DescribeResourcePoliciesOutput: Swift.Equatable {
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// The resource policies that exist in this account.
    public var resourcePolicies: [CloudWatchLogsClientTypes.ResourcePolicy]?

    public init(
        nextToken: Swift.String? = nil,
        resourcePolicies: [CloudWatchLogsClientTypes.ResourcePolicy]? = nil
    )
    {
        self.nextToken = nextToken
        self.resourcePolicies = resourcePolicies
    }
}

struct DescribeResourcePoliciesOutputBody: Swift.Equatable {
    let resourcePolicies: [CloudWatchLogsClientTypes.ResourcePolicy]?
    let nextToken: Swift.String?
}

extension DescribeResourcePoliciesOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case resourcePolicies
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourcePoliciesContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.ResourcePolicy?].self, forKey: .resourcePolicies)
        var resourcePoliciesDecoded0:[CloudWatchLogsClientTypes.ResourcePolicy]? = nil
        if let resourcePoliciesContainer = resourcePoliciesContainer {
            resourcePoliciesDecoded0 = [CloudWatchLogsClientTypes.ResourcePolicy]()
            for structure0 in resourcePoliciesContainer {
                if let structure0 = structure0 {
                    resourcePoliciesDecoded0?.append(structure0)
                }
            }
        }
        resourcePolicies = resourcePoliciesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum DescribeResourcePoliciesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeSubscriptionFiltersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterNamePrefix
        case limit
        case logGroupName
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterNamePrefix = self.filterNamePrefix {
            try encodeContainer.encode(filterNamePrefix, forKey: .filterNamePrefix)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeSubscriptionFiltersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeSubscriptionFiltersInput: Swift.Equatable {
    /// The prefix to match. If you don't specify a value, no prefix filter is applied.
    public var filterNamePrefix: Swift.String?
    /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    public var limit: Swift.Int?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init(
        filterNamePrefix: Swift.String? = nil,
        limit: Swift.Int? = nil,
        logGroupName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filterNamePrefix = filterNamePrefix
        self.limit = limit
        self.logGroupName = logGroupName
        self.nextToken = nextToken
    }
}

struct DescribeSubscriptionFiltersInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let filterNamePrefix: Swift.String?
    let nextToken: Swift.String?
    let limit: Swift.Int?
}

extension DescribeSubscriptionFiltersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterNamePrefix
        case limit
        case logGroupName
        case nextToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterNamePrefix)
        filterNamePrefix = filterNamePrefixDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeSubscriptionFiltersOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeSubscriptionFiltersOutputBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.subscriptionFilters = output.subscriptionFilters
        } else {
            self.nextToken = nil
            self.subscriptionFilters = nil
        }
    }
}

public struct DescribeSubscriptionFiltersOutput: Swift.Equatable {
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// The subscription filters.
    public var subscriptionFilters: [CloudWatchLogsClientTypes.SubscriptionFilter]?

    public init(
        nextToken: Swift.String? = nil,
        subscriptionFilters: [CloudWatchLogsClientTypes.SubscriptionFilter]? = nil
    )
    {
        self.nextToken = nextToken
        self.subscriptionFilters = subscriptionFilters
    }
}

struct DescribeSubscriptionFiltersOutputBody: Swift.Equatable {
    let subscriptionFilters: [CloudWatchLogsClientTypes.SubscriptionFilter]?
    let nextToken: Swift.String?
}

extension DescribeSubscriptionFiltersOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case subscriptionFilters
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subscriptionFiltersContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.SubscriptionFilter?].self, forKey: .subscriptionFilters)
        var subscriptionFiltersDecoded0:[CloudWatchLogsClientTypes.SubscriptionFilter]? = nil
        if let subscriptionFiltersContainer = subscriptionFiltersContainer {
            subscriptionFiltersDecoded0 = [CloudWatchLogsClientTypes.SubscriptionFilter]()
            for structure0 in subscriptionFiltersContainer {
                if let structure0 = structure0 {
                    subscriptionFiltersDecoded0?.append(structure0)
                }
            }
        }
        subscriptionFilters = subscriptionFiltersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum DescribeSubscriptionFiltersOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CloudWatchLogsClientTypes.Destination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicy
        case arn
        case creationTime
        case destinationName
        case roleArn
        case targetArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicy = self.accessPolicy {
            try encodeContainer.encode(accessPolicy, forKey: .accessPolicy)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let destinationName = self.destinationName {
            try encodeContainer.encode(destinationName, forKey: .destinationName)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let targetArn = self.targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationName)
        destinationName = destinationNameDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let accessPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPolicy)
        accessPolicy = accessPolicyDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a cross-account destination that receives subscription log events.
    public struct Destination: Swift.Equatable {
        /// An IAM policy document that governs which Amazon Web Services accounts can create subscription filters against this destination.
        public var accessPolicy: Swift.String?
        /// The ARN of this destination.
        public var arn: Swift.String?
        /// The creation time of the destination, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var creationTime: Swift.Int?
        /// The name of the destination.
        public var destinationName: Swift.String?
        /// A role for impersonation, used when delivering log events to the target.
        public var roleArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the physical target where the log events are delivered (for example, a Kinesis stream).
        public var targetArn: Swift.String?

        public init(
            accessPolicy: Swift.String? = nil,
            arn: Swift.String? = nil,
            creationTime: Swift.Int? = nil,
            destinationName: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            targetArn: Swift.String? = nil
        )
        {
            self.accessPolicy = accessPolicy
            self.arn = arn
            self.creationTime = creationTime
            self.destinationName = destinationName
            self.roleArn = roleArn
            self.targetArn = targetArn
        }
    }

}

extension DisassociateKmsKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case resourceIdentifier
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let resourceIdentifier = self.resourceIdentifier {
            try encodeContainer.encode(resourceIdentifier, forKey: .resourceIdentifier)
        }
    }
}

extension DisassociateKmsKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisassociateKmsKeyInput: Swift.Equatable {
    /// The name of the log group. In your DisassociateKmsKey operation, you must specify either the resourceIdentifier parameter or the logGroup parameter, but you can't specify both.
    public var logGroupName: Swift.String?
    /// Specifies the target for this operation. You must specify one of the following:
    ///
    /// * Specify the ARN of a log group to stop having CloudWatch Logs use the KMS key to encrypt log events that are ingested and stored by that log group. After you run this operation, CloudWatch Logs encrypts ingested log events with the default CloudWatch Logs method. The log group ARN must be in the following format. Replace REGION and ACCOUNT_ID with your Region and account ID. arn:aws:logs:REGION:ACCOUNT_ID:log-group:LOG_GROUP_NAME
    ///
    /// * Specify the following ARN to stop using this key to encrypt the results of future [StartQuery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_StartQuery.html) operations in this account. Replace REGION and ACCOUNT_ID with your Region and account ID. arn:aws:logs:REGION:ACCOUNT_ID:query-result:*
    ///
    ///
    /// In your DisssociateKmsKey operation, you must specify either the resourceIdentifier parameter or the logGroup parameter, but you can't specify both.
    public var resourceIdentifier: Swift.String?

    public init(
        logGroupName: Swift.String? = nil,
        resourceIdentifier: Swift.String? = nil
    )
    {
        self.logGroupName = logGroupName
        self.resourceIdentifier = resourceIdentifier
    }
}

struct DisassociateKmsKeyInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let resourceIdentifier: Swift.String?
}

extension DisassociateKmsKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case resourceIdentifier
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let resourceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceIdentifier)
        resourceIdentifier = resourceIdentifierDecoded
    }
}

extension DisassociateKmsKeyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DisassociateKmsKeyOutput: Swift.Equatable {

    public init() { }
}

enum DisassociateKmsKeyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CloudWatchLogsClientTypes {
    /// The method used to distribute log data to the destination, which can be either random or grouped by log stream.
    public enum Distribution: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bylogstream
        case random
        case sdkUnknown(Swift.String)

        public static var allCases: [Distribution] {
            return [
                .bylogstream,
                .random,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bylogstream: return "ByLogStream"
            case .random: return "Random"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Distribution(rawValue: rawValue) ?? Distribution.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchLogsClientTypes {
    public enum EvaluationFrequency: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fifteenMin
        case fiveMin
        case oneHour
        case oneMin
        case tenMin
        case thirtyMin
        case sdkUnknown(Swift.String)

        public static var allCases: [EvaluationFrequency] {
            return [
                .fifteenMin,
                .fiveMin,
                .oneHour,
                .oneMin,
                .tenMin,
                .thirtyMin,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fifteenMin: return "FIFTEEN_MIN"
            case .fiveMin: return "FIVE_MIN"
            case .oneHour: return "ONE_HOUR"
            case .oneMin: return "ONE_MIN"
            case .tenMin: return "TEN_MIN"
            case .thirtyMin: return "THIRTY_MIN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EvaluationFrequency(rawValue: rawValue) ?? EvaluationFrequency.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchLogsClientTypes.ExportTask: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination
        case destinationPrefix
        case executionInfo
        case from
        case logGroupName
        case status
        case taskId
        case taskName
        case to
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let destinationPrefix = self.destinationPrefix {
            try encodeContainer.encode(destinationPrefix, forKey: .destinationPrefix)
        }
        if let executionInfo = self.executionInfo {
            try encodeContainer.encode(executionInfo, forKey: .executionInfo)
        }
        if let from = self.from {
            try encodeContainer.encode(from, forKey: .from)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let taskId = self.taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
        if let taskName = self.taskName {
            try encodeContainer.encode(taskName, forKey: .taskName)
        }
        if let to = self.to {
            try encodeContainer.encode(to, forKey: .to)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let taskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskName)
        taskName = taskNameDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let fromDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .from)
        from = fromDecoded
        let toDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .to)
        to = toDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
        let destinationPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationPrefix)
        destinationPrefix = destinationPrefixDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.ExportTaskStatus.self, forKey: .status)
        status = statusDecoded
        let executionInfoDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.ExportTaskExecutionInfo.self, forKey: .executionInfo)
        executionInfo = executionInfoDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents an export task.
    public struct ExportTask: Swift.Equatable {
        /// The name of the S3 bucket to which the log data was exported.
        public var destination: Swift.String?
        /// The prefix that was used as the start of Amazon S3 key for every object exported.
        public var destinationPrefix: Swift.String?
        /// Execution information about the export task.
        public var executionInfo: CloudWatchLogsClientTypes.ExportTaskExecutionInfo?
        /// The start time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp before this time are not exported.
        public var from: Swift.Int?
        /// The name of the log group from which logs data was exported.
        public var logGroupName: Swift.String?
        /// The status of the export task.
        public var status: CloudWatchLogsClientTypes.ExportTaskStatus?
        /// The ID of the export task.
        public var taskId: Swift.String?
        /// The name of the export task.
        public var taskName: Swift.String?
        /// The end time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not exported.
        public var to: Swift.Int?

        public init(
            destination: Swift.String? = nil,
            destinationPrefix: Swift.String? = nil,
            executionInfo: CloudWatchLogsClientTypes.ExportTaskExecutionInfo? = nil,
            from: Swift.Int? = nil,
            logGroupName: Swift.String? = nil,
            status: CloudWatchLogsClientTypes.ExportTaskStatus? = nil,
            taskId: Swift.String? = nil,
            taskName: Swift.String? = nil,
            to: Swift.Int? = nil
        )
        {
            self.destination = destination
            self.destinationPrefix = destinationPrefix
            self.executionInfo = executionInfo
            self.from = from
            self.logGroupName = logGroupName
            self.status = status
            self.taskId = taskId
            self.taskName = taskName
            self.to = to
        }
    }

}

extension CloudWatchLogsClientTypes.ExportTaskExecutionInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completionTime
        case creationTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = self.completionTime {
            try encodeContainer.encode(completionTime, forKey: .completionTime)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents the status of an export task.
    public struct ExportTaskExecutionInfo: Swift.Equatable {
        /// The completion time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var completionTime: Swift.Int?
        /// The creation time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var creationTime: Swift.Int?

        public init(
            completionTime: Swift.Int? = nil,
            creationTime: Swift.Int? = nil
        )
        {
            self.completionTime = completionTime
            self.creationTime = creationTime
        }
    }

}

extension CloudWatchLogsClientTypes.ExportTaskStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.ExportTaskStatusCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents the status of an export task.
    public struct ExportTaskStatus: Swift.Equatable {
        /// The status code of the export task.
        public var code: CloudWatchLogsClientTypes.ExportTaskStatusCode?
        /// The status message related to the status code.
        public var message: Swift.String?

        public init(
            code: CloudWatchLogsClientTypes.ExportTaskStatusCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension CloudWatchLogsClientTypes {
    public enum ExportTaskStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case completed
        case failed
        case pending
        case pendingCancel
        case running
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportTaskStatusCode] {
            return [
                .cancelled,
                .completed,
                .failed,
                .pending,
                .pendingCancel,
                .running,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .pendingCancel: return "PENDING_CANCEL"
            case .running: return "RUNNING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExportTaskStatusCode(rawValue: rawValue) ?? ExportTaskStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension FilterLogEventsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case filterPattern
        case interleaved
        case limit
        case logGroupIdentifier
        case logGroupName
        case logStreamNamePrefix
        case logStreamNames
        case nextToken
        case startTime
        case unmask
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let filterPattern = self.filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let interleaved = self.interleaved {
            try encodeContainer.encode(interleaved, forKey: .interleaved)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupIdentifier = self.logGroupIdentifier {
            try encodeContainer.encode(logGroupIdentifier, forKey: .logGroupIdentifier)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamNamePrefix = self.logStreamNamePrefix {
            try encodeContainer.encode(logStreamNamePrefix, forKey: .logStreamNamePrefix)
        }
        if let logStreamNames = logStreamNames {
            var logStreamNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logStreamNames)
            for logstreamname0 in logStreamNames {
                try logStreamNamesContainer.encode(logstreamname0)
            }
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
        if let unmask = self.unmask {
            try encodeContainer.encode(unmask, forKey: .unmask)
        }
    }
}

extension FilterLogEventsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct FilterLogEventsInput: Swift.Equatable {
    /// The end of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not returned.
    public var endTime: Swift.Int?
    /// The filter pattern to use. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html). If not provided, all the events are matched.
    public var filterPattern: Swift.String?
    /// If the value is true, the operation attempts to provide responses that contain events from multiple log streams within the log group, interleaved in a single response. If the value is false, all the matched log events in the first log stream are searched first, then those in the next log stream, and so on. Important As of June 17, 2019, this parameter is ignored and the value is assumed to be true. The response from this operation always interleaves events from multiple log streams within a log group.
    @available(*, deprecated, message: "Starting on June 17, 2019, this parameter will be ignored and the value will be assumed to be true. The response from this operation will always interleave events from multiple log streams within a log group.")
    public var interleaved: Swift.Bool?
    /// The maximum number of events to return. The default is 10,000 events.
    public var limit: Swift.Int?
    /// Specify either the name or ARN of the log group to view log events from. If the log group is in a source account and you are using a monitoring account, you must use the log group ARN. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupIdentifier: Swift.String?
    /// The name of the log group to search. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupName: Swift.String?
    /// Filters the results to include only events from log streams that have names starting with this prefix. If you specify a value for both logStreamNamePrefix and logStreamNames, but the value for logStreamNamePrefix does not match any log stream names specified in logStreamNames, the action returns an InvalidParameterException error.
    public var logStreamNamePrefix: Swift.String?
    /// Filters the results to only logs from the log streams in this list. If you specify a value for both logStreamNamePrefix and logStreamNames, the action returns an InvalidParameterException error.
    public var logStreamNames: [Swift.String]?
    /// The token for the next set of events to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?
    /// The start of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp before this time are not returned.
    public var startTime: Swift.Int?
    /// Specify true to display the log event fields with all sensitive data unmasked and visible. The default is false. To use this operation with this parameter, you must be signed into an account with the logs:Unmask permission.
    public var unmask: Swift.Bool?

    public init(
        endTime: Swift.Int? = nil,
        filterPattern: Swift.String? = nil,
        interleaved: Swift.Bool? = nil,
        limit: Swift.Int? = nil,
        logGroupIdentifier: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        logStreamNamePrefix: Swift.String? = nil,
        logStreamNames: [Swift.String]? = nil,
        nextToken: Swift.String? = nil,
        startTime: Swift.Int? = nil,
        unmask: Swift.Bool? = nil
    )
    {
        self.endTime = endTime
        self.filterPattern = filterPattern
        self.interleaved = interleaved
        self.limit = limit
        self.logGroupIdentifier = logGroupIdentifier
        self.logGroupName = logGroupName
        self.logStreamNamePrefix = logStreamNamePrefix
        self.logStreamNames = logStreamNames
        self.nextToken = nextToken
        self.startTime = startTime
        self.unmask = unmask
    }
}

struct FilterLogEventsInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let logGroupIdentifier: Swift.String?
    let logStreamNames: [Swift.String]?
    let logStreamNamePrefix: Swift.String?
    let startTime: Swift.Int?
    let endTime: Swift.Int?
    let filterPattern: Swift.String?
    let nextToken: Swift.String?
    let limit: Swift.Int?
    let interleaved: Swift.Bool?
    let unmask: Swift.Bool?
}

extension FilterLogEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case filterPattern
        case interleaved
        case limit
        case logGroupIdentifier
        case logGroupName
        case logStreamNamePrefix
        case logStreamNames
        case nextToken
        case startTime
        case unmask
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logGroupIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupIdentifier)
        logGroupIdentifier = logGroupIdentifierDecoded
        let logStreamNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logStreamNames)
        var logStreamNamesDecoded0:[Swift.String]? = nil
        if let logStreamNamesContainer = logStreamNamesContainer {
            logStreamNamesDecoded0 = [Swift.String]()
            for string0 in logStreamNamesContainer {
                if let string0 = string0 {
                    logStreamNamesDecoded0?.append(string0)
                }
            }
        }
        logStreamNames = logStreamNamesDecoded0
        let logStreamNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamNamePrefix)
        logStreamNamePrefix = logStreamNamePrefixDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endTime)
        endTime = endTimeDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let interleavedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .interleaved)
        interleaved = interleavedDecoded
        let unmaskDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .unmask)
        unmask = unmaskDecoded
    }
}

extension FilterLogEventsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: FilterLogEventsOutputBody = try responseDecoder.decode(responseBody: data)
            self.events = output.events
            self.nextToken = output.nextToken
            self.searchedLogStreams = output.searchedLogStreams
        } else {
            self.events = nil
            self.nextToken = nil
            self.searchedLogStreams = nil
        }
    }
}

public struct FilterLogEventsOutput: Swift.Equatable {
    /// The matched events.
    public var events: [CloudWatchLogsClientTypes.FilteredLogEvent]?
    /// The token to use when requesting the next set of items. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// Important As of May 15, 2020, this parameter is no longer supported. This parameter returns an empty list. Indicates which log streams have been searched and whether each has been searched completely.
    public var searchedLogStreams: [CloudWatchLogsClientTypes.SearchedLogStream]?

    public init(
        events: [CloudWatchLogsClientTypes.FilteredLogEvent]? = nil,
        nextToken: Swift.String? = nil,
        searchedLogStreams: [CloudWatchLogsClientTypes.SearchedLogStream]? = nil
    )
    {
        self.events = events
        self.nextToken = nextToken
        self.searchedLogStreams = searchedLogStreams
    }
}

struct FilterLogEventsOutputBody: Swift.Equatable {
    let events: [CloudWatchLogsClientTypes.FilteredLogEvent]?
    let searchedLogStreams: [CloudWatchLogsClientTypes.SearchedLogStream]?
    let nextToken: Swift.String?
}

extension FilterLogEventsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events
        case nextToken
        case searchedLogStreams
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.FilteredLogEvent?].self, forKey: .events)
        var eventsDecoded0:[CloudWatchLogsClientTypes.FilteredLogEvent]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [CloudWatchLogsClientTypes.FilteredLogEvent]()
            for structure0 in eventsContainer {
                if let structure0 = structure0 {
                    eventsDecoded0?.append(structure0)
                }
            }
        }
        events = eventsDecoded0
        let searchedLogStreamsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.SearchedLogStream?].self, forKey: .searchedLogStreams)
        var searchedLogStreamsDecoded0:[CloudWatchLogsClientTypes.SearchedLogStream]? = nil
        if let searchedLogStreamsContainer = searchedLogStreamsContainer {
            searchedLogStreamsDecoded0 = [CloudWatchLogsClientTypes.SearchedLogStream]()
            for structure0 in searchedLogStreamsContainer {
                if let structure0 = structure0 {
                    searchedLogStreamsDecoded0?.append(structure0)
                }
            }
        }
        searchedLogStreams = searchedLogStreamsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum FilterLogEventsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CloudWatchLogsClientTypes.FilteredLogEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventId
        case ingestionTime
        case logStreamName
        case message
        case timestamp
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventId = self.eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let ingestionTime = self.ingestionTime {
            try encodeContainer.encode(ingestionTime, forKey: .ingestionTime)
        }
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let ingestionTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ingestionTime)
        ingestionTime = ingestionTimeDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a matched event.
    public struct FilteredLogEvent: Swift.Equatable {
        /// The ID of the event.
        public var eventId: Swift.String?
        /// The time the event was ingested, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var ingestionTime: Swift.Int?
        /// The name of the log stream to which this event belongs.
        public var logStreamName: Swift.String?
        /// The data contained in the log event.
        public var message: Swift.String?
        /// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var timestamp: Swift.Int?

        public init(
            eventId: Swift.String? = nil,
            ingestionTime: Swift.Int? = nil,
            logStreamName: Swift.String? = nil,
            message: Swift.String? = nil,
            timestamp: Swift.Int? = nil
        )
        {
            self.eventId = eventId
            self.ingestionTime = ingestionTime
            self.logStreamName = logStreamName
            self.message = message
            self.timestamp = timestamp
        }
    }

}

extension GetDataProtectionPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupIdentifier
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupIdentifier = self.logGroupIdentifier {
            try encodeContainer.encode(logGroupIdentifier, forKey: .logGroupIdentifier)
        }
    }
}

extension GetDataProtectionPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDataProtectionPolicyInput: Swift.Equatable {
    /// The name or ARN of the log group that contains the data protection policy that you want to see.
    /// This member is required.
    public var logGroupIdentifier: Swift.String?

    public init(
        logGroupIdentifier: Swift.String? = nil
    )
    {
        self.logGroupIdentifier = logGroupIdentifier
    }
}

struct GetDataProtectionPolicyInputBody: Swift.Equatable {
    let logGroupIdentifier: Swift.String?
}

extension GetDataProtectionPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupIdentifier
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupIdentifier)
        logGroupIdentifier = logGroupIdentifierDecoded
    }
}

extension GetDataProtectionPolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetDataProtectionPolicyOutputBody = try responseDecoder.decode(responseBody: data)
            self.lastUpdatedTime = output.lastUpdatedTime
            self.logGroupIdentifier = output.logGroupIdentifier
            self.policyDocument = output.policyDocument
        } else {
            self.lastUpdatedTime = nil
            self.logGroupIdentifier = nil
            self.policyDocument = nil
        }
    }
}

public struct GetDataProtectionPolicyOutput: Swift.Equatable {
    /// The date and time that this policy was most recently updated.
    public var lastUpdatedTime: Swift.Int?
    /// The log group name or ARN that you specified in your request.
    public var logGroupIdentifier: Swift.String?
    /// The data protection policy document for this log group.
    public var policyDocument: Swift.String?

    public init(
        lastUpdatedTime: Swift.Int? = nil,
        logGroupIdentifier: Swift.String? = nil,
        policyDocument: Swift.String? = nil
    )
    {
        self.lastUpdatedTime = lastUpdatedTime
        self.logGroupIdentifier = logGroupIdentifier
        self.policyDocument = policyDocument
    }
}

struct GetDataProtectionPolicyOutputBody: Swift.Equatable {
    let logGroupIdentifier: Swift.String?
    let policyDocument: Swift.String?
    let lastUpdatedTime: Swift.Int?
}

extension GetDataProtectionPolicyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastUpdatedTime
        case logGroupIdentifier
        case policyDocument
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupIdentifier)
        logGroupIdentifier = logGroupIdentifierDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
    }
}

enum GetDataProtectionPolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetDeliveryDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension GetDeliveryDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDeliveryDestinationInput: Swift.Equatable {
    /// The name of the delivery destination that you want to retrieve.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct GetDeliveryDestinationInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension GetDeliveryDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension GetDeliveryDestinationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetDeliveryDestinationOutputBody = try responseDecoder.decode(responseBody: data)
            self.deliveryDestination = output.deliveryDestination
        } else {
            self.deliveryDestination = nil
        }
    }
}

public struct GetDeliveryDestinationOutput: Swift.Equatable {
    /// A structure containing information about the delivery destination.
    public var deliveryDestination: CloudWatchLogsClientTypes.DeliveryDestination?

    public init(
        deliveryDestination: CloudWatchLogsClientTypes.DeliveryDestination? = nil
    )
    {
        self.deliveryDestination = deliveryDestination
    }
}

struct GetDeliveryDestinationOutputBody: Swift.Equatable {
    let deliveryDestination: CloudWatchLogsClientTypes.DeliveryDestination?
}

extension GetDeliveryDestinationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryDestination
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryDestinationDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.DeliveryDestination.self, forKey: .deliveryDestination)
        deliveryDestination = deliveryDestinationDecoded
    }
}

enum GetDeliveryDestinationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetDeliveryDestinationPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryDestinationName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryDestinationName = self.deliveryDestinationName {
            try encodeContainer.encode(deliveryDestinationName, forKey: .deliveryDestinationName)
        }
    }
}

extension GetDeliveryDestinationPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDeliveryDestinationPolicyInput: Swift.Equatable {
    /// The name of the delivery destination that you want to retrieve the policy of.
    /// This member is required.
    public var deliveryDestinationName: Swift.String?

    public init(
        deliveryDestinationName: Swift.String? = nil
    )
    {
        self.deliveryDestinationName = deliveryDestinationName
    }
}

struct GetDeliveryDestinationPolicyInputBody: Swift.Equatable {
    let deliveryDestinationName: Swift.String?
}

extension GetDeliveryDestinationPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryDestinationName
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryDestinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryDestinationName)
        deliveryDestinationName = deliveryDestinationNameDecoded
    }
}

extension GetDeliveryDestinationPolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetDeliveryDestinationPolicyOutputBody = try responseDecoder.decode(responseBody: data)
            self.policy = output.policy
        } else {
            self.policy = nil
        }
    }
}

public struct GetDeliveryDestinationPolicyOutput: Swift.Equatable {
    /// The IAM policy for this delivery destination.
    public var policy: CloudWatchLogsClientTypes.Policy?

    public init(
        policy: CloudWatchLogsClientTypes.Policy? = nil
    )
    {
        self.policy = policy
    }
}

struct GetDeliveryDestinationPolicyOutputBody: Swift.Equatable {
    let policy: CloudWatchLogsClientTypes.Policy?
}

extension GetDeliveryDestinationPolicyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.Policy.self, forKey: .policy)
        policy = policyDecoded
    }
}

enum GetDeliveryDestinationPolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetDeliveryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = self.id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }
}

extension GetDeliveryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDeliveryInput: Swift.Equatable {
    /// The ID of the delivery that you want to retrieve.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

struct GetDeliveryInputBody: Swift.Equatable {
    let id: Swift.String?
}

extension GetDeliveryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension GetDeliveryOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetDeliveryOutputBody = try responseDecoder.decode(responseBody: data)
            self.delivery = output.delivery
        } else {
            self.delivery = nil
        }
    }
}

public struct GetDeliveryOutput: Swift.Equatable {
    /// A structure that contains information about the delivery.
    public var delivery: CloudWatchLogsClientTypes.Delivery?

    public init(
        delivery: CloudWatchLogsClientTypes.Delivery? = nil
    )
    {
        self.delivery = delivery
    }
}

struct GetDeliveryOutputBody: Swift.Equatable {
    let delivery: CloudWatchLogsClientTypes.Delivery?
}

extension GetDeliveryOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case delivery
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.Delivery.self, forKey: .delivery)
        delivery = deliveryDecoded
    }
}

enum GetDeliveryOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetDeliverySourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension GetDeliverySourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDeliverySourceInput: Swift.Equatable {
    /// The name of the delivery source that you want to retrieve.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

struct GetDeliverySourceInputBody: Swift.Equatable {
    let name: Swift.String?
}

extension GetDeliverySourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension GetDeliverySourceOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetDeliverySourceOutputBody = try responseDecoder.decode(responseBody: data)
            self.deliverySource = output.deliverySource
        } else {
            self.deliverySource = nil
        }
    }
}

public struct GetDeliverySourceOutput: Swift.Equatable {
    /// A structure containing information about the delivery source.
    public var deliverySource: CloudWatchLogsClientTypes.DeliverySource?

    public init(
        deliverySource: CloudWatchLogsClientTypes.DeliverySource? = nil
    )
    {
        self.deliverySource = deliverySource
    }
}

struct GetDeliverySourceOutputBody: Swift.Equatable {
    let deliverySource: CloudWatchLogsClientTypes.DeliverySource?
}

extension GetDeliverySourceOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliverySource
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliverySourceDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.DeliverySource.self, forKey: .deliverySource)
        deliverySource = deliverySourceDecoded
    }
}

enum GetDeliverySourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetLogAnomalyDetectorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectorArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anomalyDetectorArn = self.anomalyDetectorArn {
            try encodeContainer.encode(anomalyDetectorArn, forKey: .anomalyDetectorArn)
        }
    }
}

extension GetLogAnomalyDetectorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLogAnomalyDetectorInput: Swift.Equatable {
    /// The ARN of the anomaly detector to retrieve information about. You can find the ARNs of log anomaly detectors in your account by using the [ListLogAnomalyDetectors](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListLogAnomalyDetectors.html) operation.
    /// This member is required.
    public var anomalyDetectorArn: Swift.String?

    public init(
        anomalyDetectorArn: Swift.String? = nil
    )
    {
        self.anomalyDetectorArn = anomalyDetectorArn
    }
}

struct GetLogAnomalyDetectorInputBody: Swift.Equatable {
    let anomalyDetectorArn: Swift.String?
}

extension GetLogAnomalyDetectorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectorArn
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let anomalyDetectorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .anomalyDetectorArn)
        anomalyDetectorArn = anomalyDetectorArnDecoded
    }
}

extension GetLogAnomalyDetectorOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetLogAnomalyDetectorOutputBody = try responseDecoder.decode(responseBody: data)
            self.anomalyDetectorStatus = output.anomalyDetectorStatus
            self.anomalyVisibilityTime = output.anomalyVisibilityTime
            self.creationTimeStamp = output.creationTimeStamp
            self.detectorName = output.detectorName
            self.evaluationFrequency = output.evaluationFrequency
            self.filterPattern = output.filterPattern
            self.kmsKeyId = output.kmsKeyId
            self.lastModifiedTimeStamp = output.lastModifiedTimeStamp
            self.logGroupArnList = output.logGroupArnList
        } else {
            self.anomalyDetectorStatus = nil
            self.anomalyVisibilityTime = nil
            self.creationTimeStamp = 0
            self.detectorName = nil
            self.evaluationFrequency = nil
            self.filterPattern = nil
            self.kmsKeyId = nil
            self.lastModifiedTimeStamp = 0
            self.logGroupArnList = nil
        }
    }
}

public struct GetLogAnomalyDetectorOutput: Swift.Equatable {
    /// Specifies whether the anomaly detector is currently active. To change its status, use the enabled parameter in the [UpdateLogAnomalyDetector](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateLogAnomalyDetector.html) operation.
    public var anomalyDetectorStatus: CloudWatchLogsClientTypes.AnomalyDetectorStatus?
    /// The number of days used as the life cycle of anomalies. After this time, anomalies are automatically baselined and the anomaly detector model will treat new occurrences of similar event as normal.
    public var anomalyVisibilityTime: Swift.Int?
    /// The date and time when this anomaly detector was created.
    public var creationTimeStamp: Swift.Int
    /// The name of the log anomaly detector
    public var detectorName: Swift.String?
    /// Specifies how often the anomaly detector runs and look for anomalies. Set this value according to the frequency that the log group receives new logs. For example, if the log group receives new log events every 10 minutes, then setting evaluationFrequency to FIFTEEN_MIN might be appropriate.
    public var evaluationFrequency: CloudWatchLogsClientTypes.EvaluationFrequency?
    /// A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.
    public var filterPattern: Swift.String?
    /// The ID of the KMS key assigned to this anomaly detector, if any.
    public var kmsKeyId: Swift.String?
    /// The date and time when this anomaly detector was most recently modified.
    public var lastModifiedTimeStamp: Swift.Int
    /// An array of structures, where each structure contains the ARN of a log group associated with this anomaly detector.
    public var logGroupArnList: [Swift.String]?

    public init(
        anomalyDetectorStatus: CloudWatchLogsClientTypes.AnomalyDetectorStatus? = nil,
        anomalyVisibilityTime: Swift.Int? = nil,
        creationTimeStamp: Swift.Int = 0,
        detectorName: Swift.String? = nil,
        evaluationFrequency: CloudWatchLogsClientTypes.EvaluationFrequency? = nil,
        filterPattern: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        lastModifiedTimeStamp: Swift.Int = 0,
        logGroupArnList: [Swift.String]? = nil
    )
    {
        self.anomalyDetectorStatus = anomalyDetectorStatus
        self.anomalyVisibilityTime = anomalyVisibilityTime
        self.creationTimeStamp = creationTimeStamp
        self.detectorName = detectorName
        self.evaluationFrequency = evaluationFrequency
        self.filterPattern = filterPattern
        self.kmsKeyId = kmsKeyId
        self.lastModifiedTimeStamp = lastModifiedTimeStamp
        self.logGroupArnList = logGroupArnList
    }
}

struct GetLogAnomalyDetectorOutputBody: Swift.Equatable {
    let detectorName: Swift.String?
    let logGroupArnList: [Swift.String]?
    let evaluationFrequency: CloudWatchLogsClientTypes.EvaluationFrequency?
    let filterPattern: Swift.String?
    let anomalyDetectorStatus: CloudWatchLogsClientTypes.AnomalyDetectorStatus?
    let kmsKeyId: Swift.String?
    let creationTimeStamp: Swift.Int
    let lastModifiedTimeStamp: Swift.Int
    let anomalyVisibilityTime: Swift.Int?
}

extension GetLogAnomalyDetectorOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectorStatus
        case anomalyVisibilityTime
        case creationTimeStamp
        case detectorName
        case evaluationFrequency
        case filterPattern
        case kmsKeyId
        case lastModifiedTimeStamp
        case logGroupArnList
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detectorNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detectorName)
        detectorName = detectorNameDecoded
        let logGroupArnListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logGroupArnList)
        var logGroupArnListDecoded0:[Swift.String]? = nil
        if let logGroupArnListContainer = logGroupArnListContainer {
            logGroupArnListDecoded0 = [Swift.String]()
            for string0 in logGroupArnListContainer {
                if let string0 = string0 {
                    logGroupArnListDecoded0?.append(string0)
                }
            }
        }
        logGroupArnList = logGroupArnListDecoded0
        let evaluationFrequencyDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.EvaluationFrequency.self, forKey: .evaluationFrequency)
        evaluationFrequency = evaluationFrequencyDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let anomalyDetectorStatusDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.AnomalyDetectorStatus.self, forKey: .anomalyDetectorStatus)
        anomalyDetectorStatus = anomalyDetectorStatusDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let creationTimeStampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .creationTimeStamp) ?? 0
        creationTimeStamp = creationTimeStampDecoded
        let lastModifiedTimeStampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastModifiedTimeStamp) ?? 0
        lastModifiedTimeStamp = lastModifiedTimeStampDecoded
        let anomalyVisibilityTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .anomalyVisibilityTime)
        anomalyVisibilityTime = anomalyVisibilityTimeDecoded
    }
}

enum GetLogAnomalyDetectorOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetLogEventsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case limit
        case logGroupIdentifier
        case logGroupName
        case logStreamName
        case nextToken
        case startFromHead
        case startTime
        case unmask
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupIdentifier = self.logGroupIdentifier {
            try encodeContainer.encode(logGroupIdentifier, forKey: .logGroupIdentifier)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startFromHead = self.startFromHead {
            try encodeContainer.encode(startFromHead, forKey: .startFromHead)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
        if let unmask = self.unmask {
            try encodeContainer.encode(unmask, forKey: .unmask)
        }
    }
}

extension GetLogEventsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLogEventsInput: Swift.Equatable {
    /// The end of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp equal to or later than this time are not included.
    public var endTime: Swift.Int?
    /// The maximum number of log events returned. If you don't specify a limit, the default is as many log events as can fit in a response size of 1 MB (up to 10,000 log events).
    public var limit: Swift.Int?
    /// Specify either the name or ARN of the log group to view events from. If the log group is in a source account and you are using a monitoring account, you must use the log group ARN. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupIdentifier: Swift.String?
    /// The name of the log group. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupName: Swift.String?
    /// The name of the log stream.
    /// This member is required.
    public var logStreamName: Swift.String?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?
    /// If the value is true, the earliest log events are returned first. If the value is false, the latest log events are returned first. The default value is false. If you are using a previous nextForwardToken value as the nextToken in this operation, you must specify true for startFromHead.
    public var startFromHead: Swift.Bool?
    /// The start of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp equal to this time or later than this time are included. Events with a timestamp earlier than this time are not included.
    public var startTime: Swift.Int?
    /// Specify true to display the log event fields with all sensitive data unmasked and visible. The default is false. To use this operation with this parameter, you must be signed into an account with the logs:Unmask permission.
    public var unmask: Swift.Bool?

    public init(
        endTime: Swift.Int? = nil,
        limit: Swift.Int? = nil,
        logGroupIdentifier: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        logStreamName: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        startFromHead: Swift.Bool? = nil,
        startTime: Swift.Int? = nil,
        unmask: Swift.Bool? = nil
    )
    {
        self.endTime = endTime
        self.limit = limit
        self.logGroupIdentifier = logGroupIdentifier
        self.logGroupName = logGroupName
        self.logStreamName = logStreamName
        self.nextToken = nextToken
        self.startFromHead = startFromHead
        self.startTime = startTime
        self.unmask = unmask
    }
}

struct GetLogEventsInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let logGroupIdentifier: Swift.String?
    let logStreamName: Swift.String?
    let startTime: Swift.Int?
    let endTime: Swift.Int?
    let nextToken: Swift.String?
    let limit: Swift.Int?
    let startFromHead: Swift.Bool?
    let unmask: Swift.Bool?
}

extension GetLogEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case limit
        case logGroupIdentifier
        case logGroupName
        case logStreamName
        case nextToken
        case startFromHead
        case startTime
        case unmask
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logGroupIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupIdentifier)
        logGroupIdentifier = logGroupIdentifierDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endTime)
        endTime = endTimeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let startFromHeadDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .startFromHead)
        startFromHead = startFromHeadDecoded
        let unmaskDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .unmask)
        unmask = unmaskDecoded
    }
}

extension GetLogEventsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetLogEventsOutputBody = try responseDecoder.decode(responseBody: data)
            self.events = output.events
            self.nextBackwardToken = output.nextBackwardToken
            self.nextForwardToken = output.nextForwardToken
        } else {
            self.events = nil
            self.nextBackwardToken = nil
            self.nextForwardToken = nil
        }
    }
}

public struct GetLogEventsOutput: Swift.Equatable {
    /// The events.
    public var events: [CloudWatchLogsClientTypes.OutputLogEvent]?
    /// The token for the next set of items in the backward direction. The token expires after 24 hours. This token is not null. If you have reached the end of the stream, it returns the same token you passed in.
    public var nextBackwardToken: Swift.String?
    /// The token for the next set of items in the forward direction. The token expires after 24 hours. If you have reached the end of the stream, it returns the same token you passed in.
    public var nextForwardToken: Swift.String?

    public init(
        events: [CloudWatchLogsClientTypes.OutputLogEvent]? = nil,
        nextBackwardToken: Swift.String? = nil,
        nextForwardToken: Swift.String? = nil
    )
    {
        self.events = events
        self.nextBackwardToken = nextBackwardToken
        self.nextForwardToken = nextForwardToken
    }
}

struct GetLogEventsOutputBody: Swift.Equatable {
    let events: [CloudWatchLogsClientTypes.OutputLogEvent]?
    let nextForwardToken: Swift.String?
    let nextBackwardToken: Swift.String?
}

extension GetLogEventsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events
        case nextBackwardToken
        case nextForwardToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.OutputLogEvent?].self, forKey: .events)
        var eventsDecoded0:[CloudWatchLogsClientTypes.OutputLogEvent]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [CloudWatchLogsClientTypes.OutputLogEvent]()
            for structure0 in eventsContainer {
                if let structure0 = structure0 {
                    eventsDecoded0?.append(structure0)
                }
            }
        }
        events = eventsDecoded0
        let nextForwardTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextForwardToken)
        nextForwardToken = nextForwardTokenDecoded
        let nextBackwardTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextBackwardToken)
        nextBackwardToken = nextBackwardTokenDecoded
    }
}

enum GetLogEventsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetLogGroupFieldsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupIdentifier
        case logGroupName
        case time
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupIdentifier = self.logGroupIdentifier {
            try encodeContainer.encode(logGroupIdentifier, forKey: .logGroupIdentifier)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let time = self.time {
            try encodeContainer.encode(time, forKey: .time)
        }
    }
}

extension GetLogGroupFieldsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLogGroupFieldsInput: Swift.Equatable {
    /// Specify either the name or ARN of the log group to view. If the log group is in a source account and you are using a monitoring account, you must specify the ARN. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupIdentifier: Swift.String?
    /// The name of the log group to search. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupName: Swift.String?
    /// The time to set as the center of the query. If you specify time, the 8 minutes before and 8 minutes after this time are searched. If you omit time, the most recent 15 minutes up to the current time are searched. The time value is specified as epoch time, which is the number of seconds since January 1, 1970, 00:00:00 UTC.
    public var time: Swift.Int?

    public init(
        logGroupIdentifier: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        time: Swift.Int? = nil
    )
    {
        self.logGroupIdentifier = logGroupIdentifier
        self.logGroupName = logGroupName
        self.time = time
    }
}

struct GetLogGroupFieldsInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let time: Swift.Int?
    let logGroupIdentifier: Swift.String?
}

extension GetLogGroupFieldsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupIdentifier
        case logGroupName
        case time
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let timeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .time)
        time = timeDecoded
        let logGroupIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupIdentifier)
        logGroupIdentifier = logGroupIdentifierDecoded
    }
}

extension GetLogGroupFieldsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetLogGroupFieldsOutputBody = try responseDecoder.decode(responseBody: data)
            self.logGroupFields = output.logGroupFields
        } else {
            self.logGroupFields = nil
        }
    }
}

public struct GetLogGroupFieldsOutput: Swift.Equatable {
    /// The array of fields found in the query. Each object in the array contains the name of the field, along with the percentage of time it appeared in the log events that were queried.
    public var logGroupFields: [CloudWatchLogsClientTypes.LogGroupField]?

    public init(
        logGroupFields: [CloudWatchLogsClientTypes.LogGroupField]? = nil
    )
    {
        self.logGroupFields = logGroupFields
    }
}

struct GetLogGroupFieldsOutputBody: Swift.Equatable {
    let logGroupFields: [CloudWatchLogsClientTypes.LogGroupField]?
}

extension GetLogGroupFieldsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupFields
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupFieldsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.LogGroupField?].self, forKey: .logGroupFields)
        var logGroupFieldsDecoded0:[CloudWatchLogsClientTypes.LogGroupField]? = nil
        if let logGroupFieldsContainer = logGroupFieldsContainer {
            logGroupFieldsDecoded0 = [CloudWatchLogsClientTypes.LogGroupField]()
            for structure0 in logGroupFieldsContainer {
                if let structure0 = structure0 {
                    logGroupFieldsDecoded0?.append(structure0)
                }
            }
        }
        logGroupFields = logGroupFieldsDecoded0
    }
}

enum GetLogGroupFieldsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetLogRecordInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logRecordPointer
        case unmask
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logRecordPointer = self.logRecordPointer {
            try encodeContainer.encode(logRecordPointer, forKey: .logRecordPointer)
        }
        if let unmask = self.unmask {
            try encodeContainer.encode(unmask, forKey: .unmask)
        }
    }
}

extension GetLogRecordInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLogRecordInput: Swift.Equatable {
    /// The pointer corresponding to the log event record you want to retrieve. You get this from the response of a GetQueryResults operation. In that response, the value of the @ptr field for a log event is the value to use as logRecordPointer to retrieve that complete log event record.
    /// This member is required.
    public var logRecordPointer: Swift.String?
    /// Specify true to display the log event fields with all sensitive data unmasked and visible. The default is false. To use this operation with this parameter, you must be signed into an account with the logs:Unmask permission.
    public var unmask: Swift.Bool?

    public init(
        logRecordPointer: Swift.String? = nil,
        unmask: Swift.Bool? = nil
    )
    {
        self.logRecordPointer = logRecordPointer
        self.unmask = unmask
    }
}

struct GetLogRecordInputBody: Swift.Equatable {
    let logRecordPointer: Swift.String?
    let unmask: Swift.Bool?
}

extension GetLogRecordInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logRecordPointer
        case unmask
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logRecordPointerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logRecordPointer)
        logRecordPointer = logRecordPointerDecoded
        let unmaskDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .unmask)
        unmask = unmaskDecoded
    }
}

extension GetLogRecordOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetLogRecordOutputBody = try responseDecoder.decode(responseBody: data)
            self.logRecord = output.logRecord
        } else {
            self.logRecord = nil
        }
    }
}

public struct GetLogRecordOutput: Swift.Equatable {
    /// The requested log event, as a JSON string.
    public var logRecord: [Swift.String:Swift.String]?

    public init(
        logRecord: [Swift.String:Swift.String]? = nil
    )
    {
        self.logRecord = logRecord
    }
}

struct GetLogRecordOutputBody: Swift.Equatable {
    let logRecord: [Swift.String:Swift.String]?
}

extension GetLogRecordOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logRecord
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logRecordContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .logRecord)
        var logRecordDecoded0: [Swift.String:Swift.String]? = nil
        if let logRecordContainer = logRecordContainer {
            logRecordDecoded0 = [Swift.String:Swift.String]()
            for (key0, value0) in logRecordContainer {
                if let value0 = value0 {
                    logRecordDecoded0?[key0] = value0
                }
            }
        }
        logRecord = logRecordDecoded0
    }
}

enum GetLogRecordOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetQueryResultsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queryId = self.queryId {
            try encodeContainer.encode(queryId, forKey: .queryId)
        }
    }
}

extension GetQueryResultsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetQueryResultsInput: Swift.Equatable {
    /// The ID number of the query.
    /// This member is required.
    public var queryId: Swift.String?

    public init(
        queryId: Swift.String? = nil
    )
    {
        self.queryId = queryId
    }
}

struct GetQueryResultsInputBody: Swift.Equatable {
    let queryId: Swift.String?
}

extension GetQueryResultsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryId
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryId)
        queryId = queryIdDecoded
    }
}

extension GetQueryResultsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetQueryResultsOutputBody = try responseDecoder.decode(responseBody: data)
            self.encryptionKey = output.encryptionKey
            self.results = output.results
            self.statistics = output.statistics
            self.status = output.status
        } else {
            self.encryptionKey = nil
            self.results = nil
            self.statistics = nil
            self.status = nil
        }
    }
}

public struct GetQueryResultsOutput: Swift.Equatable {
    /// If you associated an KMS key with the CloudWatch Logs Insights query results in this account, this field displays the ARN of the key that's used to encrypt the query results when [StartQuery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_StartQuery.html) stores them.
    public var encryptionKey: Swift.String?
    /// The log events that matched the query criteria during the most recent time it ran. The results value is an array of arrays. Each log event is one object in the top-level array. Each of these log event objects is an array of field/value pairs.
    public var results: [[CloudWatchLogsClientTypes.ResultField]]?
    /// Includes the number of log events scanned by the query, the number of log events that matched the query criteria, and the total number of bytes in the scanned log events. These values reflect the full raw results of the query.
    public var statistics: CloudWatchLogsClientTypes.QueryStatistics?
    /// The status of the most recent running of the query. Possible values are Cancelled, Complete, Failed, Running, Scheduled, Timeout, and Unknown. Queries time out after 60 minutes of runtime. To avoid having your queries time out, reduce the time range being searched or partition your query into a number of queries.
    public var status: CloudWatchLogsClientTypes.QueryStatus?

    public init(
        encryptionKey: Swift.String? = nil,
        results: [[CloudWatchLogsClientTypes.ResultField]]? = nil,
        statistics: CloudWatchLogsClientTypes.QueryStatistics? = nil,
        status: CloudWatchLogsClientTypes.QueryStatus? = nil
    )
    {
        self.encryptionKey = encryptionKey
        self.results = results
        self.statistics = statistics
        self.status = status
    }
}

struct GetQueryResultsOutputBody: Swift.Equatable {
    let results: [[CloudWatchLogsClientTypes.ResultField]]?
    let statistics: CloudWatchLogsClientTypes.QueryStatistics?
    let status: CloudWatchLogsClientTypes.QueryStatus?
    let encryptionKey: Swift.String?
}

extension GetQueryResultsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionKey
        case results
        case statistics
        case status
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultsContainer = try containerValues.decodeIfPresent([[CloudWatchLogsClientTypes.ResultField?]?].self, forKey: .results)
        var resultsDecoded0:[[CloudWatchLogsClientTypes.ResultField]]? = nil
        if let resultsContainer = resultsContainer {
            resultsDecoded0 = [[CloudWatchLogsClientTypes.ResultField]]()
            for list0 in resultsContainer {
                var list0Decoded0: [CloudWatchLogsClientTypes.ResultField]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [CloudWatchLogsClientTypes.ResultField]()
                    for structure1 in list0 {
                        if let structure1 = structure1 {
                            list0Decoded0?.append(structure1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    resultsDecoded0?.append(list0Decoded0)
                }
            }
        }
        results = resultsDecoded0
        let statisticsDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.QueryStatistics.self, forKey: .statistics)
        statistics = statisticsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.QueryStatus.self, forKey: .status)
        status = statusDecoded
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
    }
}

enum GetQueryResultsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CloudWatchLogsClientTypes {
    public enum InheritedProperty: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountDataProtection
        case sdkUnknown(Swift.String)

        public static var allCases: [InheritedProperty] {
            return [
                .accountDataProtection,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountDataProtection: return "ACCOUNT_DATA_PROTECTION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InheritedProperty(rawValue: rawValue) ?? InheritedProperty.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchLogsClientTypes.InputLogEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case timestamp
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a log event, which is a record of activity that was recorded by the application or resource being monitored.
    public struct InputLogEvent: Swift.Equatable {
        /// The raw event message. Each log event can be no larger than 256 KB.
        /// This member is required.
        public var message: Swift.String?
        /// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        /// This member is required.
        public var timestamp: Swift.Int?

        public init(
            message: Swift.String? = nil,
            timestamp: Swift.Int? = nil
        )
        {
            self.message = message
            self.timestamp = timestamp
        }
    }

}

extension InvalidOperationException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: InvalidOperationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The operation is not valid on the specified resource.
public struct InvalidOperationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidOperationException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidOperationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidOperationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidParameterException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: InvalidParameterExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A parameter is specified incorrectly.
public struct InvalidParameterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InvalidParameterExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidParameterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSequenceTokenException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: InvalidSequenceTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.expectedSequenceToken = output.expectedSequenceToken
            self.properties.message = output.message
        } else {
            self.properties.expectedSequenceToken = nil
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The sequence token is not valid. You can get the correct sequence token in the expectedSequenceToken field in the InvalidSequenceTokenException message. PutLogEvents actions are now always accepted and never return InvalidSequenceTokenException regardless of receiving an invalid sequence token.
public struct InvalidSequenceTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var expectedSequenceToken: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSequenceTokenException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        expectedSequenceToken: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.expectedSequenceToken = expectedSequenceToken
        self.properties.message = message
    }
}

struct InvalidSequenceTokenExceptionBody: Swift.Equatable {
    let expectedSequenceToken: Swift.String?
    let message: Swift.String?
}

extension InvalidSequenceTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expectedSequenceToken
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expectedSequenceTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expectedSequenceToken)
        expectedSequenceToken = expectedSequenceTokenDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You have reached the maximum number of resources that can be created.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListAnomaliesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectorArn
        case limit
        case nextToken
        case suppressionState
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anomalyDetectorArn = self.anomalyDetectorArn {
            try encodeContainer.encode(anomalyDetectorArn, forKey: .anomalyDetectorArn)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let suppressionState = self.suppressionState {
            try encodeContainer.encode(suppressionState.rawValue, forKey: .suppressionState)
        }
    }
}

extension ListAnomaliesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListAnomaliesInput: Swift.Equatable {
    /// Use this to optionally limit the results to only the anomalies found by a certain anomaly detector.
    public var anomalyDetectorArn: Swift.String?
    /// The maximum number of items to return. If you don't specify a value, the default maximum value of 50 items is used.
    public var limit: Swift.Int?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// You can specify this parameter if you want to the operation to return only anomalies that are currently either suppressed or unsuppressed.
    public var suppressionState: CloudWatchLogsClientTypes.SuppressionState?

    public init(
        anomalyDetectorArn: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        suppressionState: CloudWatchLogsClientTypes.SuppressionState? = nil
    )
    {
        self.anomalyDetectorArn = anomalyDetectorArn
        self.limit = limit
        self.nextToken = nextToken
        self.suppressionState = suppressionState
    }
}

struct ListAnomaliesInputBody: Swift.Equatable {
    let anomalyDetectorArn: Swift.String?
    let suppressionState: CloudWatchLogsClientTypes.SuppressionState?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension ListAnomaliesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectorArn
        case limit
        case nextToken
        case suppressionState
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let anomalyDetectorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .anomalyDetectorArn)
        anomalyDetectorArn = anomalyDetectorArnDecoded
        let suppressionStateDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.SuppressionState.self, forKey: .suppressionState)
        suppressionState = suppressionStateDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListAnomaliesOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListAnomaliesOutputBody = try responseDecoder.decode(responseBody: data)
            self.anomalies = output.anomalies
            self.nextToken = output.nextToken
        } else {
            self.anomalies = nil
            self.nextToken = nil
        }
    }
}

public struct ListAnomaliesOutput: Swift.Equatable {
    /// An array of structures, where each structure contains information about one anomaly that a log anomaly detector has found.
    public var anomalies: [CloudWatchLogsClientTypes.Anomaly]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        anomalies: [CloudWatchLogsClientTypes.Anomaly]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.anomalies = anomalies
        self.nextToken = nextToken
    }
}

struct ListAnomaliesOutputBody: Swift.Equatable {
    let anomalies: [CloudWatchLogsClientTypes.Anomaly]?
    let nextToken: Swift.String?
}

extension ListAnomaliesOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalies
        case nextToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let anomaliesContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.Anomaly?].self, forKey: .anomalies)
        var anomaliesDecoded0:[CloudWatchLogsClientTypes.Anomaly]? = nil
        if let anomaliesContainer = anomaliesContainer {
            anomaliesDecoded0 = [CloudWatchLogsClientTypes.Anomaly]()
            for structure0 in anomaliesContainer {
                if let structure0 = structure0 {
                    anomaliesDecoded0?.append(structure0)
                }
            }
        }
        anomalies = anomaliesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum ListAnomaliesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListLogAnomalyDetectorsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterLogGroupArn
        case limit
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterLogGroupArn = self.filterLogGroupArn {
            try encodeContainer.encode(filterLogGroupArn, forKey: .filterLogGroupArn)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListLogAnomalyDetectorsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListLogAnomalyDetectorsInput: Swift.Equatable {
    /// Use this to optionally filter the results to only include anomaly detectors that are associated with the specified log group.
    public var filterLogGroupArn: Swift.String?
    /// The maximum number of items to return. If you don't specify a value, the default maximum value of 50 items is used.
    public var limit: Swift.Int?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        filterLogGroupArn: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filterLogGroupArn = filterLogGroupArn
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct ListLogAnomalyDetectorsInputBody: Swift.Equatable {
    let filterLogGroupArn: Swift.String?
    let limit: Swift.Int?
    let nextToken: Swift.String?
}

extension ListLogAnomalyDetectorsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterLogGroupArn
        case limit
        case nextToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterLogGroupArn)
        filterLogGroupArn = filterLogGroupArnDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListLogAnomalyDetectorsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListLogAnomalyDetectorsOutputBody = try responseDecoder.decode(responseBody: data)
            self.anomalyDetectors = output.anomalyDetectors
            self.nextToken = output.nextToken
        } else {
            self.anomalyDetectors = nil
            self.nextToken = nil
        }
    }
}

public struct ListLogAnomalyDetectorsOutput: Swift.Equatable {
    /// An array of structures, where each structure in the array contains information about one anomaly detector.
    public var anomalyDetectors: [CloudWatchLogsClientTypes.AnomalyDetector]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        anomalyDetectors: [CloudWatchLogsClientTypes.AnomalyDetector]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.anomalyDetectors = anomalyDetectors
        self.nextToken = nextToken
    }
}

struct ListLogAnomalyDetectorsOutputBody: Swift.Equatable {
    let anomalyDetectors: [CloudWatchLogsClientTypes.AnomalyDetector]?
    let nextToken: Swift.String?
}

extension ListLogAnomalyDetectorsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectors
        case nextToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let anomalyDetectorsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.AnomalyDetector?].self, forKey: .anomalyDetectors)
        var anomalyDetectorsDecoded0:[CloudWatchLogsClientTypes.AnomalyDetector]? = nil
        if let anomalyDetectorsContainer = anomalyDetectorsContainer {
            anomalyDetectorsDecoded0 = [CloudWatchLogsClientTypes.AnomalyDetector]()
            for structure0 in anomalyDetectorsContainer {
                if let structure0 = structure0 {
                    anomalyDetectorsDecoded0?.append(structure0)
                }
            }
        }
        anomalyDetectors = anomalyDetectorsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

enum ListLogAnomalyDetectorsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The ARN of the resource that you want to view tags for. The ARN format of a log group is arn:aws:logs:Region:account-id:log-group:log-group-name  The ARN format of a destination is arn:aws:logs:Region:account-id:destination:destination-name  For more information about ARN format, see [CloudWatch Logs resources and operations](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html).
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension ListTagsForResourceOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListTagsForResourceOutputBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutput: Swift.Equatable {
    /// The list of tags associated with the requested resource.>
    public var tags: [Swift.String:Swift.String]?

    public init(
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension ListTagsForResourceOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

enum ListTagsForResourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListTagsLogGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

extension ListTagsLogGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

@available(*, deprecated, message: "Please use the generic tagging API model ListTagsForResourceRequest and ListTagsForResourceResponse")
public struct ListTagsLogGroupInput: Swift.Equatable {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?

    public init(
        logGroupName: Swift.String? = nil
    )
    {
        self.logGroupName = logGroupName
    }
}

struct ListTagsLogGroupInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
}

extension ListTagsLogGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension ListTagsLogGroupOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListTagsLogGroupOutputBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

@available(*, deprecated, message: "Please use the generic tagging API model ListTagsForResourceRequest and ListTagsForResourceResponse")
public struct ListTagsLogGroupOutput: Swift.Equatable {
    /// The tags for the log group.
    public var tags: [Swift.String:Swift.String]?

    public init(
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsLogGroupOutputBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension ListTagsLogGroupOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

enum ListTagsLogGroupOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CloudWatchLogsClientTypes.LiveTailSessionLogEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ingestionTime
        case logGroupIdentifier
        case logStreamName
        case message
        case timestamp
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ingestionTime = self.ingestionTime {
            try encodeContainer.encode(ingestionTime, forKey: .ingestionTime)
        }
        if let logGroupIdentifier = self.logGroupIdentifier {
            try encodeContainer.encode(logGroupIdentifier, forKey: .logGroupIdentifier)
        }
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let logGroupIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupIdentifier)
        logGroupIdentifier = logGroupIdentifierDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let ingestionTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ingestionTime)
        ingestionTime = ingestionTimeDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// This object contains the information for one log event returned in a Live Tail stream.
    public struct LiveTailSessionLogEvent: Swift.Equatable {
        /// The timestamp specifying when this log event was ingested into the log group.
        public var ingestionTime: Swift.Int?
        /// The name or ARN of the log group that ingested this log event.
        public var logGroupIdentifier: Swift.String?
        /// The name of the log stream that ingested this log event.
        public var logStreamName: Swift.String?
        /// The log event message text.
        public var message: Swift.String?
        /// The timestamp specifying when this log event was created.
        public var timestamp: Swift.Int?

        public init(
            ingestionTime: Swift.Int? = nil,
            logGroupIdentifier: Swift.String? = nil,
            logStreamName: Swift.String? = nil,
            message: Swift.String? = nil,
            timestamp: Swift.Int? = nil
        )
        {
            self.ingestionTime = ingestionTime
            self.logGroupIdentifier = logGroupIdentifier
            self.logStreamName = logStreamName
            self.message = message
            self.timestamp = timestamp
        }
    }

}

extension CloudWatchLogsClientTypes.LiveTailSessionMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sampled
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if sampled != false {
            try encodeContainer.encode(sampled, forKey: .sampled)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sampledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sampled) ?? false
        sampled = sampledDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// This object contains the metadata for one LiveTailSessionUpdate structure. It indicates whether that update includes only a sample of 500 log events out of a larger number of ingested log events, or if it contains all of the matching log events ingested during that second of time.
    public struct LiveTailSessionMetadata: Swift.Equatable {
        /// If this is true, then more than 500 log events matched the request for this update, and the sessionResults includes a sample of 500 of those events. If this is false, then 500 or fewer log events matched the request for this update, so no sampling was necessary. In this case, the sessionResults array includes all log events that matched your request during this time.
        public var sampled: Swift.Bool

        public init(
            sampled: Swift.Bool = false
        )
        {
            self.sampled = sampled
        }
    }

}

extension CloudWatchLogsClientTypes.LiveTailSessionStart: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logEventFilterPattern
        case logGroupIdentifiers
        case logStreamNamePrefixes
        case logStreamNames
        case requestId
        case sessionId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logEventFilterPattern = self.logEventFilterPattern {
            try encodeContainer.encode(logEventFilterPattern, forKey: .logEventFilterPattern)
        }
        if let logGroupIdentifiers = logGroupIdentifiers {
            var logGroupIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logGroupIdentifiers)
            for loggroupidentifier0 in logGroupIdentifiers {
                try logGroupIdentifiersContainer.encode(loggroupidentifier0)
            }
        }
        if let logStreamNamePrefixes = logStreamNamePrefixes {
            var logStreamNamePrefixesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logStreamNamePrefixes)
            for logstreamname0 in logStreamNamePrefixes {
                try logStreamNamePrefixesContainer.encode(logstreamname0)
            }
        }
        if let logStreamNames = logStreamNames {
            var logStreamNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logStreamNames)
            for logstreamname0 in logStreamNames {
                try logStreamNamesContainer.encode(logstreamname0)
            }
        }
        if let requestId = self.requestId {
            try encodeContainer.encode(requestId, forKey: .requestId)
        }
        if let sessionId = self.sessionId {
            try encodeContainer.encode(sessionId, forKey: .sessionId)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let requestIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .requestId)
        requestId = requestIdDecoded
        let sessionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sessionId)
        sessionId = sessionIdDecoded
        let logGroupIdentifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logGroupIdentifiers)
        var logGroupIdentifiersDecoded0:[Swift.String]? = nil
        if let logGroupIdentifiersContainer = logGroupIdentifiersContainer {
            logGroupIdentifiersDecoded0 = [Swift.String]()
            for string0 in logGroupIdentifiersContainer {
                if let string0 = string0 {
                    logGroupIdentifiersDecoded0?.append(string0)
                }
            }
        }
        logGroupIdentifiers = logGroupIdentifiersDecoded0
        let logStreamNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logStreamNames)
        var logStreamNamesDecoded0:[Swift.String]? = nil
        if let logStreamNamesContainer = logStreamNamesContainer {
            logStreamNamesDecoded0 = [Swift.String]()
            for string0 in logStreamNamesContainer {
                if let string0 = string0 {
                    logStreamNamesDecoded0?.append(string0)
                }
            }
        }
        logStreamNames = logStreamNamesDecoded0
        let logStreamNamePrefixesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logStreamNamePrefixes)
        var logStreamNamePrefixesDecoded0:[Swift.String]? = nil
        if let logStreamNamePrefixesContainer = logStreamNamePrefixesContainer {
            logStreamNamePrefixesDecoded0 = [Swift.String]()
            for string0 in logStreamNamePrefixesContainer {
                if let string0 = string0 {
                    logStreamNamePrefixesDecoded0?.append(string0)
                }
            }
        }
        logStreamNamePrefixes = logStreamNamePrefixesDecoded0
        let logEventFilterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logEventFilterPattern)
        logEventFilterPattern = logEventFilterPatternDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// This object contains information about this Live Tail session, including the log groups included and the log stream filters, if any.
    public struct LiveTailSessionStart: Swift.Equatable {
        /// An optional pattern to filter the results to include only log events that match the pattern. For example, a filter pattern of error 404 displays only log events that include both error and 404. For more information about filter pattern syntax, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
        public var logEventFilterPattern: Swift.String?
        /// An array of the names and ARNs of the log groups included in this Live Tail session.
        public var logGroupIdentifiers: [Swift.String]?
        /// If your StartLiveTail operation request included a logStreamNamePrefixes parameter that filtered the session to only include log streams that have names that start with certain prefixes, these prefixes are listed here.
        public var logStreamNamePrefixes: [Swift.String]?
        /// If your StartLiveTail operation request included a logStreamNames parameter that filtered the session to only include certain log streams, these streams are listed here.
        public var logStreamNames: [Swift.String]?
        /// The unique ID generated by CloudWatch Logs to identify this Live Tail session request.
        public var requestId: Swift.String?
        /// The unique ID generated by CloudWatch Logs to identify this Live Tail session.
        public var sessionId: Swift.String?

        public init(
            logEventFilterPattern: Swift.String? = nil,
            logGroupIdentifiers: [Swift.String]? = nil,
            logStreamNamePrefixes: [Swift.String]? = nil,
            logStreamNames: [Swift.String]? = nil,
            requestId: Swift.String? = nil,
            sessionId: Swift.String? = nil
        )
        {
            self.logEventFilterPattern = logEventFilterPattern
            self.logGroupIdentifiers = logGroupIdentifiers
            self.logStreamNamePrefixes = logStreamNamePrefixes
            self.logStreamNames = logStreamNames
            self.requestId = requestId
            self.sessionId = sessionId
        }
    }

}

extension CloudWatchLogsClientTypes.LiveTailSessionUpdate: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case sessionMetadata
        case sessionResults
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let sessionMetadata = self.sessionMetadata {
            try encodeContainer.encode(sessionMetadata, forKey: .sessionMetadata)
        }
        if let sessionResults = sessionResults {
            var sessionResultsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sessionResults)
            for livetailsessionlogevent0 in sessionResults {
                try sessionResultsContainer.encode(livetailsessionlogevent0)
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sessionMetadataDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.LiveTailSessionMetadata.self, forKey: .sessionMetadata)
        sessionMetadata = sessionMetadataDecoded
        let sessionResultsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.LiveTailSessionLogEvent?].self, forKey: .sessionResults)
        var sessionResultsDecoded0:[CloudWatchLogsClientTypes.LiveTailSessionLogEvent]? = nil
        if let sessionResultsContainer = sessionResultsContainer {
            sessionResultsDecoded0 = [CloudWatchLogsClientTypes.LiveTailSessionLogEvent]()
            for structure0 in sessionResultsContainer {
                if let structure0 = structure0 {
                    sessionResultsDecoded0?.append(structure0)
                }
            }
        }
        sessionResults = sessionResultsDecoded0
    }
}

extension CloudWatchLogsClientTypes {
    /// This object contains the log events and metadata for a Live Tail session.
    public struct LiveTailSessionUpdate: Swift.Equatable {
        /// This object contains the session metadata for a Live Tail session.
        public var sessionMetadata: CloudWatchLogsClientTypes.LiveTailSessionMetadata?
        /// An array, where each member of the array includes the information for one log event in the Live Tail session. A sessionResults array can include as many as 500 log events. If the number of log events matching the request exceeds 500 per second, the log events are sampled down to 500 log events to be included in each sessionUpdate structure.
        public var sessionResults: [CloudWatchLogsClientTypes.LiveTailSessionLogEvent]?

        public init(
            sessionMetadata: CloudWatchLogsClientTypes.LiveTailSessionMetadata? = nil,
            sessionResults: [CloudWatchLogsClientTypes.LiveTailSessionLogEvent]? = nil
        )
        {
            self.sessionMetadata = sessionMetadata
            self.sessionResults = sessionResults
        }
    }

}

extension CloudWatchLogsClientTypes.LogGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case creationTime
        case dataProtectionStatus
        case inheritedProperties
        case kmsKeyId
        case logGroupClass
        case logGroupName
        case metricFilterCount
        case retentionInDays
        case storedBytes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let dataProtectionStatus = self.dataProtectionStatus {
            try encodeContainer.encode(dataProtectionStatus.rawValue, forKey: .dataProtectionStatus)
        }
        if let inheritedProperties = inheritedProperties {
            var inheritedPropertiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inheritedProperties)
            for inheritedproperty0 in inheritedProperties {
                try inheritedPropertiesContainer.encode(inheritedproperty0.rawValue)
            }
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let logGroupClass = self.logGroupClass {
            try encodeContainer.encode(logGroupClass.rawValue, forKey: .logGroupClass)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let metricFilterCount = self.metricFilterCount {
            try encodeContainer.encode(metricFilterCount, forKey: .metricFilterCount)
        }
        if let retentionInDays = self.retentionInDays {
            try encodeContainer.encode(retentionInDays, forKey: .retentionInDays)
        }
        if let storedBytes = self.storedBytes {
            try encodeContainer.encode(storedBytes, forKey: .storedBytes)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let retentionInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retentionInDays)
        retentionInDays = retentionInDaysDecoded
        let metricFilterCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .metricFilterCount)
        metricFilterCount = metricFilterCountDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let storedBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storedBytes)
        storedBytes = storedBytesDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let dataProtectionStatusDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.DataProtectionStatus.self, forKey: .dataProtectionStatus)
        dataProtectionStatus = dataProtectionStatusDecoded
        let inheritedPropertiesContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.InheritedProperty?].self, forKey: .inheritedProperties)
        var inheritedPropertiesDecoded0:[CloudWatchLogsClientTypes.InheritedProperty]? = nil
        if let inheritedPropertiesContainer = inheritedPropertiesContainer {
            inheritedPropertiesDecoded0 = [CloudWatchLogsClientTypes.InheritedProperty]()
            for enum0 in inheritedPropertiesContainer {
                if let enum0 = enum0 {
                    inheritedPropertiesDecoded0?.append(enum0)
                }
            }
        }
        inheritedProperties = inheritedPropertiesDecoded0
        let logGroupClassDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.LogGroupClass.self, forKey: .logGroupClass)
        logGroupClass = logGroupClassDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a log group.
    public struct LogGroup: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the log group.
        public var arn: Swift.String?
        /// The creation time of the log group, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var creationTime: Swift.Int?
        /// Displays whether this log group has a protection policy, or whether it had one in the past. For more information, see [PutDataProtectionPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDataProtectionPolicy.html).
        public var dataProtectionStatus: CloudWatchLogsClientTypes.DataProtectionStatus?
        /// Displays all the properties that this log group has inherited from account-level settings.
        public var inheritedProperties: [CloudWatchLogsClientTypes.InheritedProperty]?
        /// The Amazon Resource Name (ARN) of the KMS key to use when encrypting log data.
        public var kmsKeyId: Swift.String?
        /// This specifies the log group class for this log group. There are two classes:
        ///
        /// * The Standard log class supports all CloudWatch Logs features.
        ///
        /// * The Infrequent Access log class supports a subset of CloudWatch Logs features and incurs lower costs.
        ///
        ///
        /// For details about the features supported by each class, see [Log classes](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch_Logs_Log_Classes.html)
        public var logGroupClass: CloudWatchLogsClientTypes.LogGroupClass?
        /// The name of the log group.
        public var logGroupName: Swift.String?
        /// The number of metric filters.
        public var metricFilterCount: Swift.Int?
        /// The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653. To set a log group so that its log events do not expire, use [DeleteRetentionPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html).
        public var retentionInDays: Swift.Int?
        /// The number of bytes stored.
        public var storedBytes: Swift.Int?

        public init(
            arn: Swift.String? = nil,
            creationTime: Swift.Int? = nil,
            dataProtectionStatus: CloudWatchLogsClientTypes.DataProtectionStatus? = nil,
            inheritedProperties: [CloudWatchLogsClientTypes.InheritedProperty]? = nil,
            kmsKeyId: Swift.String? = nil,
            logGroupClass: CloudWatchLogsClientTypes.LogGroupClass? = nil,
            logGroupName: Swift.String? = nil,
            metricFilterCount: Swift.Int? = nil,
            retentionInDays: Swift.Int? = nil,
            storedBytes: Swift.Int? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.dataProtectionStatus = dataProtectionStatus
            self.inheritedProperties = inheritedProperties
            self.kmsKeyId = kmsKeyId
            self.logGroupClass = logGroupClass
            self.logGroupName = logGroupName
            self.metricFilterCount = metricFilterCount
            self.retentionInDays = retentionInDays
            self.storedBytes = storedBytes
        }
    }

}

extension CloudWatchLogsClientTypes {
    public enum LogGroupClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case infrequentAccess
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [LogGroupClass] {
            return [
                .infrequentAccess,
                .standard,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .infrequentAccess: return "INFREQUENT_ACCESS"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogGroupClass(rawValue: rawValue) ?? LogGroupClass.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchLogsClientTypes.LogGroupField: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case percent
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if percent != 0 {
            try encodeContainer.encode(percent, forKey: .percent)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let percentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .percent) ?? 0
        percent = percentDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// The fields contained in log events found by a GetLogGroupFields operation, along with the percentage of queried log events in which each field appears.
    public struct LogGroupField: Swift.Equatable {
        /// The name of a log field.
        public var name: Swift.String?
        /// The percentage of log events queried that contained the field.
        public var percent: Swift.Int

        public init(
            name: Swift.String? = nil,
            percent: Swift.Int = 0
        )
        {
            self.name = name
            self.percent = percent
        }
    }

}

extension CloudWatchLogsClientTypes.LogStream: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case creationTime
        case firstEventTimestamp
        case lastEventTimestamp
        case lastIngestionTime
        case logStreamName
        case storedBytes
        case uploadSequenceToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let firstEventTimestamp = self.firstEventTimestamp {
            try encodeContainer.encode(firstEventTimestamp, forKey: .firstEventTimestamp)
        }
        if let lastEventTimestamp = self.lastEventTimestamp {
            try encodeContainer.encode(lastEventTimestamp, forKey: .lastEventTimestamp)
        }
        if let lastIngestionTime = self.lastIngestionTime {
            try encodeContainer.encode(lastIngestionTime, forKey: .lastIngestionTime)
        }
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let storedBytes = self.storedBytes {
            try encodeContainer.encode(storedBytes, forKey: .storedBytes)
        }
        if let uploadSequenceToken = self.uploadSequenceToken {
            try encodeContainer.encode(uploadSequenceToken, forKey: .uploadSequenceToken)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let firstEventTimestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .firstEventTimestamp)
        firstEventTimestamp = firstEventTimestampDecoded
        let lastEventTimestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastEventTimestamp)
        lastEventTimestamp = lastEventTimestampDecoded
        let lastIngestionTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastIngestionTime)
        lastIngestionTime = lastIngestionTimeDecoded
        let uploadSequenceTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uploadSequenceToken)
        uploadSequenceToken = uploadSequenceTokenDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let storedBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storedBytes)
        storedBytes = storedBytesDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a log stream, which is a sequence of log events from a single emitter of logs.
    public struct LogStream: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the log stream.
        public var arn: Swift.String?
        /// The creation time of the stream, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var creationTime: Swift.Int?
        /// The time of the first event, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var firstEventTimestamp: Swift.Int?
        /// The time of the most recent log event in the log stream in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. The lastEventTime value updates on an eventual consistency basis. It typically updates in less than an hour from ingestion, but in rare situations might take longer.
        public var lastEventTimestamp: Swift.Int?
        /// The ingestion time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC The lastIngestionTime value updates on an eventual consistency basis. It typically updates in less than an hour after ingestion, but in rare situations might take longer.
        public var lastIngestionTime: Swift.Int?
        /// The name of the log stream.
        public var logStreamName: Swift.String?
        /// The number of bytes stored. Important: As of June 17, 2019, this parameter is no longer supported for log streams, and is always reported as zero. This change applies only to log streams. The storedBytes parameter for log groups is not affected.
        @available(*, deprecated, message: "Starting on June 17, 2019, this parameter will be deprecated for log streams, and will be reported as zero. This change applies only to log streams. The storedBytes parameter for log groups is not affected.")
        public var storedBytes: Swift.Int?
        /// The sequence token. The sequence token is now ignored in PutLogEvents actions. PutLogEvents actions are always accepted regardless of receiving an invalid sequence token. You don't need to obtain uploadSequenceToken to use a PutLogEvents action.
        public var uploadSequenceToken: Swift.String?

        public init(
            arn: Swift.String? = nil,
            creationTime: Swift.Int? = nil,
            firstEventTimestamp: Swift.Int? = nil,
            lastEventTimestamp: Swift.Int? = nil,
            lastIngestionTime: Swift.Int? = nil,
            logStreamName: Swift.String? = nil,
            storedBytes: Swift.Int? = nil,
            uploadSequenceToken: Swift.String? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.firstEventTimestamp = firstEventTimestamp
            self.lastEventTimestamp = lastEventTimestamp
            self.lastIngestionTime = lastIngestionTime
            self.logStreamName = logStreamName
            self.storedBytes = storedBytes
            self.uploadSequenceToken = uploadSequenceToken
        }
    }

}

extension MalformedQueryException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: MalformedQueryExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
            self.properties.queryCompileError = output.queryCompileError
        } else {
            self.properties.message = nil
            self.properties.queryCompileError = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The query string is not valid. Details about this error are displayed in a QueryCompileError object. For more information, see [QueryCompileError](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_QueryCompileError.html). For more information about valid query syntax, see [CloudWatch Logs Insights Query Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html).
public struct MalformedQueryException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// Reserved.
        public internal(set) var queryCompileError: CloudWatchLogsClientTypes.QueryCompileError? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MalformedQueryException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        queryCompileError: CloudWatchLogsClientTypes.QueryCompileError? = nil
    )
    {
        self.properties.message = message
        self.properties.queryCompileError = queryCompileError
    }
}

struct MalformedQueryExceptionBody: Swift.Equatable {
    let queryCompileError: CloudWatchLogsClientTypes.QueryCompileError?
    let message: Swift.String?
}

extension MalformedQueryExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case queryCompileError
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryCompileErrorDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.QueryCompileError.self, forKey: .queryCompileError)
        queryCompileError = queryCompileErrorDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchLogsClientTypes.MetricFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime
        case filterName
        case filterPattern
        case logGroupName
        case metricTransformations
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let filterName = self.filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let filterPattern = self.filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let metricTransformations = metricTransformations {
            var metricTransformationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricTransformations)
            for metrictransformation0 in metricTransformations {
                try metricTransformationsContainer.encode(metrictransformation0)
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterName)
        filterName = filterNameDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let metricTransformationsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.MetricTransformation?].self, forKey: .metricTransformations)
        var metricTransformationsDecoded0:[CloudWatchLogsClientTypes.MetricTransformation]? = nil
        if let metricTransformationsContainer = metricTransformationsContainer {
            metricTransformationsDecoded0 = [CloudWatchLogsClientTypes.MetricTransformation]()
            for structure0 in metricTransformationsContainer {
                if let structure0 = structure0 {
                    metricTransformationsDecoded0?.append(structure0)
                }
            }
        }
        metricTransformations = metricTransformationsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Metric filters express how CloudWatch Logs would extract metric observations from ingested log events and transform them into metric data in a CloudWatch metric.
    public struct MetricFilter: Swift.Equatable {
        /// The creation time of the metric filter, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var creationTime: Swift.Int?
        /// The name of the metric filter.
        public var filterName: Swift.String?
        /// A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.
        public var filterPattern: Swift.String?
        /// The name of the log group.
        public var logGroupName: Swift.String?
        /// The metric transformations.
        public var metricTransformations: [CloudWatchLogsClientTypes.MetricTransformation]?

        public init(
            creationTime: Swift.Int? = nil,
            filterName: Swift.String? = nil,
            filterPattern: Swift.String? = nil,
            logGroupName: Swift.String? = nil,
            metricTransformations: [CloudWatchLogsClientTypes.MetricTransformation]? = nil
        )
        {
            self.creationTime = creationTime
            self.filterName = filterName
            self.filterPattern = filterPattern
            self.logGroupName = logGroupName
            self.metricTransformations = metricTransformations
        }
    }

}

extension CloudWatchLogsClientTypes.MetricFilterMatchRecord: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventMessage
        case eventNumber
        case extractedValues
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventMessage = self.eventMessage {
            try encodeContainer.encode(eventMessage, forKey: .eventMessage)
        }
        if eventNumber != 0 {
            try encodeContainer.encode(eventNumber, forKey: .eventNumber)
        }
        if let extractedValues = extractedValues {
            var extractedValuesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .extractedValues)
            for (dictKey0, extractedValues0) in extractedValues {
                try extractedValuesContainer.encode(extractedValues0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .eventNumber) ?? 0
        eventNumber = eventNumberDecoded
        let eventMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventMessage)
        eventMessage = eventMessageDecoded
        let extractedValuesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .extractedValues)
        var extractedValuesDecoded0: [Swift.String:Swift.String]? = nil
        if let extractedValuesContainer = extractedValuesContainer {
            extractedValuesDecoded0 = [Swift.String:Swift.String]()
            for (key0, value0) in extractedValuesContainer {
                if let value0 = value0 {
                    extractedValuesDecoded0?[key0] = value0
                }
            }
        }
        extractedValues = extractedValuesDecoded0
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a matched event.
    public struct MetricFilterMatchRecord: Swift.Equatable {
        /// The raw event data.
        public var eventMessage: Swift.String?
        /// The event number.
        public var eventNumber: Swift.Int
        /// The values extracted from the event data by the filter.
        public var extractedValues: [Swift.String:Swift.String]?

        public init(
            eventMessage: Swift.String? = nil,
            eventNumber: Swift.Int = 0,
            extractedValues: [Swift.String:Swift.String]? = nil
        )
        {
            self.eventMessage = eventMessage
            self.eventNumber = eventNumber
            self.extractedValues = extractedValues
        }
    }

}

extension CloudWatchLogsClientTypes.MetricTransformation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultValue
        case dimensions
        case metricName
        case metricNamespace
        case metricValue
        case unit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultValue = self.defaultValue {
            try encodeContainer.encode(defaultValue, forKey: .defaultValue)
        }
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .dimensions)
            for (dictKey0, dimensions0) in dimensions {
                try dimensionsContainer.encode(dimensions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let metricNamespace = self.metricNamespace {
            try encodeContainer.encode(metricNamespace, forKey: .metricNamespace)
        }
        if let metricValue = self.metricValue {
            try encodeContainer.encode(metricValue, forKey: .metricValue)
        }
        if let unit = self.unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricNamespace)
        metricNamespace = metricNamespaceDecoded
        let metricValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricValue)
        metricValue = metricValueDecoded
        let defaultValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
        let dimensionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .dimensions)
        var dimensionsDecoded0: [Swift.String:Swift.String]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, dimensionsvalue0) in dimensionsContainer {
                if let dimensionsvalue0 = dimensionsvalue0 {
                    dimensionsDecoded0?[key0] = dimensionsvalue0
                }
            }
        }
        dimensions = dimensionsDecoded0
        let unitDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.StandardUnit.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Indicates how to transform ingested log events to metric data in a CloudWatch metric.
    public struct MetricTransformation: Swift.Equatable {
        /// (Optional) The value to emit when a filter pattern does not match a log event. This value can be null.
        public var defaultValue: Swift.Double?
        /// The fields to use as dimensions for the metric. One metric filter can include as many as three dimensions. Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as IPAddress or requestID as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric. CloudWatch Logs disables a metric filter if it generates 1000 different name/value pairs for your specified dimensions within a certain amount of time. This helps to prevent accidental high charges. You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [ Creating a Billing Alarm to Monitor Your Estimated Amazon Web Services Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
        public var dimensions: [Swift.String:Swift.String]?
        /// The name of the CloudWatch metric.
        /// This member is required.
        public var metricName: Swift.String?
        /// A custom namespace to contain your metric in CloudWatch. Use namespaces to group together metrics that are similar. For more information, see [Namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace).
        /// This member is required.
        public var metricNamespace: Swift.String?
        /// The value to publish to the CloudWatch metric when a filter pattern matches a log event.
        /// This member is required.
        public var metricValue: Swift.String?
        /// The unit to assign to the metric. If you omit this, the unit is set as None.
        public var unit: CloudWatchLogsClientTypes.StandardUnit?

        public init(
            defaultValue: Swift.Double? = nil,
            dimensions: [Swift.String:Swift.String]? = nil,
            metricName: Swift.String? = nil,
            metricNamespace: Swift.String? = nil,
            metricValue: Swift.String? = nil,
            unit: CloudWatchLogsClientTypes.StandardUnit? = nil
        )
        {
            self.defaultValue = defaultValue
            self.dimensions = dimensions
            self.metricName = metricName
            self.metricNamespace = metricNamespace
            self.metricValue = metricValue
            self.unit = unit
        }
    }

}

extension OperationAbortedException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: OperationAbortedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Multiple concurrent requests to update the same resource were in conflict.
public struct OperationAbortedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OperationAbortedException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct OperationAbortedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension OperationAbortedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchLogsClientTypes {
    public enum OrderBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case lasteventtime
        case logstreamname
        case sdkUnknown(Swift.String)

        public static var allCases: [OrderBy] {
            return [
                .lasteventtime,
                .logstreamname,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .lasteventtime: return "LastEventTime"
            case .logstreamname: return "LogStreamName"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OrderBy(rawValue: rawValue) ?? OrderBy.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchLogsClientTypes {
    public enum OutputFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case json
        case parquet
        case plain
        case raw
        case w3c
        case sdkUnknown(Swift.String)

        public static var allCases: [OutputFormat] {
            return [
                .json,
                .parquet,
                .plain,
                .raw,
                .w3c,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .json: return "json"
            case .parquet: return "parquet"
            case .plain: return "plain"
            case .raw: return "raw"
            case .w3c: return "w3c"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OutputFormat(rawValue: rawValue) ?? OutputFormat.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchLogsClientTypes.OutputLogEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ingestionTime
        case message
        case timestamp
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ingestionTime = self.ingestionTime {
            try encodeContainer.encode(ingestionTime, forKey: .ingestionTime)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let ingestionTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ingestionTime)
        ingestionTime = ingestionTimeDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a log event.
    public struct OutputLogEvent: Swift.Equatable {
        /// The time the event was ingested, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var ingestionTime: Swift.Int?
        /// The data contained in the log event.
        public var message: Swift.String?
        /// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var timestamp: Swift.Int?

        public init(
            ingestionTime: Swift.Int? = nil,
            message: Swift.String? = nil,
            timestamp: Swift.Int? = nil
        )
        {
            self.ingestionTime = ingestionTime
            self.message = message
            self.timestamp = timestamp
        }
    }

}

extension CloudWatchLogsClientTypes.PatternToken: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dynamicTokenPosition
        case enumerations
        case isDynamic
        case tokenString
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if dynamicTokenPosition != 0 {
            try encodeContainer.encode(dynamicTokenPosition, forKey: .dynamicTokenPosition)
        }
        if let enumerations = enumerations {
            var enumerationsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .enumerations)
            for (dictKey0, enumerations0) in enumerations {
                try enumerationsContainer.encode(enumerations0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let isDynamic = self.isDynamic {
            try encodeContainer.encode(isDynamic, forKey: .isDynamic)
        }
        if let tokenString = self.tokenString {
            try encodeContainer.encode(tokenString, forKey: .tokenString)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dynamicTokenPositionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dynamicTokenPosition) ?? 0
        dynamicTokenPosition = dynamicTokenPositionDecoded
        let isDynamicDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .isDynamic)
        isDynamic = isDynamicDecoded
        let tokenStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tokenString)
        tokenString = tokenStringDecoded
        let enumerationsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Int?].self, forKey: .enumerations)
        var enumerationsDecoded0: [Swift.String:Swift.Int]? = nil
        if let enumerationsContainer = enumerationsContainer {
            enumerationsDecoded0 = [Swift.String:Swift.Int]()
            for (key0, tokenvalue0) in enumerationsContainer {
                if let tokenvalue0 = tokenvalue0 {
                    enumerationsDecoded0?[key0] = tokenvalue0
                }
            }
        }
        enumerations = enumerationsDecoded0
    }
}

extension CloudWatchLogsClientTypes {
    /// A tructures that contains information about one pattern token related to an anomaly. For more information about patterns and tokens, see [CreateLogAnomalyDetector](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateLogAnomalyDetector.html).
    public struct PatternToken: Swift.Equatable {
        /// For a dynamic token, this indicates where in the pattern that this token appears, related to other dynamic tokens. The dynamic token that appears first has a value of 1, the one that appears second is 2, and so on.
        public var dynamicTokenPosition: Swift.Int
        /// Contains the values found for a dynamic token, and the number of times each value was found.
        public var enumerations: [Swift.String:Swift.Int]?
        /// Specifies whether this is a dynamic token.
        public var isDynamic: Swift.Bool?
        /// The string represented by this token. If this is a dynamic token, the value will be <*>
        public var tokenString: Swift.String?

        public init(
            dynamicTokenPosition: Swift.Int = 0,
            enumerations: [Swift.String:Swift.Int]? = nil,
            isDynamic: Swift.Bool? = nil,
            tokenString: Swift.String? = nil
        )
        {
            self.dynamicTokenPosition = dynamicTokenPosition
            self.enumerations = enumerations
            self.isDynamic = isDynamic
            self.tokenString = tokenString
        }
    }

}

extension CloudWatchLogsClientTypes.Policy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryDestinationPolicy
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryDestinationPolicy = self.deliveryDestinationPolicy {
            try encodeContainer.encode(deliveryDestinationPolicy, forKey: .deliveryDestinationPolicy)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryDestinationPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryDestinationPolicy)
        deliveryDestinationPolicy = deliveryDestinationPolicyDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// A structure that contains information about one delivery destination policy.
    public struct Policy: Swift.Equatable {
        /// The contents of the delivery destination policy.
        public var deliveryDestinationPolicy: Swift.String?

        public init(
            deliveryDestinationPolicy: Swift.String? = nil
        )
        {
            self.deliveryDestinationPolicy = deliveryDestinationPolicy
        }
    }

}

extension CloudWatchLogsClientTypes {
    public enum PolicyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case dataProtectionPolicy
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicyType] {
            return [
                .dataProtectionPolicy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .dataProtectionPolicy: return "DATA_PROTECTION_POLICY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PolicyType(rawValue: rawValue) ?? PolicyType.sdkUnknown(rawValue)
        }
    }
}

extension PutAccountPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyDocument
        case policyName
        case policyType
        case scope
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyDocument = self.policyDocument {
            try encodeContainer.encode(policyDocument, forKey: .policyDocument)
        }
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let policyType = self.policyType {
            try encodeContainer.encode(policyType.rawValue, forKey: .policyType)
        }
        if let scope = self.scope {
            try encodeContainer.encode(scope.rawValue, forKey: .scope)
        }
    }
}

extension PutAccountPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutAccountPolicyInput: Swift.Equatable {
    /// Specify the data protection policy, in JSON. This policy must include two JSON blocks:
    ///
    /// * The first block must include both a DataIdentifer array and an Operation property with an Audit action. The DataIdentifer array lists the types of sensitive data that you want to mask. For more information about the available options, see [Types of data that you can mask](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data-types.html). The Operation property with an Audit action is required to find the sensitive data terms. This Audit action must contain a FindingsDestination object. You can optionally use that FindingsDestination object to list one or more destinations to send audit findings to. If you specify destinations such as log groups, Kinesis Data Firehose streams, and S3 buckets, they must already exist.
    ///
    /// * The second block must include both a DataIdentifer array and an Operation property with an Deidentify action. The DataIdentifer array must exactly match the DataIdentifer array in the first block of the policy. The Operation property with the Deidentify action is what actually masks the data, and it must contain the  "MaskConfig": {} object. The  "MaskConfig": {} object must be empty.
    ///
    ///
    /// For an example data protection policy, see the Examples section on this page. The contents of the two DataIdentifer arrays must match exactly. In addition to the two JSON blocks, the policyDocument can also include Name, Description, and Version fields. The Name is different than the operation's policyName parameter, and is used as a dimension when CloudWatch Logs reports audit findings metrics to CloudWatch. The JSON specified in policyDocument can be up to 30,720 characters.
    /// This member is required.
    public var policyDocument: Swift.String?
    /// A name for the policy. This must be unique within the account.
    /// This member is required.
    public var policyName: Swift.String?
    /// Currently the only valid value for this parameter is DATA_PROTECTION_POLICY.
    /// This member is required.
    public var policyType: CloudWatchLogsClientTypes.PolicyType?
    /// Currently the only valid value for this parameter is ALL, which specifies that the data protection policy applies to all log groups in the account. If you omit this parameter, the default of ALL is used.
    public var scope: CloudWatchLogsClientTypes.Scope?

    public init(
        policyDocument: Swift.String? = nil,
        policyName: Swift.String? = nil,
        policyType: CloudWatchLogsClientTypes.PolicyType? = nil,
        scope: CloudWatchLogsClientTypes.Scope? = nil
    )
    {
        self.policyDocument = policyDocument
        self.policyName = policyName
        self.policyType = policyType
        self.scope = scope
    }
}

struct PutAccountPolicyInputBody: Swift.Equatable {
    let policyName: Swift.String?
    let policyDocument: Swift.String?
    let policyType: CloudWatchLogsClientTypes.PolicyType?
    let scope: CloudWatchLogsClientTypes.Scope?
}

extension PutAccountPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyDocument
        case policyName
        case policyType
        case scope
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
        let policyTypeDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.PolicyType.self, forKey: .policyType)
        policyType = policyTypeDecoded
        let scopeDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.Scope.self, forKey: .scope)
        scope = scopeDecoded
    }
}

extension PutAccountPolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: PutAccountPolicyOutputBody = try responseDecoder.decode(responseBody: data)
            self.accountPolicy = output.accountPolicy
        } else {
            self.accountPolicy = nil
        }
    }
}

public struct PutAccountPolicyOutput: Swift.Equatable {
    /// The account policy that you created.
    public var accountPolicy: CloudWatchLogsClientTypes.AccountPolicy?

    public init(
        accountPolicy: CloudWatchLogsClientTypes.AccountPolicy? = nil
    )
    {
        self.accountPolicy = accountPolicy
    }
}

struct PutAccountPolicyOutputBody: Swift.Equatable {
    let accountPolicy: CloudWatchLogsClientTypes.AccountPolicy?
}

extension PutAccountPolicyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountPolicy
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountPolicyDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.AccountPolicy.self, forKey: .accountPolicy)
        accountPolicy = accountPolicyDecoded
    }
}

enum PutAccountPolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension PutDataProtectionPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupIdentifier
        case policyDocument
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupIdentifier = self.logGroupIdentifier {
            try encodeContainer.encode(logGroupIdentifier, forKey: .logGroupIdentifier)
        }
        if let policyDocument = self.policyDocument {
            try encodeContainer.encode(policyDocument, forKey: .policyDocument)
        }
    }
}

extension PutDataProtectionPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutDataProtectionPolicyInput: Swift.Equatable {
    /// Specify either the log group name or log group ARN.
    /// This member is required.
    public var logGroupIdentifier: Swift.String?
    /// Specify the data protection policy, in JSON. This policy must include two JSON blocks:
    ///
    /// * The first block must include both a DataIdentifer array and an Operation property with an Audit action. The DataIdentifer array lists the types of sensitive data that you want to mask. For more information about the available options, see [Types of data that you can mask](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data-types.html). The Operation property with an Audit action is required to find the sensitive data terms. This Audit action must contain a FindingsDestination object. You can optionally use that FindingsDestination object to list one or more destinations to send audit findings to. If you specify destinations such as log groups, Kinesis Data Firehose streams, and S3 buckets, they must already exist.
    ///
    /// * The second block must include both a DataIdentifer array and an Operation property with an Deidentify action. The DataIdentifer array must exactly match the DataIdentifer array in the first block of the policy. The Operation property with the Deidentify action is what actually masks the data, and it must contain the  "MaskConfig": {} object. The  "MaskConfig": {} object must be empty.
    ///
    ///
    /// For an example data protection policy, see the Examples section on this page. The contents of the two DataIdentifer arrays must match exactly. In addition to the two JSON blocks, the policyDocument can also include Name, Description, and Version fields. The Name is used as a dimension when CloudWatch Logs reports audit findings metrics to CloudWatch. The JSON specified in policyDocument can be up to 30,720 characters.
    /// This member is required.
    public var policyDocument: Swift.String?

    public init(
        logGroupIdentifier: Swift.String? = nil,
        policyDocument: Swift.String? = nil
    )
    {
        self.logGroupIdentifier = logGroupIdentifier
        self.policyDocument = policyDocument
    }
}

struct PutDataProtectionPolicyInputBody: Swift.Equatable {
    let logGroupIdentifier: Swift.String?
    let policyDocument: Swift.String?
}

extension PutDataProtectionPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupIdentifier
        case policyDocument
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupIdentifier)
        logGroupIdentifier = logGroupIdentifierDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
    }
}

extension PutDataProtectionPolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: PutDataProtectionPolicyOutputBody = try responseDecoder.decode(responseBody: data)
            self.lastUpdatedTime = output.lastUpdatedTime
            self.logGroupIdentifier = output.logGroupIdentifier
            self.policyDocument = output.policyDocument
        } else {
            self.lastUpdatedTime = nil
            self.logGroupIdentifier = nil
            self.policyDocument = nil
        }
    }
}

public struct PutDataProtectionPolicyOutput: Swift.Equatable {
    /// The date and time that this policy was most recently updated.
    public var lastUpdatedTime: Swift.Int?
    /// The log group name or ARN that you specified in your request.
    public var logGroupIdentifier: Swift.String?
    /// The data protection policy used for this log group.
    public var policyDocument: Swift.String?

    public init(
        lastUpdatedTime: Swift.Int? = nil,
        logGroupIdentifier: Swift.String? = nil,
        policyDocument: Swift.String? = nil
    )
    {
        self.lastUpdatedTime = lastUpdatedTime
        self.logGroupIdentifier = logGroupIdentifier
        self.policyDocument = policyDocument
    }
}

struct PutDataProtectionPolicyOutputBody: Swift.Equatable {
    let logGroupIdentifier: Swift.String?
    let policyDocument: Swift.String?
    let lastUpdatedTime: Swift.Int?
}

extension PutDataProtectionPolicyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastUpdatedTime
        case logGroupIdentifier
        case policyDocument
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupIdentifier)
        logGroupIdentifier = logGroupIdentifierDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
    }
}

enum PutDataProtectionPolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension PutDeliveryDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryDestinationConfiguration
        case name
        case outputFormat
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryDestinationConfiguration = self.deliveryDestinationConfiguration {
            try encodeContainer.encode(deliveryDestinationConfiguration, forKey: .deliveryDestinationConfiguration)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputFormat = self.outputFormat {
            try encodeContainer.encode(outputFormat.rawValue, forKey: .outputFormat)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension PutDeliveryDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutDeliveryDestinationInput: Swift.Equatable {
    /// A structure that contains the ARN of the Amazon Web Services resource that will receive the logs.
    /// This member is required.
    public var deliveryDestinationConfiguration: CloudWatchLogsClientTypes.DeliveryDestinationConfiguration?
    /// A name for this delivery destination. This name must be unique for all delivery destinations in your account.
    /// This member is required.
    public var name: Swift.String?
    /// The format for the logs that this delivery destination will receive.
    public var outputFormat: CloudWatchLogsClientTypes.OutputFormat?
    /// An optional list of key-value pairs to associate with the resource. For more information about tagging, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html)
    public var tags: [Swift.String:Swift.String]?

    public init(
        deliveryDestinationConfiguration: CloudWatchLogsClientTypes.DeliveryDestinationConfiguration? = nil,
        name: Swift.String? = nil,
        outputFormat: CloudWatchLogsClientTypes.OutputFormat? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.deliveryDestinationConfiguration = deliveryDestinationConfiguration
        self.name = name
        self.outputFormat = outputFormat
        self.tags = tags
    }
}

struct PutDeliveryDestinationInputBody: Swift.Equatable {
    let name: Swift.String?
    let outputFormat: CloudWatchLogsClientTypes.OutputFormat?
    let deliveryDestinationConfiguration: CloudWatchLogsClientTypes.DeliveryDestinationConfiguration?
    let tags: [Swift.String:Swift.String]?
}

extension PutDeliveryDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryDestinationConfiguration
        case name
        case outputFormat
        case tags
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let outputFormatDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.OutputFormat.self, forKey: .outputFormat)
        outputFormat = outputFormatDecoded
        let deliveryDestinationConfigurationDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.DeliveryDestinationConfiguration.self, forKey: .deliveryDestinationConfiguration)
        deliveryDestinationConfiguration = deliveryDestinationConfigurationDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PutDeliveryDestinationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: PutDeliveryDestinationOutputBody = try responseDecoder.decode(responseBody: data)
            self.deliveryDestination = output.deliveryDestination
        } else {
            self.deliveryDestination = nil
        }
    }
}

public struct PutDeliveryDestinationOutput: Swift.Equatable {
    /// A structure containing information about the delivery destination that you just created or updated.
    public var deliveryDestination: CloudWatchLogsClientTypes.DeliveryDestination?

    public init(
        deliveryDestination: CloudWatchLogsClientTypes.DeliveryDestination? = nil
    )
    {
        self.deliveryDestination = deliveryDestination
    }
}

struct PutDeliveryDestinationOutputBody: Swift.Equatable {
    let deliveryDestination: CloudWatchLogsClientTypes.DeliveryDestination?
}

extension PutDeliveryDestinationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryDestination
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryDestinationDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.DeliveryDestination.self, forKey: .deliveryDestination)
        deliveryDestination = deliveryDestinationDecoded
    }
}

enum PutDeliveryDestinationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension PutDeliveryDestinationPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryDestinationName
        case deliveryDestinationPolicy
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deliveryDestinationName = self.deliveryDestinationName {
            try encodeContainer.encode(deliveryDestinationName, forKey: .deliveryDestinationName)
        }
        if let deliveryDestinationPolicy = self.deliveryDestinationPolicy {
            try encodeContainer.encode(deliveryDestinationPolicy, forKey: .deliveryDestinationPolicy)
        }
    }
}

extension PutDeliveryDestinationPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutDeliveryDestinationPolicyInput: Swift.Equatable {
    /// The name of the delivery destination to assign this policy to.
    /// This member is required.
    public var deliveryDestinationName: Swift.String?
    /// The contents of the policy.
    /// This member is required.
    public var deliveryDestinationPolicy: Swift.String?

    public init(
        deliveryDestinationName: Swift.String? = nil,
        deliveryDestinationPolicy: Swift.String? = nil
    )
    {
        self.deliveryDestinationName = deliveryDestinationName
        self.deliveryDestinationPolicy = deliveryDestinationPolicy
    }
}

struct PutDeliveryDestinationPolicyInputBody: Swift.Equatable {
    let deliveryDestinationName: Swift.String?
    let deliveryDestinationPolicy: Swift.String?
}

extension PutDeliveryDestinationPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliveryDestinationName
        case deliveryDestinationPolicy
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliveryDestinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryDestinationName)
        deliveryDestinationName = deliveryDestinationNameDecoded
        let deliveryDestinationPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deliveryDestinationPolicy)
        deliveryDestinationPolicy = deliveryDestinationPolicyDecoded
    }
}

extension PutDeliveryDestinationPolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: PutDeliveryDestinationPolicyOutputBody = try responseDecoder.decode(responseBody: data)
            self.policy = output.policy
        } else {
            self.policy = nil
        }
    }
}

public struct PutDeliveryDestinationPolicyOutput: Swift.Equatable {
    /// The contents of the policy that you just created.
    public var policy: CloudWatchLogsClientTypes.Policy?

    public init(
        policy: CloudWatchLogsClientTypes.Policy? = nil
    )
    {
        self.policy = policy
    }
}

struct PutDeliveryDestinationPolicyOutputBody: Swift.Equatable {
    let policy: CloudWatchLogsClientTypes.Policy?
}

extension PutDeliveryDestinationPolicyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policy
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.Policy.self, forKey: .policy)
        policy = policyDecoded
    }
}

enum PutDeliveryDestinationPolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension PutDeliverySourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logType
        case name
        case resourceArn
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logType = self.logType {
            try encodeContainer.encode(logType, forKey: .logType)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension PutDeliverySourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutDeliverySourceInput: Swift.Equatable {
    /// Defines the type of log that the source is sending. For valid values for this parameter, see the documentation for the source service.
    /// This member is required.
    public var logType: Swift.String?
    /// A name for this delivery source. This name must be unique for all delivery sources in your account.
    /// This member is required.
    public var name: Swift.String?
    /// The ARN of the Amazon Web Services resource that is generating and sending logs. For example, arn:aws:workmail:us-east-1:123456789012:organization/m-1234EXAMPLEabcd1234abcd1234abcd1234
    /// This member is required.
    public var resourceArn: Swift.String?
    /// An optional list of key-value pairs to associate with the resource. For more information about tagging, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html)
    public var tags: [Swift.String:Swift.String]?

    public init(
        logType: Swift.String? = nil,
        name: Swift.String? = nil,
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.logType = logType
        self.name = name
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct PutDeliverySourceInputBody: Swift.Equatable {
    let name: Swift.String?
    let resourceArn: Swift.String?
    let logType: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension PutDeliverySourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logType
        case name
        case resourceArn
        case tags
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let logTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logType)
        logType = logTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PutDeliverySourceOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: PutDeliverySourceOutputBody = try responseDecoder.decode(responseBody: data)
            self.deliverySource = output.deliverySource
        } else {
            self.deliverySource = nil
        }
    }
}

public struct PutDeliverySourceOutput: Swift.Equatable {
    /// A structure containing information about the delivery source that was just created or updated.
    public var deliverySource: CloudWatchLogsClientTypes.DeliverySource?

    public init(
        deliverySource: CloudWatchLogsClientTypes.DeliverySource? = nil
    )
    {
        self.deliverySource = deliverySource
    }
}

struct PutDeliverySourceOutputBody: Swift.Equatable {
    let deliverySource: CloudWatchLogsClientTypes.DeliverySource?
}

extension PutDeliverySourceOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deliverySource
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deliverySourceDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.DeliverySource.self, forKey: .deliverySource)
        deliverySource = deliverySourceDecoded
    }
}

enum PutDeliverySourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension PutDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationName
        case roleArn
        case tags
        case targetArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationName = self.destinationName {
            try encodeContainer.encode(destinationName, forKey: .destinationName)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let targetArn = self.targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
    }
}

extension PutDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutDestinationInput: Swift.Equatable {
    /// A name for the destination.
    /// This member is required.
    public var destinationName: Swift.String?
    /// The ARN of an IAM role that grants CloudWatch Logs permissions to call the Amazon Kinesis PutRecord operation on the destination stream.
    /// This member is required.
    public var roleArn: Swift.String?
    /// An optional list of key-value pairs to associate with the resource. For more information about tagging, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html)
    public var tags: [Swift.String:Swift.String]?
    /// The ARN of an Amazon Kinesis stream to which to deliver matching log events.
    /// This member is required.
    public var targetArn: Swift.String?

    public init(
        destinationName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        targetArn: Swift.String? = nil
    )
    {
        self.destinationName = destinationName
        self.roleArn = roleArn
        self.tags = tags
        self.targetArn = targetArn
    }
}

struct PutDestinationInputBody: Swift.Equatable {
    let destinationName: Swift.String?
    let targetArn: Swift.String?
    let roleArn: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension PutDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationName
        case roleArn
        case tags
        case targetArn
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationName)
        destinationName = destinationNameDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PutDestinationOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: PutDestinationOutputBody = try responseDecoder.decode(responseBody: data)
            self.destination = output.destination
        } else {
            self.destination = nil
        }
    }
}

public struct PutDestinationOutput: Swift.Equatable {
    /// The destination.
    public var destination: CloudWatchLogsClientTypes.Destination?

    public init(
        destination: CloudWatchLogsClientTypes.Destination? = nil
    )
    {
        self.destination = destination
    }
}

struct PutDestinationOutputBody: Swift.Equatable {
    let destination: CloudWatchLogsClientTypes.Destination?
}

extension PutDestinationOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.Destination.self, forKey: .destination)
        destination = destinationDecoded
    }
}

enum PutDestinationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension PutDestinationPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicy
        case destinationName
        case forceUpdate
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicy = self.accessPolicy {
            try encodeContainer.encode(accessPolicy, forKey: .accessPolicy)
        }
        if let destinationName = self.destinationName {
            try encodeContainer.encode(destinationName, forKey: .destinationName)
        }
        if let forceUpdate = self.forceUpdate {
            try encodeContainer.encode(forceUpdate, forKey: .forceUpdate)
        }
    }
}

extension PutDestinationPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutDestinationPolicyInput: Swift.Equatable {
    /// An IAM policy document that authorizes cross-account users to deliver their log events to the associated destination. This can be up to 5120 bytes.
    /// This member is required.
    public var accessPolicy: Swift.String?
    /// A name for an existing destination.
    /// This member is required.
    public var destinationName: Swift.String?
    /// Specify true if you are updating an existing destination policy to grant permission to an organization ID instead of granting permission to individual Amazon Web Services accounts. Before you update a destination policy this way, you must first update the subscription filters in the accounts that send logs to this destination. If you do not, the subscription filters might stop working. By specifying true for forceUpdate, you are affirming that you have already updated the subscription filters. For more information, see [ Updating an existing cross-account subscription](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Cross-Account-Log_Subscription-Update.html) If you omit this parameter, the default of false is used.
    public var forceUpdate: Swift.Bool?

    public init(
        accessPolicy: Swift.String? = nil,
        destinationName: Swift.String? = nil,
        forceUpdate: Swift.Bool? = nil
    )
    {
        self.accessPolicy = accessPolicy
        self.destinationName = destinationName
        self.forceUpdate = forceUpdate
    }
}

struct PutDestinationPolicyInputBody: Swift.Equatable {
    let destinationName: Swift.String?
    let accessPolicy: Swift.String?
    let forceUpdate: Swift.Bool?
}

extension PutDestinationPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicy
        case destinationName
        case forceUpdate
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationName)
        destinationName = destinationNameDecoded
        let accessPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPolicy)
        accessPolicy = accessPolicyDecoded
        let forceUpdateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .forceUpdate)
        forceUpdate = forceUpdateDecoded
    }
}

extension PutDestinationPolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutDestinationPolicyOutput: Swift.Equatable {

    public init() { }
}

enum PutDestinationPolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension PutLogEventsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logEvents
        case logGroupName
        case logStreamName
        case sequenceToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logEvents = logEvents {
            var logEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logEvents)
            for inputlogevent0 in logEvents {
                try logEventsContainer.encode(inputlogevent0)
            }
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let sequenceToken = self.sequenceToken {
            try encodeContainer.encode(sequenceToken, forKey: .sequenceToken)
        }
    }
}

extension PutLogEventsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutLogEventsInput: Swift.Equatable {
    /// The log events.
    /// This member is required.
    public var logEvents: [CloudWatchLogsClientTypes.InputLogEvent]?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The name of the log stream.
    /// This member is required.
    public var logStreamName: Swift.String?
    /// The sequence token obtained from the response of the previous PutLogEvents call. The sequenceToken parameter is now ignored in PutLogEvents actions. PutLogEvents actions are now accepted and never return InvalidSequenceTokenException or DataAlreadyAcceptedException even if the sequence token is not valid.
    public var sequenceToken: Swift.String?

    public init(
        logEvents: [CloudWatchLogsClientTypes.InputLogEvent]? = nil,
        logGroupName: Swift.String? = nil,
        logStreamName: Swift.String? = nil,
        sequenceToken: Swift.String? = nil
    )
    {
        self.logEvents = logEvents
        self.logGroupName = logGroupName
        self.logStreamName = logStreamName
        self.sequenceToken = sequenceToken
    }
}

struct PutLogEventsInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let logStreamName: Swift.String?
    let logEvents: [CloudWatchLogsClientTypes.InputLogEvent]?
    let sequenceToken: Swift.String?
}

extension PutLogEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logEvents
        case logGroupName
        case logStreamName
        case sequenceToken
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let logEventsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.InputLogEvent?].self, forKey: .logEvents)
        var logEventsDecoded0:[CloudWatchLogsClientTypes.InputLogEvent]? = nil
        if let logEventsContainer = logEventsContainer {
            logEventsDecoded0 = [CloudWatchLogsClientTypes.InputLogEvent]()
            for structure0 in logEventsContainer {
                if let structure0 = structure0 {
                    logEventsDecoded0?.append(structure0)
                }
            }
        }
        logEvents = logEventsDecoded0
        let sequenceTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sequenceToken)
        sequenceToken = sequenceTokenDecoded
    }
}

extension PutLogEventsOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: PutLogEventsOutputBody = try responseDecoder.decode(responseBody: data)
            self.nextSequenceToken = output.nextSequenceToken
            self.rejectedLogEventsInfo = output.rejectedLogEventsInfo
        } else {
            self.nextSequenceToken = nil
            self.rejectedLogEventsInfo = nil
        }
    }
}

public struct PutLogEventsOutput: Swift.Equatable {
    /// The next sequence token. This field has been deprecated. The sequence token is now ignored in PutLogEvents actions. PutLogEvents actions are always accepted even if the sequence token is not valid. You can use parallel PutLogEvents actions on the same log stream and you do not need to wait for the response of a previous PutLogEvents action to obtain the nextSequenceToken value.
    public var nextSequenceToken: Swift.String?
    /// The rejected events.
    public var rejectedLogEventsInfo: CloudWatchLogsClientTypes.RejectedLogEventsInfo?

    public init(
        nextSequenceToken: Swift.String? = nil,
        rejectedLogEventsInfo: CloudWatchLogsClientTypes.RejectedLogEventsInfo? = nil
    )
    {
        self.nextSequenceToken = nextSequenceToken
        self.rejectedLogEventsInfo = rejectedLogEventsInfo
    }
}

struct PutLogEventsOutputBody: Swift.Equatable {
    let nextSequenceToken: Swift.String?
    let rejectedLogEventsInfo: CloudWatchLogsClientTypes.RejectedLogEventsInfo?
}

extension PutLogEventsOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextSequenceToken
        case rejectedLogEventsInfo
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextSequenceTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextSequenceToken)
        nextSequenceToken = nextSequenceTokenDecoded
        let rejectedLogEventsInfoDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.RejectedLogEventsInfo.self, forKey: .rejectedLogEventsInfo)
        rejectedLogEventsInfo = rejectedLogEventsInfoDecoded
    }
}

enum PutLogEventsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "DataAlreadyAcceptedException": return try await DataAlreadyAcceptedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidSequenceTokenException": return try await InvalidSequenceTokenException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "UnrecognizedClientException": return try await UnrecognizedClientException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension PutMetricFilterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterName
        case filterPattern
        case logGroupName
        case metricTransformations
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterName = self.filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let filterPattern = self.filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let metricTransformations = metricTransformations {
            var metricTransformationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricTransformations)
            for metrictransformation0 in metricTransformations {
                try metricTransformationsContainer.encode(metrictransformation0)
            }
        }
    }
}

extension PutMetricFilterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutMetricFilterInput: Swift.Equatable {
    /// A name for the metric filter.
    /// This member is required.
    public var filterName: Swift.String?
    /// A filter pattern for extracting metric data out of ingested log events.
    /// This member is required.
    public var filterPattern: Swift.String?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// A collection of information that defines how metric data gets emitted.
    /// This member is required.
    public var metricTransformations: [CloudWatchLogsClientTypes.MetricTransformation]?

    public init(
        filterName: Swift.String? = nil,
        filterPattern: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        metricTransformations: [CloudWatchLogsClientTypes.MetricTransformation]? = nil
    )
    {
        self.filterName = filterName
        self.filterPattern = filterPattern
        self.logGroupName = logGroupName
        self.metricTransformations = metricTransformations
    }
}

struct PutMetricFilterInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let filterName: Swift.String?
    let filterPattern: Swift.String?
    let metricTransformations: [CloudWatchLogsClientTypes.MetricTransformation]?
}

extension PutMetricFilterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterName
        case filterPattern
        case logGroupName
        case metricTransformations
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterName)
        filterName = filterNameDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let metricTransformationsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.MetricTransformation?].self, forKey: .metricTransformations)
        var metricTransformationsDecoded0:[CloudWatchLogsClientTypes.MetricTransformation]? = nil
        if let metricTransformationsContainer = metricTransformationsContainer {
            metricTransformationsDecoded0 = [CloudWatchLogsClientTypes.MetricTransformation]()
            for structure0 in metricTransformationsContainer {
                if let structure0 = structure0 {
                    metricTransformationsDecoded0?.append(structure0)
                }
            }
        }
        metricTransformations = metricTransformationsDecoded0
    }
}

extension PutMetricFilterOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutMetricFilterOutput: Swift.Equatable {

    public init() { }
}

enum PutMetricFilterOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension PutQueryDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case logGroupNames
        case name
        case queryDefinitionId
        case queryString
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let logGroupNames = logGroupNames {
            var logGroupNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logGroupNames)
            for loggroupname0 in logGroupNames {
                try logGroupNamesContainer.encode(loggroupname0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let queryDefinitionId = self.queryDefinitionId {
            try encodeContainer.encode(queryDefinitionId, forKey: .queryDefinitionId)
        }
        if let queryString = self.queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
    }
}

extension PutQueryDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutQueryDefinitionInput: Swift.Equatable {
    /// Used as an idempotency token, to avoid returning an exception if the service receives the same request twice because of a network error.
    public var clientToken: Swift.String?
    /// Use this parameter to include specific log groups as part of your query definition. If you are updating a query definition and you omit this parameter, then the updated definition will contain no log groups.
    public var logGroupNames: [Swift.String]?
    /// A name for the query definition. If you are saving numerous query definitions, we recommend that you name them. This way, you can find the ones you want by using the first part of the name as a filter in the queryDefinitionNamePrefix parameter of [DescribeQueryDefinitions](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeQueryDefinitions.html).
    /// This member is required.
    public var name: Swift.String?
    /// If you are updating a query definition, use this parameter to specify the ID of the query definition that you want to update. You can use [DescribeQueryDefinitions](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeQueryDefinitions.html) to retrieve the IDs of your saved query definitions. If you are creating a query definition, do not specify this parameter. CloudWatch generates a unique ID for the new query definition and include it in the response to this operation.
    public var queryDefinitionId: Swift.String?
    /// The query string to use for this definition. For more information, see [CloudWatch Logs Insights Query Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html).
    /// This member is required.
    public var queryString: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        logGroupNames: [Swift.String]? = nil,
        name: Swift.String? = nil,
        queryDefinitionId: Swift.String? = nil,
        queryString: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.logGroupNames = logGroupNames
        self.name = name
        self.queryDefinitionId = queryDefinitionId
        self.queryString = queryString
    }
}

struct PutQueryDefinitionInputBody: Swift.Equatable {
    let name: Swift.String?
    let queryDefinitionId: Swift.String?
    let logGroupNames: [Swift.String]?
    let queryString: Swift.String?
    let clientToken: Swift.String?
}

extension PutQueryDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken
        case logGroupNames
        case name
        case queryDefinitionId
        case queryString
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let queryDefinitionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryDefinitionId)
        queryDefinitionId = queryDefinitionIdDecoded
        let logGroupNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logGroupNames)
        var logGroupNamesDecoded0:[Swift.String]? = nil
        if let logGroupNamesContainer = logGroupNamesContainer {
            logGroupNamesDecoded0 = [Swift.String]()
            for string0 in logGroupNamesContainer {
                if let string0 = string0 {
                    logGroupNamesDecoded0?.append(string0)
                }
            }
        }
        logGroupNames = logGroupNamesDecoded0
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

extension PutQueryDefinitionOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: PutQueryDefinitionOutputBody = try responseDecoder.decode(responseBody: data)
            self.queryDefinitionId = output.queryDefinitionId
        } else {
            self.queryDefinitionId = nil
        }
    }
}

public struct PutQueryDefinitionOutput: Swift.Equatable {
    /// The ID of the query definition.
    public var queryDefinitionId: Swift.String?

    public init(
        queryDefinitionId: Swift.String? = nil
    )
    {
        self.queryDefinitionId = queryDefinitionId
    }
}

struct PutQueryDefinitionOutputBody: Swift.Equatable {
    let queryDefinitionId: Swift.String?
}

extension PutQueryDefinitionOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryDefinitionId
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryDefinitionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryDefinitionId)
        queryDefinitionId = queryDefinitionIdDecoded
    }
}

enum PutQueryDefinitionOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension PutResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyDocument
        case policyName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyDocument = self.policyDocument {
            try encodeContainer.encode(policyDocument, forKey: .policyDocument)
        }
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }
}

extension PutResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutResourcePolicyInput: Swift.Equatable {
    /// Details of the new policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. This parameter is required. The following example creates a resource policy enabling the Route 53 service to put DNS query logs in to the specified log group. Replace "logArn" with the ARN of your CloudWatch Logs resource, such as a log group or log stream. CloudWatch Logs also supports [aws:SourceArn](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html#condition-keys-sourcearn) and [aws:SourceAccount](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html#condition-keys-sourceaccount) condition context keys. In the example resource policy, you would replace the value of SourceArn with the resource making the call from Route 53 to CloudWatch Logs. You would also replace the value of SourceAccount with the Amazon Web Services account ID making that call. { "Version": "2012-10-17", "Statement": [ { "Sid": "Route53LogsToCloudWatchLogs", "Effect": "Allow", "Principal": { "Service": [ "route53.amazonaws.com" ] }, "Action": "logs:PutLogEvents", "Resource": "logArn", "Condition": { "ArnLike": { "aws:SourceArn": "myRoute53ResourceArn" }, "StringEquals": { "aws:SourceAccount": "myAwsAccountId" } } } ] }
    public var policyDocument: Swift.String?
    /// Name of the new policy. This parameter is required.
    public var policyName: Swift.String?

    public init(
        policyDocument: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.policyDocument = policyDocument
        self.policyName = policyName
    }
}

struct PutResourcePolicyInputBody: Swift.Equatable {
    let policyName: Swift.String?
    let policyDocument: Swift.String?
}

extension PutResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyDocument
        case policyName
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
    }
}

extension PutResourcePolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: PutResourcePolicyOutputBody = try responseDecoder.decode(responseBody: data)
            self.resourcePolicy = output.resourcePolicy
        } else {
            self.resourcePolicy = nil
        }
    }
}

public struct PutResourcePolicyOutput: Swift.Equatable {
    /// The new policy.
    public var resourcePolicy: CloudWatchLogsClientTypes.ResourcePolicy?

    public init(
        resourcePolicy: CloudWatchLogsClientTypes.ResourcePolicy? = nil
    )
    {
        self.resourcePolicy = resourcePolicy
    }
}

struct PutResourcePolicyOutputBody: Swift.Equatable {
    let resourcePolicy: CloudWatchLogsClientTypes.ResourcePolicy?
}

extension PutResourcePolicyOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourcePolicy
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourcePolicyDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.ResourcePolicy.self, forKey: .resourcePolicy)
        resourcePolicy = resourcePolicyDecoded
    }
}

enum PutResourcePolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension PutRetentionPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case retentionInDays
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let retentionInDays = self.retentionInDays {
            try encodeContainer.encode(retentionInDays, forKey: .retentionInDays)
        }
    }
}

extension PutRetentionPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutRetentionPolicyInput: Swift.Equatable {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653. To set a log group so that its log events do not expire, use [DeleteRetentionPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html).
    /// This member is required.
    public var retentionInDays: Swift.Int?

    public init(
        logGroupName: Swift.String? = nil,
        retentionInDays: Swift.Int? = nil
    )
    {
        self.logGroupName = logGroupName
        self.retentionInDays = retentionInDays
    }
}

struct PutRetentionPolicyInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let retentionInDays: Swift.Int?
}

extension PutRetentionPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case retentionInDays
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let retentionInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retentionInDays)
        retentionInDays = retentionInDaysDecoded
    }
}

extension PutRetentionPolicyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutRetentionPolicyOutput: Swift.Equatable {

    public init() { }
}

enum PutRetentionPolicyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension PutSubscriptionFilterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationArn
        case distribution
        case filterName
        case filterPattern
        case logGroupName
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationArn = self.destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
        if let distribution = self.distribution {
            try encodeContainer.encode(distribution.rawValue, forKey: .distribution)
        }
        if let filterName = self.filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let filterPattern = self.filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

extension PutSubscriptionFilterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutSubscriptionFilterInput: Swift.Equatable {
    /// The ARN of the destination to deliver matching log events to. Currently, the supported destinations are:
    ///
    /// * An Amazon Kinesis stream belonging to the same account as the subscription filter, for same-account delivery.
    ///
    /// * A logical destination (specified using an ARN) belonging to a different account, for cross-account delivery. If you're setting up a cross-account subscription, the destination must have an IAM policy associated with it. The IAM policy must allow the sender to send logs to the destination. For more information, see [PutDestinationPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDestinationPolicy.html).
    ///
    /// * A Kinesis Data Firehose delivery stream belonging to the same account as the subscription filter, for same-account delivery.
    ///
    /// * A Lambda function belonging to the same account as the subscription filter, for same-account delivery.
    /// This member is required.
    public var destinationArn: Swift.String?
    /// The method used to distribute log data to the destination. By default, log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis data stream.
    public var distribution: CloudWatchLogsClientTypes.Distribution?
    /// A name for the subscription filter. If you are updating an existing filter, you must specify the correct name in filterName. To find the name of the filter currently associated with a log group, use [DescribeSubscriptionFilters](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeSubscriptionFilters.html).
    /// This member is required.
    public var filterName: Swift.String?
    /// A filter pattern for subscribing to a filtered stream of log events.
    /// This member is required.
    public var filterPattern: Swift.String?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
    public var roleArn: Swift.String?

    public init(
        destinationArn: Swift.String? = nil,
        distribution: CloudWatchLogsClientTypes.Distribution? = nil,
        filterName: Swift.String? = nil,
        filterPattern: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.destinationArn = destinationArn
        self.distribution = distribution
        self.filterName = filterName
        self.filterPattern = filterPattern
        self.logGroupName = logGroupName
        self.roleArn = roleArn
    }
}

struct PutSubscriptionFilterInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let filterName: Swift.String?
    let filterPattern: Swift.String?
    let destinationArn: Swift.String?
    let roleArn: Swift.String?
    let distribution: CloudWatchLogsClientTypes.Distribution?
}

extension PutSubscriptionFilterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationArn
        case distribution
        case filterName
        case filterPattern
        case logGroupName
        case roleArn
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterName)
        filterName = filterNameDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let distributionDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.Distribution.self, forKey: .distribution)
        distribution = distributionDecoded
    }
}

extension PutSubscriptionFilterOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct PutSubscriptionFilterOutput: Swift.Equatable {

    public init() { }
}

enum PutSubscriptionFilterOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CloudWatchLogsClientTypes.QueryCompileError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case location
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.QueryCompileErrorLocation.self, forKey: .location)
        location = locationDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Reserved.
    public struct QueryCompileError: Swift.Equatable {
        /// Reserved.
        public var location: CloudWatchLogsClientTypes.QueryCompileErrorLocation?
        /// Reserved.
        public var message: Swift.String?

        public init(
            location: CloudWatchLogsClientTypes.QueryCompileErrorLocation? = nil,
            message: Swift.String? = nil
        )
        {
            self.location = location
            self.message = message
        }
    }

}

extension CloudWatchLogsClientTypes.QueryCompileErrorLocation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endCharOffset
        case startCharOffset
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endCharOffset = self.endCharOffset {
            try encodeContainer.encode(endCharOffset, forKey: .endCharOffset)
        }
        if let startCharOffset = self.startCharOffset {
            try encodeContainer.encode(startCharOffset, forKey: .startCharOffset)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startCharOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startCharOffset)
        startCharOffset = startCharOffsetDecoded
        let endCharOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endCharOffset)
        endCharOffset = endCharOffsetDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Reserved.
    public struct QueryCompileErrorLocation: Swift.Equatable {
        /// Reserved.
        public var endCharOffset: Swift.Int?
        /// Reserved.
        public var startCharOffset: Swift.Int?

        public init(
            endCharOffset: Swift.Int? = nil,
            startCharOffset: Swift.Int? = nil
        )
        {
            self.endCharOffset = endCharOffset
            self.startCharOffset = startCharOffset
        }
    }

}

extension CloudWatchLogsClientTypes.QueryDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastModified
        case logGroupNames
        case name
        case queryDefinitionId
        case queryString
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastModified = self.lastModified {
            try encodeContainer.encode(lastModified, forKey: .lastModified)
        }
        if let logGroupNames = logGroupNames {
            var logGroupNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logGroupNames)
            for loggroupname0 in logGroupNames {
                try logGroupNamesContainer.encode(loggroupname0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let queryDefinitionId = self.queryDefinitionId {
            try encodeContainer.encode(queryDefinitionId, forKey: .queryDefinitionId)
        }
        if let queryString = self.queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryDefinitionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryDefinitionId)
        queryDefinitionId = queryDefinitionIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let logGroupNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logGroupNames)
        var logGroupNamesDecoded0:[Swift.String]? = nil
        if let logGroupNamesContainer = logGroupNamesContainer {
            logGroupNamesDecoded0 = [Swift.String]()
            for string0 in logGroupNamesContainer {
                if let string0 = string0 {
                    logGroupNamesDecoded0?.append(string0)
                }
            }
        }
        logGroupNames = logGroupNamesDecoded0
    }
}

extension CloudWatchLogsClientTypes {
    /// This structure contains details about a saved CloudWatch Logs Insights query definition.
    public struct QueryDefinition: Swift.Equatable {
        /// The date that the query definition was most recently modified.
        public var lastModified: Swift.Int?
        /// If this query definition contains a list of log groups that it is limited to, that list appears here.
        public var logGroupNames: [Swift.String]?
        /// The name of the query definition.
        public var name: Swift.String?
        /// The unique ID of the query definition.
        public var queryDefinitionId: Swift.String?
        /// The query string to use for this definition. For more information, see [CloudWatch Logs Insights Query Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html).
        public var queryString: Swift.String?

        public init(
            lastModified: Swift.Int? = nil,
            logGroupNames: [Swift.String]? = nil,
            name: Swift.String? = nil,
            queryDefinitionId: Swift.String? = nil,
            queryString: Swift.String? = nil
        )
        {
            self.lastModified = lastModified
            self.logGroupNames = logGroupNames
            self.name = name
            self.queryDefinitionId = queryDefinitionId
            self.queryString = queryString
        }
    }

}

extension CloudWatchLogsClientTypes.QueryInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTime
        case logGroupName
        case queryId
        case queryString
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createTime = self.createTime {
            try encodeContainer.encode(createTime, forKey: .createTime)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let queryId = self.queryId {
            try encodeContainer.encode(queryId, forKey: .queryId)
        }
        if let queryString = self.queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryId)
        queryId = queryIdDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.QueryStatus.self, forKey: .status)
        status = statusDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .createTime)
        createTime = createTimeDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Information about one CloudWatch Logs Insights query that matches the request in a DescribeQueries operation.
    public struct QueryInfo: Swift.Equatable {
        /// The date and time that this query was created.
        public var createTime: Swift.Int?
        /// The name of the log group scanned by this query.
        public var logGroupName: Swift.String?
        /// The unique ID number of this query.
        public var queryId: Swift.String?
        /// The query string used in this query.
        public var queryString: Swift.String?
        /// The status of this query. Possible values are Cancelled, Complete, Failed, Running, Scheduled, and Unknown.
        public var status: CloudWatchLogsClientTypes.QueryStatus?

        public init(
            createTime: Swift.Int? = nil,
            logGroupName: Swift.String? = nil,
            queryId: Swift.String? = nil,
            queryString: Swift.String? = nil,
            status: CloudWatchLogsClientTypes.QueryStatus? = nil
        )
        {
            self.createTime = createTime
            self.logGroupName = logGroupName
            self.queryId = queryId
            self.queryString = queryString
            self.status = status
        }
    }

}

extension CloudWatchLogsClientTypes.QueryStatistics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bytesScanned
        case recordsMatched
        case recordsScanned
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bytesScanned != 0.0 {
            try encodeContainer.encode(bytesScanned, forKey: .bytesScanned)
        }
        if recordsMatched != 0.0 {
            try encodeContainer.encode(recordsMatched, forKey: .recordsMatched)
        }
        if recordsScanned != 0.0 {
            try encodeContainer.encode(recordsScanned, forKey: .recordsScanned)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordsMatchedDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .recordsMatched) ?? 0.0
        recordsMatched = recordsMatchedDecoded
        let recordsScannedDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .recordsScanned) ?? 0.0
        recordsScanned = recordsScannedDecoded
        let bytesScannedDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .bytesScanned) ?? 0.0
        bytesScanned = bytesScannedDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Contains the number of log events scanned by the query, the number of log events that matched the query criteria, and the total number of bytes in the log events that were scanned.
    public struct QueryStatistics: Swift.Equatable {
        /// The total number of bytes in the log events scanned during the query.
        public var bytesScanned: Swift.Double
        /// The number of log events that matched the query string.
        public var recordsMatched: Swift.Double
        /// The total number of log events scanned during the query.
        public var recordsScanned: Swift.Double

        public init(
            bytesScanned: Swift.Double = 0.0,
            recordsMatched: Swift.Double = 0.0,
            recordsScanned: Swift.Double = 0.0
        )
        {
            self.bytesScanned = bytesScanned
            self.recordsMatched = recordsMatched
            self.recordsScanned = recordsScanned
        }
    }

}

extension CloudWatchLogsClientTypes {
    public enum QueryStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case complete
        case failed
        case running
        case scheduled
        case timeout
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [QueryStatus] {
            return [
                .cancelled,
                .complete,
                .failed,
                .running,
                .scheduled,
                .timeout,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .complete: return "Complete"
            case .failed: return "Failed"
            case .running: return "Running"
            case .scheduled: return "Scheduled"
            case .timeout: return "Timeout"
            case .unknown: return "Unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = QueryStatus(rawValue: rawValue) ?? QueryStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchLogsClientTypes.RejectedLogEventsInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expiredLogEventEndIndex
        case tooNewLogEventStartIndex
        case tooOldLogEventEndIndex
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expiredLogEventEndIndex = self.expiredLogEventEndIndex {
            try encodeContainer.encode(expiredLogEventEndIndex, forKey: .expiredLogEventEndIndex)
        }
        if let tooNewLogEventStartIndex = self.tooNewLogEventStartIndex {
            try encodeContainer.encode(tooNewLogEventStartIndex, forKey: .tooNewLogEventStartIndex)
        }
        if let tooOldLogEventEndIndex = self.tooOldLogEventEndIndex {
            try encodeContainer.encode(tooOldLogEventEndIndex, forKey: .tooOldLogEventEndIndex)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tooNewLogEventStartIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .tooNewLogEventStartIndex)
        tooNewLogEventStartIndex = tooNewLogEventStartIndexDecoded
        let tooOldLogEventEndIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .tooOldLogEventEndIndex)
        tooOldLogEventEndIndex = tooOldLogEventEndIndexDecoded
        let expiredLogEventEndIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expiredLogEventEndIndex)
        expiredLogEventEndIndex = expiredLogEventEndIndexDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents the rejected events.
    public struct RejectedLogEventsInfo: Swift.Equatable {
        /// The expired log events.
        public var expiredLogEventEndIndex: Swift.Int?
        /// The log events that are too new.
        public var tooNewLogEventStartIndex: Swift.Int?
        /// The log events that are dated too far in the past.
        public var tooOldLogEventEndIndex: Swift.Int?

        public init(
            expiredLogEventEndIndex: Swift.Int? = nil,
            tooNewLogEventStartIndex: Swift.Int? = nil,
            tooOldLogEventEndIndex: Swift.Int? = nil
        )
        {
            self.expiredLogEventEndIndex = expiredLogEventEndIndex
            self.tooNewLogEventStartIndex = tooNewLogEventStartIndex
            self.tooOldLogEventEndIndex = tooOldLogEventEndIndex
        }
    }

}

extension ResourceAlreadyExistsException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ResourceAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified resource already exists.
public struct ResourceAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceAlreadyExistsException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ResourceAlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The specified resource does not exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchLogsClientTypes.ResourcePolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastUpdatedTime
        case policyDocument
        case policyName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastUpdatedTime = self.lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime, forKey: .lastUpdatedTime)
        }
        if let policyDocument = self.policyDocument {
            try encodeContainer.encode(policyDocument, forKey: .policyDocument)
        }
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// A policy enabling one or more entities to put logs to a log group in this account.
    public struct ResourcePolicy: Swift.Equatable {
        /// Timestamp showing when this policy was last updated, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var lastUpdatedTime: Swift.Int?
        /// The details of the policy.
        public var policyDocument: Swift.String?
        /// The name of the resource policy.
        public var policyName: Swift.String?

        public init(
            lastUpdatedTime: Swift.Int? = nil,
            policyDocument: Swift.String? = nil,
            policyName: Swift.String? = nil
        )
        {
            self.lastUpdatedTime = lastUpdatedTime
            self.policyDocument = policyDocument
            self.policyName = policyName
        }
    }

}

extension CloudWatchLogsClientTypes.ResultField: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case field
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let field = self.field {
            try encodeContainer.encode(field, forKey: .field)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .field)
        field = fieldDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Contains one field from one log event returned by a CloudWatch Logs Insights query, along with the value of that field. For more information about the fields that are generated by CloudWatch logs, see [Supported Logs and Discovered Fields](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html).
    public struct ResultField: Swift.Equatable {
        /// The log event field.
        public var field: Swift.String?
        /// The value of this field.
        public var value: Swift.String?

        public init(
            field: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.field = field
            self.value = value
        }
    }

}

extension CloudWatchLogsClientTypes {
    public enum Scope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case sdkUnknown(Swift.String)

        public static var allCases: [Scope] {
            return [
                .all,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Scope(rawValue: rawValue) ?? Scope.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchLogsClientTypes.SearchedLogStream: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logStreamName
        case searchedCompletely
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let searchedCompletely = self.searchedCompletely {
            try encodeContainer.encode(searchedCompletely, forKey: .searchedCompletely)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let searchedCompletelyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .searchedCompletely)
        searchedCompletely = searchedCompletelyDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents the search status of a log stream.
    public struct SearchedLogStream: Swift.Equatable {
        /// The name of the log stream.
        public var logStreamName: Swift.String?
        /// Indicates whether all the events in this log stream were searched.
        public var searchedCompletely: Swift.Bool?

        public init(
            logStreamName: Swift.String? = nil,
            searchedCompletely: Swift.Bool? = nil
        )
        {
            self.logStreamName = logStreamName
            self.searchedCompletely = searchedCompletely
        }
    }

}

extension ServiceQuotaExceededException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ServiceQuotaExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// This request exceeds a service quota.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ServiceQuotaExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceQuotaExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ServiceUnavailableException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ServiceUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The service cannot complete the request.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ServiceUnavailableExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SessionStreamingException: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.properties.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        properties.message = messageDecoded
    }
}

/// his exception is returned if an unknown error occurs during a Live Tail session.
public struct SessionStreamingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SessionStreamingException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SessionTimeoutException: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.properties.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        properties.message = messageDecoded
    }
}

/// This exception is returned in a Live Tail stream when the Live Tail session times out. Live Tail sessions time out after three hours.
public struct SessionTimeoutException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SessionTimeoutException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudWatchLogsClientTypes {
    public enum StandardUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bits
        case bitssecond
        case bytes
        case bytessecond
        case count
        case countsecond
        case gigabits
        case gigabitssecond
        case gigabytes
        case gigabytessecond
        case kilobits
        case kilobitssecond
        case kilobytes
        case kilobytessecond
        case megabits
        case megabitssecond
        case megabytes
        case megabytessecond
        case microseconds
        case milliseconds
        case `none`
        case percent
        case seconds
        case terabits
        case terabitssecond
        case terabytes
        case terabytessecond
        case sdkUnknown(Swift.String)

        public static var allCases: [StandardUnit] {
            return [
                .bits,
                .bitssecond,
                .bytes,
                .bytessecond,
                .count,
                .countsecond,
                .gigabits,
                .gigabitssecond,
                .gigabytes,
                .gigabytessecond,
                .kilobits,
                .kilobitssecond,
                .kilobytes,
                .kilobytessecond,
                .megabits,
                .megabitssecond,
                .megabytes,
                .megabytessecond,
                .microseconds,
                .milliseconds,
                .none,
                .percent,
                .seconds,
                .terabits,
                .terabitssecond,
                .terabytes,
                .terabytessecond,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bits: return "Bits"
            case .bitssecond: return "Bits/Second"
            case .bytes: return "Bytes"
            case .bytessecond: return "Bytes/Second"
            case .count: return "Count"
            case .countsecond: return "Count/Second"
            case .gigabits: return "Gigabits"
            case .gigabitssecond: return "Gigabits/Second"
            case .gigabytes: return "Gigabytes"
            case .gigabytessecond: return "Gigabytes/Second"
            case .kilobits: return "Kilobits"
            case .kilobitssecond: return "Kilobits/Second"
            case .kilobytes: return "Kilobytes"
            case .kilobytessecond: return "Kilobytes/Second"
            case .megabits: return "Megabits"
            case .megabitssecond: return "Megabits/Second"
            case .megabytes: return "Megabytes"
            case .megabytessecond: return "Megabytes/Second"
            case .microseconds: return "Microseconds"
            case .milliseconds: return "Milliseconds"
            case .none: return "None"
            case .percent: return "Percent"
            case .seconds: return "Seconds"
            case .terabits: return "Terabits"
            case .terabitssecond: return "Terabits/Second"
            case .terabytes: return "Terabytes"
            case .terabytessecond: return "Terabytes/Second"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StandardUnit(rawValue: rawValue) ?? StandardUnit.sdkUnknown(rawValue)
        }
    }
}

extension StartLiveTailInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logEventFilterPattern
        case logGroupIdentifiers
        case logStreamNamePrefixes
        case logStreamNames
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logEventFilterPattern = self.logEventFilterPattern {
            try encodeContainer.encode(logEventFilterPattern, forKey: .logEventFilterPattern)
        }
        if let logGroupIdentifiers = logGroupIdentifiers {
            var logGroupIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logGroupIdentifiers)
            for loggroupidentifier0 in logGroupIdentifiers {
                try logGroupIdentifiersContainer.encode(loggroupidentifier0)
            }
        }
        if let logStreamNamePrefixes = logStreamNamePrefixes {
            var logStreamNamePrefixesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logStreamNamePrefixes)
            for logstreamname0 in logStreamNamePrefixes {
                try logStreamNamePrefixesContainer.encode(logstreamname0)
            }
        }
        if let logStreamNames = logStreamNames {
            var logStreamNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logStreamNames)
            for logstreamname0 in logStreamNames {
                try logStreamNamesContainer.encode(logstreamname0)
            }
        }
    }
}

extension StartLiveTailInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartLiveTailInput: Swift.Equatable {
    /// An optional pattern to use to filter the results to include only log events that match the pattern. For example, a filter pattern of error 404 causes only log events that include both error and 404 to be included in the Live Tail stream. Regular expression filter patterns are supported. For more information about filter pattern syntax, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
    public var logEventFilterPattern: Swift.String?
    /// An array where each item in the array is a log group to include in the Live Tail session. Specify each log group by its ARN. If you specify an ARN, the ARN can't end with an asterisk (*). You can include up to 10 log groups.
    /// This member is required.
    public var logGroupIdentifiers: [Swift.String]?
    /// If you specify this parameter, then only log events in the log streams that have names that start with the prefixes that you specify here are included in the Live Tail session. You can specify this parameter only if you specify only one log group in logGroupIdentifiers.
    public var logStreamNamePrefixes: [Swift.String]?
    /// If you specify this parameter, then only log events in the log streams that you specify here are included in the Live Tail session. You can specify this parameter only if you specify only one log group in logGroupIdentifiers.
    public var logStreamNames: [Swift.String]?

    public init(
        logEventFilterPattern: Swift.String? = nil,
        logGroupIdentifiers: [Swift.String]? = nil,
        logStreamNamePrefixes: [Swift.String]? = nil,
        logStreamNames: [Swift.String]? = nil
    )
    {
        self.logEventFilterPattern = logEventFilterPattern
        self.logGroupIdentifiers = logGroupIdentifiers
        self.logStreamNamePrefixes = logStreamNamePrefixes
        self.logStreamNames = logStreamNames
    }
}

struct StartLiveTailInputBody: Swift.Equatable {
    let logGroupIdentifiers: [Swift.String]?
    let logStreamNames: [Swift.String]?
    let logStreamNamePrefixes: [Swift.String]?
    let logEventFilterPattern: Swift.String?
}

extension StartLiveTailInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logEventFilterPattern
        case logGroupIdentifiers
        case logStreamNamePrefixes
        case logStreamNames
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupIdentifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logGroupIdentifiers)
        var logGroupIdentifiersDecoded0:[Swift.String]? = nil
        if let logGroupIdentifiersContainer = logGroupIdentifiersContainer {
            logGroupIdentifiersDecoded0 = [Swift.String]()
            for string0 in logGroupIdentifiersContainer {
                if let string0 = string0 {
                    logGroupIdentifiersDecoded0?.append(string0)
                }
            }
        }
        logGroupIdentifiers = logGroupIdentifiersDecoded0
        let logStreamNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logStreamNames)
        var logStreamNamesDecoded0:[Swift.String]? = nil
        if let logStreamNamesContainer = logStreamNamesContainer {
            logStreamNamesDecoded0 = [Swift.String]()
            for string0 in logStreamNamesContainer {
                if let string0 = string0 {
                    logStreamNamesDecoded0?.append(string0)
                }
            }
        }
        logStreamNames = logStreamNamesDecoded0
        let logStreamNamePrefixesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logStreamNamePrefixes)
        var logStreamNamePrefixesDecoded0:[Swift.String]? = nil
        if let logStreamNamePrefixesContainer = logStreamNamePrefixesContainer {
            logStreamNamePrefixesDecoded0 = [Swift.String]()
            for string0 in logStreamNamePrefixesContainer {
                if let string0 = string0 {
                    logStreamNamePrefixesDecoded0?.append(string0)
                }
            }
        }
        logStreamNamePrefixes = logStreamNamePrefixesDecoded0
        let logEventFilterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logEventFilterPattern)
        logEventFilterPattern = logEventFilterPatternDecoded
    }
}

extension StartLiveTailOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if case let .stream(stream) = httpResponse.body, let responseDecoder = decoder {
            let messageDecoder = AWSClientRuntime.AWSEventStream.AWSMessageDecoder()
            let decoderStream = ClientRuntime.EventStream.DefaultMessageDecoderStream<CloudWatchLogsClientTypes.StartLiveTailResponseStream>(stream: stream, messageDecoder: messageDecoder, responseDecoder: responseDecoder)
            self.responseStream = decoderStream.toAsyncStream()
        } else {
            self.responseStream = nil
        }
    }
}

public struct StartLiveTailOutput: Swift.Equatable {
    /// An object that includes the stream returned by your request. It can include both log events and exceptions.
    public var responseStream: AsyncThrowingStream<CloudWatchLogsClientTypes.StartLiveTailResponseStream, Swift.Error>?

    public init(
        responseStream: AsyncThrowingStream<CloudWatchLogsClientTypes.StartLiveTailResponseStream, Swift.Error>? = nil
    )
    {
        self.responseStream = responseStream
    }
}

enum StartLiveTailOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidOperationException": return try await InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CloudWatchLogsClientTypes.StartLiveTailResponseStream: ClientRuntime.MessageUnmarshallable {
    public init(message: ClientRuntime.EventStream.Message, decoder: ClientRuntime.ResponseDecoder) throws {
        switch try message.type() {
        case .event(let params):
            switch params.eventType {
            case "sessionStart":
                self = .sessionstart(try decoder.decode(responseBody: message.payload))
            case "sessionUpdate":
                self = .sessionupdate(try decoder.decode(responseBody: message.payload))
            default:
                self = .sdkUnknown("error processing event stream, unrecognized event: \(params.eventType)")
            }
        case .exception(let params):
            let makeError: (ClientRuntime.EventStream.Message, ClientRuntime.EventStream.MessageType.ExceptionParams) throws -> Swift.Error = { message, params in
                switch params.exceptionType {
                case "SessionTimeoutException":
                    return try decoder.decode(responseBody: message.payload) as SessionTimeoutException
                case "SessionStreamingException":
                    return try decoder.decode(responseBody: message.payload) as SessionStreamingException
                default:
                    let httpResponse = HttpResponse(body: .data(message.payload), statusCode: .ok)
                    return AWSClientRuntime.UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "error processing event stream, unrecognized ':exceptionType': \(params.exceptionType); contentType: \(params.contentType ?? "nil")", requestID: nil, typeName: nil)
                }
            }
            let error = try makeError(message, params)
            throw error
        case .error(let params):
            let httpResponse = HttpResponse(body: .data(message.payload), statusCode: .ok)
            throw AWSClientRuntime.UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "error processing event stream, unrecognized ':errorType': \(params.errorCode); message: \(params.message ?? "nil")", requestID: nil, typeName: nil)
        case .unknown(messageType: let messageType):
            throw ClientRuntime.ClientError.unknownError("unrecognized event stream message ':message-type': \(messageType)")
        }
    }
}

extension CloudWatchLogsClientTypes {
    /// This object includes the stream returned by your [StartLiveTail](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_StartLiveTail.html) request.
    public enum StartLiveTailResponseStream: Swift.Equatable {
        /// This object contains information about this Live Tail session, including the log groups included and the log stream filters, if any.
        case sessionstart(CloudWatchLogsClientTypes.LiveTailSessionStart)
        /// This object contains the log events and session metadata.
        case sessionupdate(CloudWatchLogsClientTypes.LiveTailSessionUpdate)
        case sdkUnknown(Swift.String)
    }

}

extension StartQueryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case limit
        case logGroupIdentifiers
        case logGroupName
        case logGroupNames
        case queryString
        case startTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupIdentifiers = logGroupIdentifiers {
            var logGroupIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logGroupIdentifiers)
            for loggroupidentifier0 in logGroupIdentifiers {
                try logGroupIdentifiersContainer.encode(loggroupidentifier0)
            }
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logGroupNames = logGroupNames {
            var logGroupNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logGroupNames)
            for loggroupname0 in logGroupNames {
                try logGroupNamesContainer.encode(loggroupname0)
            }
        }
        if let queryString = self.queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
    }
}

extension StartQueryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartQueryInput: Swift.Equatable {
    /// The end of the time range to query. The range is inclusive, so the specified end time is included in the query. Specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.
    /// This member is required.
    public var endTime: Swift.Int?
    /// The maximum number of log events to return in the query. If the query string uses the fields command, only the specified fields and their values are returned. The default is 1000.
    public var limit: Swift.Int?
    /// The list of log groups to query. You can include up to 50 log groups. You can specify them by the log group name or ARN. If a log group that you're querying is in a source account and you're using a monitoring account, you must specify the ARN of the log group here. The query definition must also be defined in the monitoring account. If you specify an ARN, the ARN can't end with an asterisk (*). A StartQuery operation must include exactly one of the following parameters: logGroupName, logGroupNames, or logGroupIdentifiers.
    public var logGroupIdentifiers: [Swift.String]?
    /// The log group on which to perform the query. A StartQuery operation must include exactly one of the following parameters: logGroupName, logGroupNames, or logGroupIdentifiers.
    public var logGroupName: Swift.String?
    /// The list of log groups to be queried. You can include up to 50 log groups. A StartQuery operation must include exactly one of the following parameters: logGroupName, logGroupNames, or logGroupIdentifiers.
    public var logGroupNames: [Swift.String]?
    /// The query string to use. For more information, see [CloudWatch Logs Insights Query Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html).
    /// This member is required.
    public var queryString: Swift.String?
    /// The beginning of the time range to query. The range is inclusive, so the specified start time is included in the query. Specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.
    /// This member is required.
    public var startTime: Swift.Int?

    public init(
        endTime: Swift.Int? = nil,
        limit: Swift.Int? = nil,
        logGroupIdentifiers: [Swift.String]? = nil,
        logGroupName: Swift.String? = nil,
        logGroupNames: [Swift.String]? = nil,
        queryString: Swift.String? = nil,
        startTime: Swift.Int? = nil
    )
    {
        self.endTime = endTime
        self.limit = limit
        self.logGroupIdentifiers = logGroupIdentifiers
        self.logGroupName = logGroupName
        self.logGroupNames = logGroupNames
        self.queryString = queryString
        self.startTime = startTime
    }
}

struct StartQueryInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let logGroupNames: [Swift.String]?
    let logGroupIdentifiers: [Swift.String]?
    let startTime: Swift.Int?
    let endTime: Swift.Int?
    let queryString: Swift.String?
    let limit: Swift.Int?
}

extension StartQueryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case limit
        case logGroupIdentifiers
        case logGroupName
        case logGroupNames
        case queryString
        case startTime
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logGroupNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logGroupNames)
        var logGroupNamesDecoded0:[Swift.String]? = nil
        if let logGroupNamesContainer = logGroupNamesContainer {
            logGroupNamesDecoded0 = [Swift.String]()
            for string0 in logGroupNamesContainer {
                if let string0 = string0 {
                    logGroupNamesDecoded0?.append(string0)
                }
            }
        }
        logGroupNames = logGroupNamesDecoded0
        let logGroupIdentifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logGroupIdentifiers)
        var logGroupIdentifiersDecoded0:[Swift.String]? = nil
        if let logGroupIdentifiersContainer = logGroupIdentifiersContainer {
            logGroupIdentifiersDecoded0 = [Swift.String]()
            for string0 in logGroupIdentifiersContainer {
                if let string0 = string0 {
                    logGroupIdentifiersDecoded0?.append(string0)
                }
            }
        }
        logGroupIdentifiers = logGroupIdentifiersDecoded0
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endTime)
        endTime = endTimeDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension StartQueryOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: StartQueryOutputBody = try responseDecoder.decode(responseBody: data)
            self.queryId = output.queryId
        } else {
            self.queryId = nil
        }
    }
}

public struct StartQueryOutput: Swift.Equatable {
    /// The unique ID of the query.
    public var queryId: Swift.String?

    public init(
        queryId: Swift.String? = nil
    )
    {
        self.queryId = queryId
    }
}

struct StartQueryOutputBody: Swift.Equatable {
    let queryId: Swift.String?
}

extension StartQueryOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryId
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryId)
        queryId = queryIdDecoded
    }
}

enum StartQueryOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "LimitExceededException": return try await LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "MalformedQueryException": return try await MalformedQueryException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CloudWatchLogsClientTypes {
    public enum State: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case baseline
        case suppressed
        case sdkUnknown(Swift.String)

        public static var allCases: [State] {
            return [
                .active,
                .baseline,
                .suppressed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .baseline: return "Baseline"
            case .suppressed: return "Suppressed"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = State(rawValue: rawValue) ?? State.sdkUnknown(rawValue)
        }
    }
}

extension StopQueryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queryId = self.queryId {
            try encodeContainer.encode(queryId, forKey: .queryId)
        }
    }
}

extension StopQueryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopQueryInput: Swift.Equatable {
    /// The ID number of the query to stop. To find this ID number, use DescribeQueries.
    /// This member is required.
    public var queryId: Swift.String?

    public init(
        queryId: Swift.String? = nil
    )
    {
        self.queryId = queryId
    }
}

struct StopQueryInputBody: Swift.Equatable {
    let queryId: Swift.String?
}

extension StopQueryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryId
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryId)
        queryId = queryIdDecoded
    }
}

extension StopQueryOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: StopQueryOutputBody = try responseDecoder.decode(responseBody: data)
            self.success = output.success
        } else {
            self.success = false
        }
    }
}

public struct StopQueryOutput: Swift.Equatable {
    /// This is true if the query was stopped by the StopQuery operation.
    public var success: Swift.Bool

    public init(
        success: Swift.Bool = false
    )
    {
        self.success = success
    }
}

struct StopQueryOutputBody: Swift.Equatable {
    let success: Swift.Bool
}

extension StopQueryOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case success
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let successDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .success) ?? false
        success = successDecoded
    }
}

enum StopQueryOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CloudWatchLogsClientTypes.SubscriptionFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime
        case destinationArn
        case distribution
        case filterName
        case filterPattern
        case logGroupName
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let destinationArn = self.destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
        if let distribution = self.distribution {
            try encodeContainer.encode(distribution.rawValue, forKey: .distribution)
        }
        if let filterName = self.filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let filterPattern = self.filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterName)
        filterName = filterNameDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let distributionDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.Distribution.self, forKey: .distribution)
        distribution = distributionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a subscription filter.
    public struct SubscriptionFilter: Swift.Equatable {
        /// The creation time of the subscription filter, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var creationTime: Swift.Int?
        /// The Amazon Resource Name (ARN) of the destination.
        public var destinationArn: Swift.String?
        /// The method used to distribute log data to the destination, which can be either random or grouped by log stream.
        public var distribution: CloudWatchLogsClientTypes.Distribution?
        /// The name of the subscription filter.
        public var filterName: Swift.String?
        /// A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.
        public var filterPattern: Swift.String?
        /// The name of the log group.
        public var logGroupName: Swift.String?
        ///
        public var roleArn: Swift.String?

        public init(
            creationTime: Swift.Int? = nil,
            destinationArn: Swift.String? = nil,
            distribution: CloudWatchLogsClientTypes.Distribution? = nil,
            filterName: Swift.String? = nil,
            filterPattern: Swift.String? = nil,
            logGroupName: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.destinationArn = destinationArn
            self.distribution = distribution
            self.filterName = filterName
            self.filterPattern = filterPattern
            self.logGroupName = logGroupName
            self.roleArn = roleArn
        }
    }

}

extension CloudWatchLogsClientTypes.SuppressionPeriod: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case suppressionUnit
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let suppressionUnit = self.suppressionUnit {
            try encodeContainer.encode(suppressionUnit.rawValue, forKey: .suppressionUnit)
        }
        if value != 0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .value) ?? 0
        value = valueDecoded
        let suppressionUnitDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.SuppressionUnit.self, forKey: .suppressionUnit)
        suppressionUnit = suppressionUnitDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// If you are suppressing an anomaly temporariliy, this structure defines how long the suppression period is to be.
    public struct SuppressionPeriod: Swift.Equatable {
        /// Specifies whether the value of value is in seconds, minutes, or hours.
        public var suppressionUnit: CloudWatchLogsClientTypes.SuppressionUnit?
        /// Specifies the number of seconds, minutes or hours to suppress this anomaly. There is no maximum.
        public var value: Swift.Int

        public init(
            suppressionUnit: CloudWatchLogsClientTypes.SuppressionUnit? = nil,
            value: Swift.Int = 0
        )
        {
            self.suppressionUnit = suppressionUnit
            self.value = value
        }
    }

}

extension CloudWatchLogsClientTypes {
    public enum SuppressionState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case suppressed
        case unsuppressed
        case sdkUnknown(Swift.String)

        public static var allCases: [SuppressionState] {
            return [
                .suppressed,
                .unsuppressed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .suppressed: return "SUPPRESSED"
            case .unsuppressed: return "UNSUPPRESSED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SuppressionState(rawValue: rawValue) ?? SuppressionState.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchLogsClientTypes {
    public enum SuppressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case infinite
        case limited
        case sdkUnknown(Swift.String)

        public static var allCases: [SuppressionType] {
            return [
                .infinite,
                .limited,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .infinite: return "INFINITE"
            case .limited: return "LIMITED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SuppressionType(rawValue: rawValue) ?? SuppressionType.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchLogsClientTypes {
    public enum SuppressionUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hours
        case minutes
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [SuppressionUnit] {
            return [
                .hours,
                .minutes,
                .seconds,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hours: return "HOURS"
            case .minutes: return "MINUTES"
            case .seconds: return "SECONDS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SuppressionUnit(rawValue: rawValue) ?? SuppressionUnit.sdkUnknown(rawValue)
        }
    }
}

extension TagLogGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension TagLogGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

@available(*, deprecated, message: "Please use the generic tagging API model TagResourceRequest")
public struct TagLogGroupInput: Swift.Equatable {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The key-value pairs to use for the tags.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init(
        logGroupName: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.logGroupName = logGroupName
        self.tags = tags
    }
}

struct TagLogGroupInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension TagLogGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case tags
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagLogGroupOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct TagLogGroupOutput: Swift.Equatable {

    public init() { }
}

enum TagLogGroupOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The ARN of the resource that you're adding tags to. The ARN format of a log group is arn:aws:logs:Region:account-id:log-group:log-group-name  The ARN format of a destination is arn:aws:logs:Region:account-id:destination:destination-name  For more information about ARN format, see [CloudWatch Logs resources and operations](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html).
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of key-value pairs to associate with the resource.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tags
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct TagResourceOutput: Swift.Equatable {

    public init() { }
}

enum TagResourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "TooManyTagsException": return try await TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension TestMetricFilterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterPattern
        case logEventMessages
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterPattern = self.filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let logEventMessages = logEventMessages {
            var logEventMessagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logEventMessages)
            for eventmessage0 in logEventMessages {
                try logEventMessagesContainer.encode(eventmessage0)
            }
        }
    }
}

extension TestMetricFilterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TestMetricFilterInput: Swift.Equatable {
    /// A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.
    /// This member is required.
    public var filterPattern: Swift.String?
    /// The log event messages to test.
    /// This member is required.
    public var logEventMessages: [Swift.String]?

    public init(
        filterPattern: Swift.String? = nil,
        logEventMessages: [Swift.String]? = nil
    )
    {
        self.filterPattern = filterPattern
        self.logEventMessages = logEventMessages
    }
}

struct TestMetricFilterInputBody: Swift.Equatable {
    let filterPattern: Swift.String?
    let logEventMessages: [Swift.String]?
}

extension TestMetricFilterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterPattern
        case logEventMessages
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let logEventMessagesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logEventMessages)
        var logEventMessagesDecoded0:[Swift.String]? = nil
        if let logEventMessagesContainer = logEventMessagesContainer {
            logEventMessagesDecoded0 = [Swift.String]()
            for string0 in logEventMessagesContainer {
                if let string0 = string0 {
                    logEventMessagesDecoded0?.append(string0)
                }
            }
        }
        logEventMessages = logEventMessagesDecoded0
    }
}

extension TestMetricFilterOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: TestMetricFilterOutputBody = try responseDecoder.decode(responseBody: data)
            self.matches = output.matches
        } else {
            self.matches = nil
        }
    }
}

public struct TestMetricFilterOutput: Swift.Equatable {
    /// The matched events.
    public var matches: [CloudWatchLogsClientTypes.MetricFilterMatchRecord]?

    public init(
        matches: [CloudWatchLogsClientTypes.MetricFilterMatchRecord]? = nil
    )
    {
        self.matches = matches
    }
}

struct TestMetricFilterOutputBody: Swift.Equatable {
    let matches: [CloudWatchLogsClientTypes.MetricFilterMatchRecord]?
}

extension TestMetricFilterOutputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case matches
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let matchesContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.MetricFilterMatchRecord?].self, forKey: .matches)
        var matchesDecoded0:[CloudWatchLogsClientTypes.MetricFilterMatchRecord]? = nil
        if let matchesContainer = matchesContainer {
            matchesDecoded0 = [CloudWatchLogsClientTypes.MetricFilterMatchRecord]()
            for structure0 in matchesContainer {
                if let structure0 = structure0 {
                    matchesDecoded0?.append(structure0)
                }
            }
        }
        matches = matchesDecoded0
    }
}

enum TestMetricFilterOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ThrottlingException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request was throttled because of quota limits.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TooManyTagsException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: TooManyTagsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
            self.properties.resourceName = output.resourceName
        } else {
            self.properties.message = nil
            self.properties.resourceName = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// A resource can have no more than 50 tags.
public struct TooManyTagsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The name of the resource.
        public internal(set) var resourceName: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTagsException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceName = resourceName
    }
}

struct TooManyTagsExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let resourceName: Swift.String?
}

extension TooManyTagsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case resourceName
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
    }
}

extension UnrecognizedClientException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: UnrecognizedClientExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The most likely cause is an Amazon Web Services access key ID or secret key that's not valid.
public struct UnrecognizedClientException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnrecognizedClientException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct UnrecognizedClientExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnrecognizedClientExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UntagLogGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tagkey0 in tags {
                try tagsContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagLogGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

@available(*, deprecated, message: "Please use the generic tagging API model UntagResourceRequest")
public struct UntagLogGroupInput: Swift.Equatable {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The tag keys. The corresponding tags are removed from the log group.
    /// This member is required.
    public var tags: [Swift.String]?

    public init(
        logGroupName: Swift.String? = nil,
        tags: [Swift.String]? = nil
    )
    {
        self.logGroupName = logGroupName
        self.tags = tags
    }
}

struct UntagLogGroupInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let tags: [Swift.String]?
}

extension UntagLogGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case tags
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tags)
        var tagsDecoded0:[Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String]()
            for string0 in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?.append(string0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension UntagLogGroupOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UntagLogGroupOutput: Swift.Equatable {

    public init() { }
}

enum UntagLogGroupOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tagKeys
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The ARN of the CloudWatch Logs resource that you're removing tags from. The ARN format of a log group is arn:aws:logs:Region:account-id:log-group:log-group-name  The ARN format of a destination is arn:aws:logs:Region:account-id:destination:destination-name  For more information about ARN format, see [CloudWatch Logs resources and operations](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html).
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of tag keys to remove from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tagKeys
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UntagResourceOutput: Swift.Equatable {

    public init() { }
}

enum UntagResourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateAnomalyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectorArn
        case anomalyId
        case patternId
        case suppressionPeriod
        case suppressionType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anomalyDetectorArn = self.anomalyDetectorArn {
            try encodeContainer.encode(anomalyDetectorArn, forKey: .anomalyDetectorArn)
        }
        if let anomalyId = self.anomalyId {
            try encodeContainer.encode(anomalyId, forKey: .anomalyId)
        }
        if let patternId = self.patternId {
            try encodeContainer.encode(patternId, forKey: .patternId)
        }
        if let suppressionPeriod = self.suppressionPeriod {
            try encodeContainer.encode(suppressionPeriod, forKey: .suppressionPeriod)
        }
        if let suppressionType = self.suppressionType {
            try encodeContainer.encode(suppressionType.rawValue, forKey: .suppressionType)
        }
    }
}

extension UpdateAnomalyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateAnomalyInput: Swift.Equatable {
    /// The ARN of the anomaly detector that this operation is to act on.
    /// This member is required.
    public var anomalyDetectorArn: Swift.String?
    /// If you are suppressing or unsuppressing an anomaly, specify its unique ID here. You can find anomaly IDs by using the [ListAnomalies](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListAnomalies.html) operation.
    public var anomalyId: Swift.String?
    /// If you are suppressing or unsuppressing an pattern, specify its unique ID here. You can find pattern IDs by using the [ListAnomalies](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListAnomalies.html) operation.
    public var patternId: Swift.String?
    /// If you are temporarily suppressing an anomaly or pattern, use this structure to specify how long the suppression is to last.
    public var suppressionPeriod: CloudWatchLogsClientTypes.SuppressionPeriod?
    /// Use this to specify whether the suppression to be temporary or infinite. If you specify LIMITED, you must also specify a suppressionPeriod. If you specify INFINITE, any value for suppressionPeriod is ignored.
    public var suppressionType: CloudWatchLogsClientTypes.SuppressionType?

    public init(
        anomalyDetectorArn: Swift.String? = nil,
        anomalyId: Swift.String? = nil,
        patternId: Swift.String? = nil,
        suppressionPeriod: CloudWatchLogsClientTypes.SuppressionPeriod? = nil,
        suppressionType: CloudWatchLogsClientTypes.SuppressionType? = nil
    )
    {
        self.anomalyDetectorArn = anomalyDetectorArn
        self.anomalyId = anomalyId
        self.patternId = patternId
        self.suppressionPeriod = suppressionPeriod
        self.suppressionType = suppressionType
    }
}

struct UpdateAnomalyInputBody: Swift.Equatable {
    let anomalyId: Swift.String?
    let patternId: Swift.String?
    let anomalyDetectorArn: Swift.String?
    let suppressionType: CloudWatchLogsClientTypes.SuppressionType?
    let suppressionPeriod: CloudWatchLogsClientTypes.SuppressionPeriod?
}

extension UpdateAnomalyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectorArn
        case anomalyId
        case patternId
        case suppressionPeriod
        case suppressionType
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let anomalyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .anomalyId)
        anomalyId = anomalyIdDecoded
        let patternIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .patternId)
        patternId = patternIdDecoded
        let anomalyDetectorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .anomalyDetectorArn)
        anomalyDetectorArn = anomalyDetectorArnDecoded
        let suppressionTypeDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.SuppressionType.self, forKey: .suppressionType)
        suppressionType = suppressionTypeDecoded
        let suppressionPeriodDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.SuppressionPeriod.self, forKey: .suppressionPeriod)
        suppressionPeriod = suppressionPeriodDecoded
    }
}

extension UpdateAnomalyOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UpdateAnomalyOutput: Swift.Equatable {

    public init() { }
}

enum UpdateAnomalyOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateLogAnomalyDetectorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectorArn
        case anomalyVisibilityTime
        case enabled
        case evaluationFrequency
        case filterPattern
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let anomalyDetectorArn = self.anomalyDetectorArn {
            try encodeContainer.encode(anomalyDetectorArn, forKey: .anomalyDetectorArn)
        }
        if let anomalyVisibilityTime = self.anomalyVisibilityTime {
            try encodeContainer.encode(anomalyVisibilityTime, forKey: .anomalyVisibilityTime)
        }
        if let enabled = self.enabled {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let evaluationFrequency = self.evaluationFrequency {
            try encodeContainer.encode(evaluationFrequency.rawValue, forKey: .evaluationFrequency)
        }
        if let filterPattern = self.filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
    }
}

extension UpdateLogAnomalyDetectorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateLogAnomalyDetectorInput: Swift.Equatable {
    /// The ARN of the anomaly detector that you want to update.
    /// This member is required.
    public var anomalyDetectorArn: Swift.String?
    /// The number of days to use as the life cycle of anomalies. After this time, anomalies are automatically baselined and the anomaly detector model will treat new occurrences of similar event as normal. Therefore, if you do not correct the cause of an anomaly during this time, it will be considered normal going forward and will not be detected.
    public var anomalyVisibilityTime: Swift.Int?
    /// Use this parameter to pause or restart the anomaly detector.
    /// This member is required.
    public var enabled: Swift.Bool?
    /// Specifies how often the anomaly detector runs and look for anomalies. Set this value according to the frequency that the log group receives new logs. For example, if the log group receives new log events every 10 minutes, then setting evaluationFrequency to FIFTEEN_MIN might be appropriate.
    public var evaluationFrequency: CloudWatchLogsClientTypes.EvaluationFrequency?
    /// A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.
    public var filterPattern: Swift.String?

    public init(
        anomalyDetectorArn: Swift.String? = nil,
        anomalyVisibilityTime: Swift.Int? = nil,
        enabled: Swift.Bool? = nil,
        evaluationFrequency: CloudWatchLogsClientTypes.EvaluationFrequency? = nil,
        filterPattern: Swift.String? = nil
    )
    {
        self.anomalyDetectorArn = anomalyDetectorArn
        self.anomalyVisibilityTime = anomalyVisibilityTime
        self.enabled = enabled
        self.evaluationFrequency = evaluationFrequency
        self.filterPattern = filterPattern
    }
}

struct UpdateLogAnomalyDetectorInputBody: Swift.Equatable {
    let anomalyDetectorArn: Swift.String?
    let evaluationFrequency: CloudWatchLogsClientTypes.EvaluationFrequency?
    let filterPattern: Swift.String?
    let anomalyVisibilityTime: Swift.Int?
    let enabled: Swift.Bool?
}

extension UpdateLogAnomalyDetectorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case anomalyDetectorArn
        case anomalyVisibilityTime
        case enabled
        case evaluationFrequency
        case filterPattern
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let anomalyDetectorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .anomalyDetectorArn)
        anomalyDetectorArn = anomalyDetectorArnDecoded
        let evaluationFrequencyDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.EvaluationFrequency.self, forKey: .evaluationFrequency)
        evaluationFrequency = evaluationFrequencyDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let anomalyVisibilityTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .anomalyVisibilityTime)
        anomalyVisibilityTime = anomalyVisibilityTimeDecoded
        let enabledDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension UpdateLogAnomalyDetectorOutput: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UpdateLogAnomalyDetectorOutput: Swift.Equatable {

    public init() { }
}

enum UpdateLogAnomalyDetectorOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InvalidParameterException": return try await InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "OperationAbortedException": return try await OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceUnavailableException": return try await ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ValidationException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// One of the parameters for the request is not valid.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}
