// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AssociateKmsKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId
        case logGroupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

extension AssociateKmsKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AssociateKmsKeyInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the KMS key to use when encrypting log data. This must be a symmetric KMS key. For more information, see [Amazon Resource Names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms) and [Using Symmetric and Asymmetric Keys](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html).
    /// This member is required.
    public var kmsKeyId: Swift.String?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?

    public init (
        kmsKeyId: Swift.String? = nil,
        logGroupName: Swift.String? = nil
    )
    {
        self.kmsKeyId = kmsKeyId
        self.logGroupName = logGroupName
    }
}

struct AssociateKmsKeyInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let kmsKeyId: Swift.String?
}

extension AssociateKmsKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId
        case logGroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension AssociateKmsKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AssociateKmsKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AssociateKmsKeyOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AssociateKmsKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AssociateKmsKeyOutputResponse: Swift.Equatable {

    public init () { }
}

extension CancelExportTaskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let taskId = self.taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
    }
}

extension CancelExportTaskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CancelExportTaskInput: Swift.Equatable {
    /// The ID of the export task.
    /// This member is required.
    public var taskId: Swift.String?

    public init (
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct CancelExportTaskInputBody: Swift.Equatable {
    let taskId: Swift.String?
}

extension CancelExportTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
    }
}

extension CancelExportTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CancelExportTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidOperationException" : self = .invalidOperationException(try InvalidOperationException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CancelExportTaskOutputError: Swift.Error, Swift.Equatable {
    case invalidOperationException(InvalidOperationException)
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CancelExportTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CancelExportTaskOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateExportTaskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination
        case destinationPrefix
        case from
        case logGroupName
        case logStreamNamePrefix
        case taskName
        case to
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let destinationPrefix = self.destinationPrefix {
            try encodeContainer.encode(destinationPrefix, forKey: .destinationPrefix)
        }
        if let from = self.from {
            try encodeContainer.encode(from, forKey: .from)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamNamePrefix = self.logStreamNamePrefix {
            try encodeContainer.encode(logStreamNamePrefix, forKey: .logStreamNamePrefix)
        }
        if let taskName = self.taskName {
            try encodeContainer.encode(taskName, forKey: .taskName)
        }
        if let to = self.to {
            try encodeContainer.encode(to, forKey: .to)
        }
    }
}

extension CreateExportTaskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateExportTaskInput: Swift.Equatable {
    /// The name of S3 bucket for the exported log data. The bucket must be in the same Amazon Web Services Region.
    /// This member is required.
    public var destination: Swift.String?
    /// The prefix used as the start of the key for every object exported. If you don't specify a value, the default is exportedlogs.
    public var destinationPrefix: Swift.String?
    /// The start time of the range for the request, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp earlier than this time are not exported.
    /// This member is required.
    public var from: Swift.Int?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// Export only log streams that match the provided prefix. If you don't specify a value, no prefix filter is applied.
    public var logStreamNamePrefix: Swift.String?
    /// The name of the export task.
    public var taskName: Swift.String?
    /// The end time of the range for the request, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not exported. You must specify a time that is not earlier than when this log group was created.
    /// This member is required.
    public var to: Swift.Int?

    public init (
        destination: Swift.String? = nil,
        destinationPrefix: Swift.String? = nil,
        from: Swift.Int? = nil,
        logGroupName: Swift.String? = nil,
        logStreamNamePrefix: Swift.String? = nil,
        taskName: Swift.String? = nil,
        to: Swift.Int? = nil
    )
    {
        self.destination = destination
        self.destinationPrefix = destinationPrefix
        self.from = from
        self.logGroupName = logGroupName
        self.logStreamNamePrefix = logStreamNamePrefix
        self.taskName = taskName
        self.to = to
    }
}

struct CreateExportTaskInputBody: Swift.Equatable {
    let taskName: Swift.String?
    let logGroupName: Swift.String?
    let logStreamNamePrefix: Swift.String?
    let from: Swift.Int?
    let to: Swift.Int?
    let destination: Swift.String?
    let destinationPrefix: Swift.String?
}

extension CreateExportTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination
        case destinationPrefix
        case from
        case logGroupName
        case logStreamNamePrefix
        case taskName
        case to
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskName)
        taskName = taskNameDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamNamePrefix)
        logStreamNamePrefix = logStreamNamePrefixDecoded
        let fromDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .from)
        from = fromDecoded
        let toDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .to)
        to = toDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
        let destinationPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationPrefix)
        destinationPrefix = destinationPrefixDecoded
    }
}

extension CreateExportTaskOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateExportTaskOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateExportTaskOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case operationAbortedException(OperationAbortedException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateExportTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateExportTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.taskId = output.taskId
        } else {
            self.taskId = nil
        }
    }
}

public struct CreateExportTaskOutputResponse: Swift.Equatable {
    /// The ID of the export task.
    public var taskId: Swift.String?

    public init (
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

struct CreateExportTaskOutputResponseBody: Swift.Equatable {
    let taskId: Swift.String?
}

extension CreateExportTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
    }
}

extension CreateLogGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId
        case logGroupName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateLogGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLogGroupInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the KMS key to use when encrypting log data. For more information, see [Amazon Resource Names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms).
    public var kmsKeyId: Swift.String?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The key-value pairs to use for the tags. You can grant users access to certain log groups while preventing them from accessing other log groups. To do so, tag your groups and use IAM policies that refer to those tags. To assign tags when you create a log group, you must have either the logs:TagResource or logs:TagLogGroup permission. For more information about tagging, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html). For more information about using tags to control access, see [Controlling access to Amazon Web Services resources using tags](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html).
    public var tags: [Swift.String:Swift.String]?

    public init (
        kmsKeyId: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.kmsKeyId = kmsKeyId
        self.logGroupName = logGroupName
        self.tags = tags
    }
}

struct CreateLogGroupInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let kmsKeyId: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateLogGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsKeyId
        case logGroupName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateLogGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLogGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateLogGroupOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case operationAbortedException(OperationAbortedException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLogGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateLogGroupOutputResponse: Swift.Equatable {

    public init () { }
}

extension CreateLogStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case logStreamName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
    }
}

extension CreateLogStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLogStreamInput: Swift.Equatable {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The name of the log stream.
    /// This member is required.
    public var logStreamName: Swift.String?

    public init (
        logGroupName: Swift.String? = nil,
        logStreamName: Swift.String? = nil
    )
    {
        self.logGroupName = logGroupName
        self.logStreamName = logStreamName
    }
}

struct CreateLogStreamInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let logStreamName: Swift.String?
}

extension CreateLogStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case logStreamName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
    }
}

extension CreateLogStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLogStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceAlreadyExistsException" : self = .resourceAlreadyExistsException(try ResourceAlreadyExistsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateLogStreamOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceAlreadyExistsException(ResourceAlreadyExistsException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLogStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct CreateLogStreamOutputResponse: Swift.Equatable {

    public init () { }
}

extension DataAlreadyAcceptedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DataAlreadyAcceptedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.expectedSequenceToken = output.expectedSequenceToken
            self.message = output.message
        } else {
            self.expectedSequenceToken = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The event was already logged. PutLogEvents actions are now always accepted and never return DataAlreadyAcceptedException regardless of whether a given batch of log events has already been accepted.
public struct DataAlreadyAcceptedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var expectedSequenceToken: Swift.String?
    public var message: Swift.String?

    public init (
        expectedSequenceToken: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.expectedSequenceToken = expectedSequenceToken
        self.message = message
    }
}

struct DataAlreadyAcceptedExceptionBody: Swift.Equatable {
    let expectedSequenceToken: Swift.String?
    let message: Swift.String?
}

extension DataAlreadyAcceptedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expectedSequenceToken
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expectedSequenceTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expectedSequenceToken)
        expectedSequenceToken = expectedSequenceTokenDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchLogsClientTypes {
    public enum DataProtectionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case activated
        case archived
        case deleted
        case disabled
        case sdkUnknown(Swift.String)

        public static var allCases: [DataProtectionStatus] {
            return [
                .activated,
                .archived,
                .deleted,
                .disabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .activated: return "ACTIVATED"
            case .archived: return "ARCHIVED"
            case .deleted: return "DELETED"
            case .disabled: return "DISABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataProtectionStatus(rawValue: rawValue) ?? DataProtectionStatus.sdkUnknown(rawValue)
        }
    }
}

extension DeleteDataProtectionPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupIdentifier
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupIdentifier = self.logGroupIdentifier {
            try encodeContainer.encode(logGroupIdentifier, forKey: .logGroupIdentifier)
        }
    }
}

extension DeleteDataProtectionPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDataProtectionPolicyInput: Swift.Equatable {
    /// The name or ARN of the log group that you want to delete the data protection policy for.
    /// This member is required.
    public var logGroupIdentifier: Swift.String?

    public init (
        logGroupIdentifier: Swift.String? = nil
    )
    {
        self.logGroupIdentifier = logGroupIdentifier
    }
}

struct DeleteDataProtectionPolicyInputBody: Swift.Equatable {
    let logGroupIdentifier: Swift.String?
}

extension DeleteDataProtectionPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupIdentifier
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupIdentifier)
        logGroupIdentifier = logGroupIdentifierDecoded
    }
}

extension DeleteDataProtectionPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDataProtectionPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDataProtectionPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDataProtectionPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDataProtectionPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationName = self.destinationName {
            try encodeContainer.encode(destinationName, forKey: .destinationName)
        }
    }
}

extension DeleteDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDestinationInput: Swift.Equatable {
    /// The name of the destination.
    /// This member is required.
    public var destinationName: Swift.String?

    public init (
        destinationName: Swift.String? = nil
    )
    {
        self.destinationName = destinationName
    }
}

struct DeleteDestinationInputBody: Swift.Equatable {
    let destinationName: Swift.String?
}

extension DeleteDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationName)
        destinationName = destinationNameDecoded
    }
}

extension DeleteDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDestinationOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteDestinationOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteLogGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

extension DeleteLogGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteLogGroupInput: Swift.Equatable {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?

    public init (
        logGroupName: Swift.String? = nil
    )
    {
        self.logGroupName = logGroupName
    }
}

struct DeleteLogGroupInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
}

extension DeleteLogGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension DeleteLogGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLogGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteLogGroupOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLogGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLogGroupOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteLogStreamInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case logStreamName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
    }
}

extension DeleteLogStreamInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteLogStreamInput: Swift.Equatable {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The name of the log stream.
    /// This member is required.
    public var logStreamName: Swift.String?

    public init (
        logGroupName: Swift.String? = nil,
        logStreamName: Swift.String? = nil
    )
    {
        self.logGroupName = logGroupName
        self.logStreamName = logStreamName
    }
}

struct DeleteLogStreamInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let logStreamName: Swift.String?
}

extension DeleteLogStreamInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case logStreamName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
    }
}

extension DeleteLogStreamOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLogStreamOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteLogStreamOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLogStreamOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLogStreamOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteMetricFilterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterName
        case logGroupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterName = self.filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

extension DeleteMetricFilterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteMetricFilterInput: Swift.Equatable {
    /// The name of the metric filter.
    /// This member is required.
    public var filterName: Swift.String?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?

    public init (
        filterName: Swift.String? = nil,
        logGroupName: Swift.String? = nil
    )
    {
        self.filterName = filterName
        self.logGroupName = logGroupName
    }
}

struct DeleteMetricFilterInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let filterName: Swift.String?
}

extension DeleteMetricFilterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterName
        case logGroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterName)
        filterName = filterNameDecoded
    }
}

extension DeleteMetricFilterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMetricFilterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteMetricFilterOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMetricFilterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteMetricFilterOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteQueryDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryDefinitionId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queryDefinitionId = self.queryDefinitionId {
            try encodeContainer.encode(queryDefinitionId, forKey: .queryDefinitionId)
        }
    }
}

extension DeleteQueryDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteQueryDefinitionInput: Swift.Equatable {
    /// The ID of the query definition that you want to delete. You can use [DescribeQueryDefinitions](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeQueryDefinitions.html) to retrieve the IDs of your saved query definitions.
    /// This member is required.
    public var queryDefinitionId: Swift.String?

    public init (
        queryDefinitionId: Swift.String? = nil
    )
    {
        self.queryDefinitionId = queryDefinitionId
    }
}

struct DeleteQueryDefinitionInputBody: Swift.Equatable {
    let queryDefinitionId: Swift.String?
}

extension DeleteQueryDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryDefinitionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryDefinitionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryDefinitionId)
        queryDefinitionId = queryDefinitionIdDecoded
    }
}

extension DeleteQueryDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteQueryDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteQueryDefinitionOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteQueryDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteQueryDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.success = output.success
        } else {
            self.success = false
        }
    }
}

public struct DeleteQueryDefinitionOutputResponse: Swift.Equatable {
    /// A value of TRUE indicates that the operation succeeded. FALSE indicates that the operation failed.
    public var success: Swift.Bool

    public init (
        success: Swift.Bool = false
    )
    {
        self.success = success
    }
}

struct DeleteQueryDefinitionOutputResponseBody: Swift.Equatable {
    let success: Swift.Bool
}

extension DeleteQueryDefinitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case success
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let successDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .success) ?? false
        success = successDecoded
    }
}

extension DeleteResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }
}

extension DeleteResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteResourcePolicyInput: Swift.Equatable {
    /// The name of the policy to be revoked. This parameter is required.
    public var policyName: Swift.String?

    public init (
        policyName: Swift.String? = nil
    )
    {
        self.policyName = policyName
    }
}

struct DeleteResourcePolicyInputBody: Swift.Equatable {
    let policyName: Swift.String?
}

extension DeleteResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
    }
}

extension DeleteResourcePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteResourcePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteResourcePolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteResourcePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteResourcePolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteRetentionPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

extension DeleteRetentionPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRetentionPolicyInput: Swift.Equatable {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?

    public init (
        logGroupName: Swift.String? = nil
    )
    {
        self.logGroupName = logGroupName
    }
}

struct DeleteRetentionPolicyInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
}

extension DeleteRetentionPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension DeleteRetentionPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRetentionPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteRetentionPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRetentionPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteRetentionPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension DeleteSubscriptionFilterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterName
        case logGroupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterName = self.filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

extension DeleteSubscriptionFilterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteSubscriptionFilterInput: Swift.Equatable {
    /// The name of the subscription filter.
    /// This member is required.
    public var filterName: Swift.String?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?

    public init (
        filterName: Swift.String? = nil,
        logGroupName: Swift.String? = nil
    )
    {
        self.filterName = filterName
        self.logGroupName = logGroupName
    }
}

struct DeleteSubscriptionFilterInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let filterName: Swift.String?
}

extension DeleteSubscriptionFilterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterName
        case logGroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterName)
        filterName = filterNameDecoded
    }
}

extension DeleteSubscriptionFilterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteSubscriptionFilterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteSubscriptionFilterOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteSubscriptionFilterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteSubscriptionFilterOutputResponse: Swift.Equatable {

    public init () { }
}

extension DescribeDestinationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationNamePrefix = "DestinationNamePrefix"
        case limit
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationNamePrefix = self.destinationNamePrefix {
            try encodeContainer.encode(destinationNamePrefix, forKey: .destinationNamePrefix)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeDestinationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDestinationsInput: Swift.Equatable {
    /// The prefix to match. If you don't specify a value, no prefix filter is applied.
    public var destinationNamePrefix: Swift.String?
    /// The maximum number of items returned. If you don't specify a value, the default maximum value of 50 items is used.
    public var limit: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init (
        destinationNamePrefix: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.destinationNamePrefix = destinationNamePrefix
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeDestinationsInputBody: Swift.Equatable {
    let destinationNamePrefix: Swift.String?
    let nextToken: Swift.String?
    let limit: Swift.Int?
}

extension DescribeDestinationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationNamePrefix = "DestinationNamePrefix"
        case limit
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationNamePrefix)
        destinationNamePrefix = destinationNamePrefixDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeDestinationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDestinationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDestinationsOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDestinationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDestinationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.destinations = output.destinations
            self.nextToken = output.nextToken
        } else {
            self.destinations = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeDestinationsOutputResponse: Swift.Equatable {
    /// The destinations.
    public var destinations: [CloudWatchLogsClientTypes.Destination]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init (
        destinations: [CloudWatchLogsClientTypes.Destination]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.destinations = destinations
        self.nextToken = nextToken
    }
}

struct DescribeDestinationsOutputResponseBody: Swift.Equatable {
    let destinations: [CloudWatchLogsClientTypes.Destination]?
    let nextToken: Swift.String?
}

extension DescribeDestinationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinations
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.Destination?].self, forKey: .destinations)
        var destinationsDecoded0:[CloudWatchLogsClientTypes.Destination]? = nil
        if let destinationsContainer = destinationsContainer {
            destinationsDecoded0 = [CloudWatchLogsClientTypes.Destination]()
            for structure0 in destinationsContainer {
                if let structure0 = structure0 {
                    destinationsDecoded0?.append(structure0)
                }
            }
        }
        destinations = destinationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeExportTasksInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit
        case nextToken
        case statusCode
        case taskId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let statusCode = self.statusCode {
            try encodeContainer.encode(statusCode.rawValue, forKey: .statusCode)
        }
        if let taskId = self.taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
    }
}

extension DescribeExportTasksInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeExportTasksInput: Swift.Equatable {
    /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    public var limit: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?
    /// The status code of the export task. Specifying a status code filters the results to zero or more export tasks.
    public var statusCode: CloudWatchLogsClientTypes.ExportTaskStatusCode?
    /// The ID of the export task. Specifying a task ID filters the results to one or zero export tasks.
    public var taskId: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        statusCode: CloudWatchLogsClientTypes.ExportTaskStatusCode? = nil,
        taskId: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.statusCode = statusCode
        self.taskId = taskId
    }
}

struct DescribeExportTasksInputBody: Swift.Equatable {
    let taskId: Swift.String?
    let statusCode: CloudWatchLogsClientTypes.ExportTaskStatusCode?
    let nextToken: Swift.String?
    let limit: Swift.Int?
}

extension DescribeExportTasksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit
        case nextToken
        case statusCode
        case taskId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let statusCodeDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.ExportTaskStatusCode.self, forKey: .statusCode)
        statusCode = statusCodeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeExportTasksOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeExportTasksOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeExportTasksOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeExportTasksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeExportTasksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.exportTasks = output.exportTasks
            self.nextToken = output.nextToken
        } else {
            self.exportTasks = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeExportTasksOutputResponse: Swift.Equatable {
    /// The export tasks.
    public var exportTasks: [CloudWatchLogsClientTypes.ExportTask]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init (
        exportTasks: [CloudWatchLogsClientTypes.ExportTask]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.exportTasks = exportTasks
        self.nextToken = nextToken
    }
}

struct DescribeExportTasksOutputResponseBody: Swift.Equatable {
    let exportTasks: [CloudWatchLogsClientTypes.ExportTask]?
    let nextToken: Swift.String?
}

extension DescribeExportTasksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case exportTasks
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportTasksContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.ExportTask?].self, forKey: .exportTasks)
        var exportTasksDecoded0:[CloudWatchLogsClientTypes.ExportTask]? = nil
        if let exportTasksContainer = exportTasksContainer {
            exportTasksDecoded0 = [CloudWatchLogsClientTypes.ExportTask]()
            for structure0 in exportTasksContainer {
                if let structure0 = structure0 {
                    exportTasksDecoded0?.append(structure0)
                }
            }
        }
        exportTasks = exportTasksDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeLogGroupsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIdentifiers
        case includeLinkedAccounts
        case limit
        case logGroupNamePattern
        case logGroupNamePrefix
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIdentifiers = accountIdentifiers {
            var accountIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIdentifiers)
            for accountid0 in accountIdentifiers {
                try accountIdentifiersContainer.encode(accountid0)
            }
        }
        if let includeLinkedAccounts = self.includeLinkedAccounts {
            try encodeContainer.encode(includeLinkedAccounts, forKey: .includeLinkedAccounts)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupNamePattern = self.logGroupNamePattern {
            try encodeContainer.encode(logGroupNamePattern, forKey: .logGroupNamePattern)
        }
        if let logGroupNamePrefix = self.logGroupNamePrefix {
            try encodeContainer.encode(logGroupNamePrefix, forKey: .logGroupNamePrefix)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeLogGroupsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLogGroupsInput: Swift.Equatable {
    /// When includeLinkedAccounts is set to True, use this parameter to specify the list of accounts to search. You can specify as many as 20 account IDs in the array.
    public var accountIdentifiers: [Swift.String]?
    /// If you are using a monitoring account, set this to True to have the operation return log groups in the accounts listed in accountIdentifiers. If this parameter is set to true and accountIdentifiers contains a null value, the operation returns all log groups in the monitoring account and all log groups in all source accounts that are linked to the monitoring account. If you specify includeLinkedAccounts in your request, then metricFilterCount, retentionInDays, and storedBytes are not included in the response.
    public var includeLinkedAccounts: Swift.Bool?
    /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    public var limit: Swift.Int?
    /// If you specify a string for this parameter, the operation returns only log groups that have names that match the string based on a case-sensitive substring search. For example, if you specify Foo, log groups named FooBar, aws/Foo, and GroupFoo would match, but foo, F/o/o and Froo would not match. logGroupNamePattern and logGroupNamePrefix are mutually exclusive. Only one of these parameters can be passed.
    public var logGroupNamePattern: Swift.String?
    /// The prefix to match. logGroupNamePrefix and logGroupNamePattern are mutually exclusive. Only one of these parameters can be passed.
    public var logGroupNamePrefix: Swift.String?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init (
        accountIdentifiers: [Swift.String]? = nil,
        includeLinkedAccounts: Swift.Bool? = nil,
        limit: Swift.Int? = nil,
        logGroupNamePattern: Swift.String? = nil,
        logGroupNamePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accountIdentifiers = accountIdentifiers
        self.includeLinkedAccounts = includeLinkedAccounts
        self.limit = limit
        self.logGroupNamePattern = logGroupNamePattern
        self.logGroupNamePrefix = logGroupNamePrefix
        self.nextToken = nextToken
    }
}

struct DescribeLogGroupsInputBody: Swift.Equatable {
    let accountIdentifiers: [Swift.String]?
    let logGroupNamePrefix: Swift.String?
    let logGroupNamePattern: Swift.String?
    let nextToken: Swift.String?
    let limit: Swift.Int?
    let includeLinkedAccounts: Swift.Bool?
}

extension DescribeLogGroupsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIdentifiers
        case includeLinkedAccounts
        case limit
        case logGroupNamePattern
        case logGroupNamePrefix
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdentifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIdentifiers)
        var accountIdentifiersDecoded0:[Swift.String]? = nil
        if let accountIdentifiersContainer = accountIdentifiersContainer {
            accountIdentifiersDecoded0 = [Swift.String]()
            for string0 in accountIdentifiersContainer {
                if let string0 = string0 {
                    accountIdentifiersDecoded0?.append(string0)
                }
            }
        }
        accountIdentifiers = accountIdentifiersDecoded0
        let logGroupNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupNamePrefix)
        logGroupNamePrefix = logGroupNamePrefixDecoded
        let logGroupNamePatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupNamePattern)
        logGroupNamePattern = logGroupNamePatternDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let includeLinkedAccountsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeLinkedAccounts)
        includeLinkedAccounts = includeLinkedAccountsDecoded
    }
}

extension DescribeLogGroupsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLogGroupsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeLogGroupsOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLogGroupsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeLogGroupsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.logGroups = output.logGroups
            self.nextToken = output.nextToken
        } else {
            self.logGroups = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeLogGroupsOutputResponse: Swift.Equatable {
    /// The log groups. If the retentionInDays value is not included for a log group, then that log group's events do not expire.
    public var logGroups: [CloudWatchLogsClientTypes.LogGroup]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init (
        logGroups: [CloudWatchLogsClientTypes.LogGroup]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.logGroups = logGroups
        self.nextToken = nextToken
    }
}

struct DescribeLogGroupsOutputResponseBody: Swift.Equatable {
    let logGroups: [CloudWatchLogsClientTypes.LogGroup]?
    let nextToken: Swift.String?
}

extension DescribeLogGroupsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroups
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.LogGroup?].self, forKey: .logGroups)
        var logGroupsDecoded0:[CloudWatchLogsClientTypes.LogGroup]? = nil
        if let logGroupsContainer = logGroupsContainer {
            logGroupsDecoded0 = [CloudWatchLogsClientTypes.LogGroup]()
            for structure0 in logGroupsContainer {
                if let structure0 = structure0 {
                    logGroupsDecoded0?.append(structure0)
                }
            }
        }
        logGroups = logGroupsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeLogStreamsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case descending
        case limit
        case logGroupIdentifier
        case logGroupName
        case logStreamNamePrefix
        case nextToken
        case orderBy
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let descending = self.descending {
            try encodeContainer.encode(descending, forKey: .descending)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupIdentifier = self.logGroupIdentifier {
            try encodeContainer.encode(logGroupIdentifier, forKey: .logGroupIdentifier)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamNamePrefix = self.logStreamNamePrefix {
            try encodeContainer.encode(logStreamNamePrefix, forKey: .logStreamNamePrefix)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let orderBy = self.orderBy {
            try encodeContainer.encode(orderBy.rawValue, forKey: .orderBy)
        }
    }
}

extension DescribeLogStreamsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLogStreamsInput: Swift.Equatable {
    /// If the value is true, results are returned in descending order. If the value is to false, results are returned in ascending order. The default value is false.
    public var descending: Swift.Bool?
    /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    public var limit: Swift.Int?
    /// Specify either the name or ARN of the log group to view. If the log group is in a source account and you are using a monitoring account, you must use the log group ARN. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupIdentifier: Swift.String?
    /// The name of the log group. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupName: Swift.String?
    /// The prefix to match. If orderBy is LastEventTime, you cannot specify this parameter.
    public var logStreamNamePrefix: Swift.String?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?
    /// If the value is LogStreamName, the results are ordered by log stream name. If the value is LastEventTime, the results are ordered by the event time. The default value is LogStreamName. If you order the results by event time, you cannot specify the logStreamNamePrefix parameter. lastEventTimestamp represents the time of the most recent log event in the log stream in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. lastEventTimestamp updates on an eventual consistency basis. It typically updates in less than an hour from ingestion, but in rare situations might take longer.
    public var orderBy: CloudWatchLogsClientTypes.OrderBy?

    public init (
        descending: Swift.Bool? = nil,
        limit: Swift.Int? = nil,
        logGroupIdentifier: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        logStreamNamePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        orderBy: CloudWatchLogsClientTypes.OrderBy? = nil
    )
    {
        self.descending = descending
        self.limit = limit
        self.logGroupIdentifier = logGroupIdentifier
        self.logGroupName = logGroupName
        self.logStreamNamePrefix = logStreamNamePrefix
        self.nextToken = nextToken
        self.orderBy = orderBy
    }
}

struct DescribeLogStreamsInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let logGroupIdentifier: Swift.String?
    let logStreamNamePrefix: Swift.String?
    let orderBy: CloudWatchLogsClientTypes.OrderBy?
    let descending: Swift.Bool?
    let nextToken: Swift.String?
    let limit: Swift.Int?
}

extension DescribeLogStreamsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case descending
        case limit
        case logGroupIdentifier
        case logGroupName
        case logStreamNamePrefix
        case nextToken
        case orderBy
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logGroupIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupIdentifier)
        logGroupIdentifier = logGroupIdentifierDecoded
        let logStreamNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamNamePrefix)
        logStreamNamePrefix = logStreamNamePrefixDecoded
        let orderByDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.OrderBy.self, forKey: .orderBy)
        orderBy = orderByDecoded
        let descendingDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .descending)
        descending = descendingDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeLogStreamsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLogStreamsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeLogStreamsOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLogStreamsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeLogStreamsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.logStreams = output.logStreams
            self.nextToken = output.nextToken
        } else {
            self.logStreams = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeLogStreamsOutputResponse: Swift.Equatable {
    /// The log streams.
    public var logStreams: [CloudWatchLogsClientTypes.LogStream]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init (
        logStreams: [CloudWatchLogsClientTypes.LogStream]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.logStreams = logStreams
        self.nextToken = nextToken
    }
}

struct DescribeLogStreamsOutputResponseBody: Swift.Equatable {
    let logStreams: [CloudWatchLogsClientTypes.LogStream]?
    let nextToken: Swift.String?
}

extension DescribeLogStreamsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logStreams
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logStreamsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.LogStream?].self, forKey: .logStreams)
        var logStreamsDecoded0:[CloudWatchLogsClientTypes.LogStream]? = nil
        if let logStreamsContainer = logStreamsContainer {
            logStreamsDecoded0 = [CloudWatchLogsClientTypes.LogStream]()
            for structure0 in logStreamsContainer {
                if let structure0 = structure0 {
                    logStreamsDecoded0?.append(structure0)
                }
            }
        }
        logStreams = logStreamsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeMetricFiltersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterNamePrefix
        case limit
        case logGroupName
        case metricName
        case metricNamespace
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterNamePrefix = self.filterNamePrefix {
            try encodeContainer.encode(filterNamePrefix, forKey: .filterNamePrefix)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let metricNamespace = self.metricNamespace {
            try encodeContainer.encode(metricNamespace, forKey: .metricNamespace)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeMetricFiltersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeMetricFiltersInput: Swift.Equatable {
    /// The prefix to match. CloudWatch Logs uses the value that you set here only if you also include the logGroupName parameter in your request.
    public var filterNamePrefix: Swift.String?
    /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    public var limit: Swift.Int?
    /// The name of the log group.
    public var logGroupName: Swift.String?
    /// Filters results to include only those with the specified metric name. If you include this parameter in your request, you must also include the metricNamespace parameter.
    public var metricName: Swift.String?
    /// Filters results to include only those in the specified namespace. If you include this parameter in your request, you must also include the metricName parameter.
    public var metricNamespace: Swift.String?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init (
        filterNamePrefix: Swift.String? = nil,
        limit: Swift.Int? = nil,
        logGroupName: Swift.String? = nil,
        metricName: Swift.String? = nil,
        metricNamespace: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filterNamePrefix = filterNamePrefix
        self.limit = limit
        self.logGroupName = logGroupName
        self.metricName = metricName
        self.metricNamespace = metricNamespace
        self.nextToken = nextToken
    }
}

struct DescribeMetricFiltersInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let filterNamePrefix: Swift.String?
    let nextToken: Swift.String?
    let limit: Swift.Int?
    let metricName: Swift.String?
    let metricNamespace: Swift.String?
}

extension DescribeMetricFiltersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterNamePrefix
        case limit
        case logGroupName
        case metricName
        case metricNamespace
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterNamePrefix)
        filterNamePrefix = filterNamePrefixDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricNamespace)
        metricNamespace = metricNamespaceDecoded
    }
}

extension DescribeMetricFiltersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeMetricFiltersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeMetricFiltersOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMetricFiltersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeMetricFiltersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metricFilters = output.metricFilters
            self.nextToken = output.nextToken
        } else {
            self.metricFilters = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeMetricFiltersOutputResponse: Swift.Equatable {
    /// The metric filters.
    public var metricFilters: [CloudWatchLogsClientTypes.MetricFilter]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init (
        metricFilters: [CloudWatchLogsClientTypes.MetricFilter]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.metricFilters = metricFilters
        self.nextToken = nextToken
    }
}

struct DescribeMetricFiltersOutputResponseBody: Swift.Equatable {
    let metricFilters: [CloudWatchLogsClientTypes.MetricFilter]?
    let nextToken: Swift.String?
}

extension DescribeMetricFiltersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metricFilters
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricFiltersContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.MetricFilter?].self, forKey: .metricFilters)
        var metricFiltersDecoded0:[CloudWatchLogsClientTypes.MetricFilter]? = nil
        if let metricFiltersContainer = metricFiltersContainer {
            metricFiltersDecoded0 = [CloudWatchLogsClientTypes.MetricFilter]()
            for structure0 in metricFiltersContainer {
                if let structure0 = structure0 {
                    metricFiltersDecoded0?.append(structure0)
                }
            }
        }
        metricFilters = metricFiltersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeQueriesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case maxResults
        case nextToken
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

extension DescribeQueriesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeQueriesInput: Swift.Equatable {
    /// Limits the returned queries to only those for the specified log group.
    public var logGroupName: Swift.String?
    /// Limits the number of returned queries to the specified number.
    public var maxResults: Swift.Int?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// Limits the returned queries to only those that have the specified status. Valid values are Cancelled, Complete, Failed, Running, and Scheduled.
    public var status: CloudWatchLogsClientTypes.QueryStatus?

    public init (
        logGroupName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: CloudWatchLogsClientTypes.QueryStatus? = nil
    )
    {
        self.logGroupName = logGroupName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct DescribeQueriesInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let status: CloudWatchLogsClientTypes.QueryStatus?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeQueriesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case maxResults
        case nextToken
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.QueryStatus.self, forKey: .status)
        status = statusDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeQueriesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeQueriesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeQueriesOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeQueriesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeQueriesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.queries = output.queries
        } else {
            self.nextToken = nil
            self.queries = nil
        }
    }
}

public struct DescribeQueriesOutputResponse: Swift.Equatable {
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// The list of queries that match the request.
    public var queries: [CloudWatchLogsClientTypes.QueryInfo]?

    public init (
        nextToken: Swift.String? = nil,
        queries: [CloudWatchLogsClientTypes.QueryInfo]? = nil
    )
    {
        self.nextToken = nextToken
        self.queries = queries
    }
}

struct DescribeQueriesOutputResponseBody: Swift.Equatable {
    let queries: [CloudWatchLogsClientTypes.QueryInfo]?
    let nextToken: Swift.String?
}

extension DescribeQueriesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case queries
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queriesContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.QueryInfo?].self, forKey: .queries)
        var queriesDecoded0:[CloudWatchLogsClientTypes.QueryInfo]? = nil
        if let queriesContainer = queriesContainer {
            queriesDecoded0 = [CloudWatchLogsClientTypes.QueryInfo]()
            for structure0 in queriesContainer {
                if let structure0 = structure0 {
                    queriesDecoded0?.append(structure0)
                }
            }
        }
        queries = queriesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeQueryDefinitionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
        case queryDefinitionNamePrefix
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let queryDefinitionNamePrefix = self.queryDefinitionNamePrefix {
            try encodeContainer.encode(queryDefinitionNamePrefix, forKey: .queryDefinitionNamePrefix)
        }
    }
}

extension DescribeQueryDefinitionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeQueryDefinitionsInput: Swift.Equatable {
    /// Limits the number of returned query definitions to the specified number.
    public var maxResults: Swift.Int?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// Use this parameter to filter your results to only the query definitions that have names that start with the prefix you specify.
    public var queryDefinitionNamePrefix: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        queryDefinitionNamePrefix: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.queryDefinitionNamePrefix = queryDefinitionNamePrefix
    }
}

struct DescribeQueryDefinitionsInputBody: Swift.Equatable {
    let queryDefinitionNamePrefix: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeQueryDefinitionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults
        case nextToken
        case queryDefinitionNamePrefix
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryDefinitionNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryDefinitionNamePrefix)
        queryDefinitionNamePrefix = queryDefinitionNamePrefixDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeQueryDefinitionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeQueryDefinitionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeQueryDefinitionsOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeQueryDefinitionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeQueryDefinitionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.queryDefinitions = output.queryDefinitions
        } else {
            self.nextToken = nil
            self.queryDefinitions = nil
        }
    }
}

public struct DescribeQueryDefinitionsOutputResponse: Swift.Equatable {
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// The list of query definitions that match your request.
    public var queryDefinitions: [CloudWatchLogsClientTypes.QueryDefinition]?

    public init (
        nextToken: Swift.String? = nil,
        queryDefinitions: [CloudWatchLogsClientTypes.QueryDefinition]? = nil
    )
    {
        self.nextToken = nextToken
        self.queryDefinitions = queryDefinitions
    }
}

struct DescribeQueryDefinitionsOutputResponseBody: Swift.Equatable {
    let queryDefinitions: [CloudWatchLogsClientTypes.QueryDefinition]?
    let nextToken: Swift.String?
}

extension DescribeQueryDefinitionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case queryDefinitions
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryDefinitionsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.QueryDefinition?].self, forKey: .queryDefinitions)
        var queryDefinitionsDecoded0:[CloudWatchLogsClientTypes.QueryDefinition]? = nil
        if let queryDefinitionsContainer = queryDefinitionsContainer {
            queryDefinitionsDecoded0 = [CloudWatchLogsClientTypes.QueryDefinition]()
            for structure0 in queryDefinitionsContainer {
                if let structure0 = structure0 {
                    queryDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        queryDefinitions = queryDefinitionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeResourcePoliciesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeResourcePoliciesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeResourcePoliciesInput: Swift.Equatable {
    /// The maximum number of resource policies to be displayed with one call of this API.
    public var limit: Swift.Int?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init (
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
    }
}

struct DescribeResourcePoliciesInputBody: Swift.Equatable {
    let nextToken: Swift.String?
    let limit: Swift.Int?
}

extension DescribeResourcePoliciesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case limit
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeResourcePoliciesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeResourcePoliciesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeResourcePoliciesOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeResourcePoliciesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeResourcePoliciesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.resourcePolicies = output.resourcePolicies
        } else {
            self.nextToken = nil
            self.resourcePolicies = nil
        }
    }
}

public struct DescribeResourcePoliciesOutputResponse: Swift.Equatable {
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// The resource policies that exist in this account.
    public var resourcePolicies: [CloudWatchLogsClientTypes.ResourcePolicy]?

    public init (
        nextToken: Swift.String? = nil,
        resourcePolicies: [CloudWatchLogsClientTypes.ResourcePolicy]? = nil
    )
    {
        self.nextToken = nextToken
        self.resourcePolicies = resourcePolicies
    }
}

struct DescribeResourcePoliciesOutputResponseBody: Swift.Equatable {
    let resourcePolicies: [CloudWatchLogsClientTypes.ResourcePolicy]?
    let nextToken: Swift.String?
}

extension DescribeResourcePoliciesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case resourcePolicies
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourcePoliciesContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.ResourcePolicy?].self, forKey: .resourcePolicies)
        var resourcePoliciesDecoded0:[CloudWatchLogsClientTypes.ResourcePolicy]? = nil
        if let resourcePoliciesContainer = resourcePoliciesContainer {
            resourcePoliciesDecoded0 = [CloudWatchLogsClientTypes.ResourcePolicy]()
            for structure0 in resourcePoliciesContainer {
                if let structure0 = structure0 {
                    resourcePoliciesDecoded0?.append(structure0)
                }
            }
        }
        resourcePolicies = resourcePoliciesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeSubscriptionFiltersInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterNamePrefix
        case limit
        case logGroupName
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterNamePrefix = self.filterNamePrefix {
            try encodeContainer.encode(filterNamePrefix, forKey: .filterNamePrefix)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension DescribeSubscriptionFiltersInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeSubscriptionFiltersInput: Swift.Equatable {
    /// The prefix to match. If you don't specify a value, no prefix filter is applied.
    public var filterNamePrefix: Swift.String?
    /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    public var limit: Swift.Int?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init (
        filterNamePrefix: Swift.String? = nil,
        limit: Swift.Int? = nil,
        logGroupName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filterNamePrefix = filterNamePrefix
        self.limit = limit
        self.logGroupName = logGroupName
        self.nextToken = nextToken
    }
}

struct DescribeSubscriptionFiltersInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let filterNamePrefix: Swift.String?
    let nextToken: Swift.String?
    let limit: Swift.Int?
}

extension DescribeSubscriptionFiltersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterNamePrefix
        case limit
        case logGroupName
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterNamePrefix)
        filterNamePrefix = filterNamePrefixDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeSubscriptionFiltersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeSubscriptionFiltersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeSubscriptionFiltersOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeSubscriptionFiltersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeSubscriptionFiltersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.subscriptionFilters = output.subscriptionFilters
        } else {
            self.nextToken = nil
            self.subscriptionFilters = nil
        }
    }
}

public struct DescribeSubscriptionFiltersOutputResponse: Swift.Equatable {
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// The subscription filters.
    public var subscriptionFilters: [CloudWatchLogsClientTypes.SubscriptionFilter]?

    public init (
        nextToken: Swift.String? = nil,
        subscriptionFilters: [CloudWatchLogsClientTypes.SubscriptionFilter]? = nil
    )
    {
        self.nextToken = nextToken
        self.subscriptionFilters = subscriptionFilters
    }
}

struct DescribeSubscriptionFiltersOutputResponseBody: Swift.Equatable {
    let subscriptionFilters: [CloudWatchLogsClientTypes.SubscriptionFilter]?
    let nextToken: Swift.String?
}

extension DescribeSubscriptionFiltersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case subscriptionFilters
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subscriptionFiltersContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.SubscriptionFilter?].self, forKey: .subscriptionFilters)
        var subscriptionFiltersDecoded0:[CloudWatchLogsClientTypes.SubscriptionFilter]? = nil
        if let subscriptionFiltersContainer = subscriptionFiltersContainer {
            subscriptionFiltersDecoded0 = [CloudWatchLogsClientTypes.SubscriptionFilter]()
            for structure0 in subscriptionFiltersContainer {
                if let structure0 = structure0 {
                    subscriptionFiltersDecoded0?.append(structure0)
                }
            }
        }
        subscriptionFilters = subscriptionFiltersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension CloudWatchLogsClientTypes.Destination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicy
        case arn
        case creationTime
        case destinationName
        case roleArn
        case targetArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicy = self.accessPolicy {
            try encodeContainer.encode(accessPolicy, forKey: .accessPolicy)
        }
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let destinationName = self.destinationName {
            try encodeContainer.encode(destinationName, forKey: .destinationName)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let targetArn = self.targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationName)
        destinationName = destinationNameDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let accessPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPolicy)
        accessPolicy = accessPolicyDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a cross-account destination that receives subscription log events.
    public struct Destination: Swift.Equatable {
        /// An IAM policy document that governs which Amazon Web Services accounts can create subscription filters against this destination.
        public var accessPolicy: Swift.String?
        /// The ARN of this destination.
        public var arn: Swift.String?
        /// The creation time of the destination, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var creationTime: Swift.Int?
        /// The name of the destination.
        public var destinationName: Swift.String?
        /// A role for impersonation, used when delivering log events to the target.
        public var roleArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the physical target where the log events are delivered (for example, a Kinesis stream).
        public var targetArn: Swift.String?

        public init (
            accessPolicy: Swift.String? = nil,
            arn: Swift.String? = nil,
            creationTime: Swift.Int? = nil,
            destinationName: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            targetArn: Swift.String? = nil
        )
        {
            self.accessPolicy = accessPolicy
            self.arn = arn
            self.creationTime = creationTime
            self.destinationName = destinationName
            self.roleArn = roleArn
            self.targetArn = targetArn
        }
    }

}

extension DisassociateKmsKeyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

extension DisassociateKmsKeyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DisassociateKmsKeyInput: Swift.Equatable {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?

    public init (
        logGroupName: Swift.String? = nil
    )
    {
        self.logGroupName = logGroupName
    }
}

struct DisassociateKmsKeyInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
}

extension DisassociateKmsKeyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension DisassociateKmsKeyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateKmsKeyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DisassociateKmsKeyOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateKmsKeyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisassociateKmsKeyOutputResponse: Swift.Equatable {

    public init () { }
}

extension CloudWatchLogsClientTypes {
    /// The method used to distribute log data to the destination, which can be either random or grouped by log stream.
    public enum Distribution: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bylogstream
        case random
        case sdkUnknown(Swift.String)

        public static var allCases: [Distribution] {
            return [
                .bylogstream,
                .random,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bylogstream: return "ByLogStream"
            case .random: return "Random"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Distribution(rawValue: rawValue) ?? Distribution.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchLogsClientTypes.ExportTask: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination
        case destinationPrefix
        case executionInfo
        case from
        case logGroupName
        case status
        case taskId
        case taskName
        case to
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let destinationPrefix = self.destinationPrefix {
            try encodeContainer.encode(destinationPrefix, forKey: .destinationPrefix)
        }
        if let executionInfo = self.executionInfo {
            try encodeContainer.encode(executionInfo, forKey: .executionInfo)
        }
        if let from = self.from {
            try encodeContainer.encode(from, forKey: .from)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let status = self.status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let taskId = self.taskId {
            try encodeContainer.encode(taskId, forKey: .taskId)
        }
        if let taskName = self.taskName {
            try encodeContainer.encode(taskName, forKey: .taskName)
        }
        if let to = self.to {
            try encodeContainer.encode(to, forKey: .to)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskId)
        taskId = taskIdDecoded
        let taskNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskName)
        taskName = taskNameDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let fromDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .from)
        from = fromDecoded
        let toDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .to)
        to = toDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destination)
        destination = destinationDecoded
        let destinationPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationPrefix)
        destinationPrefix = destinationPrefixDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.ExportTaskStatus.self, forKey: .status)
        status = statusDecoded
        let executionInfoDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.ExportTaskExecutionInfo.self, forKey: .executionInfo)
        executionInfo = executionInfoDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents an export task.
    public struct ExportTask: Swift.Equatable {
        /// The name of the S3 bucket to which the log data was exported.
        public var destination: Swift.String?
        /// The prefix that was used as the start of Amazon S3 key for every object exported.
        public var destinationPrefix: Swift.String?
        /// Execution information about the export task.
        public var executionInfo: CloudWatchLogsClientTypes.ExportTaskExecutionInfo?
        /// The start time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp before this time are not exported.
        public var from: Swift.Int?
        /// The name of the log group from which logs data was exported.
        public var logGroupName: Swift.String?
        /// The status of the export task.
        public var status: CloudWatchLogsClientTypes.ExportTaskStatus?
        /// The ID of the export task.
        public var taskId: Swift.String?
        /// The name of the export task.
        public var taskName: Swift.String?
        /// The end time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not exported.
        public var to: Swift.Int?

        public init (
            destination: Swift.String? = nil,
            destinationPrefix: Swift.String? = nil,
            executionInfo: CloudWatchLogsClientTypes.ExportTaskExecutionInfo? = nil,
            from: Swift.Int? = nil,
            logGroupName: Swift.String? = nil,
            status: CloudWatchLogsClientTypes.ExportTaskStatus? = nil,
            taskId: Swift.String? = nil,
            taskName: Swift.String? = nil,
            to: Swift.Int? = nil
        )
        {
            self.destination = destination
            self.destinationPrefix = destinationPrefix
            self.executionInfo = executionInfo
            self.from = from
            self.logGroupName = logGroupName
            self.status = status
            self.taskId = taskId
            self.taskName = taskName
            self.to = to
        }
    }

}

extension CloudWatchLogsClientTypes.ExportTaskExecutionInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completionTime
        case creationTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = self.completionTime {
            try encodeContainer.encode(completionTime, forKey: .completionTime)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents the status of an export task.
    public struct ExportTaskExecutionInfo: Swift.Equatable {
        /// The completion time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var completionTime: Swift.Int?
        /// The creation time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var creationTime: Swift.Int?

        public init (
            completionTime: Swift.Int? = nil,
            creationTime: Swift.Int? = nil
        )
        {
            self.completionTime = completionTime
            self.creationTime = creationTime
        }
    }

}

extension CloudWatchLogsClientTypes.ExportTaskStatus: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = self.code {
            try encodeContainer.encode(code.rawValue, forKey: .code)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.ExportTaskStatusCode.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents the status of an export task.
    public struct ExportTaskStatus: Swift.Equatable {
        /// The status code of the export task.
        public var code: CloudWatchLogsClientTypes.ExportTaskStatusCode?
        /// The status message related to the status code.
        public var message: Swift.String?

        public init (
            code: CloudWatchLogsClientTypes.ExportTaskStatusCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension CloudWatchLogsClientTypes {
    public enum ExportTaskStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case completed
        case failed
        case pending
        case pendingCancel
        case running
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportTaskStatusCode] {
            return [
                .cancelled,
                .completed,
                .failed,
                .pending,
                .pendingCancel,
                .running,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .pendingCancel: return "PENDING_CANCEL"
            case .running: return "RUNNING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExportTaskStatusCode(rawValue: rawValue) ?? ExportTaskStatusCode.sdkUnknown(rawValue)
        }
    }
}

extension FilterLogEventsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case filterPattern
        case interleaved
        case limit
        case logGroupIdentifier
        case logGroupName
        case logStreamNamePrefix
        case logStreamNames
        case nextToken
        case startTime
        case unmask
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let filterPattern = self.filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let interleaved = self.interleaved {
            try encodeContainer.encode(interleaved, forKey: .interleaved)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupIdentifier = self.logGroupIdentifier {
            try encodeContainer.encode(logGroupIdentifier, forKey: .logGroupIdentifier)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamNamePrefix = self.logStreamNamePrefix {
            try encodeContainer.encode(logStreamNamePrefix, forKey: .logStreamNamePrefix)
        }
        if let logStreamNames = logStreamNames {
            var logStreamNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logStreamNames)
            for logstreamname0 in logStreamNames {
                try logStreamNamesContainer.encode(logstreamname0)
            }
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
        if unmask != false {
            try encodeContainer.encode(unmask, forKey: .unmask)
        }
    }
}

extension FilterLogEventsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct FilterLogEventsInput: Swift.Equatable {
    /// The end of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not returned.
    public var endTime: Swift.Int?
    /// The filter pattern to use. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html). If not provided, all the events are matched.
    public var filterPattern: Swift.String?
    /// If the value is true, the operation attempts to provide responses that contain events from multiple log streams within the log group, interleaved in a single response. If the value is false, all the matched log events in the first log stream are searched first, then those in the next log stream, and so on. Important As of June 17, 2019, this parameter is ignored and the value is assumed to be true. The response from this operation always interleaves events from multiple log streams within a log group.
    @available(*, deprecated, message: "Starting on June 17, 2019, this parameter will be ignored and the value will be assumed to be true. The response from this operation will always interleave events from multiple log streams within a log group.")
    public var interleaved: Swift.Bool?
    /// The maximum number of events to return. The default is 10,000 events.
    public var limit: Swift.Int?
    /// Specify either the name or ARN of the log group to view log events from. If the log group is in a source account and you are using a monitoring account, you must use the log group ARN. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupIdentifier: Swift.String?
    /// The name of the log group to search. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupName: Swift.String?
    /// Filters the results to include only events from log streams that have names starting with this prefix. If you specify a value for both logStreamNamePrefix and logStreamNames, but the value for logStreamNamePrefix does not match any log stream names specified in logStreamNames, the action returns an InvalidParameterException error.
    public var logStreamNamePrefix: Swift.String?
    /// Filters the results to only logs from the log streams in this list. If you specify a value for both logStreamNamePrefix and logStreamNames, the action returns an InvalidParameterException error.
    public var logStreamNames: [Swift.String]?
    /// The token for the next set of events to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?
    /// The start of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp before this time are not returned.
    public var startTime: Swift.Int?
    /// Specify true to display the log event fields with all sensitive data unmasked and visible. The default is false. To use this operation with this parameter, you must be signed into an account with the logs:Unmask permission.
    public var unmask: Swift.Bool

    public init (
        endTime: Swift.Int? = nil,
        filterPattern: Swift.String? = nil,
        interleaved: Swift.Bool? = nil,
        limit: Swift.Int? = nil,
        logGroupIdentifier: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        logStreamNamePrefix: Swift.String? = nil,
        logStreamNames: [Swift.String]? = nil,
        nextToken: Swift.String? = nil,
        startTime: Swift.Int? = nil,
        unmask: Swift.Bool = false
    )
    {
        self.endTime = endTime
        self.filterPattern = filterPattern
        self.interleaved = interleaved
        self.limit = limit
        self.logGroupIdentifier = logGroupIdentifier
        self.logGroupName = logGroupName
        self.logStreamNamePrefix = logStreamNamePrefix
        self.logStreamNames = logStreamNames
        self.nextToken = nextToken
        self.startTime = startTime
        self.unmask = unmask
    }
}

struct FilterLogEventsInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let logGroupIdentifier: Swift.String?
    let logStreamNames: [Swift.String]?
    let logStreamNamePrefix: Swift.String?
    let startTime: Swift.Int?
    let endTime: Swift.Int?
    let filterPattern: Swift.String?
    let nextToken: Swift.String?
    let limit: Swift.Int?
    let interleaved: Swift.Bool?
    let unmask: Swift.Bool
}

extension FilterLogEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case filterPattern
        case interleaved
        case limit
        case logGroupIdentifier
        case logGroupName
        case logStreamNamePrefix
        case logStreamNames
        case nextToken
        case startTime
        case unmask
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logGroupIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupIdentifier)
        logGroupIdentifier = logGroupIdentifierDecoded
        let logStreamNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logStreamNames)
        var logStreamNamesDecoded0:[Swift.String]? = nil
        if let logStreamNamesContainer = logStreamNamesContainer {
            logStreamNamesDecoded0 = [Swift.String]()
            for string0 in logStreamNamesContainer {
                if let string0 = string0 {
                    logStreamNamesDecoded0?.append(string0)
                }
            }
        }
        logStreamNames = logStreamNamesDecoded0
        let logStreamNamePrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamNamePrefix)
        logStreamNamePrefix = logStreamNamePrefixDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endTime)
        endTime = endTimeDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let interleavedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .interleaved)
        interleaved = interleavedDecoded
        let unmaskDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .unmask) ?? false
        unmask = unmaskDecoded
    }
}

extension FilterLogEventsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension FilterLogEventsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum FilterLogEventsOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension FilterLogEventsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: FilterLogEventsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.events = output.events
            self.nextToken = output.nextToken
            self.searchedLogStreams = output.searchedLogStreams
        } else {
            self.events = nil
            self.nextToken = nil
            self.searchedLogStreams = nil
        }
    }
}

public struct FilterLogEventsOutputResponse: Swift.Equatable {
    /// The matched events.
    public var events: [CloudWatchLogsClientTypes.FilteredLogEvent]?
    /// The token to use when requesting the next set of items. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// Important As of May 15, 2020, this parameter is no longer supported. This parameter returns an empty list. Indicates which log streams have been searched and whether each has been searched completely.
    public var searchedLogStreams: [CloudWatchLogsClientTypes.SearchedLogStream]?

    public init (
        events: [CloudWatchLogsClientTypes.FilteredLogEvent]? = nil,
        nextToken: Swift.String? = nil,
        searchedLogStreams: [CloudWatchLogsClientTypes.SearchedLogStream]? = nil
    )
    {
        self.events = events
        self.nextToken = nextToken
        self.searchedLogStreams = searchedLogStreams
    }
}

struct FilterLogEventsOutputResponseBody: Swift.Equatable {
    let events: [CloudWatchLogsClientTypes.FilteredLogEvent]?
    let searchedLogStreams: [CloudWatchLogsClientTypes.SearchedLogStream]?
    let nextToken: Swift.String?
}

extension FilterLogEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events
        case nextToken
        case searchedLogStreams
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.FilteredLogEvent?].self, forKey: .events)
        var eventsDecoded0:[CloudWatchLogsClientTypes.FilteredLogEvent]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [CloudWatchLogsClientTypes.FilteredLogEvent]()
            for structure0 in eventsContainer {
                if let structure0 = structure0 {
                    eventsDecoded0?.append(structure0)
                }
            }
        }
        events = eventsDecoded0
        let searchedLogStreamsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.SearchedLogStream?].self, forKey: .searchedLogStreams)
        var searchedLogStreamsDecoded0:[CloudWatchLogsClientTypes.SearchedLogStream]? = nil
        if let searchedLogStreamsContainer = searchedLogStreamsContainer {
            searchedLogStreamsDecoded0 = [CloudWatchLogsClientTypes.SearchedLogStream]()
            for structure0 in searchedLogStreamsContainer {
                if let structure0 = structure0 {
                    searchedLogStreamsDecoded0?.append(structure0)
                }
            }
        }
        searchedLogStreams = searchedLogStreamsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension CloudWatchLogsClientTypes.FilteredLogEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventId
        case ingestionTime
        case logStreamName
        case message
        case timestamp
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventId = self.eventId {
            try encodeContainer.encode(eventId, forKey: .eventId)
        }
        if let ingestionTime = self.ingestionTime {
            try encodeContainer.encode(ingestionTime, forKey: .ingestionTime)
        }
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let ingestionTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ingestionTime)
        ingestionTime = ingestionTimeDecoded
        let eventIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventId)
        eventId = eventIdDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a matched event.
    public struct FilteredLogEvent: Swift.Equatable {
        /// The ID of the event.
        public var eventId: Swift.String?
        /// The time the event was ingested, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var ingestionTime: Swift.Int?
        /// The name of the log stream to which this event belongs.
        public var logStreamName: Swift.String?
        /// The data contained in the log event.
        public var message: Swift.String?
        /// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var timestamp: Swift.Int?

        public init (
            eventId: Swift.String? = nil,
            ingestionTime: Swift.Int? = nil,
            logStreamName: Swift.String? = nil,
            message: Swift.String? = nil,
            timestamp: Swift.Int? = nil
        )
        {
            self.eventId = eventId
            self.ingestionTime = ingestionTime
            self.logStreamName = logStreamName
            self.message = message
            self.timestamp = timestamp
        }
    }

}

extension GetDataProtectionPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupIdentifier
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupIdentifier = self.logGroupIdentifier {
            try encodeContainer.encode(logGroupIdentifier, forKey: .logGroupIdentifier)
        }
    }
}

extension GetDataProtectionPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDataProtectionPolicyInput: Swift.Equatable {
    /// The name or ARN of the log group that contains the data protection policy that you want to see.
    /// This member is required.
    public var logGroupIdentifier: Swift.String?

    public init (
        logGroupIdentifier: Swift.String? = nil
    )
    {
        self.logGroupIdentifier = logGroupIdentifier
    }
}

struct GetDataProtectionPolicyInputBody: Swift.Equatable {
    let logGroupIdentifier: Swift.String?
}

extension GetDataProtectionPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupIdentifier
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupIdentifier)
        logGroupIdentifier = logGroupIdentifierDecoded
    }
}

extension GetDataProtectionPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDataProtectionPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDataProtectionPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDataProtectionPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDataProtectionPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lastUpdatedTime = output.lastUpdatedTime
            self.logGroupIdentifier = output.logGroupIdentifier
            self.policyDocument = output.policyDocument
        } else {
            self.lastUpdatedTime = nil
            self.logGroupIdentifier = nil
            self.policyDocument = nil
        }
    }
}

public struct GetDataProtectionPolicyOutputResponse: Swift.Equatable {
    /// The date and time that this policy was most recently updated.
    public var lastUpdatedTime: Swift.Int?
    /// The log group name or ARN that you specified in your request.
    public var logGroupIdentifier: Swift.String?
    /// The data protection policy document for this log group.
    public var policyDocument: Swift.String?

    public init (
        lastUpdatedTime: Swift.Int? = nil,
        logGroupIdentifier: Swift.String? = nil,
        policyDocument: Swift.String? = nil
    )
    {
        self.lastUpdatedTime = lastUpdatedTime
        self.logGroupIdentifier = logGroupIdentifier
        self.policyDocument = policyDocument
    }
}

struct GetDataProtectionPolicyOutputResponseBody: Swift.Equatable {
    let logGroupIdentifier: Swift.String?
    let policyDocument: Swift.String?
    let lastUpdatedTime: Swift.Int?
}

extension GetDataProtectionPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastUpdatedTime
        case logGroupIdentifier
        case policyDocument
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupIdentifier)
        logGroupIdentifier = logGroupIdentifierDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
    }
}

extension GetLogEventsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case limit
        case logGroupIdentifier
        case logGroupName
        case logStreamName
        case nextToken
        case startFromHead
        case startTime
        case unmask
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupIdentifier = self.logGroupIdentifier {
            try encodeContainer.encode(logGroupIdentifier, forKey: .logGroupIdentifier)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let startFromHead = self.startFromHead {
            try encodeContainer.encode(startFromHead, forKey: .startFromHead)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
        if unmask != false {
            try encodeContainer.encode(unmask, forKey: .unmask)
        }
    }
}

extension GetLogEventsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLogEventsInput: Swift.Equatable {
    /// The end of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp equal to or later than this time are not included.
    public var endTime: Swift.Int?
    /// The maximum number of log events returned. If you don't specify a limit, the default is as many log events as can fit in a response size of 1 MB (up to 10,000 log events).
    public var limit: Swift.Int?
    /// Specify either the name or ARN of the log group to view events from. If the log group is in a source account and you are using a monitoring account, you must use the log group ARN. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupIdentifier: Swift.String?
    /// The name of the log group. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupName: Swift.String?
    /// The name of the log stream.
    /// This member is required.
    public var logStreamName: Swift.String?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?
    /// If the value is true, the earliest log events are returned first. If the value is false, the latest log events are returned first. The default value is false. If you are using a previous nextForwardToken value as the nextToken in this operation, you must specify true for startFromHead.
    public var startFromHead: Swift.Bool?
    /// The start of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp equal to this time or later than this time are included. Events with a timestamp earlier than this time are not included.
    public var startTime: Swift.Int?
    /// Specify true to display the log event fields with all sensitive data unmasked and visible. The default is false. To use this operation with this parameter, you must be signed into an account with the logs:Unmask permission.
    public var unmask: Swift.Bool

    public init (
        endTime: Swift.Int? = nil,
        limit: Swift.Int? = nil,
        logGroupIdentifier: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        logStreamName: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        startFromHead: Swift.Bool? = nil,
        startTime: Swift.Int? = nil,
        unmask: Swift.Bool = false
    )
    {
        self.endTime = endTime
        self.limit = limit
        self.logGroupIdentifier = logGroupIdentifier
        self.logGroupName = logGroupName
        self.logStreamName = logStreamName
        self.nextToken = nextToken
        self.startFromHead = startFromHead
        self.startTime = startTime
        self.unmask = unmask
    }
}

struct GetLogEventsInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let logGroupIdentifier: Swift.String?
    let logStreamName: Swift.String?
    let startTime: Swift.Int?
    let endTime: Swift.Int?
    let nextToken: Swift.String?
    let limit: Swift.Int?
    let startFromHead: Swift.Bool?
    let unmask: Swift.Bool
}

extension GetLogEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case limit
        case logGroupIdentifier
        case logGroupName
        case logStreamName
        case nextToken
        case startFromHead
        case startTime
        case unmask
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logGroupIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupIdentifier)
        logGroupIdentifier = logGroupIdentifierDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endTime)
        endTime = endTimeDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
        let startFromHeadDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .startFromHead)
        startFromHead = startFromHeadDecoded
        let unmaskDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .unmask) ?? false
        unmask = unmaskDecoded
    }
}

extension GetLogEventsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLogEventsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetLogEventsOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLogEventsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetLogEventsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.events = output.events
            self.nextBackwardToken = output.nextBackwardToken
            self.nextForwardToken = output.nextForwardToken
        } else {
            self.events = nil
            self.nextBackwardToken = nil
            self.nextForwardToken = nil
        }
    }
}

public struct GetLogEventsOutputResponse: Swift.Equatable {
    /// The events.
    public var events: [CloudWatchLogsClientTypes.OutputLogEvent]?
    /// The token for the next set of items in the backward direction. The token expires after 24 hours. This token is not null. If you have reached the end of the stream, it returns the same token you passed in.
    public var nextBackwardToken: Swift.String?
    /// The token for the next set of items in the forward direction. The token expires after 24 hours. If you have reached the end of the stream, it returns the same token you passed in.
    public var nextForwardToken: Swift.String?

    public init (
        events: [CloudWatchLogsClientTypes.OutputLogEvent]? = nil,
        nextBackwardToken: Swift.String? = nil,
        nextForwardToken: Swift.String? = nil
    )
    {
        self.events = events
        self.nextBackwardToken = nextBackwardToken
        self.nextForwardToken = nextForwardToken
    }
}

struct GetLogEventsOutputResponseBody: Swift.Equatable {
    let events: [CloudWatchLogsClientTypes.OutputLogEvent]?
    let nextForwardToken: Swift.String?
    let nextBackwardToken: Swift.String?
}

extension GetLogEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case events
        case nextBackwardToken
        case nextForwardToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.OutputLogEvent?].self, forKey: .events)
        var eventsDecoded0:[CloudWatchLogsClientTypes.OutputLogEvent]? = nil
        if let eventsContainer = eventsContainer {
            eventsDecoded0 = [CloudWatchLogsClientTypes.OutputLogEvent]()
            for structure0 in eventsContainer {
                if let structure0 = structure0 {
                    eventsDecoded0?.append(structure0)
                }
            }
        }
        events = eventsDecoded0
        let nextForwardTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextForwardToken)
        nextForwardToken = nextForwardTokenDecoded
        let nextBackwardTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextBackwardToken)
        nextBackwardToken = nextBackwardTokenDecoded
    }
}

extension GetLogGroupFieldsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupIdentifier
        case logGroupName
        case time
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupIdentifier = self.logGroupIdentifier {
            try encodeContainer.encode(logGroupIdentifier, forKey: .logGroupIdentifier)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let time = self.time {
            try encodeContainer.encode(time, forKey: .time)
        }
    }
}

extension GetLogGroupFieldsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLogGroupFieldsInput: Swift.Equatable {
    /// Specify either the name or ARN of the log group to view. If the log group is in a source account and you are using a monitoring account, you must specify the ARN. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupIdentifier: Swift.String?
    /// The name of the log group to search. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupName: Swift.String?
    /// The time to set as the center of the query. If you specify time, the 15 minutes before this time are queries. If you omit time, the 8 minutes before and 8 minutes after this time are searched. The time value is specified as epoch time, which is the number of seconds since January 1, 1970, 00:00:00 UTC.
    public var time: Swift.Int?

    public init (
        logGroupIdentifier: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        time: Swift.Int? = nil
    )
    {
        self.logGroupIdentifier = logGroupIdentifier
        self.logGroupName = logGroupName
        self.time = time
    }
}

struct GetLogGroupFieldsInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let time: Swift.Int?
    let logGroupIdentifier: Swift.String?
}

extension GetLogGroupFieldsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupIdentifier
        case logGroupName
        case time
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let timeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .time)
        time = timeDecoded
        let logGroupIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupIdentifier)
        logGroupIdentifier = logGroupIdentifierDecoded
    }
}

extension GetLogGroupFieldsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLogGroupFieldsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetLogGroupFieldsOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLogGroupFieldsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetLogGroupFieldsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.logGroupFields = output.logGroupFields
        } else {
            self.logGroupFields = nil
        }
    }
}

public struct GetLogGroupFieldsOutputResponse: Swift.Equatable {
    /// The array of fields found in the query. Each object in the array contains the name of the field, along with the percentage of time it appeared in the log events that were queried.
    public var logGroupFields: [CloudWatchLogsClientTypes.LogGroupField]?

    public init (
        logGroupFields: [CloudWatchLogsClientTypes.LogGroupField]? = nil
    )
    {
        self.logGroupFields = logGroupFields
    }
}

struct GetLogGroupFieldsOutputResponseBody: Swift.Equatable {
    let logGroupFields: [CloudWatchLogsClientTypes.LogGroupField]?
}

extension GetLogGroupFieldsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupFields
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupFieldsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.LogGroupField?].self, forKey: .logGroupFields)
        var logGroupFieldsDecoded0:[CloudWatchLogsClientTypes.LogGroupField]? = nil
        if let logGroupFieldsContainer = logGroupFieldsContainer {
            logGroupFieldsDecoded0 = [CloudWatchLogsClientTypes.LogGroupField]()
            for structure0 in logGroupFieldsContainer {
                if let structure0 = structure0 {
                    logGroupFieldsDecoded0?.append(structure0)
                }
            }
        }
        logGroupFields = logGroupFieldsDecoded0
    }
}

extension GetLogRecordInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logRecordPointer
        case unmask
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logRecordPointer = self.logRecordPointer {
            try encodeContainer.encode(logRecordPointer, forKey: .logRecordPointer)
        }
        if unmask != false {
            try encodeContainer.encode(unmask, forKey: .unmask)
        }
    }
}

extension GetLogRecordInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetLogRecordInput: Swift.Equatable {
    /// The pointer corresponding to the log event record you want to retrieve. You get this from the response of a GetQueryResults operation. In that response, the value of the @ptr field for a log event is the value to use as logRecordPointer to retrieve that complete log event record.
    /// This member is required.
    public var logRecordPointer: Swift.String?
    /// Specify true to display the log event fields with all sensitive data unmasked and visible. The default is false. To use this operation with this parameter, you must be signed into an account with the logs:Unmask permission.
    public var unmask: Swift.Bool

    public init (
        logRecordPointer: Swift.String? = nil,
        unmask: Swift.Bool = false
    )
    {
        self.logRecordPointer = logRecordPointer
        self.unmask = unmask
    }
}

struct GetLogRecordInputBody: Swift.Equatable {
    let logRecordPointer: Swift.String?
    let unmask: Swift.Bool
}

extension GetLogRecordInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logRecordPointer
        case unmask
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logRecordPointerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logRecordPointer)
        logRecordPointer = logRecordPointerDecoded
        let unmaskDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .unmask) ?? false
        unmask = unmaskDecoded
    }
}

extension GetLogRecordOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLogRecordOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetLogRecordOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLogRecordOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetLogRecordOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.logRecord = output.logRecord
        } else {
            self.logRecord = nil
        }
    }
}

public struct GetLogRecordOutputResponse: Swift.Equatable {
    /// The requested log event, as a JSON string.
    public var logRecord: [Swift.String:Swift.String]?

    public init (
        logRecord: [Swift.String:Swift.String]? = nil
    )
    {
        self.logRecord = logRecord
    }
}

struct GetLogRecordOutputResponseBody: Swift.Equatable {
    let logRecord: [Swift.String:Swift.String]?
}

extension GetLogRecordOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logRecord
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logRecordContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .logRecord)
        var logRecordDecoded0: [Swift.String:Swift.String]? = nil
        if let logRecordContainer = logRecordContainer {
            logRecordDecoded0 = [Swift.String:Swift.String]()
            for (key0, value0) in logRecordContainer {
                if let value0 = value0 {
                    logRecordDecoded0?[key0] = value0
                }
            }
        }
        logRecord = logRecordDecoded0
    }
}

extension GetQueryResultsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queryId = self.queryId {
            try encodeContainer.encode(queryId, forKey: .queryId)
        }
    }
}

extension GetQueryResultsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetQueryResultsInput: Swift.Equatable {
    /// The ID number of the query.
    /// This member is required.
    public var queryId: Swift.String?

    public init (
        queryId: Swift.String? = nil
    )
    {
        self.queryId = queryId
    }
}

struct GetQueryResultsInputBody: Swift.Equatable {
    let queryId: Swift.String?
}

extension GetQueryResultsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryId)
        queryId = queryIdDecoded
    }
}

extension GetQueryResultsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetQueryResultsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetQueryResultsOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetQueryResultsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetQueryResultsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.results = output.results
            self.statistics = output.statistics
            self.status = output.status
        } else {
            self.results = nil
            self.statistics = nil
            self.status = nil
        }
    }
}

public struct GetQueryResultsOutputResponse: Swift.Equatable {
    /// The log events that matched the query criteria during the most recent time it ran. The results value is an array of arrays. Each log event is one object in the top-level array. Each of these log event objects is an array of field/value pairs.
    public var results: [[CloudWatchLogsClientTypes.ResultField]]?
    /// Includes the number of log events scanned by the query, the number of log events that matched the query criteria, and the total number of bytes in the log events that were scanned. These values reflect the full raw results of the query.
    public var statistics: CloudWatchLogsClientTypes.QueryStatistics?
    /// The status of the most recent running of the query. Possible values are Cancelled, Complete, Failed, Running, Scheduled, Timeout, and Unknown. Queries time out after 15 minutes of runtime. To avoid having your queries time out, reduce the time range being searched or partition your query into a number of queries.
    public var status: CloudWatchLogsClientTypes.QueryStatus?

    public init (
        results: [[CloudWatchLogsClientTypes.ResultField]]? = nil,
        statistics: CloudWatchLogsClientTypes.QueryStatistics? = nil,
        status: CloudWatchLogsClientTypes.QueryStatus? = nil
    )
    {
        self.results = results
        self.statistics = statistics
        self.status = status
    }
}

struct GetQueryResultsOutputResponseBody: Swift.Equatable {
    let results: [[CloudWatchLogsClientTypes.ResultField]]?
    let statistics: CloudWatchLogsClientTypes.QueryStatistics?
    let status: CloudWatchLogsClientTypes.QueryStatus?
}

extension GetQueryResultsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case results
        case statistics
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultsContainer = try containerValues.decodeIfPresent([[CloudWatchLogsClientTypes.ResultField?]?].self, forKey: .results)
        var resultsDecoded0:[[CloudWatchLogsClientTypes.ResultField]]? = nil
        if let resultsContainer = resultsContainer {
            resultsDecoded0 = [[CloudWatchLogsClientTypes.ResultField]]()
            for list0 in resultsContainer {
                var list0Decoded0: [CloudWatchLogsClientTypes.ResultField]? = nil
                if let list0 = list0 {
                    list0Decoded0 = [CloudWatchLogsClientTypes.ResultField]()
                    for structure1 in list0 {
                        if let structure1 = structure1 {
                            list0Decoded0?.append(structure1)
                        }
                    }
                }
                if let list0Decoded0 = list0Decoded0 {
                    resultsDecoded0?.append(list0Decoded0)
                }
            }
        }
        results = resultsDecoded0
        let statisticsDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.QueryStatistics.self, forKey: .statistics)
        statistics = statisticsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.QueryStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension CloudWatchLogsClientTypes.InputLogEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case timestamp
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a log event, which is a record of activity that was recorded by the application or resource being monitored.
    public struct InputLogEvent: Swift.Equatable {
        /// The raw event message.
        /// This member is required.
        public var message: Swift.String?
        /// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        /// This member is required.
        public var timestamp: Swift.Int?

        public init (
            message: Swift.String? = nil,
            timestamp: Swift.Int? = nil
        )
        {
            self.message = message
            self.timestamp = timestamp
        }
    }

}

extension InvalidOperationException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidOperationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The operation is not valid on the specified resource.
public struct InvalidOperationException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidOperationExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidOperationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidParameterException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidParameterExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A parameter is specified incorrectly.
public struct InvalidParameterException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidParameterExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidParameterExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidSequenceTokenException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidSequenceTokenExceptionBody = try responseDecoder.decode(responseBody: data)
            self.expectedSequenceToken = output.expectedSequenceToken
            self.message = output.message
        } else {
            self.expectedSequenceToken = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The sequence token is not valid. You can get the correct sequence token in the expectedSequenceToken field in the InvalidSequenceTokenException message. PutLogEvents actions are now always accepted and never return InvalidSequenceTokenException regardless of receiving an invalid sequence token.
public struct InvalidSequenceTokenException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var expectedSequenceToken: Swift.String?
    public var message: Swift.String?

    public init (
        expectedSequenceToken: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.expectedSequenceToken = expectedSequenceToken
        self.message = message
    }
}

struct InvalidSequenceTokenExceptionBody: Swift.Equatable {
    let expectedSequenceToken: Swift.String?
    let message: Swift.String?
}

extension InvalidSequenceTokenExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expectedSequenceToken
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let expectedSequenceTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expectedSequenceToken)
        expectedSequenceToken = expectedSequenceTokenDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// You have reached the maximum number of resources that can be created.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The ARN of the resource that you want to view tags for. The ARN format of a log group is arn:aws:logs:Region:account-id:log-group:log-group-name  The ARN format of a destination is arn:aws:logs:Region:account-id:destination:destination-name  For more information about ARN format, see [CloudWatch Logs resources and operations](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html).
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// The list of tags associated with the requested resource.>
    public var tags: [Swift.String:Swift.String]?

    public init (
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ListTagsLogGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
    }
}

extension ListTagsLogGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

@available(*, deprecated, message: "Please use the generic tagging API model ListTagsForResourceRequest and ListTagsForResourceResponse")
public struct ListTagsLogGroupInput: Swift.Equatable {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?

    public init (
        logGroupName: Swift.String? = nil
    )
    {
        self.logGroupName = logGroupName
    }
}

struct ListTagsLogGroupInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
}

extension ListTagsLogGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension ListTagsLogGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsLogGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum ListTagsLogGroupOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsLogGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ListTagsLogGroupOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

@available(*, deprecated, message: "Please use the generic tagging API model ListTagsForResourceRequest and ListTagsForResourceResponse")
public struct ListTagsLogGroupOutputResponse: Swift.Equatable {
    /// The tags for the log group.
    public var tags: [Swift.String:Swift.String]?

    public init (
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsLogGroupOutputResponseBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension ListTagsLogGroupOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CloudWatchLogsClientTypes.LogGroup: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case creationTime
        case dataProtectionStatus
        case kmsKeyId
        case logGroupName
        case metricFilterCount
        case retentionInDays
        case storedBytes
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let dataProtectionStatus = self.dataProtectionStatus {
            try encodeContainer.encode(dataProtectionStatus.rawValue, forKey: .dataProtectionStatus)
        }
        if let kmsKeyId = self.kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let metricFilterCount = self.metricFilterCount {
            try encodeContainer.encode(metricFilterCount, forKey: .metricFilterCount)
        }
        if let retentionInDays = self.retentionInDays {
            try encodeContainer.encode(retentionInDays, forKey: .retentionInDays)
        }
        if let storedBytes = self.storedBytes {
            try encodeContainer.encode(storedBytes, forKey: .storedBytes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let retentionInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retentionInDays)
        retentionInDays = retentionInDaysDecoded
        let metricFilterCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .metricFilterCount)
        metricFilterCount = metricFilterCountDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let storedBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storedBytes)
        storedBytes = storedBytesDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let dataProtectionStatusDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.DataProtectionStatus.self, forKey: .dataProtectionStatus)
        dataProtectionStatus = dataProtectionStatusDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a log group.
    public struct LogGroup: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the log group.
        public var arn: Swift.String?
        /// The creation time of the log group, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var creationTime: Swift.Int?
        /// Displays whether this log group has a protection policy, or whether it had one in the past. For more information, see [PutDataProtectionPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDataProtectionPolicy.html).
        public var dataProtectionStatus: CloudWatchLogsClientTypes.DataProtectionStatus?
        /// The Amazon Resource Name (ARN) of the KMS key to use when encrypting log data.
        public var kmsKeyId: Swift.String?
        /// The name of the log group.
        public var logGroupName: Swift.String?
        /// The number of metric filters.
        public var metricFilterCount: Swift.Int?
        /// The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 2192, 2557, 2922, 3288, and 3653. To set a log group so that its log events do not expire, use [DeleteRetentionPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html).
        public var retentionInDays: Swift.Int?
        /// The number of bytes stored.
        public var storedBytes: Swift.Int?

        public init (
            arn: Swift.String? = nil,
            creationTime: Swift.Int? = nil,
            dataProtectionStatus: CloudWatchLogsClientTypes.DataProtectionStatus? = nil,
            kmsKeyId: Swift.String? = nil,
            logGroupName: Swift.String? = nil,
            metricFilterCount: Swift.Int? = nil,
            retentionInDays: Swift.Int? = nil,
            storedBytes: Swift.Int? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.dataProtectionStatus = dataProtectionStatus
            self.kmsKeyId = kmsKeyId
            self.logGroupName = logGroupName
            self.metricFilterCount = metricFilterCount
            self.retentionInDays = retentionInDays
            self.storedBytes = storedBytes
        }
    }

}

extension CloudWatchLogsClientTypes.LogGroupField: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case percent
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if percent != 0 {
            try encodeContainer.encode(percent, forKey: .percent)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let percentDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .percent) ?? 0
        percent = percentDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// The fields contained in log events found by a GetLogGroupFields operation, along with the percentage of queried log events in which each field appears.
    public struct LogGroupField: Swift.Equatable {
        /// The name of a log field.
        public var name: Swift.String?
        /// The percentage of log events queried that contained the field.
        public var percent: Swift.Int

        public init (
            name: Swift.String? = nil,
            percent: Swift.Int = 0
        )
        {
            self.name = name
            self.percent = percent
        }
    }

}

extension CloudWatchLogsClientTypes.LogStream: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn
        case creationTime
        case firstEventTimestamp
        case lastEventTimestamp
        case lastIngestionTime
        case logStreamName
        case storedBytes
        case uploadSequenceToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let firstEventTimestamp = self.firstEventTimestamp {
            try encodeContainer.encode(firstEventTimestamp, forKey: .firstEventTimestamp)
        }
        if let lastEventTimestamp = self.lastEventTimestamp {
            try encodeContainer.encode(lastEventTimestamp, forKey: .lastEventTimestamp)
        }
        if let lastIngestionTime = self.lastIngestionTime {
            try encodeContainer.encode(lastIngestionTime, forKey: .lastIngestionTime)
        }
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let storedBytes = self.storedBytes {
            try encodeContainer.encode(storedBytes, forKey: .storedBytes)
        }
        if let uploadSequenceToken = self.uploadSequenceToken {
            try encodeContainer.encode(uploadSequenceToken, forKey: .uploadSequenceToken)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let firstEventTimestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .firstEventTimestamp)
        firstEventTimestamp = firstEventTimestampDecoded
        let lastEventTimestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastEventTimestamp)
        lastEventTimestamp = lastEventTimestampDecoded
        let lastIngestionTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastIngestionTime)
        lastIngestionTime = lastIngestionTimeDecoded
        let uploadSequenceTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .uploadSequenceToken)
        uploadSequenceToken = uploadSequenceTokenDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let storedBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .storedBytes)
        storedBytes = storedBytesDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a log stream, which is a sequence of log events from a single emitter of logs.
    public struct LogStream: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the log stream.
        public var arn: Swift.String?
        /// The creation time of the stream, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var creationTime: Swift.Int?
        /// The time of the first event, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var firstEventTimestamp: Swift.Int?
        /// The time of the most recent log event in the log stream in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. The lastEventTime value updates on an eventual consistency basis. It typically updates in less than an hour from ingestion, but in rare situations might take longer.
        public var lastEventTimestamp: Swift.Int?
        /// The ingestion time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC The lastIngestionTime value updates on an eventual consistency basis. It typically updates in less than an hour after ingestion, but in rare situations might take longer.
        public var lastIngestionTime: Swift.Int?
        /// The name of the log stream.
        public var logStreamName: Swift.String?
        /// The number of bytes stored. Important: As of June 17, 2019, this parameter is no longer supported for log streams, and is always reported as zero. This change applies only to log streams. The storedBytes parameter for log groups is not affected.
        @available(*, deprecated, message: "Starting on June 17, 2019, this parameter will be deprecated for log streams, and will be reported as zero. This change applies only to log streams. The storedBytes parameter for log groups is not affected.")
        public var storedBytes: Swift.Int?
        /// The sequence token. The sequence token is now ignored in PutLogEvents actions. PutLogEvents actions are always accepted regardless of receiving an invalid sequence token. You don't need to obtain uploadSequenceToken to use a PutLogEvents action.
        public var uploadSequenceToken: Swift.String?

        public init (
            arn: Swift.String? = nil,
            creationTime: Swift.Int? = nil,
            firstEventTimestamp: Swift.Int? = nil,
            lastEventTimestamp: Swift.Int? = nil,
            lastIngestionTime: Swift.Int? = nil,
            logStreamName: Swift.String? = nil,
            storedBytes: Swift.Int? = nil,
            uploadSequenceToken: Swift.String? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.firstEventTimestamp = firstEventTimestamp
            self.lastEventTimestamp = lastEventTimestamp
            self.lastIngestionTime = lastIngestionTime
            self.logStreamName = logStreamName
            self.storedBytes = storedBytes
            self.uploadSequenceToken = uploadSequenceToken
        }
    }

}

extension MalformedQueryException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: MalformedQueryExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.queryCompileError = output.queryCompileError
        } else {
            self.message = nil
            self.queryCompileError = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The query string is not valid. Details about this error are displayed in a QueryCompileError object. For more information, see [QueryCompileError](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_QueryCompileError.html). For more information about valid query syntax, see [CloudWatch Logs Insights Query Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html).
public struct MalformedQueryException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    /// Reserved.
    public var queryCompileError: CloudWatchLogsClientTypes.QueryCompileError?

    public init (
        message: Swift.String? = nil,
        queryCompileError: CloudWatchLogsClientTypes.QueryCompileError? = nil
    )
    {
        self.message = message
        self.queryCompileError = queryCompileError
    }
}

struct MalformedQueryExceptionBody: Swift.Equatable {
    let queryCompileError: CloudWatchLogsClientTypes.QueryCompileError?
    let message: Swift.String?
}

extension MalformedQueryExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case queryCompileError
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryCompileErrorDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.QueryCompileError.self, forKey: .queryCompileError)
        queryCompileError = queryCompileErrorDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchLogsClientTypes.MetricFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime
        case filterName
        case filterPattern
        case logGroupName
        case metricTransformations
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let filterName = self.filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let filterPattern = self.filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let metricTransformations = metricTransformations {
            var metricTransformationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricTransformations)
            for metrictransformation0 in metricTransformations {
                try metricTransformationsContainer.encode(metrictransformation0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterName)
        filterName = filterNameDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let metricTransformationsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.MetricTransformation?].self, forKey: .metricTransformations)
        var metricTransformationsDecoded0:[CloudWatchLogsClientTypes.MetricTransformation]? = nil
        if let metricTransformationsContainer = metricTransformationsContainer {
            metricTransformationsDecoded0 = [CloudWatchLogsClientTypes.MetricTransformation]()
            for structure0 in metricTransformationsContainer {
                if let structure0 = structure0 {
                    metricTransformationsDecoded0?.append(structure0)
                }
            }
        }
        metricTransformations = metricTransformationsDecoded0
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Metric filters express how CloudWatch Logs would extract metric observations from ingested log events and transform them into metric data in a CloudWatch metric.
    public struct MetricFilter: Swift.Equatable {
        /// The creation time of the metric filter, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var creationTime: Swift.Int?
        /// The name of the metric filter.
        public var filterName: Swift.String?
        /// A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.
        public var filterPattern: Swift.String?
        /// The name of the log group.
        public var logGroupName: Swift.String?
        /// The metric transformations.
        public var metricTransformations: [CloudWatchLogsClientTypes.MetricTransformation]?

        public init (
            creationTime: Swift.Int? = nil,
            filterName: Swift.String? = nil,
            filterPattern: Swift.String? = nil,
            logGroupName: Swift.String? = nil,
            metricTransformations: [CloudWatchLogsClientTypes.MetricTransformation]? = nil
        )
        {
            self.creationTime = creationTime
            self.filterName = filterName
            self.filterPattern = filterPattern
            self.logGroupName = logGroupName
            self.metricTransformations = metricTransformations
        }
    }

}

extension CloudWatchLogsClientTypes.MetricFilterMatchRecord: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eventMessage
        case eventNumber
        case extractedValues
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eventMessage = self.eventMessage {
            try encodeContainer.encode(eventMessage, forKey: .eventMessage)
        }
        if eventNumber != 0 {
            try encodeContainer.encode(eventNumber, forKey: .eventNumber)
        }
        if let extractedValues = extractedValues {
            var extractedValuesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .extractedValues)
            for (dictKey0, extractedValues0) in extractedValues {
                try extractedValuesContainer.encode(extractedValues0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventNumberDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .eventNumber) ?? 0
        eventNumber = eventNumberDecoded
        let eventMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eventMessage)
        eventMessage = eventMessageDecoded
        let extractedValuesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .extractedValues)
        var extractedValuesDecoded0: [Swift.String:Swift.String]? = nil
        if let extractedValuesContainer = extractedValuesContainer {
            extractedValuesDecoded0 = [Swift.String:Swift.String]()
            for (key0, value0) in extractedValuesContainer {
                if let value0 = value0 {
                    extractedValuesDecoded0?[key0] = value0
                }
            }
        }
        extractedValues = extractedValuesDecoded0
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a matched event.
    public struct MetricFilterMatchRecord: Swift.Equatable {
        /// The raw event data.
        public var eventMessage: Swift.String?
        /// The event number.
        public var eventNumber: Swift.Int
        /// The values extracted from the event data by the filter.
        public var extractedValues: [Swift.String:Swift.String]?

        public init (
            eventMessage: Swift.String? = nil,
            eventNumber: Swift.Int = 0,
            extractedValues: [Swift.String:Swift.String]? = nil
        )
        {
            self.eventMessage = eventMessage
            self.eventNumber = eventNumber
            self.extractedValues = extractedValues
        }
    }

}

extension CloudWatchLogsClientTypes.MetricTransformation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultValue
        case dimensions
        case metricName
        case metricNamespace
        case metricValue
        case unit
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultValue = self.defaultValue {
            try encodeContainer.encode(defaultValue, forKey: .defaultValue)
        }
        if let dimensions = dimensions {
            var dimensionsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .dimensions)
            for (dictKey0, dimensions0) in dimensions {
                try dimensionsContainer.encode(dimensions0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let metricName = self.metricName {
            try encodeContainer.encode(metricName, forKey: .metricName)
        }
        if let metricNamespace = self.metricNamespace {
            try encodeContainer.encode(metricNamespace, forKey: .metricNamespace)
        }
        if let metricValue = self.metricValue {
            try encodeContainer.encode(metricValue, forKey: .metricValue)
        }
        if let unit = self.unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricName)
        metricName = metricNameDecoded
        let metricNamespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricNamespace)
        metricNamespace = metricNamespaceDecoded
        let metricValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metricValue)
        metricValue = metricValueDecoded
        let defaultValueDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .defaultValue)
        defaultValue = defaultValueDecoded
        let dimensionsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .dimensions)
        var dimensionsDecoded0: [Swift.String:Swift.String]? = nil
        if let dimensionsContainer = dimensionsContainer {
            dimensionsDecoded0 = [Swift.String:Swift.String]()
            for (key0, dimensionsvalue0) in dimensionsContainer {
                if let dimensionsvalue0 = dimensionsvalue0 {
                    dimensionsDecoded0?[key0] = dimensionsvalue0
                }
            }
        }
        dimensions = dimensionsDecoded0
        let unitDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.StandardUnit.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Indicates how to transform ingested log events to metric data in a CloudWatch metric.
    public struct MetricTransformation: Swift.Equatable {
        /// (Optional) The value to emit when a filter pattern does not match a log event. This value can be null.
        public var defaultValue: Swift.Double?
        /// The fields to use as dimensions for the metric. One metric filter can include as many as three dimensions. Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as IPAddress or requestID as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric. CloudWatch Logs disables a metric filter if it generates 1000 different name/value pairs for your specified dimensions within a certain amount of time. This helps to prevent accidental high charges. You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [ Creating a Billing Alarm to Monitor Your Estimated Amazon Web Services Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
        public var dimensions: [Swift.String:Swift.String]?
        /// The name of the CloudWatch metric.
        /// This member is required.
        public var metricName: Swift.String?
        /// A custom namespace to contain your metric in CloudWatch. Use namespaces to group together metrics that are similar. For more information, see [Namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace).
        /// This member is required.
        public var metricNamespace: Swift.String?
        /// The value to publish to the CloudWatch metric when a filter pattern matches a log event.
        /// This member is required.
        public var metricValue: Swift.String?
        /// The unit to assign to the metric. If you omit this, the unit is set as None.
        public var unit: CloudWatchLogsClientTypes.StandardUnit?

        public init (
            defaultValue: Swift.Double? = nil,
            dimensions: [Swift.String:Swift.String]? = nil,
            metricName: Swift.String? = nil,
            metricNamespace: Swift.String? = nil,
            metricValue: Swift.String? = nil,
            unit: CloudWatchLogsClientTypes.StandardUnit? = nil
        )
        {
            self.defaultValue = defaultValue
            self.dimensions = dimensions
            self.metricName = metricName
            self.metricNamespace = metricNamespace
            self.metricValue = metricValue
            self.unit = unit
        }
    }

}

extension OperationAbortedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: OperationAbortedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Multiple concurrent requests to update the same resource were in conflict.
public struct OperationAbortedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OperationAbortedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension OperationAbortedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchLogsClientTypes {
    public enum OrderBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case lasteventtime
        case logstreamname
        case sdkUnknown(Swift.String)

        public static var allCases: [OrderBy] {
            return [
                .lasteventtime,
                .logstreamname,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .lasteventtime: return "LastEventTime"
            case .logstreamname: return "LogStreamName"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OrderBy(rawValue: rawValue) ?? OrderBy.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchLogsClientTypes.OutputLogEvent: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ingestionTime
        case message
        case timestamp
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ingestionTime = self.ingestionTime {
            try encodeContainer.encode(ingestionTime, forKey: .ingestionTime)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encode(timestamp, forKey: .timestamp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .timestamp)
        timestamp = timestampDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let ingestionTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .ingestionTime)
        ingestionTime = ingestionTimeDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a log event.
    public struct OutputLogEvent: Swift.Equatable {
        /// The time the event was ingested, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var ingestionTime: Swift.Int?
        /// The data contained in the log event.
        public var message: Swift.String?
        /// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var timestamp: Swift.Int?

        public init (
            ingestionTime: Swift.Int? = nil,
            message: Swift.String? = nil,
            timestamp: Swift.Int? = nil
        )
        {
            self.ingestionTime = ingestionTime
            self.message = message
            self.timestamp = timestamp
        }
    }

}

extension PutDataProtectionPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupIdentifier
        case policyDocument
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupIdentifier = self.logGroupIdentifier {
            try encodeContainer.encode(logGroupIdentifier, forKey: .logGroupIdentifier)
        }
        if let policyDocument = self.policyDocument {
            try encodeContainer.encode(policyDocument, forKey: .policyDocument)
        }
    }
}

extension PutDataProtectionPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutDataProtectionPolicyInput: Swift.Equatable {
    /// Specify either the log group name or log group ARN.
    /// This member is required.
    public var logGroupIdentifier: Swift.String?
    /// Specify the data protection policy, in JSON. This policy must include two JSON blocks:
    ///
    /// * The first block must include both a DataIdentifer array and an Operation property with an Audit action. The DataIdentifer array lists the types of sensitive data that you want to mask. For more information about the available options, see [Types of data that you can mask](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data-types.html). The Operation property with an Audit action is required to find the sensitive data terms. This Audit action must contain a FindingsDestination object. You can optionally use that FindingsDestination object to list one or more destinations to send audit findings to. If you specify destinations such as log groups, Kinesis Data Firehose streams, and S3 buckets, they must already exist.
    ///
    /// * The second block must include both a DataIdentifer array and an Operation property with an Deidentify action. The DataIdentifer array must exactly match the DataIdentifer array in the first block of the policy. The Operation property with the Deidentify action is what actually masks the data, and it must contain the  "MaskConfig": {} object. The  "MaskConfig": {} object must be empty.
    ///
    ///
    /// For an example data protection policy, see the Examples section on this page. The contents of two DataIdentifer arrays must match exactly.
    /// This member is required.
    public var policyDocument: Swift.String?

    public init (
        logGroupIdentifier: Swift.String? = nil,
        policyDocument: Swift.String? = nil
    )
    {
        self.logGroupIdentifier = logGroupIdentifier
        self.policyDocument = policyDocument
    }
}

struct PutDataProtectionPolicyInputBody: Swift.Equatable {
    let logGroupIdentifier: Swift.String?
    let policyDocument: Swift.String?
}

extension PutDataProtectionPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupIdentifier
        case policyDocument
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupIdentifier)
        logGroupIdentifier = logGroupIdentifierDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
    }
}

extension PutDataProtectionPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutDataProtectionPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutDataProtectionPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutDataProtectionPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutDataProtectionPolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lastUpdatedTime = output.lastUpdatedTime
            self.logGroupIdentifier = output.logGroupIdentifier
            self.policyDocument = output.policyDocument
        } else {
            self.lastUpdatedTime = nil
            self.logGroupIdentifier = nil
            self.policyDocument = nil
        }
    }
}

public struct PutDataProtectionPolicyOutputResponse: Swift.Equatable {
    /// The date and time that this policy was most recently updated.
    public var lastUpdatedTime: Swift.Int?
    /// The log group name or ARN that you specified in your request.
    public var logGroupIdentifier: Swift.String?
    /// The data protection policy used for this log group.
    public var policyDocument: Swift.String?

    public init (
        lastUpdatedTime: Swift.Int? = nil,
        logGroupIdentifier: Swift.String? = nil,
        policyDocument: Swift.String? = nil
    )
    {
        self.lastUpdatedTime = lastUpdatedTime
        self.logGroupIdentifier = logGroupIdentifier
        self.policyDocument = policyDocument
    }
}

struct PutDataProtectionPolicyOutputResponseBody: Swift.Equatable {
    let logGroupIdentifier: Swift.String?
    let policyDocument: Swift.String?
    let lastUpdatedTime: Swift.Int?
}

extension PutDataProtectionPolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastUpdatedTime
        case logGroupIdentifier
        case policyDocument
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupIdentifier)
        logGroupIdentifier = logGroupIdentifierDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
    }
}

extension PutDestinationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationName
        case roleArn
        case tags
        case targetArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationName = self.destinationName {
            try encodeContainer.encode(destinationName, forKey: .destinationName)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let targetArn = self.targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
    }
}

extension PutDestinationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutDestinationInput: Swift.Equatable {
    /// A name for the destination.
    /// This member is required.
    public var destinationName: Swift.String?
    /// The ARN of an IAM role that grants CloudWatch Logs permissions to call the Amazon Kinesis PutRecord operation on the destination stream.
    /// This member is required.
    public var roleArn: Swift.String?
    /// An optional list of key-value pairs to associate with the resource. For more information about tagging, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html)
    public var tags: [Swift.String:Swift.String]?
    /// The ARN of an Amazon Kinesis stream to which to deliver matching log events.
    /// This member is required.
    public var targetArn: Swift.String?

    public init (
        destinationName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        targetArn: Swift.String? = nil
    )
    {
        self.destinationName = destinationName
        self.roleArn = roleArn
        self.tags = tags
        self.targetArn = targetArn
    }
}

struct PutDestinationInputBody: Swift.Equatable {
    let destinationName: Swift.String?
    let targetArn: Swift.String?
    let roleArn: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension PutDestinationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationName
        case roleArn
        case tags
        case targetArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationName)
        destinationName = destinationNameDecoded
        let targetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension PutDestinationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutDestinationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutDestinationOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutDestinationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutDestinationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.destination = output.destination
        } else {
            self.destination = nil
        }
    }
}

public struct PutDestinationOutputResponse: Swift.Equatable {
    /// The destination.
    public var destination: CloudWatchLogsClientTypes.Destination?

    public init (
        destination: CloudWatchLogsClientTypes.Destination? = nil
    )
    {
        self.destination = destination
    }
}

struct PutDestinationOutputResponseBody: Swift.Equatable {
    let destination: CloudWatchLogsClientTypes.Destination?
}

extension PutDestinationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.Destination.self, forKey: .destination)
        destination = destinationDecoded
    }
}

extension PutDestinationPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicy
        case destinationName
        case forceUpdate
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicy = self.accessPolicy {
            try encodeContainer.encode(accessPolicy, forKey: .accessPolicy)
        }
        if let destinationName = self.destinationName {
            try encodeContainer.encode(destinationName, forKey: .destinationName)
        }
        if let forceUpdate = self.forceUpdate {
            try encodeContainer.encode(forceUpdate, forKey: .forceUpdate)
        }
    }
}

extension PutDestinationPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutDestinationPolicyInput: Swift.Equatable {
    /// An IAM policy document that authorizes cross-account users to deliver their log events to the associated destination. This can be up to 5120 bytes.
    /// This member is required.
    public var accessPolicy: Swift.String?
    /// A name for an existing destination.
    /// This member is required.
    public var destinationName: Swift.String?
    /// Specify true if you are updating an existing destination policy to grant permission to an organization ID instead of granting permission to individual AWS accounts. Before you update a destination policy this way, you must first update the subscription filters in the accounts that send logs to this destination. If you do not, the subscription filters might stop working. By specifying true for forceUpdate, you are affirming that you have already updated the subscription filters. For more information, see [ Updating an existing cross-account subscription](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Cross-Account-Log_Subscription-Update.html) If you omit this parameter, the default of false is used.
    public var forceUpdate: Swift.Bool?

    public init (
        accessPolicy: Swift.String? = nil,
        destinationName: Swift.String? = nil,
        forceUpdate: Swift.Bool? = nil
    )
    {
        self.accessPolicy = accessPolicy
        self.destinationName = destinationName
        self.forceUpdate = forceUpdate
    }
}

struct PutDestinationPolicyInputBody: Swift.Equatable {
    let destinationName: Swift.String?
    let accessPolicy: Swift.String?
    let forceUpdate: Swift.Bool?
}

extension PutDestinationPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicy
        case destinationName
        case forceUpdate
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationName)
        destinationName = destinationNameDecoded
        let accessPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPolicy)
        accessPolicy = accessPolicyDecoded
        let forceUpdateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .forceUpdate)
        forceUpdate = forceUpdateDecoded
    }
}

extension PutDestinationPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutDestinationPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutDestinationPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutDestinationPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutDestinationPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutLogEventsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logEvents
        case logGroupName
        case logStreamName
        case sequenceToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logEvents = logEvents {
            var logEventsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logEvents)
            for inputlogevent0 in logEvents {
                try logEventsContainer.encode(inputlogevent0)
            }
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let sequenceToken = self.sequenceToken {
            try encodeContainer.encode(sequenceToken, forKey: .sequenceToken)
        }
    }
}

extension PutLogEventsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutLogEventsInput: Swift.Equatable {
    /// The log events.
    /// This member is required.
    public var logEvents: [CloudWatchLogsClientTypes.InputLogEvent]?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The name of the log stream.
    /// This member is required.
    public var logStreamName: Swift.String?
    /// The sequence token obtained from the response of the previous PutLogEvents call. The sequenceToken parameter is now ignored in PutLogEvents actions. PutLogEvents actions are now accepted and never return InvalidSequenceTokenException or DataAlreadyAcceptedException even if the sequence token is not valid.
    public var sequenceToken: Swift.String?

    public init (
        logEvents: [CloudWatchLogsClientTypes.InputLogEvent]? = nil,
        logGroupName: Swift.String? = nil,
        logStreamName: Swift.String? = nil,
        sequenceToken: Swift.String? = nil
    )
    {
        self.logEvents = logEvents
        self.logGroupName = logGroupName
        self.logStreamName = logStreamName
        self.sequenceToken = sequenceToken
    }
}

struct PutLogEventsInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let logStreamName: Swift.String?
    let logEvents: [CloudWatchLogsClientTypes.InputLogEvent]?
    let sequenceToken: Swift.String?
}

extension PutLogEventsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logEvents
        case logGroupName
        case logStreamName
        case sequenceToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let logEventsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.InputLogEvent?].self, forKey: .logEvents)
        var logEventsDecoded0:[CloudWatchLogsClientTypes.InputLogEvent]? = nil
        if let logEventsContainer = logEventsContainer {
            logEventsDecoded0 = [CloudWatchLogsClientTypes.InputLogEvent]()
            for structure0 in logEventsContainer {
                if let structure0 = structure0 {
                    logEventsDecoded0?.append(structure0)
                }
            }
        }
        logEvents = logEventsDecoded0
        let sequenceTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sequenceToken)
        sequenceToken = sequenceTokenDecoded
    }
}

extension PutLogEventsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutLogEventsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "DataAlreadyAcceptedException" : self = .dataAlreadyAcceptedException(try DataAlreadyAcceptedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidSequenceTokenException" : self = .invalidSequenceTokenException(try InvalidSequenceTokenException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "UnrecognizedClientException" : self = .unrecognizedClientException(try UnrecognizedClientException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutLogEventsOutputError: Swift.Error, Swift.Equatable {
    case dataAlreadyAcceptedException(DataAlreadyAcceptedException)
    case invalidParameterException(InvalidParameterException)
    case invalidSequenceTokenException(InvalidSequenceTokenException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unrecognizedClientException(UnrecognizedClientException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutLogEventsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutLogEventsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextSequenceToken = output.nextSequenceToken
            self.rejectedLogEventsInfo = output.rejectedLogEventsInfo
        } else {
            self.nextSequenceToken = nil
            self.rejectedLogEventsInfo = nil
        }
    }
}

public struct PutLogEventsOutputResponse: Swift.Equatable {
    /// The next sequence token. This field has been deprecated. The sequence token is now ignored in PutLogEvents actions. PutLogEvents actions are always accepted even if the sequence token is not valid. You can use parallel PutLogEvents actions on the same log stream and you do not need to wait for the response of a previous PutLogEvents action to obtain the nextSequenceToken value.
    public var nextSequenceToken: Swift.String?
    /// The rejected events.
    public var rejectedLogEventsInfo: CloudWatchLogsClientTypes.RejectedLogEventsInfo?

    public init (
        nextSequenceToken: Swift.String? = nil,
        rejectedLogEventsInfo: CloudWatchLogsClientTypes.RejectedLogEventsInfo? = nil
    )
    {
        self.nextSequenceToken = nextSequenceToken
        self.rejectedLogEventsInfo = rejectedLogEventsInfo
    }
}

struct PutLogEventsOutputResponseBody: Swift.Equatable {
    let nextSequenceToken: Swift.String?
    let rejectedLogEventsInfo: CloudWatchLogsClientTypes.RejectedLogEventsInfo?
}

extension PutLogEventsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextSequenceToken
        case rejectedLogEventsInfo
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextSequenceTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextSequenceToken)
        nextSequenceToken = nextSequenceTokenDecoded
        let rejectedLogEventsInfoDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.RejectedLogEventsInfo.self, forKey: .rejectedLogEventsInfo)
        rejectedLogEventsInfo = rejectedLogEventsInfoDecoded
    }
}

extension PutMetricFilterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterName
        case filterPattern
        case logGroupName
        case metricTransformations
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterName = self.filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let filterPattern = self.filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let metricTransformations = metricTransformations {
            var metricTransformationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .metricTransformations)
            for metrictransformation0 in metricTransformations {
                try metricTransformationsContainer.encode(metrictransformation0)
            }
        }
    }
}

extension PutMetricFilterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutMetricFilterInput: Swift.Equatable {
    /// A name for the metric filter.
    /// This member is required.
    public var filterName: Swift.String?
    /// A filter pattern for extracting metric data out of ingested log events.
    /// This member is required.
    public var filterPattern: Swift.String?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// A collection of information that defines how metric data gets emitted.
    /// This member is required.
    public var metricTransformations: [CloudWatchLogsClientTypes.MetricTransformation]?

    public init (
        filterName: Swift.String? = nil,
        filterPattern: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        metricTransformations: [CloudWatchLogsClientTypes.MetricTransformation]? = nil
    )
    {
        self.filterName = filterName
        self.filterPattern = filterPattern
        self.logGroupName = logGroupName
        self.metricTransformations = metricTransformations
    }
}

struct PutMetricFilterInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let filterName: Swift.String?
    let filterPattern: Swift.String?
    let metricTransformations: [CloudWatchLogsClientTypes.MetricTransformation]?
}

extension PutMetricFilterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterName
        case filterPattern
        case logGroupName
        case metricTransformations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterName)
        filterName = filterNameDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let metricTransformationsContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.MetricTransformation?].self, forKey: .metricTransformations)
        var metricTransformationsDecoded0:[CloudWatchLogsClientTypes.MetricTransformation]? = nil
        if let metricTransformationsContainer = metricTransformationsContainer {
            metricTransformationsDecoded0 = [CloudWatchLogsClientTypes.MetricTransformation]()
            for structure0 in metricTransformationsContainer {
                if let structure0 = structure0 {
                    metricTransformationsDecoded0?.append(structure0)
                }
            }
        }
        metricTransformations = metricTransformationsDecoded0
    }
}

extension PutMetricFilterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutMetricFilterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutMetricFilterOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutMetricFilterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutMetricFilterOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutQueryDefinitionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupNames
        case name
        case queryDefinitionId
        case queryString
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupNames = logGroupNames {
            var logGroupNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logGroupNames)
            for loggroupname0 in logGroupNames {
                try logGroupNamesContainer.encode(loggroupname0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let queryDefinitionId = self.queryDefinitionId {
            try encodeContainer.encode(queryDefinitionId, forKey: .queryDefinitionId)
        }
        if let queryString = self.queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
    }
}

extension PutQueryDefinitionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutQueryDefinitionInput: Swift.Equatable {
    /// Use this parameter to include specific log groups as part of your query definition. If you are updating a query definition and you omit this parameter, then the updated definition will contain no log groups.
    public var logGroupNames: [Swift.String]?
    /// A name for the query definition. If you are saving numerous query definitions, we recommend that you name them. This way, you can find the ones you want by using the first part of the name as a filter in the queryDefinitionNamePrefix parameter of [DescribeQueryDefinitions](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeQueryDefinitions.html).
    /// This member is required.
    public var name: Swift.String?
    /// If you are updating a query definition, use this parameter to specify the ID of the query definition that you want to update. You can use [DescribeQueryDefinitions](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeQueryDefinitions.html) to retrieve the IDs of your saved query definitions. If you are creating a query definition, do not specify this parameter. CloudWatch generates a unique ID for the new query definition and include it in the response to this operation.
    public var queryDefinitionId: Swift.String?
    /// The query string to use for this definition. For more information, see [CloudWatch Logs Insights Query Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html).
    /// This member is required.
    public var queryString: Swift.String?

    public init (
        logGroupNames: [Swift.String]? = nil,
        name: Swift.String? = nil,
        queryDefinitionId: Swift.String? = nil,
        queryString: Swift.String? = nil
    )
    {
        self.logGroupNames = logGroupNames
        self.name = name
        self.queryDefinitionId = queryDefinitionId
        self.queryString = queryString
    }
}

struct PutQueryDefinitionInputBody: Swift.Equatable {
    let name: Swift.String?
    let queryDefinitionId: Swift.String?
    let logGroupNames: [Swift.String]?
    let queryString: Swift.String?
}

extension PutQueryDefinitionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupNames
        case name
        case queryDefinitionId
        case queryString
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let queryDefinitionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryDefinitionId)
        queryDefinitionId = queryDefinitionIdDecoded
        let logGroupNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logGroupNames)
        var logGroupNamesDecoded0:[Swift.String]? = nil
        if let logGroupNamesContainer = logGroupNamesContainer {
            logGroupNamesDecoded0 = [Swift.String]()
            for string0 in logGroupNamesContainer {
                if let string0 = string0 {
                    logGroupNamesDecoded0?.append(string0)
                }
            }
        }
        logGroupNames = logGroupNamesDecoded0
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
    }
}

extension PutQueryDefinitionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutQueryDefinitionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutQueryDefinitionOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutQueryDefinitionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutQueryDefinitionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.queryDefinitionId = output.queryDefinitionId
        } else {
            self.queryDefinitionId = nil
        }
    }
}

public struct PutQueryDefinitionOutputResponse: Swift.Equatable {
    /// The ID of the query definition.
    public var queryDefinitionId: Swift.String?

    public init (
        queryDefinitionId: Swift.String? = nil
    )
    {
        self.queryDefinitionId = queryDefinitionId
    }
}

struct PutQueryDefinitionOutputResponseBody: Swift.Equatable {
    let queryDefinitionId: Swift.String?
}

extension PutQueryDefinitionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryDefinitionId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryDefinitionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryDefinitionId)
        queryDefinitionId = queryDefinitionIdDecoded
    }
}

extension PutResourcePolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyDocument
        case policyName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyDocument = self.policyDocument {
            try encodeContainer.encode(policyDocument, forKey: .policyDocument)
        }
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }
}

extension PutResourcePolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutResourcePolicyInput: Swift.Equatable {
    /// Details of the new policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. This parameter is required. The following example creates a resource policy enabling the Route 53 service to put DNS query logs in to the specified log group. Replace "logArn" with the ARN of your CloudWatch Logs resource, such as a log group or log stream. CloudWatch Logs also supports [aws:SourceArn](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html#condition-keys-sourcearn) and [aws:SourceAccount](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html#condition-keys-sourceaccount) condition context keys. In the example resource policy, you would replace the value of SourceArn with the resource making the call from Route 53 to CloudWatch Logs. You would also replace the value of SourceAccount with the Amazon Web Services account ID making that call. { "Version": "2012-10-17", "Statement": [ { "Sid": "Route53LogsToCloudWatchLogs", "Effect": "Allow", "Principal": { "Service": [ "route53.amazonaws.com" ] }, "Action": "logs:PutLogEvents", "Resource": "logArn", "Condition": { "ArnLike": { "aws:SourceArn": "myRoute53ResourceArn" }, "StringEquals": { "aws:SourceAccount": "myAwsAccountId" } } } ] }
    public var policyDocument: Swift.String?
    /// Name of the new policy. This parameter is required.
    public var policyName: Swift.String?

    public init (
        policyDocument: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.policyDocument = policyDocument
        self.policyName = policyName
    }
}

struct PutResourcePolicyInputBody: Swift.Equatable {
    let policyName: Swift.String?
    let policyDocument: Swift.String?
}

extension PutResourcePolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyDocument
        case policyName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
    }
}

extension PutResourcePolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutResourcePolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutResourcePolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutResourcePolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PutResourcePolicyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourcePolicy = output.resourcePolicy
        } else {
            self.resourcePolicy = nil
        }
    }
}

public struct PutResourcePolicyOutputResponse: Swift.Equatable {
    /// The new policy.
    public var resourcePolicy: CloudWatchLogsClientTypes.ResourcePolicy?

    public init (
        resourcePolicy: CloudWatchLogsClientTypes.ResourcePolicy? = nil
    )
    {
        self.resourcePolicy = resourcePolicy
    }
}

struct PutResourcePolicyOutputResponseBody: Swift.Equatable {
    let resourcePolicy: CloudWatchLogsClientTypes.ResourcePolicy?
}

extension PutResourcePolicyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourcePolicy
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourcePolicyDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.ResourcePolicy.self, forKey: .resourcePolicy)
        resourcePolicy = resourcePolicyDecoded
    }
}

extension PutRetentionPolicyInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case retentionInDays
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let retentionInDays = self.retentionInDays {
            try encodeContainer.encode(retentionInDays, forKey: .retentionInDays)
        }
    }
}

extension PutRetentionPolicyInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutRetentionPolicyInput: Swift.Equatable {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 2192, 2557, 2922, 3288, and 3653. To set a log group so that its log events do not expire, use [DeleteRetentionPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html).
    /// This member is required.
    public var retentionInDays: Swift.Int?

    public init (
        logGroupName: Swift.String? = nil,
        retentionInDays: Swift.Int? = nil
    )
    {
        self.logGroupName = logGroupName
        self.retentionInDays = retentionInDays
    }
}

struct PutRetentionPolicyInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let retentionInDays: Swift.Int?
}

extension PutRetentionPolicyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case retentionInDays
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let retentionInDaysDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .retentionInDays)
        retentionInDays = retentionInDaysDecoded
    }
}

extension PutRetentionPolicyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutRetentionPolicyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutRetentionPolicyOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutRetentionPolicyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutRetentionPolicyOutputResponse: Swift.Equatable {

    public init () { }
}

extension PutSubscriptionFilterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationArn
        case distribution
        case filterName
        case filterPattern
        case logGroupName
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationArn = self.destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
        if let distribution = self.distribution {
            try encodeContainer.encode(distribution.rawValue, forKey: .distribution)
        }
        if let filterName = self.filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let filterPattern = self.filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}

extension PutSubscriptionFilterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PutSubscriptionFilterInput: Swift.Equatable {
    /// The ARN of the destination to deliver matching log events to. Currently, the supported destinations are:
    ///
    /// * An Amazon Kinesis stream belonging to the same account as the subscription filter, for same-account delivery.
    ///
    /// * A logical destination (specified using an ARN) belonging to a different account, for cross-account delivery. If you're setting up a cross-account subscription, the destination must have an IAM policy associated with it. The IAM policy must allow the sender to send logs to the destination. For more information, see [PutDestinationPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDestinationPolicy.html).
    ///
    /// * A Kinesis Data Firehose delivery stream belonging to the same account as the subscription filter, for same-account delivery.
    ///
    /// * A Lambda function belonging to the same account as the subscription filter, for same-account delivery.
    /// This member is required.
    public var destinationArn: Swift.String?
    /// The method used to distribute log data to the destination. By default, log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis data stream.
    public var distribution: CloudWatchLogsClientTypes.Distribution?
    /// A name for the subscription filter. If you are updating an existing filter, you must specify the correct name in filterName. To find the name of the filter currently associated with a log group, use [DescribeSubscriptionFilters](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeSubscriptionFilters.html).
    /// This member is required.
    public var filterName: Swift.String?
    /// A filter pattern for subscribing to a filtered stream of log events.
    /// This member is required.
    public var filterPattern: Swift.String?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
    public var roleArn: Swift.String?

    public init (
        destinationArn: Swift.String? = nil,
        distribution: CloudWatchLogsClientTypes.Distribution? = nil,
        filterName: Swift.String? = nil,
        filterPattern: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.destinationArn = destinationArn
        self.distribution = distribution
        self.filterName = filterName
        self.filterPattern = filterPattern
        self.logGroupName = logGroupName
        self.roleArn = roleArn
    }
}

struct PutSubscriptionFilterInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let filterName: Swift.String?
    let filterPattern: Swift.String?
    let destinationArn: Swift.String?
    let roleArn: Swift.String?
    let distribution: CloudWatchLogsClientTypes.Distribution?
}

extension PutSubscriptionFilterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationArn
        case distribution
        case filterName
        case filterPattern
        case logGroupName
        case roleArn
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterName)
        filterName = filterNameDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let distributionDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.Distribution.self, forKey: .distribution)
        distribution = distributionDecoded
    }
}

extension PutSubscriptionFilterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PutSubscriptionFilterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OperationAbortedException" : self = .operationAbortedException(try OperationAbortedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PutSubscriptionFilterOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case operationAbortedException(OperationAbortedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PutSubscriptionFilterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct PutSubscriptionFilterOutputResponse: Swift.Equatable {

    public init () { }
}

extension CloudWatchLogsClientTypes.QueryCompileError: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case location
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let location = self.location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.QueryCompileErrorLocation.self, forKey: .location)
        location = locationDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Reserved.
    public struct QueryCompileError: Swift.Equatable {
        /// Reserved.
        public var location: CloudWatchLogsClientTypes.QueryCompileErrorLocation?
        /// Reserved.
        public var message: Swift.String?

        public init (
            location: CloudWatchLogsClientTypes.QueryCompileErrorLocation? = nil,
            message: Swift.String? = nil
        )
        {
            self.location = location
            self.message = message
        }
    }

}

extension CloudWatchLogsClientTypes.QueryCompileErrorLocation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endCharOffset
        case startCharOffset
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endCharOffset = self.endCharOffset {
            try encodeContainer.encode(endCharOffset, forKey: .endCharOffset)
        }
        if let startCharOffset = self.startCharOffset {
            try encodeContainer.encode(startCharOffset, forKey: .startCharOffset)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startCharOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startCharOffset)
        startCharOffset = startCharOffsetDecoded
        let endCharOffsetDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endCharOffset)
        endCharOffset = endCharOffsetDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Reserved.
    public struct QueryCompileErrorLocation: Swift.Equatable {
        /// Reserved.
        public var endCharOffset: Swift.Int?
        /// Reserved.
        public var startCharOffset: Swift.Int?

        public init (
            endCharOffset: Swift.Int? = nil,
            startCharOffset: Swift.Int? = nil
        )
        {
            self.endCharOffset = endCharOffset
            self.startCharOffset = startCharOffset
        }
    }

}

extension CloudWatchLogsClientTypes.QueryDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastModified
        case logGroupNames
        case name
        case queryDefinitionId
        case queryString
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastModified = self.lastModified {
            try encodeContainer.encode(lastModified, forKey: .lastModified)
        }
        if let logGroupNames = logGroupNames {
            var logGroupNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logGroupNames)
            for loggroupname0 in logGroupNames {
                try logGroupNamesContainer.encode(loggroupname0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let queryDefinitionId = self.queryDefinitionId {
            try encodeContainer.encode(queryDefinitionId, forKey: .queryDefinitionId)
        }
        if let queryString = self.queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryDefinitionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryDefinitionId)
        queryDefinitionId = queryDefinitionIdDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let logGroupNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logGroupNames)
        var logGroupNamesDecoded0:[Swift.String]? = nil
        if let logGroupNamesContainer = logGroupNamesContainer {
            logGroupNamesDecoded0 = [Swift.String]()
            for string0 in logGroupNamesContainer {
                if let string0 = string0 {
                    logGroupNamesDecoded0?.append(string0)
                }
            }
        }
        logGroupNames = logGroupNamesDecoded0
    }
}

extension CloudWatchLogsClientTypes {
    /// This structure contains details about a saved CloudWatch Logs Insights query definition.
    public struct QueryDefinition: Swift.Equatable {
        /// The date that the query definition was most recently modified.
        public var lastModified: Swift.Int?
        /// If this query definition contains a list of log groups that it is limited to, that list appears here.
        public var logGroupNames: [Swift.String]?
        /// The name of the query definition.
        public var name: Swift.String?
        /// The unique ID of the query definition.
        public var queryDefinitionId: Swift.String?
        /// The query string to use for this definition. For more information, see [CloudWatch Logs Insights Query Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html).
        public var queryString: Swift.String?

        public init (
            lastModified: Swift.Int? = nil,
            logGroupNames: [Swift.String]? = nil,
            name: Swift.String? = nil,
            queryDefinitionId: Swift.String? = nil,
            queryString: Swift.String? = nil
        )
        {
            self.lastModified = lastModified
            self.logGroupNames = logGroupNames
            self.name = name
            self.queryDefinitionId = queryDefinitionId
            self.queryString = queryString
        }
    }

}

extension CloudWatchLogsClientTypes.QueryInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createTime
        case logGroupName
        case queryId
        case queryString
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createTime = self.createTime {
            try encodeContainer.encode(createTime, forKey: .createTime)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let queryId = self.queryId {
            try encodeContainer.encode(queryId, forKey: .queryId)
        }
        if let queryString = self.queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryId)
        queryId = queryIdDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let statusDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.QueryStatus.self, forKey: .status)
        status = statusDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .createTime)
        createTime = createTimeDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Information about one CloudWatch Logs Insights query that matches the request in a DescribeQueries operation.
    public struct QueryInfo: Swift.Equatable {
        /// The date and time that this query was created.
        public var createTime: Swift.Int?
        /// The name of the log group scanned by this query.
        public var logGroupName: Swift.String?
        /// The unique ID number of this query.
        public var queryId: Swift.String?
        /// The query string used in this query.
        public var queryString: Swift.String?
        /// The status of this query. Possible values are Cancelled, Complete, Failed, Running, Scheduled, and Unknown.
        public var status: CloudWatchLogsClientTypes.QueryStatus?

        public init (
            createTime: Swift.Int? = nil,
            logGroupName: Swift.String? = nil,
            queryId: Swift.String? = nil,
            queryString: Swift.String? = nil,
            status: CloudWatchLogsClientTypes.QueryStatus? = nil
        )
        {
            self.createTime = createTime
            self.logGroupName = logGroupName
            self.queryId = queryId
            self.queryString = queryString
            self.status = status
        }
    }

}

extension CloudWatchLogsClientTypes.QueryStatistics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bytesScanned
        case recordsMatched
        case recordsScanned
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if bytesScanned != 0.0 {
            try encodeContainer.encode(bytesScanned, forKey: .bytesScanned)
        }
        if recordsMatched != 0.0 {
            try encodeContainer.encode(recordsMatched, forKey: .recordsMatched)
        }
        if recordsScanned != 0.0 {
            try encodeContainer.encode(recordsScanned, forKey: .recordsScanned)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recordsMatchedDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .recordsMatched) ?? 0.0
        recordsMatched = recordsMatchedDecoded
        let recordsScannedDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .recordsScanned) ?? 0.0
        recordsScanned = recordsScannedDecoded
        let bytesScannedDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .bytesScanned) ?? 0.0
        bytesScanned = bytesScannedDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Contains the number of log events scanned by the query, the number of log events that matched the query criteria, and the total number of bytes in the log events that were scanned.
    public struct QueryStatistics: Swift.Equatable {
        /// The total number of bytes in the log events scanned during the query.
        public var bytesScanned: Swift.Double
        /// The number of log events that matched the query string.
        public var recordsMatched: Swift.Double
        /// The total number of log events scanned during the query.
        public var recordsScanned: Swift.Double

        public init (
            bytesScanned: Swift.Double = 0.0,
            recordsMatched: Swift.Double = 0.0,
            recordsScanned: Swift.Double = 0.0
        )
        {
            self.bytesScanned = bytesScanned
            self.recordsMatched = recordsMatched
            self.recordsScanned = recordsScanned
        }
    }

}

extension CloudWatchLogsClientTypes {
    public enum QueryStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cancelled
        case complete
        case failed
        case running
        case scheduled
        case timeout
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [QueryStatus] {
            return [
                .cancelled,
                .complete,
                .failed,
                .running,
                .scheduled,
                .timeout,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .complete: return "Complete"
            case .failed: return "Failed"
            case .running: return "Running"
            case .scheduled: return "Scheduled"
            case .timeout: return "Timeout"
            case .unknown: return "Unknown"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = QueryStatus(rawValue: rawValue) ?? QueryStatus.sdkUnknown(rawValue)
        }
    }
}

extension CloudWatchLogsClientTypes.RejectedLogEventsInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case expiredLogEventEndIndex
        case tooNewLogEventStartIndex
        case tooOldLogEventEndIndex
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let expiredLogEventEndIndex = self.expiredLogEventEndIndex {
            try encodeContainer.encode(expiredLogEventEndIndex, forKey: .expiredLogEventEndIndex)
        }
        if let tooNewLogEventStartIndex = self.tooNewLogEventStartIndex {
            try encodeContainer.encode(tooNewLogEventStartIndex, forKey: .tooNewLogEventStartIndex)
        }
        if let tooOldLogEventEndIndex = self.tooOldLogEventEndIndex {
            try encodeContainer.encode(tooOldLogEventEndIndex, forKey: .tooOldLogEventEndIndex)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tooNewLogEventStartIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .tooNewLogEventStartIndex)
        tooNewLogEventStartIndex = tooNewLogEventStartIndexDecoded
        let tooOldLogEventEndIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .tooOldLogEventEndIndex)
        tooOldLogEventEndIndex = tooOldLogEventEndIndexDecoded
        let expiredLogEventEndIndexDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .expiredLogEventEndIndex)
        expiredLogEventEndIndex = expiredLogEventEndIndexDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents the rejected events.
    public struct RejectedLogEventsInfo: Swift.Equatable {
        /// The expired log events.
        public var expiredLogEventEndIndex: Swift.Int?
        /// The log events that are too new.
        public var tooNewLogEventStartIndex: Swift.Int?
        /// The log events that are dated too far in the past.
        public var tooOldLogEventEndIndex: Swift.Int?

        public init (
            expiredLogEventEndIndex: Swift.Int? = nil,
            tooNewLogEventStartIndex: Swift.Int? = nil,
            tooOldLogEventEndIndex: Swift.Int? = nil
        )
        {
            self.expiredLogEventEndIndex = expiredLogEventEndIndex
            self.tooNewLogEventStartIndex = tooNewLogEventStartIndex
            self.tooOldLogEventEndIndex = tooOldLogEventEndIndex
        }
    }

}

extension ResourceAlreadyExistsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceAlreadyExistsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified resource already exists.
public struct ResourceAlreadyExistsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceAlreadyExistsExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceAlreadyExistsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The specified resource does not exist.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchLogsClientTypes.ResourcePolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastUpdatedTime
        case policyDocument
        case policyName
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastUpdatedTime = self.lastUpdatedTime {
            try encodeContainer.encode(lastUpdatedTime, forKey: .lastUpdatedTime)
        }
        if let policyDocument = self.policyDocument {
            try encodeContainer.encode(policyDocument, forKey: .policyDocument)
        }
        if let policyName = self.policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyDocument)
        policyDocument = policyDocumentDecoded
        let lastUpdatedTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lastUpdatedTime)
        lastUpdatedTime = lastUpdatedTimeDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// A policy enabling one or more entities to put logs to a log group in this account.
    public struct ResourcePolicy: Swift.Equatable {
        /// Timestamp showing when this policy was last updated, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var lastUpdatedTime: Swift.Int?
        /// The details of the policy.
        public var policyDocument: Swift.String?
        /// The name of the resource policy.
        public var policyName: Swift.String?

        public init (
            lastUpdatedTime: Swift.Int? = nil,
            policyDocument: Swift.String? = nil,
            policyName: Swift.String? = nil
        )
        {
            self.lastUpdatedTime = lastUpdatedTime
            self.policyDocument = policyDocument
            self.policyName = policyName
        }
    }

}

extension CloudWatchLogsClientTypes.ResultField: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case field
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let field = self.field {
            try encodeContainer.encode(field, forKey: .field)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .field)
        field = fieldDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Contains one field from one log event returned by a CloudWatch Logs Insights query, along with the value of that field. For more information about the fields that are generated by CloudWatch logs, see [Supported Logs and Discovered Fields](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html).
    public struct ResultField: Swift.Equatable {
        /// The log event field.
        public var field: Swift.String?
        /// The value of this field.
        public var value: Swift.String?

        public init (
            field: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.field = field
            self.value = value
        }
    }

}

extension CloudWatchLogsClientTypes.SearchedLogStream: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logStreamName
        case searchedCompletely
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logStreamName = self.logStreamName {
            try encodeContainer.encode(logStreamName, forKey: .logStreamName)
        }
        if let searchedCompletely = self.searchedCompletely {
            try encodeContainer.encode(searchedCompletely, forKey: .searchedCompletely)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logStreamNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logStreamName)
        logStreamName = logStreamNameDecoded
        let searchedCompletelyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .searchedCompletely)
        searchedCompletely = searchedCompletelyDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents the search status of a log stream.
    public struct SearchedLogStream: Swift.Equatable {
        /// The name of the log stream.
        public var logStreamName: Swift.String?
        /// Indicates whether all the events in this log stream were searched.
        public var searchedCompletely: Swift.Bool?

        public init (
            logStreamName: Swift.String? = nil,
            searchedCompletely: Swift.Bool? = nil
        )
        {
            self.logStreamName = logStreamName
            self.searchedCompletely = searchedCompletely
        }
    }

}

extension ServiceUnavailableException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ServiceUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The service cannot complete the request.
public struct ServiceUnavailableException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceUnavailableExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension ServiceUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension CloudWatchLogsClientTypes {
    public enum StandardUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bits
        case bitssecond
        case bytes
        case bytessecond
        case count
        case countsecond
        case gigabits
        case gigabitssecond
        case gigabytes
        case gigabytessecond
        case kilobits
        case kilobitssecond
        case kilobytes
        case kilobytessecond
        case megabits
        case megabitssecond
        case megabytes
        case megabytessecond
        case microseconds
        case milliseconds
        case `none`
        case percent
        case seconds
        case terabits
        case terabitssecond
        case terabytes
        case terabytessecond
        case sdkUnknown(Swift.String)

        public static var allCases: [StandardUnit] {
            return [
                .bits,
                .bitssecond,
                .bytes,
                .bytessecond,
                .count,
                .countsecond,
                .gigabits,
                .gigabitssecond,
                .gigabytes,
                .gigabytessecond,
                .kilobits,
                .kilobitssecond,
                .kilobytes,
                .kilobytessecond,
                .megabits,
                .megabitssecond,
                .megabytes,
                .megabytessecond,
                .microseconds,
                .milliseconds,
                .none,
                .percent,
                .seconds,
                .terabits,
                .terabitssecond,
                .terabytes,
                .terabytessecond,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bits: return "Bits"
            case .bitssecond: return "Bits/Second"
            case .bytes: return "Bytes"
            case .bytessecond: return "Bytes/Second"
            case .count: return "Count"
            case .countsecond: return "Count/Second"
            case .gigabits: return "Gigabits"
            case .gigabitssecond: return "Gigabits/Second"
            case .gigabytes: return "Gigabytes"
            case .gigabytessecond: return "Gigabytes/Second"
            case .kilobits: return "Kilobits"
            case .kilobitssecond: return "Kilobits/Second"
            case .kilobytes: return "Kilobytes"
            case .kilobytessecond: return "Kilobytes/Second"
            case .megabits: return "Megabits"
            case .megabitssecond: return "Megabits/Second"
            case .megabytes: return "Megabytes"
            case .megabytessecond: return "Megabytes/Second"
            case .microseconds: return "Microseconds"
            case .milliseconds: return "Milliseconds"
            case .none: return "None"
            case .percent: return "Percent"
            case .seconds: return "Seconds"
            case .terabits: return "Terabits"
            case .terabitssecond: return "Terabits/Second"
            case .terabytes: return "Terabytes"
            case .terabytessecond: return "Terabytes/Second"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StandardUnit(rawValue: rawValue) ?? StandardUnit.sdkUnknown(rawValue)
        }
    }
}

extension StartQueryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case limit
        case logGroupIdentifiers
        case logGroupName
        case logGroupNames
        case queryString
        case startTime
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = self.endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let logGroupIdentifiers = logGroupIdentifiers {
            var logGroupIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logGroupIdentifiers)
            for loggroupidentifier0 in logGroupIdentifiers {
                try logGroupIdentifiersContainer.encode(loggroupidentifier0)
            }
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let logGroupNames = logGroupNames {
            var logGroupNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logGroupNames)
            for loggroupname0 in logGroupNames {
                try logGroupNamesContainer.encode(loggroupname0)
            }
        }
        if let queryString = self.queryString {
            try encodeContainer.encode(queryString, forKey: .queryString)
        }
        if let startTime = self.startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
    }
}

extension StartQueryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartQueryInput: Swift.Equatable {
    /// The end of the time range to query. The range is inclusive, so the specified end time is included in the query. Specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.
    /// This member is required.
    public var endTime: Swift.Int?
    /// The maximum number of log events to return in the query. If the query string uses the fields command, only the specified fields and their values are returned. The default is 1000.
    public var limit: Swift.Int?
    /// The list of log groups to query. You can include up to 50 log groups. You can specify them by the log group name or ARN. If a log group that you're querying is in a source account and you're using a monitoring account, you must specify the ARN of the log group here. The query definition must also be defined in the monitoring account. If you specify an ARN, the ARN can't end with an asterisk (*). A StartQuery operation must include exactly one of the following parameters: logGroupName, logGroupNames or logGroupIdentifiers.
    public var logGroupIdentifiers: [Swift.String]?
    /// The log group on which to perform the query. A StartQuery operation must include exactly one of the following parameters: logGroupName, logGroupNames or logGroupIdentifiers.
    public var logGroupName: Swift.String?
    /// The list of log groups to be queried. You can include up to 50 log groups. A StartQuery operation must include exactly one of the following parameters: logGroupName, logGroupNames or logGroupIdentifiers.
    public var logGroupNames: [Swift.String]?
    /// The query string to use. For more information, see [CloudWatch Logs Insights Query Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html).
    /// This member is required.
    public var queryString: Swift.String?
    /// The beginning of the time range to query. The range is inclusive, so the specified start time is included in the query. Specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.
    /// This member is required.
    public var startTime: Swift.Int?

    public init (
        endTime: Swift.Int? = nil,
        limit: Swift.Int? = nil,
        logGroupIdentifiers: [Swift.String]? = nil,
        logGroupName: Swift.String? = nil,
        logGroupNames: [Swift.String]? = nil,
        queryString: Swift.String? = nil,
        startTime: Swift.Int? = nil
    )
    {
        self.endTime = endTime
        self.limit = limit
        self.logGroupIdentifiers = logGroupIdentifiers
        self.logGroupName = logGroupName
        self.logGroupNames = logGroupNames
        self.queryString = queryString
        self.startTime = startTime
    }
}

struct StartQueryInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let logGroupNames: [Swift.String]?
    let logGroupIdentifiers: [Swift.String]?
    let startTime: Swift.Int?
    let endTime: Swift.Int?
    let queryString: Swift.String?
    let limit: Swift.Int?
}

extension StartQueryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case limit
        case logGroupIdentifiers
        case logGroupName
        case logGroupNames
        case queryString
        case startTime
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let logGroupNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logGroupNames)
        var logGroupNamesDecoded0:[Swift.String]? = nil
        if let logGroupNamesContainer = logGroupNamesContainer {
            logGroupNamesDecoded0 = [Swift.String]()
            for string0 in logGroupNamesContainer {
                if let string0 = string0 {
                    logGroupNamesDecoded0?.append(string0)
                }
            }
        }
        logGroupNames = logGroupNamesDecoded0
        let logGroupIdentifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logGroupIdentifiers)
        var logGroupIdentifiersDecoded0:[Swift.String]? = nil
        if let logGroupIdentifiersContainer = logGroupIdentifiersContainer {
            logGroupIdentifiersDecoded0 = [Swift.String]()
            for string0 in logGroupIdentifiersContainer {
                if let string0 = string0 {
                    logGroupIdentifiersDecoded0?.append(string0)
                }
            }
        }
        logGroupIdentifiers = logGroupIdentifiersDecoded0
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endTime)
        endTime = endTimeDecoded
        let queryStringDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryString)
        queryString = queryStringDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension StartQueryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartQueryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MalformedQueryException" : self = .malformedQueryException(try MalformedQueryException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StartQueryOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case limitExceededException(LimitExceededException)
    case malformedQueryException(MalformedQueryException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartQueryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StartQueryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.queryId = output.queryId
        } else {
            self.queryId = nil
        }
    }
}

public struct StartQueryOutputResponse: Swift.Equatable {
    /// The unique ID of the query.
    public var queryId: Swift.String?

    public init (
        queryId: Swift.String? = nil
    )
    {
        self.queryId = queryId
    }
}

struct StartQueryOutputResponseBody: Swift.Equatable {
    let queryId: Swift.String?
}

extension StartQueryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryId)
        queryId = queryIdDecoded
    }
}

extension StopQueryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryId
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let queryId = self.queryId {
            try encodeContainer.encode(queryId, forKey: .queryId)
        }
    }
}

extension StopQueryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopQueryInput: Swift.Equatable {
    /// The ID number of the query to stop. To find this ID number, use DescribeQueries.
    /// This member is required.
    public var queryId: Swift.String?

    public init (
        queryId: Swift.String? = nil
    )
    {
        self.queryId = queryId
    }
}

struct StopQueryInputBody: Swift.Equatable {
    let queryId: Swift.String?
}

extension StopQueryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case queryId
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let queryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queryId)
        queryId = queryIdDecoded
    }
}

extension StopQueryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StopQueryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum StopQueryOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StopQueryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: StopQueryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.success = output.success
        } else {
            self.success = false
        }
    }
}

public struct StopQueryOutputResponse: Swift.Equatable {
    /// This is true if the query was stopped by the StopQuery operation.
    public var success: Swift.Bool

    public init (
        success: Swift.Bool = false
    )
    {
        self.success = success
    }
}

struct StopQueryOutputResponseBody: Swift.Equatable {
    let success: Swift.Bool
}

extension StopQueryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case success
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let successDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .success) ?? false
        success = successDecoded
    }
}

extension CloudWatchLogsClientTypes.SubscriptionFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime
        case destinationArn
        case distribution
        case filterName
        case filterPattern
        case logGroupName
        case roleArn
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTime = self.creationTime {
            try encodeContainer.encode(creationTime, forKey: .creationTime)
        }
        if let destinationArn = self.destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
        if let distribution = self.distribution {
            try encodeContainer.encode(distribution.rawValue, forKey: .distribution)
        }
        if let filterName = self.filterName {
            try encodeContainer.encode(filterName, forKey: .filterName)
        }
        if let filterPattern = self.filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let roleArn = self.roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterName)
        filterName = filterNameDecoded
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let distributionDecoded = try containerValues.decodeIfPresent(CloudWatchLogsClientTypes.Distribution.self, forKey: .distribution)
        distribution = distributionDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a subscription filter.
    public struct SubscriptionFilter: Swift.Equatable {
        /// The creation time of the subscription filter, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var creationTime: Swift.Int?
        /// The Amazon Resource Name (ARN) of the destination.
        public var destinationArn: Swift.String?
        /// The method used to distribute log data to the destination, which can be either random or grouped by log stream.
        public var distribution: CloudWatchLogsClientTypes.Distribution?
        /// The name of the subscription filter.
        public var filterName: Swift.String?
        /// A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.
        public var filterPattern: Swift.String?
        /// The name of the log group.
        public var logGroupName: Swift.String?
        ///
        public var roleArn: Swift.String?

        public init (
            creationTime: Swift.Int? = nil,
            destinationArn: Swift.String? = nil,
            distribution: CloudWatchLogsClientTypes.Distribution? = nil,
            filterName: Swift.String? = nil,
            filterPattern: Swift.String? = nil,
            logGroupName: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.destinationArn = destinationArn
            self.distribution = distribution
            self.filterName = filterName
            self.filterPattern = filterPattern
            self.logGroupName = logGroupName
            self.roleArn = roleArn
        }
    }

}

extension TagLogGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension TagLogGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

@available(*, deprecated, message: "Please use the generic tagging API model TagResourceRequest")
public struct TagLogGroupInput: Swift.Equatable {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The key-value pairs to use for the tags.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init (
        logGroupName: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.logGroupName = logGroupName
        self.tags = tags
    }
}

struct TagLogGroupInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension TagLogGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagLogGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagLogGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagLogGroupOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagLogGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagLogGroupOutputResponse: Swift.Equatable {

    public init () { }
}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The ARN of the resource that you're adding tags to. The ARN format of a log group is arn:aws:logs:Region:account-id:log-group:log-group-name  The ARN format of a destination is arn:aws:logs:Region:account-id:destination:destination-name  For more information about ARN format, see [CloudWatch Logs resources and operations](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html).
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of key-value pairs to associate with the resource.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TooManyTagsException" : self = .tooManyTagsException(try TooManyTagsException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case tooManyTagsException(TooManyTagsException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init () { }
}

extension TestMetricFilterInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterPattern
        case logEventMessages
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterPattern = self.filterPattern {
            try encodeContainer.encode(filterPattern, forKey: .filterPattern)
        }
        if let logEventMessages = logEventMessages {
            var logEventMessagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logEventMessages)
            for eventmessage0 in logEventMessages {
                try logEventMessagesContainer.encode(eventmessage0)
            }
        }
    }
}

extension TestMetricFilterInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct TestMetricFilterInput: Swift.Equatable {
    /// A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.
    /// This member is required.
    public var filterPattern: Swift.String?
    /// The log event messages to test.
    /// This member is required.
    public var logEventMessages: [Swift.String]?

    public init (
        filterPattern: Swift.String? = nil,
        logEventMessages: [Swift.String]? = nil
    )
    {
        self.filterPattern = filterPattern
        self.logEventMessages = logEventMessages
    }
}

struct TestMetricFilterInputBody: Swift.Equatable {
    let filterPattern: Swift.String?
    let logEventMessages: [Swift.String]?
}

extension TestMetricFilterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterPattern
        case logEventMessages
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterPatternDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .filterPattern)
        filterPattern = filterPatternDecoded
        let logEventMessagesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logEventMessages)
        var logEventMessagesDecoded0:[Swift.String]? = nil
        if let logEventMessagesContainer = logEventMessagesContainer {
            logEventMessagesDecoded0 = [Swift.String]()
            for string0 in logEventMessagesContainer {
                if let string0 = string0 {
                    logEventMessagesDecoded0?.append(string0)
                }
            }
        }
        logEventMessages = logEventMessagesDecoded0
    }
}

extension TestMetricFilterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TestMetricFilterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum TestMetricFilterOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TestMetricFilterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TestMetricFilterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.matches = output.matches
        } else {
            self.matches = nil
        }
    }
}

public struct TestMetricFilterOutputResponse: Swift.Equatable {
    /// The matched events.
    public var matches: [CloudWatchLogsClientTypes.MetricFilterMatchRecord]?

    public init (
        matches: [CloudWatchLogsClientTypes.MetricFilterMatchRecord]? = nil
    )
    {
        self.matches = matches
    }
}

struct TestMetricFilterOutputResponseBody: Swift.Equatable {
    let matches: [CloudWatchLogsClientTypes.MetricFilterMatchRecord]?
}

extension TestMetricFilterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case matches
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let matchesContainer = try containerValues.decodeIfPresent([CloudWatchLogsClientTypes.MetricFilterMatchRecord?].self, forKey: .matches)
        var matchesDecoded0:[CloudWatchLogsClientTypes.MetricFilterMatchRecord]? = nil
        if let matchesContainer = matchesContainer {
            matchesDecoded0 = [CloudWatchLogsClientTypes.MetricFilterMatchRecord]()
            for structure0 in matchesContainer {
                if let structure0 = structure0 {
                    matchesDecoded0?.append(structure0)
                }
            }
        }
        matches = matchesDecoded0
    }
}

extension TooManyTagsException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TooManyTagsExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
            self.resourceName = output.resourceName
        } else {
            self.message = nil
            self.resourceName = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A resource can have no more than 50 tags.
public struct TooManyTagsException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?
    /// The name of the resource.
    public var resourceName: Swift.String?

    public init (
        message: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.message = message
        self.resourceName = resourceName
    }
}

struct TooManyTagsExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let resourceName: Swift.String?
}

extension TooManyTagsExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
        case resourceName
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
    }
}

extension UnrecognizedClientException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UnrecognizedClientExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The most likely cause is an Amazon Web Services access key ID or secret key that's not valid.
public struct UnrecognizedClientException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct UnrecognizedClientExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension UnrecognizedClientExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension UntagLogGroupInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case tags
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logGroupName = self.logGroupName {
            try encodeContainer.encode(logGroupName, forKey: .logGroupName)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tagkey0 in tags {
                try tagsContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagLogGroupInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

@available(*, deprecated, message: "Please use the generic tagging API model UntagResourceRequest")
public struct UntagLogGroupInput: Swift.Equatable {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The tag keys. The corresponding tags are removed from the log group.
    /// This member is required.
    public var tags: [Swift.String]?

    public init (
        logGroupName: Swift.String? = nil,
        tags: [Swift.String]? = nil
    )
    {
        self.logGroupName = logGroupName
        self.tags = tags
    }
}

struct UntagLogGroupInputBody: Swift.Equatable {
    let logGroupName: Swift.String?
    let tags: [Swift.String]?
}

extension UntagLogGroupInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logGroupName
        case tags
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logGroupName)
        logGroupName = logGroupNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tags)
        var tagsDecoded0:[Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String]()
            for string0 in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?.append(string0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension UntagLogGroupOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagLogGroupOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagLogGroupOutputError: Swift.Error, Swift.Equatable {
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagLogGroupOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagLogGroupOutputResponse: Swift.Equatable {

    public init () { }
}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tagKeys
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The ARN of the CloudWatch Logs resource that you're removing tags from. The ARN format of a log group is arn:aws:logs:Region:account-id:log-group:log-group-name  The ARN format of a destination is arn:aws:logs:Region:account-id:destination:destination-name  For more information about ARN format, see [CloudWatch Logs resources and operations](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html).
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of tag keys to remove from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn
        case tagKeys
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InvalidParameterException" : self = .invalidParameterException(try InvalidParameterException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case invalidParameterException(InvalidParameterException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init () { }
}
