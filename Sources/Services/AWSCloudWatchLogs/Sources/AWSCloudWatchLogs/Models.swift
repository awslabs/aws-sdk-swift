//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import class SmithyEventStreams.DefaultMessageDecoder
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyEventStreamsAPI.MessageType
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyReadWrite) import func SmithyReadWrite.listReadingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct SmithyEventStreams.DefaultMessageDecoderStream
import struct SmithyEventStreamsAPI.Message
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
import typealias SmithyEventStreamsAPI.UnmarshalClosure

public struct AssociateKmsKeyOutput {

    public init() { }
}

public struct CancelExportTaskOutput {

    public init() { }
}

public struct CreateLogGroupOutput {

    public init() { }
}

public struct CreateLogStreamOutput {

    public init() { }
}

public struct DeleteAccountPolicyOutput {

    public init() { }
}

public struct DeleteDataProtectionPolicyOutput {

    public init() { }
}

public struct DeleteDeliveryDestinationOutput {

    public init() { }
}

public struct DeleteDeliveryDestinationPolicyOutput {

    public init() { }
}

public struct DeleteDeliveryOutput {

    public init() { }
}

public struct DeleteDeliverySourceOutput {

    public init() { }
}

public struct DeleteDestinationOutput {

    public init() { }
}

public struct DeleteLogAnomalyDetectorOutput {

    public init() { }
}

public struct DeleteLogGroupOutput {

    public init() { }
}

public struct DeleteLogStreamOutput {

    public init() { }
}

public struct DeleteMetricFilterOutput {

    public init() { }
}

public struct DeleteResourcePolicyOutput {

    public init() { }
}

public struct DeleteRetentionPolicyOutput {

    public init() { }
}

public struct DeleteSubscriptionFilterOutput {

    public init() { }
}

public struct DisassociateKmsKeyOutput {

    public init() { }
}

public struct PutDestinationPolicyOutput {

    public init() { }
}

public struct PutMetricFilterOutput {

    public init() { }
}

public struct PutRetentionPolicyOutput {

    public init() { }
}

public struct PutSubscriptionFilterOutput {

    public init() { }
}

public struct TagLogGroupOutput {

    public init() { }
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagLogGroupOutput {

    public init() { }
}

public struct UntagResourceOutput {

    public init() { }
}

public struct UpdateAnomalyOutput {

    public init() { }
}

public struct UpdateLogAnomalyDetectorOutput {

    public init() { }
}

/// You don't have sufficient permissions to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudWatchLogsClientTypes {

    public enum PolicyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dataProtectionPolicy
        case subscriptionFilterPolicy
        case sdkUnknown(Swift.String)

        public static var allCases: [PolicyType] {
            return [
                .dataProtectionPolicy,
                .subscriptionFilterPolicy
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dataProtectionPolicy: return "DATA_PROTECTION_POLICY"
            case .subscriptionFilterPolicy: return "SUBSCRIPTION_FILTER_POLICY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchLogsClientTypes {

    public enum Scope: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case sdkUnknown(Swift.String)

        public static var allCases: [Scope] {
            return [
                .all
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchLogsClientTypes {
    /// A structure that contains information about one CloudWatch Logs account policy.
    public struct AccountPolicy {
        /// The Amazon Web Services account ID that the policy applies to.
        public var accountId: Swift.String?
        /// The date and time that this policy was most recently updated.
        public var lastUpdatedTime: Swift.Int?
        /// The policy document for this account policy. The JSON specified in policyDocument can be up to 30,720 characters.
        public var policyDocument: Swift.String?
        /// The name of the account policy.
        public var policyName: Swift.String?
        /// The type of policy for this account policy.
        public var policyType: CloudWatchLogsClientTypes.PolicyType?
        /// The scope of the account policy.
        public var scope: CloudWatchLogsClientTypes.Scope?
        /// The log group selection criteria for this subscription filter policy.
        public var selectionCriteria: Swift.String?

        public init(
            accountId: Swift.String? = nil,
            lastUpdatedTime: Swift.Int? = nil,
            policyDocument: Swift.String? = nil,
            policyName: Swift.String? = nil,
            policyType: CloudWatchLogsClientTypes.PolicyType? = nil,
            scope: CloudWatchLogsClientTypes.Scope? = nil,
            selectionCriteria: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.lastUpdatedTime = lastUpdatedTime
            self.policyDocument = policyDocument
            self.policyName = policyName
            self.policyType = policyType
            self.scope = scope
            self.selectionCriteria = selectionCriteria
        }
    }

}

extension CloudWatchLogsClientTypes {
    /// A structure that represents a valid record field header and whether it is mandatory.
    public struct RecordField {
        /// If this is true, the record field must be present in the recordFields parameter provided to a [CreateDelivery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html) or [UpdateDeliveryConfiguration](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateDeliveryConfiguration.html) operation.
        public var mandatory: Swift.Bool?
        /// The name to use when specifying this record field in a [CreateDelivery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html) or [UpdateDeliveryConfiguration](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateDeliveryConfiguration.html) operation.
        public var name: Swift.String?

        public init(
            mandatory: Swift.Bool? = nil,
            name: Swift.String? = nil
        )
        {
            self.mandatory = mandatory
            self.name = name
        }
    }

}

extension CloudWatchLogsClientTypes {
    /// This structure contains the information for one sample log event that is associated with an anomaly found by a log anomaly detector.
    public struct LogEvent {
        /// The message content of the log event.
        public var message: Swift.String?
        /// The time stamp of the log event.
        public var timestamp: Swift.Int?

        public init(
            message: Swift.String? = nil,
            timestamp: Swift.Int? = nil
        )
        {
            self.message = message
            self.timestamp = timestamp
        }
    }

}

extension CloudWatchLogsClientTypes {
    /// A structure that contains information about one pattern token related to an anomaly. For more information about patterns and tokens, see [CreateLogAnomalyDetector](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateLogAnomalyDetector.html).
    public struct PatternToken {
        /// For a dynamic token, this indicates where in the pattern that this token appears, related to other dynamic tokens. The dynamic token that appears first has a value of 1, the one that appears second is 2, and so on.
        public var dynamicTokenPosition: Swift.Int
        /// Contains the values found for a dynamic token, and the number of times each value was found.
        public var enumerations: [Swift.String: Swift.Int]?
        /// Specifies whether this is a dynamic token.
        public var isDynamic: Swift.Bool?
        /// The string represented by this token. If this is a dynamic token, the value will be <*>
        public var tokenString: Swift.String?

        public init(
            dynamicTokenPosition: Swift.Int = 0,
            enumerations: [Swift.String: Swift.Int]? = nil,
            isDynamic: Swift.Bool? = nil,
            tokenString: Swift.String? = nil
        )
        {
            self.dynamicTokenPosition = dynamicTokenPosition
            self.enumerations = enumerations
            self.isDynamic = isDynamic
            self.tokenString = tokenString
        }
    }

}

extension CloudWatchLogsClientTypes {

    public enum State: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case baseline
        case suppressed
        case sdkUnknown(Swift.String)

        public static var allCases: [State] {
            return [
                .active,
                .baseline,
                .suppressed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .baseline: return "Baseline"
            case .suppressed: return "Suppressed"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchLogsClientTypes {
    /// This structure represents one anomaly that has been found by a logs anomaly detector. For more information about patterns and anomalies, see [CreateLogAnomalyDetector](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateLogAnomalyDetector.html).
    public struct Anomaly {
        /// Specifies whether this anomaly is still ongoing.
        /// This member is required.
        public var active: Swift.Bool?
        /// The ARN of the anomaly detector that identified this anomaly.
        /// This member is required.
        public var anomalyDetectorArn: Swift.String?
        /// The unique ID that CloudWatch Logs assigned to this anomaly.
        /// This member is required.
        public var anomalyId: Swift.String?
        /// A human-readable description of the anomaly. This description is generated by CloudWatch Logs.
        /// This member is required.
        public var description: Swift.String?
        /// The date and time when the anomaly detector first saw this anomaly. It is specified as epoch time, which is the number of seconds since January 1, 1970, 00:00:00 UTC.
        /// This member is required.
        public var firstSeen: Swift.Int
        /// A map showing times when the anomaly detector ran, and the number of occurrences of this anomaly that were detected at each of those runs. The times are specified in epoch time, which is the number of seconds since January 1, 1970, 00:00:00 UTC.
        /// This member is required.
        public var histogram: [Swift.String: Swift.Int]?
        /// If this anomaly is suppressed, this field is true if the suppression is because the pattern is suppressed. If false, then only this particular anomaly is suppressed.
        public var isPatternLevelSuppression: Swift.Bool?
        /// The date and time when the anomaly detector most recently saw this anomaly. It is specified as epoch time, which is the number of seconds since January 1, 1970, 00:00:00 UTC.
        /// This member is required.
        public var lastSeen: Swift.Int
        /// An array of ARNS of the log groups that contained log events considered to be part of this anomaly.
        /// This member is required.
        public var logGroupArnList: [Swift.String]?
        /// An array of sample log event messages that are considered to be part of this anomaly.
        /// This member is required.
        public var logSamples: [CloudWatchLogsClientTypes.LogEvent]?
        /// The ID of the pattern used to help identify this anomaly.
        /// This member is required.
        public var patternId: Swift.String?
        /// The pattern used to help identify this anomaly, in regular expression format.
        public var patternRegex: Swift.String?
        /// The pattern used to help identify this anomaly, in string format.
        /// This member is required.
        public var patternString: Swift.String?
        /// An array of structures where each structure contains information about one token that makes up the pattern.
        /// This member is required.
        public var patternTokens: [CloudWatchLogsClientTypes.PatternToken]?
        /// The priority level of this anomaly, as determined by CloudWatch Logs. Priority is computed based on log severity labels such as FATAL and ERROR and the amount of deviation from the baseline. Possible values are HIGH, MEDIUM, and LOW.
        public var priority: Swift.String?
        /// Indicates the current state of this anomaly. If it is still being treated as an anomaly, the value is Active. If you have suppressed this anomaly by using the [UpdateAnomaly](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateAnomaly.html) operation, the value is Suppressed. If this behavior is now considered to be normal, the value is Baseline.
        /// This member is required.
        public var state: CloudWatchLogsClientTypes.State?
        /// Indicates whether this anomaly is currently suppressed. To suppress an anomaly, use [UpdateAnomaly](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateAnomaly.html).
        public var suppressed: Swift.Bool?
        /// If the anomaly is suppressed, this indicates when it was suppressed.
        public var suppressedDate: Swift.Int
        /// If the anomaly is suppressed, this indicates when the suppression will end. If this value is 0, the anomaly was suppressed with no expiration, with the INFINITE value.
        public var suppressedUntil: Swift.Int

        public init(
            active: Swift.Bool? = nil,
            anomalyDetectorArn: Swift.String? = nil,
            anomalyId: Swift.String? = nil,
            description: Swift.String? = nil,
            firstSeen: Swift.Int = 0,
            histogram: [Swift.String: Swift.Int]? = nil,
            isPatternLevelSuppression: Swift.Bool? = nil,
            lastSeen: Swift.Int = 0,
            logGroupArnList: [Swift.String]? = nil,
            logSamples: [CloudWatchLogsClientTypes.LogEvent]? = nil,
            patternId: Swift.String? = nil,
            patternRegex: Swift.String? = nil,
            patternString: Swift.String? = nil,
            patternTokens: [CloudWatchLogsClientTypes.PatternToken]? = nil,
            priority: Swift.String? = nil,
            state: CloudWatchLogsClientTypes.State? = nil,
            suppressed: Swift.Bool? = nil,
            suppressedDate: Swift.Int = 0,
            suppressedUntil: Swift.Int = 0
        )
        {
            self.active = active
            self.anomalyDetectorArn = anomalyDetectorArn
            self.anomalyId = anomalyId
            self.description = description
            self.firstSeen = firstSeen
            self.histogram = histogram
            self.isPatternLevelSuppression = isPatternLevelSuppression
            self.lastSeen = lastSeen
            self.logGroupArnList = logGroupArnList
            self.logSamples = logSamples
            self.patternId = patternId
            self.patternRegex = patternRegex
            self.patternString = patternString
            self.patternTokens = patternTokens
            self.priority = priority
            self.state = state
            self.suppressed = suppressed
            self.suppressedDate = suppressedDate
            self.suppressedUntil = suppressedUntil
        }
    }

}

extension CloudWatchLogsClientTypes {

    public enum AnomalyDetectorStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case analyzing
        case deleted
        case failed
        case initializing
        case paused
        case training
        case sdkUnknown(Swift.String)

        public static var allCases: [AnomalyDetectorStatus] {
            return [
                .analyzing,
                .deleted,
                .failed,
                .initializing,
                .paused,
                .training
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .analyzing: return "ANALYZING"
            case .deleted: return "DELETED"
            case .failed: return "FAILED"
            case .initializing: return "INITIALIZING"
            case .paused: return "PAUSED"
            case .training: return "TRAINING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchLogsClientTypes {

    public enum EvaluationFrequency: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fifteenMin
        case fiveMin
        case oneHour
        case oneMin
        case tenMin
        case thirtyMin
        case sdkUnknown(Swift.String)

        public static var allCases: [EvaluationFrequency] {
            return [
                .fifteenMin,
                .fiveMin,
                .oneHour,
                .oneMin,
                .tenMin,
                .thirtyMin
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fifteenMin: return "FIFTEEN_MIN"
            case .fiveMin: return "FIVE_MIN"
            case .oneHour: return "ONE_HOUR"
            case .oneMin: return "ONE_MIN"
            case .tenMin: return "TEN_MIN"
            case .thirtyMin: return "THIRTY_MIN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchLogsClientTypes {
    /// Contains information about one anomaly detector in the account.
    public struct AnomalyDetector {
        /// The ARN of the anomaly detector.
        public var anomalyDetectorArn: Swift.String?
        /// Specifies the current status of the anomaly detector. To pause an anomaly detector, use the enabled parameter in the [UpdateLogAnomalyDetector](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateLogAnomalyDetector.html) operation.
        public var anomalyDetectorStatus: CloudWatchLogsClientTypes.AnomalyDetectorStatus?
        /// The number of days used as the life cycle of anomalies. After this time, anomalies are automatically baselined and the anomaly detector model will treat new occurrences of similar event as normal.
        public var anomalyVisibilityTime: Swift.Int?
        /// The date and time when this anomaly detector was created.
        public var creationTimeStamp: Swift.Int
        /// The name of the anomaly detector.
        public var detectorName: Swift.String?
        /// Specifies how often the anomaly detector runs and look for anomalies.
        public var evaluationFrequency: CloudWatchLogsClientTypes.EvaluationFrequency?
        /// A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.
        public var filterPattern: Swift.String?
        /// The ID of the KMS key assigned to this anomaly detector, if any.
        public var kmsKeyId: Swift.String?
        /// The date and time when this anomaly detector was most recently modified.
        public var lastModifiedTimeStamp: Swift.Int
        /// A list of the ARNs of the log groups that this anomaly detector watches.
        public var logGroupArnList: [Swift.String]?

        public init(
            anomalyDetectorArn: Swift.String? = nil,
            anomalyDetectorStatus: CloudWatchLogsClientTypes.AnomalyDetectorStatus? = nil,
            anomalyVisibilityTime: Swift.Int? = nil,
            creationTimeStamp: Swift.Int = 0,
            detectorName: Swift.String? = nil,
            evaluationFrequency: CloudWatchLogsClientTypes.EvaluationFrequency? = nil,
            filterPattern: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            lastModifiedTimeStamp: Swift.Int = 0,
            logGroupArnList: [Swift.String]? = nil
        )
        {
            self.anomalyDetectorArn = anomalyDetectorArn
            self.anomalyDetectorStatus = anomalyDetectorStatus
            self.anomalyVisibilityTime = anomalyVisibilityTime
            self.creationTimeStamp = creationTimeStamp
            self.detectorName = detectorName
            self.evaluationFrequency = evaluationFrequency
            self.filterPattern = filterPattern
            self.kmsKeyId = kmsKeyId
            self.lastModifiedTimeStamp = lastModifiedTimeStamp
            self.logGroupArnList = logGroupArnList
        }
    }

}

/// A parameter is specified incorrectly.
public struct InvalidParameterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidParameterException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Multiple concurrent requests to update the same resource were in conflict.
public struct OperationAbortedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "OperationAbortedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified resource does not exist.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The service cannot complete the request.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AssociateKmsKeyInput {
    /// The Amazon Resource Name (ARN) of the KMS key to use when encrypting log data. This must be a symmetric KMS key. For more information, see [Amazon Resource Names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms) and [Using Symmetric and Asymmetric Keys](https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html).
    /// This member is required.
    public var kmsKeyId: Swift.String?
    /// The name of the log group. In your AssociateKmsKey operation, you must specify either the resourceIdentifier parameter or the logGroup parameter, but you can't specify both.
    public var logGroupName: Swift.String?
    /// Specifies the target for this operation. You must specify one of the following:
    ///
    /// * Specify the following ARN to have future [GetQueryResults](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_GetQueryResults.html) operations in this account encrypt the results with the specified KMS key. Replace REGION and ACCOUNT_ID with your Region and account ID. arn:aws:logs:REGION:ACCOUNT_ID:query-result:*
    ///
    /// * Specify the ARN of a log group to have CloudWatch Logs use the KMS key to encrypt log events that are ingested and stored by that log group. The log group ARN must be in the following format. Replace REGION and ACCOUNT_ID with your Region and account ID. arn:aws:logs:REGION:ACCOUNT_ID:log-group:LOG_GROUP_NAME
    ///
    ///
    /// In your AssociateKmsKey operation, you must specify either the resourceIdentifier parameter or the logGroup parameter, but you can't specify both.
    public var resourceIdentifier: Swift.String?

    public init(
        kmsKeyId: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        resourceIdentifier: Swift.String? = nil
    )
    {
        self.kmsKeyId = kmsKeyId
        self.logGroupName = logGroupName
        self.resourceIdentifier = resourceIdentifier
    }
}

/// The operation is not valid on the specified resource.
public struct InvalidOperationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidOperationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CancelExportTaskInput {
    /// The ID of the export task.
    /// This member is required.
    public var taskId: Swift.String?

    public init(
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

extension CloudWatchLogsClientTypes {

    public enum OutputFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case json
        case parquet
        case plain
        case raw
        case w3c
        case sdkUnknown(Swift.String)

        public static var allCases: [OutputFormat] {
            return [
                .json,
                .parquet,
                .plain,
                .raw,
                .w3c
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .json: return "json"
            case .parquet: return "parquet"
            case .plain: return "plain"
            case .raw: return "raw"
            case .w3c: return "w3c"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchLogsClientTypes {
    /// This structure contains delivery configurations that apply only when the delivery destination resource is an S3 bucket.
    public struct S3DeliveryConfiguration {
        /// This parameter causes the S3 objects that contain delivered logs to use a prefix structure that allows for integration with Apache Hive.
        public var enableHiveCompatiblePath: Swift.Bool?
        /// This string allows re-configuring the S3 object prefix to contain either static or variable sections. The valid variables to use in the suffix path will vary by each log source. See ConfigurationTemplate$allowedSuffixPathFields for more info on what values are supported in the suffix path for each log source.
        public var suffixPath: Swift.String?

        public init(
            enableHiveCompatiblePath: Swift.Bool? = nil,
            suffixPath: Swift.String? = nil
        )
        {
            self.enableHiveCompatiblePath = enableHiveCompatiblePath
            self.suffixPath = suffixPath
        }
    }

}

extension CloudWatchLogsClientTypes {
    /// This structure contains the default values that are used for each configuration parameter when you use [CreateDelivery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html) to create a deliver under the current service type, resource type, and log type.
    public struct ConfigurationTemplateDeliveryConfigValues {
        /// The default field delimiter that is used in a [CreateDelivery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html) operation when the field delimiter is not specified in that operation. The field delimiter is used only when the final output delivery is in Plain, W3C, or Raw format.
        public var fieldDelimiter: Swift.String?
        /// The default record fields that will be delivered when a list of record fields is not provided in a [CreateDelivery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html) operation.
        public var recordFields: [Swift.String]?
        /// The delivery parameters that are used when you create a delivery to a delivery destination that is an S3 Bucket.
        public var s3DeliveryConfiguration: CloudWatchLogsClientTypes.S3DeliveryConfiguration?

        public init(
            fieldDelimiter: Swift.String? = nil,
            recordFields: [Swift.String]? = nil,
            s3DeliveryConfiguration: CloudWatchLogsClientTypes.S3DeliveryConfiguration? = nil
        )
        {
            self.fieldDelimiter = fieldDelimiter
            self.recordFields = recordFields
            self.s3DeliveryConfiguration = s3DeliveryConfiguration
        }
    }

}

extension CloudWatchLogsClientTypes {

    public enum DeliveryDestinationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cwl
        case fh
        case s3
        case sdkUnknown(Swift.String)

        public static var allCases: [DeliveryDestinationType] {
            return [
                .cwl,
                .fh,
                .s3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cwl: return "CWL"
            case .fh: return "FH"
            case .s3: return "S3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchLogsClientTypes {
    /// A structure containing information about the deafult settings and available settings that you can use to configure a [delivery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_Delivery.html) or a [delivery destination](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeliveryDestination.html).
    public struct ConfigurationTemplate {
        /// The action permissions that a caller needs to have to be able to successfully create a delivery source on the desired resource type when calling [PutDeliverySource](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDeliverySource.html).
        public var allowedActionForAllowVendedLogsDeliveryForResource: Swift.String?
        /// The valid values that a caller can use as field delimiters when calling [CreateDelivery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html) or [UpdateDeliveryConfiguration](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateDeliveryConfiguration.html) on a delivery that delivers in Plain, W3C, or Raw format.
        public var allowedFieldDelimiters: [Swift.String]?
        /// The allowed fields that a caller can use in the recordFields parameter of a [CreateDelivery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html) or [UpdateDeliveryConfiguration](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateDeliveryConfiguration.html) operation.
        public var allowedFields: [CloudWatchLogsClientTypes.RecordField]?
        /// The list of delivery destination output formats that are supported by this log source.
        public var allowedOutputFormats: [CloudWatchLogsClientTypes.OutputFormat]?
        /// The list of variable fields that can be used in the suffix path of a delivery that delivers to an S3 bucket.
        public var allowedSuffixPathFields: [Swift.String]?
        /// A mapping that displays the default value of each property within a delivery’s configuration, if it is not specified in the request.
        public var defaultDeliveryConfigValues: CloudWatchLogsClientTypes.ConfigurationTemplateDeliveryConfigValues?
        /// A string specifying which destination type this configuration template applies to.
        public var deliveryDestinationType: CloudWatchLogsClientTypes.DeliveryDestinationType?
        /// A string specifying which log type this configuration template applies to.
        public var logType: Swift.String?
        /// A string specifying which resource type this configuration template applies to.
        public var resourceType: Swift.String?
        /// A string specifying which service this configuration template applies to. For more information about supported services see [Enable logging from Amazon Web Services services.](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html).
        public var service: Swift.String?

        public init(
            allowedActionForAllowVendedLogsDeliveryForResource: Swift.String? = nil,
            allowedFieldDelimiters: [Swift.String]? = nil,
            allowedFields: [CloudWatchLogsClientTypes.RecordField]? = nil,
            allowedOutputFormats: [CloudWatchLogsClientTypes.OutputFormat]? = nil,
            allowedSuffixPathFields: [Swift.String]? = nil,
            defaultDeliveryConfigValues: CloudWatchLogsClientTypes.ConfigurationTemplateDeliveryConfigValues? = nil,
            deliveryDestinationType: CloudWatchLogsClientTypes.DeliveryDestinationType? = nil,
            logType: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            service: Swift.String? = nil
        )
        {
            self.allowedActionForAllowVendedLogsDeliveryForResource = allowedActionForAllowVendedLogsDeliveryForResource
            self.allowedFieldDelimiters = allowedFieldDelimiters
            self.allowedFields = allowedFields
            self.allowedOutputFormats = allowedOutputFormats
            self.allowedSuffixPathFields = allowedSuffixPathFields
            self.defaultDeliveryConfigValues = defaultDeliveryConfigValues
            self.deliveryDestinationType = deliveryDestinationType
            self.logType = logType
            self.resourceType = resourceType
            self.service = service
        }
    }

}

/// This operation attempted to create a resource that already exists.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This request exceeds a service quota.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was throttled because of quota limits.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// One of the parameters for the request is not valid.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateDeliveryInput {
    /// The ARN of the delivery destination to use for this delivery.
    /// This member is required.
    public var deliveryDestinationArn: Swift.String?
    /// The name of the delivery source to use for this delivery.
    /// This member is required.
    public var deliverySourceName: Swift.String?
    /// The field delimiter to use between record fields when the final output format of a delivery is in Plain, W3C, or Raw format.
    public var fieldDelimiter: Swift.String?
    /// The list of record fields to be delivered to the destination, in order. If the delivery’s log source has mandatory fields, they must be included in this list.
    public var recordFields: [Swift.String]?
    /// This structure contains parameters that are valid only when the delivery’s delivery destination is an S3 bucket.
    public var s3DeliveryConfiguration: CloudWatchLogsClientTypes.S3DeliveryConfiguration?
    /// An optional list of key-value pairs to associate with the resource. For more information about tagging, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html)
    public var tags: [Swift.String: Swift.String]?

    public init(
        deliveryDestinationArn: Swift.String? = nil,
        deliverySourceName: Swift.String? = nil,
        fieldDelimiter: Swift.String? = nil,
        recordFields: [Swift.String]? = nil,
        s3DeliveryConfiguration: CloudWatchLogsClientTypes.S3DeliveryConfiguration? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.deliveryDestinationArn = deliveryDestinationArn
        self.deliverySourceName = deliverySourceName
        self.fieldDelimiter = fieldDelimiter
        self.recordFields = recordFields
        self.s3DeliveryConfiguration = s3DeliveryConfiguration
        self.tags = tags
    }
}

extension CloudWatchLogsClientTypes {
    /// This structure contains information about one delivery in your account. A delivery is a connection between a logical delivery source and a logical delivery destination. For more information, see [CreateDelivery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html). You can't update an existing delivery. You can only create and delete deliveries.
    public struct Delivery {
        /// The Amazon Resource Name (ARN) that uniquely identifies this delivery.
        public var arn: Swift.String?
        /// The ARN of the delivery destination that is associated with this delivery.
        public var deliveryDestinationArn: Swift.String?
        /// Displays whether the delivery destination associated with this delivery is CloudWatch Logs, Amazon S3, or Firehose.
        public var deliveryDestinationType: CloudWatchLogsClientTypes.DeliveryDestinationType?
        /// The name of the delivery source that is associated with this delivery.
        public var deliverySourceName: Swift.String?
        /// The field delimiter that is used between record fields when the final output format of a delivery is in Plain, W3C, or Raw format.
        public var fieldDelimiter: Swift.String?
        /// The unique ID that identifies this delivery in your account.
        public var id: Swift.String?
        /// The record fields used in this delivery.
        public var recordFields: [Swift.String]?
        /// This structure contains delivery configurations that apply only when the delivery destination resource is an S3 bucket.
        public var s3DeliveryConfiguration: CloudWatchLogsClientTypes.S3DeliveryConfiguration?
        /// The tags that have been assigned to this delivery.
        public var tags: [Swift.String: Swift.String]?

        public init(
            arn: Swift.String? = nil,
            deliveryDestinationArn: Swift.String? = nil,
            deliveryDestinationType: CloudWatchLogsClientTypes.DeliveryDestinationType? = nil,
            deliverySourceName: Swift.String? = nil,
            fieldDelimiter: Swift.String? = nil,
            id: Swift.String? = nil,
            recordFields: [Swift.String]? = nil,
            s3DeliveryConfiguration: CloudWatchLogsClientTypes.S3DeliveryConfiguration? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.arn = arn
            self.deliveryDestinationArn = deliveryDestinationArn
            self.deliveryDestinationType = deliveryDestinationType
            self.deliverySourceName = deliverySourceName
            self.fieldDelimiter = fieldDelimiter
            self.id = id
            self.recordFields = recordFields
            self.s3DeliveryConfiguration = s3DeliveryConfiguration
            self.tags = tags
        }
    }

}

public struct CreateDeliveryOutput {
    /// A structure that contains information about the delivery that you just created.
    public var delivery: CloudWatchLogsClientTypes.Delivery?

    public init(
        delivery: CloudWatchLogsClientTypes.Delivery? = nil
    )
    {
        self.delivery = delivery
    }
}

/// You have reached the maximum number of resources that can be created.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified resource already exists.
public struct ResourceAlreadyExistsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceAlreadyExistsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateExportTaskInput {
    /// The name of S3 bucket for the exported log data. The bucket must be in the same Amazon Web Services Region.
    /// This member is required.
    public var destination: Swift.String?
    /// The prefix used as the start of the key for every object exported. If you don't specify a value, the default is exportedlogs.
    public var destinationPrefix: Swift.String?
    /// The start time of the range for the request, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp earlier than this time are not exported.
    /// This member is required.
    public var from: Swift.Int?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// Export only log streams that match the provided prefix. If you don't specify a value, no prefix filter is applied.
    public var logStreamNamePrefix: Swift.String?
    /// The name of the export task.
    public var taskName: Swift.String?
    /// The end time of the range for the request, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not exported. You must specify a time that is not earlier than when this log group was created.
    /// This member is required.
    public var to: Swift.Int?

    public init(
        destination: Swift.String? = nil,
        destinationPrefix: Swift.String? = nil,
        from: Swift.Int? = nil,
        logGroupName: Swift.String? = nil,
        logStreamNamePrefix: Swift.String? = nil,
        taskName: Swift.String? = nil,
        to: Swift.Int? = nil
    )
    {
        self.destination = destination
        self.destinationPrefix = destinationPrefix
        self.from = from
        self.logGroupName = logGroupName
        self.logStreamNamePrefix = logStreamNamePrefix
        self.taskName = taskName
        self.to = to
    }
}

public struct CreateExportTaskOutput {
    /// The ID of the export task.
    public var taskId: Swift.String?

    public init(
        taskId: Swift.String? = nil
    )
    {
        self.taskId = taskId
    }
}

public struct CreateLogAnomalyDetectorInput {
    /// The number of days to have visibility on an anomaly. After this time period has elapsed for an anomaly, it will be automatically baselined and the anomaly detector will treat new occurrences of a similar anomaly as normal. Therefore, if you do not correct the cause of an anomaly during the time period specified in anomalyVisibilityTime, it will be considered normal going forward and will not be detected as an anomaly.
    public var anomalyVisibilityTime: Swift.Int?
    /// A name for this anomaly detector.
    public var detectorName: Swift.String?
    /// Specifies how often the anomaly detector is to run and look for anomalies. Set this value according to the frequency that the log group receives new logs. For example, if the log group receives new log events every 10 minutes, then 15 minutes might be a good setting for evaluationFrequency .
    public var evaluationFrequency: CloudWatchLogsClientTypes.EvaluationFrequency?
    /// You can use this parameter to limit the anomaly detection model to examine only log events that match the pattern you specify here. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
    public var filterPattern: Swift.String?
    /// Optionally assigns a KMS key to secure this anomaly detector and its findings. If a key is assigned, the anomalies found and the model used by this detector are encrypted at rest with the key. If a key is assigned to an anomaly detector, a user must have permissions for both this key and for the anomaly detector to retrieve information about the anomalies that it finds. For more information about using a KMS key and to see the required IAM policy, see [Use a KMS key with an anomaly detector](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/LogsAnomalyDetection-KMS.html).
    public var kmsKeyId: Swift.String?
    /// An array containing the ARN of the log group that this anomaly detector will watch. You can specify only one log group ARN.
    /// This member is required.
    public var logGroupArnList: [Swift.String]?
    /// An optional list of key-value pairs to associate with the resource. For more information about tagging, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html)
    public var tags: [Swift.String: Swift.String]?

    public init(
        anomalyVisibilityTime: Swift.Int? = nil,
        detectorName: Swift.String? = nil,
        evaluationFrequency: CloudWatchLogsClientTypes.EvaluationFrequency? = nil,
        filterPattern: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        logGroupArnList: [Swift.String]? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.anomalyVisibilityTime = anomalyVisibilityTime
        self.detectorName = detectorName
        self.evaluationFrequency = evaluationFrequency
        self.filterPattern = filterPattern
        self.kmsKeyId = kmsKeyId
        self.logGroupArnList = logGroupArnList
        self.tags = tags
    }
}

public struct CreateLogAnomalyDetectorOutput {
    /// The ARN of the log anomaly detector that you just created.
    public var anomalyDetectorArn: Swift.String?

    public init(
        anomalyDetectorArn: Swift.String? = nil
    )
    {
        self.anomalyDetectorArn = anomalyDetectorArn
    }
}

extension CloudWatchLogsClientTypes {

    public enum LogGroupClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case infrequentAccess
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [LogGroupClass] {
            return [
                .infrequentAccess,
                .standard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .infrequentAccess: return "INFREQUENT_ACCESS"
            case .standard: return "STANDARD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateLogGroupInput {
    /// The Amazon Resource Name (ARN) of the KMS key to use when encrypting log data. For more information, see [Amazon Resource Names](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms).
    public var kmsKeyId: Swift.String?
    /// Use this parameter to specify the log group class for this log group. There are two classes:
    ///
    /// * The Standard log class supports all CloudWatch Logs features.
    ///
    /// * The Infrequent Access log class supports a subset of CloudWatch Logs features and incurs lower costs.
    ///
    ///
    /// If you omit this parameter, the default of STANDARD is used. The value of logGroupClass can't be changed after a log group is created. For details about the features supported by each class, see [Log classes](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch_Logs_Log_Classes.html)
    public var logGroupClass: CloudWatchLogsClientTypes.LogGroupClass?
    /// A name for the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The key-value pairs to use for the tags. You can grant users access to certain log groups while preventing them from accessing other log groups. To do so, tag your groups and use IAM policies that refer to those tags. To assign tags when you create a log group, you must have either the logs:TagResource or logs:TagLogGroup permission. For more information about tagging, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html). For more information about using tags to control access, see [Controlling access to Amazon Web Services resources using tags](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html).
    public var tags: [Swift.String: Swift.String]?

    public init(
        kmsKeyId: Swift.String? = nil,
        logGroupClass: CloudWatchLogsClientTypes.LogGroupClass? = nil,
        logGroupName: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.kmsKeyId = kmsKeyId
        self.logGroupClass = logGroupClass
        self.logGroupName = logGroupName
        self.tags = tags
    }
}

public struct CreateLogStreamInput {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The name of the log stream.
    /// This member is required.
    public var logStreamName: Swift.String?

    public init(
        logGroupName: Swift.String? = nil,
        logStreamName: Swift.String? = nil
    )
    {
        self.logGroupName = logGroupName
        self.logStreamName = logStreamName
    }
}

/// The event was already logged. PutLogEvents actions are now always accepted and never return DataAlreadyAcceptedException regardless of whether a given batch of log events has already been accepted.
public struct DataAlreadyAcceptedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var expectedSequenceToken: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "DataAlreadyAcceptedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        expectedSequenceToken: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.expectedSequenceToken = expectedSequenceToken
        self.properties.message = message
    }
}

extension CloudWatchLogsClientTypes {

    public enum DataProtectionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case activated
        case archived
        case deleted
        case disabled
        case sdkUnknown(Swift.String)

        public static var allCases: [DataProtectionStatus] {
            return [
                .activated,
                .archived,
                .deleted,
                .disabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .activated: return "ACTIVATED"
            case .archived: return "ARCHIVED"
            case .deleted: return "DELETED"
            case .disabled: return "DISABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DeleteAccountPolicyInput {
    /// The name of the policy to delete.
    /// This member is required.
    public var policyName: Swift.String?
    /// The type of policy to delete.
    /// This member is required.
    public var policyType: CloudWatchLogsClientTypes.PolicyType?

    public init(
        policyName: Swift.String? = nil,
        policyType: CloudWatchLogsClientTypes.PolicyType? = nil
    )
    {
        self.policyName = policyName
        self.policyType = policyType
    }
}

public struct DeleteDataProtectionPolicyInput {
    /// The name or ARN of the log group that you want to delete the data protection policy for.
    /// This member is required.
    public var logGroupIdentifier: Swift.String?

    public init(
        logGroupIdentifier: Swift.String? = nil
    )
    {
        self.logGroupIdentifier = logGroupIdentifier
    }
}

public struct DeleteDeliveryInput {
    /// The unique ID of the delivery to delete. You can find the ID of a delivery with the [DescribeDeliveries](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeDeliveries.html) operation.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct DeleteDeliveryDestinationInput {
    /// The name of the delivery destination that you want to delete. You can find a list of delivery destionation names by using the [DescribeDeliveryDestinations](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeDeliveryDestinations.html) operation.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteDeliveryDestinationPolicyInput {
    /// The name of the delivery destination that you want to delete the policy for.
    /// This member is required.
    public var deliveryDestinationName: Swift.String?

    public init(
        deliveryDestinationName: Swift.String? = nil
    )
    {
        self.deliveryDestinationName = deliveryDestinationName
    }
}

public struct DeleteDeliverySourceInput {
    /// The name of the delivery source that you want to delete.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteDestinationInput {
    /// The name of the destination.
    /// This member is required.
    public var destinationName: Swift.String?

    public init(
        destinationName: Swift.String? = nil
    )
    {
        self.destinationName = destinationName
    }
}

public struct DeleteLogAnomalyDetectorInput {
    /// The ARN of the anomaly detector to delete. You can find the ARNs of log anomaly detectors in your account by using the [ListLogAnomalyDetectors](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListLogAnomalyDetectors.html) operation.
    /// This member is required.
    public var anomalyDetectorArn: Swift.String?

    public init(
        anomalyDetectorArn: Swift.String? = nil
    )
    {
        self.anomalyDetectorArn = anomalyDetectorArn
    }
}

public struct DeleteLogGroupInput {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?

    public init(
        logGroupName: Swift.String? = nil
    )
    {
        self.logGroupName = logGroupName
    }
}

public struct DeleteLogStreamInput {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The name of the log stream.
    /// This member is required.
    public var logStreamName: Swift.String?

    public init(
        logGroupName: Swift.String? = nil,
        logStreamName: Swift.String? = nil
    )
    {
        self.logGroupName = logGroupName
        self.logStreamName = logStreamName
    }
}

public struct DeleteMetricFilterInput {
    /// The name of the metric filter.
    /// This member is required.
    public var filterName: Swift.String?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?

    public init(
        filterName: Swift.String? = nil,
        logGroupName: Swift.String? = nil
    )
    {
        self.filterName = filterName
        self.logGroupName = logGroupName
    }
}

public struct DeleteQueryDefinitionInput {
    /// The ID of the query definition that you want to delete. You can use [DescribeQueryDefinitions](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeQueryDefinitions.html) to retrieve the IDs of your saved query definitions.
    /// This member is required.
    public var queryDefinitionId: Swift.String?

    public init(
        queryDefinitionId: Swift.String? = nil
    )
    {
        self.queryDefinitionId = queryDefinitionId
    }
}

public struct DeleteQueryDefinitionOutput {
    /// A value of TRUE indicates that the operation succeeded. FALSE indicates that the operation failed.
    public var success: Swift.Bool

    public init(
        success: Swift.Bool = false
    )
    {
        self.success = success
    }
}

public struct DeleteResourcePolicyInput {
    /// The name of the policy to be revoked. This parameter is required.
    public var policyName: Swift.String?

    public init(
        policyName: Swift.String? = nil
    )
    {
        self.policyName = policyName
    }
}

public struct DeleteRetentionPolicyInput {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?

    public init(
        logGroupName: Swift.String? = nil
    )
    {
        self.logGroupName = logGroupName
    }
}

public struct DeleteSubscriptionFilterInput {
    /// The name of the subscription filter.
    /// This member is required.
    public var filterName: Swift.String?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?

    public init(
        filterName: Swift.String? = nil,
        logGroupName: Swift.String? = nil
    )
    {
        self.filterName = filterName
        self.logGroupName = logGroupName
    }
}

extension CloudWatchLogsClientTypes {
    /// A structure that contains information about one logs delivery destination.
    public struct DeliveryDestinationConfiguration {
        /// The ARN of the Amazon Web Services destination that this delivery destination represents. That Amazon Web Services destination can be a log group in CloudWatch Logs, an Amazon S3 bucket, or a delivery stream in Firehose.
        /// This member is required.
        public var destinationResourceArn: Swift.String?

        public init(
            destinationResourceArn: Swift.String? = nil
        )
        {
            self.destinationResourceArn = destinationResourceArn
        }
    }

}

extension CloudWatchLogsClientTypes {
    /// This structure contains information about one delivery destination in your account. A delivery destination is an Amazon Web Services resource that represents an Amazon Web Services service that logs can be sent to. CloudWatch Logs, Amazon S3, are supported as Firehose delivery destinations. To configure logs delivery between a supported Amazon Web Services service and a destination, you must do the following:
    ///
    /// * Create a delivery source, which is a logical object that represents the resource that is actually sending the logs. For more information, see [PutDeliverySource](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDeliverySource.html).
    ///
    /// * Create a delivery destination, which is a logical object that represents the actual delivery destination.
    ///
    /// * If you are delivering logs cross-account, you must use [PutDeliveryDestinationPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDeliveryDestinationPolicy.html) in the destination account to assign an IAM policy to the destination. This policy allows delivery to that destination.
    ///
    /// * Create a delivery by pairing exactly one delivery source and one delivery destination. For more information, see [CreateDelivery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html).
    ///
    ///
    /// You can configure a single delivery source to send logs to multiple destinations by creating multiple deliveries. You can also create multiple deliveries to configure multiple delivery sources to send logs to the same delivery destination.
    public struct DeliveryDestination {
        /// The Amazon Resource Name (ARN) that uniquely identifies this delivery destination.
        public var arn: Swift.String?
        /// A structure that contains the ARN of the Amazon Web Services resource that will receive the logs.
        public var deliveryDestinationConfiguration: CloudWatchLogsClientTypes.DeliveryDestinationConfiguration?
        /// Displays whether this delivery destination is CloudWatch Logs, Amazon S3, or Firehose.
        public var deliveryDestinationType: CloudWatchLogsClientTypes.DeliveryDestinationType?
        /// The name of this delivery destination.
        public var name: Swift.String?
        /// The format of the logs that are sent to this delivery destination.
        public var outputFormat: CloudWatchLogsClientTypes.OutputFormat?
        /// The tags that have been assigned to this delivery destination.
        public var tags: [Swift.String: Swift.String]?

        public init(
            arn: Swift.String? = nil,
            deliveryDestinationConfiguration: CloudWatchLogsClientTypes.DeliveryDestinationConfiguration? = nil,
            deliveryDestinationType: CloudWatchLogsClientTypes.DeliveryDestinationType? = nil,
            name: Swift.String? = nil,
            outputFormat: CloudWatchLogsClientTypes.OutputFormat? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.arn = arn
            self.deliveryDestinationConfiguration = deliveryDestinationConfiguration
            self.deliveryDestinationType = deliveryDestinationType
            self.name = name
            self.outputFormat = outputFormat
            self.tags = tags
        }
    }

}

extension CloudWatchLogsClientTypes {
    /// This structure contains information about one delivery source in your account. A delivery source is an Amazon Web Services resource that sends logs to an Amazon Web Services destination. The destination can be CloudWatch Logs, Amazon S3, or Firehose. Only some Amazon Web Services services support being configured as a delivery source. These services are listed as Supported [V2 Permissions] in the table at [Enabling logging from Amazon Web Services services.](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/AWS-logs-and-resource-policy.html) To configure logs delivery between a supported Amazon Web Services service and a destination, you must do the following:
    ///
    /// * Create a delivery source, which is a logical object that represents the resource that is actually sending the logs. For more information, see [PutDeliverySource](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDeliverySource.html).
    ///
    /// * Create a delivery destination, which is a logical object that represents the actual delivery destination. For more information, see [PutDeliveryDestination](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDeliveryDestination.html).
    ///
    /// * If you are delivering logs cross-account, you must use [PutDeliveryDestinationPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDeliveryDestinationPolicy.html) in the destination account to assign an IAM policy to the destination. This policy allows delivery to that destination.
    ///
    /// * Create a delivery by pairing exactly one delivery source and one delivery destination. For more information, see [CreateDelivery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_CreateDelivery.html).
    ///
    ///
    /// You can configure a single delivery source to send logs to multiple destinations by creating multiple deliveries. You can also create multiple deliveries to configure multiple delivery sources to send logs to the same delivery destination.
    public struct DeliverySource {
        /// The Amazon Resource Name (ARN) that uniquely identifies this delivery source.
        public var arn: Swift.String?
        /// The type of log that the source is sending. For valid values for this parameter, see the documentation for the source service.
        public var logType: Swift.String?
        /// The unique name of the delivery source.
        public var name: Swift.String?
        /// This array contains the ARN of the Amazon Web Services resource that sends logs and is represented by this delivery source. Currently, only one ARN can be in the array.
        public var resourceArns: [Swift.String]?
        /// The Amazon Web Services service that is sending logs.
        public var service: Swift.String?
        /// The tags that have been assigned to this delivery source.
        public var tags: [Swift.String: Swift.String]?

        public init(
            arn: Swift.String? = nil,
            logType: Swift.String? = nil,
            name: Swift.String? = nil,
            resourceArns: [Swift.String]? = nil,
            service: Swift.String? = nil,
            tags: [Swift.String: Swift.String]? = nil
        )
        {
            self.arn = arn
            self.logType = logType
            self.name = name
            self.resourceArns = resourceArns
            self.service = service
            self.tags = tags
        }
    }

}

public struct DescribeAccountPoliciesInput {
    /// If you are using an account that is set up as a monitoring account for CloudWatch unified cross-account observability, you can use this to specify the account ID of a source account. If you do, the operation returns the account policy for the specified account. Currently, you can specify only one account ID in this parameter. If you omit this parameter, only the policy in the current account is returned.
    public var accountIdentifiers: [Swift.String]?
    /// Use this parameter to limit the returned policies to only the policy with the name that you specify.
    public var policyName: Swift.String?
    /// Use this parameter to limit the returned policies to only the policies that match the policy type that you specify.
    /// This member is required.
    public var policyType: CloudWatchLogsClientTypes.PolicyType?

    public init(
        accountIdentifiers: [Swift.String]? = nil,
        policyName: Swift.String? = nil,
        policyType: CloudWatchLogsClientTypes.PolicyType? = nil
    )
    {
        self.accountIdentifiers = accountIdentifiers
        self.policyName = policyName
        self.policyType = policyType
    }
}

public struct DescribeAccountPoliciesOutput {
    /// An array of structures that contain information about the CloudWatch Logs account policies that match the specified filters.
    public var accountPolicies: [CloudWatchLogsClientTypes.AccountPolicy]?

    public init(
        accountPolicies: [CloudWatchLogsClientTypes.AccountPolicy]? = nil
    )
    {
        self.accountPolicies = accountPolicies
    }
}

public struct DescribeConfigurationTemplatesInput {
    /// Use this parameter to filter the response to include only the configuration templates that apply to the delivery destination types that you specify here.
    public var deliveryDestinationTypes: [CloudWatchLogsClientTypes.DeliveryDestinationType]?
    /// Use this parameter to limit the number of configuration templates that are returned in the response.
    public var limit: Swift.Int?
    /// Use this parameter to filter the response to include only the configuration templates that apply to the log types that you specify here.
    public var logTypes: [Swift.String]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// Use this parameter to filter the response to include only the configuration templates that apply to the resource types that you specify here.
    public var resourceTypes: [Swift.String]?
    /// Use this parameter to filter the response to include only the configuration templates that apply to the Amazon Web Services service that you specify here.
    public var service: Swift.String?

    public init(
        deliveryDestinationTypes: [CloudWatchLogsClientTypes.DeliveryDestinationType]? = nil,
        limit: Swift.Int? = nil,
        logTypes: [Swift.String]? = nil,
        nextToken: Swift.String? = nil,
        resourceTypes: [Swift.String]? = nil,
        service: Swift.String? = nil
    )
    {
        self.deliveryDestinationTypes = deliveryDestinationTypes
        self.limit = limit
        self.logTypes = logTypes
        self.nextToken = nextToken
        self.resourceTypes = resourceTypes
        self.service = service
    }
}

public struct DescribeConfigurationTemplatesOutput {
    /// An array of objects, where each object describes one configuration template that matches the filters that you specified in the request.
    public var configurationTemplates: [CloudWatchLogsClientTypes.ConfigurationTemplate]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        configurationTemplates: [CloudWatchLogsClientTypes.ConfigurationTemplate]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.configurationTemplates = configurationTemplates
        self.nextToken = nextToken
    }
}

public struct DescribeDeliveriesInput {
    /// Optionally specify the maximum number of deliveries to return in the response.
    public var limit: Swift.Int?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
    }
}

public struct DescribeDeliveriesOutput {
    /// An array of structures. Each structure contains information about one delivery in the account.
    public var deliveries: [CloudWatchLogsClientTypes.Delivery]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        deliveries: [CloudWatchLogsClientTypes.Delivery]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deliveries = deliveries
        self.nextToken = nextToken
    }
}

public struct DescribeDeliveryDestinationsInput {
    /// Optionally specify the maximum number of delivery destinations to return in the response.
    public var limit: Swift.Int?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
    }
}

public struct DescribeDeliveryDestinationsOutput {
    /// An array of structures. Each structure contains information about one delivery destination in the account.
    public var deliveryDestinations: [CloudWatchLogsClientTypes.DeliveryDestination]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        deliveryDestinations: [CloudWatchLogsClientTypes.DeliveryDestination]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deliveryDestinations = deliveryDestinations
        self.nextToken = nextToken
    }
}

public struct DescribeDeliverySourcesInput {
    /// Optionally specify the maximum number of delivery sources to return in the response.
    public var limit: Swift.Int?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
    }
}

public struct DescribeDeliverySourcesOutput {
    /// An array of structures. Each structure contains information about one delivery source in the account.
    public var deliverySources: [CloudWatchLogsClientTypes.DeliverySource]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        deliverySources: [CloudWatchLogsClientTypes.DeliverySource]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deliverySources = deliverySources
        self.nextToken = nextToken
    }
}

public struct DescribeDestinationsInput {
    /// The prefix to match. If you don't specify a value, no prefix filter is applied.
    public var destinationNamePrefix: Swift.String?
    /// The maximum number of items returned. If you don't specify a value, the default maximum value of 50 items is used.
    public var limit: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init(
        destinationNamePrefix: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.destinationNamePrefix = destinationNamePrefix
        self.limit = limit
        self.nextToken = nextToken
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a cross-account destination that receives subscription log events.
    public struct Destination {
        /// An IAM policy document that governs which Amazon Web Services accounts can create subscription filters against this destination.
        public var accessPolicy: Swift.String?
        /// The ARN of this destination.
        public var arn: Swift.String?
        /// The creation time of the destination, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var creationTime: Swift.Int?
        /// The name of the destination.
        public var destinationName: Swift.String?
        /// A role for impersonation, used when delivering log events to the target.
        public var roleArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the physical target where the log events are delivered (for example, a Kinesis stream).
        public var targetArn: Swift.String?

        public init(
            accessPolicy: Swift.String? = nil,
            arn: Swift.String? = nil,
            creationTime: Swift.Int? = nil,
            destinationName: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            targetArn: Swift.String? = nil
        )
        {
            self.accessPolicy = accessPolicy
            self.arn = arn
            self.creationTime = creationTime
            self.destinationName = destinationName
            self.roleArn = roleArn
            self.targetArn = targetArn
        }
    }

}

public struct DescribeDestinationsOutput {
    /// The destinations.
    public var destinations: [CloudWatchLogsClientTypes.Destination]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        destinations: [CloudWatchLogsClientTypes.Destination]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.destinations = destinations
        self.nextToken = nextToken
    }
}

extension CloudWatchLogsClientTypes {

    public enum ExportTaskStatusCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case completed
        case failed
        case pending
        case pendingCancel
        case running
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportTaskStatusCode] {
            return [
                .cancelled,
                .completed,
                .failed,
                .pending,
                .pendingCancel,
                .running
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "CANCELLED"
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .pendingCancel: return "PENDING_CANCEL"
            case .running: return "RUNNING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeExportTasksInput {
    /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    public var limit: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?
    /// The status code of the export task. Specifying a status code filters the results to zero or more export tasks.
    public var statusCode: CloudWatchLogsClientTypes.ExportTaskStatusCode?
    /// The ID of the export task. Specifying a task ID filters the results to one or zero export tasks.
    public var taskId: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        statusCode: CloudWatchLogsClientTypes.ExportTaskStatusCode? = nil,
        taskId: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
        self.statusCode = statusCode
        self.taskId = taskId
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents the status of an export task.
    public struct ExportTaskExecutionInfo {
        /// The completion time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var completionTime: Swift.Int?
        /// The creation time of the export task, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var creationTime: Swift.Int?

        public init(
            completionTime: Swift.Int? = nil,
            creationTime: Swift.Int? = nil
        )
        {
            self.completionTime = completionTime
            self.creationTime = creationTime
        }
    }

}

extension CloudWatchLogsClientTypes {
    /// Represents the status of an export task.
    public struct ExportTaskStatus {
        /// The status code of the export task.
        public var code: CloudWatchLogsClientTypes.ExportTaskStatusCode?
        /// The status message related to the status code.
        public var message: Swift.String?

        public init(
            code: CloudWatchLogsClientTypes.ExportTaskStatusCode? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

extension CloudWatchLogsClientTypes {
    /// Represents an export task.
    public struct ExportTask {
        /// The name of the S3 bucket to which the log data was exported.
        public var destination: Swift.String?
        /// The prefix that was used as the start of Amazon S3 key for every object exported.
        public var destinationPrefix: Swift.String?
        /// Execution information about the export task.
        public var executionInfo: CloudWatchLogsClientTypes.ExportTaskExecutionInfo?
        /// The start time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp before this time are not exported.
        public var from: Swift.Int?
        /// The name of the log group from which logs data was exported.
        public var logGroupName: Swift.String?
        /// The status of the export task.
        public var status: CloudWatchLogsClientTypes.ExportTaskStatus?
        /// The ID of the export task.
        public var taskId: Swift.String?
        /// The name of the export task.
        public var taskName: Swift.String?
        /// The end time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not exported.
        public var to: Swift.Int?

        public init(
            destination: Swift.String? = nil,
            destinationPrefix: Swift.String? = nil,
            executionInfo: CloudWatchLogsClientTypes.ExportTaskExecutionInfo? = nil,
            from: Swift.Int? = nil,
            logGroupName: Swift.String? = nil,
            status: CloudWatchLogsClientTypes.ExportTaskStatus? = nil,
            taskId: Swift.String? = nil,
            taskName: Swift.String? = nil,
            to: Swift.Int? = nil
        )
        {
            self.destination = destination
            self.destinationPrefix = destinationPrefix
            self.executionInfo = executionInfo
            self.from = from
            self.logGroupName = logGroupName
            self.status = status
            self.taskId = taskId
            self.taskName = taskName
            self.to = to
        }
    }

}

public struct DescribeExportTasksOutput {
    /// The export tasks.
    public var exportTasks: [CloudWatchLogsClientTypes.ExportTask]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        exportTasks: [CloudWatchLogsClientTypes.ExportTask]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.exportTasks = exportTasks
        self.nextToken = nextToken
    }
}

public struct DescribeLogGroupsInput {
    /// When includeLinkedAccounts is set to True, use this parameter to specify the list of accounts to search. You can specify as many as 20 account IDs in the array.
    public var accountIdentifiers: [Swift.String]?
    /// If you are using a monitoring account, set this to True to have the operation return log groups in the accounts listed in accountIdentifiers. If this parameter is set to true and accountIdentifiers contains a null value, the operation returns all log groups in the monitoring account and all log groups in all source accounts that are linked to the monitoring account.
    public var includeLinkedAccounts: Swift.Bool?
    /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    public var limit: Swift.Int?
    /// Specifies the log group class for this log group. There are two classes:
    ///
    /// * The Standard log class supports all CloudWatch Logs features.
    ///
    /// * The Infrequent Access log class supports a subset of CloudWatch Logs features and incurs lower costs.
    ///
    ///
    /// For details about the features supported by each class, see [Log classes](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch_Logs_Log_Classes.html)
    public var logGroupClass: CloudWatchLogsClientTypes.LogGroupClass?
    /// If you specify a string for this parameter, the operation returns only log groups that have names that match the string based on a case-sensitive substring search. For example, if you specify Foo, log groups named FooBar, aws/Foo, and GroupFoo would match, but foo, F/o/o and Froo would not match. If you specify logGroupNamePattern in your request, then only arn, creationTime, and logGroupName are included in the response. logGroupNamePattern and logGroupNamePrefix are mutually exclusive. Only one of these parameters can be passed.
    public var logGroupNamePattern: Swift.String?
    /// The prefix to match. logGroupNamePrefix and logGroupNamePattern are mutually exclusive. Only one of these parameters can be passed.
    public var logGroupNamePrefix: Swift.String?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init(
        accountIdentifiers: [Swift.String]? = nil,
        includeLinkedAccounts: Swift.Bool? = nil,
        limit: Swift.Int? = nil,
        logGroupClass: CloudWatchLogsClientTypes.LogGroupClass? = nil,
        logGroupNamePattern: Swift.String? = nil,
        logGroupNamePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accountIdentifiers = accountIdentifiers
        self.includeLinkedAccounts = includeLinkedAccounts
        self.limit = limit
        self.logGroupClass = logGroupClass
        self.logGroupNamePattern = logGroupNamePattern
        self.logGroupNamePrefix = logGroupNamePrefix
        self.nextToken = nextToken
    }
}

extension CloudWatchLogsClientTypes {

    public enum InheritedProperty: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountDataProtection
        case sdkUnknown(Swift.String)

        public static var allCases: [InheritedProperty] {
            return [
                .accountDataProtection
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountDataProtection: return "ACCOUNT_DATA_PROTECTION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a log group.
    public struct LogGroup {
        /// The Amazon Resource Name (ARN) of the log group. This version of the ARN includes a trailing :* after the log group name. Use this version to refer to the ARN in IAM policies when specifying permissions for most API actions. The exception is when specifying permissions for [TagResource](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_TagResource.html), [UntagResource](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UntagResource.html), and [ListTagsForResource](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListTagsForResource.html). The permissions for those three actions require the ARN version that doesn't include a trailing :*.
        public var arn: Swift.String?
        /// The creation time of the log group, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var creationTime: Swift.Int?
        /// Displays whether this log group has a protection policy, or whether it had one in the past. For more information, see [PutDataProtectionPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDataProtectionPolicy.html).
        public var dataProtectionStatus: CloudWatchLogsClientTypes.DataProtectionStatus?
        /// Displays all the properties that this log group has inherited from account-level settings.
        public var inheritedProperties: [CloudWatchLogsClientTypes.InheritedProperty]?
        /// The Amazon Resource Name (ARN) of the KMS key to use when encrypting log data.
        public var kmsKeyId: Swift.String?
        /// The Amazon Resource Name (ARN) of the log group. This version of the ARN doesn't include a trailing :* after the log group name. Use this version to refer to the ARN in the following situations:
        ///
        /// * In the logGroupIdentifier input field in many CloudWatch Logs APIs.
        ///
        /// * In the resourceArn field in tagging APIs
        ///
        /// * In IAM policies, when specifying permissions for [TagResource](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_TagResource.html), [UntagResource](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UntagResource.html), and [ListTagsForResource](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListTagsForResource.html).
        public var logGroupArn: Swift.String?
        /// This specifies the log group class for this log group. There are two classes:
        ///
        /// * The Standard log class supports all CloudWatch Logs features.
        ///
        /// * The Infrequent Access log class supports a subset of CloudWatch Logs features and incurs lower costs.
        ///
        ///
        /// For details about the features supported by each class, see [Log classes](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch_Logs_Log_Classes.html)
        public var logGroupClass: CloudWatchLogsClientTypes.LogGroupClass?
        /// The name of the log group.
        public var logGroupName: Swift.String?
        /// The number of metric filters.
        public var metricFilterCount: Swift.Int?
        /// The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653. To set a log group so that its log events do not expire, use [DeleteRetentionPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html).
        public var retentionInDays: Swift.Int?
        /// The number of bytes stored.
        public var storedBytes: Swift.Int?

        public init(
            arn: Swift.String? = nil,
            creationTime: Swift.Int? = nil,
            dataProtectionStatus: CloudWatchLogsClientTypes.DataProtectionStatus? = nil,
            inheritedProperties: [CloudWatchLogsClientTypes.InheritedProperty]? = nil,
            kmsKeyId: Swift.String? = nil,
            logGroupArn: Swift.String? = nil,
            logGroupClass: CloudWatchLogsClientTypes.LogGroupClass? = nil,
            logGroupName: Swift.String? = nil,
            metricFilterCount: Swift.Int? = nil,
            retentionInDays: Swift.Int? = nil,
            storedBytes: Swift.Int? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.dataProtectionStatus = dataProtectionStatus
            self.inheritedProperties = inheritedProperties
            self.kmsKeyId = kmsKeyId
            self.logGroupArn = logGroupArn
            self.logGroupClass = logGroupClass
            self.logGroupName = logGroupName
            self.metricFilterCount = metricFilterCount
            self.retentionInDays = retentionInDays
            self.storedBytes = storedBytes
        }
    }

}

public struct DescribeLogGroupsOutput {
    /// The log groups. If the retentionInDays value is not included for a log group, then that log group's events do not expire.
    public var logGroups: [CloudWatchLogsClientTypes.LogGroup]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        logGroups: [CloudWatchLogsClientTypes.LogGroup]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.logGroups = logGroups
        self.nextToken = nextToken
    }
}

extension CloudWatchLogsClientTypes {

    public enum OrderBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case lasteventtime
        case logstreamname
        case sdkUnknown(Swift.String)

        public static var allCases: [OrderBy] {
            return [
                .lasteventtime,
                .logstreamname
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .lasteventtime: return "LastEventTime"
            case .logstreamname: return "LogStreamName"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeLogStreamsInput {
    /// If the value is true, results are returned in descending order. If the value is to false, results are returned in ascending order. The default value is false.
    public var descending: Swift.Bool?
    /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    public var limit: Swift.Int?
    /// Specify either the name or ARN of the log group to view. If the log group is in a source account and you are using a monitoring account, you must use the log group ARN. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupIdentifier: Swift.String?
    /// The name of the log group. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupName: Swift.String?
    /// The prefix to match. If orderBy is LastEventTime, you cannot specify this parameter.
    public var logStreamNamePrefix: Swift.String?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?
    /// If the value is LogStreamName, the results are ordered by log stream name. If the value is LastEventTime, the results are ordered by the event time. The default value is LogStreamName. If you order the results by event time, you cannot specify the logStreamNamePrefix parameter. lastEventTimestamp represents the time of the most recent log event in the log stream in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. lastEventTimestamp updates on an eventual consistency basis. It typically updates in less than an hour from ingestion, but in rare situations might take longer.
    public var orderBy: CloudWatchLogsClientTypes.OrderBy?

    public init(
        descending: Swift.Bool? = nil,
        limit: Swift.Int? = nil,
        logGroupIdentifier: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        logStreamNamePrefix: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        orderBy: CloudWatchLogsClientTypes.OrderBy? = nil
    )
    {
        self.descending = descending
        self.limit = limit
        self.logGroupIdentifier = logGroupIdentifier
        self.logGroupName = logGroupName
        self.logStreamNamePrefix = logStreamNamePrefix
        self.nextToken = nextToken
        self.orderBy = orderBy
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a log stream, which is a sequence of log events from a single emitter of logs.
    public struct LogStream {
        /// The Amazon Resource Name (ARN) of the log stream.
        public var arn: Swift.String?
        /// The creation time of the stream, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var creationTime: Swift.Int?
        /// The time of the first event, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var firstEventTimestamp: Swift.Int?
        /// The time of the most recent log event in the log stream in CloudWatch Logs. This number is expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. The lastEventTime value updates on an eventual consistency basis. It typically updates in less than an hour from ingestion, but in rare situations might take longer.
        public var lastEventTimestamp: Swift.Int?
        /// The ingestion time, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC The lastIngestionTime value updates on an eventual consistency basis. It typically updates in less than an hour after ingestion, but in rare situations might take longer.
        public var lastIngestionTime: Swift.Int?
        /// The name of the log stream.
        public var logStreamName: Swift.String?
        /// The number of bytes stored. Important: As of June 17, 2019, this parameter is no longer supported for log streams, and is always reported as zero. This change applies only to log streams. The storedBytes parameter for log groups is not affected.
        @available(*, deprecated, message: "Starting on June 17, 2019, this parameter will be deprecated for log streams, and will be reported as zero. This change applies only to log streams. The storedBytes parameter for log groups is not affected.")
        public var storedBytes: Swift.Int?
        /// The sequence token. The sequence token is now ignored in PutLogEvents actions. PutLogEvents actions are always accepted regardless of receiving an invalid sequence token. You don't need to obtain uploadSequenceToken to use a PutLogEvents action.
        public var uploadSequenceToken: Swift.String?

        public init(
            arn: Swift.String? = nil,
            creationTime: Swift.Int? = nil,
            firstEventTimestamp: Swift.Int? = nil,
            lastEventTimestamp: Swift.Int? = nil,
            lastIngestionTime: Swift.Int? = nil,
            logStreamName: Swift.String? = nil,
            storedBytes: Swift.Int? = nil,
            uploadSequenceToken: Swift.String? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.firstEventTimestamp = firstEventTimestamp
            self.lastEventTimestamp = lastEventTimestamp
            self.lastIngestionTime = lastIngestionTime
            self.logStreamName = logStreamName
            self.storedBytes = storedBytes
            self.uploadSequenceToken = uploadSequenceToken
        }
    }

}

public struct DescribeLogStreamsOutput {
    /// The log streams.
    public var logStreams: [CloudWatchLogsClientTypes.LogStream]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        logStreams: [CloudWatchLogsClientTypes.LogStream]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.logStreams = logStreams
        self.nextToken = nextToken
    }
}

public struct DescribeMetricFiltersInput {
    /// The prefix to match. CloudWatch Logs uses the value that you set here only if you also include the logGroupName parameter in your request.
    public var filterNamePrefix: Swift.String?
    /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    public var limit: Swift.Int?
    /// The name of the log group.
    public var logGroupName: Swift.String?
    /// Filters results to include only those with the specified metric name. If you include this parameter in your request, you must also include the metricNamespace parameter.
    public var metricName: Swift.String?
    /// Filters results to include only those in the specified namespace. If you include this parameter in your request, you must also include the metricName parameter.
    public var metricNamespace: Swift.String?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init(
        filterNamePrefix: Swift.String? = nil,
        limit: Swift.Int? = nil,
        logGroupName: Swift.String? = nil,
        metricName: Swift.String? = nil,
        metricNamespace: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filterNamePrefix = filterNamePrefix
        self.limit = limit
        self.logGroupName = logGroupName
        self.metricName = metricName
        self.metricNamespace = metricNamespace
        self.nextToken = nextToken
    }
}

extension CloudWatchLogsClientTypes {

    public enum StandardUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bits
        case bitssecond
        case bytes
        case bytessecond
        case count
        case countsecond
        case gigabits
        case gigabitssecond
        case gigabytes
        case gigabytessecond
        case kilobits
        case kilobitssecond
        case kilobytes
        case kilobytessecond
        case megabits
        case megabitssecond
        case megabytes
        case megabytessecond
        case microseconds
        case milliseconds
        case `none`
        case percent
        case seconds
        case terabits
        case terabitssecond
        case terabytes
        case terabytessecond
        case sdkUnknown(Swift.String)

        public static var allCases: [StandardUnit] {
            return [
                .bits,
                .bitssecond,
                .bytes,
                .bytessecond,
                .count,
                .countsecond,
                .gigabits,
                .gigabitssecond,
                .gigabytes,
                .gigabytessecond,
                .kilobits,
                .kilobitssecond,
                .kilobytes,
                .kilobytessecond,
                .megabits,
                .megabitssecond,
                .megabytes,
                .megabytessecond,
                .microseconds,
                .milliseconds,
                .none,
                .percent,
                .seconds,
                .terabits,
                .terabitssecond,
                .terabytes,
                .terabytessecond
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bits: return "Bits"
            case .bitssecond: return "Bits/Second"
            case .bytes: return "Bytes"
            case .bytessecond: return "Bytes/Second"
            case .count: return "Count"
            case .countsecond: return "Count/Second"
            case .gigabits: return "Gigabits"
            case .gigabitssecond: return "Gigabits/Second"
            case .gigabytes: return "Gigabytes"
            case .gigabytessecond: return "Gigabytes/Second"
            case .kilobits: return "Kilobits"
            case .kilobitssecond: return "Kilobits/Second"
            case .kilobytes: return "Kilobytes"
            case .kilobytessecond: return "Kilobytes/Second"
            case .megabits: return "Megabits"
            case .megabitssecond: return "Megabits/Second"
            case .megabytes: return "Megabytes"
            case .megabytessecond: return "Megabytes/Second"
            case .microseconds: return "Microseconds"
            case .milliseconds: return "Milliseconds"
            case .none: return "None"
            case .percent: return "Percent"
            case .seconds: return "Seconds"
            case .terabits: return "Terabits"
            case .terabitssecond: return "Terabits/Second"
            case .terabytes: return "Terabytes"
            case .terabytessecond: return "Terabytes/Second"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchLogsClientTypes {
    /// Indicates how to transform ingested log events to metric data in a CloudWatch metric.
    public struct MetricTransformation {
        /// (Optional) The value to emit when a filter pattern does not match a log event. This value can be null.
        public var defaultValue: Swift.Double?
        /// The fields to use as dimensions for the metric. One metric filter can include as many as three dimensions. Metrics extracted from log events are charged as custom metrics. To prevent unexpected high charges, do not specify high-cardinality fields such as IPAddress or requestID as dimensions. Each different value found for a dimension is treated as a separate metric and accrues charges as a separate custom metric. CloudWatch Logs disables a metric filter if it generates 1000 different name/value pairs for your specified dimensions within a certain amount of time. This helps to prevent accidental high charges. You can also set up a billing alarm to alert you if your charges are higher than expected. For more information, see [ Creating a Billing Alarm to Monitor Your Estimated Amazon Web Services Charges](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/monitor_estimated_charges_with_cloudwatch.html).
        public var dimensions: [Swift.String: Swift.String]?
        /// The name of the CloudWatch metric.
        /// This member is required.
        public var metricName: Swift.String?
        /// A custom namespace to contain your metric in CloudWatch. Use namespaces to group together metrics that are similar. For more information, see [Namespaces](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Namespace).
        /// This member is required.
        public var metricNamespace: Swift.String?
        /// The value to publish to the CloudWatch metric when a filter pattern matches a log event.
        /// This member is required.
        public var metricValue: Swift.String?
        /// The unit to assign to the metric. If you omit this, the unit is set as None.
        public var unit: CloudWatchLogsClientTypes.StandardUnit?

        public init(
            defaultValue: Swift.Double? = nil,
            dimensions: [Swift.String: Swift.String]? = nil,
            metricName: Swift.String? = nil,
            metricNamespace: Swift.String? = nil,
            metricValue: Swift.String? = nil,
            unit: CloudWatchLogsClientTypes.StandardUnit? = nil
        )
        {
            self.defaultValue = defaultValue
            self.dimensions = dimensions
            self.metricName = metricName
            self.metricNamespace = metricNamespace
            self.metricValue = metricValue
            self.unit = unit
        }
    }

}

extension CloudWatchLogsClientTypes {
    /// Metric filters express how CloudWatch Logs would extract metric observations from ingested log events and transform them into metric data in a CloudWatch metric.
    public struct MetricFilter {
        /// The creation time of the metric filter, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var creationTime: Swift.Int?
        /// The name of the metric filter.
        public var filterName: Swift.String?
        /// A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.
        public var filterPattern: Swift.String?
        /// The name of the log group.
        public var logGroupName: Swift.String?
        /// The metric transformations.
        public var metricTransformations: [CloudWatchLogsClientTypes.MetricTransformation]?

        public init(
            creationTime: Swift.Int? = nil,
            filterName: Swift.String? = nil,
            filterPattern: Swift.String? = nil,
            logGroupName: Swift.String? = nil,
            metricTransformations: [CloudWatchLogsClientTypes.MetricTransformation]? = nil
        )
        {
            self.creationTime = creationTime
            self.filterName = filterName
            self.filterPattern = filterPattern
            self.logGroupName = logGroupName
            self.metricTransformations = metricTransformations
        }
    }

}

public struct DescribeMetricFiltersOutput {
    /// The metric filters.
    public var metricFilters: [CloudWatchLogsClientTypes.MetricFilter]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        metricFilters: [CloudWatchLogsClientTypes.MetricFilter]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.metricFilters = metricFilters
        self.nextToken = nextToken
    }
}

extension CloudWatchLogsClientTypes {

    public enum QueryStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case complete
        case failed
        case running
        case scheduled
        case timeout
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [QueryStatus] {
            return [
                .cancelled,
                .complete,
                .failed,
                .running,
                .scheduled,
                .timeout,
                .unknown
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .complete: return "Complete"
            case .failed: return "Failed"
            case .running: return "Running"
            case .scheduled: return "Scheduled"
            case .timeout: return "Timeout"
            case .unknown: return "Unknown"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeQueriesInput {
    /// Limits the returned queries to only those for the specified log group.
    public var logGroupName: Swift.String?
    /// Limits the number of returned queries to the specified number.
    public var maxResults: Swift.Int?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// Limits the returned queries to only those that have the specified status. Valid values are Cancelled, Complete, Failed, Running, and Scheduled.
    public var status: CloudWatchLogsClientTypes.QueryStatus?

    public init(
        logGroupName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: CloudWatchLogsClientTypes.QueryStatus? = nil
    )
    {
        self.logGroupName = logGroupName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

extension CloudWatchLogsClientTypes {
    /// Information about one CloudWatch Logs Insights query that matches the request in a DescribeQueries operation.
    public struct QueryInfo {
        /// The date and time that this query was created.
        public var createTime: Swift.Int?
        /// The name of the log group scanned by this query.
        public var logGroupName: Swift.String?
        /// The unique ID number of this query.
        public var queryId: Swift.String?
        /// The query string used in this query.
        public var queryString: Swift.String?
        /// The status of this query. Possible values are Cancelled, Complete, Failed, Running, Scheduled, and Unknown.
        public var status: CloudWatchLogsClientTypes.QueryStatus?

        public init(
            createTime: Swift.Int? = nil,
            logGroupName: Swift.String? = nil,
            queryId: Swift.String? = nil,
            queryString: Swift.String? = nil,
            status: CloudWatchLogsClientTypes.QueryStatus? = nil
        )
        {
            self.createTime = createTime
            self.logGroupName = logGroupName
            self.queryId = queryId
            self.queryString = queryString
            self.status = status
        }
    }

}

public struct DescribeQueriesOutput {
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// The list of queries that match the request.
    public var queries: [CloudWatchLogsClientTypes.QueryInfo]?

    public init(
        nextToken: Swift.String? = nil,
        queries: [CloudWatchLogsClientTypes.QueryInfo]? = nil
    )
    {
        self.nextToken = nextToken
        self.queries = queries
    }
}

public struct DescribeQueryDefinitionsInput {
    /// Limits the number of returned query definitions to the specified number.
    public var maxResults: Swift.Int?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// Use this parameter to filter your results to only the query definitions that have names that start with the prefix you specify.
    public var queryDefinitionNamePrefix: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        queryDefinitionNamePrefix: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.queryDefinitionNamePrefix = queryDefinitionNamePrefix
    }
}

extension CloudWatchLogsClientTypes {
    /// This structure contains details about a saved CloudWatch Logs Insights query definition.
    public struct QueryDefinition {
        /// The date that the query definition was most recently modified.
        public var lastModified: Swift.Int?
        /// If this query definition contains a list of log groups that it is limited to, that list appears here.
        public var logGroupNames: [Swift.String]?
        /// The name of the query definition.
        public var name: Swift.String?
        /// The unique ID of the query definition.
        public var queryDefinitionId: Swift.String?
        /// The query string to use for this definition. For more information, see [CloudWatch Logs Insights Query Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html).
        public var queryString: Swift.String?

        public init(
            lastModified: Swift.Int? = nil,
            logGroupNames: [Swift.String]? = nil,
            name: Swift.String? = nil,
            queryDefinitionId: Swift.String? = nil,
            queryString: Swift.String? = nil
        )
        {
            self.lastModified = lastModified
            self.logGroupNames = logGroupNames
            self.name = name
            self.queryDefinitionId = queryDefinitionId
            self.queryString = queryString
        }
    }

}

public struct DescribeQueryDefinitionsOutput {
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// The list of query definitions that match your request.
    public var queryDefinitions: [CloudWatchLogsClientTypes.QueryDefinition]?

    public init(
        nextToken: Swift.String? = nil,
        queryDefinitions: [CloudWatchLogsClientTypes.QueryDefinition]? = nil
    )
    {
        self.nextToken = nextToken
        self.queryDefinitions = queryDefinitions
    }
}

public struct DescribeResourcePoliciesInput {
    /// The maximum number of resource policies to be displayed with one call of this API.
    public var limit: Swift.Int?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.limit = limit
        self.nextToken = nextToken
    }
}

extension CloudWatchLogsClientTypes {
    /// A policy enabling one or more entities to put logs to a log group in this account.
    public struct ResourcePolicy {
        /// Timestamp showing when this policy was last updated, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var lastUpdatedTime: Swift.Int?
        /// The details of the policy.
        public var policyDocument: Swift.String?
        /// The name of the resource policy.
        public var policyName: Swift.String?

        public init(
            lastUpdatedTime: Swift.Int? = nil,
            policyDocument: Swift.String? = nil,
            policyName: Swift.String? = nil
        )
        {
            self.lastUpdatedTime = lastUpdatedTime
            self.policyDocument = policyDocument
            self.policyName = policyName
        }
    }

}

public struct DescribeResourcePoliciesOutput {
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// The resource policies that exist in this account.
    public var resourcePolicies: [CloudWatchLogsClientTypes.ResourcePolicy]?

    public init(
        nextToken: Swift.String? = nil,
        resourcePolicies: [CloudWatchLogsClientTypes.ResourcePolicy]? = nil
    )
    {
        self.nextToken = nextToken
        self.resourcePolicies = resourcePolicies
    }
}

public struct DescribeSubscriptionFiltersInput {
    /// The prefix to match. If you don't specify a value, no prefix filter is applied.
    public var filterNamePrefix: Swift.String?
    /// The maximum number of items returned. If you don't specify a value, the default is up to 50 items.
    public var limit: Swift.Int?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init(
        filterNamePrefix: Swift.String? = nil,
        limit: Swift.Int? = nil,
        logGroupName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filterNamePrefix = filterNamePrefix
        self.limit = limit
        self.logGroupName = logGroupName
        self.nextToken = nextToken
    }
}

extension CloudWatchLogsClientTypes {

    /// The method used to distribute log data to the destination, which can be either random or grouped by log stream.
    public enum Distribution: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bylogstream
        case random
        case sdkUnknown(Swift.String)

        public static var allCases: [Distribution] {
            return [
                .bylogstream,
                .random
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bylogstream: return "ByLogStream"
            case .random: return "Random"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a subscription filter.
    public struct SubscriptionFilter {
        /// The creation time of the subscription filter, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var creationTime: Swift.Int?
        /// The Amazon Resource Name (ARN) of the destination.
        public var destinationArn: Swift.String?
        /// The method used to distribute log data to the destination, which can be either random or grouped by log stream.
        public var distribution: CloudWatchLogsClientTypes.Distribution?
        /// The name of the subscription filter.
        public var filterName: Swift.String?
        /// A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.
        public var filterPattern: Swift.String?
        /// The name of the log group.
        public var logGroupName: Swift.String?
        ///
        public var roleArn: Swift.String?

        public init(
            creationTime: Swift.Int? = nil,
            destinationArn: Swift.String? = nil,
            distribution: CloudWatchLogsClientTypes.Distribution? = nil,
            filterName: Swift.String? = nil,
            filterPattern: Swift.String? = nil,
            logGroupName: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.destinationArn = destinationArn
            self.distribution = distribution
            self.filterName = filterName
            self.filterPattern = filterPattern
            self.logGroupName = logGroupName
            self.roleArn = roleArn
        }
    }

}

public struct DescribeSubscriptionFiltersOutput {
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// The subscription filters.
    public var subscriptionFilters: [CloudWatchLogsClientTypes.SubscriptionFilter]?

    public init(
        nextToken: Swift.String? = nil,
        subscriptionFilters: [CloudWatchLogsClientTypes.SubscriptionFilter]? = nil
    )
    {
        self.nextToken = nextToken
        self.subscriptionFilters = subscriptionFilters
    }
}

public struct DisassociateKmsKeyInput {
    /// The name of the log group. In your DisassociateKmsKey operation, you must specify either the resourceIdentifier parameter or the logGroup parameter, but you can't specify both.
    public var logGroupName: Swift.String?
    /// Specifies the target for this operation. You must specify one of the following:
    ///
    /// * Specify the ARN of a log group to stop having CloudWatch Logs use the KMS key to encrypt log events that are ingested and stored by that log group. After you run this operation, CloudWatch Logs encrypts ingested log events with the default CloudWatch Logs method. The log group ARN must be in the following format. Replace REGION and ACCOUNT_ID with your Region and account ID. arn:aws:logs:REGION:ACCOUNT_ID:log-group:LOG_GROUP_NAME
    ///
    /// * Specify the following ARN to stop using this key to encrypt the results of future [StartQuery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_StartQuery.html) operations in this account. Replace REGION and ACCOUNT_ID with your Region and account ID. arn:aws:logs:REGION:ACCOUNT_ID:query-result:*
    ///
    ///
    /// In your DisssociateKmsKey operation, you must specify either the resourceIdentifier parameter or the logGroup parameter, but you can't specify both.
    public var resourceIdentifier: Swift.String?

    public init(
        logGroupName: Swift.String? = nil,
        resourceIdentifier: Swift.String? = nil
    )
    {
        self.logGroupName = logGroupName
        self.resourceIdentifier = resourceIdentifier
    }
}

extension CloudWatchLogsClientTypes {
    /// Reserved for internal use.
    public struct Entity {
        /// Reserved for internal use.
        public var attributes: [Swift.String: Swift.String]?
        /// Reserved for internal use.
        public var keyAttributes: [Swift.String: Swift.String]?

        public init(
            attributes: [Swift.String: Swift.String]? = nil,
            keyAttributes: [Swift.String: Swift.String]? = nil
        )
        {
            self.attributes = attributes
            self.keyAttributes = keyAttributes
        }
    }

}

extension CloudWatchLogsClientTypes {

    public enum EntityRejectionErrorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case entitySizeTooLarge
        case invalidAttributes
        case invalidEntity
        case invalidKeyAttribute
        case invalidTypeValue
        case missingRequiredFields
        case unsupportedLogGroupType
        case sdkUnknown(Swift.String)

        public static var allCases: [EntityRejectionErrorType] {
            return [
                .entitySizeTooLarge,
                .invalidAttributes,
                .invalidEntity,
                .invalidKeyAttribute,
                .invalidTypeValue,
                .missingRequiredFields,
                .unsupportedLogGroupType
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .entitySizeTooLarge: return "EntitySizeTooLarge"
            case .invalidAttributes: return "InvalidAttributes"
            case .invalidEntity: return "InvalidEntity"
            case .invalidKeyAttribute: return "InvalidKeyAttributes"
            case .invalidTypeValue: return "InvalidTypeValue"
            case .missingRequiredFields: return "MissingRequiredFields"
            case .unsupportedLogGroupType: return "UnsupportedLogGroupType"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a matched event.
    public struct FilteredLogEvent {
        /// The ID of the event.
        public var eventId: Swift.String?
        /// The time the event was ingested, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var ingestionTime: Swift.Int?
        /// The name of the log stream to which this event belongs.
        public var logStreamName: Swift.String?
        /// The data contained in the log event.
        public var message: Swift.String?
        /// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var timestamp: Swift.Int?

        public init(
            eventId: Swift.String? = nil,
            ingestionTime: Swift.Int? = nil,
            logStreamName: Swift.String? = nil,
            message: Swift.String? = nil,
            timestamp: Swift.Int? = nil
        )
        {
            self.eventId = eventId
            self.ingestionTime = ingestionTime
            self.logStreamName = logStreamName
            self.message = message
            self.timestamp = timestamp
        }
    }

}

public struct FilterLogEventsInput {
    /// The end of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp later than this time are not returned.
    public var endTime: Swift.Int?
    /// The filter pattern to use. For more information, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html). If not provided, all the events are matched.
    public var filterPattern: Swift.String?
    /// If the value is true, the operation attempts to provide responses that contain events from multiple log streams within the log group, interleaved in a single response. If the value is false, all the matched log events in the first log stream are searched first, then those in the next log stream, and so on. Important As of June 17, 2019, this parameter is ignored and the value is assumed to be true. The response from this operation always interleaves events from multiple log streams within a log group.
    @available(*, deprecated, message: "Starting on June 17, 2019, this parameter will be ignored and the value will be assumed to be true. The response from this operation will always interleave events from multiple log streams within a log group.")
    public var interleaved: Swift.Bool?
    /// The maximum number of events to return. The default is 10,000 events.
    public var limit: Swift.Int?
    /// Specify either the name or ARN of the log group to view log events from. If the log group is in a source account and you are using a monitoring account, you must use the log group ARN. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupIdentifier: Swift.String?
    /// The name of the log group to search. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupName: Swift.String?
    /// Filters the results to include only events from log streams that have names starting with this prefix. If you specify a value for both logStreamNamePrefix and logStreamNames, the action returns an InvalidParameterException error.
    public var logStreamNamePrefix: Swift.String?
    /// Filters the results to only logs from the log streams in this list. If you specify a value for both logStreamNames and logStreamNamePrefix, the action returns an InvalidParameterException error.
    public var logStreamNames: [Swift.String]?
    /// The token for the next set of events to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?
    /// The start of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp before this time are not returned.
    public var startTime: Swift.Int?
    /// Specify true to display the log event fields with all sensitive data unmasked and visible. The default is false. To use this operation with this parameter, you must be signed into an account with the logs:Unmask permission.
    public var unmask: Swift.Bool?

    public init(
        endTime: Swift.Int? = nil,
        filterPattern: Swift.String? = nil,
        interleaved: Swift.Bool? = nil,
        limit: Swift.Int? = nil,
        logGroupIdentifier: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        logStreamNamePrefix: Swift.String? = nil,
        logStreamNames: [Swift.String]? = nil,
        nextToken: Swift.String? = nil,
        startTime: Swift.Int? = nil,
        unmask: Swift.Bool? = false
    )
    {
        self.endTime = endTime
        self.filterPattern = filterPattern
        self.interleaved = interleaved
        self.limit = limit
        self.logGroupIdentifier = logGroupIdentifier
        self.logGroupName = logGroupName
        self.logStreamNamePrefix = logStreamNamePrefix
        self.logStreamNames = logStreamNames
        self.nextToken = nextToken
        self.startTime = startTime
        self.unmask = unmask
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents the search status of a log stream.
    public struct SearchedLogStream {
        /// The name of the log stream.
        public var logStreamName: Swift.String?
        /// Indicates whether all the events in this log stream were searched.
        public var searchedCompletely: Swift.Bool?

        public init(
            logStreamName: Swift.String? = nil,
            searchedCompletely: Swift.Bool? = nil
        )
        {
            self.logStreamName = logStreamName
            self.searchedCompletely = searchedCompletely
        }
    }

}

public struct FilterLogEventsOutput {
    /// The matched events.
    public var events: [CloudWatchLogsClientTypes.FilteredLogEvent]?
    /// The token to use when requesting the next set of items. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// Important As of May 15, 2020, this parameter is no longer supported. This parameter returns an empty list. Indicates which log streams have been searched and whether each has been searched completely.
    public var searchedLogStreams: [CloudWatchLogsClientTypes.SearchedLogStream]?

    public init(
        events: [CloudWatchLogsClientTypes.FilteredLogEvent]? = nil,
        nextToken: Swift.String? = nil,
        searchedLogStreams: [CloudWatchLogsClientTypes.SearchedLogStream]? = nil
    )
    {
        self.events = events
        self.nextToken = nextToken
        self.searchedLogStreams = searchedLogStreams
    }
}

public struct GetDataProtectionPolicyInput {
    /// The name or ARN of the log group that contains the data protection policy that you want to see.
    /// This member is required.
    public var logGroupIdentifier: Swift.String?

    public init(
        logGroupIdentifier: Swift.String? = nil
    )
    {
        self.logGroupIdentifier = logGroupIdentifier
    }
}

public struct GetDataProtectionPolicyOutput {
    /// The date and time that this policy was most recently updated.
    public var lastUpdatedTime: Swift.Int?
    /// The log group name or ARN that you specified in your request.
    public var logGroupIdentifier: Swift.String?
    /// The data protection policy document for this log group.
    public var policyDocument: Swift.String?

    public init(
        lastUpdatedTime: Swift.Int? = nil,
        logGroupIdentifier: Swift.String? = nil,
        policyDocument: Swift.String? = nil
    )
    {
        self.lastUpdatedTime = lastUpdatedTime
        self.logGroupIdentifier = logGroupIdentifier
        self.policyDocument = policyDocument
    }
}

public struct GetDeliveryInput {
    /// The ID of the delivery that you want to retrieve.
    /// This member is required.
    public var id: Swift.String?

    public init(
        id: Swift.String? = nil
    )
    {
        self.id = id
    }
}

public struct GetDeliveryOutput {
    /// A structure that contains information about the delivery.
    public var delivery: CloudWatchLogsClientTypes.Delivery?

    public init(
        delivery: CloudWatchLogsClientTypes.Delivery? = nil
    )
    {
        self.delivery = delivery
    }
}

public struct GetDeliveryDestinationInput {
    /// The name of the delivery destination that you want to retrieve.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct GetDeliveryDestinationOutput {
    /// A structure containing information about the delivery destination.
    public var deliveryDestination: CloudWatchLogsClientTypes.DeliveryDestination?

    public init(
        deliveryDestination: CloudWatchLogsClientTypes.DeliveryDestination? = nil
    )
    {
        self.deliveryDestination = deliveryDestination
    }
}

public struct GetDeliveryDestinationPolicyInput {
    /// The name of the delivery destination that you want to retrieve the policy of.
    /// This member is required.
    public var deliveryDestinationName: Swift.String?

    public init(
        deliveryDestinationName: Swift.String? = nil
    )
    {
        self.deliveryDestinationName = deliveryDestinationName
    }
}

extension CloudWatchLogsClientTypes {
    /// A structure that contains information about one delivery destination policy.
    public struct Policy {
        /// The contents of the delivery destination policy.
        public var deliveryDestinationPolicy: Swift.String?

        public init(
            deliveryDestinationPolicy: Swift.String? = nil
        )
        {
            self.deliveryDestinationPolicy = deliveryDestinationPolicy
        }
    }

}

public struct GetDeliveryDestinationPolicyOutput {
    /// The IAM policy for this delivery destination.
    public var policy: CloudWatchLogsClientTypes.Policy?

    public init(
        policy: CloudWatchLogsClientTypes.Policy? = nil
    )
    {
        self.policy = policy
    }
}

public struct GetDeliverySourceInput {
    /// The name of the delivery source that you want to retrieve.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct GetDeliverySourceOutput {
    /// A structure containing information about the delivery source.
    public var deliverySource: CloudWatchLogsClientTypes.DeliverySource?

    public init(
        deliverySource: CloudWatchLogsClientTypes.DeliverySource? = nil
    )
    {
        self.deliverySource = deliverySource
    }
}

public struct GetLogAnomalyDetectorInput {
    /// The ARN of the anomaly detector to retrieve information about. You can find the ARNs of log anomaly detectors in your account by using the [ListLogAnomalyDetectors](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListLogAnomalyDetectors.html) operation.
    /// This member is required.
    public var anomalyDetectorArn: Swift.String?

    public init(
        anomalyDetectorArn: Swift.String? = nil
    )
    {
        self.anomalyDetectorArn = anomalyDetectorArn
    }
}

public struct GetLogAnomalyDetectorOutput {
    /// Specifies whether the anomaly detector is currently active. To change its status, use the enabled parameter in the [UpdateLogAnomalyDetector](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_UpdateLogAnomalyDetector.html) operation.
    public var anomalyDetectorStatus: CloudWatchLogsClientTypes.AnomalyDetectorStatus?
    /// The number of days used as the life cycle of anomalies. After this time, anomalies are automatically baselined and the anomaly detector model will treat new occurrences of similar event as normal.
    public var anomalyVisibilityTime: Swift.Int?
    /// The date and time when this anomaly detector was created.
    public var creationTimeStamp: Swift.Int
    /// The name of the log anomaly detector
    public var detectorName: Swift.String?
    /// Specifies how often the anomaly detector runs and look for anomalies. Set this value according to the frequency that the log group receives new logs. For example, if the log group receives new log events every 10 minutes, then setting evaluationFrequency to FIFTEEN_MIN might be appropriate.
    public var evaluationFrequency: CloudWatchLogsClientTypes.EvaluationFrequency?
    /// A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.
    public var filterPattern: Swift.String?
    /// The ID of the KMS key assigned to this anomaly detector, if any.
    public var kmsKeyId: Swift.String?
    /// The date and time when this anomaly detector was most recently modified.
    public var lastModifiedTimeStamp: Swift.Int
    /// An array of structures, where each structure contains the ARN of a log group associated with this anomaly detector.
    public var logGroupArnList: [Swift.String]?

    public init(
        anomalyDetectorStatus: CloudWatchLogsClientTypes.AnomalyDetectorStatus? = nil,
        anomalyVisibilityTime: Swift.Int? = nil,
        creationTimeStamp: Swift.Int = 0,
        detectorName: Swift.String? = nil,
        evaluationFrequency: CloudWatchLogsClientTypes.EvaluationFrequency? = nil,
        filterPattern: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        lastModifiedTimeStamp: Swift.Int = 0,
        logGroupArnList: [Swift.String]? = nil
    )
    {
        self.anomalyDetectorStatus = anomalyDetectorStatus
        self.anomalyVisibilityTime = anomalyVisibilityTime
        self.creationTimeStamp = creationTimeStamp
        self.detectorName = detectorName
        self.evaluationFrequency = evaluationFrequency
        self.filterPattern = filterPattern
        self.kmsKeyId = kmsKeyId
        self.lastModifiedTimeStamp = lastModifiedTimeStamp
        self.logGroupArnList = logGroupArnList
    }
}

public struct GetLogEventsInput {
    /// The end of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp equal to or later than this time are not included.
    public var endTime: Swift.Int?
    /// The maximum number of log events returned. If you don't specify a limit, the default is as many log events as can fit in a response size of 1 MB (up to 10,000 log events).
    public var limit: Swift.Int?
    /// Specify either the name or ARN of the log group to view events from. If the log group is in a source account and you are using a monitoring account, you must use the log group ARN. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupIdentifier: Swift.String?
    /// The name of the log group. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupName: Swift.String?
    /// The name of the log stream.
    /// This member is required.
    public var logStreamName: Swift.String?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?
    /// If the value is true, the earliest log events are returned first. If the value is false, the latest log events are returned first. The default value is false. If you are using a previous nextForwardToken value as the nextToken in this operation, you must specify true for startFromHead.
    public var startFromHead: Swift.Bool?
    /// The start of the time range, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC. Events with a timestamp equal to this time or later than this time are included. Events with a timestamp earlier than this time are not included.
    public var startTime: Swift.Int?
    /// Specify true to display the log event fields with all sensitive data unmasked and visible. The default is false. To use this operation with this parameter, you must be signed into an account with the logs:Unmask permission.
    public var unmask: Swift.Bool?

    public init(
        endTime: Swift.Int? = nil,
        limit: Swift.Int? = nil,
        logGroupIdentifier: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        logStreamName: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        startFromHead: Swift.Bool? = nil,
        startTime: Swift.Int? = nil,
        unmask: Swift.Bool? = false
    )
    {
        self.endTime = endTime
        self.limit = limit
        self.logGroupIdentifier = logGroupIdentifier
        self.logGroupName = logGroupName
        self.logStreamName = logStreamName
        self.nextToken = nextToken
        self.startFromHead = startFromHead
        self.startTime = startTime
        self.unmask = unmask
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a log event.
    public struct OutputLogEvent {
        /// The time the event was ingested, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var ingestionTime: Swift.Int?
        /// The data contained in the log event.
        public var message: Swift.String?
        /// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        public var timestamp: Swift.Int?

        public init(
            ingestionTime: Swift.Int? = nil,
            message: Swift.String? = nil,
            timestamp: Swift.Int? = nil
        )
        {
            self.ingestionTime = ingestionTime
            self.message = message
            self.timestamp = timestamp
        }
    }

}

public struct GetLogEventsOutput {
    /// The events.
    public var events: [CloudWatchLogsClientTypes.OutputLogEvent]?
    /// The token for the next set of items in the backward direction. The token expires after 24 hours. This token is not null. If you have reached the end of the stream, it returns the same token you passed in.
    public var nextBackwardToken: Swift.String?
    /// The token for the next set of items in the forward direction. The token expires after 24 hours. If you have reached the end of the stream, it returns the same token you passed in.
    public var nextForwardToken: Swift.String?

    public init(
        events: [CloudWatchLogsClientTypes.OutputLogEvent]? = nil,
        nextBackwardToken: Swift.String? = nil,
        nextForwardToken: Swift.String? = nil
    )
    {
        self.events = events
        self.nextBackwardToken = nextBackwardToken
        self.nextForwardToken = nextForwardToken
    }
}

public struct GetLogGroupFieldsInput {
    /// Specify either the name or ARN of the log group to view. If the log group is in a source account and you are using a monitoring account, you must specify the ARN. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupIdentifier: Swift.String?
    /// The name of the log group to search. You must include either logGroupIdentifier or logGroupName, but not both.
    public var logGroupName: Swift.String?
    /// The time to set as the center of the query. If you specify time, the 8 minutes before and 8 minutes after this time are searched. If you omit time, the most recent 15 minutes up to the current time are searched. The time value is specified as epoch time, which is the number of seconds since January 1, 1970, 00:00:00 UTC.
    public var time: Swift.Int?

    public init(
        logGroupIdentifier: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        time: Swift.Int? = nil
    )
    {
        self.logGroupIdentifier = logGroupIdentifier
        self.logGroupName = logGroupName
        self.time = time
    }
}

extension CloudWatchLogsClientTypes {
    /// The fields contained in log events found by a GetLogGroupFields operation, along with the percentage of queried log events in which each field appears.
    public struct LogGroupField {
        /// The name of a log field.
        public var name: Swift.String?
        /// The percentage of log events queried that contained the field.
        public var percent: Swift.Int

        public init(
            name: Swift.String? = nil,
            percent: Swift.Int = 0
        )
        {
            self.name = name
            self.percent = percent
        }
    }

}

public struct GetLogGroupFieldsOutput {
    /// The array of fields found in the query. Each object in the array contains the name of the field, along with the percentage of time it appeared in the log events that were queried.
    public var logGroupFields: [CloudWatchLogsClientTypes.LogGroupField]?

    public init(
        logGroupFields: [CloudWatchLogsClientTypes.LogGroupField]? = nil
    )
    {
        self.logGroupFields = logGroupFields
    }
}

public struct GetLogRecordInput {
    /// The pointer corresponding to the log event record you want to retrieve. You get this from the response of a GetQueryResults operation. In that response, the value of the @ptr field for a log event is the value to use as logRecordPointer to retrieve that complete log event record.
    /// This member is required.
    public var logRecordPointer: Swift.String?
    /// Specify true to display the log event fields with all sensitive data unmasked and visible. The default is false. To use this operation with this parameter, you must be signed into an account with the logs:Unmask permission.
    public var unmask: Swift.Bool?

    public init(
        logRecordPointer: Swift.String? = nil,
        unmask: Swift.Bool? = false
    )
    {
        self.logRecordPointer = logRecordPointer
        self.unmask = unmask
    }
}

public struct GetLogRecordOutput {
    /// The requested log event, as a JSON string.
    public var logRecord: [Swift.String: Swift.String]?

    public init(
        logRecord: [Swift.String: Swift.String]? = nil
    )
    {
        self.logRecord = logRecord
    }
}

public struct GetQueryResultsInput {
    /// The ID number of the query.
    /// This member is required.
    public var queryId: Swift.String?

    public init(
        queryId: Swift.String? = nil
    )
    {
        self.queryId = queryId
    }
}

extension CloudWatchLogsClientTypes {
    /// Contains one field from one log event returned by a CloudWatch Logs Insights query, along with the value of that field. For more information about the fields that are generated by CloudWatch logs, see [Supported Logs and Discovered Fields](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_AnalyzeLogData-discoverable-fields.html).
    public struct ResultField {
        /// The log event field.
        public var field: Swift.String?
        /// The value of this field.
        public var value: Swift.String?

        public init(
            field: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.field = field
            self.value = value
        }
    }

}

extension CloudWatchLogsClientTypes {
    /// Contains the number of log events scanned by the query, the number of log events that matched the query criteria, and the total number of bytes in the log events that were scanned.
    public struct QueryStatistics {
        /// The total number of bytes in the log events scanned during the query.
        public var bytesScanned: Swift.Double
        /// The number of log events that matched the query string.
        public var recordsMatched: Swift.Double
        /// The total number of log events scanned during the query.
        public var recordsScanned: Swift.Double

        public init(
            bytesScanned: Swift.Double = 0.0,
            recordsMatched: Swift.Double = 0.0,
            recordsScanned: Swift.Double = 0.0
        )
        {
            self.bytesScanned = bytesScanned
            self.recordsMatched = recordsMatched
            self.recordsScanned = recordsScanned
        }
    }

}

public struct GetQueryResultsOutput {
    /// If you associated an KMS key with the CloudWatch Logs Insights query results in this account, this field displays the ARN of the key that's used to encrypt the query results when [StartQuery](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_StartQuery.html) stores them.
    public var encryptionKey: Swift.String?
    /// The log events that matched the query criteria during the most recent time it ran. The results value is an array of arrays. Each log event is one object in the top-level array. Each of these log event objects is an array of field/value pairs.
    public var results: [[CloudWatchLogsClientTypes.ResultField]]?
    /// Includes the number of log events scanned by the query, the number of log events that matched the query criteria, and the total number of bytes in the scanned log events. These values reflect the full raw results of the query.
    public var statistics: CloudWatchLogsClientTypes.QueryStatistics?
    /// The status of the most recent running of the query. Possible values are Cancelled, Complete, Failed, Running, Scheduled, Timeout, and Unknown. Queries time out after 60 minutes of runtime. To avoid having your queries time out, reduce the time range being searched or partition your query into a number of queries.
    public var status: CloudWatchLogsClientTypes.QueryStatus?

    public init(
        encryptionKey: Swift.String? = nil,
        results: [[CloudWatchLogsClientTypes.ResultField]]? = nil,
        statistics: CloudWatchLogsClientTypes.QueryStatistics? = nil,
        status: CloudWatchLogsClientTypes.QueryStatus? = nil
    )
    {
        self.encryptionKey = encryptionKey
        self.results = results
        self.statistics = statistics
        self.status = status
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a log event, which is a record of activity that was recorded by the application or resource being monitored.
    public struct InputLogEvent {
        /// The raw event message. Each log event can be no larger than 256 KB.
        /// This member is required.
        public var message: Swift.String?
        /// The time the event occurred, expressed as the number of milliseconds after Jan 1, 1970 00:00:00 UTC.
        /// This member is required.
        public var timestamp: Swift.Int?

        public init(
            message: Swift.String? = nil,
            timestamp: Swift.Int? = nil
        )
        {
            self.message = message
            self.timestamp = timestamp
        }
    }

}

/// The sequence token is not valid. You can get the correct sequence token in the expectedSequenceToken field in the InvalidSequenceTokenException message. PutLogEvents actions are now always accepted and never return InvalidSequenceTokenException regardless of receiving an invalid sequence token.
public struct InvalidSequenceTokenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var expectedSequenceToken: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidSequenceTokenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        expectedSequenceToken: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.expectedSequenceToken = expectedSequenceToken
        self.properties.message = message
    }
}

extension CloudWatchLogsClientTypes {

    public enum SuppressionState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case suppressed
        case unsuppressed
        case sdkUnknown(Swift.String)

        public static var allCases: [SuppressionState] {
            return [
                .suppressed,
                .unsuppressed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .suppressed: return "SUPPRESSED"
            case .unsuppressed: return "UNSUPPRESSED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListAnomaliesInput {
    /// Use this to optionally limit the results to only the anomalies found by a certain anomaly detector.
    public var anomalyDetectorArn: Swift.String?
    /// The maximum number of items to return. If you don't specify a value, the default maximum value of 50 items is used.
    public var limit: Swift.Int?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?
    /// You can specify this parameter if you want to the operation to return only anomalies that are currently either suppressed or unsuppressed.
    public var suppressionState: CloudWatchLogsClientTypes.SuppressionState?

    public init(
        anomalyDetectorArn: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        suppressionState: CloudWatchLogsClientTypes.SuppressionState? = nil
    )
    {
        self.anomalyDetectorArn = anomalyDetectorArn
        self.limit = limit
        self.nextToken = nextToken
        self.suppressionState = suppressionState
    }
}

public struct ListAnomaliesOutput {
    /// An array of structures, where each structure contains information about one anomaly that a log anomaly detector has found.
    public var anomalies: [CloudWatchLogsClientTypes.Anomaly]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        anomalies: [CloudWatchLogsClientTypes.Anomaly]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.anomalies = anomalies
        self.nextToken = nextToken
    }
}

public struct ListLogAnomalyDetectorsInput {
    /// Use this to optionally filter the results to only include anomaly detectors that are associated with the specified log group.
    public var filterLogGroupArn: Swift.String?
    /// The maximum number of items to return. If you don't specify a value, the default maximum value of 50 items is used.
    public var limit: Swift.Int?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        filterLogGroupArn: Swift.String? = nil,
        limit: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filterLogGroupArn = filterLogGroupArn
        self.limit = limit
        self.nextToken = nextToken
    }
}

public struct ListLogAnomalyDetectorsOutput {
    /// An array of structures, where each structure in the array contains information about one anomaly detector.
    public var anomalyDetectors: [CloudWatchLogsClientTypes.AnomalyDetector]?
    /// The token for the next set of items to return. The token expires after 24 hours.
    public var nextToken: Swift.String?

    public init(
        anomalyDetectors: [CloudWatchLogsClientTypes.AnomalyDetector]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.anomalyDetectors = anomalyDetectors
        self.nextToken = nextToken
    }
}

public struct ListTagsForResourceInput {
    /// The ARN of the resource that you want to view tags for. The ARN format of a log group is arn:aws:logs:Region:account-id:log-group:log-group-name  The ARN format of a destination is arn:aws:logs:Region:account-id:destination:destination-name  For more information about ARN format, see [CloudWatch Logs resources and operations](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html).
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// The list of tags associated with the requested resource.>
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

@available(*, deprecated, message: "Please use the generic tagging API model ListTagsForResourceRequest and ListTagsForResourceResponse")
public struct ListTagsLogGroupInput {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?

    public init(
        logGroupName: Swift.String? = nil
    )
    {
        self.logGroupName = logGroupName
    }
}

@available(*, deprecated, message: "Please use the generic tagging API model ListTagsForResourceRequest and ListTagsForResourceResponse")
public struct ListTagsLogGroupOutput {
    /// The tags for the log group.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

extension CloudWatchLogsClientTypes {
    /// This object contains the information for one log event returned in a Live Tail stream.
    public struct LiveTailSessionLogEvent {
        /// The timestamp specifying when this log event was ingested into the log group.
        public var ingestionTime: Swift.Int?
        /// The name or ARN of the log group that ingested this log event.
        public var logGroupIdentifier: Swift.String?
        /// The name of the log stream that ingested this log event.
        public var logStreamName: Swift.String?
        /// The log event message text.
        public var message: Swift.String?
        /// The timestamp specifying when this log event was created.
        public var timestamp: Swift.Int?

        public init(
            ingestionTime: Swift.Int? = nil,
            logGroupIdentifier: Swift.String? = nil,
            logStreamName: Swift.String? = nil,
            message: Swift.String? = nil,
            timestamp: Swift.Int? = nil
        )
        {
            self.ingestionTime = ingestionTime
            self.logGroupIdentifier = logGroupIdentifier
            self.logStreamName = logStreamName
            self.message = message
            self.timestamp = timestamp
        }
    }

}

extension CloudWatchLogsClientTypes {
    /// This object contains the metadata for one LiveTailSessionUpdate structure. It indicates whether that update includes only a sample of 500 log events out of a larger number of ingested log events, or if it contains all of the matching log events ingested during that second of time.
    public struct LiveTailSessionMetadata {
        /// If this is true, then more than 500 log events matched the request for this update, and the sessionResults includes a sample of 500 of those events. If this is false, then 500 or fewer log events matched the request for this update, so no sampling was necessary. In this case, the sessionResults array includes all log events that matched your request during this time.
        public var sampled: Swift.Bool

        public init(
            sampled: Swift.Bool = false
        )
        {
            self.sampled = sampled
        }
    }

}

extension CloudWatchLogsClientTypes {
    /// This object contains information about this Live Tail session, including the log groups included and the log stream filters, if any.
    public struct LiveTailSessionStart {
        /// An optional pattern to filter the results to include only log events that match the pattern. For example, a filter pattern of error 404 displays only log events that include both error and 404. For more information about filter pattern syntax, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
        public var logEventFilterPattern: Swift.String?
        /// An array of the names and ARNs of the log groups included in this Live Tail session.
        public var logGroupIdentifiers: [Swift.String]?
        /// If your StartLiveTail operation request included a logStreamNamePrefixes parameter that filtered the session to only include log streams that have names that start with certain prefixes, these prefixes are listed here.
        public var logStreamNamePrefixes: [Swift.String]?
        /// If your StartLiveTail operation request included a logStreamNames parameter that filtered the session to only include certain log streams, these streams are listed here.
        public var logStreamNames: [Swift.String]?
        /// The unique ID generated by CloudWatch Logs to identify this Live Tail session request.
        public var requestId: Swift.String?
        /// The unique ID generated by CloudWatch Logs to identify this Live Tail session.
        public var sessionId: Swift.String?

        public init(
            logEventFilterPattern: Swift.String? = nil,
            logGroupIdentifiers: [Swift.String]? = nil,
            logStreamNamePrefixes: [Swift.String]? = nil,
            logStreamNames: [Swift.String]? = nil,
            requestId: Swift.String? = nil,
            sessionId: Swift.String? = nil
        )
        {
            self.logEventFilterPattern = logEventFilterPattern
            self.logGroupIdentifiers = logGroupIdentifiers
            self.logStreamNamePrefixes = logStreamNamePrefixes
            self.logStreamNames = logStreamNames
            self.requestId = requestId
            self.sessionId = sessionId
        }
    }

}

extension CloudWatchLogsClientTypes {
    /// This object contains the log events and metadata for a Live Tail session.
    public struct LiveTailSessionUpdate {
        /// This object contains the session metadata for a Live Tail session.
        public var sessionMetadata: CloudWatchLogsClientTypes.LiveTailSessionMetadata?
        /// An array, where each member of the array includes the information for one log event in the Live Tail session. A sessionResults array can include as many as 500 log events. If the number of log events matching the request exceeds 500 per second, the log events are sampled down to 500 log events to be included in each sessionUpdate structure.
        public var sessionResults: [CloudWatchLogsClientTypes.LiveTailSessionLogEvent]?

        public init(
            sessionMetadata: CloudWatchLogsClientTypes.LiveTailSessionMetadata? = nil,
            sessionResults: [CloudWatchLogsClientTypes.LiveTailSessionLogEvent]? = nil
        )
        {
            self.sessionMetadata = sessionMetadata
            self.sessionResults = sessionResults
        }
    }

}

public struct PutAccountPolicyInput {
    /// Specify the policy, in JSON. Data protection policy A data protection policy must include two JSON blocks:
    ///
    /// * The first block must include both a DataIdentifer array and an Operation property with an Audit action. The DataIdentifer array lists the types of sensitive data that you want to mask. For more information about the available options, see [Types of data that you can mask](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data-types.html). The Operation property with an Audit action is required to find the sensitive data terms. This Audit action must contain a FindingsDestination object. You can optionally use that FindingsDestination object to list one or more destinations to send audit findings to. If you specify destinations such as log groups, Firehose streams, and S3 buckets, they must already exist.
    ///
    /// * The second block must include both a DataIdentifer array and an Operation property with an Deidentify action. The DataIdentifer array must exactly match the DataIdentifer array in the first block of the policy. The Operation property with the Deidentify action is what actually masks the data, and it must contain the  "MaskConfig": {} object. The  "MaskConfig": {} object must be empty.
    ///
    ///
    /// For an example data protection policy, see the Examples section on this page. The contents of the two DataIdentifer arrays must match exactly. In addition to the two JSON blocks, the policyDocument can also include Name, Description, and Version fields. The Name is different than the operation's policyName parameter, and is used as a dimension when CloudWatch Logs reports audit findings metrics to CloudWatch. The JSON specified in policyDocument can be up to 30,720 characters long. Subscription filter policy A subscription filter policy can include the following attributes in a JSON block:
    ///
    /// * DestinationArn The ARN of the destination to deliver log events to. Supported destinations are:
    ///
    /// * An Kinesis Data Streams data stream in the same account as the subscription policy, for same-account delivery.
    ///
    /// * An Firehose data stream in the same account as the subscription policy, for same-account delivery.
    ///
    /// * A Lambda function in the same account as the subscription policy, for same-account delivery.
    ///
    /// * A logical destination in a different account created with [PutDestination](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDestination.html), for cross-account delivery. Kinesis Data Streams and Firehose are supported as logical destinations.
    ///
    ///
    ///
    ///
    /// * RoleArn The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
    ///
    /// * FilterPattern A filter pattern for subscribing to a filtered stream of log events.
    ///
    /// * Distribution The method used to distribute log data to the destination. By default, log data is grouped by log stream, but the grouping can be set to Random for a more even distribution. This property is only applicable when the destination is an Kinesis Data Streams data stream.
    /// This member is required.
    public var policyDocument: Swift.String?
    /// A name for the policy. This must be unique within the account.
    /// This member is required.
    public var policyName: Swift.String?
    /// The type of policy that you're creating or updating.
    /// This member is required.
    public var policyType: CloudWatchLogsClientTypes.PolicyType?
    /// Currently the only valid value for this parameter is ALL, which specifies that the data protection policy applies to all log groups in the account. If you omit this parameter, the default of ALL is used.
    public var scope: CloudWatchLogsClientTypes.Scope?
    /// Use this parameter to apply the subscription filter policy to a subset of log groups in the account. Currently, the only supported filter is LogGroupName NOT IN []. The selectionCriteria string can be up to 25KB in length. The length is determined by using its UTF-8 bytes. Using the selectionCriteria parameter is useful to help prevent infinite loops. For more information, see [Log recursion prevention](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Subscriptions-recursion-prevention.html). Specifing selectionCriteria is valid only when you specify  SUBSCRIPTION_FILTER_POLICY for policyType.
    public var selectionCriteria: Swift.String?

    public init(
        policyDocument: Swift.String? = nil,
        policyName: Swift.String? = nil,
        policyType: CloudWatchLogsClientTypes.PolicyType? = nil,
        scope: CloudWatchLogsClientTypes.Scope? = nil,
        selectionCriteria: Swift.String? = nil
    )
    {
        self.policyDocument = policyDocument
        self.policyName = policyName
        self.policyType = policyType
        self.scope = scope
        self.selectionCriteria = selectionCriteria
    }
}

public struct PutAccountPolicyOutput {
    /// The account policy that you created.
    public var accountPolicy: CloudWatchLogsClientTypes.AccountPolicy?

    public init(
        accountPolicy: CloudWatchLogsClientTypes.AccountPolicy? = nil
    )
    {
        self.accountPolicy = accountPolicy
    }
}

public struct PutDataProtectionPolicyInput {
    /// Specify either the log group name or log group ARN.
    /// This member is required.
    public var logGroupIdentifier: Swift.String?
    /// Specify the data protection policy, in JSON. This policy must include two JSON blocks:
    ///
    /// * The first block must include both a DataIdentifer array and an Operation property with an Audit action. The DataIdentifer array lists the types of sensitive data that you want to mask. For more information about the available options, see [Types of data that you can mask](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/mask-sensitive-log-data-types.html). The Operation property with an Audit action is required to find the sensitive data terms. This Audit action must contain a FindingsDestination object. You can optionally use that FindingsDestination object to list one or more destinations to send audit findings to. If you specify destinations such as log groups, Firehose streams, and S3 buckets, they must already exist.
    ///
    /// * The second block must include both a DataIdentifer array and an Operation property with an Deidentify action. The DataIdentifer array must exactly match the DataIdentifer array in the first block of the policy. The Operation property with the Deidentify action is what actually masks the data, and it must contain the  "MaskConfig": {} object. The  "MaskConfig": {} object must be empty.
    ///
    ///
    /// For an example data protection policy, see the Examples section on this page. The contents of the two DataIdentifer arrays must match exactly. In addition to the two JSON blocks, the policyDocument can also include Name, Description, and Version fields. The Name is used as a dimension when CloudWatch Logs reports audit findings metrics to CloudWatch. The JSON specified in policyDocument can be up to 30,720 characters.
    /// This member is required.
    public var policyDocument: Swift.String?

    public init(
        logGroupIdentifier: Swift.String? = nil,
        policyDocument: Swift.String? = nil
    )
    {
        self.logGroupIdentifier = logGroupIdentifier
        self.policyDocument = policyDocument
    }
}

public struct PutDataProtectionPolicyOutput {
    /// The date and time that this policy was most recently updated.
    public var lastUpdatedTime: Swift.Int?
    /// The log group name or ARN that you specified in your request.
    public var logGroupIdentifier: Swift.String?
    /// The data protection policy used for this log group.
    public var policyDocument: Swift.String?

    public init(
        lastUpdatedTime: Swift.Int? = nil,
        logGroupIdentifier: Swift.String? = nil,
        policyDocument: Swift.String? = nil
    )
    {
        self.lastUpdatedTime = lastUpdatedTime
        self.logGroupIdentifier = logGroupIdentifier
        self.policyDocument = policyDocument
    }
}

public struct PutDeliveryDestinationInput {
    /// A structure that contains the ARN of the Amazon Web Services resource that will receive the logs.
    /// This member is required.
    public var deliveryDestinationConfiguration: CloudWatchLogsClientTypes.DeliveryDestinationConfiguration?
    /// A name for this delivery destination. This name must be unique for all delivery destinations in your account.
    /// This member is required.
    public var name: Swift.String?
    /// The format for the logs that this delivery destination will receive.
    public var outputFormat: CloudWatchLogsClientTypes.OutputFormat?
    /// An optional list of key-value pairs to associate with the resource. For more information about tagging, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html)
    public var tags: [Swift.String: Swift.String]?

    public init(
        deliveryDestinationConfiguration: CloudWatchLogsClientTypes.DeliveryDestinationConfiguration? = nil,
        name: Swift.String? = nil,
        outputFormat: CloudWatchLogsClientTypes.OutputFormat? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.deliveryDestinationConfiguration = deliveryDestinationConfiguration
        self.name = name
        self.outputFormat = outputFormat
        self.tags = tags
    }
}

public struct PutDeliveryDestinationOutput {
    /// A structure containing information about the delivery destination that you just created or updated.
    public var deliveryDestination: CloudWatchLogsClientTypes.DeliveryDestination?

    public init(
        deliveryDestination: CloudWatchLogsClientTypes.DeliveryDestination? = nil
    )
    {
        self.deliveryDestination = deliveryDestination
    }
}

public struct PutDeliveryDestinationPolicyInput {
    /// The name of the delivery destination to assign this policy to.
    /// This member is required.
    public var deliveryDestinationName: Swift.String?
    /// The contents of the policy.
    /// This member is required.
    public var deliveryDestinationPolicy: Swift.String?

    public init(
        deliveryDestinationName: Swift.String? = nil,
        deliveryDestinationPolicy: Swift.String? = nil
    )
    {
        self.deliveryDestinationName = deliveryDestinationName
        self.deliveryDestinationPolicy = deliveryDestinationPolicy
    }
}

public struct PutDeliveryDestinationPolicyOutput {
    /// The contents of the policy that you just created.
    public var policy: CloudWatchLogsClientTypes.Policy?

    public init(
        policy: CloudWatchLogsClientTypes.Policy? = nil
    )
    {
        self.policy = policy
    }
}

public struct PutDeliverySourceInput {
    /// Defines the type of log that the source is sending.
    ///
    /// * For Amazon Bedrock, the valid value is APPLICATION_LOGS.
    ///
    /// * For Amazon CodeWhisperer, the valid value is EVENT_LOGS.
    ///
    /// * For IAM Identity Center, the valid value is ERROR_LOGS.
    ///
    /// * For Amazon WorkMail, the valid values are ACCESS_CONTROL_LOGS, AUTHENTICATION_LOGS, WORKMAIL_AVAILABILITY_PROVIDER_LOGS, and WORKMAIL_MAILBOX_ACCESS_LOGS.
    /// This member is required.
    public var logType: Swift.String?
    /// A name for this delivery source. This name must be unique for all delivery sources in your account.
    /// This member is required.
    public var name: Swift.String?
    /// The ARN of the Amazon Web Services resource that is generating and sending logs. For example, arn:aws:workmail:us-east-1:123456789012:organization/m-1234EXAMPLEabcd1234abcd1234abcd1234
    /// This member is required.
    public var resourceArn: Swift.String?
    /// An optional list of key-value pairs to associate with the resource. For more information about tagging, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html)
    public var tags: [Swift.String: Swift.String]?

    public init(
        logType: Swift.String? = nil,
        name: Swift.String? = nil,
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.logType = logType
        self.name = name
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct PutDeliverySourceOutput {
    /// A structure containing information about the delivery source that was just created or updated.
    public var deliverySource: CloudWatchLogsClientTypes.DeliverySource?

    public init(
        deliverySource: CloudWatchLogsClientTypes.DeliverySource? = nil
    )
    {
        self.deliverySource = deliverySource
    }
}

public struct PutDestinationInput {
    /// A name for the destination.
    /// This member is required.
    public var destinationName: Swift.String?
    /// The ARN of an IAM role that grants CloudWatch Logs permissions to call the Amazon Kinesis PutRecord operation on the destination stream.
    /// This member is required.
    public var roleArn: Swift.String?
    /// An optional list of key-value pairs to associate with the resource. For more information about tagging, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html)
    public var tags: [Swift.String: Swift.String]?
    /// The ARN of an Amazon Kinesis stream to which to deliver matching log events.
    /// This member is required.
    public var targetArn: Swift.String?

    public init(
        destinationName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        targetArn: Swift.String? = nil
    )
    {
        self.destinationName = destinationName
        self.roleArn = roleArn
        self.tags = tags
        self.targetArn = targetArn
    }
}

public struct PutDestinationOutput {
    /// The destination.
    public var destination: CloudWatchLogsClientTypes.Destination?

    public init(
        destination: CloudWatchLogsClientTypes.Destination? = nil
    )
    {
        self.destination = destination
    }
}

public struct PutDestinationPolicyInput {
    /// An IAM policy document that authorizes cross-account users to deliver their log events to the associated destination. This can be up to 5120 bytes.
    /// This member is required.
    public var accessPolicy: Swift.String?
    /// A name for an existing destination.
    /// This member is required.
    public var destinationName: Swift.String?
    /// Specify true if you are updating an existing destination policy to grant permission to an organization ID instead of granting permission to individual Amazon Web Services accounts. Before you update a destination policy this way, you must first update the subscription filters in the accounts that send logs to this destination. If you do not, the subscription filters might stop working. By specifying true for forceUpdate, you are affirming that you have already updated the subscription filters. For more information, see [ Updating an existing cross-account subscription](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/Cross-Account-Log_Subscription-Update.html) If you omit this parameter, the default of false is used.
    public var forceUpdate: Swift.Bool?

    public init(
        accessPolicy: Swift.String? = nil,
        destinationName: Swift.String? = nil,
        forceUpdate: Swift.Bool? = nil
    )
    {
        self.accessPolicy = accessPolicy
        self.destinationName = destinationName
        self.forceUpdate = forceUpdate
    }
}

/// The most likely cause is an Amazon Web Services access key ID or secret key that's not valid.
public struct UnrecognizedClientException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnrecognizedClientException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct PutLogEventsInput {
    /// Reserved for internal use.
    public var entity: CloudWatchLogsClientTypes.Entity?
    /// The log events.
    /// This member is required.
    public var logEvents: [CloudWatchLogsClientTypes.InputLogEvent]?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The name of the log stream.
    /// This member is required.
    public var logStreamName: Swift.String?
    /// The sequence token obtained from the response of the previous PutLogEvents call. The sequenceToken parameter is now ignored in PutLogEvents actions. PutLogEvents actions are now accepted and never return InvalidSequenceTokenException or DataAlreadyAcceptedException even if the sequence token is not valid.
    public var sequenceToken: Swift.String?

    public init(
        entity: CloudWatchLogsClientTypes.Entity? = nil,
        logEvents: [CloudWatchLogsClientTypes.InputLogEvent]? = nil,
        logGroupName: Swift.String? = nil,
        logStreamName: Swift.String? = nil,
        sequenceToken: Swift.String? = nil
    )
    {
        self.entity = entity
        self.logEvents = logEvents
        self.logGroupName = logGroupName
        self.logStreamName = logStreamName
        self.sequenceToken = sequenceToken
    }
}

extension CloudWatchLogsClientTypes {
    /// Reserved for internal use.
    public struct RejectedEntityInfo {
        /// Reserved for internal use.
        /// This member is required.
        public var errorType: CloudWatchLogsClientTypes.EntityRejectionErrorType?

        public init(
            errorType: CloudWatchLogsClientTypes.EntityRejectionErrorType? = nil
        )
        {
            self.errorType = errorType
        }
    }

}

extension CloudWatchLogsClientTypes {
    /// Represents the rejected events.
    public struct RejectedLogEventsInfo {
        /// The expired log events.
        public var expiredLogEventEndIndex: Swift.Int?
        /// The index of the first log event that is too new. This field is inclusive.
        public var tooNewLogEventStartIndex: Swift.Int?
        /// The index of the last log event that is too old. This field is exclusive.
        public var tooOldLogEventEndIndex: Swift.Int?

        public init(
            expiredLogEventEndIndex: Swift.Int? = nil,
            tooNewLogEventStartIndex: Swift.Int? = nil,
            tooOldLogEventEndIndex: Swift.Int? = nil
        )
        {
            self.expiredLogEventEndIndex = expiredLogEventEndIndex
            self.tooNewLogEventStartIndex = tooNewLogEventStartIndex
            self.tooOldLogEventEndIndex = tooOldLogEventEndIndex
        }
    }

}

public struct PutLogEventsOutput {
    /// The next sequence token. This field has been deprecated. The sequence token is now ignored in PutLogEvents actions. PutLogEvents actions are always accepted even if the sequence token is not valid. You can use parallel PutLogEvents actions on the same log stream and you do not need to wait for the response of a previous PutLogEvents action to obtain the nextSequenceToken value.
    public var nextSequenceToken: Swift.String?
    /// Reserved for internal use.
    public var rejectedEntityInfo: CloudWatchLogsClientTypes.RejectedEntityInfo?
    /// The rejected events.
    public var rejectedLogEventsInfo: CloudWatchLogsClientTypes.RejectedLogEventsInfo?

    public init(
        nextSequenceToken: Swift.String? = nil,
        rejectedEntityInfo: CloudWatchLogsClientTypes.RejectedEntityInfo? = nil,
        rejectedLogEventsInfo: CloudWatchLogsClientTypes.RejectedLogEventsInfo? = nil
    )
    {
        self.nextSequenceToken = nextSequenceToken
        self.rejectedEntityInfo = rejectedEntityInfo
        self.rejectedLogEventsInfo = rejectedLogEventsInfo
    }
}

public struct PutMetricFilterInput {
    /// A name for the metric filter.
    /// This member is required.
    public var filterName: Swift.String?
    /// A filter pattern for extracting metric data out of ingested log events.
    /// This member is required.
    public var filterPattern: Swift.String?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// A collection of information that defines how metric data gets emitted.
    /// This member is required.
    public var metricTransformations: [CloudWatchLogsClientTypes.MetricTransformation]?

    public init(
        filterName: Swift.String? = nil,
        filterPattern: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        metricTransformations: [CloudWatchLogsClientTypes.MetricTransformation]? = nil
    )
    {
        self.filterName = filterName
        self.filterPattern = filterPattern
        self.logGroupName = logGroupName
        self.metricTransformations = metricTransformations
    }
}

public struct PutQueryDefinitionInput {
    /// Used as an idempotency token, to avoid returning an exception if the service receives the same request twice because of a network error.
    public var clientToken: Swift.String?
    /// Use this parameter to include specific log groups as part of your query definition. If you are updating a query definition and you omit this parameter, then the updated definition will contain no log groups.
    public var logGroupNames: [Swift.String]?
    /// A name for the query definition. If you are saving numerous query definitions, we recommend that you name them. This way, you can find the ones you want by using the first part of the name as a filter in the queryDefinitionNamePrefix parameter of [DescribeQueryDefinitions](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeQueryDefinitions.html).
    /// This member is required.
    public var name: Swift.String?
    /// If you are updating a query definition, use this parameter to specify the ID of the query definition that you want to update. You can use [DescribeQueryDefinitions](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeQueryDefinitions.html) to retrieve the IDs of your saved query definitions. If you are creating a query definition, do not specify this parameter. CloudWatch generates a unique ID for the new query definition and include it in the response to this operation.
    public var queryDefinitionId: Swift.String?
    /// The query string to use for this definition. For more information, see [CloudWatch Logs Insights Query Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html).
    /// This member is required.
    public var queryString: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        logGroupNames: [Swift.String]? = nil,
        name: Swift.String? = nil,
        queryDefinitionId: Swift.String? = nil,
        queryString: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.logGroupNames = logGroupNames
        self.name = name
        self.queryDefinitionId = queryDefinitionId
        self.queryString = queryString
    }
}

public struct PutQueryDefinitionOutput {
    /// The ID of the query definition.
    public var queryDefinitionId: Swift.String?

    public init(
        queryDefinitionId: Swift.String? = nil
    )
    {
        self.queryDefinitionId = queryDefinitionId
    }
}

public struct PutResourcePolicyInput {
    /// Details of the new policy, including the identity of the principal that is enabled to put logs to this account. This is formatted as a JSON string. This parameter is required. The following example creates a resource policy enabling the Route 53 service to put DNS query logs in to the specified log group. Replace "logArn" with the ARN of your CloudWatch Logs resource, such as a log group or log stream. CloudWatch Logs also supports [aws:SourceArn](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html#condition-keys-sourcearn) and [aws:SourceAccount](https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_condition-keys.html#condition-keys-sourceaccount) condition context keys. In the example resource policy, you would replace the value of SourceArn with the resource making the call from Route 53 to CloudWatch Logs. You would also replace the value of SourceAccount with the Amazon Web Services account ID making that call. { "Version": "2012-10-17", "Statement": [ { "Sid": "Route53LogsToCloudWatchLogs", "Effect": "Allow", "Principal": { "Service": [ "route53.amazonaws.com" ] }, "Action": "logs:PutLogEvents", "Resource": "logArn", "Condition": { "ArnLike": { "aws:SourceArn": "myRoute53ResourceArn" }, "StringEquals": { "aws:SourceAccount": "myAwsAccountId" } } } ] }
    public var policyDocument: Swift.String?
    /// Name of the new policy. This parameter is required.
    public var policyName: Swift.String?

    public init(
        policyDocument: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.policyDocument = policyDocument
        self.policyName = policyName
    }
}

public struct PutResourcePolicyOutput {
    /// The new policy.
    public var resourcePolicy: CloudWatchLogsClientTypes.ResourcePolicy?

    public init(
        resourcePolicy: CloudWatchLogsClientTypes.ResourcePolicy? = nil
    )
    {
        self.resourcePolicy = resourcePolicy
    }
}

public struct PutRetentionPolicyInput {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The number of days to retain the log events in the specified log group. Possible values are: 1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1096, 1827, 2192, 2557, 2922, 3288, and 3653. To set a log group so that its log events do not expire, use [DeleteRetentionPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DeleteRetentionPolicy.html).
    /// This member is required.
    public var retentionInDays: Swift.Int?

    public init(
        logGroupName: Swift.String? = nil,
        retentionInDays: Swift.Int? = nil
    )
    {
        self.logGroupName = logGroupName
        self.retentionInDays = retentionInDays
    }
}

public struct PutSubscriptionFilterInput {
    /// The ARN of the destination to deliver matching log events to. Currently, the supported destinations are:
    ///
    /// * An Amazon Kinesis stream belonging to the same account as the subscription filter, for same-account delivery.
    ///
    /// * A logical destination (specified using an ARN) belonging to a different account, for cross-account delivery. If you're setting up a cross-account subscription, the destination must have an IAM policy associated with it. The IAM policy must allow the sender to send logs to the destination. For more information, see [PutDestinationPolicy](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_PutDestinationPolicy.html).
    ///
    /// * A Kinesis Data Firehose delivery stream belonging to the same account as the subscription filter, for same-account delivery.
    ///
    /// * A Lambda function belonging to the same account as the subscription filter, for same-account delivery.
    /// This member is required.
    public var destinationArn: Swift.String?
    /// The method used to distribute log data to the destination. By default, log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis data stream.
    public var distribution: CloudWatchLogsClientTypes.Distribution?
    /// A name for the subscription filter. If you are updating an existing filter, you must specify the correct name in filterName. To find the name of the filter currently associated with a log group, use [DescribeSubscriptionFilters](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_DescribeSubscriptionFilters.html).
    /// This member is required.
    public var filterName: Swift.String?
    /// A filter pattern for subscribing to a filtered stream of log events.
    /// This member is required.
    public var filterPattern: Swift.String?
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
    public var roleArn: Swift.String?

    public init(
        destinationArn: Swift.String? = nil,
        distribution: CloudWatchLogsClientTypes.Distribution? = nil,
        filterName: Swift.String? = nil,
        filterPattern: Swift.String? = nil,
        logGroupName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.destinationArn = destinationArn
        self.distribution = distribution
        self.filterName = filterName
        self.filterPattern = filterPattern
        self.logGroupName = logGroupName
        self.roleArn = roleArn
    }
}

public struct StartLiveTailInput {
    /// An optional pattern to use to filter the results to include only log events that match the pattern. For example, a filter pattern of error 404 causes only log events that include both error and 404 to be included in the Live Tail stream. Regular expression filter patterns are supported. For more information about filter pattern syntax, see [Filter and Pattern Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
    public var logEventFilterPattern: Swift.String?
    /// An array where each item in the array is a log group to include in the Live Tail session. Specify each log group by its ARN. If you specify an ARN, the ARN can't end with an asterisk (*). You can include up to 10 log groups.
    /// This member is required.
    public var logGroupIdentifiers: [Swift.String]?
    /// If you specify this parameter, then only log events in the log streams that have names that start with the prefixes that you specify here are included in the Live Tail session. If you specify this field, you can't also specify the logStreamNames field. You can specify this parameter only if you specify only one log group in logGroupIdentifiers.
    public var logStreamNamePrefixes: [Swift.String]?
    /// If you specify this parameter, then only log events in the log streams that you specify here are included in the Live Tail session. If you specify this field, you can't also specify the logStreamNamePrefixes field. You can specify this parameter only if you specify only one log group in logGroupIdentifiers.
    public var logStreamNames: [Swift.String]?

    public init(
        logEventFilterPattern: Swift.String? = nil,
        logGroupIdentifiers: [Swift.String]? = nil,
        logStreamNamePrefixes: [Swift.String]? = nil,
        logStreamNames: [Swift.String]? = nil
    )
    {
        self.logEventFilterPattern = logEventFilterPattern
        self.logGroupIdentifiers = logGroupIdentifiers
        self.logStreamNamePrefixes = logStreamNamePrefixes
        self.logStreamNames = logStreamNames
    }
}

/// his exception is returned if an unknown error occurs during a Live Tail session.
public struct SessionStreamingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SessionStreamingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// This exception is returned in a Live Tail stream when the Live Tail session times out. Live Tail sessions time out after three hours.
public struct SessionTimeoutException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "SessionTimeoutException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension CloudWatchLogsClientTypes {
    /// This object includes the stream returned by your [StartLiveTail](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_StartLiveTail.html) request.
    public enum StartLiveTailResponseStream {
        /// This object contains information about this Live Tail session, including the log groups included and the log stream filters, if any.
        case sessionstart(CloudWatchLogsClientTypes.LiveTailSessionStart)
        /// This object contains the log events and session metadata.
        case sessionupdate(CloudWatchLogsClientTypes.LiveTailSessionUpdate)
        case sdkUnknown(Swift.String)
    }

}

public struct StartLiveTailOutput {
    /// An object that includes the stream returned by your request. It can include both log events and exceptions.
    public var responseStream: AsyncThrowingStream<CloudWatchLogsClientTypes.StartLiveTailResponseStream, Swift.Error>?

    public init(
        responseStream: AsyncThrowingStream<CloudWatchLogsClientTypes.StartLiveTailResponseStream, Swift.Error>? = nil
    )
    {
        self.responseStream = responseStream
    }
}

extension CloudWatchLogsClientTypes {
    /// Reserved.
    public struct QueryCompileErrorLocation {
        /// Reserved.
        public var endCharOffset: Swift.Int?
        /// Reserved.
        public var startCharOffset: Swift.Int?

        public init(
            endCharOffset: Swift.Int? = nil,
            startCharOffset: Swift.Int? = nil
        )
        {
            self.endCharOffset = endCharOffset
            self.startCharOffset = startCharOffset
        }
    }

}

extension CloudWatchLogsClientTypes {
    /// Reserved.
    public struct QueryCompileError {
        /// Reserved.
        public var location: CloudWatchLogsClientTypes.QueryCompileErrorLocation?
        /// Reserved.
        public var message: Swift.String?

        public init(
            location: CloudWatchLogsClientTypes.QueryCompileErrorLocation? = nil,
            message: Swift.String? = nil
        )
        {
            self.location = location
            self.message = message
        }
    }

}

/// The query string is not valid. Details about this error are displayed in a QueryCompileError object. For more information, see [QueryCompileError](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_QueryCompileError.html). For more information about valid query syntax, see [CloudWatch Logs Insights Query Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html).
public struct MalformedQueryException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// Reserved.
        public internal(set) var queryCompileError: CloudWatchLogsClientTypes.QueryCompileError? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "MalformedQueryException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        queryCompileError: CloudWatchLogsClientTypes.QueryCompileError? = nil
    )
    {
        self.properties.message = message
        self.properties.queryCompileError = queryCompileError
    }
}

public struct StartQueryInput {
    /// The end of the time range to query. The range is inclusive, so the specified end time is included in the query. Specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.
    /// This member is required.
    public var endTime: Swift.Int?
    /// The maximum number of log events to return in the query. If the query string uses the fields command, only the specified fields and their values are returned. The default is 1000.
    public var limit: Swift.Int?
    /// The list of log groups to query. You can include up to 50 log groups. You can specify them by the log group name or ARN. If a log group that you're querying is in a source account and you're using a monitoring account, you must specify the ARN of the log group here. The query definition must also be defined in the monitoring account. If you specify an ARN, the ARN can't end with an asterisk (*). A StartQuery operation must include exactly one of the following parameters: logGroupName, logGroupNames, or logGroupIdentifiers.
    public var logGroupIdentifiers: [Swift.String]?
    /// The log group on which to perform the query. A StartQuery operation must include exactly one of the following parameters: logGroupName, logGroupNames, or logGroupIdentifiers.
    public var logGroupName: Swift.String?
    /// The list of log groups to be queried. You can include up to 50 log groups. A StartQuery operation must include exactly one of the following parameters: logGroupName, logGroupNames, or logGroupIdentifiers.
    public var logGroupNames: [Swift.String]?
    /// The query string to use. For more information, see [CloudWatch Logs Insights Query Syntax](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CWL_QuerySyntax.html).
    /// This member is required.
    public var queryString: Swift.String?
    /// The beginning of the time range to query. The range is inclusive, so the specified start time is included in the query. Specified as epoch time, the number of seconds since January 1, 1970, 00:00:00 UTC.
    /// This member is required.
    public var startTime: Swift.Int?

    public init(
        endTime: Swift.Int? = nil,
        limit: Swift.Int? = nil,
        logGroupIdentifiers: [Swift.String]? = nil,
        logGroupName: Swift.String? = nil,
        logGroupNames: [Swift.String]? = nil,
        queryString: Swift.String? = nil,
        startTime: Swift.Int? = nil
    )
    {
        self.endTime = endTime
        self.limit = limit
        self.logGroupIdentifiers = logGroupIdentifiers
        self.logGroupName = logGroupName
        self.logGroupNames = logGroupNames
        self.queryString = queryString
        self.startTime = startTime
    }
}

public struct StartQueryOutput {
    /// The unique ID of the query.
    public var queryId: Swift.String?

    public init(
        queryId: Swift.String? = nil
    )
    {
        self.queryId = queryId
    }
}

public struct StopQueryInput {
    /// The ID number of the query to stop. To find this ID number, use DescribeQueries.
    /// This member is required.
    public var queryId: Swift.String?

    public init(
        queryId: Swift.String? = nil
    )
    {
        self.queryId = queryId
    }
}

public struct StopQueryOutput {
    /// This is true if the query was stopped by the StopQuery operation.
    public var success: Swift.Bool

    public init(
        success: Swift.Bool = false
    )
    {
        self.success = success
    }
}

@available(*, deprecated, message: "Please use the generic tagging API model TagResourceRequest")
public struct TagLogGroupInput {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The key-value pairs to use for the tags.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        logGroupName: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.logGroupName = logGroupName
        self.tags = tags
    }
}

/// A resource can have no more than 50 tags.
public struct TooManyTagsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The name of the resource.
        public internal(set) var resourceName: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTagsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceName: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceName = resourceName
    }
}

public struct TagResourceInput {
    /// The ARN of the resource that you're adding tags to. The ARN format of a log group is arn:aws:logs:Region:account-id:log-group:log-group-name  The ARN format of a destination is arn:aws:logs:Region:account-id:destination:destination-name  For more information about ARN format, see [CloudWatch Logs resources and operations](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html).
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of key-value pairs to associate with the resource.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TestMetricFilterInput {
    /// A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.
    /// This member is required.
    public var filterPattern: Swift.String?
    /// The log event messages to test.
    /// This member is required.
    public var logEventMessages: [Swift.String]?

    public init(
        filterPattern: Swift.String? = nil,
        logEventMessages: [Swift.String]? = nil
    )
    {
        self.filterPattern = filterPattern
        self.logEventMessages = logEventMessages
    }
}

extension CloudWatchLogsClientTypes {
    /// Represents a matched event.
    public struct MetricFilterMatchRecord {
        /// The raw event data.
        public var eventMessage: Swift.String?
        /// The event number.
        public var eventNumber: Swift.Int
        /// The values extracted from the event data by the filter.
        public var extractedValues: [Swift.String: Swift.String]?

        public init(
            eventMessage: Swift.String? = nil,
            eventNumber: Swift.Int = 0,
            extractedValues: [Swift.String: Swift.String]? = nil
        )
        {
            self.eventMessage = eventMessage
            self.eventNumber = eventNumber
            self.extractedValues = extractedValues
        }
    }

}

public struct TestMetricFilterOutput {
    /// The matched events.
    public var matches: [CloudWatchLogsClientTypes.MetricFilterMatchRecord]?

    public init(
        matches: [CloudWatchLogsClientTypes.MetricFilterMatchRecord]? = nil
    )
    {
        self.matches = matches
    }
}

@available(*, deprecated, message: "Please use the generic tagging API model UntagResourceRequest")
public struct UntagLogGroupInput {
    /// The name of the log group.
    /// This member is required.
    public var logGroupName: Swift.String?
    /// The tag keys. The corresponding tags are removed from the log group.
    /// This member is required.
    public var tags: [Swift.String]?

    public init(
        logGroupName: Swift.String? = nil,
        tags: [Swift.String]? = nil
    )
    {
        self.logGroupName = logGroupName
        self.tags = tags
    }
}

public struct UntagResourceInput {
    /// The ARN of the CloudWatch Logs resource that you're removing tags from. The ARN format of a log group is arn:aws:logs:Region:account-id:log-group:log-group-name  The ARN format of a destination is arn:aws:logs:Region:account-id:destination:destination-name  For more information about ARN format, see [CloudWatch Logs resources and operations](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html).
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The list of tag keys to remove from the resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

extension CloudWatchLogsClientTypes {

    public enum SuppressionUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hours
        case minutes
        case seconds
        case sdkUnknown(Swift.String)

        public static var allCases: [SuppressionUnit] {
            return [
                .hours,
                .minutes,
                .seconds
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hours: return "HOURS"
            case .minutes: return "MINUTES"
            case .seconds: return "SECONDS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension CloudWatchLogsClientTypes {
    /// If you are suppressing an anomaly temporariliy, this structure defines how long the suppression period is to be.
    public struct SuppressionPeriod {
        /// Specifies whether the value of value is in seconds, minutes, or hours.
        public var suppressionUnit: CloudWatchLogsClientTypes.SuppressionUnit?
        /// Specifies the number of seconds, minutes or hours to suppress this anomaly. There is no maximum.
        public var value: Swift.Int

        public init(
            suppressionUnit: CloudWatchLogsClientTypes.SuppressionUnit? = nil,
            value: Swift.Int = 0
        )
        {
            self.suppressionUnit = suppressionUnit
            self.value = value
        }
    }

}

extension CloudWatchLogsClientTypes {

    public enum SuppressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case infinite
        case limited
        case sdkUnknown(Swift.String)

        public static var allCases: [SuppressionType] {
            return [
                .infinite,
                .limited
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .infinite: return "INFINITE"
            case .limited: return "LIMITED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct UpdateAnomalyInput {
    /// The ARN of the anomaly detector that this operation is to act on.
    /// This member is required.
    public var anomalyDetectorArn: Swift.String?
    /// If you are suppressing or unsuppressing an anomaly, specify its unique ID here. You can find anomaly IDs by using the [ListAnomalies](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListAnomalies.html) operation.
    public var anomalyId: Swift.String?
    /// If you are suppressing or unsuppressing an pattern, specify its unique ID here. You can find pattern IDs by using the [ListAnomalies](https://docs.aws.amazon.com/AmazonCloudWatchLogs/latest/APIReference/API_ListAnomalies.html) operation.
    public var patternId: Swift.String?
    /// If you are temporarily suppressing an anomaly or pattern, use this structure to specify how long the suppression is to last.
    public var suppressionPeriod: CloudWatchLogsClientTypes.SuppressionPeriod?
    /// Use this to specify whether the suppression to be temporary or infinite. If you specify LIMITED, you must also specify a suppressionPeriod. If you specify INFINITE, any value for suppressionPeriod is ignored.
    public var suppressionType: CloudWatchLogsClientTypes.SuppressionType?

    public init(
        anomalyDetectorArn: Swift.String? = nil,
        anomalyId: Swift.String? = nil,
        patternId: Swift.String? = nil,
        suppressionPeriod: CloudWatchLogsClientTypes.SuppressionPeriod? = nil,
        suppressionType: CloudWatchLogsClientTypes.SuppressionType? = nil
    )
    {
        self.anomalyDetectorArn = anomalyDetectorArn
        self.anomalyId = anomalyId
        self.patternId = patternId
        self.suppressionPeriod = suppressionPeriod
        self.suppressionType = suppressionType
    }
}

public struct UpdateDeliveryConfigurationInput {
    /// The field delimiter to use between record fields when the final output format of a delivery is in Plain, W3C, or Raw format.
    public var fieldDelimiter: Swift.String?
    /// The ID of the delivery to be updated by this request.
    /// This member is required.
    public var id: Swift.String?
    /// The list of record fields to be delivered to the destination, in order. If the delivery’s log source has mandatory fields, they must be included in this list.
    public var recordFields: [Swift.String]?
    /// This structure contains parameters that are valid only when the delivery’s delivery destination is an S3 bucket.
    public var s3DeliveryConfiguration: CloudWatchLogsClientTypes.S3DeliveryConfiguration?

    public init(
        fieldDelimiter: Swift.String? = nil,
        id: Swift.String? = nil,
        recordFields: [Swift.String]? = nil,
        s3DeliveryConfiguration: CloudWatchLogsClientTypes.S3DeliveryConfiguration? = nil
    )
    {
        self.fieldDelimiter = fieldDelimiter
        self.id = id
        self.recordFields = recordFields
        self.s3DeliveryConfiguration = s3DeliveryConfiguration
    }
}

public struct UpdateDeliveryConfigurationOutput {

    public init() { }
}

public struct UpdateLogAnomalyDetectorInput {
    /// The ARN of the anomaly detector that you want to update.
    /// This member is required.
    public var anomalyDetectorArn: Swift.String?
    /// The number of days to use as the life cycle of anomalies. After this time, anomalies are automatically baselined and the anomaly detector model will treat new occurrences of similar event as normal. Therefore, if you do not correct the cause of an anomaly during this time, it will be considered normal going forward and will not be detected.
    public var anomalyVisibilityTime: Swift.Int?
    /// Use this parameter to pause or restart the anomaly detector.
    /// This member is required.
    public var enabled: Swift.Bool?
    /// Specifies how often the anomaly detector runs and look for anomalies. Set this value according to the frequency that the log group receives new logs. For example, if the log group receives new log events every 10 minutes, then setting evaluationFrequency to FIFTEEN_MIN might be appropriate.
    public var evaluationFrequency: CloudWatchLogsClientTypes.EvaluationFrequency?
    /// A symbolic description of how CloudWatch Logs should interpret the data in each log event. For example, a log event can contain timestamps, IP addresses, strings, and so on. You use the filter pattern to specify what to look for in the log event message.
    public var filterPattern: Swift.String?

    public init(
        anomalyDetectorArn: Swift.String? = nil,
        anomalyVisibilityTime: Swift.Int? = nil,
        enabled: Swift.Bool? = nil,
        evaluationFrequency: CloudWatchLogsClientTypes.EvaluationFrequency? = nil,
        filterPattern: Swift.String? = nil
    )
    {
        self.anomalyDetectorArn = anomalyDetectorArn
        self.anomalyVisibilityTime = anomalyVisibilityTime
        self.enabled = enabled
        self.evaluationFrequency = evaluationFrequency
        self.filterPattern = filterPattern
    }
}

extension AssociateKmsKeyInput {

    static func urlPathProvider(_ value: AssociateKmsKeyInput) -> Swift.String? {
        return "/"
    }
}

extension CancelExportTaskInput {

    static func urlPathProvider(_ value: CancelExportTaskInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDeliveryInput {

    static func urlPathProvider(_ value: CreateDeliveryInput) -> Swift.String? {
        return "/"
    }
}

extension CreateExportTaskInput {

    static func urlPathProvider(_ value: CreateExportTaskInput) -> Swift.String? {
        return "/"
    }
}

extension CreateLogAnomalyDetectorInput {

    static func urlPathProvider(_ value: CreateLogAnomalyDetectorInput) -> Swift.String? {
        return "/"
    }
}

extension CreateLogGroupInput {

    static func urlPathProvider(_ value: CreateLogGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateLogStreamInput {

    static func urlPathProvider(_ value: CreateLogStreamInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAccountPolicyInput {

    static func urlPathProvider(_ value: DeleteAccountPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDataProtectionPolicyInput {

    static func urlPathProvider(_ value: DeleteDataProtectionPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDeliveryInput {

    static func urlPathProvider(_ value: DeleteDeliveryInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDeliveryDestinationInput {

    static func urlPathProvider(_ value: DeleteDeliveryDestinationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDeliveryDestinationPolicyInput {

    static func urlPathProvider(_ value: DeleteDeliveryDestinationPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDeliverySourceInput {

    static func urlPathProvider(_ value: DeleteDeliverySourceInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDestinationInput {

    static func urlPathProvider(_ value: DeleteDestinationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteLogAnomalyDetectorInput {

    static func urlPathProvider(_ value: DeleteLogAnomalyDetectorInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteLogGroupInput {

    static func urlPathProvider(_ value: DeleteLogGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteLogStreamInput {

    static func urlPathProvider(_ value: DeleteLogStreamInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteMetricFilterInput {

    static func urlPathProvider(_ value: DeleteMetricFilterInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteQueryDefinitionInput {

    static func urlPathProvider(_ value: DeleteQueryDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteResourcePolicyInput {

    static func urlPathProvider(_ value: DeleteResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteRetentionPolicyInput {

    static func urlPathProvider(_ value: DeleteRetentionPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteSubscriptionFilterInput {

    static func urlPathProvider(_ value: DeleteSubscriptionFilterInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAccountPoliciesInput {

    static func urlPathProvider(_ value: DescribeAccountPoliciesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeConfigurationTemplatesInput {

    static func urlPathProvider(_ value: DescribeConfigurationTemplatesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDeliveriesInput {

    static func urlPathProvider(_ value: DescribeDeliveriesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDeliveryDestinationsInput {

    static func urlPathProvider(_ value: DescribeDeliveryDestinationsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDeliverySourcesInput {

    static func urlPathProvider(_ value: DescribeDeliverySourcesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDestinationsInput {

    static func urlPathProvider(_ value: DescribeDestinationsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeExportTasksInput {

    static func urlPathProvider(_ value: DescribeExportTasksInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeLogGroupsInput {

    static func urlPathProvider(_ value: DescribeLogGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeLogStreamsInput {

    static func urlPathProvider(_ value: DescribeLogStreamsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeMetricFiltersInput {

    static func urlPathProvider(_ value: DescribeMetricFiltersInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeQueriesInput {

    static func urlPathProvider(_ value: DescribeQueriesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeQueryDefinitionsInput {

    static func urlPathProvider(_ value: DescribeQueryDefinitionsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeResourcePoliciesInput {

    static func urlPathProvider(_ value: DescribeResourcePoliciesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeSubscriptionFiltersInput {

    static func urlPathProvider(_ value: DescribeSubscriptionFiltersInput) -> Swift.String? {
        return "/"
    }
}

extension DisassociateKmsKeyInput {

    static func urlPathProvider(_ value: DisassociateKmsKeyInput) -> Swift.String? {
        return "/"
    }
}

extension FilterLogEventsInput {

    static func urlPathProvider(_ value: FilterLogEventsInput) -> Swift.String? {
        return "/"
    }
}

extension GetDataProtectionPolicyInput {

    static func urlPathProvider(_ value: GetDataProtectionPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension GetDeliveryInput {

    static func urlPathProvider(_ value: GetDeliveryInput) -> Swift.String? {
        return "/"
    }
}

extension GetDeliveryDestinationInput {

    static func urlPathProvider(_ value: GetDeliveryDestinationInput) -> Swift.String? {
        return "/"
    }
}

extension GetDeliveryDestinationPolicyInput {

    static func urlPathProvider(_ value: GetDeliveryDestinationPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension GetDeliverySourceInput {

    static func urlPathProvider(_ value: GetDeliverySourceInput) -> Swift.String? {
        return "/"
    }
}

extension GetLogAnomalyDetectorInput {

    static func urlPathProvider(_ value: GetLogAnomalyDetectorInput) -> Swift.String? {
        return "/"
    }
}

extension GetLogEventsInput {

    static func urlPathProvider(_ value: GetLogEventsInput) -> Swift.String? {
        return "/"
    }
}

extension GetLogGroupFieldsInput {

    static func urlPathProvider(_ value: GetLogGroupFieldsInput) -> Swift.String? {
        return "/"
    }
}

extension GetLogRecordInput {

    static func urlPathProvider(_ value: GetLogRecordInput) -> Swift.String? {
        return "/"
    }
}

extension GetQueryResultsInput {

    static func urlPathProvider(_ value: GetQueryResultsInput) -> Swift.String? {
        return "/"
    }
}

extension ListAnomaliesInput {

    static func urlPathProvider(_ value: ListAnomaliesInput) -> Swift.String? {
        return "/"
    }
}

extension ListLogAnomalyDetectorsInput {

    static func urlPathProvider(_ value: ListLogAnomalyDetectorsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsLogGroupInput {

    static func urlPathProvider(_ value: ListTagsLogGroupInput) -> Swift.String? {
        return "/"
    }
}

extension PutAccountPolicyInput {

    static func urlPathProvider(_ value: PutAccountPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension PutDataProtectionPolicyInput {

    static func urlPathProvider(_ value: PutDataProtectionPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension PutDeliveryDestinationInput {

    static func urlPathProvider(_ value: PutDeliveryDestinationInput) -> Swift.String? {
        return "/"
    }
}

extension PutDeliveryDestinationPolicyInput {

    static func urlPathProvider(_ value: PutDeliveryDestinationPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension PutDeliverySourceInput {

    static func urlPathProvider(_ value: PutDeliverySourceInput) -> Swift.String? {
        return "/"
    }
}

extension PutDestinationInput {

    static func urlPathProvider(_ value: PutDestinationInput) -> Swift.String? {
        return "/"
    }
}

extension PutDestinationPolicyInput {

    static func urlPathProvider(_ value: PutDestinationPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension PutLogEventsInput {

    static func urlPathProvider(_ value: PutLogEventsInput) -> Swift.String? {
        return "/"
    }
}

extension PutMetricFilterInput {

    static func urlPathProvider(_ value: PutMetricFilterInput) -> Swift.String? {
        return "/"
    }
}

extension PutQueryDefinitionInput {

    static func urlPathProvider(_ value: PutQueryDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension PutResourcePolicyInput {

    static func urlPathProvider(_ value: PutResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension PutRetentionPolicyInput {

    static func urlPathProvider(_ value: PutRetentionPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension PutSubscriptionFilterInput {

    static func urlPathProvider(_ value: PutSubscriptionFilterInput) -> Swift.String? {
        return "/"
    }
}

extension StartLiveTailInput {

    static func urlPathProvider(_ value: StartLiveTailInput) -> Swift.String? {
        return "/"
    }
}

extension StartQueryInput {

    static func urlPathProvider(_ value: StartQueryInput) -> Swift.String? {
        return "/"
    }
}

extension StopQueryInput {

    static func urlPathProvider(_ value: StopQueryInput) -> Swift.String? {
        return "/"
    }
}

extension TagLogGroupInput {

    static func urlPathProvider(_ value: TagLogGroupInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension TestMetricFilterInput {

    static func urlPathProvider(_ value: TestMetricFilterInput) -> Swift.String? {
        return "/"
    }
}

extension UntagLogGroupInput {

    static func urlPathProvider(_ value: UntagLogGroupInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateAnomalyInput {

    static func urlPathProvider(_ value: UpdateAnomalyInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateDeliveryConfigurationInput {

    static func urlPathProvider(_ value: UpdateDeliveryConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateLogAnomalyDetectorInput {

    static func urlPathProvider(_ value: UpdateLogAnomalyDetectorInput) -> Swift.String? {
        return "/"
    }
}

extension AssociateKmsKeyInput {

    static func write(value: AssociateKmsKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["kmsKeyId"].write(value.kmsKeyId)
        try writer["logGroupName"].write(value.logGroupName)
        try writer["resourceIdentifier"].write(value.resourceIdentifier)
    }
}

extension CancelExportTaskInput {

    static func write(value: CancelExportTaskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["taskId"].write(value.taskId)
    }
}

extension CreateDeliveryInput {

    static func write(value: CreateDeliveryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deliveryDestinationArn"].write(value.deliveryDestinationArn)
        try writer["deliverySourceName"].write(value.deliverySourceName)
        try writer["fieldDelimiter"].write(value.fieldDelimiter)
        try writer["recordFields"].writeList(value.recordFields, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["s3DeliveryConfiguration"].write(value.s3DeliveryConfiguration, with: CloudWatchLogsClientTypes.S3DeliveryConfiguration.write(value:to:))
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateExportTaskInput {

    static func write(value: CreateExportTaskInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destination"].write(value.destination)
        try writer["destinationPrefix"].write(value.destinationPrefix)
        try writer["from"].write(value.from)
        try writer["logGroupName"].write(value.logGroupName)
        try writer["logStreamNamePrefix"].write(value.logStreamNamePrefix)
        try writer["taskName"].write(value.taskName)
        try writer["to"].write(value.to)
    }
}

extension CreateLogAnomalyDetectorInput {

    static func write(value: CreateLogAnomalyDetectorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["anomalyVisibilityTime"].write(value.anomalyVisibilityTime)
        try writer["detectorName"].write(value.detectorName)
        try writer["evaluationFrequency"].write(value.evaluationFrequency)
        try writer["filterPattern"].write(value.filterPattern)
        try writer["kmsKeyId"].write(value.kmsKeyId)
        try writer["logGroupArnList"].writeList(value.logGroupArnList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateLogGroupInput {

    static func write(value: CreateLogGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["kmsKeyId"].write(value.kmsKeyId)
        try writer["logGroupClass"].write(value.logGroupClass)
        try writer["logGroupName"].write(value.logGroupName)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateLogStreamInput {

    static func write(value: CreateLogStreamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logGroupName"].write(value.logGroupName)
        try writer["logStreamName"].write(value.logStreamName)
    }
}

extension DeleteAccountPolicyInput {

    static func write(value: DeleteAccountPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["policyName"].write(value.policyName)
        try writer["policyType"].write(value.policyType)
    }
}

extension DeleteDataProtectionPolicyInput {

    static func write(value: DeleteDataProtectionPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logGroupIdentifier"].write(value.logGroupIdentifier)
    }
}

extension DeleteDeliveryInput {

    static func write(value: DeleteDeliveryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
    }
}

extension DeleteDeliveryDestinationInput {

    static func write(value: DeleteDeliveryDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension DeleteDeliveryDestinationPolicyInput {

    static func write(value: DeleteDeliveryDestinationPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deliveryDestinationName"].write(value.deliveryDestinationName)
    }
}

extension DeleteDeliverySourceInput {

    static func write(value: DeleteDeliverySourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension DeleteDestinationInput {

    static func write(value: DeleteDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destinationName"].write(value.destinationName)
    }
}

extension DeleteLogAnomalyDetectorInput {

    static func write(value: DeleteLogAnomalyDetectorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["anomalyDetectorArn"].write(value.anomalyDetectorArn)
    }
}

extension DeleteLogGroupInput {

    static func write(value: DeleteLogGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logGroupName"].write(value.logGroupName)
    }
}

extension DeleteLogStreamInput {

    static func write(value: DeleteLogStreamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logGroupName"].write(value.logGroupName)
        try writer["logStreamName"].write(value.logStreamName)
    }
}

extension DeleteMetricFilterInput {

    static func write(value: DeleteMetricFilterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filterName"].write(value.filterName)
        try writer["logGroupName"].write(value.logGroupName)
    }
}

extension DeleteQueryDefinitionInput {

    static func write(value: DeleteQueryDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["queryDefinitionId"].write(value.queryDefinitionId)
    }
}

extension DeleteResourcePolicyInput {

    static func write(value: DeleteResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["policyName"].write(value.policyName)
    }
}

extension DeleteRetentionPolicyInput {

    static func write(value: DeleteRetentionPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logGroupName"].write(value.logGroupName)
    }
}

extension DeleteSubscriptionFilterInput {

    static func write(value: DeleteSubscriptionFilterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filterName"].write(value.filterName)
        try writer["logGroupName"].write(value.logGroupName)
    }
}

extension DescribeAccountPoliciesInput {

    static func write(value: DescribeAccountPoliciesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIdentifiers"].writeList(value.accountIdentifiers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["policyName"].write(value.policyName)
        try writer["policyType"].write(value.policyType)
    }
}

extension DescribeConfigurationTemplatesInput {

    static func write(value: DescribeConfigurationTemplatesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deliveryDestinationTypes"].writeList(value.deliveryDestinationTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<CloudWatchLogsClientTypes.DeliveryDestinationType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["limit"].write(value.limit)
        try writer["logTypes"].writeList(value.logTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["nextToken"].write(value.nextToken)
        try writer["resourceTypes"].writeList(value.resourceTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["service"].write(value.service)
    }
}

extension DescribeDeliveriesInput {

    static func write(value: DescribeDeliveriesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["limit"].write(value.limit)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension DescribeDeliveryDestinationsInput {

    static func write(value: DescribeDeliveryDestinationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["limit"].write(value.limit)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension DescribeDeliverySourcesInput {

    static func write(value: DescribeDeliverySourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["limit"].write(value.limit)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension DescribeDestinationsInput {

    static func write(value: DescribeDestinationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DestinationNamePrefix"].write(value.destinationNamePrefix)
        try writer["limit"].write(value.limit)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension DescribeExportTasksInput {

    static func write(value: DescribeExportTasksInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["limit"].write(value.limit)
        try writer["nextToken"].write(value.nextToken)
        try writer["statusCode"].write(value.statusCode)
        try writer["taskId"].write(value.taskId)
    }
}

extension DescribeLogGroupsInput {

    static func write(value: DescribeLogGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accountIdentifiers"].writeList(value.accountIdentifiers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["includeLinkedAccounts"].write(value.includeLinkedAccounts)
        try writer["limit"].write(value.limit)
        try writer["logGroupClass"].write(value.logGroupClass)
        try writer["logGroupNamePattern"].write(value.logGroupNamePattern)
        try writer["logGroupNamePrefix"].write(value.logGroupNamePrefix)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension DescribeLogStreamsInput {

    static func write(value: DescribeLogStreamsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["descending"].write(value.descending)
        try writer["limit"].write(value.limit)
        try writer["logGroupIdentifier"].write(value.logGroupIdentifier)
        try writer["logGroupName"].write(value.logGroupName)
        try writer["logStreamNamePrefix"].write(value.logStreamNamePrefix)
        try writer["nextToken"].write(value.nextToken)
        try writer["orderBy"].write(value.orderBy)
    }
}

extension DescribeMetricFiltersInput {

    static func write(value: DescribeMetricFiltersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filterNamePrefix"].write(value.filterNamePrefix)
        try writer["limit"].write(value.limit)
        try writer["logGroupName"].write(value.logGroupName)
        try writer["metricName"].write(value.metricName)
        try writer["metricNamespace"].write(value.metricNamespace)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension DescribeQueriesInput {

    static func write(value: DescribeQueriesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logGroupName"].write(value.logGroupName)
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["status"].write(value.status)
    }
}

extension DescribeQueryDefinitionsInput {

    static func write(value: DescribeQueryDefinitionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["maxResults"].write(value.maxResults)
        try writer["nextToken"].write(value.nextToken)
        try writer["queryDefinitionNamePrefix"].write(value.queryDefinitionNamePrefix)
    }
}

extension DescribeResourcePoliciesInput {

    static func write(value: DescribeResourcePoliciesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["limit"].write(value.limit)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension DescribeSubscriptionFiltersInput {

    static func write(value: DescribeSubscriptionFiltersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filterNamePrefix"].write(value.filterNamePrefix)
        try writer["limit"].write(value.limit)
        try writer["logGroupName"].write(value.logGroupName)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension DisassociateKmsKeyInput {

    static func write(value: DisassociateKmsKeyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logGroupName"].write(value.logGroupName)
        try writer["resourceIdentifier"].write(value.resourceIdentifier)
    }
}

extension FilterLogEventsInput {

    static func write(value: FilterLogEventsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endTime"].write(value.endTime)
        try writer["filterPattern"].write(value.filterPattern)
        try writer["interleaved"].write(value.interleaved)
        try writer["limit"].write(value.limit)
        try writer["logGroupIdentifier"].write(value.logGroupIdentifier)
        try writer["logGroupName"].write(value.logGroupName)
        try writer["logStreamNamePrefix"].write(value.logStreamNamePrefix)
        try writer["logStreamNames"].writeList(value.logStreamNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["nextToken"].write(value.nextToken)
        try writer["startTime"].write(value.startTime)
        try writer["unmask"].write(value.unmask)
    }
}

extension GetDataProtectionPolicyInput {

    static func write(value: GetDataProtectionPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logGroupIdentifier"].write(value.logGroupIdentifier)
    }
}

extension GetDeliveryInput {

    static func write(value: GetDeliveryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["id"].write(value.id)
    }
}

extension GetDeliveryDestinationInput {

    static func write(value: GetDeliveryDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension GetDeliveryDestinationPolicyInput {

    static func write(value: GetDeliveryDestinationPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deliveryDestinationName"].write(value.deliveryDestinationName)
    }
}

extension GetDeliverySourceInput {

    static func write(value: GetDeliverySourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["name"].write(value.name)
    }
}

extension GetLogAnomalyDetectorInput {

    static func write(value: GetLogAnomalyDetectorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["anomalyDetectorArn"].write(value.anomalyDetectorArn)
    }
}

extension GetLogEventsInput {

    static func write(value: GetLogEventsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endTime"].write(value.endTime)
        try writer["limit"].write(value.limit)
        try writer["logGroupIdentifier"].write(value.logGroupIdentifier)
        try writer["logGroupName"].write(value.logGroupName)
        try writer["logStreamName"].write(value.logStreamName)
        try writer["nextToken"].write(value.nextToken)
        try writer["startFromHead"].write(value.startFromHead)
        try writer["startTime"].write(value.startTime)
        try writer["unmask"].write(value.unmask)
    }
}

extension GetLogGroupFieldsInput {

    static func write(value: GetLogGroupFieldsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logGroupIdentifier"].write(value.logGroupIdentifier)
        try writer["logGroupName"].write(value.logGroupName)
        try writer["time"].write(value.time)
    }
}

extension GetLogRecordInput {

    static func write(value: GetLogRecordInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logRecordPointer"].write(value.logRecordPointer)
        try writer["unmask"].write(value.unmask)
    }
}

extension GetQueryResultsInput {

    static func write(value: GetQueryResultsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["queryId"].write(value.queryId)
    }
}

extension ListAnomaliesInput {

    static func write(value: ListAnomaliesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["anomalyDetectorArn"].write(value.anomalyDetectorArn)
        try writer["limit"].write(value.limit)
        try writer["nextToken"].write(value.nextToken)
        try writer["suppressionState"].write(value.suppressionState)
    }
}

extension ListLogAnomalyDetectorsInput {

    static func write(value: ListLogAnomalyDetectorsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filterLogGroupArn"].write(value.filterLogGroupArn)
        try writer["limit"].write(value.limit)
        try writer["nextToken"].write(value.nextToken)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
    }
}

extension ListTagsLogGroupInput {

    static func write(value: ListTagsLogGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logGroupName"].write(value.logGroupName)
    }
}

extension PutAccountPolicyInput {

    static func write(value: PutAccountPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["policyDocument"].write(value.policyDocument)
        try writer["policyName"].write(value.policyName)
        try writer["policyType"].write(value.policyType)
        try writer["scope"].write(value.scope)
        try writer["selectionCriteria"].write(value.selectionCriteria)
    }
}

extension PutDataProtectionPolicyInput {

    static func write(value: PutDataProtectionPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logGroupIdentifier"].write(value.logGroupIdentifier)
        try writer["policyDocument"].write(value.policyDocument)
    }
}

extension PutDeliveryDestinationInput {

    static func write(value: PutDeliveryDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deliveryDestinationConfiguration"].write(value.deliveryDestinationConfiguration, with: CloudWatchLogsClientTypes.DeliveryDestinationConfiguration.write(value:to:))
        try writer["name"].write(value.name)
        try writer["outputFormat"].write(value.outputFormat)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension PutDeliveryDestinationPolicyInput {

    static func write(value: PutDeliveryDestinationPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["deliveryDestinationName"].write(value.deliveryDestinationName)
        try writer["deliveryDestinationPolicy"].write(value.deliveryDestinationPolicy)
    }
}

extension PutDeliverySourceInput {

    static func write(value: PutDeliverySourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logType"].write(value.logType)
        try writer["name"].write(value.name)
        try writer["resourceArn"].write(value.resourceArn)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension PutDestinationInput {

    static func write(value: PutDestinationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destinationName"].write(value.destinationName)
        try writer["roleArn"].write(value.roleArn)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["targetArn"].write(value.targetArn)
    }
}

extension PutDestinationPolicyInput {

    static func write(value: PutDestinationPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["accessPolicy"].write(value.accessPolicy)
        try writer["destinationName"].write(value.destinationName)
        try writer["forceUpdate"].write(value.forceUpdate)
    }
}

extension PutLogEventsInput {

    static func write(value: PutLogEventsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["entity"].write(value.entity, with: CloudWatchLogsClientTypes.Entity.write(value:to:))
        try writer["logEvents"].writeList(value.logEvents, memberWritingClosure: CloudWatchLogsClientTypes.InputLogEvent.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["logGroupName"].write(value.logGroupName)
        try writer["logStreamName"].write(value.logStreamName)
        try writer["sequenceToken"].write(value.sequenceToken)
    }
}

extension PutMetricFilterInput {

    static func write(value: PutMetricFilterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filterName"].write(value.filterName)
        try writer["filterPattern"].write(value.filterPattern)
        try writer["logGroupName"].write(value.logGroupName)
        try writer["metricTransformations"].writeList(value.metricTransformations, memberWritingClosure: CloudWatchLogsClientTypes.MetricTransformation.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutQueryDefinitionInput {

    static func write(value: PutQueryDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["clientToken"].write(value.clientToken)
        try writer["logGroupNames"].writeList(value.logGroupNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["name"].write(value.name)
        try writer["queryDefinitionId"].write(value.queryDefinitionId)
        try writer["queryString"].write(value.queryString)
    }
}

extension PutResourcePolicyInput {

    static func write(value: PutResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["policyDocument"].write(value.policyDocument)
        try writer["policyName"].write(value.policyName)
    }
}

extension PutRetentionPolicyInput {

    static func write(value: PutRetentionPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logGroupName"].write(value.logGroupName)
        try writer["retentionInDays"].write(value.retentionInDays)
    }
}

extension PutSubscriptionFilterInput {

    static func write(value: PutSubscriptionFilterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destinationArn"].write(value.destinationArn)
        try writer["distribution"].write(value.distribution)
        try writer["filterName"].write(value.filterName)
        try writer["filterPattern"].write(value.filterPattern)
        try writer["logGroupName"].write(value.logGroupName)
        try writer["roleArn"].write(value.roleArn)
    }
}

extension StartLiveTailInput {

    static func write(value: StartLiveTailInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logEventFilterPattern"].write(value.logEventFilterPattern)
        try writer["logGroupIdentifiers"].writeList(value.logGroupIdentifiers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["logStreamNamePrefixes"].writeList(value.logStreamNamePrefixes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["logStreamNames"].writeList(value.logStreamNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension StartQueryInput {

    static func write(value: StartQueryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["endTime"].write(value.endTime)
        try writer["limit"].write(value.limit)
        try writer["logGroupIdentifiers"].writeList(value.logGroupIdentifiers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["logGroupName"].write(value.logGroupName)
        try writer["logGroupNames"].writeList(value.logGroupNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["queryString"].write(value.queryString)
        try writer["startTime"].write(value.startTime)
    }
}

extension StopQueryInput {

    static func write(value: StopQueryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["queryId"].write(value.queryId)
    }
}

extension TagLogGroupInput {

    static func write(value: TagLogGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logGroupName"].write(value.logGroupName)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
        try writer["tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension TestMetricFilterInput {

    static func write(value: TestMetricFilterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["filterPattern"].write(value.filterPattern)
        try writer["logEventMessages"].writeList(value.logEventMessages, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagLogGroupInput {

    static func write(value: UntagLogGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["logGroupName"].write(value.logGroupName)
        try writer["tags"].writeList(value.tags, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["resourceArn"].write(value.resourceArn)
        try writer["tagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateAnomalyInput {

    static func write(value: UpdateAnomalyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["anomalyDetectorArn"].write(value.anomalyDetectorArn)
        try writer["anomalyId"].write(value.anomalyId)
        try writer["patternId"].write(value.patternId)
        try writer["suppressionPeriod"].write(value.suppressionPeriod, with: CloudWatchLogsClientTypes.SuppressionPeriod.write(value:to:))
        try writer["suppressionType"].write(value.suppressionType)
    }
}

extension UpdateDeliveryConfigurationInput {

    static func write(value: UpdateDeliveryConfigurationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["fieldDelimiter"].write(value.fieldDelimiter)
        try writer["id"].write(value.id)
        try writer["recordFields"].writeList(value.recordFields, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["s3DeliveryConfiguration"].write(value.s3DeliveryConfiguration, with: CloudWatchLogsClientTypes.S3DeliveryConfiguration.write(value:to:))
    }
}

extension UpdateLogAnomalyDetectorInput {

    static func write(value: UpdateLogAnomalyDetectorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["anomalyDetectorArn"].write(value.anomalyDetectorArn)
        try writer["anomalyVisibilityTime"].write(value.anomalyVisibilityTime)
        try writer["enabled"].write(value.enabled)
        try writer["evaluationFrequency"].write(value.evaluationFrequency)
        try writer["filterPattern"].write(value.filterPattern)
    }
}

extension AssociateKmsKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateKmsKeyOutput {
        return AssociateKmsKeyOutput()
    }
}

extension CancelExportTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelExportTaskOutput {
        return CancelExportTaskOutput()
    }
}

extension CreateDeliveryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDeliveryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDeliveryOutput()
        value.delivery = try reader["delivery"].readIfPresent(with: CloudWatchLogsClientTypes.Delivery.read(from:))
        return value
    }
}

extension CreateExportTaskOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateExportTaskOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateExportTaskOutput()
        value.taskId = try reader["taskId"].readIfPresent()
        return value
    }
}

extension CreateLogAnomalyDetectorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateLogAnomalyDetectorOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateLogAnomalyDetectorOutput()
        value.anomalyDetectorArn = try reader["anomalyDetectorArn"].readIfPresent()
        return value
    }
}

extension CreateLogGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateLogGroupOutput {
        return CreateLogGroupOutput()
    }
}

extension CreateLogStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateLogStreamOutput {
        return CreateLogStreamOutput()
    }
}

extension DeleteAccountPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAccountPolicyOutput {
        return DeleteAccountPolicyOutput()
    }
}

extension DeleteDataProtectionPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDataProtectionPolicyOutput {
        return DeleteDataProtectionPolicyOutput()
    }
}

extension DeleteDeliveryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDeliveryOutput {
        return DeleteDeliveryOutput()
    }
}

extension DeleteDeliveryDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDeliveryDestinationOutput {
        return DeleteDeliveryDestinationOutput()
    }
}

extension DeleteDeliveryDestinationPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDeliveryDestinationPolicyOutput {
        return DeleteDeliveryDestinationPolicyOutput()
    }
}

extension DeleteDeliverySourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDeliverySourceOutput {
        return DeleteDeliverySourceOutput()
    }
}

extension DeleteDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDestinationOutput {
        return DeleteDestinationOutput()
    }
}

extension DeleteLogAnomalyDetectorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteLogAnomalyDetectorOutput {
        return DeleteLogAnomalyDetectorOutput()
    }
}

extension DeleteLogGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteLogGroupOutput {
        return DeleteLogGroupOutput()
    }
}

extension DeleteLogStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteLogStreamOutput {
        return DeleteLogStreamOutput()
    }
}

extension DeleteMetricFilterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteMetricFilterOutput {
        return DeleteMetricFilterOutput()
    }
}

extension DeleteQueryDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteQueryDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteQueryDefinitionOutput()
        value.success = try reader["success"].readIfPresent() ?? false
        return value
    }
}

extension DeleteResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteResourcePolicyOutput {
        return DeleteResourcePolicyOutput()
    }
}

extension DeleteRetentionPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRetentionPolicyOutput {
        return DeleteRetentionPolicyOutput()
    }
}

extension DeleteSubscriptionFilterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSubscriptionFilterOutput {
        return DeleteSubscriptionFilterOutput()
    }
}

extension DescribeAccountPoliciesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAccountPoliciesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAccountPoliciesOutput()
        value.accountPolicies = try reader["accountPolicies"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.AccountPolicy.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeConfigurationTemplatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeConfigurationTemplatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeConfigurationTemplatesOutput()
        value.configurationTemplates = try reader["configurationTemplates"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.ConfigurationTemplate.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension DescribeDeliveriesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDeliveriesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDeliveriesOutput()
        value.deliveries = try reader["deliveries"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.Delivery.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension DescribeDeliveryDestinationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDeliveryDestinationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDeliveryDestinationsOutput()
        value.deliveryDestinations = try reader["deliveryDestinations"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.DeliveryDestination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension DescribeDeliverySourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDeliverySourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDeliverySourcesOutput()
        value.deliverySources = try reader["deliverySources"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.DeliverySource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension DescribeDestinationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDestinationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDestinationsOutput()
        value.destinations = try reader["destinations"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.Destination.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension DescribeExportTasksOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeExportTasksOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeExportTasksOutput()
        value.exportTasks = try reader["exportTasks"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.ExportTask.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension DescribeLogGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeLogGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeLogGroupsOutput()
        value.logGroups = try reader["logGroups"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.LogGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension DescribeLogStreamsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeLogStreamsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeLogStreamsOutput()
        value.logStreams = try reader["logStreams"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.LogStream.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension DescribeMetricFiltersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeMetricFiltersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeMetricFiltersOutput()
        value.metricFilters = try reader["metricFilters"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.MetricFilter.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension DescribeQueriesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeQueriesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeQueriesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.queries = try reader["queries"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.QueryInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeQueryDefinitionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeQueryDefinitionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeQueryDefinitionsOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.queryDefinitions = try reader["queryDefinitions"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.QueryDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeResourcePoliciesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeResourcePoliciesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeResourcePoliciesOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.resourcePolicies = try reader["resourcePolicies"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.ResourcePolicy.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeSubscriptionFiltersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeSubscriptionFiltersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeSubscriptionFiltersOutput()
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.subscriptionFilters = try reader["subscriptionFilters"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.SubscriptionFilter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DisassociateKmsKeyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateKmsKeyOutput {
        return DisassociateKmsKeyOutput()
    }
}

extension FilterLogEventsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> FilterLogEventsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = FilterLogEventsOutput()
        value.events = try reader["events"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.FilteredLogEvent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        value.searchedLogStreams = try reader["searchedLogStreams"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.SearchedLogStream.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetDataProtectionPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDataProtectionPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDataProtectionPolicyOutput()
        value.lastUpdatedTime = try reader["lastUpdatedTime"].readIfPresent()
        value.logGroupIdentifier = try reader["logGroupIdentifier"].readIfPresent()
        value.policyDocument = try reader["policyDocument"].readIfPresent()
        return value
    }
}

extension GetDeliveryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDeliveryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDeliveryOutput()
        value.delivery = try reader["delivery"].readIfPresent(with: CloudWatchLogsClientTypes.Delivery.read(from:))
        return value
    }
}

extension GetDeliveryDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDeliveryDestinationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDeliveryDestinationOutput()
        value.deliveryDestination = try reader["deliveryDestination"].readIfPresent(with: CloudWatchLogsClientTypes.DeliveryDestination.read(from:))
        return value
    }
}

extension GetDeliveryDestinationPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDeliveryDestinationPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDeliveryDestinationPolicyOutput()
        value.policy = try reader["policy"].readIfPresent(with: CloudWatchLogsClientTypes.Policy.read(from:))
        return value
    }
}

extension GetDeliverySourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDeliverySourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDeliverySourceOutput()
        value.deliverySource = try reader["deliverySource"].readIfPresent(with: CloudWatchLogsClientTypes.DeliverySource.read(from:))
        return value
    }
}

extension GetLogAnomalyDetectorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLogAnomalyDetectorOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLogAnomalyDetectorOutput()
        value.anomalyDetectorStatus = try reader["anomalyDetectorStatus"].readIfPresent()
        value.anomalyVisibilityTime = try reader["anomalyVisibilityTime"].readIfPresent()
        value.creationTimeStamp = try reader["creationTimeStamp"].readIfPresent() ?? 0
        value.detectorName = try reader["detectorName"].readIfPresent()
        value.evaluationFrequency = try reader["evaluationFrequency"].readIfPresent()
        value.filterPattern = try reader["filterPattern"].readIfPresent()
        value.kmsKeyId = try reader["kmsKeyId"].readIfPresent()
        value.lastModifiedTimeStamp = try reader["lastModifiedTimeStamp"].readIfPresent() ?? 0
        value.logGroupArnList = try reader["logGroupArnList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetLogEventsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLogEventsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLogEventsOutput()
        value.events = try reader["events"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.OutputLogEvent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextBackwardToken = try reader["nextBackwardToken"].readIfPresent()
        value.nextForwardToken = try reader["nextForwardToken"].readIfPresent()
        return value
    }
}

extension GetLogGroupFieldsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLogGroupFieldsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLogGroupFieldsOutput()
        value.logGroupFields = try reader["logGroupFields"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.LogGroupField.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetLogRecordOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLogRecordOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLogRecordOutput()
        value.logRecord = try reader["logRecord"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension GetQueryResultsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetQueryResultsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetQueryResultsOutput()
        value.encryptionKey = try reader["encryptionKey"].readIfPresent()
        value.results = try reader["results"].readListIfPresent(memberReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: CloudWatchLogsClientTypes.ResultField.read(from:), memberNodeInfo: "member", isFlattened: false), memberNodeInfo: "member", isFlattened: false)
        value.statistics = try reader["statistics"].readIfPresent(with: CloudWatchLogsClientTypes.QueryStatistics.read(from:))
        value.status = try reader["status"].readIfPresent()
        return value
    }
}

extension ListAnomaliesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAnomaliesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAnomaliesOutput()
        value.anomalies = try reader["anomalies"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.Anomaly.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListLogAnomalyDetectorsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListLogAnomalyDetectorsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListLogAnomalyDetectorsOutput()
        value.anomalyDetectors = try reader["anomalyDetectors"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.AnomalyDetector.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["nextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ListTagsLogGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsLogGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsLogGroupOutput()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension PutAccountPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAccountPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutAccountPolicyOutput()
        value.accountPolicy = try reader["accountPolicy"].readIfPresent(with: CloudWatchLogsClientTypes.AccountPolicy.read(from:))
        return value
    }
}

extension PutDataProtectionPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutDataProtectionPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutDataProtectionPolicyOutput()
        value.lastUpdatedTime = try reader["lastUpdatedTime"].readIfPresent()
        value.logGroupIdentifier = try reader["logGroupIdentifier"].readIfPresent()
        value.policyDocument = try reader["policyDocument"].readIfPresent()
        return value
    }
}

extension PutDeliveryDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutDeliveryDestinationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutDeliveryDestinationOutput()
        value.deliveryDestination = try reader["deliveryDestination"].readIfPresent(with: CloudWatchLogsClientTypes.DeliveryDestination.read(from:))
        return value
    }
}

extension PutDeliveryDestinationPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutDeliveryDestinationPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutDeliveryDestinationPolicyOutput()
        value.policy = try reader["policy"].readIfPresent(with: CloudWatchLogsClientTypes.Policy.read(from:))
        return value
    }
}

extension PutDeliverySourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutDeliverySourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutDeliverySourceOutput()
        value.deliverySource = try reader["deliverySource"].readIfPresent(with: CloudWatchLogsClientTypes.DeliverySource.read(from:))
        return value
    }
}

extension PutDestinationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutDestinationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutDestinationOutput()
        value.destination = try reader["destination"].readIfPresent(with: CloudWatchLogsClientTypes.Destination.read(from:))
        return value
    }
}

extension PutDestinationPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutDestinationPolicyOutput {
        return PutDestinationPolicyOutput()
    }
}

extension PutLogEventsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutLogEventsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutLogEventsOutput()
        value.nextSequenceToken = try reader["nextSequenceToken"].readIfPresent()
        value.rejectedEntityInfo = try reader["rejectedEntityInfo"].readIfPresent(with: CloudWatchLogsClientTypes.RejectedEntityInfo.read(from:))
        value.rejectedLogEventsInfo = try reader["rejectedLogEventsInfo"].readIfPresent(with: CloudWatchLogsClientTypes.RejectedLogEventsInfo.read(from:))
        return value
    }
}

extension PutMetricFilterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutMetricFilterOutput {
        return PutMetricFilterOutput()
    }
}

extension PutQueryDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutQueryDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutQueryDefinitionOutput()
        value.queryDefinitionId = try reader["queryDefinitionId"].readIfPresent()
        return value
    }
}

extension PutResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutResourcePolicyOutput()
        value.resourcePolicy = try reader["resourcePolicy"].readIfPresent(with: CloudWatchLogsClientTypes.ResourcePolicy.read(from:))
        return value
    }
}

extension PutRetentionPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutRetentionPolicyOutput {
        return PutRetentionPolicyOutput()
    }
}

extension PutSubscriptionFilterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutSubscriptionFilterOutput {
        return PutSubscriptionFilterOutput()
    }
}

extension StartLiveTailOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartLiveTailOutput {
        var value = StartLiveTailOutput()
        if case let .stream(stream) = httpResponse.body {
            let messageDecoder = SmithyEventStreams.DefaultMessageDecoder()
            let decoderStream = SmithyEventStreams.DefaultMessageDecoderStream<CloudWatchLogsClientTypes.StartLiveTailResponseStream>(stream: stream, messageDecoder: messageDecoder, unmarshalClosure: CloudWatchLogsClientTypes.StartLiveTailResponseStream.unmarshal)
            value.responseStream = decoderStream.toAsyncStream()
        }
        return value
    }
}

extension StartQueryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartQueryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartQueryOutput()
        value.queryId = try reader["queryId"].readIfPresent()
        return value
    }
}

extension StopQueryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopQueryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopQueryOutput()
        value.success = try reader["success"].readIfPresent() ?? false
        return value
    }
}

extension TagLogGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagLogGroupOutput {
        return TagLogGroupOutput()
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension TestMetricFilterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TestMetricFilterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = TestMetricFilterOutput()
        value.matches = try reader["matches"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.MetricFilterMatchRecord.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension UntagLogGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagLogGroupOutput {
        return UntagLogGroupOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateAnomalyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAnomalyOutput {
        return UpdateAnomalyOutput()
    }
}

extension UpdateDeliveryConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDeliveryConfigurationOutput {
        return UpdateDeliveryConfigurationOutput()
    }
}

extension UpdateLogAnomalyDetectorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateLogAnomalyDetectorOutput {
        return UpdateLogAnomalyDetectorOutput()
    }
}

enum AssociateKmsKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CancelExportTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidOperationException": return try InvalidOperationException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDeliveryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateExportTaskOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateLogAnomalyDetectorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateLogGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateLogStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceAlreadyExistsException": return try ResourceAlreadyExistsException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAccountPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDataProtectionPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDeliveryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDeliveryDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDeliveryDestinationPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDeliverySourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteLogAnomalyDetectorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteLogGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteLogStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteMetricFilterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteQueryDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRetentionPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSubscriptionFilterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAccountPoliciesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeConfigurationTemplatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDeliveriesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDeliveryDestinationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDeliverySourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDestinationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeExportTasksOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeLogGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeLogStreamsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeMetricFiltersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeQueriesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeQueryDefinitionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeResourcePoliciesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeSubscriptionFiltersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateKmsKeyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum FilterLogEventsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDataProtectionPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDeliveryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDeliveryDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDeliveryDestinationPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDeliverySourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLogAnomalyDetectorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLogEventsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLogGroupFieldsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLogRecordOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetQueryResultsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAnomaliesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListLogAnomalyDetectorsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsLogGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAccountPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutDataProtectionPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutDeliveryDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutDeliveryDestinationPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutDeliverySourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutDestinationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutDestinationPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutLogEventsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "DataAlreadyAcceptedException": return try DataAlreadyAcceptedException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "InvalidSequenceTokenException": return try InvalidSequenceTokenException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "UnrecognizedClientException": return try UnrecognizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutMetricFilterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutQueryDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutRetentionPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutSubscriptionFilterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartLiveTailOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InvalidOperationException": return try InvalidOperationException.makeError(baseError: baseError)
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartQueryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "MalformedQueryException": return try MalformedQueryException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopQueryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagLogGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TestMetricFilterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagLogGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAnomalyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDeliveryConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateLogAnomalyDetectorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidParameterException": return try InvalidParameterException.makeError(baseError: baseError)
            case "OperationAbortedException": return try OperationAbortedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidParameterException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidParameterException {
        let reader = baseError.errorBodyReader
        var value = InvalidParameterException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension OperationAbortedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> OperationAbortedException {
        let reader = baseError.errorBodyReader
        var value = OperationAbortedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ServiceUnavailableException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidOperationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidOperationException {
        let reader = baseError.errorBodyReader
        var value = InvalidOperationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceAlreadyExistsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceAlreadyExistsException {
        let reader = baseError.errorBodyReader
        var value = ResourceAlreadyExistsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnrecognizedClientException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnrecognizedClientException {
        let reader = baseError.errorBodyReader
        var value = UnrecognizedClientException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidSequenceTokenException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidSequenceTokenException {
        let reader = baseError.errorBodyReader
        var value = InvalidSequenceTokenException()
        value.properties.expectedSequenceToken = try reader["expectedSequenceToken"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension DataAlreadyAcceptedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> DataAlreadyAcceptedException {
        let reader = baseError.errorBodyReader
        var value = DataAlreadyAcceptedException()
        value.properties.expectedSequenceToken = try reader["expectedSequenceToken"].readIfPresent()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MalformedQueryException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> MalformedQueryException {
        let reader = baseError.errorBodyReader
        var value = MalformedQueryException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.queryCompileError = try reader["queryCompileError"].readIfPresent(with: CloudWatchLogsClientTypes.QueryCompileError.read(from:))
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyTagsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TooManyTagsException {
        let reader = baseError.errorBodyReader
        var value = TooManyTagsException()
        value.properties.message = try reader["message"].readIfPresent()
        value.properties.resourceName = try reader["resourceName"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension CloudWatchLogsClientTypes.StartLiveTailResponseStream {
    static var unmarshal: SmithyEventStreamsAPI.UnmarshalClosure<CloudWatchLogsClientTypes.StartLiveTailResponseStream> {
        { message in
            switch try message.type() {
            case .event(let params):
                switch params.eventType {
                case "sessionStart":
                    let value = try SmithyJSON.Reader.readFrom(message.payload, with: CloudWatchLogsClientTypes.LiveTailSessionStart.read(from:))
                    return .sessionstart(value)
                case "sessionUpdate":
                    let value = try SmithyJSON.Reader.readFrom(message.payload, with: CloudWatchLogsClientTypes.LiveTailSessionUpdate.read(from:))
                    return .sessionupdate(value)
                default:
                    return .sdkUnknown("error processing event stream, unrecognized event: \(params.eventType)")
                }
            case .exception(let params):
                let makeError: (SmithyEventStreamsAPI.Message, SmithyEventStreamsAPI.MessageType.ExceptionParams) throws -> Swift.Error = { message, params in
                    switch params.exceptionType {
                    case "SessionTimeoutException":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: SessionTimeoutException.read(from:))
                        return value
                    case "SessionStreamingException":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: SessionStreamingException.read(from:))
                        return value
                    default:
                        let httpResponse = SmithyHTTPAPI.HTTPResponse(body: .data(message.payload), statusCode: .ok)
                        return AWSClientRuntime.UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "error processing event stream, unrecognized ':exceptionType': \(params.exceptionType); contentType: \(params.contentType ?? "nil")", requestID: nil, typeName: nil)
                    }
                }
                let error = try makeError(message, params)
                throw error
            case .error(let params):
                let httpResponse = SmithyHTTPAPI.HTTPResponse(body: .data(message.payload), statusCode: .ok)
                throw AWSClientRuntime.UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "error processing event stream, unrecognized ':errorType': \(params.errorCode); message: \(params.message ?? "nil")", requestID: nil, typeName: nil)
            case .unknown(messageType: let messageType):
                throw Smithy.ClientError.unknownError("unrecognized event stream message ':message-type': \(messageType)")
            }
        }
    }
}

extension CloudWatchLogsClientTypes.Delivery {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.Delivery {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.Delivery()
        value.id = try reader["id"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.deliverySourceName = try reader["deliverySourceName"].readIfPresent()
        value.deliveryDestinationArn = try reader["deliveryDestinationArn"].readIfPresent()
        value.deliveryDestinationType = try reader["deliveryDestinationType"].readIfPresent()
        value.recordFields = try reader["recordFields"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.fieldDelimiter = try reader["fieldDelimiter"].readIfPresent()
        value.s3DeliveryConfiguration = try reader["s3DeliveryConfiguration"].readIfPresent(with: CloudWatchLogsClientTypes.S3DeliveryConfiguration.read(from:))
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CloudWatchLogsClientTypes.S3DeliveryConfiguration {

    static func write(value: CloudWatchLogsClientTypes.S3DeliveryConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["enableHiveCompatiblePath"].write(value.enableHiveCompatiblePath)
        try writer["suffixPath"].write(value.suffixPath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.S3DeliveryConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.S3DeliveryConfiguration()
        value.suffixPath = try reader["suffixPath"].readIfPresent()
        value.enableHiveCompatiblePath = try reader["enableHiveCompatiblePath"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.AccountPolicy {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.AccountPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.AccountPolicy()
        value.policyName = try reader["policyName"].readIfPresent()
        value.policyDocument = try reader["policyDocument"].readIfPresent()
        value.lastUpdatedTime = try reader["lastUpdatedTime"].readIfPresent()
        value.policyType = try reader["policyType"].readIfPresent()
        value.scope = try reader["scope"].readIfPresent()
        value.selectionCriteria = try reader["selectionCriteria"].readIfPresent()
        value.accountId = try reader["accountId"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.ConfigurationTemplate {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.ConfigurationTemplate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.ConfigurationTemplate()
        value.service = try reader["service"].readIfPresent()
        value.logType = try reader["logType"].readIfPresent()
        value.resourceType = try reader["resourceType"].readIfPresent()
        value.deliveryDestinationType = try reader["deliveryDestinationType"].readIfPresent()
        value.defaultDeliveryConfigValues = try reader["defaultDeliveryConfigValues"].readIfPresent(with: CloudWatchLogsClientTypes.ConfigurationTemplateDeliveryConfigValues.read(from:))
        value.allowedFields = try reader["allowedFields"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.RecordField.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.allowedOutputFormats = try reader["allowedOutputFormats"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<CloudWatchLogsClientTypes.OutputFormat>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.allowedActionForAllowVendedLogsDeliveryForResource = try reader["allowedActionForAllowVendedLogsDeliveryForResource"].readIfPresent()
        value.allowedFieldDelimiters = try reader["allowedFieldDelimiters"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.allowedSuffixPathFields = try reader["allowedSuffixPathFields"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CloudWatchLogsClientTypes.RecordField {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.RecordField {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.RecordField()
        value.name = try reader["name"].readIfPresent()
        value.mandatory = try reader["mandatory"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.ConfigurationTemplateDeliveryConfigValues {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.ConfigurationTemplateDeliveryConfigValues {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.ConfigurationTemplateDeliveryConfigValues()
        value.recordFields = try reader["recordFields"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.fieldDelimiter = try reader["fieldDelimiter"].readIfPresent()
        value.s3DeliveryConfiguration = try reader["s3DeliveryConfiguration"].readIfPresent(with: CloudWatchLogsClientTypes.S3DeliveryConfiguration.read(from:))
        return value
    }
}

extension CloudWatchLogsClientTypes.DeliveryDestination {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.DeliveryDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.DeliveryDestination()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.deliveryDestinationType = try reader["deliveryDestinationType"].readIfPresent()
        value.outputFormat = try reader["outputFormat"].readIfPresent()
        value.deliveryDestinationConfiguration = try reader["deliveryDestinationConfiguration"].readIfPresent(with: CloudWatchLogsClientTypes.DeliveryDestinationConfiguration.read(from:))
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CloudWatchLogsClientTypes.DeliveryDestinationConfiguration {

    static func write(value: CloudWatchLogsClientTypes.DeliveryDestinationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["destinationResourceArn"].write(value.destinationResourceArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.DeliveryDestinationConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.DeliveryDestinationConfiguration()
        value.destinationResourceArn = try reader["destinationResourceArn"].readIfPresent() ?? ""
        return value
    }
}

extension CloudWatchLogsClientTypes.DeliverySource {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.DeliverySource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.DeliverySource()
        value.name = try reader["name"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.resourceArns = try reader["resourceArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.service = try reader["service"].readIfPresent()
        value.logType = try reader["logType"].readIfPresent()
        value.tags = try reader["tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CloudWatchLogsClientTypes.Destination {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.Destination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.Destination()
        value.destinationName = try reader["destinationName"].readIfPresent()
        value.targetArn = try reader["targetArn"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.accessPolicy = try reader["accessPolicy"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.creationTime = try reader["creationTime"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.ExportTask {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.ExportTask {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.ExportTask()
        value.taskId = try reader["taskId"].readIfPresent()
        value.taskName = try reader["taskName"].readIfPresent()
        value.logGroupName = try reader["logGroupName"].readIfPresent()
        value.from = try reader["from"].readIfPresent()
        value.to = try reader["to"].readIfPresent()
        value.destination = try reader["destination"].readIfPresent()
        value.destinationPrefix = try reader["destinationPrefix"].readIfPresent()
        value.status = try reader["status"].readIfPresent(with: CloudWatchLogsClientTypes.ExportTaskStatus.read(from:))
        value.executionInfo = try reader["executionInfo"].readIfPresent(with: CloudWatchLogsClientTypes.ExportTaskExecutionInfo.read(from:))
        return value
    }
}

extension CloudWatchLogsClientTypes.ExportTaskExecutionInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.ExportTaskExecutionInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.ExportTaskExecutionInfo()
        value.creationTime = try reader["creationTime"].readIfPresent()
        value.completionTime = try reader["completionTime"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.ExportTaskStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.ExportTaskStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.ExportTaskStatus()
        value.code = try reader["code"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.LogGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.LogGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.LogGroup()
        value.logGroupName = try reader["logGroupName"].readIfPresent()
        value.creationTime = try reader["creationTime"].readIfPresent()
        value.retentionInDays = try reader["retentionInDays"].readIfPresent()
        value.metricFilterCount = try reader["metricFilterCount"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.storedBytes = try reader["storedBytes"].readIfPresent()
        value.kmsKeyId = try reader["kmsKeyId"].readIfPresent()
        value.dataProtectionStatus = try reader["dataProtectionStatus"].readIfPresent()
        value.inheritedProperties = try reader["inheritedProperties"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<CloudWatchLogsClientTypes.InheritedProperty>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.logGroupClass = try reader["logGroupClass"].readIfPresent()
        value.logGroupArn = try reader["logGroupArn"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.LogStream {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.LogStream {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.LogStream()
        value.logStreamName = try reader["logStreamName"].readIfPresent()
        value.creationTime = try reader["creationTime"].readIfPresent()
        value.firstEventTimestamp = try reader["firstEventTimestamp"].readIfPresent()
        value.lastEventTimestamp = try reader["lastEventTimestamp"].readIfPresent()
        value.lastIngestionTime = try reader["lastIngestionTime"].readIfPresent()
        value.uploadSequenceToken = try reader["uploadSequenceToken"].readIfPresent()
        value.arn = try reader["arn"].readIfPresent()
        value.storedBytes = try reader["storedBytes"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.MetricFilter {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.MetricFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.MetricFilter()
        value.filterName = try reader["filterName"].readIfPresent()
        value.filterPattern = try reader["filterPattern"].readIfPresent()
        value.metricTransformations = try reader["metricTransformations"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.MetricTransformation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.creationTime = try reader["creationTime"].readIfPresent()
        value.logGroupName = try reader["logGroupName"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.MetricTransformation {

    static func write(value: CloudWatchLogsClientTypes.MetricTransformation?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["defaultValue"].write(value.defaultValue)
        try writer["dimensions"].writeMap(value.dimensions, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["metricName"].write(value.metricName)
        try writer["metricNamespace"].write(value.metricNamespace)
        try writer["metricValue"].write(value.metricValue)
        try writer["unit"].write(value.unit)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.MetricTransformation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.MetricTransformation()
        value.metricName = try reader["metricName"].readIfPresent() ?? ""
        value.metricNamespace = try reader["metricNamespace"].readIfPresent() ?? ""
        value.metricValue = try reader["metricValue"].readIfPresent() ?? ""
        value.defaultValue = try reader["defaultValue"].readIfPresent()
        value.dimensions = try reader["dimensions"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.unit = try reader["unit"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.QueryInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.QueryInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.QueryInfo()
        value.queryId = try reader["queryId"].readIfPresent()
        value.queryString = try reader["queryString"].readIfPresent()
        value.status = try reader["status"].readIfPresent()
        value.createTime = try reader["createTime"].readIfPresent()
        value.logGroupName = try reader["logGroupName"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.QueryDefinition {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.QueryDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.QueryDefinition()
        value.queryDefinitionId = try reader["queryDefinitionId"].readIfPresent()
        value.name = try reader["name"].readIfPresent()
        value.queryString = try reader["queryString"].readIfPresent()
        value.lastModified = try reader["lastModified"].readIfPresent()
        value.logGroupNames = try reader["logGroupNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CloudWatchLogsClientTypes.ResourcePolicy {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.ResourcePolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.ResourcePolicy()
        value.policyName = try reader["policyName"].readIfPresent()
        value.policyDocument = try reader["policyDocument"].readIfPresent()
        value.lastUpdatedTime = try reader["lastUpdatedTime"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.SubscriptionFilter {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.SubscriptionFilter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.SubscriptionFilter()
        value.filterName = try reader["filterName"].readIfPresent()
        value.logGroupName = try reader["logGroupName"].readIfPresent()
        value.filterPattern = try reader["filterPattern"].readIfPresent()
        value.destinationArn = try reader["destinationArn"].readIfPresent()
        value.roleArn = try reader["roleArn"].readIfPresent()
        value.distribution = try reader["distribution"].readIfPresent()
        value.creationTime = try reader["creationTime"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.FilteredLogEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.FilteredLogEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.FilteredLogEvent()
        value.logStreamName = try reader["logStreamName"].readIfPresent()
        value.timestamp = try reader["timestamp"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        value.ingestionTime = try reader["ingestionTime"].readIfPresent()
        value.eventId = try reader["eventId"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.SearchedLogStream {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.SearchedLogStream {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.SearchedLogStream()
        value.logStreamName = try reader["logStreamName"].readIfPresent()
        value.searchedCompletely = try reader["searchedCompletely"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.Policy {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.Policy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.Policy()
        value.deliveryDestinationPolicy = try reader["deliveryDestinationPolicy"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.OutputLogEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.OutputLogEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.OutputLogEvent()
        value.timestamp = try reader["timestamp"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        value.ingestionTime = try reader["ingestionTime"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.LogGroupField {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.LogGroupField {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.LogGroupField()
        value.name = try reader["name"].readIfPresent()
        value.percent = try reader["percent"].readIfPresent() ?? 0
        return value
    }
}

extension CloudWatchLogsClientTypes.ResultField {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.ResultField {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.ResultField()
        value.field = try reader["field"].readIfPresent()
        value.value = try reader["value"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.QueryStatistics {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.QueryStatistics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.QueryStatistics()
        value.recordsMatched = try reader["recordsMatched"].readIfPresent() ?? 0
        value.recordsScanned = try reader["recordsScanned"].readIfPresent() ?? 0
        value.bytesScanned = try reader["bytesScanned"].readIfPresent() ?? 0
        return value
    }
}

extension CloudWatchLogsClientTypes.Anomaly {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.Anomaly {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.Anomaly()
        value.anomalyId = try reader["anomalyId"].readIfPresent() ?? ""
        value.patternId = try reader["patternId"].readIfPresent() ?? ""
        value.anomalyDetectorArn = try reader["anomalyDetectorArn"].readIfPresent() ?? ""
        value.patternString = try reader["patternString"].readIfPresent() ?? ""
        value.patternRegex = try reader["patternRegex"].readIfPresent()
        value.priority = try reader["priority"].readIfPresent()
        value.firstSeen = try reader["firstSeen"].readIfPresent() ?? 0
        value.lastSeen = try reader["lastSeen"].readIfPresent() ?? 0
        value.description = try reader["description"].readIfPresent() ?? ""
        value.active = try reader["active"].readIfPresent() ?? false
        value.state = try reader["state"].readIfPresent() ?? .sdkUnknown("")
        value.histogram = try reader["histogram"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        value.logSamples = try reader["logSamples"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.LogEvent.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.patternTokens = try reader["patternTokens"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.PatternToken.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.logGroupArnList = try reader["logGroupArnList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.suppressed = try reader["suppressed"].readIfPresent()
        value.suppressedDate = try reader["suppressedDate"].readIfPresent() ?? 0
        value.suppressedUntil = try reader["suppressedUntil"].readIfPresent() ?? 0
        value.isPatternLevelSuppression = try reader["isPatternLevelSuppression"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.PatternToken {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.PatternToken {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.PatternToken()
        value.dynamicTokenPosition = try reader["dynamicTokenPosition"].readIfPresent() ?? 0
        value.isDynamic = try reader["isDynamic"].readIfPresent()
        value.tokenString = try reader["tokenString"].readIfPresent()
        value.enumerations = try reader["enumerations"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CloudWatchLogsClientTypes.LogEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.LogEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.LogEvent()
        value.timestamp = try reader["timestamp"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.AnomalyDetector {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.AnomalyDetector {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.AnomalyDetector()
        value.anomalyDetectorArn = try reader["anomalyDetectorArn"].readIfPresent()
        value.detectorName = try reader["detectorName"].readIfPresent()
        value.logGroupArnList = try reader["logGroupArnList"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.evaluationFrequency = try reader["evaluationFrequency"].readIfPresent()
        value.filterPattern = try reader["filterPattern"].readIfPresent()
        value.anomalyDetectorStatus = try reader["anomalyDetectorStatus"].readIfPresent()
        value.kmsKeyId = try reader["kmsKeyId"].readIfPresent()
        value.creationTimeStamp = try reader["creationTimeStamp"].readIfPresent() ?? 0
        value.lastModifiedTimeStamp = try reader["lastModifiedTimeStamp"].readIfPresent() ?? 0
        value.anomalyVisibilityTime = try reader["anomalyVisibilityTime"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.RejectedLogEventsInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.RejectedLogEventsInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.RejectedLogEventsInfo()
        value.tooNewLogEventStartIndex = try reader["tooNewLogEventStartIndex"].readIfPresent()
        value.tooOldLogEventEndIndex = try reader["tooOldLogEventEndIndex"].readIfPresent()
        value.expiredLogEventEndIndex = try reader["expiredLogEventEndIndex"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.RejectedEntityInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.RejectedEntityInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.RejectedEntityInfo()
        value.errorType = try reader["errorType"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SessionStreamingException {

    static func read(from reader: SmithyJSON.Reader) throws -> SessionStreamingException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SessionStreamingException()
        value.properties.message = try reader["message"].readIfPresent()
        return value
    }
}

extension SessionTimeoutException {

    static func read(from reader: SmithyJSON.Reader) throws -> SessionTimeoutException {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SessionTimeoutException()
        value.properties.message = try reader["message"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.LiveTailSessionUpdate {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.LiveTailSessionUpdate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.LiveTailSessionUpdate()
        value.sessionMetadata = try reader["sessionMetadata"].readIfPresent(with: CloudWatchLogsClientTypes.LiveTailSessionMetadata.read(from:))
        value.sessionResults = try reader["sessionResults"].readListIfPresent(memberReadingClosure: CloudWatchLogsClientTypes.LiveTailSessionLogEvent.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CloudWatchLogsClientTypes.LiveTailSessionLogEvent {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.LiveTailSessionLogEvent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.LiveTailSessionLogEvent()
        value.logStreamName = try reader["logStreamName"].readIfPresent()
        value.logGroupIdentifier = try reader["logGroupIdentifier"].readIfPresent()
        value.message = try reader["message"].readIfPresent()
        value.timestamp = try reader["timestamp"].readIfPresent()
        value.ingestionTime = try reader["ingestionTime"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.LiveTailSessionMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.LiveTailSessionMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.LiveTailSessionMetadata()
        value.sampled = try reader["sampled"].readIfPresent() ?? false
        return value
    }
}

extension CloudWatchLogsClientTypes.LiveTailSessionStart {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.LiveTailSessionStart {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.LiveTailSessionStart()
        value.requestId = try reader["requestId"].readIfPresent()
        value.sessionId = try reader["sessionId"].readIfPresent()
        value.logGroupIdentifiers = try reader["logGroupIdentifiers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.logStreamNames = try reader["logStreamNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.logStreamNamePrefixes = try reader["logStreamNamePrefixes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.logEventFilterPattern = try reader["logEventFilterPattern"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.MetricFilterMatchRecord {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.MetricFilterMatchRecord {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.MetricFilterMatchRecord()
        value.eventNumber = try reader["eventNumber"].readIfPresent() ?? 0
        value.eventMessage = try reader["eventMessage"].readIfPresent()
        value.extractedValues = try reader["extractedValues"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CloudWatchLogsClientTypes.QueryCompileError {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.QueryCompileError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.QueryCompileError()
        value.location = try reader["location"].readIfPresent(with: CloudWatchLogsClientTypes.QueryCompileErrorLocation.read(from:))
        value.message = try reader["message"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.QueryCompileErrorLocation {

    static func read(from reader: SmithyJSON.Reader) throws -> CloudWatchLogsClientTypes.QueryCompileErrorLocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = CloudWatchLogsClientTypes.QueryCompileErrorLocation()
        value.startCharOffset = try reader["startCharOffset"].readIfPresent()
        value.endCharOffset = try reader["endCharOffset"].readIfPresent()
        return value
    }
}

extension CloudWatchLogsClientTypes.InputLogEvent {

    static func write(value: CloudWatchLogsClientTypes.InputLogEvent?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["message"].write(value.message)
        try writer["timestamp"].write(value.timestamp)
    }
}

extension CloudWatchLogsClientTypes.Entity {

    static func write(value: CloudWatchLogsClientTypes.Entity?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["attributes"].writeMap(value.attributes, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["keyAttributes"].writeMap(value.keyAttributes, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CloudWatchLogsClientTypes.SuppressionPeriod {

    static func write(value: CloudWatchLogsClientTypes.SuppressionPeriod?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["suppressionUnit"].write(value.suppressionUnit)
        try writer["value"].write(value.value)
    }
}

public enum CloudWatchLogsClientTypes {}
