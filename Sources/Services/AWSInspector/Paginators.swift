// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[GetExclusionsPreviewOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[GetExclusionsPreviewInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `GetExclusionsPreviewOutputResponse`
extension InspectorClient {
    public func getExclusionsPreviewPaginated(input: GetExclusionsPreviewInput) -> ClientRuntime.PaginatorSequence<GetExclusionsPreviewInput, GetExclusionsPreviewOutputResponse> {
        return ClientRuntime.PaginatorSequence<GetExclusionsPreviewInput, GetExclusionsPreviewOutputResponse>(input: input, inputKey: \GetExclusionsPreviewInput.nextToken, outputKey: \GetExclusionsPreviewOutputResponse.nextToken, paginationFunction: self.getExclusionsPreview(input:))
    }
}

extension GetExclusionsPreviewInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> GetExclusionsPreviewInput {
        return GetExclusionsPreviewInput(
            assessmentTemplateArn: self.assessmentTemplateArn,
            locale: self.locale,
            maxResults: self.maxResults,
            nextToken: token,
            previewToken: self.previewToken
        )}
}

/// Paginate over `[ListAssessmentRunAgentsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListAssessmentRunAgentsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListAssessmentRunAgentsOutputResponse`
extension InspectorClient {
    public func listAssessmentRunAgentsPaginated(input: ListAssessmentRunAgentsInput) -> ClientRuntime.PaginatorSequence<ListAssessmentRunAgentsInput, ListAssessmentRunAgentsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAssessmentRunAgentsInput, ListAssessmentRunAgentsOutputResponse>(input: input, inputKey: \ListAssessmentRunAgentsInput.nextToken, outputKey: \ListAssessmentRunAgentsOutputResponse.nextToken, paginationFunction: self.listAssessmentRunAgents(input:))
    }
}

extension ListAssessmentRunAgentsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAssessmentRunAgentsInput {
        return ListAssessmentRunAgentsInput(
            assessmentRunArn: self.assessmentRunArn,
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListAssessmentRunsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListAssessmentRunsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListAssessmentRunsOutputResponse`
extension InspectorClient {
    public func listAssessmentRunsPaginated(input: ListAssessmentRunsInput) -> ClientRuntime.PaginatorSequence<ListAssessmentRunsInput, ListAssessmentRunsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAssessmentRunsInput, ListAssessmentRunsOutputResponse>(input: input, inputKey: \ListAssessmentRunsInput.nextToken, outputKey: \ListAssessmentRunsOutputResponse.nextToken, paginationFunction: self.listAssessmentRuns(input:))
    }
}

extension ListAssessmentRunsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAssessmentRunsInput {
        return ListAssessmentRunsInput(
            assessmentTemplateArns: self.assessmentTemplateArns,
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListAssessmentTargetsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListAssessmentTargetsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListAssessmentTargetsOutputResponse`
extension InspectorClient {
    public func listAssessmentTargetsPaginated(input: ListAssessmentTargetsInput) -> ClientRuntime.PaginatorSequence<ListAssessmentTargetsInput, ListAssessmentTargetsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAssessmentTargetsInput, ListAssessmentTargetsOutputResponse>(input: input, inputKey: \ListAssessmentTargetsInput.nextToken, outputKey: \ListAssessmentTargetsOutputResponse.nextToken, paginationFunction: self.listAssessmentTargets(input:))
    }
}

extension ListAssessmentTargetsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAssessmentTargetsInput {
        return ListAssessmentTargetsInput(
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListAssessmentTemplatesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListAssessmentTemplatesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListAssessmentTemplatesOutputResponse`
extension InspectorClient {
    public func listAssessmentTemplatesPaginated(input: ListAssessmentTemplatesInput) -> ClientRuntime.PaginatorSequence<ListAssessmentTemplatesInput, ListAssessmentTemplatesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListAssessmentTemplatesInput, ListAssessmentTemplatesOutputResponse>(input: input, inputKey: \ListAssessmentTemplatesInput.nextToken, outputKey: \ListAssessmentTemplatesOutputResponse.nextToken, paginationFunction: self.listAssessmentTemplates(input:))
    }
}

extension ListAssessmentTemplatesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAssessmentTemplatesInput {
        return ListAssessmentTemplatesInput(
            assessmentTargetArns: self.assessmentTargetArns,
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListEventSubscriptionsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListEventSubscriptionsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListEventSubscriptionsOutputResponse`
extension InspectorClient {
    public func listEventSubscriptionsPaginated(input: ListEventSubscriptionsInput) -> ClientRuntime.PaginatorSequence<ListEventSubscriptionsInput, ListEventSubscriptionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListEventSubscriptionsInput, ListEventSubscriptionsOutputResponse>(input: input, inputKey: \ListEventSubscriptionsInput.nextToken, outputKey: \ListEventSubscriptionsOutputResponse.nextToken, paginationFunction: self.listEventSubscriptions(input:))
    }
}

extension ListEventSubscriptionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListEventSubscriptionsInput {
        return ListEventSubscriptionsInput(
            maxResults: self.maxResults,
            nextToken: token,
            resourceArn: self.resourceArn
        )}
}

/// Paginate over `[ListExclusionsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListExclusionsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListExclusionsOutputResponse`
extension InspectorClient {
    public func listExclusionsPaginated(input: ListExclusionsInput) -> ClientRuntime.PaginatorSequence<ListExclusionsInput, ListExclusionsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListExclusionsInput, ListExclusionsOutputResponse>(input: input, inputKey: \ListExclusionsInput.nextToken, outputKey: \ListExclusionsOutputResponse.nextToken, paginationFunction: self.listExclusions(input:))
    }
}

extension ListExclusionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListExclusionsInput {
        return ListExclusionsInput(
            assessmentRunArn: self.assessmentRunArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListFindingsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListFindingsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListFindingsOutputResponse`
extension InspectorClient {
    public func listFindingsPaginated(input: ListFindingsInput) -> ClientRuntime.PaginatorSequence<ListFindingsInput, ListFindingsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListFindingsInput, ListFindingsOutputResponse>(input: input, inputKey: \ListFindingsInput.nextToken, outputKey: \ListFindingsOutputResponse.nextToken, paginationFunction: self.listFindings(input:))
    }
}

extension ListFindingsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListFindingsInput {
        return ListFindingsInput(
            assessmentRunArns: self.assessmentRunArns,
            filter: self.filter,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[ListRulesPackagesOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListRulesPackagesInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListRulesPackagesOutputResponse`
extension InspectorClient {
    public func listRulesPackagesPaginated(input: ListRulesPackagesInput) -> ClientRuntime.PaginatorSequence<ListRulesPackagesInput, ListRulesPackagesOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListRulesPackagesInput, ListRulesPackagesOutputResponse>(input: input, inputKey: \ListRulesPackagesInput.nextToken, outputKey: \ListRulesPackagesOutputResponse.nextToken, paginationFunction: self.listRulesPackages(input:))
    }
}

extension ListRulesPackagesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListRulesPackagesInput {
        return ListRulesPackagesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// Paginate over `[PreviewAgentsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[PreviewAgentsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `PreviewAgentsOutputResponse`
extension InspectorClient {
    public func previewAgentsPaginated(input: PreviewAgentsInput) -> ClientRuntime.PaginatorSequence<PreviewAgentsInput, PreviewAgentsOutputResponse> {
        return ClientRuntime.PaginatorSequence<PreviewAgentsInput, PreviewAgentsOutputResponse>(input: input, inputKey: \PreviewAgentsInput.nextToken, outputKey: \PreviewAgentsOutputResponse.nextToken, paginationFunction: self.previewAgents(input:))
    }
}

extension PreviewAgentsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> PreviewAgentsInput {
        return PreviewAgentsInput(
            maxResults: self.maxResults,
            nextToken: token,
            previewAgentsArn: self.previewAgentsArn
        )}
}
