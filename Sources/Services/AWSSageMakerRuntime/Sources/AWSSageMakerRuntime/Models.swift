//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyEventStreams.DefaultMessageDecoder
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyEventStreamsAPI.MessageType
import enum SmithyReadWrite.ReaderError
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct SmithyEventStreams.DefaultMessageDecoderStream
import struct SmithyEventStreamsAPI.Message
import struct SmithyHTTPAPI.Header
import struct SmithyHTTPAPI.Headers
import typealias SmithyEventStreamsAPI.UnmarshalClosure

/// Your request caused an exception with an internal dependency. Contact customer support.
public struct InternalDependencyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalDependencyException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An internal failure occurred.
public struct InternalFailure: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalFailure" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Model (owned by the customer in the container) returned 4xx or 5xx error code.
public struct ModelError: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// The Amazon Resource Name (ARN) of the log stream.
        public internal(set) var logStreamArn: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
        /// Original message.
        public internal(set) var originalMessage: Swift.String? = nil
        /// Original status code.
        public internal(set) var originalStatusCode: Swift.Int? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ModelError" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        logStreamArn: Swift.String? = nil,
        message: Swift.String? = nil,
        originalMessage: Swift.String? = nil,
        originalStatusCode: Swift.Int? = nil
    )
    {
        self.properties.logStreamArn = logStreamArn
        self.properties.message = message
        self.properties.originalMessage = originalMessage
        self.properties.originalStatusCode = originalStatusCode
    }
}

/// Either a serverless endpoint variant's resources are still being provisioned, or a multi-model endpoint is still downloading or loading the target model. Wait and try your request again.
public struct ModelNotReadyException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ModelNotReadyException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The service is unavailable. Try your call again.
public struct ServiceUnavailable: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailable" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Inspect your request and try again.
public struct ValidationError: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationError" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct InvokeEndpointInput: Swift.Sendable {
    /// The desired MIME type of the inference response from the model container.
    public var accept: Swift.String?
    /// Provides input data, in the format specified in the ContentType request header. Amazon SageMaker passes all of the data in the body to the model. For information about the format of the request body, see [Common Data Formats-Inference](https://docs.aws.amazon.com/sagemaker/latest/dg/cdf-inference.html).
    /// This member is required.
    public var body: Foundation.Data?
    /// The MIME type of the input data in the request body.
    public var contentType: Swift.String?
    /// Provides additional information about a request for an inference submitted to a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to provide an ID that you can use to track a request or to provide other metadata that a service endpoint was programmed to process. The value must consist of no more than 1024 visible US-ASCII characters as specified in [Section 3.3.6. Field Value Components](https://datatracker.ietf.org/doc/html/rfc7230#section-3.2.6) of the Hypertext Transfer Protocol (HTTP/1.1). The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with Trace ID: in your post-processing function. This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK.
    public var customAttributes: Swift.String?
    /// An optional JMESPath expression used to override the EnableExplanations parameter of the ClarifyExplainerConfig API. See the [EnableExplanations](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html#clarify-online-explainability-create-endpoint-enable) section in the developer guide for more information.
    public var enableExplanations: Swift.String?
    /// The name of the endpoint that you specified when you created the endpoint using the [CreateEndpoint](https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpoint.html) API.
    /// This member is required.
    public var endpointName: Swift.String?
    /// If the endpoint hosts one or more inference components, this parameter specifies the name of inference component to invoke.
    public var inferenceComponentName: Swift.String?
    /// If you provide a value, it is added to the captured data when you enable data capture on the endpoint. For information about data capture, see [Capture Data](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-data-capture.html).
    public var inferenceId: Swift.String?
    /// Creates a stateful session or identifies an existing one. You can do one of the following:
    ///
    /// * Create a stateful session by specifying the value NEW_SESSION.
    ///
    /// * Send your request to an existing stateful session by specifying the ID of that session.
    ///
    ///
    /// With a stateful session, you can send multiple requests to a stateful model. When you create a session with a stateful model, the model must create the session ID and set the expiration time. The model must also provide that information in the response to your request. You can get the ID and timestamp from the NewSessionId response parameter. For any subsequent request where you specify that session ID, SageMaker routes the request to the same instance that supports the session.
    public var sessionId: Swift.String?
    /// If the endpoint hosts multiple containers and is configured to use direct invocation, this parameter specifies the host name of the container to invoke.
    public var targetContainerHostname: Swift.String?
    /// The model to request for inference when invoking a multi-model endpoint.
    public var targetModel: Swift.String?
    /// Specify the production variant to send the inference request to when invoking an endpoint that is running two or more variants. Note that this parameter overrides the default behavior for the endpoint, which is to distribute the invocation traffic based on the variant weights. For information about how to use variant targeting to perform a/b testing, see [Test models in production](https://docs.aws.amazon.com/sagemaker/latest/dg/model-ab-testing.html)
    public var targetVariant: Swift.String?

    public init(
        accept: Swift.String? = nil,
        body: Foundation.Data? = nil,
        contentType: Swift.String? = nil,
        customAttributes: Swift.String? = nil,
        enableExplanations: Swift.String? = nil,
        endpointName: Swift.String? = nil,
        inferenceComponentName: Swift.String? = nil,
        inferenceId: Swift.String? = nil,
        sessionId: Swift.String? = nil,
        targetContainerHostname: Swift.String? = nil,
        targetModel: Swift.String? = nil,
        targetVariant: Swift.String? = nil
    )
    {
        self.accept = accept
        self.body = body
        self.contentType = contentType
        self.customAttributes = customAttributes
        self.enableExplanations = enableExplanations
        self.endpointName = endpointName
        self.inferenceComponentName = inferenceComponentName
        self.inferenceId = inferenceId
        self.sessionId = sessionId
        self.targetContainerHostname = targetContainerHostname
        self.targetModel = targetModel
        self.targetVariant = targetVariant
    }
}

extension InvokeEndpointInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvokeEndpointInput(accept: \(Swift.String(describing: accept)), contentType: \(Swift.String(describing: contentType)), enableExplanations: \(Swift.String(describing: enableExplanations)), endpointName: \(Swift.String(describing: endpointName)), inferenceComponentName: \(Swift.String(describing: inferenceComponentName)), inferenceId: \(Swift.String(describing: inferenceId)), sessionId: \(Swift.String(describing: sessionId)), targetContainerHostname: \(Swift.String(describing: targetContainerHostname)), targetModel: \(Swift.String(describing: targetModel)), targetVariant: \(Swift.String(describing: targetVariant)), body: \"CONTENT_REDACTED\", customAttributes: \"CONTENT_REDACTED\")"}
}

public struct InvokeEndpointOutput: Swift.Sendable {
    /// Includes the inference provided by the model. For information about the format of the response body, see [Common Data Formats-Inference](https://docs.aws.amazon.com/sagemaker/latest/dg/cdf-inference.html). If the explainer is activated, the body includes the explanations provided by the model. For more information, see the Response section under [Invoke the Endpoint](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-invoke-endpoint.html#clarify-online-explainability-response) in the Developer Guide.
    /// This member is required.
    public var body: Foundation.Data?
    /// If you closed a stateful session with your request, the ID of that session.
    public var closedSessionId: Swift.String?
    /// The MIME type of the inference returned from the model container.
    public var contentType: Swift.String?
    /// Provides additional information in the response about the inference returned by a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to return an ID received in the CustomAttributes header of a request or other metadata that a service endpoint was programmed to produce. The value must consist of no more than 1024 visible US-ASCII characters as specified in [Section 3.3.6. Field Value Components](https://tools.ietf.org/html/rfc7230#section-3.2.6) of the Hypertext Transfer Protocol (HTTP/1.1). If the customer wants the custom attribute returned, the model must set the custom attribute to be included on the way back. The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with Trace ID: in your post-processing function. This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK.
    public var customAttributes: Swift.String?
    /// Identifies the production variant that was invoked.
    public var invokedProductionVariant: Swift.String?
    /// If you created a stateful session with your request, the ID and expiration time that the model assigns to that session.
    public var newSessionId: Swift.String?

    public init(
        body: Foundation.Data? = nil,
        closedSessionId: Swift.String? = nil,
        contentType: Swift.String? = nil,
        customAttributes: Swift.String? = nil,
        invokedProductionVariant: Swift.String? = nil,
        newSessionId: Swift.String? = nil
    )
    {
        self.body = body
        self.closedSessionId = closedSessionId
        self.contentType = contentType
        self.customAttributes = customAttributes
        self.invokedProductionVariant = invokedProductionVariant
        self.newSessionId = newSessionId
    }
}

extension InvokeEndpointOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvokeEndpointOutput(closedSessionId: \(Swift.String(describing: closedSessionId)), contentType: \(Swift.String(describing: contentType)), invokedProductionVariant: \(Swift.String(describing: invokedProductionVariant)), newSessionId: \(Swift.String(describing: newSessionId)), body: \"CONTENT_REDACTED\", customAttributes: \"CONTENT_REDACTED\")"}
}

public struct InvokeEndpointAsyncInput: Swift.Sendable {
    /// The desired MIME type of the inference response from the model container.
    public var accept: Swift.String?
    /// The MIME type of the input data in the request body.
    public var contentType: Swift.String?
    /// Provides additional information about a request for an inference submitted to a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to provide an ID that you can use to track a request or to provide other metadata that a service endpoint was programmed to process. The value must consist of no more than 1024 visible US-ASCII characters as specified in [Section 3.3.6. Field Value Components](https://datatracker.ietf.org/doc/html/rfc7230#section-3.2.6) of the Hypertext Transfer Protocol (HTTP/1.1). The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with Trace ID: in your post-processing function. This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK.
    public var customAttributes: Swift.String?
    /// The name of the endpoint that you specified when you created the endpoint using the [CreateEndpoint](https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpoint.html) API.
    /// This member is required.
    public var endpointName: Swift.String?
    /// The identifier for the inference request. Amazon SageMaker will generate an identifier for you if none is specified.
    public var inferenceId: Swift.String?
    /// The Amazon S3 URI where the inference request payload is stored.
    /// This member is required.
    public var inputLocation: Swift.String?
    /// Maximum amount of time in seconds a request can be processed before it is marked as expired. The default is 15 minutes, or 900 seconds.
    public var invocationTimeoutSeconds: Swift.Int?
    /// Maximum age in seconds a request can be in the queue before it is marked as expired. The default is 6 hours, or 21,600 seconds.
    public var requestTTLSeconds: Swift.Int?

    public init(
        accept: Swift.String? = nil,
        contentType: Swift.String? = nil,
        customAttributes: Swift.String? = nil,
        endpointName: Swift.String? = nil,
        inferenceId: Swift.String? = nil,
        inputLocation: Swift.String? = nil,
        invocationTimeoutSeconds: Swift.Int? = nil,
        requestTTLSeconds: Swift.Int? = nil
    )
    {
        self.accept = accept
        self.contentType = contentType
        self.customAttributes = customAttributes
        self.endpointName = endpointName
        self.inferenceId = inferenceId
        self.inputLocation = inputLocation
        self.invocationTimeoutSeconds = invocationTimeoutSeconds
        self.requestTTLSeconds = requestTTLSeconds
    }
}

extension InvokeEndpointAsyncInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvokeEndpointAsyncInput(accept: \(Swift.String(describing: accept)), contentType: \(Swift.String(describing: contentType)), endpointName: \(Swift.String(describing: endpointName)), inferenceId: \(Swift.String(describing: inferenceId)), inputLocation: \(Swift.String(describing: inputLocation)), invocationTimeoutSeconds: \(Swift.String(describing: invocationTimeoutSeconds)), requestTTLSeconds: \(Swift.String(describing: requestTTLSeconds)), customAttributes: \"CONTENT_REDACTED\")"}
}

public struct InvokeEndpointAsyncOutput: Swift.Sendable {
    /// The Amazon S3 URI where the inference failure response payload is stored.
    public var failureLocation: Swift.String?
    /// Identifier for an inference request. This will be the same as the InferenceId specified in the input. Amazon SageMaker will generate an identifier for you if you do not specify one.
    public var inferenceId: Swift.String?
    /// The Amazon S3 URI where the inference response payload is stored.
    public var outputLocation: Swift.String?

    public init(
        failureLocation: Swift.String? = nil,
        inferenceId: Swift.String? = nil,
        outputLocation: Swift.String? = nil
    )
    {
        self.failureLocation = failureLocation
        self.inferenceId = inferenceId
        self.outputLocation = outputLocation
    }
}

/// The stream processing failed because of an unknown error, exception or failure. Try your request again.
public struct InternalStreamFailure: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalStreamFailure" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An error occurred while streaming the response body. This error can have the following error codes: ModelInvocationTimeExceeded The model failed to finish sending the response within the timeout period allowed by Amazon SageMaker. StreamBroken The Transmission Control Protocol (TCP) connection between the client and the model was reset or closed.
public struct ModelStreamError: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This error can have the following error codes: ModelInvocationTimeExceeded The model failed to finish sending the response within the timeout period allowed by Amazon SageMaker. StreamBroken The Transmission Control Protocol (TCP) connection between the client and the model was reset or closed.
        public internal(set) var errorCode: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ModelStreamError" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        errorCode: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.errorCode = errorCode
        self.properties.message = message
    }
}

public struct InvokeEndpointWithResponseStreamInput: Swift.Sendable {
    /// The desired MIME type of the inference response from the model container.
    public var accept: Swift.String?
    /// Provides input data, in the format specified in the ContentType request header. Amazon SageMaker passes all of the data in the body to the model. For information about the format of the request body, see [Common Data Formats-Inference](https://docs.aws.amazon.com/sagemaker/latest/dg/cdf-inference.html).
    /// This member is required.
    public var body: Foundation.Data?
    /// The MIME type of the input data in the request body.
    public var contentType: Swift.String?
    /// Provides additional information about a request for an inference submitted to a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to provide an ID that you can use to track a request or to provide other metadata that a service endpoint was programmed to process. The value must consist of no more than 1024 visible US-ASCII characters as specified in [Section 3.3.6. Field Value Components](https://datatracker.ietf.org/doc/html/rfc7230#section-3.2.6) of the Hypertext Transfer Protocol (HTTP/1.1). The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with Trace ID: in your post-processing function. This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK.
    public var customAttributes: Swift.String?
    /// The name of the endpoint that you specified when you created the endpoint using the [CreateEndpoint](https://docs.aws.amazon.com/sagemaker/latest/dg/API_CreateEndpoint.html) API.
    /// This member is required.
    public var endpointName: Swift.String?
    /// If the endpoint hosts one or more inference components, this parameter specifies the name of inference component to invoke for a streaming response.
    public var inferenceComponentName: Swift.String?
    /// An identifier that you assign to your request.
    public var inferenceId: Swift.String?
    /// The ID of a stateful session to handle your request. You can't create a stateful session by using the InvokeEndpointWithResponseStream action. Instead, you can create one by using the [InvokeEndpoint] action. In your request, you specify NEW_SESSION for the SessionId request parameter. The response to that request provides the session ID for the NewSessionId response parameter.
    public var sessionId: Swift.String?
    /// If the endpoint hosts multiple containers and is configured to use direct invocation, this parameter specifies the host name of the container to invoke.
    public var targetContainerHostname: Swift.String?
    /// Specify the production variant to send the inference request to when invoking an endpoint that is running two or more variants. Note that this parameter overrides the default behavior for the endpoint, which is to distribute the invocation traffic based on the variant weights. For information about how to use variant targeting to perform a/b testing, see [Test models in production](https://docs.aws.amazon.com/sagemaker/latest/dg/model-ab-testing.html)
    public var targetVariant: Swift.String?

    public init(
        accept: Swift.String? = nil,
        body: Foundation.Data? = nil,
        contentType: Swift.String? = nil,
        customAttributes: Swift.String? = nil,
        endpointName: Swift.String? = nil,
        inferenceComponentName: Swift.String? = nil,
        inferenceId: Swift.String? = nil,
        sessionId: Swift.String? = nil,
        targetContainerHostname: Swift.String? = nil,
        targetVariant: Swift.String? = nil
    )
    {
        self.accept = accept
        self.body = body
        self.contentType = contentType
        self.customAttributes = customAttributes
        self.endpointName = endpointName
        self.inferenceComponentName = inferenceComponentName
        self.inferenceId = inferenceId
        self.sessionId = sessionId
        self.targetContainerHostname = targetContainerHostname
        self.targetVariant = targetVariant
    }
}

extension InvokeEndpointWithResponseStreamInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvokeEndpointWithResponseStreamInput(accept: \(Swift.String(describing: accept)), contentType: \(Swift.String(describing: contentType)), endpointName: \(Swift.String(describing: endpointName)), inferenceComponentName: \(Swift.String(describing: inferenceComponentName)), inferenceId: \(Swift.String(describing: inferenceId)), sessionId: \(Swift.String(describing: sessionId)), targetContainerHostname: \(Swift.String(describing: targetContainerHostname)), targetVariant: \(Swift.String(describing: targetVariant)), body: \"CONTENT_REDACTED\", customAttributes: \"CONTENT_REDACTED\")"}
}

extension SageMakerRuntimeClientTypes {

    /// A wrapper for pieces of the payload that's returned in response to a streaming inference request. A streaming inference response consists of one or more payload parts.
    public struct PayloadPart: Swift.Sendable {
        /// A blob that contains part of the response for your streaming inference request.
        public var bytes: Foundation.Data?

        public init(
            bytes: Foundation.Data? = nil
        )
        {
            self.bytes = bytes
        }
    }
}

extension SageMakerRuntimeClientTypes.PayloadPart: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PayloadPart(bytes: \"CONTENT_REDACTED\")"}
}

extension SageMakerRuntimeClientTypes {

    /// A stream of payload parts. Each part contains a portion of the response for a streaming inference request.
    public enum ResponseStream: Swift.Sendable {
        /// A wrapper for pieces of the payload that's returned in response to a streaming inference request. A streaming inference response consists of one or more payload parts.
        case payloadpart(SageMakerRuntimeClientTypes.PayloadPart)
        case sdkUnknown(Swift.String)
    }
}

public struct InvokeEndpointWithResponseStreamOutput: Swift.Sendable {
    /// A stream of payload parts. Each part contains a portion of the response for a streaming inference request.
    /// This member is required.
    public var body: AsyncThrowingStream<SageMakerRuntimeClientTypes.ResponseStream, Swift.Error>?
    /// The MIME type of the inference returned from the model container.
    public var contentType: Swift.String?
    /// Provides additional information in the response about the inference returned by a model hosted at an Amazon SageMaker endpoint. The information is an opaque value that is forwarded verbatim. You could use this value, for example, to return an ID received in the CustomAttributes header of a request or other metadata that a service endpoint was programmed to produce. The value must consist of no more than 1024 visible US-ASCII characters as specified in [Section 3.3.6. Field Value Components](https://tools.ietf.org/html/rfc7230#section-3.2.6) of the Hypertext Transfer Protocol (HTTP/1.1). If the customer wants the custom attribute returned, the model must set the custom attribute to be included on the way back. The code in your model is responsible for setting or updating any custom attributes in the response. If your code does not set this value in the response, an empty value is returned. For example, if a custom attribute represents the trace ID, your model can prepend the custom attribute with Trace ID: in your post-processing function. This feature is currently supported in the Amazon Web Services SDKs but not in the Amazon SageMaker Python SDK.
    public var customAttributes: Swift.String?
    /// Identifies the production variant that was invoked.
    public var invokedProductionVariant: Swift.String?

    public init(
        body: AsyncThrowingStream<SageMakerRuntimeClientTypes.ResponseStream, Swift.Error>? = nil,
        contentType: Swift.String? = nil,
        customAttributes: Swift.String? = nil,
        invokedProductionVariant: Swift.String? = nil
    )
    {
        self.body = body
        self.contentType = contentType
        self.customAttributes = customAttributes
        self.invokedProductionVariant = invokedProductionVariant
    }
}

extension InvokeEndpointWithResponseStreamOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvokeEndpointWithResponseStreamOutput(body: \(Swift.String(describing: body)), contentType: \(Swift.String(describing: contentType)), invokedProductionVariant: \(Swift.String(describing: invokedProductionVariant)), customAttributes: \"CONTENT_REDACTED\")"}
}

extension InvokeEndpointInput {

    static func urlPathProvider(_ value: InvokeEndpointInput) -> Swift.String? {
        guard let endpointName = value.endpointName else {
            return nil
        }
        return "/endpoints/\(endpointName.urlPercentEncoding())/invocations"
    }
}

extension InvokeEndpointInput {

    static func headerProvider(_ value: InvokeEndpointInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let accept = value.accept {
            items.add(SmithyHTTPAPI.Header(name: "Accept", value: Swift.String(accept)))
        }
        if let contentType = value.contentType {
            items.add(SmithyHTTPAPI.Header(name: "Content-Type", value: Swift.String(contentType)))
        }
        if let customAttributes = value.customAttributes {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-Custom-Attributes", value: Swift.String(customAttributes)))
        }
        if let enableExplanations = value.enableExplanations {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-Enable-Explanations", value: Swift.String(enableExplanations)))
        }
        if let inferenceComponentName = value.inferenceComponentName {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-Inference-Component", value: Swift.String(inferenceComponentName)))
        }
        if let inferenceId = value.inferenceId {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-Inference-Id", value: Swift.String(inferenceId)))
        }
        if let sessionId = value.sessionId {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-Session-Id", value: Swift.String(sessionId)))
        }
        if let targetContainerHostname = value.targetContainerHostname {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-Target-Container-Hostname", value: Swift.String(targetContainerHostname)))
        }
        if let targetModel = value.targetModel {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-Target-Model", value: Swift.String(targetModel)))
        }
        if let targetVariant = value.targetVariant {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-Target-Variant", value: Swift.String(targetVariant)))
        }
        return items
    }
}

extension InvokeEndpointAsyncInput {

    static func urlPathProvider(_ value: InvokeEndpointAsyncInput) -> Swift.String? {
        guard let endpointName = value.endpointName else {
            return nil
        }
        return "/endpoints/\(endpointName.urlPercentEncoding())/async-invocations"
    }
}

extension InvokeEndpointAsyncInput {

    static func headerProvider(_ value: InvokeEndpointAsyncInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let accept = value.accept {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-Accept", value: Swift.String(accept)))
        }
        if let contentType = value.contentType {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-Content-Type", value: Swift.String(contentType)))
        }
        if let customAttributes = value.customAttributes {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-Custom-Attributes", value: Swift.String(customAttributes)))
        }
        if let inferenceId = value.inferenceId {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-Inference-Id", value: Swift.String(inferenceId)))
        }
        if let inputLocation = value.inputLocation {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-InputLocation", value: Swift.String(inputLocation)))
        }
        if let invocationTimeoutSeconds = value.invocationTimeoutSeconds {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-InvocationTimeoutSeconds", value: Swift.String(invocationTimeoutSeconds)))
        }
        if let requestTTLSeconds = value.requestTTLSeconds {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-RequestTTLSeconds", value: Swift.String(requestTTLSeconds)))
        }
        return items
    }
}

extension InvokeEndpointWithResponseStreamInput {

    static func urlPathProvider(_ value: InvokeEndpointWithResponseStreamInput) -> Swift.String? {
        guard let endpointName = value.endpointName else {
            return nil
        }
        return "/endpoints/\(endpointName.urlPercentEncoding())/invocations-response-stream"
    }
}

extension InvokeEndpointWithResponseStreamInput {

    static func headerProvider(_ value: InvokeEndpointWithResponseStreamInput) -> SmithyHTTPAPI.Headers {
        var items = SmithyHTTPAPI.Headers()
        if let accept = value.accept {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-Accept", value: Swift.String(accept)))
        }
        if let contentType = value.contentType {
            items.add(SmithyHTTPAPI.Header(name: "Content-Type", value: Swift.String(contentType)))
        }
        if let customAttributes = value.customAttributes {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-Custom-Attributes", value: Swift.String(customAttributes)))
        }
        if let inferenceComponentName = value.inferenceComponentName {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-Inference-Component", value: Swift.String(inferenceComponentName)))
        }
        if let inferenceId = value.inferenceId {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-Inference-Id", value: Swift.String(inferenceId)))
        }
        if let sessionId = value.sessionId {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-Session-Id", value: Swift.String(sessionId)))
        }
        if let targetContainerHostname = value.targetContainerHostname {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-Target-Container-Hostname", value: Swift.String(targetContainerHostname)))
        }
        if let targetVariant = value.targetVariant {
            items.add(SmithyHTTPAPI.Header(name: "X-Amzn-SageMaker-Target-Variant", value: Swift.String(targetVariant)))
        }
        return items
    }
}

extension InvokeEndpointInput {

    static func write(value: InvokeEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Body"].write(value.body)
    }
}

extension InvokeEndpointWithResponseStreamInput {

    static func write(value: InvokeEndpointWithResponseStreamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Body"].write(value.body)
    }
}

extension InvokeEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> InvokeEndpointOutput {
        var value = InvokeEndpointOutput()
        if let closedSessionIdHeaderValue = httpResponse.headers.value(for: "X-Amzn-SageMaker-Closed-Session-Id") {
            value.closedSessionId = closedSessionIdHeaderValue
        }
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "Content-Type") {
            value.contentType = contentTypeHeaderValue
        }
        if let customAttributesHeaderValue = httpResponse.headers.value(for: "X-Amzn-SageMaker-Custom-Attributes") {
            value.customAttributes = customAttributesHeaderValue
        }
        if let invokedProductionVariantHeaderValue = httpResponse.headers.value(for: "x-Amzn-Invoked-Production-Variant") {
            value.invokedProductionVariant = invokedProductionVariantHeaderValue
        }
        if let newSessionIdHeaderValue = httpResponse.headers.value(for: "X-Amzn-SageMaker-New-Session-Id") {
            value.newSessionId = newSessionIdHeaderValue
        }
        switch httpResponse.body {
        case .data(let data):
            value.body = data
        case .stream(let stream):
            value.body = try stream.readToEnd()
        case .noStream:
            value.body = nil
        }
        return value
    }
}

extension InvokeEndpointAsyncOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> InvokeEndpointAsyncOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = InvokeEndpointAsyncOutput()
        if let failureLocationHeaderValue = httpResponse.headers.value(for: "X-Amzn-SageMaker-FailureLocation") {
            value.failureLocation = failureLocationHeaderValue
        }
        if let outputLocationHeaderValue = httpResponse.headers.value(for: "X-Amzn-SageMaker-OutputLocation") {
            value.outputLocation = outputLocationHeaderValue
        }
        value.inferenceId = try reader["InferenceId"].readIfPresent()
        return value
    }
}

extension InvokeEndpointWithResponseStreamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> InvokeEndpointWithResponseStreamOutput {
        var value = InvokeEndpointWithResponseStreamOutput()
        if let contentTypeHeaderValue = httpResponse.headers.value(for: "X-Amzn-SageMaker-Content-Type") {
            value.contentType = contentTypeHeaderValue
        }
        if let customAttributesHeaderValue = httpResponse.headers.value(for: "X-Amzn-SageMaker-Custom-Attributes") {
            value.customAttributes = customAttributesHeaderValue
        }
        if let invokedProductionVariantHeaderValue = httpResponse.headers.value(for: "x-Amzn-Invoked-Production-Variant") {
            value.invokedProductionVariant = invokedProductionVariantHeaderValue
        }
        if case .stream(let stream) = httpResponse.body {
            let messageDecoder = SmithyEventStreams.DefaultMessageDecoder()
            let decoderStream = SmithyEventStreams.DefaultMessageDecoderStream(stream: stream, messageDecoder: messageDecoder, unmarshalClosure: SageMakerRuntimeClientTypes.ResponseStream.unmarshal)
            value.body = decoderStream.toAsyncStream()
        }
        return value
    }
}

enum InvokeEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalDependencyException": return try InternalDependencyException.makeError(baseError: baseError)
            case "InternalFailure": return try InternalFailure.makeError(baseError: baseError)
            case "ModelError": return try ModelError.makeError(baseError: baseError)
            case "ModelNotReadyException": return try ModelNotReadyException.makeError(baseError: baseError)
            case "ServiceUnavailable": return try ServiceUnavailable.makeError(baseError: baseError)
            case "ValidationError": return try ValidationError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum InvokeEndpointAsyncOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalFailure.makeError(baseError: baseError)
            case "ServiceUnavailable": return try ServiceUnavailable.makeError(baseError: baseError)
            case "ValidationError": return try ValidationError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum InvokeEndpointWithResponseStreamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalFailure": return try InternalFailure.makeError(baseError: baseError)
            case "InternalStreamFailure": return try InternalStreamFailure.makeError(baseError: baseError)
            case "ModelError": return try ModelError.makeError(baseError: baseError)
            case "ModelStreamError": return try ModelStreamError.makeError(baseError: baseError)
            case "ServiceUnavailable": return try ServiceUnavailable.makeError(baseError: baseError)
            case "ValidationError": return try ValidationError.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalDependencyException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalDependencyException {
        let reader = baseError.errorBodyReader
        var value = InternalDependencyException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ModelNotReadyException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ModelNotReadyException {
        let reader = baseError.errorBodyReader
        var value = ModelNotReadyException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalFailure {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalFailure {
        let reader = baseError.errorBodyReader
        var value = InternalFailure()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationError {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationError {
        let reader = baseError.errorBodyReader
        var value = ValidationError()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ModelError {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ModelError {
        let reader = baseError.errorBodyReader
        var value = ModelError()
        value.properties.logStreamArn = try reader["LogStreamArn"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.originalMessage = try reader["OriginalMessage"].readIfPresent()
        value.properties.originalStatusCode = try reader["OriginalStatusCode"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceUnavailable {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceUnavailable {
        let reader = baseError.errorBodyReader
        var value = ServiceUnavailable()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ModelStreamError {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ModelStreamError {
        let reader = baseError.errorBodyReader
        var value = ModelStreamError()
        value.properties.errorCode = try reader["ErrorCode"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalStreamFailure {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalStreamFailure {
        let reader = baseError.errorBodyReader
        var value = InternalStreamFailure()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SageMakerRuntimeClientTypes.ResponseStream {
    static var unmarshal: SmithyEventStreamsAPI.UnmarshalClosure<SageMakerRuntimeClientTypes.ResponseStream> {
        { message in
            switch try message.type() {
            case .event(let params):
                switch params.eventType {
                case "PayloadPart":
                    var event = SageMakerRuntimeClientTypes.PayloadPart()
                    event.bytes = message.payload
                    return .payloadpart(event)
                default:
                    return .sdkUnknown("error processing event stream, unrecognized event: \(params.eventType)")
                }
            case .exception(let params):
                let makeError: (SmithyEventStreamsAPI.Message, SmithyEventStreamsAPI.MessageType.ExceptionParams) throws -> Swift.Error = { message, params in
                    switch params.exceptionType {
                    case "ModelStreamError":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: ModelStreamError.read(from:))
                        return value
                    case "InternalStreamFailure":
                        let value = try SmithyJSON.Reader.readFrom(message.payload, with: InternalStreamFailure.read(from:))
                        return value
                    default:
                        let httpResponse = SmithyHTTPAPI.HTTPResponse(body: .data(message.payload), statusCode: .ok)
                        return AWSClientRuntime.UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "error processing event stream, unrecognized ':exceptionType': \(params.exceptionType); contentType: \(params.contentType ?? "nil")", requestID: nil, typeName: nil)
                    }
                }
                let error = try makeError(message, params)
                throw error
            case .error(let params):
                let httpResponse = SmithyHTTPAPI.HTTPResponse(body: .data(message.payload), statusCode: .ok)
                throw AWSClientRuntime.UnknownAWSHTTPServiceError(httpResponse: httpResponse, message: "error processing event stream, unrecognized ':errorType': \(params.errorCode); message: \(params.message ?? "nil")", requestID: nil, typeName: nil)
            case .unknown(messageType: let messageType):
                throw Smithy.ClientError.unknownError("unrecognized event stream message ':message-type': \(messageType)")
            }
        }
    }
}

extension InternalStreamFailure {

    static func read(from reader: SmithyJSON.Reader) throws -> InternalStreamFailure {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = InternalStreamFailure()
        value.properties.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension ModelStreamError {

    static func read(from reader: SmithyJSON.Reader) throws -> ModelStreamError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ModelStreamError()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.errorCode = try reader["ErrorCode"].readIfPresent()
        return value
    }
}

extension SageMakerRuntimeClientTypes.PayloadPart {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerRuntimeClientTypes.PayloadPart {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerRuntimeClientTypes.PayloadPart()
        value.bytes = try reader["Bytes"].readIfPresent()
        return value
    }
}

public enum SageMakerRuntimeClientTypes {}
