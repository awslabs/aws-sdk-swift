//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox


public struct GetTelemetryEvaluationStatusForOrganizationInput: Swift.Sendable {

    public init() { }
}

public struct GetTelemetryEvaluationStatusInput: Swift.Sendable {

    public init() { }
}

public struct StartTelemetryEvaluationForOrganizationInput: Swift.Sendable {

    public init() { }
}

public struct StartTelemetryEvaluationForOrganizationOutput: Swift.Sendable {

    public init() { }
}

public struct StartTelemetryEvaluationInput: Swift.Sendable {

    public init() { }
}

public struct StartTelemetryEvaluationOutput: Swift.Sendable {

    public init() { }
}

public struct StopTelemetryEvaluationForOrganizationInput: Swift.Sendable {

    public init() { }
}

public struct StopTelemetryEvaluationForOrganizationOutput: Swift.Sendable {

    public init() { }
}

public struct StopTelemetryEvaluationInput: Swift.Sendable {

    public init() { }
}

public struct StopTelemetryEvaluationOutput: Swift.Sendable {

    public init() { }
}

/// Indicates you don't have permissions to perform the requested operation. The user or role that is making the request must have at least one IAM permissions policy attached that grants the required permissions. For more information, see [Access management for AWS resources](https://docs.aws.amazon.com/IAM/latest/UserGuide/access.html) in the IAM user guide.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        /// The name of the exception.
        public internal(set) var amznErrorType: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        amznErrorType: Swift.String? = nil,
        message: Swift.String? = nil
    ) {
        self.properties.amznErrorType = amznErrorType
        self.properties.message = message
    }
}

/// Indicates the request has failed to process because of an unknown server error, exception, or failure.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        /// The name of the exception.
        public internal(set) var amznErrorType: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        amznErrorType: Swift.String? = nil,
        message: Swift.String? = nil
    ) {
        self.properties.amznErrorType = amznErrorType
        self.properties.message = message
    }
}

extension ObservabilityAdminClientTypes {

    public enum Status: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failedStart
        case failedStop
        case notStarted
        case running
        case starting
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [Status] {
            return [
                .failedStart,
                .failedStop,
                .notStarted,
                .running,
                .starting,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failedStart: return "FAILED_START"
            case .failedStop: return "FAILED_STOP"
            case .notStarted: return "NOT_STARTED"
            case .running: return "RUNNING"
            case .starting: return "STARTING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetTelemetryEvaluationStatusOutput: Swift.Sendable {
    /// Describes the reason for the failure status. The field will only be populated if Status is FAILED_START or FAILED_STOP.
    public var failureReason: Swift.String?
    /// The onboarding status of the telemetry config feature.
    public var status: ObservabilityAdminClientTypes.Status?

    public init(
        failureReason: Swift.String? = nil,
        status: ObservabilityAdminClientTypes.Status? = nil
    ) {
        self.failureReason = failureReason
        self.status = status
    }
}

/// Indicates input validation failed. Check your request parameters and retry the request.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error, Swift.Sendable {

    public struct Properties: Swift.Sendable {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    ) {
        self.properties.message = message
    }
}

public struct GetTelemetryEvaluationStatusForOrganizationOutput: Swift.Sendable {
    /// This field describes the reason for the failure status. The field will only be populated if Status is FAILED_START or FAILED_STOP.
    public var failureReason: Swift.String?
    /// The onboarding status of the telemetry config feature for the organization.
    public var status: ObservabilityAdminClientTypes.Status?

    public init(
        failureReason: Swift.String? = nil,
        status: ObservabilityAdminClientTypes.Status? = nil
    ) {
        self.failureReason = failureReason
        self.status = status
    }
}

extension ObservabilityAdminClientTypes {

    public enum ResourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case awsEc2Instance
        case awsEc2Vpc
        case awsLamdbaFunction
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .awsEc2Instance,
                .awsEc2Vpc,
                .awsLamdbaFunction
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .awsEc2Instance: return "AWS::EC2::Instance"
            case .awsEc2Vpc: return "AWS::EC2::VPC"
            case .awsLamdbaFunction: return "AWS::Lambda::Function"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ObservabilityAdminClientTypes {

    public enum TelemetryType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case logs
        case metrics
        case traces
        case sdkUnknown(Swift.String)

        public static var allCases: [TelemetryType] {
            return [
                .logs,
                .metrics,
                .traces
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .logs: return "Logs"
            case .metrics: return "Metrics"
            case .traces: return "Traces"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ObservabilityAdminClientTypes {

    public enum TelemetryState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case notApplicable
        case sdkUnknown(Swift.String)

        public static var allCases: [TelemetryState] {
            return [
                .disabled,
                .enabled,
                .notApplicable
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case .notApplicable: return "NotApplicable"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListResourceTelemetryInput: Swift.Sendable {
    /// A number field used to limit the number of results within the returned list.
    public var maxResults: Swift.Int?
    /// The token for the next set of items to return. A previous call generates this token.
    public var nextToken: Swift.String?
    /// A string used to filter resources which have a ResourceIdentifier starting with the ResourceIdentifierPrefix.
    public var resourceIdentifierPrefix: Swift.String?
    /// A key-value pair to filter resources based on tags associated with the resource. For more information about tags, see [What are tags?](https://docs.aws.amazon.com/whitepapers/latest/tagging-best-practices/what-are-tags.html)
    public var resourceTags: [Swift.String: Swift.String]?
    /// A list of resource types used to filter resources supported by telemetry config. If this parameter is provided, the resources will be returned in the same order used in the request.
    public var resourceTypes: [ObservabilityAdminClientTypes.ResourceType]?
    /// A key-value pair to filter resources based on the telemetry type and the state of the telemetry configuration. The key is the telemetry type and the value is the state.
    public var telemetryConfigurationState: [Swift.String: ObservabilityAdminClientTypes.TelemetryState]?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceIdentifierPrefix: Swift.String? = nil,
        resourceTags: [Swift.String: Swift.String]? = nil,
        resourceTypes: [ObservabilityAdminClientTypes.ResourceType]? = nil,
        telemetryConfigurationState: [Swift.String: ObservabilityAdminClientTypes.TelemetryState]? = nil
    ) {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceIdentifierPrefix = resourceIdentifierPrefix
        self.resourceTags = resourceTags
        self.resourceTypes = resourceTypes
        self.telemetryConfigurationState = telemetryConfigurationState
    }
}

extension ObservabilityAdminClientTypes {

    /// A model representing the state of a resource within an account according to telemetry config.
    public struct TelemetryConfiguration: Swift.Sendable {
        /// The account ID which contains the resource managed in telemetry configuration. An example of a valid account ID is 012345678901.
        public var accountIdentifier: Swift.String?
        /// The timestamp of the last change to the telemetry configuration for the resource. For example, 1728679196318.
        public var lastUpdateTimeStamp: Swift.Int?
        /// The identifier of the resource, for example i-0b22a22eec53b9321.
        public var resourceIdentifier: Swift.String?
        /// Tags associated with the resource, for example { Name: "ExampleInstance", Environment: "Development" }.
        public var resourceTags: [Swift.String: Swift.String]?
        /// The type of resource, for example AWS::EC2::Instance.
        public var resourceType: ObservabilityAdminClientTypes.ResourceType?
        /// The configuration state for the resource, for example { Logs: NotApplicable; Metrics: Enabled; Traces: NotApplicable; }.
        public var telemetryConfigurationState: [Swift.String: ObservabilityAdminClientTypes.TelemetryState]?

        public init(
            accountIdentifier: Swift.String? = nil,
            lastUpdateTimeStamp: Swift.Int? = nil,
            resourceIdentifier: Swift.String? = nil,
            resourceTags: [Swift.String: Swift.String]? = nil,
            resourceType: ObservabilityAdminClientTypes.ResourceType? = nil,
            telemetryConfigurationState: [Swift.String: ObservabilityAdminClientTypes.TelemetryState]? = nil
        ) {
            self.accountIdentifier = accountIdentifier
            self.lastUpdateTimeStamp = lastUpdateTimeStamp
            self.resourceIdentifier = resourceIdentifier
            self.resourceTags = resourceTags
            self.resourceType = resourceType
            self.telemetryConfigurationState = telemetryConfigurationState
        }
    }
}

public struct ListResourceTelemetryOutput: Swift.Sendable {
    /// The token for the next set of items to return. A previous call generates this token.
    public var nextToken: Swift.String?
    /// A list of telemetry configurations for AWS resources supported by telemetry config in the caller's account.
    public var telemetryConfigurations: [ObservabilityAdminClientTypes.TelemetryConfiguration]?

    public init(
        nextToken: Swift.String? = nil,
        telemetryConfigurations: [ObservabilityAdminClientTypes.TelemetryConfiguration]? = nil
    ) {
        self.nextToken = nextToken
        self.telemetryConfigurations = telemetryConfigurations
    }
}

public struct ListResourceTelemetryForOrganizationInput: Swift.Sendable {
    /// A list of AWS account IDs used to filter the resources to those associated with the specified accounts.
    public var accountIdentifiers: [Swift.String]?
    /// A number field used to limit the number of results within the returned list.
    public var maxResults: Swift.Int?
    /// The token for the next set of items to return. A previous call provides this token.
    public var nextToken: Swift.String?
    /// A string used to filter resources in the organization which have a ResourceIdentifier starting with the ResourceIdentifierPrefix.
    public var resourceIdentifierPrefix: Swift.String?
    /// A key-value pair to filter resources in the organization based on tags associated with the resource. Fore more information about tags, see [What are tags?](https://docs.aws.amazon.com/whitepapers/latest/tagging-best-practices/what-are-tags.html)
    public var resourceTags: [Swift.String: Swift.String]?
    /// A list of resource types used to filter resources in the organization. If this parameter is provided, the resources will be returned in the same order used in the request.
    public var resourceTypes: [ObservabilityAdminClientTypes.ResourceType]?
    /// A key-value pair to filter resources in the organization based on the telemetry type and the state of the telemetry configuration. The key is the telemetry type and the value is the state.
    public var telemetryConfigurationState: [Swift.String: ObservabilityAdminClientTypes.TelemetryState]?

    public init(
        accountIdentifiers: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceIdentifierPrefix: Swift.String? = nil,
        resourceTags: [Swift.String: Swift.String]? = nil,
        resourceTypes: [ObservabilityAdminClientTypes.ResourceType]? = nil,
        telemetryConfigurationState: [Swift.String: ObservabilityAdminClientTypes.TelemetryState]? = nil
    ) {
        self.accountIdentifiers = accountIdentifiers
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceIdentifierPrefix = resourceIdentifierPrefix
        self.resourceTags = resourceTags
        self.resourceTypes = resourceTypes
        self.telemetryConfigurationState = telemetryConfigurationState
    }
}

public struct ListResourceTelemetryForOrganizationOutput: Swift.Sendable {
    /// The token for the next set of items to return. A previous call provides this token.
    public var nextToken: Swift.String?
    /// A list of telemetry configurations for AWS resources supported by telemetry config in the organization.
    public var telemetryConfigurations: [ObservabilityAdminClientTypes.TelemetryConfiguration]?

    public init(
        nextToken: Swift.String? = nil,
        telemetryConfigurations: [ObservabilityAdminClientTypes.TelemetryConfiguration]? = nil
    ) {
        self.nextToken = nextToken
        self.telemetryConfigurations = telemetryConfigurations
    }
}

extension GetTelemetryEvaluationStatusInput {

    static func urlPathProvider(_ value: GetTelemetryEvaluationStatusInput) -> Swift.String? {
        return "/GetTelemetryEvaluationStatus"
    }
}

extension GetTelemetryEvaluationStatusForOrganizationInput {

    static func urlPathProvider(_ value: GetTelemetryEvaluationStatusForOrganizationInput) -> Swift.String? {
        return "/GetTelemetryEvaluationStatusForOrganization"
    }
}

extension ListResourceTelemetryInput {

    static func urlPathProvider(_ value: ListResourceTelemetryInput) -> Swift.String? {
        return "/ListResourceTelemetry"
    }
}

extension ListResourceTelemetryForOrganizationInput {

    static func urlPathProvider(_ value: ListResourceTelemetryForOrganizationInput) -> Swift.String? {
        return "/ListResourceTelemetryForOrganization"
    }
}

extension StartTelemetryEvaluationInput {

    static func urlPathProvider(_ value: StartTelemetryEvaluationInput) -> Swift.String? {
        return "/StartTelemetryEvaluation"
    }
}

extension StartTelemetryEvaluationForOrganizationInput {

    static func urlPathProvider(_ value: StartTelemetryEvaluationForOrganizationInput) -> Swift.String? {
        return "/StartTelemetryEvaluationForOrganization"
    }
}

extension StopTelemetryEvaluationInput {

    static func urlPathProvider(_ value: StopTelemetryEvaluationInput) -> Swift.String? {
        return "/StopTelemetryEvaluation"
    }
}

extension StopTelemetryEvaluationForOrganizationInput {

    static func urlPathProvider(_ value: StopTelemetryEvaluationForOrganizationInput) -> Swift.String? {
        return "/StopTelemetryEvaluationForOrganization"
    }
}

extension ListResourceTelemetryInput {

    static func write(value: ListResourceTelemetryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ResourceIdentifierPrefix"].write(value.resourceIdentifierPrefix)
        try writer["ResourceTags"].writeMap(value.resourceTags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ResourceTypes"].writeList(value.resourceTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ObservabilityAdminClientTypes.ResourceType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TelemetryConfigurationState"].writeMap(value.telemetryConfigurationState, valueWritingClosure: SmithyReadWrite.WritingClosureBox<ObservabilityAdminClientTypes.TelemetryState>().write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension ListResourceTelemetryForOrganizationInput {

    static func write(value: ListResourceTelemetryForOrganizationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccountIdentifiers"].writeList(value.accountIdentifiers, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ResourceIdentifierPrefix"].write(value.resourceIdentifierPrefix)
        try writer["ResourceTags"].writeMap(value.resourceTags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ResourceTypes"].writeList(value.resourceTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ObservabilityAdminClientTypes.ResourceType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TelemetryConfigurationState"].writeMap(value.telemetryConfigurationState, valueWritingClosure: SmithyReadWrite.WritingClosureBox<ObservabilityAdminClientTypes.TelemetryState>().write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension GetTelemetryEvaluationStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTelemetryEvaluationStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTelemetryEvaluationStatusOutput()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension GetTelemetryEvaluationStatusForOrganizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTelemetryEvaluationStatusForOrganizationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTelemetryEvaluationStatusForOrganizationOutput()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension ListResourceTelemetryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListResourceTelemetryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListResourceTelemetryOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.telemetryConfigurations = try reader["TelemetryConfigurations"].readListIfPresent(memberReadingClosure: ObservabilityAdminClientTypes.TelemetryConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListResourceTelemetryForOrganizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListResourceTelemetryForOrganizationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListResourceTelemetryForOrganizationOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.telemetryConfigurations = try reader["TelemetryConfigurations"].readListIfPresent(memberReadingClosure: ObservabilityAdminClientTypes.TelemetryConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension StartTelemetryEvaluationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartTelemetryEvaluationOutput {
        return StartTelemetryEvaluationOutput()
    }
}

extension StartTelemetryEvaluationForOrganizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartTelemetryEvaluationForOrganizationOutput {
        return StartTelemetryEvaluationForOrganizationOutput()
    }
}

extension StopTelemetryEvaluationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopTelemetryEvaluationOutput {
        return StopTelemetryEvaluationOutput()
    }
}

extension StopTelemetryEvaluationForOrganizationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopTelemetryEvaluationForOrganizationOutput {
        return StopTelemetryEvaluationForOrganizationOutput()
    }
}

enum GetTelemetryEvaluationStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTelemetryEvaluationStatusForOrganizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListResourceTelemetryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListResourceTelemetryForOrganizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartTelemetryEvaluationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartTelemetryEvaluationForOrganizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopTelemetryEvaluationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopTelemetryEvaluationForOrganizationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        let httpResponse = baseError.httpResponse
        var value = InternalServerException()
        if let amznErrorTypeHeaderValue = httpResponse.headers.value(for: "x-amzn-ErrorType") {
            value.properties.amznErrorType = amznErrorTypeHeaderValue
        }
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        let httpResponse = baseError.httpResponse
        var value = AccessDeniedException()
        if let amznErrorTypeHeaderValue = httpResponse.headers.value(for: "x-amzn-ErrorType") {
            value.properties.amznErrorType = amznErrorTypeHeaderValue
        }
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ObservabilityAdminClientTypes.TelemetryConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> ObservabilityAdminClientTypes.TelemetryConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ObservabilityAdminClientTypes.TelemetryConfiguration()
        value.accountIdentifier = try reader["AccountIdentifier"].readIfPresent()
        value.telemetryConfigurationState = try reader["TelemetryConfigurationState"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosureBox<ObservabilityAdminClientTypes.TelemetryState>().read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.resourceType = try reader["ResourceType"].readIfPresent()
        value.resourceIdentifier = try reader["ResourceIdentifier"].readIfPresent()
        value.resourceTags = try reader["ResourceTags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.lastUpdateTimeStamp = try reader["LastUpdateTimeStamp"].readIfPresent()
        return value
    }
}

public enum ObservabilityAdminClientTypes {}
