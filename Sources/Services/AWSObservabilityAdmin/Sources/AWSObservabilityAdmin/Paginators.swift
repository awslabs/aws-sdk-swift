//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import protocol ClientRuntime.PaginateToken
import struct ClientRuntime.PaginatorSequence

extension ObservabilityAdminClient {
    /// Paginate over `[ListResourceTelemetryOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListResourceTelemetryInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListResourceTelemetryOutput`
    public func listResourceTelemetryPaginated(input: ListResourceTelemetryInput) -> ClientRuntime.PaginatorSequence<ListResourceTelemetryInput, ListResourceTelemetryOutput> {
        return ClientRuntime.PaginatorSequence<ListResourceTelemetryInput, ListResourceTelemetryOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listResourceTelemetry(input:))
    }
}

extension ListResourceTelemetryInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListResourceTelemetryInput {
        return ListResourceTelemetryInput(
            maxResults: self.maxResults,
            nextToken: token,
            resourceIdentifierPrefix: self.resourceIdentifierPrefix,
            resourceTags: self.resourceTags,
            resourceTypes: self.resourceTypes,
            telemetryConfigurationState: self.telemetryConfigurationState
        )}
}

extension PaginatorSequence where OperationStackInput == ListResourceTelemetryInput, OperationStackOutput == ListResourceTelemetryOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listResourceTelemetryPaginated`
    /// to access the nested member `[ObservabilityAdminClientTypes.TelemetryConfiguration]`
    /// - Returns: `[ObservabilityAdminClientTypes.TelemetryConfiguration]`
    public func telemetryConfigurations() async throws -> [ObservabilityAdminClientTypes.TelemetryConfiguration] {
        return try await self.asyncCompactMap { item in item.telemetryConfigurations }
    }
}
extension ObservabilityAdminClient {
    /// Paginate over `[ListResourceTelemetryForOrganizationOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListResourceTelemetryForOrganizationInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListResourceTelemetryForOrganizationOutput`
    public func listResourceTelemetryForOrganizationPaginated(input: ListResourceTelemetryForOrganizationInput) -> ClientRuntime.PaginatorSequence<ListResourceTelemetryForOrganizationInput, ListResourceTelemetryForOrganizationOutput> {
        return ClientRuntime.PaginatorSequence<ListResourceTelemetryForOrganizationInput, ListResourceTelemetryForOrganizationOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listResourceTelemetryForOrganization(input:))
    }
}

extension ListResourceTelemetryForOrganizationInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListResourceTelemetryForOrganizationInput {
        return ListResourceTelemetryForOrganizationInput(
            accountIdentifiers: self.accountIdentifiers,
            maxResults: self.maxResults,
            nextToken: token,
            resourceIdentifierPrefix: self.resourceIdentifierPrefix,
            resourceTags: self.resourceTags,
            resourceTypes: self.resourceTypes,
            telemetryConfigurationState: self.telemetryConfigurationState
        )}
}

extension PaginatorSequence where OperationStackInput == ListResourceTelemetryForOrganizationInput, OperationStackOutput == ListResourceTelemetryForOrganizationOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listResourceTelemetryForOrganizationPaginated`
    /// to access the nested member `[ObservabilityAdminClientTypes.TelemetryConfiguration]`
    /// - Returns: `[ObservabilityAdminClientTypes.TelemetryConfiguration]`
    public func telemetryConfigurations() async throws -> [ObservabilityAdminClientTypes.TelemetryConfiguration] {
        return try await self.asyncCompactMap { item in item.telemetryConfigurations }
    }
}
