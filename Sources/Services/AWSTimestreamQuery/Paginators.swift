// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension TimestreamQueryClient {
    /// Paginate over `[ListScheduledQueriesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListScheduledQueriesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListScheduledQueriesOutput`
    public func listScheduledQueriesPaginated(input: ListScheduledQueriesInput) -> ClientRuntime.PaginatorSequence<ListScheduledQueriesInput, ListScheduledQueriesOutput> {
        return ClientRuntime.PaginatorSequence<ListScheduledQueriesInput, ListScheduledQueriesOutput>(input: input, inputKey: \ListScheduledQueriesInput.nextToken, outputKey: \ListScheduledQueriesOutput.nextToken, paginationFunction: self.listScheduledQueries(input:))
    }
}

extension ListScheduledQueriesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListScheduledQueriesInput {
        return ListScheduledQueriesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where Input == ListScheduledQueriesInput, Output == ListScheduledQueriesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listScheduledQueriesPaginated`
    /// to access the nested member `[TimestreamQueryClientTypes.ScheduledQuery]`
    /// - Returns: `[TimestreamQueryClientTypes.ScheduledQuery]`
    public func scheduledQueries() async throws -> [TimestreamQueryClientTypes.ScheduledQuery] {
        return try await self.asyncCompactMap { item in item.scheduledQueries }
    }
}
extension TimestreamQueryClient {
    /// Paginate over `[ListTagsForResourceOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTagsForResourceInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTagsForResourceOutput`
    public func listTagsForResourcePaginated(input: ListTagsForResourceInput) -> ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutput> {
        return ClientRuntime.PaginatorSequence<ListTagsForResourceInput, ListTagsForResourceOutput>(input: input, inputKey: \ListTagsForResourceInput.nextToken, outputKey: \ListTagsForResourceOutput.nextToken, paginationFunction: self.listTagsForResource(input:))
    }
}

extension ListTagsForResourceInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTagsForResourceInput {
        return ListTagsForResourceInput(
            maxResults: self.maxResults,
            nextToken: token,
            resourceARN: self.resourceARN
        )}
}

extension PaginatorSequence where Input == ListTagsForResourceInput, Output == ListTagsForResourceOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listTagsForResourcePaginated`
    /// to access the nested member `[TimestreamQueryClientTypes.Tag]`
    /// - Returns: `[TimestreamQueryClientTypes.Tag]`
    public func tags() async throws -> [TimestreamQueryClientTypes.Tag] {
        return try await self.asyncCompactMap { item in item.tags }
    }
}
extension TimestreamQueryClient {
    /// Paginate over `[QueryOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[QueryInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `QueryOutput`
    public func queryPaginated(input: QueryInput) -> ClientRuntime.PaginatorSequence<QueryInput, QueryOutput> {
        return ClientRuntime.PaginatorSequence<QueryInput, QueryOutput>(input: input, inputKey: \QueryInput.nextToken, outputKey: \QueryOutput.nextToken, paginationFunction: self.query(input:))
    }
}

extension QueryInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> QueryInput {
        return QueryInput(
            clientToken: self.clientToken,
            maxRows: self.maxRows,
            nextToken: token,
            queryString: self.queryString
        )}
}

extension PaginatorSequence where Input == QueryInput, Output == QueryOutput {
    /// This paginator transforms the `AsyncSequence` returned by `queryPaginated`
    /// to access the nested member `[TimestreamQueryClientTypes.Row]`
    /// - Returns: `[TimestreamQueryClientTypes.Row]`
    public func rows() async throws -> [TimestreamQueryClientTypes.Row] {
        return try await self.asyncCompactMap { item in item.rows }
    }
}
