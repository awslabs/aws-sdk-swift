//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class ClientRuntime.Indirect
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError


public struct DeleteScheduledQueryOutput: Swift.Sendable {

    public init() { }
}

public struct ExecuteScheduledQueryOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateScheduledQueryOutput: Swift.Sendable {

    public init() { }
}

/// You are not authorized to perform this action.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDenied" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The service was unable to fully process this request because of an internal server error.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The requested endpoint was not valid.
public struct InvalidEndpointException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidEndpointException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request was denied due to request throttling.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Invalid or malformed request.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CancelQueryInput: Swift.Sendable {
    /// The ID of the query that needs to be cancelled. QueryID is returned as part of the query result.
    /// This member is required.
    public var queryId: Swift.String?

    public init(
        queryId: Swift.String? = nil
    )
    {
        self.queryId = queryId
    }
}

public struct CancelQueryOutput: Swift.Sendable {
    /// A CancellationMessage is returned when a CancelQuery request for the query specified by QueryId has already been issued.
    public var cancellationMessage: Swift.String?

    public init(
        cancellationMessage: Swift.String? = nil
    )
    {
        self.cancellationMessage = cancellationMessage
    }
}

extension TimestreamQueryClientTypes {

    public enum ScalarType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bigint
        case boolean
        case date
        case double
        case integer
        case intervalDayToSecond
        case intervalYearToMonth
        case time
        case timestamp
        case unknown
        case varchar
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalarType] {
            return [
                .bigint,
                .boolean,
                .date,
                .double,
                .integer,
                .intervalDayToSecond,
                .intervalYearToMonth,
                .time,
                .timestamp,
                .unknown,
                .varchar
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bigint: return "BIGINT"
            case .boolean: return "BOOLEAN"
            case .date: return "DATE"
            case .double: return "DOUBLE"
            case .integer: return "INTEGER"
            case .intervalDayToSecond: return "INTERVAL_DAY_TO_SECOND"
            case .intervalYearToMonth: return "INTERVAL_YEAR_TO_MONTH"
            case .time: return "TIME"
            case .timestamp: return "TIMESTAMP"
            case .unknown: return "UNKNOWN"
            case .varchar: return "VARCHAR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// Unable to poll results for a cancelled query.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You have exceeded the service quota.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TimestreamQueryClientTypes {

    public enum S3EncryptionOption: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case sseKms
        case sseS3
        case sdkUnknown(Swift.String)

        public static var allCases: [S3EncryptionOption] {
            return [
                .sseKms,
                .sseS3
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .sseKms: return "SSE_KMS"
            case .sseS3: return "SSE_S3"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Details on S3 location for error reports that result from running a query.
    public struct S3Configuration: Swift.Sendable {
        /// Name of the S3 bucket under which error reports will be created.
        /// This member is required.
        public var bucketName: Swift.String?
        /// Encryption at rest options for the error reports. If no encryption option is specified, Timestream will choose SSE_S3 as default.
        public var encryptionOption: TimestreamQueryClientTypes.S3EncryptionOption?
        /// Prefix for the error report key. Timestream by default adds the following prefix to the error report path.
        public var objectKeyPrefix: Swift.String?

        public init(
            bucketName: Swift.String? = nil,
            encryptionOption: TimestreamQueryClientTypes.S3EncryptionOption? = nil,
            objectKeyPrefix: Swift.String? = nil
        )
        {
            self.bucketName = bucketName
            self.encryptionOption = encryptionOption
            self.objectKeyPrefix = objectKeyPrefix
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Configuration required for error reporting.
    public struct ErrorReportConfiguration: Swift.Sendable {
        /// The S3 configuration for the error reports.
        /// This member is required.
        public var s3Configuration: TimestreamQueryClientTypes.S3Configuration?

        public init(
            s3Configuration: TimestreamQueryClientTypes.S3Configuration? = nil
        )
        {
            self.s3Configuration = s3Configuration
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Details on SNS that are required to send the notification.
    public struct SnsConfiguration: Swift.Sendable {
        /// SNS topic ARN that the scheduled query status notifications will be sent to.
        /// This member is required.
        public var topicArn: Swift.String?

        public init(
            topicArn: Swift.String? = nil
        )
        {
            self.topicArn = topicArn
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Notification configuration for a scheduled query. A notification is sent by Timestream when a scheduled query is created, its state is updated or when it is deleted.
    public struct NotificationConfiguration: Swift.Sendable {
        /// Details on SNS configuration.
        /// This member is required.
        public var snsConfiguration: TimestreamQueryClientTypes.SnsConfiguration?

        public init(
            snsConfiguration: TimestreamQueryClientTypes.SnsConfiguration? = nil
        )
        {
            self.snsConfiguration = snsConfiguration
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Configuration of the schedule of the query.
    public struct ScheduleConfiguration: Swift.Sendable {
        /// An expression that denotes when to trigger the scheduled query run. This can be a cron expression or a rate expression.
        /// This member is required.
        public var scheduleExpression: Swift.String?

        public init(
            scheduleExpression: Swift.String? = nil
        )
        {
            self.scheduleExpression = scheduleExpression
        }
    }
}

extension TimestreamQueryClientTypes {

    /// A tag is a label that you assign to a Timestream database and/or table. Each tag consists of a key and an optional value, both of which you define. Tags enable you to categorize databases and/or tables, for example, by purpose, owner, or environment.
    public struct Tag: Swift.Sendable {
        /// The key of the tag. Tag keys are case sensitive.
        /// This member is required.
        public var key: Swift.String?
        /// The value of the tag. Tag values are case sensitive and can be null.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

extension TimestreamQueryClientTypes {

    public enum DimensionValueType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case varchar
        case sdkUnknown(Swift.String)

        public static var allCases: [DimensionValueType] {
            return [
                .varchar
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .varchar: return "VARCHAR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TimestreamQueryClientTypes {

    /// This type is used to map column(s) from the query result to a dimension in the destination table.
    public struct DimensionMapping: Swift.Sendable {
        /// Type for the dimension.
        /// This member is required.
        public var dimensionValueType: TimestreamQueryClientTypes.DimensionValueType?
        /// Column name from query result.
        /// This member is required.
        public var name: Swift.String?

        public init(
            dimensionValueType: TimestreamQueryClientTypes.DimensionValueType? = nil,
            name: Swift.String? = nil
        )
        {
            self.dimensionValueType = dimensionValueType
            self.name = name
        }
    }
}

extension TimestreamQueryClientTypes {

    public enum MeasureValueType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bigint
        case boolean
        case double
        case multi
        case varchar
        case sdkUnknown(Swift.String)

        public static var allCases: [MeasureValueType] {
            return [
                .bigint,
                .boolean,
                .double,
                .multi,
                .varchar
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bigint: return "BIGINT"
            case .boolean: return "BOOLEAN"
            case .double: return "DOUBLE"
            case .multi: return "MULTI"
            case .varchar: return "VARCHAR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TimestreamQueryClientTypes {

    public enum ScalarMeasureValueType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bigint
        case boolean
        case double
        case timestamp
        case varchar
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalarMeasureValueType] {
            return [
                .bigint,
                .boolean,
                .double,
                .timestamp,
                .varchar
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bigint: return "BIGINT"
            case .boolean: return "BOOLEAN"
            case .double: return "DOUBLE"
            case .timestamp: return "TIMESTAMP"
            case .varchar: return "VARCHAR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Attribute mapping for MULTI value measures.
    public struct MultiMeasureAttributeMapping: Swift.Sendable {
        /// Type of the attribute to be read from the source column.
        /// This member is required.
        public var measureValueType: TimestreamQueryClientTypes.ScalarMeasureValueType?
        /// Source column from where the attribute value is to be read.
        /// This member is required.
        public var sourceColumn: Swift.String?
        /// Custom name to be used for attribute name in derived table. If not provided, source column name would be used.
        public var targetMultiMeasureAttributeName: Swift.String?

        public init(
            measureValueType: TimestreamQueryClientTypes.ScalarMeasureValueType? = nil,
            sourceColumn: Swift.String? = nil,
            targetMultiMeasureAttributeName: Swift.String? = nil
        )
        {
            self.measureValueType = measureValueType
            self.sourceColumn = sourceColumn
            self.targetMultiMeasureAttributeName = targetMultiMeasureAttributeName
        }
    }
}

extension TimestreamQueryClientTypes {

    /// MixedMeasureMappings are mappings that can be used to ingest data into a mixture of narrow and multi measures in the derived table.
    public struct MixedMeasureMapping: Swift.Sendable {
        /// Refers to the value of measure_name in a result row. This field is required if MeasureNameColumn is provided.
        public var measureName: Swift.String?
        /// Type of the value that is to be read from sourceColumn. If the mapping is for MULTI, use MeasureValueType.MULTI.
        /// This member is required.
        public var measureValueType: TimestreamQueryClientTypes.MeasureValueType?
        /// Required when measureValueType is MULTI. Attribute mappings for MULTI value measures.
        public var multiMeasureAttributeMappings: [TimestreamQueryClientTypes.MultiMeasureAttributeMapping]?
        /// This field refers to the source column from which measure-value is to be read for result materialization.
        public var sourceColumn: Swift.String?
        /// Target measure name to be used. If not provided, the target measure name by default would be measure-name if provided, or sourceColumn otherwise.
        public var targetMeasureName: Swift.String?

        public init(
            measureName: Swift.String? = nil,
            measureValueType: TimestreamQueryClientTypes.MeasureValueType? = nil,
            multiMeasureAttributeMappings: [TimestreamQueryClientTypes.MultiMeasureAttributeMapping]? = nil,
            sourceColumn: Swift.String? = nil,
            targetMeasureName: Swift.String? = nil
        )
        {
            self.measureName = measureName
            self.measureValueType = measureValueType
            self.multiMeasureAttributeMappings = multiMeasureAttributeMappings
            self.sourceColumn = sourceColumn
            self.targetMeasureName = targetMeasureName
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Only one of MixedMeasureMappings or MultiMeasureMappings is to be provided. MultiMeasureMappings can be used to ingest data as multi measures in the derived table.
    public struct MultiMeasureMappings: Swift.Sendable {
        /// Required. Attribute mappings to be used for mapping query results to ingest data for multi-measure attributes.
        /// This member is required.
        public var multiMeasureAttributeMappings: [TimestreamQueryClientTypes.MultiMeasureAttributeMapping]?
        /// The name of the target multi-measure name in the derived table. This input is required when measureNameColumn is not provided. If MeasureNameColumn is provided, then value from that column will be used as multi-measure name.
        public var targetMultiMeasureName: Swift.String?

        public init(
            multiMeasureAttributeMappings: [TimestreamQueryClientTypes.MultiMeasureAttributeMapping]? = nil,
            targetMultiMeasureName: Swift.String? = nil
        )
        {
            self.multiMeasureAttributeMappings = multiMeasureAttributeMappings
            self.targetMultiMeasureName = targetMultiMeasureName
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Configuration to write data into Timestream database and table. This configuration allows the user to map the query result select columns into the destination table columns.
    public struct TimestreamConfiguration: Swift.Sendable {
        /// Name of Timestream database to which the query result will be written.
        /// This member is required.
        public var databaseName: Swift.String?
        /// This is to allow mapping column(s) from the query result to the dimension in the destination table.
        /// This member is required.
        public var dimensionMappings: [TimestreamQueryClientTypes.DimensionMapping]?
        /// Name of the measure column.
        public var measureNameColumn: Swift.String?
        /// Specifies how to map measures to multi-measure records.
        public var mixedMeasureMappings: [TimestreamQueryClientTypes.MixedMeasureMapping]?
        /// Multi-measure mappings.
        public var multiMeasureMappings: TimestreamQueryClientTypes.MultiMeasureMappings?
        /// Name of Timestream table that the query result will be written to. The table should be within the same database that is provided in Timestream configuration.
        /// This member is required.
        public var tableName: Swift.String?
        /// Column from query result that should be used as the time column in destination table. Column type for this should be TIMESTAMP.
        /// This member is required.
        public var timeColumn: Swift.String?

        public init(
            databaseName: Swift.String? = nil,
            dimensionMappings: [TimestreamQueryClientTypes.DimensionMapping]? = nil,
            measureNameColumn: Swift.String? = nil,
            mixedMeasureMappings: [TimestreamQueryClientTypes.MixedMeasureMapping]? = nil,
            multiMeasureMappings: TimestreamQueryClientTypes.MultiMeasureMappings? = nil,
            tableName: Swift.String? = nil,
            timeColumn: Swift.String? = nil
        )
        {
            self.databaseName = databaseName
            self.dimensionMappings = dimensionMappings
            self.measureNameColumn = measureNameColumn
            self.mixedMeasureMappings = mixedMeasureMappings
            self.multiMeasureMappings = multiMeasureMappings
            self.tableName = tableName
            self.timeColumn = timeColumn
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Configuration used for writing the output of a query.
    public struct TargetConfiguration: Swift.Sendable {
        /// Configuration needed to write data into the Timestream database and table.
        /// This member is required.
        public var timestreamConfiguration: TimestreamQueryClientTypes.TimestreamConfiguration?

        public init(
            timestreamConfiguration: TimestreamQueryClientTypes.TimestreamConfiguration? = nil
        )
        {
            self.timestreamConfiguration = timestreamConfiguration
        }
    }
}

public struct CreateScheduledQueryInput: Swift.Sendable {
    /// Using a ClientToken makes the call to CreateScheduledQuery idempotent, in other words, making the same request repeatedly will produce the same result. Making multiple identical CreateScheduledQuery requests has the same effect as making a single request.
    ///
    /// * If CreateScheduledQuery is called without a ClientToken, the Query SDK generates a ClientToken on your behalf.
    ///
    /// * After 8 hours, any request with the same ClientToken is treated as a new request.
    public var clientToken: Swift.String?
    /// Configuration for error reporting. Error reports will be generated when a problem is encountered when writing the query results.
    /// This member is required.
    public var errorReportConfiguration: TimestreamQueryClientTypes.ErrorReportConfiguration?
    /// The Amazon KMS key used to encrypt the scheduled query resource, at-rest. If the Amazon KMS key is not specified, the scheduled query resource will be encrypted with a Timestream owned Amazon KMS key. To specify a KMS key, use the key ID, key ARN, alias name, or alias ARN. When using an alias name, prefix the name with alias/ If ErrorReportConfiguration uses SSE_KMS as encryption type, the same KmsKeyId is used to encrypt the error report at rest.
    public var kmsKeyId: Swift.String?
    /// Name of the scheduled query.
    /// This member is required.
    public var name: Swift.String?
    /// Notification configuration for the scheduled query. A notification is sent by Timestream when a query run finishes, when the state is updated or when you delete it.
    /// This member is required.
    public var notificationConfiguration: TimestreamQueryClientTypes.NotificationConfiguration?
    /// The query string to run. Parameter names can be specified in the query string @ character followed by an identifier. The named Parameter @scheduled_runtime is reserved and can be used in the query to get the time at which the query is scheduled to run. The timestamp calculated according to the ScheduleConfiguration parameter, will be the value of @scheduled_runtime paramater for each query run. For example, consider an instance of a scheduled query executing on 2021-12-01 00:00:00. For this instance, the @scheduled_runtime parameter is initialized to the timestamp 2021-12-01 00:00:00 when invoking the query.
    /// This member is required.
    public var queryString: Swift.String?
    /// The schedule configuration for the query.
    /// This member is required.
    public var scheduleConfiguration: TimestreamQueryClientTypes.ScheduleConfiguration?
    /// The ARN for the IAM role that Timestream will assume when running the scheduled query.
    /// This member is required.
    public var scheduledQueryExecutionRoleArn: Swift.String?
    /// A list of key-value pairs to label the scheduled query.
    public var tags: [TimestreamQueryClientTypes.Tag]?
    /// Configuration used for writing the result of a query.
    public var targetConfiguration: TimestreamQueryClientTypes.TargetConfiguration?

    public init(
        clientToken: Swift.String? = nil,
        errorReportConfiguration: TimestreamQueryClientTypes.ErrorReportConfiguration? = nil,
        kmsKeyId: Swift.String? = nil,
        name: Swift.String? = nil,
        notificationConfiguration: TimestreamQueryClientTypes.NotificationConfiguration? = nil,
        queryString: Swift.String? = nil,
        scheduleConfiguration: TimestreamQueryClientTypes.ScheduleConfiguration? = nil,
        scheduledQueryExecutionRoleArn: Swift.String? = nil,
        tags: [TimestreamQueryClientTypes.Tag]? = nil,
        targetConfiguration: TimestreamQueryClientTypes.TargetConfiguration? = nil
    )
    {
        self.clientToken = clientToken
        self.errorReportConfiguration = errorReportConfiguration
        self.kmsKeyId = kmsKeyId
        self.name = name
        self.notificationConfiguration = notificationConfiguration
        self.queryString = queryString
        self.scheduleConfiguration = scheduleConfiguration
        self.scheduledQueryExecutionRoleArn = scheduledQueryExecutionRoleArn
        self.tags = tags
        self.targetConfiguration = targetConfiguration
    }
}

extension CreateScheduledQueryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateScheduledQueryInput(errorReportConfiguration: \(Swift.String(describing: errorReportConfiguration)), kmsKeyId: \(Swift.String(describing: kmsKeyId)), name: \(Swift.String(describing: name)), notificationConfiguration: \(Swift.String(describing: notificationConfiguration)), scheduleConfiguration: \(Swift.String(describing: scheduleConfiguration)), scheduledQueryExecutionRoleArn: \(Swift.String(describing: scheduledQueryExecutionRoleArn)), tags: \(Swift.String(describing: tags)), targetConfiguration: \(Swift.String(describing: targetConfiguration)), clientToken: \"CONTENT_REDACTED\", queryString: \"CONTENT_REDACTED\")"}
}

public struct CreateScheduledQueryOutput: Swift.Sendable {
    /// ARN for the created scheduled query.
    /// This member is required.
    public var arn: Swift.String?

    public init(
        arn: Swift.String? = nil
    )
    {
        self.arn = arn
    }
}

/// The requested resource could not be found.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
        /// The ARN of the scheduled query.
        public internal(set) var scheduledQueryArn: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        scheduledQueryArn: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.scheduledQueryArn = scheduledQueryArn
    }
}

public struct DeleteScheduledQueryInput: Swift.Sendable {
    /// The ARN of the scheduled query.
    /// This member is required.
    public var scheduledQueryArn: Swift.String?

    public init(
        scheduledQueryArn: Swift.String? = nil
    )
    {
        self.scheduledQueryArn = scheduledQueryArn
    }
}

public struct DescribeAccountSettingsInput: Swift.Sendable {

    public init() { }
}

extension TimestreamQueryClientTypes {

    public enum QueryPricingModel: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bytesScanned
        case computeUnits
        case sdkUnknown(Swift.String)

        public static var allCases: [QueryPricingModel] {
            return [
                .bytesScanned,
                .computeUnits
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bytesScanned: return "BYTES_SCANNED"
            case .computeUnits: return "COMPUTE_UNITS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeAccountSettingsOutput: Swift.Sendable {
    /// The maximum number of [Timestream compute units](https://docs.aws.amazon.com/timestream/latest/developerguide/tcu.html) (TCUs) the service will use at any point in time to serve your queries.
    public var maxQueryTCU: Swift.Int?
    /// The pricing model for queries in your account.
    public var queryPricingModel: TimestreamQueryClientTypes.QueryPricingModel?

    public init(
        maxQueryTCU: Swift.Int? = nil,
        queryPricingModel: TimestreamQueryClientTypes.QueryPricingModel? = nil
    )
    {
        self.maxQueryTCU = maxQueryTCU
        self.queryPricingModel = queryPricingModel
    }
}

public struct DescribeEndpointsInput: Swift.Sendable {

    public init() { }
}

extension TimestreamQueryClientTypes {

    /// Represents an available endpoint against which to make API calls against, as well as the TTL for that endpoint.
    public struct Endpoint: Swift.Sendable {
        /// An endpoint address.
        /// This member is required.
        public var address: Swift.String?
        /// The TTL for the endpoint, in minutes.
        /// This member is required.
        public var cachePeriodInMinutes: Swift.Int

        public init(
            address: Swift.String? = nil,
            cachePeriodInMinutes: Swift.Int = 0
        )
        {
            self.address = address
            self.cachePeriodInMinutes = cachePeriodInMinutes
        }
    }
}

public struct DescribeEndpointsOutput: Swift.Sendable {
    /// An Endpoints object is returned when a DescribeEndpoints request is made.
    /// This member is required.
    public var endpoints: [TimestreamQueryClientTypes.Endpoint]?

    public init(
        endpoints: [TimestreamQueryClientTypes.Endpoint]? = nil
    )
    {
        self.endpoints = endpoints
    }
}

public struct DescribeScheduledQueryInput: Swift.Sendable {
    /// The ARN of the scheduled query.
    /// This member is required.
    public var scheduledQueryArn: Swift.String?

    public init(
        scheduledQueryArn: Swift.String? = nil
    )
    {
        self.scheduledQueryArn = scheduledQueryArn
    }
}

extension TimestreamQueryClientTypes {

    /// S3 report location for the scheduled query run.
    public struct S3ReportLocation: Swift.Sendable {
        /// S3 bucket name.
        public var bucketName: Swift.String?
        /// S3 key.
        public var objectKey: Swift.String?

        public init(
            bucketName: Swift.String? = nil,
            objectKey: Swift.String? = nil
        )
        {
            self.bucketName = bucketName
            self.objectKey = objectKey
        }
    }
}

extension TimestreamQueryClientTypes {

    /// This contains the location of the error report for a single scheduled query call.
    public struct ErrorReportLocation: Swift.Sendable {
        /// The S3 location where error reports are written.
        public var s3ReportLocation: TimestreamQueryClientTypes.S3ReportLocation?

        public init(
            s3ReportLocation: TimestreamQueryClientTypes.S3ReportLocation? = nil
        )
        {
            self.s3ReportLocation = s3ReportLocation
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Statistics for a single scheduled query run.
    public struct ExecutionStats: Swift.Sendable {
        /// Bytes metered for a single scheduled query run.
        public var bytesMetered: Swift.Int
        /// Bytes scanned for a single scheduled query run.
        public var cumulativeBytesScanned: Swift.Int
        /// Data writes metered for records ingested in a single scheduled query run.
        public var dataWrites: Swift.Int
        /// Total time, measured in milliseconds, that was needed for the scheduled query run to complete.
        public var executionTimeInMillis: Swift.Int
        /// Number of rows present in the output from running a query before ingestion to destination data source.
        public var queryResultRows: Swift.Int
        /// The number of records ingested for a single scheduled query run.
        public var recordsIngested: Swift.Int

        public init(
            bytesMetered: Swift.Int = 0,
            cumulativeBytesScanned: Swift.Int = 0,
            dataWrites: Swift.Int = 0,
            executionTimeInMillis: Swift.Int = 0,
            queryResultRows: Swift.Int = 0,
            recordsIngested: Swift.Int = 0
        )
        {
            self.bytesMetered = bytesMetered
            self.cumulativeBytesScanned = cumulativeBytesScanned
            self.dataWrites = dataWrites
            self.executionTimeInMillis = executionTimeInMillis
            self.queryResultRows = queryResultRows
            self.recordsIngested = recordsIngested
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Provides insights into the table with the most sub-optimal spatial range scanned by your query.
    public struct QuerySpatialCoverageMax: Swift.Sendable {
        /// The partition key used for partitioning, which can be a default measure_name or a [customer defined partition key](https://docs.aws.amazon.com/timestream/latest/developerguide/customer-defined-partition-keys.html).
        public var partitionKey: [Swift.String]?
        /// The Amazon Resource Name (ARN) of the table with the most sub-optimal spatial pruning.
        public var tableArn: Swift.String?
        /// The maximum ratio of spatial coverage.
        public var value: Swift.Double

        public init(
            partitionKey: [Swift.String]? = nil,
            tableArn: Swift.String? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.partitionKey = partitionKey
            self.tableArn = tableArn
            self.value = value
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Provides insights into the spatial coverage of the query, including the table with sub-optimal (max) spatial pruning. This information can help you identify areas for improvement in your partitioning strategy to enhance spatial pruning For example, you can do the following with the QuerySpatialCoverage information:
    ///
    /// * Add measure_name or use [customer-defined partition key](https://docs.aws.amazon.com/timestream/latest/developerguide/customer-defined-partition-keys.html) (CDPK) predicates.
    ///
    /// * If you've already done the preceding action, remove functions around them or clauses, such as LIKE.
    public struct QuerySpatialCoverage: Swift.Sendable {
        /// Provides insights into the spatial coverage of the executed query and the table with the most inefficient spatial pruning.
        ///
        /// * Value – The maximum ratio of spatial coverage.
        ///
        /// * TableArn – The Amazon Resource Name (ARN) of the table with sub-optimal spatial pruning.
        ///
        /// * PartitionKey – The partition key used for partitioning, which can be a default measure_name or a CDPK.
        public var max: TimestreamQueryClientTypes.QuerySpatialCoverageMax?

        public init(
            max: TimestreamQueryClientTypes.QuerySpatialCoverageMax? = nil
        )
        {
            self.max = max
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Provides insights into the table with the most sub-optimal temporal pruning scanned by your query.
    public struct QueryTemporalRangeMax: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the table which is queried with the largest time range.
        public var tableArn: Swift.String?
        /// The maximum duration in nanoseconds between the start and end of the query.
        public var value: Swift.Int

        public init(
            tableArn: Swift.String? = nil,
            value: Swift.Int = 0
        )
        {
            self.tableArn = tableArn
            self.value = value
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Provides insights into the temporal range of the query, including the table with the largest (max) time range.
    public struct QueryTemporalRange: Swift.Sendable {
        /// Encapsulates the following properties that provide insights into the most sub-optimal performing table on the temporal axis:
        ///
        /// * Value – The maximum duration in nanoseconds between the start and end of the query.
        ///
        /// * TableArn – The Amazon Resource Name (ARN) of the table which is queried with the largest time range.
        public var max: TimestreamQueryClientTypes.QueryTemporalRangeMax?

        public init(
            max: TimestreamQueryClientTypes.QueryTemporalRangeMax? = nil
        )
        {
            self.max = max
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Provides various insights and metrics related to the ExecuteScheduledQueryRequest that was executed.
    public struct ScheduledQueryInsightsResponse: Swift.Sendable {
        /// Indicates the size of query result set in bytes. You can use this data to validate if the result set has changed as part of the query tuning exercise.
        public var outputBytes: Swift.Int?
        /// Indicates the total number of rows returned as part of the query result set. You can use this data to validate if the number of rows in the result set have changed as part of the query tuning exercise.
        public var outputRows: Swift.Int?
        /// Provides insights into the spatial coverage of the query, including the table with sub-optimal (max) spatial pruning. This information can help you identify areas for improvement in your partitioning strategy to enhance spatial pruning.
        public var querySpatialCoverage: TimestreamQueryClientTypes.QuerySpatialCoverage?
        /// Indicates the number of tables in the query.
        public var queryTableCount: Swift.Int?
        /// Provides insights into the temporal range of the query, including the table with the largest (max) time range. Following are some of the potential options for optimizing time-based pruning:
        ///
        /// * Add missing time-predicates.
        ///
        /// * Remove functions around the time predicates.
        ///
        /// * Add time predicates to all the sub-queries.
        public var queryTemporalRange: TimestreamQueryClientTypes.QueryTemporalRange?

        public init(
            outputBytes: Swift.Int? = 0,
            outputRows: Swift.Int? = 0,
            querySpatialCoverage: TimestreamQueryClientTypes.QuerySpatialCoverage? = nil,
            queryTableCount: Swift.Int? = 0,
            queryTemporalRange: TimestreamQueryClientTypes.QueryTemporalRange? = nil
        )
        {
            self.outputBytes = outputBytes
            self.outputRows = outputRows
            self.querySpatialCoverage = querySpatialCoverage
            self.queryTableCount = queryTableCount
            self.queryTemporalRange = queryTemporalRange
        }
    }
}

extension TimestreamQueryClientTypes {

    public enum ScheduledQueryRunStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case autoTriggerFailure
        case autoTriggerSuccess
        case manualTriggerFailure
        case manualTriggerSuccess
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledQueryRunStatus] {
            return [
                .autoTriggerFailure,
                .autoTriggerSuccess,
                .manualTriggerFailure,
                .manualTriggerSuccess
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .autoTriggerFailure: return "AUTO_TRIGGER_FAILURE"
            case .autoTriggerSuccess: return "AUTO_TRIGGER_SUCCESS"
            case .manualTriggerFailure: return "MANUAL_TRIGGER_FAILURE"
            case .manualTriggerSuccess: return "MANUAL_TRIGGER_SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Run summary for the scheduled query
    public struct ScheduledQueryRunSummary: Swift.Sendable {
        /// S3 location for error report.
        public var errorReportLocation: TimestreamQueryClientTypes.ErrorReportLocation?
        /// Runtime statistics for a scheduled run.
        public var executionStats: TimestreamQueryClientTypes.ExecutionStats?
        /// Error message for the scheduled query in case of failure. You might have to look at the error report to get more detailed error reasons.
        public var failureReason: Swift.String?
        /// InvocationTime for this run. This is the time at which the query is scheduled to run. Parameter @scheduled_runtime can be used in the query to get the value.
        public var invocationTime: Foundation.Date?
        /// Provides various insights and metrics related to the run summary of the scheduled query.
        public var queryInsightsResponse: TimestreamQueryClientTypes.ScheduledQueryInsightsResponse?
        /// The status of a scheduled query run.
        public var runStatus: TimestreamQueryClientTypes.ScheduledQueryRunStatus?
        /// The actual time when the query was run.
        public var triggerTime: Foundation.Date?

        public init(
            errorReportLocation: TimestreamQueryClientTypes.ErrorReportLocation? = nil,
            executionStats: TimestreamQueryClientTypes.ExecutionStats? = nil,
            failureReason: Swift.String? = nil,
            invocationTime: Foundation.Date? = nil,
            queryInsightsResponse: TimestreamQueryClientTypes.ScheduledQueryInsightsResponse? = nil,
            runStatus: TimestreamQueryClientTypes.ScheduledQueryRunStatus? = nil,
            triggerTime: Foundation.Date? = nil
        )
        {
            self.errorReportLocation = errorReportLocation
            self.executionStats = executionStats
            self.failureReason = failureReason
            self.invocationTime = invocationTime
            self.queryInsightsResponse = queryInsightsResponse
            self.runStatus = runStatus
            self.triggerTime = triggerTime
        }
    }
}

extension TimestreamQueryClientTypes {

    public enum ScheduledQueryState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledQueryState] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Structure that describes scheduled query.
    public struct ScheduledQueryDescription: Swift.Sendable {
        /// Scheduled query ARN.
        /// This member is required.
        public var arn: Swift.String?
        /// Creation time of the scheduled query.
        public var creationTime: Foundation.Date?
        /// Error-reporting configuration for the scheduled query.
        public var errorReportConfiguration: TimestreamQueryClientTypes.ErrorReportConfiguration?
        /// A customer provided KMS key used to encrypt the scheduled query resource.
        public var kmsKeyId: Swift.String?
        /// Runtime summary for the last scheduled query run.
        public var lastRunSummary: TimestreamQueryClientTypes.ScheduledQueryRunSummary?
        /// Name of the scheduled query.
        /// This member is required.
        public var name: Swift.String?
        /// The next time the scheduled query is scheduled to run.
        public var nextInvocationTime: Foundation.Date?
        /// Notification configuration.
        /// This member is required.
        public var notificationConfiguration: TimestreamQueryClientTypes.NotificationConfiguration?
        /// Last time the query was run.
        public var previousInvocationTime: Foundation.Date?
        /// The query to be run.
        /// This member is required.
        public var queryString: Swift.String?
        /// Runtime summary for the last five failed scheduled query runs.
        public var recentlyFailedRuns: [TimestreamQueryClientTypes.ScheduledQueryRunSummary]?
        /// Schedule configuration.
        /// This member is required.
        public var scheduleConfiguration: TimestreamQueryClientTypes.ScheduleConfiguration?
        /// IAM role that Timestream uses to run the schedule query.
        public var scheduledQueryExecutionRoleArn: Swift.String?
        /// State of the scheduled query.
        /// This member is required.
        public var state: TimestreamQueryClientTypes.ScheduledQueryState?
        /// Scheduled query target store configuration.
        public var targetConfiguration: TimestreamQueryClientTypes.TargetConfiguration?

        public init(
            arn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            errorReportConfiguration: TimestreamQueryClientTypes.ErrorReportConfiguration? = nil,
            kmsKeyId: Swift.String? = nil,
            lastRunSummary: TimestreamQueryClientTypes.ScheduledQueryRunSummary? = nil,
            name: Swift.String? = nil,
            nextInvocationTime: Foundation.Date? = nil,
            notificationConfiguration: TimestreamQueryClientTypes.NotificationConfiguration? = nil,
            previousInvocationTime: Foundation.Date? = nil,
            queryString: Swift.String? = nil,
            recentlyFailedRuns: [TimestreamQueryClientTypes.ScheduledQueryRunSummary]? = nil,
            scheduleConfiguration: TimestreamQueryClientTypes.ScheduleConfiguration? = nil,
            scheduledQueryExecutionRoleArn: Swift.String? = nil,
            state: TimestreamQueryClientTypes.ScheduledQueryState? = nil,
            targetConfiguration: TimestreamQueryClientTypes.TargetConfiguration? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.errorReportConfiguration = errorReportConfiguration
            self.kmsKeyId = kmsKeyId
            self.lastRunSummary = lastRunSummary
            self.name = name
            self.nextInvocationTime = nextInvocationTime
            self.notificationConfiguration = notificationConfiguration
            self.previousInvocationTime = previousInvocationTime
            self.queryString = queryString
            self.recentlyFailedRuns = recentlyFailedRuns
            self.scheduleConfiguration = scheduleConfiguration
            self.scheduledQueryExecutionRoleArn = scheduledQueryExecutionRoleArn
            self.state = state
            self.targetConfiguration = targetConfiguration
        }
    }
}

extension TimestreamQueryClientTypes.ScheduledQueryDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ScheduledQueryDescription(arn: \(Swift.String(describing: arn)), creationTime: \(Swift.String(describing: creationTime)), errorReportConfiguration: \(Swift.String(describing: errorReportConfiguration)), kmsKeyId: \(Swift.String(describing: kmsKeyId)), lastRunSummary: \(Swift.String(describing: lastRunSummary)), name: \(Swift.String(describing: name)), nextInvocationTime: \(Swift.String(describing: nextInvocationTime)), notificationConfiguration: \(Swift.String(describing: notificationConfiguration)), previousInvocationTime: \(Swift.String(describing: previousInvocationTime)), recentlyFailedRuns: \(Swift.String(describing: recentlyFailedRuns)), scheduleConfiguration: \(Swift.String(describing: scheduleConfiguration)), scheduledQueryExecutionRoleArn: \(Swift.String(describing: scheduledQueryExecutionRoleArn)), state: \(Swift.String(describing: state)), targetConfiguration: \(Swift.String(describing: targetConfiguration)), queryString: \"CONTENT_REDACTED\")"}
}

public struct DescribeScheduledQueryOutput: Swift.Sendable {
    /// The scheduled query.
    /// This member is required.
    public var scheduledQuery: TimestreamQueryClientTypes.ScheduledQueryDescription?

    public init(
        scheduledQuery: TimestreamQueryClientTypes.ScheduledQueryDescription? = nil
    )
    {
        self.scheduledQuery = scheduledQuery
    }
}

extension TimestreamQueryClientTypes {

    public enum ScheduledQueryInsightsMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabledWithRateControl
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduledQueryInsightsMode] {
            return [
                .disabled,
                .enabledWithRateControl
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabledWithRateControl: return "ENABLED_WITH_RATE_CONTROL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Encapsulates settings for enabling QueryInsights on an ExecuteScheduledQueryRequest.
    public struct ScheduledQueryInsights: Swift.Sendable {
        /// Provides the following modes to enable ScheduledQueryInsights:
        ///
        /// * ENABLED_WITH_RATE_CONTROL – Enables ScheduledQueryInsights for the queries being processed. This mode also includes a rate control mechanism, which limits the QueryInsights feature to 1 query per second (QPS).
        ///
        /// * DISABLED – Disables ScheduledQueryInsights.
        /// This member is required.
        public var mode: TimestreamQueryClientTypes.ScheduledQueryInsightsMode?

        public init(
            mode: TimestreamQueryClientTypes.ScheduledQueryInsightsMode? = nil
        )
        {
            self.mode = mode
        }
    }
}

public struct ExecuteScheduledQueryInput: Swift.Sendable {
    /// Not used.
    public var clientToken: Swift.String?
    /// The timestamp in UTC. Query will be run as if it was invoked at this timestamp.
    /// This member is required.
    public var invocationTime: Foundation.Date?
    /// Encapsulates settings for enabling QueryInsights. Enabling QueryInsights returns insights and metrics as a part of the Amazon SNS notification for the query that you executed. You can use QueryInsights to tune your query performance and cost.
    public var queryInsights: TimestreamQueryClientTypes.ScheduledQueryInsights?
    /// ARN of the scheduled query.
    /// This member is required.
    public var scheduledQueryArn: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        invocationTime: Foundation.Date? = nil,
        queryInsights: TimestreamQueryClientTypes.ScheduledQueryInsights? = nil,
        scheduledQueryArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.invocationTime = invocationTime
        self.queryInsights = queryInsights
        self.scheduledQueryArn = scheduledQueryArn
    }
}

extension ExecuteScheduledQueryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExecuteScheduledQueryInput(invocationTime: \(Swift.String(describing: invocationTime)), queryInsights: \(Swift.String(describing: queryInsights)), scheduledQueryArn: \(Swift.String(describing: scheduledQueryArn)), clientToken: \"CONTENT_REDACTED\")"}
}

public struct ListScheduledQueriesInput: Swift.Sendable {
    /// The maximum number of items to return in the output. If the total number of items available is more than the value specified, a NextToken is provided in the output. To resume pagination, provide the NextToken value as the argument to the subsequent call to ListScheduledQueriesRequest.
    public var maxResults: Swift.Int?
    /// A pagination token to resume pagination.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension TimestreamQueryClientTypes {

    /// Destination for scheduled query.
    public struct TimestreamDestination: Swift.Sendable {
        /// Timestream database name.
        public var databaseName: Swift.String?
        /// Timestream table name.
        public var tableName: Swift.String?

        public init(
            databaseName: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.databaseName = databaseName
            self.tableName = tableName
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Destination details to write data for a target data source. Current supported data source is Timestream.
    public struct TargetDestination: Swift.Sendable {
        /// Query result destination details for Timestream data source.
        public var timestreamDestination: TimestreamQueryClientTypes.TimestreamDestination?

        public init(
            timestreamDestination: TimestreamQueryClientTypes.TimestreamDestination? = nil
        )
        {
            self.timestreamDestination = timestreamDestination
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Scheduled Query
    public struct ScheduledQuery: Swift.Sendable {
        /// The Amazon Resource Name.
        /// This member is required.
        public var arn: Swift.String?
        /// The creation time of the scheduled query.
        public var creationTime: Foundation.Date?
        /// Configuration for scheduled query error reporting.
        public var errorReportConfiguration: TimestreamQueryClientTypes.ErrorReportConfiguration?
        /// Status of the last scheduled query run.
        public var lastRunStatus: TimestreamQueryClientTypes.ScheduledQueryRunStatus?
        /// The name of the scheduled query.
        /// This member is required.
        public var name: Swift.String?
        /// The next time the scheduled query is to be run.
        public var nextInvocationTime: Foundation.Date?
        /// The last time the scheduled query was run.
        public var previousInvocationTime: Foundation.Date?
        /// State of scheduled query.
        /// This member is required.
        public var state: TimestreamQueryClientTypes.ScheduledQueryState?
        /// Target data source where final scheduled query result will be written.
        public var targetDestination: TimestreamQueryClientTypes.TargetDestination?

        public init(
            arn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            errorReportConfiguration: TimestreamQueryClientTypes.ErrorReportConfiguration? = nil,
            lastRunStatus: TimestreamQueryClientTypes.ScheduledQueryRunStatus? = nil,
            name: Swift.String? = nil,
            nextInvocationTime: Foundation.Date? = nil,
            previousInvocationTime: Foundation.Date? = nil,
            state: TimestreamQueryClientTypes.ScheduledQueryState? = nil,
            targetDestination: TimestreamQueryClientTypes.TargetDestination? = nil
        )
        {
            self.arn = arn
            self.creationTime = creationTime
            self.errorReportConfiguration = errorReportConfiguration
            self.lastRunStatus = lastRunStatus
            self.name = name
            self.nextInvocationTime = nextInvocationTime
            self.previousInvocationTime = previousInvocationTime
            self.state = state
            self.targetDestination = targetDestination
        }
    }
}

public struct ListScheduledQueriesOutput: Swift.Sendable {
    /// A token to specify where to start paginating. This is the NextToken from a previously truncated response.
    public var nextToken: Swift.String?
    /// A list of scheduled queries.
    /// This member is required.
    public var scheduledQueries: [TimestreamQueryClientTypes.ScheduledQuery]?

    public init(
        nextToken: Swift.String? = nil,
        scheduledQueries: [TimestreamQueryClientTypes.ScheduledQuery]? = nil
    )
    {
        self.nextToken = nextToken
        self.scheduledQueries = scheduledQueries
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The maximum number of tags to return.
    public var maxResults: Swift.Int?
    /// A pagination token to resume pagination.
    public var nextToken: Swift.String?
    /// The Timestream resource with tags to be listed. This value is an Amazon Resource Name (ARN).
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceARN: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceARN = resourceARN
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// A pagination token to resume pagination with a subsequent call to ListTagsForResourceResponse.
    public var nextToken: Swift.String?
    /// The tags currently associated with the Timestream resource.
    /// This member is required.
    public var tags: [TimestreamQueryClientTypes.Tag]?

    public init(
        nextToken: Swift.String? = nil,
        tags: [TimestreamQueryClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

public struct PrepareQueryInput: Swift.Sendable {
    /// The Timestream query string that you want to use as a prepared statement. Parameter names can be specified in the query string @ character followed by an identifier.
    /// This member is required.
    public var queryString: Swift.String?
    /// By setting this value to true, Timestream will only validate that the query string is a valid Timestream query, and not store the prepared query for later use.
    public var validateOnly: Swift.Bool?

    public init(
        queryString: Swift.String? = nil,
        validateOnly: Swift.Bool? = nil
    )
    {
        self.queryString = queryString
        self.validateOnly = validateOnly
    }
}

extension PrepareQueryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PrepareQueryInput(validateOnly: \(Swift.String(describing: validateOnly)), queryString: \"CONTENT_REDACTED\")"}
}

/// Timestream was unable to run the query successfully.
public struct QueryExecutionException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "QueryExecutionException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension TimestreamQueryClientTypes {

    public enum QueryInsightsMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabledWithRateControl
        case sdkUnknown(Swift.String)

        public static var allCases: [QueryInsightsMode] {
            return [
                .disabled,
                .enabledWithRateControl
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabledWithRateControl: return "ENABLED_WITH_RATE_CONTROL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension TimestreamQueryClientTypes {

    /// QueryInsights is a performance tuning feature that helps you optimize your queries, reducing costs and improving performance. With QueryInsights, you can assess the pruning efficiency of your queries and identify areas for improvement to enhance query performance. With QueryInsights, you can also analyze the effectiveness of your queries in terms of temporal and spatial pruning, and identify opportunities to improve performance. Specifically, you can evaluate how well your queries use time-based and partition key-based indexing strategies to optimize data retrieval. To optimize query performance, it's essential that you fine-tune both the temporal and spatial parameters that govern query execution. The key metrics provided by QueryInsights are QuerySpatialCoverage and QueryTemporalRange. QuerySpatialCoverage indicates how much of the spatial axis the query scans, with lower values being more efficient. QueryTemporalRange shows the time range scanned, with narrower ranges being more performant. Benefits of QueryInsights The following are the key benefits of using QueryInsights:
    ///
    /// * Identifying inefficient queries – QueryInsights provides information on the time-based and attribute-based pruning of the tables accessed by the query. This information helps you identify the tables that are sub-optimally accessed.
    ///
    /// * Optimizing your data model and partitioning – You can use the QueryInsights information to access and fine-tune your data model and partitioning strategy.
    ///
    /// * Tuning queries – QueryInsights highlights opportunities to use indexes more effectively.
    ///
    ///
    /// The maximum number of Query API requests you're allowed to make with QueryInsights enabled is 1 query per second (QPS). If you exceed this query rate, it might result in throttling.
    public struct QueryInsights: Swift.Sendable {
        /// Provides the following modes to enable QueryInsights:
        ///
        /// * ENABLED_WITH_RATE_CONTROL – Enables QueryInsights for the queries being processed. This mode also includes a rate control mechanism, which limits the QueryInsights feature to 1 query per second (QPS).
        ///
        /// * DISABLED – Disables QueryInsights.
        /// This member is required.
        public var mode: TimestreamQueryClientTypes.QueryInsightsMode?

        public init(
            mode: TimestreamQueryClientTypes.QueryInsightsMode? = nil
        )
        {
            self.mode = mode
        }
    }
}

public struct QueryInput: Swift.Sendable {
    /// Unique, case-sensitive string of up to 64 ASCII characters specified when a Query request is made. Providing a ClientToken makes the call to Query idempotent. This means that running the same query repeatedly will produce the same result. In other words, making multiple identical Query requests has the same effect as making a single request. When using ClientToken in a query, note the following:
    ///
    /// * If the Query API is instantiated without a ClientToken, the Query SDK generates a ClientToken on your behalf.
    ///
    /// * If the Query invocation only contains the ClientToken but does not include a NextToken, that invocation of Query is assumed to be a new query run.
    ///
    /// * If the invocation contains NextToken, that particular invocation is assumed to be a subsequent invocation of a prior call to the Query API, and a result set is returned.
    ///
    /// * After 4 hours, any request with the same ClientToken is treated as a new request.
    public var clientToken: Swift.String?
    /// The total number of rows to be returned in the Query output. The initial run of Query with a MaxRows value specified will return the result set of the query in two cases:
    ///
    /// * The size of the result is less than 1MB.
    ///
    /// * The number of rows in the result set is less than the value of maxRows.
    ///
    ///
    /// Otherwise, the initial invocation of Query only returns a NextToken, which can then be used in subsequent calls to fetch the result set. To resume pagination, provide the NextToken value in the subsequent command. If the row size is large (e.g. a row has many columns), Timestream may return fewer rows to keep the response size from exceeding the 1 MB limit. If MaxRows is not provided, Timestream will send the necessary number of rows to meet the 1 MB limit.
    public var maxRows: Swift.Int?
    /// A pagination token used to return a set of results. When the Query API is invoked using NextToken, that particular invocation is assumed to be a subsequent invocation of a prior call to Query, and a result set is returned. However, if the Query invocation only contains the ClientToken, that invocation of Query is assumed to be a new query run. Note the following when using NextToken in a query:
    ///
    /// * A pagination token can be used for up to five Query invocations, OR for a duration of up to 1 hour – whichever comes first.
    ///
    /// * Using the same NextToken will return the same set of records. To keep paginating through the result set, you must to use the most recent nextToken.
    ///
    /// * Suppose a Query invocation returns two NextToken values, TokenA and TokenB. If TokenB is used in a subsequent Query invocation, then TokenA is invalidated and cannot be reused.
    ///
    /// * To request a previous result set from a query after pagination has begun, you must re-invoke the Query API.
    ///
    /// * The latest NextToken should be used to paginate until null is returned, at which point a new NextToken should be used.
    ///
    /// * If the IAM principal of the query initiator and the result reader are not the same and/or the query initiator and the result reader do not have the same query string in the query requests, the query will fail with an Invalid pagination token error.
    public var nextToken: Swift.String?
    /// Encapsulates settings for enabling QueryInsights. Enabling QueryInsights returns insights and metrics in addition to query results for the query that you executed. You can use QueryInsights to tune your query performance.
    public var queryInsights: TimestreamQueryClientTypes.QueryInsights?
    /// The query to be run by Timestream.
    /// This member is required.
    public var queryString: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        maxRows: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        queryInsights: TimestreamQueryClientTypes.QueryInsights? = nil,
        queryString: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.maxRows = maxRows
        self.nextToken = nextToken
        self.queryInsights = queryInsights
        self.queryString = queryString
    }
}

extension QueryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "QueryInput(maxRows: \(Swift.String(describing: maxRows)), nextToken: \(Swift.String(describing: nextToken)), queryInsights: \(Swift.String(describing: queryInsights)), clientToken: \"CONTENT_REDACTED\", queryString: \"CONTENT_REDACTED\")"}
}

extension TimestreamQueryClientTypes {

    /// Provides various insights and metrics related to the query that you executed.
    public struct QueryInsightsResponse: Swift.Sendable {
        /// Indicates the size of query result set in bytes. You can use this data to validate if the result set has changed as part of the query tuning exercise.
        public var outputBytes: Swift.Int?
        /// Indicates the total number of rows returned as part of the query result set. You can use this data to validate if the number of rows in the result set have changed as part of the query tuning exercise.
        public var outputRows: Swift.Int?
        /// Provides insights into the spatial coverage of the query, including the table with sub-optimal (max) spatial pruning. This information can help you identify areas for improvement in your partitioning strategy to enhance spatial pruning.
        public var querySpatialCoverage: TimestreamQueryClientTypes.QuerySpatialCoverage?
        /// Indicates the number of tables in the query.
        public var queryTableCount: Swift.Int?
        /// Provides insights into the temporal range of the query, including the table with the largest (max) time range. Following are some of the potential options for optimizing time-based pruning:
        ///
        /// * Add missing time-predicates.
        ///
        /// * Remove functions around the time predicates.
        ///
        /// * Add time predicates to all the sub-queries.
        public var queryTemporalRange: TimestreamQueryClientTypes.QueryTemporalRange?
        /// Indicates the partitions created by the Unload operation.
        public var unloadPartitionCount: Swift.Int?
        /// Indicates the size, in bytes, written by the Unload operation.
        public var unloadWrittenBytes: Swift.Int?
        /// Indicates the rows written by the Unload query.
        public var unloadWrittenRows: Swift.Int?

        public init(
            outputBytes: Swift.Int? = 0,
            outputRows: Swift.Int? = 0,
            querySpatialCoverage: TimestreamQueryClientTypes.QuerySpatialCoverage? = nil,
            queryTableCount: Swift.Int? = 0,
            queryTemporalRange: TimestreamQueryClientTypes.QueryTemporalRange? = nil,
            unloadPartitionCount: Swift.Int? = 0,
            unloadWrittenBytes: Swift.Int? = 0,
            unloadWrittenRows: Swift.Int? = 0
        )
        {
            self.outputBytes = outputBytes
            self.outputRows = outputRows
            self.querySpatialCoverage = querySpatialCoverage
            self.queryTableCount = queryTableCount
            self.queryTemporalRange = queryTemporalRange
            self.unloadPartitionCount = unloadPartitionCount
            self.unloadWrittenBytes = unloadWrittenBytes
            self.unloadWrittenRows = unloadWrittenRows
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Information about the status of the query, including progress and bytes scanned.
    public struct QueryStatus: Swift.Sendable {
        /// The amount of data scanned by the query in bytes that you will be charged for. This is a cumulative sum and represents the total amount of data that you will be charged for since the query was started. The charge is applied only once and is either applied when the query completes running or when the query is cancelled.
        public var cumulativeBytesMetered: Swift.Int
        /// The amount of data scanned by the query in bytes. This is a cumulative sum and represents the total amount of bytes scanned since the query was started.
        public var cumulativeBytesScanned: Swift.Int
        /// The progress of the query, expressed as a percentage.
        public var progressPercentage: Swift.Double

        public init(
            cumulativeBytesMetered: Swift.Int = 0,
            cumulativeBytesScanned: Swift.Int = 0,
            progressPercentage: Swift.Double = 0.0
        )
        {
            self.cumulativeBytesMetered = cumulativeBytesMetered
            self.cumulativeBytesScanned = cumulativeBytesScanned
            self.progressPercentage = progressPercentage
        }
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// Identifies the Timestream resource to which tags should be added. This value is an Amazon Resource Name (ARN).
    /// This member is required.
    public var resourceARN: Swift.String?
    /// The tags to be assigned to the Timestream resource.
    /// This member is required.
    public var tags: [TimestreamQueryClientTypes.Tag]?

    public init(
        resourceARN: Swift.String? = nil,
        tags: [TimestreamQueryClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Timestream resource that the tags will be removed from. This value is an Amazon Resource Name (ARN).
    /// This member is required.
    public var resourceARN: Swift.String?
    /// A list of tags keys. Existing tags of the resource whose keys are members of this list will be removed from the Timestream resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateAccountSettingsInput: Swift.Sendable {
    /// The maximum number of compute units the service will use at any point in time to serve your queries. To run queries, you must set a minimum capacity of 4 TCU. You can set the maximum number of TCU in multiples of 4, for example, 4, 8, 16, 32, and so on. The maximum value supported for MaxQueryTCU is 1000. To request an increase to this soft limit, contact Amazon Web Services Support. For information about the default quota for maxQueryTCU, see [Default quotas](https://docs.aws.amazon.com/timestream/latest/developerguide/ts-limits.html#limits.default).
    public var maxQueryTCU: Swift.Int?
    /// The pricing model for queries in an account. The QueryPricingModel parameter is used by several Timestream operations; however, the UpdateAccountSettings API operation doesn't recognize any values other than COMPUTE_UNITS.
    public var queryPricingModel: TimestreamQueryClientTypes.QueryPricingModel?

    public init(
        maxQueryTCU: Swift.Int? = nil,
        queryPricingModel: TimestreamQueryClientTypes.QueryPricingModel? = nil
    )
    {
        self.maxQueryTCU = maxQueryTCU
        self.queryPricingModel = queryPricingModel
    }
}

public struct UpdateAccountSettingsOutput: Swift.Sendable {
    /// The configured maximum number of compute units the service will use at any point in time to serve your queries.
    public var maxQueryTCU: Swift.Int?
    /// The pricing model for an account.
    public var queryPricingModel: TimestreamQueryClientTypes.QueryPricingModel?

    public init(
        maxQueryTCU: Swift.Int? = nil,
        queryPricingModel: TimestreamQueryClientTypes.QueryPricingModel? = nil
    )
    {
        self.maxQueryTCU = maxQueryTCU
        self.queryPricingModel = queryPricingModel
    }
}

public struct UpdateScheduledQueryInput: Swift.Sendable {
    /// ARN of the scheuled query.
    /// This member is required.
    public var scheduledQueryArn: Swift.String?
    /// State of the scheduled query.
    /// This member is required.
    public var state: TimestreamQueryClientTypes.ScheduledQueryState?

    public init(
        scheduledQueryArn: Swift.String? = nil,
        state: TimestreamQueryClientTypes.ScheduledQueryState? = nil
    )
    {
        self.scheduledQueryArn = scheduledQueryArn
        self.state = state
    }
}

extension TimestreamQueryClientTypes {

    /// Contains the metadata for query results such as the column names, data types, and other attributes.
    public struct ColumnInfo: Swift.Sendable {
        /// The name of the result set column. The name of the result set is available for columns of all data types except for arrays.
        public var name: Swift.String?
        /// The data type of the result set column. The data type can be a scalar or complex. Scalar data types are integers, strings, doubles, Booleans, and others. Complex data types are types such as arrays, rows, and others.
        /// This member is required.
        @Indirect public var type: TimestreamQueryClientTypes.ModelType?

        public init(
            name: Swift.String? = nil,
            type: TimestreamQueryClientTypes.ModelType? = nil
        )
        {
            self.name = name
            self.type = type
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Contains the data type of a column in a query result set. The data type can be scalar or complex. The supported scalar data types are integers, Boolean, string, double, timestamp, date, time, and intervals. The supported complex data types are arrays, rows, and timeseries.
    public struct ModelType: Swift.Sendable {
        /// Indicates if the column is an array.
        public var arrayColumnInfo: TimestreamQueryClientTypes.ColumnInfo?
        /// Indicates if the column is a row.
        public var rowColumnInfo: [TimestreamQueryClientTypes.ColumnInfo]?
        /// Indicates if the column is of type string, integer, Boolean, double, timestamp, date, time. For more information, see [Supported data types](https://docs.aws.amazon.com/timestream/latest/developerguide/supported-data-types.html).
        public var scalarType: TimestreamQueryClientTypes.ScalarType?
        /// Indicates if the column is a timeseries data type.
        public var timeSeriesMeasureValueColumnInfo: TimestreamQueryClientTypes.ColumnInfo?

        public init(
            arrayColumnInfo: TimestreamQueryClientTypes.ColumnInfo? = nil,
            rowColumnInfo: [TimestreamQueryClientTypes.ColumnInfo]? = nil,
            scalarType: TimestreamQueryClientTypes.ScalarType? = nil,
            timeSeriesMeasureValueColumnInfo: TimestreamQueryClientTypes.ColumnInfo? = nil
        )
        {
            self.arrayColumnInfo = arrayColumnInfo
            self.rowColumnInfo = rowColumnInfo
            self.scalarType = scalarType
            self.timeSeriesMeasureValueColumnInfo = timeSeriesMeasureValueColumnInfo
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Datum represents a single data point in a query result.
    public struct Datum: Swift.Sendable {
        /// Indicates if the data point is an array.
        public var arrayValue: [TimestreamQueryClientTypes.Datum]?
        /// Indicates if the data point is null.
        public var nullValue: Swift.Bool?
        /// Indicates if the data point is a row.
        public var rowValue: TimestreamQueryClientTypes.Row?
        /// Indicates if the data point is a scalar value such as integer, string, double, or Boolean.
        public var scalarValue: Swift.String?
        /// Indicates if the data point is a timeseries data type.
        public var timeSeriesValue: [TimestreamQueryClientTypes.TimeSeriesDataPoint]?

        public init(
            arrayValue: [TimestreamQueryClientTypes.Datum]? = nil,
            nullValue: Swift.Bool? = nil,
            rowValue: TimestreamQueryClientTypes.Row? = nil,
            scalarValue: Swift.String? = nil,
            timeSeriesValue: [TimestreamQueryClientTypes.TimeSeriesDataPoint]? = nil
        )
        {
            self.arrayValue = arrayValue
            self.nullValue = nullValue
            self.rowValue = rowValue
            self.scalarValue = scalarValue
            self.timeSeriesValue = timeSeriesValue
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Mapping for named parameters.
    public struct ParameterMapping: Swift.Sendable {
        /// Parameter name.
        /// This member is required.
        public var name: Swift.String?
        /// Contains the data type of a column in a query result set. The data type can be scalar or complex. The supported scalar data types are integers, Boolean, string, double, timestamp, date, time, and intervals. The supported complex data types are arrays, rows, and timeseries.
        /// This member is required.
        public var type: TimestreamQueryClientTypes.ModelType?

        public init(
            name: Swift.String? = nil,
            type: TimestreamQueryClientTypes.ModelType? = nil
        )
        {
            self.name = name
            self.type = type
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Details of the column that is returned by the query.
    public struct SelectColumn: Swift.Sendable {
        /// True, if the column name was aliased by the query. False otherwise.
        public var aliased: Swift.Bool?
        /// Database that has this column.
        public var databaseName: Swift.String?
        /// Name of the column.
        public var name: Swift.String?
        /// Table within the database that has this column.
        public var tableName: Swift.String?
        /// Contains the data type of a column in a query result set. The data type can be scalar or complex. The supported scalar data types are integers, Boolean, string, double, timestamp, date, time, and intervals. The supported complex data types are arrays, rows, and timeseries.
        public var type: TimestreamQueryClientTypes.ModelType?

        public init(
            aliased: Swift.Bool? = nil,
            databaseName: Swift.String? = nil,
            name: Swift.String? = nil,
            tableName: Swift.String? = nil,
            type: TimestreamQueryClientTypes.ModelType? = nil
        )
        {
            self.aliased = aliased
            self.databaseName = databaseName
            self.name = name
            self.tableName = tableName
            self.type = type
        }
    }
}

extension TimestreamQueryClientTypes {

    /// The timeseries data type represents the values of a measure over time. A time series is an array of rows of timestamps and measure values, with rows sorted in ascending order of time. A TimeSeriesDataPoint is a single data point in the time series. It represents a tuple of (time, measure value) in a time series.
    public struct TimeSeriesDataPoint: Swift.Sendable {
        /// The timestamp when the measure value was collected.
        /// This member is required.
        public var time: Swift.String?
        /// The measure value for the data point.
        /// This member is required.
        public var value: TimestreamQueryClientTypes.Datum?

        public init(
            time: Swift.String? = nil,
            value: TimestreamQueryClientTypes.Datum? = nil
        )
        {
            self.time = time
            self.value = value
        }
    }
}

extension TimestreamQueryClientTypes {

    /// Represents a single row in the query results.
    public struct Row: Swift.Sendable {
        /// List of data points in a single row of the result set.
        /// This member is required.
        public var data: [TimestreamQueryClientTypes.Datum]?

        public init(
            data: [TimestreamQueryClientTypes.Datum]? = nil
        )
        {
            self.data = data
        }
    }
}

public struct QueryOutput: Swift.Sendable {
    /// The column data types of the returned result set.
    /// This member is required.
    public var columnInfo: [TimestreamQueryClientTypes.ColumnInfo]?
    /// A pagination token that can be used again on a Query call to get the next set of results.
    public var nextToken: Swift.String?
    /// A unique ID for the given query.
    /// This member is required.
    public var queryId: Swift.String?
    /// Encapsulates QueryInsights containing insights and metrics related to the query that you executed.
    public var queryInsightsResponse: TimestreamQueryClientTypes.QueryInsightsResponse?
    /// Information about the status of the query, including progress and bytes scanned.
    public var queryStatus: TimestreamQueryClientTypes.QueryStatus?
    /// The result set rows returned by the query.
    /// This member is required.
    public var rows: [TimestreamQueryClientTypes.Row]?

    public init(
        columnInfo: [TimestreamQueryClientTypes.ColumnInfo]? = nil,
        nextToken: Swift.String? = nil,
        queryId: Swift.String? = nil,
        queryInsightsResponse: TimestreamQueryClientTypes.QueryInsightsResponse? = nil,
        queryStatus: TimestreamQueryClientTypes.QueryStatus? = nil,
        rows: [TimestreamQueryClientTypes.Row]? = nil
    )
    {
        self.columnInfo = columnInfo
        self.nextToken = nextToken
        self.queryId = queryId
        self.queryInsightsResponse = queryInsightsResponse
        self.queryStatus = queryStatus
        self.rows = rows
    }
}

public struct PrepareQueryOutput: Swift.Sendable {
    /// A list of SELECT clause columns of the submitted query string.
    /// This member is required.
    public var columns: [TimestreamQueryClientTypes.SelectColumn]?
    /// A list of parameters used in the submitted query string.
    /// This member is required.
    public var parameters: [TimestreamQueryClientTypes.ParameterMapping]?
    /// The query string that you want prepare.
    /// This member is required.
    public var queryString: Swift.String?

    public init(
        columns: [TimestreamQueryClientTypes.SelectColumn]? = nil,
        parameters: [TimestreamQueryClientTypes.ParameterMapping]? = nil,
        queryString: Swift.String? = nil
    )
    {
        self.columns = columns
        self.parameters = parameters
        self.queryString = queryString
    }
}

extension PrepareQueryOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PrepareQueryOutput(columns: \(Swift.String(describing: columns)), parameters: \(Swift.String(describing: parameters)), queryString: \"CONTENT_REDACTED\")"}
}

extension CancelQueryInput {

    static func urlPathProvider(_ value: CancelQueryInput) -> Swift.String? {
        return "/"
    }
}

extension CreateScheduledQueryInput {

    static func urlPathProvider(_ value: CreateScheduledQueryInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteScheduledQueryInput {

    static func urlPathProvider(_ value: DeleteScheduledQueryInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAccountSettingsInput {

    static func urlPathProvider(_ value: DescribeAccountSettingsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEndpointsInput {

    static func urlPathProvider(_ value: DescribeEndpointsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeScheduledQueryInput {

    static func urlPathProvider(_ value: DescribeScheduledQueryInput) -> Swift.String? {
        return "/"
    }
}

extension ExecuteScheduledQueryInput {

    static func urlPathProvider(_ value: ExecuteScheduledQueryInput) -> Swift.String? {
        return "/"
    }
}

extension ListScheduledQueriesInput {

    static func urlPathProvider(_ value: ListScheduledQueriesInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension PrepareQueryInput {

    static func urlPathProvider(_ value: PrepareQueryInput) -> Swift.String? {
        return "/"
    }
}

extension QueryInput {

    static func urlPathProvider(_ value: QueryInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateAccountSettingsInput {

    static func urlPathProvider(_ value: UpdateAccountSettingsInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateScheduledQueryInput {

    static func urlPathProvider(_ value: UpdateScheduledQueryInput) -> Swift.String? {
        return "/"
    }
}

extension CancelQueryInput {

    static func write(value: CancelQueryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["QueryId"].write(value.queryId)
    }
}

extension CreateScheduledQueryInput {

    static func write(value: CreateScheduledQueryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["ErrorReportConfiguration"].write(value.errorReportConfiguration, with: TimestreamQueryClientTypes.ErrorReportConfiguration.write(value:to:))
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["Name"].write(value.name)
        try writer["NotificationConfiguration"].write(value.notificationConfiguration, with: TimestreamQueryClientTypes.NotificationConfiguration.write(value:to:))
        try writer["QueryString"].write(value.queryString)
        try writer["ScheduleConfiguration"].write(value.scheduleConfiguration, with: TimestreamQueryClientTypes.ScheduleConfiguration.write(value:to:))
        try writer["ScheduledQueryExecutionRoleArn"].write(value.scheduledQueryExecutionRoleArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: TimestreamQueryClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TargetConfiguration"].write(value.targetConfiguration, with: TimestreamQueryClientTypes.TargetConfiguration.write(value:to:))
    }
}

extension DeleteScheduledQueryInput {

    static func write(value: DeleteScheduledQueryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ScheduledQueryArn"].write(value.scheduledQueryArn)
    }
}

extension DescribeAccountSettingsInput {

    static func write(value: DescribeAccountSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension DescribeEndpointsInput {

    static func write(value: DescribeEndpointsInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension DescribeScheduledQueryInput {

    static func write(value: DescribeScheduledQueryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ScheduledQueryArn"].write(value.scheduledQueryArn)
    }
}

extension ExecuteScheduledQueryInput {

    static func write(value: ExecuteScheduledQueryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["InvocationTime"].writeTimestamp(value.invocationTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["QueryInsights"].write(value.queryInsights, with: TimestreamQueryClientTypes.ScheduledQueryInsights.write(value:to:))
        try writer["ScheduledQueryArn"].write(value.scheduledQueryArn)
    }
}

extension ListScheduledQueriesInput {

    static func write(value: ListScheduledQueriesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ResourceARN"].write(value.resourceARN)
    }
}

extension PrepareQueryInput {

    static func write(value: PrepareQueryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["QueryString"].write(value.queryString)
        try writer["ValidateOnly"].write(value.validateOnly)
    }
}

extension QueryInput {

    static func write(value: QueryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["MaxRows"].write(value.maxRows)
        try writer["NextToken"].write(value.nextToken)
        try writer["QueryInsights"].write(value.queryInsights, with: TimestreamQueryClientTypes.QueryInsights.write(value:to:))
        try writer["QueryString"].write(value.queryString)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: TimestreamQueryClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateAccountSettingsInput {

    static func write(value: UpdateAccountSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxQueryTCU"].write(value.maxQueryTCU)
        try writer["QueryPricingModel"].write(value.queryPricingModel)
    }
}

extension UpdateScheduledQueryInput {

    static func write(value: UpdateScheduledQueryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ScheduledQueryArn"].write(value.scheduledQueryArn)
        try writer["State"].write(value.state)
    }
}

extension CancelQueryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelQueryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CancelQueryOutput()
        value.cancellationMessage = try reader["CancellationMessage"].readIfPresent()
        return value
    }
}

extension CreateScheduledQueryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateScheduledQueryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateScheduledQueryOutput()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        return value
    }
}

extension DeleteScheduledQueryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteScheduledQueryOutput {
        return DeleteScheduledQueryOutput()
    }
}

extension DescribeAccountSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAccountSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAccountSettingsOutput()
        value.maxQueryTCU = try reader["MaxQueryTCU"].readIfPresent()
        value.queryPricingModel = try reader["QueryPricingModel"].readIfPresent()
        return value
    }
}

extension DescribeEndpointsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEndpointsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEndpointsOutput()
        value.endpoints = try reader["Endpoints"].readListIfPresent(memberReadingClosure: TimestreamQueryClientTypes.Endpoint.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension DescribeScheduledQueryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeScheduledQueryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeScheduledQueryOutput()
        value.scheduledQuery = try reader["ScheduledQuery"].readIfPresent(with: TimestreamQueryClientTypes.ScheduledQueryDescription.read(from:))
        return value
    }
}

extension ExecuteScheduledQueryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExecuteScheduledQueryOutput {
        return ExecuteScheduledQueryOutput()
    }
}

extension ListScheduledQueriesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListScheduledQueriesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListScheduledQueriesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.scheduledQueries = try reader["ScheduledQueries"].readListIfPresent(memberReadingClosure: TimestreamQueryClientTypes.ScheduledQuery.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: TimestreamQueryClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension PrepareQueryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PrepareQueryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PrepareQueryOutput()
        value.columns = try reader["Columns"].readListIfPresent(memberReadingClosure: TimestreamQueryClientTypes.SelectColumn.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: TimestreamQueryClientTypes.ParameterMapping.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.queryString = try reader["QueryString"].readIfPresent() ?? ""
        return value
    }
}

extension QueryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> QueryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = QueryOutput()
        value.columnInfo = try reader["ColumnInfo"].readListIfPresent(memberReadingClosure: TimestreamQueryClientTypes.ColumnInfo.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.queryId = try reader["QueryId"].readIfPresent() ?? ""
        value.queryInsightsResponse = try reader["QueryInsightsResponse"].readIfPresent(with: TimestreamQueryClientTypes.QueryInsightsResponse.read(from:))
        value.queryStatus = try reader["QueryStatus"].readIfPresent(with: TimestreamQueryClientTypes.QueryStatus.read(from:))
        value.rows = try reader["Rows"].readListIfPresent(memberReadingClosure: TimestreamQueryClientTypes.Row.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateAccountSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAccountSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAccountSettingsOutput()
        value.maxQueryTCU = try reader["MaxQueryTCU"].readIfPresent()
        value.queryPricingModel = try reader["QueryPricingModel"].readIfPresent()
        return value
    }
}

extension UpdateScheduledQueryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateScheduledQueryOutput {
        return UpdateScheduledQueryOutput()
    }
}

enum CancelQueryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDenied": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateScheduledQueryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDenied": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteScheduledQueryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDenied": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAccountSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDenied": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEndpointsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeScheduledQueryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDenied": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExecuteScheduledQueryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDenied": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListScheduledQueriesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDenied": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PrepareQueryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDenied": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum QueryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDenied": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "QueryExecutionException": return try QueryExecutionException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAccountSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDenied": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateScheduledQueryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDenied": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidEndpointException": return try InvalidEndpointException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidEndpointException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidEndpointException {
        let reader = baseError.errorBodyReader
        var value = InvalidEndpointException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.scheduledQueryArn = try reader["ScheduledQueryArn"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension QueryExecutionException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> QueryExecutionException {
        let reader = baseError.errorBodyReader
        var value = QueryExecutionException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TimestreamQueryClientTypes.Endpoint {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.Endpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.Endpoint()
        value.address = try reader["Address"].readIfPresent() ?? ""
        value.cachePeriodInMinutes = try reader["CachePeriodInMinutes"].readIfPresent() ?? 0
        return value
    }
}

extension TimestreamQueryClientTypes.ScheduledQueryDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.ScheduledQueryDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.ScheduledQueryDescription()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.queryString = try reader["QueryString"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.state = try reader["State"].readIfPresent() ?? .sdkUnknown("")
        value.previousInvocationTime = try reader["PreviousInvocationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.nextInvocationTime = try reader["NextInvocationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.scheduleConfiguration = try reader["ScheduleConfiguration"].readIfPresent(with: TimestreamQueryClientTypes.ScheduleConfiguration.read(from:))
        value.notificationConfiguration = try reader["NotificationConfiguration"].readIfPresent(with: TimestreamQueryClientTypes.NotificationConfiguration.read(from:))
        value.targetConfiguration = try reader["TargetConfiguration"].readIfPresent(with: TimestreamQueryClientTypes.TargetConfiguration.read(from:))
        value.scheduledQueryExecutionRoleArn = try reader["ScheduledQueryExecutionRoleArn"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.errorReportConfiguration = try reader["ErrorReportConfiguration"].readIfPresent(with: TimestreamQueryClientTypes.ErrorReportConfiguration.read(from:))
        value.lastRunSummary = try reader["LastRunSummary"].readIfPresent(with: TimestreamQueryClientTypes.ScheduledQueryRunSummary.read(from:))
        value.recentlyFailedRuns = try reader["RecentlyFailedRuns"].readListIfPresent(memberReadingClosure: TimestreamQueryClientTypes.ScheduledQueryRunSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TimestreamQueryClientTypes.ScheduledQueryRunSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.ScheduledQueryRunSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.ScheduledQueryRunSummary()
        value.invocationTime = try reader["InvocationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.triggerTime = try reader["TriggerTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.runStatus = try reader["RunStatus"].readIfPresent()
        value.executionStats = try reader["ExecutionStats"].readIfPresent(with: TimestreamQueryClientTypes.ExecutionStats.read(from:))
        value.queryInsightsResponse = try reader["QueryInsightsResponse"].readIfPresent(with: TimestreamQueryClientTypes.ScheduledQueryInsightsResponse.read(from:))
        value.errorReportLocation = try reader["ErrorReportLocation"].readIfPresent(with: TimestreamQueryClientTypes.ErrorReportLocation.read(from:))
        value.failureReason = try reader["FailureReason"].readIfPresent()
        return value
    }
}

extension TimestreamQueryClientTypes.ErrorReportLocation {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.ErrorReportLocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.ErrorReportLocation()
        value.s3ReportLocation = try reader["S3ReportLocation"].readIfPresent(with: TimestreamQueryClientTypes.S3ReportLocation.read(from:))
        return value
    }
}

extension TimestreamQueryClientTypes.S3ReportLocation {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.S3ReportLocation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.S3ReportLocation()
        value.bucketName = try reader["BucketName"].readIfPresent()
        value.objectKey = try reader["ObjectKey"].readIfPresent()
        return value
    }
}

extension TimestreamQueryClientTypes.ScheduledQueryInsightsResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.ScheduledQueryInsightsResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.ScheduledQueryInsightsResponse()
        value.querySpatialCoverage = try reader["QuerySpatialCoverage"].readIfPresent(with: TimestreamQueryClientTypes.QuerySpatialCoverage.read(from:))
        value.queryTemporalRange = try reader["QueryTemporalRange"].readIfPresent(with: TimestreamQueryClientTypes.QueryTemporalRange.read(from:))
        value.queryTableCount = try reader["QueryTableCount"].readIfPresent()
        value.outputRows = try reader["OutputRows"].readIfPresent()
        value.outputBytes = try reader["OutputBytes"].readIfPresent()
        return value
    }
}

extension TimestreamQueryClientTypes.QueryTemporalRange {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.QueryTemporalRange {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.QueryTemporalRange()
        value.max = try reader["Max"].readIfPresent(with: TimestreamQueryClientTypes.QueryTemporalRangeMax.read(from:))
        return value
    }
}

extension TimestreamQueryClientTypes.QueryTemporalRangeMax {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.QueryTemporalRangeMax {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.QueryTemporalRangeMax()
        value.value = try reader["Value"].readIfPresent() ?? 0
        value.tableArn = try reader["TableArn"].readIfPresent()
        return value
    }
}

extension TimestreamQueryClientTypes.QuerySpatialCoverage {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.QuerySpatialCoverage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.QuerySpatialCoverage()
        value.max = try reader["Max"].readIfPresent(with: TimestreamQueryClientTypes.QuerySpatialCoverageMax.read(from:))
        return value
    }
}

extension TimestreamQueryClientTypes.QuerySpatialCoverageMax {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.QuerySpatialCoverageMax {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.QuerySpatialCoverageMax()
        value.value = try reader["Value"].readIfPresent() ?? 0
        value.tableArn = try reader["TableArn"].readIfPresent()
        value.partitionKey = try reader["PartitionKey"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TimestreamQueryClientTypes.ExecutionStats {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.ExecutionStats {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.ExecutionStats()
        value.executionTimeInMillis = try reader["ExecutionTimeInMillis"].readIfPresent() ?? 0
        value.dataWrites = try reader["DataWrites"].readIfPresent() ?? 0
        value.bytesMetered = try reader["BytesMetered"].readIfPresent() ?? 0
        value.cumulativeBytesScanned = try reader["CumulativeBytesScanned"].readIfPresent() ?? 0
        value.recordsIngested = try reader["RecordsIngested"].readIfPresent() ?? 0
        value.queryResultRows = try reader["QueryResultRows"].readIfPresent() ?? 0
        return value
    }
}

extension TimestreamQueryClientTypes.ErrorReportConfiguration {

    static func write(value: TimestreamQueryClientTypes.ErrorReportConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Configuration"].write(value.s3Configuration, with: TimestreamQueryClientTypes.S3Configuration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.ErrorReportConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.ErrorReportConfiguration()
        value.s3Configuration = try reader["S3Configuration"].readIfPresent(with: TimestreamQueryClientTypes.S3Configuration.read(from:))
        return value
    }
}

extension TimestreamQueryClientTypes.S3Configuration {

    static func write(value: TimestreamQueryClientTypes.S3Configuration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BucketName"].write(value.bucketName)
        try writer["EncryptionOption"].write(value.encryptionOption)
        try writer["ObjectKeyPrefix"].write(value.objectKeyPrefix)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.S3Configuration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.S3Configuration()
        value.bucketName = try reader["BucketName"].readIfPresent() ?? ""
        value.objectKeyPrefix = try reader["ObjectKeyPrefix"].readIfPresent()
        value.encryptionOption = try reader["EncryptionOption"].readIfPresent()
        return value
    }
}

extension TimestreamQueryClientTypes.TargetConfiguration {

    static func write(value: TimestreamQueryClientTypes.TargetConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TimestreamConfiguration"].write(value.timestreamConfiguration, with: TimestreamQueryClientTypes.TimestreamConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.TargetConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.TargetConfiguration()
        value.timestreamConfiguration = try reader["TimestreamConfiguration"].readIfPresent(with: TimestreamQueryClientTypes.TimestreamConfiguration.read(from:))
        return value
    }
}

extension TimestreamQueryClientTypes.TimestreamConfiguration {

    static func write(value: TimestreamQueryClientTypes.TimestreamConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DatabaseName"].write(value.databaseName)
        try writer["DimensionMappings"].writeList(value.dimensionMappings, memberWritingClosure: TimestreamQueryClientTypes.DimensionMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MeasureNameColumn"].write(value.measureNameColumn)
        try writer["MixedMeasureMappings"].writeList(value.mixedMeasureMappings, memberWritingClosure: TimestreamQueryClientTypes.MixedMeasureMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MultiMeasureMappings"].write(value.multiMeasureMappings, with: TimestreamQueryClientTypes.MultiMeasureMappings.write(value:to:))
        try writer["TableName"].write(value.tableName)
        try writer["TimeColumn"].write(value.timeColumn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.TimestreamConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.TimestreamConfiguration()
        value.databaseName = try reader["DatabaseName"].readIfPresent() ?? ""
        value.tableName = try reader["TableName"].readIfPresent() ?? ""
        value.timeColumn = try reader["TimeColumn"].readIfPresent() ?? ""
        value.dimensionMappings = try reader["DimensionMappings"].readListIfPresent(memberReadingClosure: TimestreamQueryClientTypes.DimensionMapping.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.multiMeasureMappings = try reader["MultiMeasureMappings"].readIfPresent(with: TimestreamQueryClientTypes.MultiMeasureMappings.read(from:))
        value.mixedMeasureMappings = try reader["MixedMeasureMappings"].readListIfPresent(memberReadingClosure: TimestreamQueryClientTypes.MixedMeasureMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.measureNameColumn = try reader["MeasureNameColumn"].readIfPresent()
        return value
    }
}

extension TimestreamQueryClientTypes.MixedMeasureMapping {

    static func write(value: TimestreamQueryClientTypes.MixedMeasureMapping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MeasureName"].write(value.measureName)
        try writer["MeasureValueType"].write(value.measureValueType)
        try writer["MultiMeasureAttributeMappings"].writeList(value.multiMeasureAttributeMappings, memberWritingClosure: TimestreamQueryClientTypes.MultiMeasureAttributeMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SourceColumn"].write(value.sourceColumn)
        try writer["TargetMeasureName"].write(value.targetMeasureName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.MixedMeasureMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.MixedMeasureMapping()
        value.measureName = try reader["MeasureName"].readIfPresent()
        value.sourceColumn = try reader["SourceColumn"].readIfPresent()
        value.targetMeasureName = try reader["TargetMeasureName"].readIfPresent()
        value.measureValueType = try reader["MeasureValueType"].readIfPresent() ?? .sdkUnknown("")
        value.multiMeasureAttributeMappings = try reader["MultiMeasureAttributeMappings"].readListIfPresent(memberReadingClosure: TimestreamQueryClientTypes.MultiMeasureAttributeMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TimestreamQueryClientTypes.MultiMeasureAttributeMapping {

    static func write(value: TimestreamQueryClientTypes.MultiMeasureAttributeMapping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MeasureValueType"].write(value.measureValueType)
        try writer["SourceColumn"].write(value.sourceColumn)
        try writer["TargetMultiMeasureAttributeName"].write(value.targetMultiMeasureAttributeName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.MultiMeasureAttributeMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.MultiMeasureAttributeMapping()
        value.sourceColumn = try reader["SourceColumn"].readIfPresent() ?? ""
        value.targetMultiMeasureAttributeName = try reader["TargetMultiMeasureAttributeName"].readIfPresent()
        value.measureValueType = try reader["MeasureValueType"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension TimestreamQueryClientTypes.MultiMeasureMappings {

    static func write(value: TimestreamQueryClientTypes.MultiMeasureMappings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MultiMeasureAttributeMappings"].writeList(value.multiMeasureAttributeMappings, memberWritingClosure: TimestreamQueryClientTypes.MultiMeasureAttributeMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TargetMultiMeasureName"].write(value.targetMultiMeasureName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.MultiMeasureMappings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.MultiMeasureMappings()
        value.targetMultiMeasureName = try reader["TargetMultiMeasureName"].readIfPresent()
        value.multiMeasureAttributeMappings = try reader["MultiMeasureAttributeMappings"].readListIfPresent(memberReadingClosure: TimestreamQueryClientTypes.MultiMeasureAttributeMapping.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension TimestreamQueryClientTypes.DimensionMapping {

    static func write(value: TimestreamQueryClientTypes.DimensionMapping?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DimensionValueType"].write(value.dimensionValueType)
        try writer["Name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.DimensionMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.DimensionMapping()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.dimensionValueType = try reader["DimensionValueType"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension TimestreamQueryClientTypes.NotificationConfiguration {

    static func write(value: TimestreamQueryClientTypes.NotificationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SnsConfiguration"].write(value.snsConfiguration, with: TimestreamQueryClientTypes.SnsConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.NotificationConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.NotificationConfiguration()
        value.snsConfiguration = try reader["SnsConfiguration"].readIfPresent(with: TimestreamQueryClientTypes.SnsConfiguration.read(from:))
        return value
    }
}

extension TimestreamQueryClientTypes.SnsConfiguration {

    static func write(value: TimestreamQueryClientTypes.SnsConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TopicArn"].write(value.topicArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.SnsConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.SnsConfiguration()
        value.topicArn = try reader["TopicArn"].readIfPresent() ?? ""
        return value
    }
}

extension TimestreamQueryClientTypes.ScheduleConfiguration {

    static func write(value: TimestreamQueryClientTypes.ScheduleConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ScheduleExpression"].write(value.scheduleExpression)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.ScheduleConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.ScheduleConfiguration()
        value.scheduleExpression = try reader["ScheduleExpression"].readIfPresent() ?? ""
        return value
    }
}

extension TimestreamQueryClientTypes.ScheduledQuery {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.ScheduledQuery {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.ScheduledQuery()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.state = try reader["State"].readIfPresent() ?? .sdkUnknown("")
        value.previousInvocationTime = try reader["PreviousInvocationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.nextInvocationTime = try reader["NextInvocationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.errorReportConfiguration = try reader["ErrorReportConfiguration"].readIfPresent(with: TimestreamQueryClientTypes.ErrorReportConfiguration.read(from:))
        value.targetDestination = try reader["TargetDestination"].readIfPresent(with: TimestreamQueryClientTypes.TargetDestination.read(from:))
        value.lastRunStatus = try reader["LastRunStatus"].readIfPresent()
        return value
    }
}

extension TimestreamQueryClientTypes.TargetDestination {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.TargetDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.TargetDestination()
        value.timestreamDestination = try reader["TimestreamDestination"].readIfPresent(with: TimestreamQueryClientTypes.TimestreamDestination.read(from:))
        return value
    }
}

extension TimestreamQueryClientTypes.TimestreamDestination {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.TimestreamDestination {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.TimestreamDestination()
        value.databaseName = try reader["DatabaseName"].readIfPresent()
        value.tableName = try reader["TableName"].readIfPresent()
        return value
    }
}

extension TimestreamQueryClientTypes.Tag {

    static func write(value: TimestreamQueryClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension TimestreamQueryClientTypes.SelectColumn {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.SelectColumn {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.SelectColumn()
        value.name = try reader["Name"].readIfPresent()
        value.type = try reader["Type"].readIfPresent(with: TimestreamQueryClientTypes.ModelType.read(from:))
        value.databaseName = try reader["DatabaseName"].readIfPresent()
        value.tableName = try reader["TableName"].readIfPresent()
        value.aliased = try reader["Aliased"].readIfPresent()
        return value
    }
}

extension TimestreamQueryClientTypes.ModelType {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.ModelType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.ModelType()
        value.scalarType = try reader["ScalarType"].readIfPresent()
        value.arrayColumnInfo = try reader["ArrayColumnInfo"].readIfPresent(with: TimestreamQueryClientTypes.ColumnInfo.read(from:))
        value.timeSeriesMeasureValueColumnInfo = try reader["TimeSeriesMeasureValueColumnInfo"].readIfPresent(with: TimestreamQueryClientTypes.ColumnInfo.read(from:))
        value.rowColumnInfo = try reader["RowColumnInfo"].readListIfPresent(memberReadingClosure: TimestreamQueryClientTypes.ColumnInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TimestreamQueryClientTypes.ColumnInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.ColumnInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.ColumnInfo()
        value.name = try reader["Name"].readIfPresent()
        value.type = try reader["Type"].readIfPresent(with: TimestreamQueryClientTypes.ModelType.read(from:))
        return value
    }
}

extension TimestreamQueryClientTypes.ParameterMapping {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.ParameterMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.ParameterMapping()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.type = try reader["Type"].readIfPresent(with: TimestreamQueryClientTypes.ModelType.read(from:))
        return value
    }
}

extension TimestreamQueryClientTypes.Row {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.Row {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.Row()
        value.data = try reader["Data"].readListIfPresent(memberReadingClosure: TimestreamQueryClientTypes.Datum.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension TimestreamQueryClientTypes.Datum {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.Datum {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.Datum()
        value.scalarValue = try reader["ScalarValue"].readIfPresent()
        value.timeSeriesValue = try reader["TimeSeriesValue"].readListIfPresent(memberReadingClosure: TimestreamQueryClientTypes.TimeSeriesDataPoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.arrayValue = try reader["ArrayValue"].readListIfPresent(memberReadingClosure: TimestreamQueryClientTypes.Datum.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.rowValue = try reader["RowValue"].readIfPresent(with: TimestreamQueryClientTypes.Row.read(from:))
        value.nullValue = try reader["NullValue"].readIfPresent()
        return value
    }
}

extension TimestreamQueryClientTypes.TimeSeriesDataPoint {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.TimeSeriesDataPoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.TimeSeriesDataPoint()
        value.time = try reader["Time"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent(with: TimestreamQueryClientTypes.Datum.read(from:))
        return value
    }
}

extension TimestreamQueryClientTypes.QueryStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.QueryStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.QueryStatus()
        value.progressPercentage = try reader["ProgressPercentage"].readIfPresent() ?? 0
        value.cumulativeBytesScanned = try reader["CumulativeBytesScanned"].readIfPresent() ?? 0
        value.cumulativeBytesMetered = try reader["CumulativeBytesMetered"].readIfPresent() ?? 0
        return value
    }
}

extension TimestreamQueryClientTypes.QueryInsightsResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> TimestreamQueryClientTypes.QueryInsightsResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = TimestreamQueryClientTypes.QueryInsightsResponse()
        value.querySpatialCoverage = try reader["QuerySpatialCoverage"].readIfPresent(with: TimestreamQueryClientTypes.QuerySpatialCoverage.read(from:))
        value.queryTemporalRange = try reader["QueryTemporalRange"].readIfPresent(with: TimestreamQueryClientTypes.QueryTemporalRange.read(from:))
        value.queryTableCount = try reader["QueryTableCount"].readIfPresent()
        value.outputRows = try reader["OutputRows"].readIfPresent()
        value.outputBytes = try reader["OutputBytes"].readIfPresent()
        value.unloadPartitionCount = try reader["UnloadPartitionCount"].readIfPresent()
        value.unloadWrittenRows = try reader["UnloadWrittenRows"].readIfPresent()
        value.unloadWrittenBytes = try reader["UnloadWrittenBytes"].readIfPresent()
        return value
    }
}

extension TimestreamQueryClientTypes.ScheduledQueryInsights {

    static func write(value: TimestreamQueryClientTypes.ScheduledQueryInsights?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Mode"].write(value.mode)
    }
}

extension TimestreamQueryClientTypes.QueryInsights {

    static func write(value: TimestreamQueryClientTypes.QueryInsights?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Mode"].write(value.mode)
    }
}

public enum TimestreamQueryClientTypes {}
