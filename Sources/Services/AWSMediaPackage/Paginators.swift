// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListChannelsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListChannelsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListChannelsOutputResponse`
extension MediaPackageClient {
    public func listChannelsPaginated(input: ListChannelsInput) -> ClientRuntime.PaginatorSequence<ListChannelsInput, ListChannelsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListChannelsInput, ListChannelsOutputResponse>(input: input, inputKey: \ListChannelsInput.nextToken, outputKey: \ListChannelsOutputResponse.nextToken, paginationFunction: self.listChannels(input:))
    }
}

extension ListChannelsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListChannelsInput {
        return ListChannelsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listChannelsPaginated`
/// to access the nested member `[MediaPackageClientTypes.Channel]`
/// - Returns: `[MediaPackageClientTypes.Channel]`
extension PaginatorSequence where Input == ListChannelsInput, Output == ListChannelsOutputResponse {
    public func channels() async throws -> [MediaPackageClientTypes.Channel] {
        return try await self.asyncCompactMap { item in item.channels }
    }
}

/// Paginate over `[ListHarvestJobsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListHarvestJobsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListHarvestJobsOutputResponse`
extension MediaPackageClient {
    public func listHarvestJobsPaginated(input: ListHarvestJobsInput) -> ClientRuntime.PaginatorSequence<ListHarvestJobsInput, ListHarvestJobsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListHarvestJobsInput, ListHarvestJobsOutputResponse>(input: input, inputKey: \ListHarvestJobsInput.nextToken, outputKey: \ListHarvestJobsOutputResponse.nextToken, paginationFunction: self.listHarvestJobs(input:))
    }
}

extension ListHarvestJobsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListHarvestJobsInput {
        return ListHarvestJobsInput(
            includeChannelId: self.includeChannelId,
            includeStatus: self.includeStatus,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listHarvestJobsPaginated`
/// to access the nested member `[MediaPackageClientTypes.HarvestJob]`
/// - Returns: `[MediaPackageClientTypes.HarvestJob]`
extension PaginatorSequence where Input == ListHarvestJobsInput, Output == ListHarvestJobsOutputResponse {
    public func harvestJobs() async throws -> [MediaPackageClientTypes.HarvestJob] {
        return try await self.asyncCompactMap { item in item.harvestJobs }
    }
}

/// Paginate over `[ListOriginEndpointsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListOriginEndpointsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListOriginEndpointsOutputResponse`
extension MediaPackageClient {
    public func listOriginEndpointsPaginated(input: ListOriginEndpointsInput) -> ClientRuntime.PaginatorSequence<ListOriginEndpointsInput, ListOriginEndpointsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListOriginEndpointsInput, ListOriginEndpointsOutputResponse>(input: input, inputKey: \ListOriginEndpointsInput.nextToken, outputKey: \ListOriginEndpointsOutputResponse.nextToken, paginationFunction: self.listOriginEndpoints(input:))
    }
}

extension ListOriginEndpointsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListOriginEndpointsInput {
        return ListOriginEndpointsInput(
            channelId: self.channelId,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listOriginEndpointsPaginated`
/// to access the nested member `[MediaPackageClientTypes.OriginEndpoint]`
/// - Returns: `[MediaPackageClientTypes.OriginEndpoint]`
extension PaginatorSequence where Input == ListOriginEndpointsInput, Output == ListOriginEndpointsOutputResponse {
    public func originEndpoints() async throws -> [MediaPackageClientTypes.OriginEndpoint] {
        return try await self.asyncCompactMap { item in item.originEndpoints }
    }
}
