//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
@_spi(SmithyReadWrite) import class SmithyFormURL.Writer
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyXML.Reader
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.timestampReadingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSQueryError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter


public struct AttachInstancesOutput: Swift.Sendable {

    public init() { }
}

public struct CreateAutoScalingGroupOutput: Swift.Sendable {

    public init() { }
}

public struct CreateLaunchConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct CreateOrUpdateTagsOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteAutoScalingGroupOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteLaunchConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteNotificationConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct DeletePolicyOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteScheduledActionOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteTagsOutput: Swift.Sendable {

    public init() { }
}

public struct DescribeAccountLimitsInput: Swift.Sendable {

    public init() { }
}

public struct DescribeAdjustmentTypesInput: Swift.Sendable {

    public init() { }
}

public struct DescribeAutoScalingNotificationTypesInput: Swift.Sendable {

    public init() { }
}

public struct DescribeLifecycleHookTypesInput: Swift.Sendable {

    public init() { }
}

public struct DescribeMetricCollectionTypesInput: Swift.Sendable {

    public init() { }
}

public struct DescribeScalingProcessTypesInput: Swift.Sendable {

    public init() { }
}

public struct DescribeTerminationPolicyTypesInput: Swift.Sendable {

    public init() { }
}

public struct DisableMetricsCollectionOutput: Swift.Sendable {

    public init() { }
}

public struct EnableMetricsCollectionOutput: Swift.Sendable {

    public init() { }
}

public struct ExecutePolicyOutput: Swift.Sendable {

    public init() { }
}

public struct PutNotificationConfigurationOutput: Swift.Sendable {

    public init() { }
}

public struct PutScheduledUpdateGroupActionOutput: Swift.Sendable {

    public init() { }
}

public struct ResumeProcessesOutput: Swift.Sendable {

    public init() { }
}

public struct SetDesiredCapacityOutput: Swift.Sendable {

    public init() { }
}

public struct SetInstanceHealthOutput: Swift.Sendable {

    public init() { }
}

public struct SuspendProcessesOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateAutoScalingGroupOutput: Swift.Sendable {

    public init() { }
}

extension AutoScalingClientTypes {

    /// Specifies the minimum and maximum for the AcceleratorCount object when you specify [InstanceRequirements](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_InstanceRequirements.html) for an Auto Scaling group.
    public struct AcceleratorCountRequest: Swift.Sendable {
        /// The maximum value.
        public var max: Swift.Int?
        /// The minimum value.
        public var min: Swift.Int?

        public init(
            max: Swift.Int? = nil,
            min: Swift.Int? = nil
        )
        {
            self.max = max
            self.min = min
        }
    }
}

extension AutoScalingClientTypes {

    public enum AcceleratorManufacturer: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case amazonWebServices
        case amd
        case nvidia
        case xilinx
        case sdkUnknown(Swift.String)

        public static var allCases: [AcceleratorManufacturer] {
            return [
                .amazonWebServices,
                .amd,
                .nvidia,
                .xilinx
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .amazonWebServices: return "amazon-web-services"
            case .amd: return "amd"
            case .nvidia: return "nvidia"
            case .xilinx: return "xilinx"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    public enum AcceleratorName: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case a100
        case k80
        case m60
        case radeonProV520
        case t4
        case v100
        case vu9p
        case sdkUnknown(Swift.String)

        public static var allCases: [AcceleratorName] {
            return [
                .a100,
                .k80,
                .m60,
                .radeonProV520,
                .t4,
                .v100,
                .vu9p
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .a100: return "a100"
            case .k80: return "k80"
            case .m60: return "m60"
            case .radeonProV520: return "radeon-pro-v520"
            case .t4: return "t4"
            case .v100: return "v100"
            case .vu9p: return "vu9p"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    /// Specifies the minimum and maximum for the AcceleratorTotalMemoryMiB object when you specify [InstanceRequirements](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_InstanceRequirements.html) for an Auto Scaling group.
    public struct AcceleratorTotalMemoryMiBRequest: Swift.Sendable {
        /// The memory maximum in MiB.
        public var max: Swift.Int?
        /// The memory minimum in MiB.
        public var min: Swift.Int?

        public init(
            max: Swift.Int? = nil,
            min: Swift.Int? = nil
        )
        {
            self.max = max
            self.min = min
        }
    }
}

extension AutoScalingClientTypes {

    public enum AcceleratorType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fpga
        case gpu
        case inference
        case sdkUnknown(Swift.String)

        public static var allCases: [AcceleratorType] {
            return [
                .fpga,
                .gpu,
                .inference
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fpga: return "fpga"
            case .gpu: return "gpu"
            case .inference: return "inference"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The request failed because an active instance refresh or rollback for the specified Auto Scaling group was not found.
public struct ActiveInstanceRefreshNotFoundFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ActiveInstanceRefreshNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AutoScalingClientTypes {

    public enum ScalingActivityStatusCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case failed
        case inprogress
        case midlifecycleaction
        case pendingspotbidplacement
        case preinservice
        case successful
        case waitingforconnectiondraining
        case waitingforelbconnectiondraining
        case waitingforinstanceid
        case waitingforinstancewarmup
        case waitingforspotinstanceid
        case waitingforspotinstancerequestid
        case sdkUnknown(Swift.String)

        public static var allCases: [ScalingActivityStatusCode] {
            return [
                .cancelled,
                .failed,
                .inprogress,
                .midlifecycleaction,
                .pendingspotbidplacement,
                .preinservice,
                .successful,
                .waitingforconnectiondraining,
                .waitingforelbconnectiondraining,
                .waitingforinstanceid,
                .waitingforinstancewarmup,
                .waitingforspotinstanceid,
                .waitingforspotinstancerequestid
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .midlifecycleaction: return "MidLifecycleAction"
            case .pendingspotbidplacement: return "PendingSpotBidPlacement"
            case .preinservice: return "PreInService"
            case .successful: return "Successful"
            case .waitingforconnectiondraining: return "WaitingForConnectionDraining"
            case .waitingforelbconnectiondraining: return "WaitingForELBConnectionDraining"
            case .waitingforinstanceid: return "WaitingForInstanceId"
            case .waitingforinstancewarmup: return "WaitingForInstanceWarmup"
            case .waitingforspotinstanceid: return "WaitingForSpotInstanceId"
            case .waitingforspotinstancerequestid: return "WaitingForSpotInstanceRequestId"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes scaling activity, which is a long-running process that represents a change to your Auto Scaling group, such as changing its size or replacing an instance.
    public struct Activity: Swift.Sendable {
        /// The ID of the activity.
        /// This member is required.
        public var activityId: Swift.String?
        /// The Amazon Resource Name (ARN) of the Auto Scaling group.
        public var autoScalingGroupARN: Swift.String?
        /// The name of the Auto Scaling group.
        /// This member is required.
        public var autoScalingGroupName: Swift.String?
        /// The state of the Auto Scaling group, which is either InService or Deleted.
        public var autoScalingGroupState: Swift.String?
        /// The reason the activity began.
        /// This member is required.
        public var cause: Swift.String?
        /// A friendly, more verbose description of the activity.
        public var description: Swift.String?
        /// The details about the activity.
        public var details: Swift.String?
        /// The end time of the activity.
        public var endTime: Foundation.Date?
        /// A value between 0 and 100 that indicates the progress of the activity.
        public var progress: Swift.Int?
        /// The start time of the activity.
        /// This member is required.
        public var startTime: Foundation.Date?
        /// The current status of the activity.
        /// This member is required.
        public var statusCode: AutoScalingClientTypes.ScalingActivityStatusCode?
        /// A friendly, more verbose description of the activity status.
        public var statusMessage: Swift.String?

        public init(
            activityId: Swift.String? = nil,
            autoScalingGroupARN: Swift.String? = nil,
            autoScalingGroupName: Swift.String? = nil,
            autoScalingGroupState: Swift.String? = nil,
            cause: Swift.String? = nil,
            description: Swift.String? = nil,
            details: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            progress: Swift.Int? = nil,
            startTime: Foundation.Date? = nil,
            statusCode: AutoScalingClientTypes.ScalingActivityStatusCode? = nil,
            statusMessage: Swift.String? = nil
        )
        {
            self.activityId = activityId
            self.autoScalingGroupARN = autoScalingGroupARN
            self.autoScalingGroupName = autoScalingGroupName
            self.autoScalingGroupState = autoScalingGroupState
            self.cause = cause
            self.description = description
            self.details = details
            self.endTime = endTime
            self.progress = progress
            self.startTime = startTime
            self.statusCode = statusCode
            self.statusMessage = statusMessage
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes a policy adjustment type.
    public struct AdjustmentType: Swift.Sendable {
        /// The policy adjustment type. The valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
        public var adjustmentType: Swift.String?

        public init(
            adjustmentType: Swift.String? = nil
        )
        {
            self.adjustmentType = adjustmentType
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes an alarm.
    public struct Alarm: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the alarm.
        public var alarmARN: Swift.String?
        /// The name of the alarm.
        public var alarmName: Swift.String?

        public init(
            alarmARN: Swift.String? = nil,
            alarmName: Swift.String? = nil
        )
        {
            self.alarmARN = alarmARN
            self.alarmName = alarmName
        }
    }
}

extension AutoScalingClientTypes {

    /// Specifies the CloudWatch alarm specification to use in an instance refresh.
    public struct AlarmSpecification: Swift.Sendable {
        /// The names of one or more CloudWatch alarms to monitor for the instance refresh. You can specify up to 10 alarms.
        public var alarms: [Swift.String]?

        public init(
            alarms: [Swift.String]? = nil
        )
        {
            self.alarms = alarms
        }
    }
}

/// You already have an Auto Scaling group or launch configuration with this name.
public struct AlreadyExistsFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        ///
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AlreadyExists" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// You already have a pending update to an Amazon EC2 Auto Scaling resource (for example, an Auto Scaling group, instance, or load balancer).
public struct ResourceContentionFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        ///
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceContention" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The service-linked role is not yet ready for use.
public struct ServiceLinkedRoleFailure: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceLinkedRoleFailure" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct AttachInstancesInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The IDs of the instances. You can specify up to 20 instances.
    public var instanceIds: [Swift.String]?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        instanceIds: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
    }
}

public struct AttachLoadBalancersInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The names of the load balancers. You can specify up to 10 load balancers.
    /// This member is required.
    public var loadBalancerNames: [Swift.String]?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        loadBalancerNames: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.loadBalancerNames = loadBalancerNames
    }
}

public struct AttachLoadBalancersOutput: Swift.Sendable {

    public init() { }
}

public struct AttachLoadBalancerTargetGroupsInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The Amazon Resource Names (ARNs) of the target groups. You can specify up to 10 target groups. To get the ARN of a target group, use the Elastic Load Balancing [DescribeTargetGroups](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html) API operation.
    /// This member is required.
    public var targetGroupARNs: [Swift.String]?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        targetGroupARNs: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.targetGroupARNs = targetGroupARNs
    }
}

public struct AttachLoadBalancerTargetGroupsOutput: Swift.Sendable {

    public init() { }
}

extension AutoScalingClientTypes {

    /// Identifying information for a traffic source.
    public struct TrafficSourceIdentifier: Swift.Sendable {
        /// Identifies the traffic source. For Application Load Balancers, Gateway Load Balancers, Network Load Balancers, and VPC Lattice, this will be the Amazon Resource Name (ARN) for a target group in this account and Region. For Classic Load Balancers, this will be the name of the Classic Load Balancer in this account and Region. For example:
        ///
        /// * Application Load Balancer ARN: arn:aws:elasticloadbalancing:us-west-2:123456789012:targetgroup/my-targets/1234567890123456
        ///
        /// * Classic Load Balancer name: my-classic-load-balancer
        ///
        /// * VPC Lattice ARN: arn:aws:vpc-lattice:us-west-2:123456789012:targetgroup/tg-1234567890123456
        ///
        ///
        /// To get the ARN of a target group for a Application Load Balancer, Gateway Load Balancer, or Network Load Balancer, or the name of a Classic Load Balancer, use the Elastic Load Balancing [DescribeTargetGroups](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html) and [DescribeLoadBalancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html) API operations. To get the ARN of a target group for VPC Lattice, use the VPC Lattice [GetTargetGroup](https://docs.aws.amazon.com/vpc-lattice/latest/APIReference/API_GetTargetGroup.html) API operation.
        /// This member is required.
        public var identifier: Swift.String?
        /// Provides additional context for the value of Identifier. The following lists the valid values:
        ///
        /// * elb if Identifier is the name of a Classic Load Balancer.
        ///
        /// * elbv2 if Identifier is the ARN of an Application Load Balancer, Gateway Load Balancer, or Network Load Balancer target group.
        ///
        /// * vpc-lattice if Identifier is the ARN of a VPC Lattice target group.
        ///
        ///
        /// Required if the identifier is the name of a Classic Load Balancer.
        public var type: Swift.String?

        public init(
            identifier: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.identifier = identifier
            self.type = type
        }
    }
}

public struct AttachTrafficSourcesInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources.
    /// This member is required.
    public var trafficSources: [AutoScalingClientTypes.TrafficSourceIdentifier]?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        trafficSources: [AutoScalingClientTypes.TrafficSourceIdentifier]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.trafficSources = trafficSources
    }
}

public struct AttachTrafficSourcesOutput: Swift.Sendable {

    public init() { }
}

public struct BatchDeleteScheduledActionInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The names of the scheduled actions to delete. The maximum number allowed is 50.
    /// This member is required.
    public var scheduledActionNames: [Swift.String]?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        scheduledActionNames: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scheduledActionNames = scheduledActionNames
    }
}

extension AutoScalingClientTypes {

    /// Describes a scheduled action that could not be created, updated, or deleted.
    public struct FailedScheduledUpdateGroupActionRequest: Swift.Sendable {
        /// The error code.
        public var errorCode: Swift.String?
        /// The error message accompanying the error code.
        public var errorMessage: Swift.String?
        /// The name of the scheduled action.
        /// This member is required.
        public var scheduledActionName: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            scheduledActionName: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.scheduledActionName = scheduledActionName
        }
    }
}

public struct BatchDeleteScheduledActionOutput: Swift.Sendable {
    /// The names of the scheduled actions that could not be deleted, including an error message.
    public var failedScheduledActions: [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]?

    public init(
        failedScheduledActions: [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]? = nil
    )
    {
        self.failedScheduledActions = failedScheduledActions
    }
}

/// You have already reached a limit for your Amazon EC2 Auto Scaling resources (for example, Auto Scaling groups, launch configurations, or lifecycle hooks). For more information, see [DescribeAccountLimits](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_DescribeAccountLimits.html) in the Amazon EC2 Auto Scaling API Reference.
public struct LimitExceededFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        ///
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AutoScalingClientTypes {

    /// Describes information used for one or more scheduled scaling action updates in a [BatchPutScheduledUpdateGroupAction](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_BatchPutScheduledUpdateGroupAction.html) operation.
    public struct ScheduledUpdateGroupActionRequest: Swift.Sendable {
        /// The desired capacity is the initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain.
        public var desiredCapacity: Swift.Int?
        /// The date and time for the recurring schedule to end, in UTC.
        public var endTime: Foundation.Date?
        /// The maximum size of the Auto Scaling group.
        public var maxSize: Swift.Int?
        /// The minimum size of the Auto Scaling group.
        public var minSize: Swift.Int?
        /// The recurring schedule for the action, in Unix cron syntax format. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, "30 0 1 1,6,12 *"). For more information about this format, see [Crontab](http://crontab.org). When StartTime and EndTime are specified with Recurrence, they form the boundaries of when the recurring action starts and stops. Cron expressions use Universal Coordinated Time (UTC) by default.
        public var recurrence: Swift.String?
        /// The name of the scaling action.
        /// This member is required.
        public var scheduledActionName: Swift.String?
        /// The date and time for the action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, "2019-06-01T00:00:00Z"). If you specify Recurrence and StartTime, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence. If you try to schedule the action in the past, Amazon EC2 Auto Scaling returns an error message.
        public var startTime: Foundation.Date?
        /// Specifies the time zone for a cron expression. If a time zone is not provided, UTC is used by default. Valid values are the canonical names of the IANA time zones, derived from the IANA Time Zone Database (such as Etc/GMT+9 or Pacific/Tahiti). For more information, see [https://en.wikipedia.org/wiki/List_of_tz_database_time_zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
        public var timeZone: Swift.String?

        public init(
            desiredCapacity: Swift.Int? = nil,
            endTime: Foundation.Date? = nil,
            maxSize: Swift.Int? = nil,
            minSize: Swift.Int? = nil,
            recurrence: Swift.String? = nil,
            scheduledActionName: Swift.String? = nil,
            startTime: Foundation.Date? = nil,
            timeZone: Swift.String? = nil
        )
        {
            self.desiredCapacity = desiredCapacity
            self.endTime = endTime
            self.maxSize = maxSize
            self.minSize = minSize
            self.recurrence = recurrence
            self.scheduledActionName = scheduledActionName
            self.startTime = startTime
            self.timeZone = timeZone
        }
    }
}

public struct BatchPutScheduledUpdateGroupActionInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// One or more scheduled actions. The maximum number allowed is 50.
    /// This member is required.
    public var scheduledUpdateGroupActions: [AutoScalingClientTypes.ScheduledUpdateGroupActionRequest]?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        scheduledUpdateGroupActions: [AutoScalingClientTypes.ScheduledUpdateGroupActionRequest]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scheduledUpdateGroupActions = scheduledUpdateGroupActions
    }
}

public struct BatchPutScheduledUpdateGroupActionOutput: Swift.Sendable {
    /// The names of the scheduled actions that could not be created or updated, including an error message.
    public var failedScheduledUpdateGroupActions: [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]?

    public init(
        failedScheduledUpdateGroupActions: [AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest]? = nil
    )
    {
        self.failedScheduledUpdateGroupActions = failedScheduledUpdateGroupActions
    }
}

public struct CancelInstanceRefreshInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?

    public init(
        autoScalingGroupName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
    }
}

public struct CancelInstanceRefreshOutput: Swift.Sendable {
    /// The instance refresh ID associated with the request. This is the unique ID assigned to the instance refresh when it was started.
    public var instanceRefreshId: Swift.String?

    public init(
        instanceRefreshId: Swift.String? = nil
    )
    {
        self.instanceRefreshId = instanceRefreshId
    }
}

public struct CompleteLifecycleActionInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The ID of the instance.
    public var instanceId: Swift.String?
    /// The action for the group to take. You can specify either CONTINUE or ABANDON.
    /// This member is required.
    public var lifecycleActionResult: Swift.String?
    /// A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
    public var lifecycleActionToken: Swift.String?
    /// The name of the lifecycle hook.
    /// This member is required.
    public var lifecycleHookName: Swift.String?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        lifecycleActionResult: Swift.String? = nil,
        lifecycleActionToken: Swift.String? = nil,
        lifecycleHookName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceId = instanceId
        self.lifecycleActionResult = lifecycleActionResult
        self.lifecycleActionToken = lifecycleActionToken
        self.lifecycleHookName = lifecycleHookName
    }
}

public struct CompleteLifecycleActionOutput: Swift.Sendable {

    public init() { }
}

extension AutoScalingClientTypes {

    public enum CapacityDistributionStrategy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case balancedBestEffort
        case balancedOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [CapacityDistributionStrategy] {
            return [
                .balancedBestEffort,
                .balancedOnly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .balancedBestEffort: return "balanced-best-effort"
            case .balancedOnly: return "balanced-only"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes an Availability Zone distribution.
    public struct AvailabilityZoneDistribution: Swift.Sendable {
        /// If launches fail in an Availability Zone, the following strategies are available. The default is balanced-best-effort.
        ///
        /// * balanced-only - If launches fail in an Availability Zone, Auto Scaling will continue to attempt to launch in the unhealthy zone to preserve a balanced distribution.
        ///
        /// * balanced-best-effort - If launches fail in an Availability Zone, Auto Scaling will attempt to launch in another healthy Availability Zone instead.
        public var capacityDistributionStrategy: AutoScalingClientTypes.CapacityDistributionStrategy?

        public init(
            capacityDistributionStrategy: AutoScalingClientTypes.CapacityDistributionStrategy? = nil
        )
        {
            self.capacityDistributionStrategy = capacityDistributionStrategy
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes an instance maintenance policy. For more information, see [Set instance maintenance policy](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-maintenance-policy.html) in the Amazon EC2 Auto Scaling User Guide.
    public struct InstanceMaintenancePolicy: Swift.Sendable {
        /// Specifies the upper threshold as a percentage of the desired capacity of the Auto Scaling group. It represents the maximum percentage of the group that can be in service and healthy, or pending, to support your workload when replacing instances. Value range is 100 to 200. To clear a previously set value, specify a value of -1. Both MinHealthyPercentage and MaxHealthyPercentage must be specified, and the difference between them cannot be greater than 100. A large range increases the number of instances that can be replaced at the same time.
        public var maxHealthyPercentage: Swift.Int?
        /// Specifies the lower threshold as a percentage of the desired capacity of the Auto Scaling group. It represents the minimum percentage of the group to keep in service, healthy, and ready to use to support your workload when replacing instances. Value range is 0 to 100. To clear a previously set value, specify a value of -1.
        public var minHealthyPercentage: Swift.Int?

        public init(
            maxHealthyPercentage: Swift.Int? = nil,
            minHealthyPercentage: Swift.Int? = nil
        )
        {
            self.maxHealthyPercentage = maxHealthyPercentage
            self.minHealthyPercentage = minHealthyPercentage
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes the launch template and the version of the launch template that Amazon EC2 Auto Scaling uses to launch Amazon EC2 instances. For more information about launch templates, see [Launch templates](https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-templates.html) in the Amazon EC2 Auto Scaling User Guide.
    public struct LaunchTemplateSpecification: Swift.Sendable {
        /// The ID of the launch template. To get the template ID, use the Amazon EC2 [DescribeLaunchTemplates](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplates.html) API operation. New launch templates can be created using the Amazon EC2 [CreateLaunchTemplate](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateLaunchTemplate.html) API. Conditional: You must specify either a LaunchTemplateId or a LaunchTemplateName.
        public var launchTemplateId: Swift.String?
        /// The name of the launch template. To get the template name, use the Amazon EC2 [DescribeLaunchTemplates](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplates.html) API operation. New launch templates can be created using the Amazon EC2 [CreateLaunchTemplate](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateLaunchTemplate.html) API. Conditional: You must specify either a LaunchTemplateId or a LaunchTemplateName.
        public var launchTemplateName: Swift.String?
        /// The version number, $Latest, or $Default. To get the version number, use the Amazon EC2 [DescribeLaunchTemplateVersions](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeLaunchTemplateVersions.html) API operation. New launch template versions can be created using the Amazon EC2 [CreateLaunchTemplateVersion](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_CreateLaunchTemplateVersion.html) API. If the value is $Latest, Amazon EC2 Auto Scaling selects the latest version of the launch template when launching instances. If the value is $Default, Amazon EC2 Auto Scaling selects the default version of the launch template when launching instances. The default value is $Default.
        public var version: Swift.String?

        public init(
            launchTemplateId: Swift.String? = nil,
            launchTemplateName: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.launchTemplateId = launchTemplateId
            self.launchTemplateName = launchTemplateName
            self.version = version
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes information used to specify a lifecycle hook for an Auto Scaling group. For more information, see [Amazon EC2 Auto Scaling lifecycle hooks](https://docs.aws.amazon.com/autoscaling/ec2/userguide/lifecycle-hooks.html) in the Amazon EC2 Auto Scaling User Guide.
    public struct LifecycleHookSpecification: Swift.Sendable {
        /// The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The default value is ABANDON. Valid values: CONTINUE | ABANDON
        public var defaultResult: Swift.String?
        /// The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from 30 to 7200 seconds. The default value is 3600 seconds (1 hour).
        public var heartbeatTimeout: Swift.Int?
        /// The name of the lifecycle hook.
        /// This member is required.
        public var lifecycleHookName: Swift.String?
        /// The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions.
        ///
        /// * To create a lifecycle hook for scale-out events, specify autoscaling:EC2_INSTANCE_LAUNCHING.
        ///
        /// * To create a lifecycle hook for scale-in events, specify autoscaling:EC2_INSTANCE_TERMINATING.
        /// This member is required.
        public var lifecycleTransition: Swift.String?
        /// Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
        public var notificationMetadata: Swift.String?
        /// The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling sends notifications to when an instance is in a wait state for the lifecycle hook. You can specify an Amazon SNS topic or an Amazon SQS queue.
        public var notificationTargetARN: Swift.String?
        /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target. For information about creating this role, see [Prepare to add a lifecycle hook to your Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/prepare-for-lifecycle-notifications.html) in the Amazon EC2 Auto Scaling User Guide. Valid only if the notification target is an Amazon SNS topic or an Amazon SQS queue.
        public var roleARN: Swift.String?

        public init(
            defaultResult: Swift.String? = nil,
            heartbeatTimeout: Swift.Int? = nil,
            lifecycleHookName: Swift.String? = nil,
            lifecycleTransition: Swift.String? = nil,
            notificationMetadata: Swift.String? = nil,
            notificationTargetARN: Swift.String? = nil,
            roleARN: Swift.String? = nil
        )
        {
            self.defaultResult = defaultResult
            self.heartbeatTimeout = heartbeatTimeout
            self.lifecycleHookName = lifecycleHookName
            self.lifecycleTransition = lifecycleTransition
            self.notificationMetadata = notificationMetadata
            self.notificationTargetARN = notificationTargetARN
            self.roleARN = roleARN
        }
    }
}

extension AutoScalingClientTypes {

    /// Use this structure to specify the distribution of On-Demand Instances and Spot Instances and the allocation strategies used to fulfill On-Demand and Spot capacities for a mixed instances policy.
    public struct InstancesDistribution: Swift.Sendable {
        /// The allocation strategy to apply to your On-Demand Instances when they are launched. Possible instance types are determined by the launch template overrides that you specify. The following lists the valid values: lowest-price Uses price to determine which instance types are the highest priority, launching the lowest priced instance types within an Availability Zone first. This is the default value for Auto Scaling groups that specify [InstanceRequirements](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_InstanceRequirements.html). prioritized You set the order of instance types for the launch template overrides from highest to lowest priority (from first to last in the list). Amazon EC2 Auto Scaling launches your highest priority instance types first. If all your On-Demand capacity cannot be fulfilled using your highest priority instance type, then Amazon EC2 Auto Scaling launches the remaining capacity using the second priority instance type, and so on. This is the default value for Auto Scaling groups that don't specify [InstanceRequirements](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_InstanceRequirements.html) and cannot be used for groups that do.
        public var onDemandAllocationStrategy: Swift.String?
        /// The minimum amount of the Auto Scaling group's capacity that must be fulfilled by On-Demand Instances. This base portion is launched first as your group scales. This number has the same unit of measurement as the group's desired capacity. If you change the default unit of measurement (number of instances) by specifying weighted capacity values in your launch template overrides list, or by changing the default desired capacity type setting of the group, you must specify this number using the same unit of measurement. Default: 0
        public var onDemandBaseCapacity: Swift.Int?
        /// Controls the percentages of On-Demand Instances and Spot Instances for your additional capacity beyond OnDemandBaseCapacity. Expressed as a number (for example, 20 specifies 20% On-Demand Instances, 80% Spot Instances). If set to 100, only On-Demand Instances are used. Default: 100
        public var onDemandPercentageAboveBaseCapacity: Swift.Int?
        /// The allocation strategy to apply to your Spot Instances when they are launched. Possible instance types are determined by the launch template overrides that you specify. The following lists the valid values: capacity-optimized Requests Spot Instances using pools that are optimally chosen based on the available Spot capacity. This strategy has the lowest risk of interruption. To give certain instance types a higher chance of launching first, use capacity-optimized-prioritized. capacity-optimized-prioritized You set the order of instance types for the launch template overrides from highest to lowest priority (from first to last in the list). Amazon EC2 Auto Scaling honors the instance type priorities on a best effort basis but optimizes for capacity first. Note that if the On-Demand allocation strategy is set to prioritized, the same priority is applied when fulfilling On-Demand capacity. This is not a valid value for Auto Scaling groups that specify [InstanceRequirements](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_InstanceRequirements.html). lowest-price Requests Spot Instances using the lowest priced pools within an Availability Zone, across the number of Spot pools that you specify for the SpotInstancePools property. To ensure that your desired capacity is met, you might receive Spot Instances from several pools. This is the default value, but it might lead to high interruption rates because this strategy only considers instance price and not available capacity. price-capacity-optimized (recommended) The price and capacity optimized allocation strategy looks at both price and capacity to select the Spot Instance pools that are the least likely to be interrupted and have the lowest possible price.
        public var spotAllocationStrategy: Swift.String?
        /// The number of Spot Instance pools across which to allocate your Spot Instances. The Spot pools are determined from the different instance types in the overrides. Valid only when the SpotAllocationStrategy is lowest-price. Value must be in the range of 1–20. Default: 2
        public var spotInstancePools: Swift.Int?
        /// The maximum price per unit hour that you are willing to pay for a Spot Instance. If your maximum price is lower than the Spot price for the instance types that you selected, your Spot Instances are not launched. We do not recommend specifying a maximum price because it can lead to increased interruptions. When Spot Instances launch, you pay the current Spot price. To remove a maximum price that you previously set, include the property but specify an empty string ("") for the value. If you specify a maximum price, your instances will be interrupted more frequently than if you do not specify one. Valid Range: Minimum value of 0.001
        public var spotMaxPrice: Swift.String?

        public init(
            onDemandAllocationStrategy: Swift.String? = nil,
            onDemandBaseCapacity: Swift.Int? = nil,
            onDemandPercentageAboveBaseCapacity: Swift.Int? = nil,
            spotAllocationStrategy: Swift.String? = nil,
            spotInstancePools: Swift.Int? = nil,
            spotMaxPrice: Swift.String? = nil
        )
        {
            self.onDemandAllocationStrategy = onDemandAllocationStrategy
            self.onDemandBaseCapacity = onDemandBaseCapacity
            self.onDemandPercentageAboveBaseCapacity = onDemandPercentageAboveBaseCapacity
            self.spotAllocationStrategy = spotAllocationStrategy
            self.spotInstancePools = spotInstancePools
            self.spotMaxPrice = spotMaxPrice
        }
    }
}

extension AutoScalingClientTypes {

    public enum BareMetal: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case excluded
        case included
        case `required`
        case sdkUnknown(Swift.String)

        public static var allCases: [BareMetal] {
            return [
                .excluded,
                .included,
                .required
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .excluded: return "excluded"
            case .included: return "included"
            case .required: return "required"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    /// Specifies the minimum and maximum for the BaselineEbsBandwidthMbps object when you specify [InstanceRequirements](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_InstanceRequirements.html) for an Auto Scaling group.
    public struct BaselineEbsBandwidthMbpsRequest: Swift.Sendable {
        /// The maximum value in Mbps.
        public var max: Swift.Int?
        /// The minimum value in Mbps.
        public var min: Swift.Int?

        public init(
            max: Swift.Int? = nil,
            min: Swift.Int? = nil
        )
        {
            self.max = max
            self.min = min
        }
    }
}

extension AutoScalingClientTypes {

    public enum BurstablePerformance: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case excluded
        case included
        case `required`
        case sdkUnknown(Swift.String)

        public static var allCases: [BurstablePerformance] {
            return [
                .excluded,
                .included,
                .required
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .excluded: return "excluded"
            case .included: return "included"
            case .required: return "required"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    public enum CpuManufacturer: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case amazonWebServices
        case amd
        case intel
        case sdkUnknown(Swift.String)

        public static var allCases: [CpuManufacturer] {
            return [
                .amazonWebServices,
                .amd,
                .intel
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .amazonWebServices: return "amazon-web-services"
            case .amd: return "amd"
            case .intel: return "intel"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    public enum InstanceGeneration: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case current
        case previous
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceGeneration] {
            return [
                .current,
                .previous
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .current: return "current"
            case .previous: return "previous"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    public enum LocalStorage: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case excluded
        case included
        case `required`
        case sdkUnknown(Swift.String)

        public static var allCases: [LocalStorage] {
            return [
                .excluded,
                .included,
                .required
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .excluded: return "excluded"
            case .included: return "included"
            case .required: return "required"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    public enum LocalStorageType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hdd
        case ssd
        case sdkUnknown(Swift.String)

        public static var allCases: [LocalStorageType] {
            return [
                .hdd,
                .ssd
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hdd: return "hdd"
            case .ssd: return "ssd"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    /// Specifies the minimum and maximum for the MemoryGiBPerVCpu object when you specify [InstanceRequirements](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_InstanceRequirements.html) for an Auto Scaling group.
    public struct MemoryGiBPerVCpuRequest: Swift.Sendable {
        /// The memory maximum in GiB.
        public var max: Swift.Double?
        /// The memory minimum in GiB.
        public var min: Swift.Double?

        public init(
            max: Swift.Double? = nil,
            min: Swift.Double? = nil
        )
        {
            self.max = max
            self.min = min
        }
    }
}

extension AutoScalingClientTypes {

    /// Specifies the minimum and maximum for the MemoryMiB object when you specify [InstanceRequirements](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_InstanceRequirements.html) for an Auto Scaling group.
    public struct MemoryMiBRequest: Swift.Sendable {
        /// The memory maximum in MiB.
        public var max: Swift.Int?
        /// The memory minimum in MiB.
        /// This member is required.
        public var min: Swift.Int?

        public init(
            max: Swift.Int? = nil,
            min: Swift.Int? = nil
        )
        {
            self.max = max
            self.min = min
        }
    }
}

extension AutoScalingClientTypes {

    /// Specifies the minimum and maximum for the NetworkBandwidthGbps object when you specify [InstanceRequirements](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_InstanceRequirements.html) for an Auto Scaling group. Setting the minimum bandwidth does not guarantee that your instance will achieve the minimum bandwidth. Amazon EC2 will identify instance types that support the specified minimum bandwidth, but the actual bandwidth of your instance might go below the specified minimum at times. For more information, see [Available instance bandwidth](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-network-bandwidth.html#available-instance-bandwidth) in the Amazon EC2 User Guide for Linux Instances.
    public struct NetworkBandwidthGbpsRequest: Swift.Sendable {
        /// The maximum amount of network bandwidth, in gigabits per second (Gbps).
        public var max: Swift.Double?
        /// The minimum amount of network bandwidth, in gigabits per second (Gbps).
        public var min: Swift.Double?

        public init(
            max: Swift.Double? = nil,
            min: Swift.Double? = nil
        )
        {
            self.max = max
            self.min = min
        }
    }
}

extension AutoScalingClientTypes {

    /// Specifies the minimum and maximum for the NetworkInterfaceCount object when you specify [InstanceRequirements](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_InstanceRequirements.html) for an Auto Scaling group.
    public struct NetworkInterfaceCountRequest: Swift.Sendable {
        /// The maximum number of network interfaces.
        public var max: Swift.Int?
        /// The minimum number of network interfaces.
        public var min: Swift.Int?

        public init(
            max: Swift.Int? = nil,
            min: Swift.Int? = nil
        )
        {
            self.max = max
            self.min = min
        }
    }
}

extension AutoScalingClientTypes {

    /// Specifies the minimum and maximum for the TotalLocalStorageGB object when you specify [InstanceRequirements](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_InstanceRequirements.html) for an Auto Scaling group.
    public struct TotalLocalStorageGBRequest: Swift.Sendable {
        /// The storage maximum in GB.
        public var max: Swift.Double?
        /// The storage minimum in GB.
        public var min: Swift.Double?

        public init(
            max: Swift.Double? = nil,
            min: Swift.Double? = nil
        )
        {
            self.max = max
            self.min = min
        }
    }
}

extension AutoScalingClientTypes {

    /// Specifies the minimum and maximum for the VCpuCount object when you specify [InstanceRequirements](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_InstanceRequirements.html) for an Auto Scaling group.
    public struct VCpuCountRequest: Swift.Sendable {
        /// The maximum number of vCPUs.
        public var max: Swift.Int?
        /// The minimum number of vCPUs.
        /// This member is required.
        public var min: Swift.Int?

        public init(
            max: Swift.Int? = nil,
            min: Swift.Int? = nil
        )
        {
            self.max = max
            self.min = min
        }
    }
}

extension AutoScalingClientTypes {

    /// The attributes for the instance types for a mixed instances policy. Amazon EC2 Auto Scaling uses your specified requirements to identify instance types. Then, it uses your On-Demand and Spot allocation strategies to launch instances from these instance types. When you specify multiple attributes, you get instance types that satisfy all of the specified attributes. If you specify multiple values for an attribute, you get instance types that satisfy any of the specified values. To limit the list of instance types from which Amazon EC2 Auto Scaling can identify matching instance types, you can use one of the following parameters, but not both in the same request:
    ///
    /// * AllowedInstanceTypes - The instance types to include in the list. All other instance types are ignored, even if they match your specified attributes.
    ///
    /// * ExcludedInstanceTypes - The instance types to exclude from the list, even if they match your specified attributes.
    ///
    ///
    /// You must specify VCpuCount and MemoryMiB. All other attributes are optional. Any unspecified optional attribute is set to its default. For more information, see [Create a mixed instances group using attribute-based instance type selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-mixed-instances-group-attribute-based-instance-type-selection.html) in the Amazon EC2 Auto Scaling User Guide. For help determining which instance types match your attributes before you apply them to your Auto Scaling group, see [Preview instance types with specified attributes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-fleet-attribute-based-instance-type-selection.html#ec2fleet-get-instance-types-from-instance-requirements) in the Amazon EC2 User Guide for Linux Instances.
    public struct InstanceRequirements: Swift.Sendable {
        /// The minimum and maximum number of accelerators (GPUs, FPGAs, or Amazon Web Services Inferentia chips) for an instance type. To exclude accelerator-enabled instance types, set Max to 0. Default: No minimum or maximum limits
        public var acceleratorCount: AutoScalingClientTypes.AcceleratorCountRequest?
        /// Indicates whether instance types must have accelerators by specific manufacturers.
        ///
        /// * For instance types with NVIDIA devices, specify nvidia.
        ///
        /// * For instance types with AMD devices, specify amd.
        ///
        /// * For instance types with Amazon Web Services devices, specify amazon-web-services.
        ///
        /// * For instance types with Xilinx devices, specify xilinx.
        ///
        ///
        /// Default: Any manufacturer
        public var acceleratorManufacturers: [AutoScalingClientTypes.AcceleratorManufacturer]?
        /// Lists the accelerators that must be on an instance type.
        ///
        /// * For instance types with NVIDIA A100 GPUs, specify a100.
        ///
        /// * For instance types with NVIDIA V100 GPUs, specify v100.
        ///
        /// * For instance types with NVIDIA K80 GPUs, specify k80.
        ///
        /// * For instance types with NVIDIA T4 GPUs, specify t4.
        ///
        /// * For instance types with NVIDIA M60 GPUs, specify m60.
        ///
        /// * For instance types with AMD Radeon Pro V520 GPUs, specify radeon-pro-v520.
        ///
        /// * For instance types with Xilinx VU9P FPGAs, specify vu9p.
        ///
        ///
        /// Default: Any accelerator
        public var acceleratorNames: [AutoScalingClientTypes.AcceleratorName]?
        /// The minimum and maximum total memory size for the accelerators on an instance type, in MiB. Default: No minimum or maximum limits
        public var acceleratorTotalMemoryMiB: AutoScalingClientTypes.AcceleratorTotalMemoryMiBRequest?
        /// Lists the accelerator types that must be on an instance type.
        ///
        /// * For instance types with GPU accelerators, specify gpu.
        ///
        /// * For instance types with FPGA accelerators, specify fpga.
        ///
        /// * For instance types with inference accelerators, specify inference.
        ///
        ///
        /// Default: Any accelerator type
        public var acceleratorTypes: [AutoScalingClientTypes.AcceleratorType]?
        /// The instance types to apply your specified attributes against. All other instance types are ignored, even if they match your specified attributes. You can use strings with one or more wild cards, represented by an asterisk (*), to allow an instance type, size, or generation. The following are examples: m5.8xlarge, c5*.*, m5a.*, r*, *3*. For example, if you specify c5*, Amazon EC2 Auto Scaling will allow the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, Amazon EC2 Auto Scaling will allow all the M5a instance types, but not the M5n instance types. If you specify AllowedInstanceTypes, you can't specify ExcludedInstanceTypes. Default: All instance types
        public var allowedInstanceTypes: [Swift.String]?
        /// Indicates whether bare metal instance types are included, excluded, or required. Default: excluded
        public var bareMetal: AutoScalingClientTypes.BareMetal?
        /// The minimum and maximum baseline bandwidth performance for an instance type, in Mbps. For more information, see [Amazon EBS–optimized instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html) in the Amazon EC2 User Guide for Linux Instances. Default: No minimum or maximum limits
        public var baselineEbsBandwidthMbps: AutoScalingClientTypes.BaselineEbsBandwidthMbpsRequest?
        /// Indicates whether burstable performance instance types are included, excluded, or required. For more information, see [Burstable performance instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/burstable-performance-instances.html) in the Amazon EC2 User Guide for Linux Instances. Default: excluded
        public var burstablePerformance: AutoScalingClientTypes.BurstablePerformance?
        /// Lists which specific CPU manufacturers to include.
        ///
        /// * For instance types with Intel CPUs, specify intel.
        ///
        /// * For instance types with AMD CPUs, specify amd.
        ///
        /// * For instance types with Amazon Web Services CPUs, specify amazon-web-services.
        ///
        ///
        /// Don't confuse the CPU hardware manufacturer with the CPU hardware architecture. Instances will be launched with a compatible CPU architecture based on the Amazon Machine Image (AMI) that you specify in your launch template. Default: Any manufacturer
        public var cpuManufacturers: [AutoScalingClientTypes.CpuManufacturer]?
        /// The instance types to exclude. You can use strings with one or more wild cards, represented by an asterisk (*), to exclude an instance family, type, size, or generation. The following are examples: m5.8xlarge, c5*.*, m5a.*, r*, *3*. For example, if you specify c5*, you are excluding the entire C5 instance family, which includes all C5a and C5n instance types. If you specify m5a.*, Amazon EC2 Auto Scaling will exclude all the M5a instance types, but not the M5n instance types. If you specify ExcludedInstanceTypes, you can't specify AllowedInstanceTypes. Default: No excluded instance types
        public var excludedInstanceTypes: [Swift.String]?
        /// Indicates whether current or previous generation instance types are included.
        ///
        /// * For current generation instance types, specify current. The current generation includes EC2 instance types currently recommended for use. This typically includes the latest two to three generations in each instance family. For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the Amazon EC2 User Guide for Linux Instances.
        ///
        /// * For previous generation instance types, specify previous.
        ///
        ///
        /// Default: Any current or previous generation
        public var instanceGenerations: [AutoScalingClientTypes.InstanceGeneration]?
        /// Indicates whether instance types with instance store volumes are included, excluded, or required. For more information, see [Amazon EC2 instance store](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html) in the Amazon EC2 User Guide for Linux Instances. Default: included
        public var localStorage: AutoScalingClientTypes.LocalStorage?
        /// Indicates the type of local storage that is required.
        ///
        /// * For instance types with hard disk drive (HDD) storage, specify hdd.
        ///
        /// * For instance types with solid state drive (SSD) storage, specify ssd.
        ///
        ///
        /// Default: Any local storage type
        public var localStorageTypes: [AutoScalingClientTypes.LocalStorageType]?
        /// [Price protection] The price protection threshold for Spot Instances, as a percentage of an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified price is from either the lowest priced current generation instance types or, failing that, the lowest priced previous generation instance types that match your attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price exceeds your specified threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. If you set DesiredCapacityType to vcpu or memory-mib, the price protection threshold is based on the per-vCPU or per-memory price instead of the per instance price. Only one of SpotMaxPricePercentageOverLowestPrice or MaxSpotPriceAsPercentageOfOptimalOnDemandPrice can be specified. If you don't specify either, Amazon EC2 Auto Scaling will automatically apply optimal price protection to consistently select from a wide range of instance types. To indicate no price protection threshold for Spot Instances, meaning you want to consider all instance types that match your attributes, include one of these parameters and specify a high value, such as 999999.
        public var maxSpotPriceAsPercentageOfOptimalOnDemandPrice: Swift.Int?
        /// The minimum and maximum amount of memory per vCPU for an instance type, in GiB. Default: No minimum or maximum limits
        public var memoryGiBPerVCpu: AutoScalingClientTypes.MemoryGiBPerVCpuRequest?
        /// The minimum and maximum instance memory size for an instance type, in MiB.
        /// This member is required.
        public var memoryMiB: AutoScalingClientTypes.MemoryMiBRequest?
        /// The minimum and maximum amount of network bandwidth, in gigabits per second (Gbps). Default: No minimum or maximum limits
        public var networkBandwidthGbps: AutoScalingClientTypes.NetworkBandwidthGbpsRequest?
        /// The minimum and maximum number of network interfaces for an instance type. Default: No minimum or maximum limits
        public var networkInterfaceCount: AutoScalingClientTypes.NetworkInterfaceCountRequest?
        /// [Price protection] The price protection threshold for On-Demand Instances, as a percentage higher than an identified On-Demand price. The identified On-Demand price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified price is from either the lowest priced current generation instance types or, failing that, the lowest priced previous generation instance types that match your attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price exceeds your specified threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. To turn off price protection, specify a high value, such as 999999. If you set DesiredCapacityType to vcpu or memory-mib, the price protection threshold is applied based on the per-vCPU or per-memory price instead of the per instance price. Default: 20
        public var onDemandMaxPricePercentageOverLowestPrice: Swift.Int?
        /// Indicates whether instance types must provide On-Demand Instance hibernation support. Default: false
        public var requireHibernateSupport: Swift.Bool?
        /// [Price protection] The price protection threshold for Spot Instances, as a percentage higher than an identified Spot price. The identified Spot price is the price of the lowest priced current generation C, M, or R instance type with your specified attributes. If no current generation C, M, or R instance type matches your attributes, then the identified price is from either the lowest priced current generation instance types or, failing that, the lowest priced previous generation instance types that match your attributes. When Amazon EC2 Auto Scaling selects instance types with your attributes, we will exclude instance types whose price exceeds your specified threshold. The parameter accepts an integer, which Amazon EC2 Auto Scaling interprets as a percentage. If you set DesiredCapacityType to vcpu or memory-mib, the price protection threshold is based on the per-vCPU or per-memory price instead of the per instance price. Only one of SpotMaxPricePercentageOverLowestPrice or MaxSpotPriceAsPercentageOfOptimalOnDemandPrice can be specified. If you don't specify either, Amazon EC2 Auto Scaling will automatically apply optimal price protection to consistently select from a wide range of instance types. To indicate no price protection threshold for Spot Instances, meaning you want to consider all instance types that match your attributes, include one of these parameters and specify a high value, such as 999999.
        public var spotMaxPricePercentageOverLowestPrice: Swift.Int?
        /// The minimum and maximum total local storage size for an instance type, in GB. Default: No minimum or maximum limits
        public var totalLocalStorageGB: AutoScalingClientTypes.TotalLocalStorageGBRequest?
        /// The minimum and maximum number of vCPUs for an instance type.
        /// This member is required.
        public var vCpuCount: AutoScalingClientTypes.VCpuCountRequest?

        public init(
            acceleratorCount: AutoScalingClientTypes.AcceleratorCountRequest? = nil,
            acceleratorManufacturers: [AutoScalingClientTypes.AcceleratorManufacturer]? = nil,
            acceleratorNames: [AutoScalingClientTypes.AcceleratorName]? = nil,
            acceleratorTotalMemoryMiB: AutoScalingClientTypes.AcceleratorTotalMemoryMiBRequest? = nil,
            acceleratorTypes: [AutoScalingClientTypes.AcceleratorType]? = nil,
            allowedInstanceTypes: [Swift.String]? = nil,
            bareMetal: AutoScalingClientTypes.BareMetal? = nil,
            baselineEbsBandwidthMbps: AutoScalingClientTypes.BaselineEbsBandwidthMbpsRequest? = nil,
            burstablePerformance: AutoScalingClientTypes.BurstablePerformance? = nil,
            cpuManufacturers: [AutoScalingClientTypes.CpuManufacturer]? = nil,
            excludedInstanceTypes: [Swift.String]? = nil,
            instanceGenerations: [AutoScalingClientTypes.InstanceGeneration]? = nil,
            localStorage: AutoScalingClientTypes.LocalStorage? = nil,
            localStorageTypes: [AutoScalingClientTypes.LocalStorageType]? = nil,
            maxSpotPriceAsPercentageOfOptimalOnDemandPrice: Swift.Int? = nil,
            memoryGiBPerVCpu: AutoScalingClientTypes.MemoryGiBPerVCpuRequest? = nil,
            memoryMiB: AutoScalingClientTypes.MemoryMiBRequest? = nil,
            networkBandwidthGbps: AutoScalingClientTypes.NetworkBandwidthGbpsRequest? = nil,
            networkInterfaceCount: AutoScalingClientTypes.NetworkInterfaceCountRequest? = nil,
            onDemandMaxPricePercentageOverLowestPrice: Swift.Int? = nil,
            requireHibernateSupport: Swift.Bool? = nil,
            spotMaxPricePercentageOverLowestPrice: Swift.Int? = nil,
            totalLocalStorageGB: AutoScalingClientTypes.TotalLocalStorageGBRequest? = nil,
            vCpuCount: AutoScalingClientTypes.VCpuCountRequest? = nil
        )
        {
            self.acceleratorCount = acceleratorCount
            self.acceleratorManufacturers = acceleratorManufacturers
            self.acceleratorNames = acceleratorNames
            self.acceleratorTotalMemoryMiB = acceleratorTotalMemoryMiB
            self.acceleratorTypes = acceleratorTypes
            self.allowedInstanceTypes = allowedInstanceTypes
            self.bareMetal = bareMetal
            self.baselineEbsBandwidthMbps = baselineEbsBandwidthMbps
            self.burstablePerformance = burstablePerformance
            self.cpuManufacturers = cpuManufacturers
            self.excludedInstanceTypes = excludedInstanceTypes
            self.instanceGenerations = instanceGenerations
            self.localStorage = localStorage
            self.localStorageTypes = localStorageTypes
            self.maxSpotPriceAsPercentageOfOptimalOnDemandPrice = maxSpotPriceAsPercentageOfOptimalOnDemandPrice
            self.memoryGiBPerVCpu = memoryGiBPerVCpu
            self.memoryMiB = memoryMiB
            self.networkBandwidthGbps = networkBandwidthGbps
            self.networkInterfaceCount = networkInterfaceCount
            self.onDemandMaxPricePercentageOverLowestPrice = onDemandMaxPricePercentageOverLowestPrice
            self.requireHibernateSupport = requireHibernateSupport
            self.spotMaxPricePercentageOverLowestPrice = spotMaxPricePercentageOverLowestPrice
            self.totalLocalStorageGB = totalLocalStorageGB
            self.vCpuCount = vCpuCount
        }
    }
}

extension AutoScalingClientTypes {

    /// Use this structure to let Amazon EC2 Auto Scaling do the following when the Auto Scaling group has a mixed instances policy:
    ///
    /// * Override the instance type that is specified in the launch template.
    ///
    /// * Use multiple instance types.
    ///
    ///
    /// Specify the instance types that you want, or define your instance requirements instead and let Amazon EC2 Auto Scaling provision the available instance types that meet your requirements. This can provide Amazon EC2 Auto Scaling with a larger selection of instance types to choose from when fulfilling Spot and On-Demand capacities. You can view which instance types are matched before you apply the instance requirements to your Auto Scaling group. After you define your instance requirements, you don't have to keep updating these settings to get new EC2 instance types automatically. Amazon EC2 Auto Scaling uses the instance requirements of the Auto Scaling group to determine whether a new EC2 instance type can be used.
    public struct LaunchTemplateOverrides: Swift.Sendable {
        /// The instance requirements. Amazon EC2 Auto Scaling uses your specified requirements to identify instance types. Then, it uses your On-Demand and Spot allocation strategies to launch instances from these instance types. You can specify up to four separate sets of instance requirements per Auto Scaling group. This is useful for provisioning instances from different Amazon Machine Images (AMIs) in the same Auto Scaling group. To do this, create the AMIs and create a new launch template for each AMI. Then, create a compatible set of instance requirements for each launch template. If you specify InstanceRequirements, you can't specify InstanceType.
        public var instanceRequirements: AutoScalingClientTypes.InstanceRequirements?
        /// The instance type, such as m3.xlarge. You must specify an instance type that is supported in your requested Region and Availability Zones. For more information, see [Instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html) in the Amazon EC2 User Guide for Linux Instances. You can specify up to 40 instance types per Auto Scaling group.
        public var instanceType: Swift.String?
        /// Provides a launch template for the specified instance type or set of instance requirements. For example, some instance types might require a launch template with a different AMI. If not provided, Amazon EC2 Auto Scaling uses the launch template that's specified in the LaunchTemplate definition. For more information, see [Specifying a different launch template for an instance type](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-launch-template-overrides.html) in the Amazon EC2 Auto Scaling User Guide. You can specify up to 20 launch templates per Auto Scaling group. The launch templates specified in the overrides and in the LaunchTemplate definition count towards this limit.
        public var launchTemplateSpecification: AutoScalingClientTypes.LaunchTemplateSpecification?
        /// If you provide a list of instance types to use, you can specify the number of capacity units provided by each instance type in terms of virtual CPUs, memory, storage, throughput, or other relative performance characteristic. When a Spot or On-Demand Instance is launched, the capacity units count toward the desired capacity. Amazon EC2 Auto Scaling launches instances until the desired capacity is totally fulfilled, even if this results in an overage. For example, if there are two units remaining to fulfill capacity, and Amazon EC2 Auto Scaling can only launch an instance with a WeightedCapacity of five units, the instance is launched, and the desired capacity is exceeded by three units. For more information, see [Configure an Auto Scaling group to use instance weights](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups-instance-weighting.html) in the Amazon EC2 Auto Scaling User Guide. Value must be in the range of 1–999. If you specify a value for WeightedCapacity for one instance type, you must specify a value for WeightedCapacity for all of them. Every Auto Scaling group has three size parameters (DesiredCapacity, MaxSize, and MinSize). Usually, you set these sizes based on a specific number of instances. However, if you configure a mixed instances policy that defines weights for the instance types, you must specify these sizes with the same units that you use for weighting instances.
        public var weightedCapacity: Swift.String?

        public init(
            instanceRequirements: AutoScalingClientTypes.InstanceRequirements? = nil,
            instanceType: Swift.String? = nil,
            launchTemplateSpecification: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
            weightedCapacity: Swift.String? = nil
        )
        {
            self.instanceRequirements = instanceRequirements
            self.instanceType = instanceType
            self.launchTemplateSpecification = launchTemplateSpecification
            self.weightedCapacity = weightedCapacity
        }
    }
}

extension AutoScalingClientTypes {

    /// Use this structure to specify the launch templates and instance types (overrides) for a mixed instances policy.
    public struct LaunchTemplate: Swift.Sendable {
        /// The launch template.
        public var launchTemplateSpecification: AutoScalingClientTypes.LaunchTemplateSpecification?
        /// Any properties that you specify override the same properties in the launch template.
        public var overrides: [AutoScalingClientTypes.LaunchTemplateOverrides]?

        public init(
            launchTemplateSpecification: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
            overrides: [AutoScalingClientTypes.LaunchTemplateOverrides]? = nil
        )
        {
            self.launchTemplateSpecification = launchTemplateSpecification
            self.overrides = overrides
        }
    }
}

extension AutoScalingClientTypes {

    /// Use this structure to launch multiple instance types and On-Demand Instances and Spot Instances within a single Auto Scaling group. A mixed instances policy contains information that Amazon EC2 Auto Scaling can use to launch instances and help optimize your costs. For more information, see [Auto Scaling groups with multiple instance types and purchase options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html) in the Amazon EC2 Auto Scaling User Guide.
    public struct MixedInstancesPolicy: Swift.Sendable {
        /// The instances distribution.
        public var instancesDistribution: AutoScalingClientTypes.InstancesDistribution?
        /// One or more launch templates and the instance types (overrides) that are used to launch EC2 instances to fulfill On-Demand and Spot capacities.
        public var launchTemplate: AutoScalingClientTypes.LaunchTemplate?

        public init(
            instancesDistribution: AutoScalingClientTypes.InstancesDistribution? = nil,
            launchTemplate: AutoScalingClientTypes.LaunchTemplate? = nil
        )
        {
            self.instancesDistribution = instancesDistribution
            self.launchTemplate = launchTemplate
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes a tag for an Auto Scaling group.
    public struct Tag: Swift.Sendable {
        /// The tag key.
        /// This member is required.
        public var key: Swift.String?
        /// Determines whether the tag is added to new instances as they are launched in the group.
        public var propagateAtLaunch: Swift.Bool?
        /// The name of the Auto Scaling group.
        public var resourceId: Swift.String?
        /// The type of resource. The only supported value is auto-scaling-group.
        public var resourceType: Swift.String?
        /// The tag value.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            propagateAtLaunch: Swift.Bool? = nil,
            resourceId: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.propagateAtLaunch = propagateAtLaunch
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.value = value
        }
    }
}

public struct CreateAutoScalingGroupInput: Swift.Sendable {
    /// The name of the Auto Scaling group. This name must be unique per Region per account. The name can contain any ASCII character 33 to 126 including most punctuation characters, digits, and upper and lowercased letters. You cannot use a colon (:) in the name.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The instance capacity distribution across Availability Zones.
    public var availabilityZoneDistribution: AutoScalingClientTypes.AvailabilityZoneDistribution?
    /// A list of Availability Zones where instances in the Auto Scaling group can be created. Used for launching into the default VPC subnet in each Availability Zone when not using the VPCZoneIdentifier property, or for attaching a network interface when an existing network interface ID is specified in a launch template.
    public var availabilityZones: [Swift.String]?
    /// Indicates whether Capacity Rebalancing is enabled. Otherwise, Capacity Rebalancing is disabled. When you turn on Capacity Rebalancing, Amazon EC2 Auto Scaling attempts to launch a Spot Instance whenever Amazon EC2 notifies that a Spot Instance is at an elevated risk of interruption. After launching a new instance, it then terminates an old instance. For more information, see [Use Capacity Rebalancing to handle Amazon EC2 Spot Interruptions](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html) in the in the Amazon EC2 Auto Scaling User Guide.
    public var capacityRebalance: Swift.Bool?
    /// Reserved.
    public var context: Swift.String?
    /// Only needed if you use simple scaling policies. The amount of time, in seconds, between one scaling activity ending and another one starting due to simple scaling policies. For more information, see [Scaling cooldowns for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-scaling-cooldowns.html) in the Amazon EC2 Auto Scaling User Guide. Default: 300 seconds
    public var defaultCooldown: Swift.Int?
    /// The amount of time, in seconds, until a new instance is considered to have finished initializing and resource consumption to become stable after it enters the InService state. During an instance refresh, Amazon EC2 Auto Scaling waits for the warm-up period after it replaces an instance before it moves on to replacing the next instance. Amazon EC2 Auto Scaling also waits for the warm-up period before aggregating the metrics for new instances with existing instances in the Amazon CloudWatch metrics that are used for scaling, resulting in more reliable usage data. For more information, see [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html) in the Amazon EC2 Auto Scaling User Guide. To manage various warm-up settings at the group level, we recommend that you set the default instance warmup, even if it is set to 0 seconds. To remove a value that you previously set, include the property but specify -1 for the value. However, we strongly recommend keeping the default instance warmup enabled by specifying a value of 0 or other nominal value. Default: None
    public var defaultInstanceWarmup: Swift.Int?
    /// The desired capacity is the initial capacity of the Auto Scaling group at the time of its creation and the capacity it attempts to maintain. It can scale beyond this capacity if you configure auto scaling. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
    public var desiredCapacity: Swift.Int?
    /// The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports DesiredCapacityType for attribute-based instance type selection only. For more information, see [Create a mixed instances group using attribute-based instance type selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-mixed-instances-group-attribute-based-instance-type-selection.html) in the Amazon EC2 Auto Scaling User Guide. By default, Amazon EC2 Auto Scaling specifies units, which translates into number of instances. Valid values: units | vcpu | memory-mib
    public var desiredCapacityType: Swift.String?
    /// The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service and marking it unhealthy due to a failed health check. This is useful if your instances do not immediately pass their health checks after they enter the InService state. For more information, see [Set the health check grace period for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html) in the Amazon EC2 Auto Scaling User Guide. Default: 0 seconds
    public var healthCheckGracePeriod: Swift.Int?
    /// A comma-separated value string of one or more health check types. The valid values are EC2, EBS, ELB, and VPC_LATTICE. EC2 is the default health check and cannot be disabled. For more information, see [Health checks for instances in an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-health-checks.html) in the Amazon EC2 Auto Scaling User Guide. Only specify EC2 if you must clear a value that was previously set.
    public var healthCheckType: Swift.String?
    /// The ID of the instance used to base the launch configuration on. If specified, Amazon EC2 Auto Scaling uses the configuration values from the specified instance to create a new launch configuration. To get the instance ID, use the Amazon EC2 [DescribeInstances](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html) API operation. For more information, see [Create an Auto Scaling group using parameters from an existing instance](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html) in the Amazon EC2 Auto Scaling User Guide.
    public var instanceId: Swift.String?
    /// An instance maintenance policy. For more information, see [Set instance maintenance policy](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-maintenance-policy.html) in the Amazon EC2 Auto Scaling User Guide.
    public var instanceMaintenancePolicy: AutoScalingClientTypes.InstanceMaintenancePolicy?
    /// The name of the launch configuration to use to launch instances. Conditional: You must specify either a launch template (LaunchTemplate or MixedInstancesPolicy) or a launch configuration (LaunchConfigurationName or InstanceId).
    public var launchConfigurationName: Swift.String?
    /// Information used to specify the launch template and version to use to launch instances. Conditional: You must specify either a launch template (LaunchTemplate or MixedInstancesPolicy) or a launch configuration (LaunchConfigurationName or InstanceId). The launch template that is specified must be configured for use with an Auto Scaling group. For more information, see [Create a launch template for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html) in the Amazon EC2 Auto Scaling User Guide.
    public var launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
    /// One or more lifecycle hooks to add to the Auto Scaling group before instances are launched.
    public var lifecycleHookSpecificationList: [AutoScalingClientTypes.LifecycleHookSpecification]?
    /// A list of Classic Load Balancers associated with this Auto Scaling group. For Application Load Balancers, Network Load Balancers, and Gateway Load Balancers, specify the TargetGroupARNs property instead.
    public var loadBalancerNames: [Swift.String]?
    /// The maximum amount of time, in seconds, that an instance can be in service. The default is null. If specified, the value must be either 0 or a number equal to or greater than 86,400 seconds (1 day). For more information, see [Replace Auto Scaling instances based on maximum instance lifetime](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html) in the Amazon EC2 Auto Scaling User Guide.
    public var maxInstanceLifetime: Swift.Int?
    /// The maximum size of the group. With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to go above MaxSize to meet your capacity requirements. In this event, Amazon EC2 Auto Scaling will never go above MaxSize by more than your largest instance weight (weights that define how many units each instance contributes to the desired capacity of the group).
    /// This member is required.
    public var maxSize: Swift.Int?
    /// The minimum size of the group.
    /// This member is required.
    public var minSize: Swift.Int?
    /// The mixed instances policy. For more information, see [Auto Scaling groups with multiple instance types and purchase options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html) in the Amazon EC2 Auto Scaling User Guide.
    public var mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy?
    /// Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in. For more information about preventing instances from terminating on scale in, see [Use instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html) in the Amazon EC2 Auto Scaling User Guide.
    public var newInstancesProtectedFromScaleIn: Swift.Bool?
    /// The name of the placement group into which to launch your instances. For more information, see [Placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the Amazon EC2 User Guide for Linux Instances. A cluster placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a cluster placement group.
    public var placementGroup: Swift.String?
    /// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other Amazon Web Services service on your behalf. By default, Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling, which it creates if it does not exist. For more information, see [Service-linked roles](https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html) in the Amazon EC2 Auto Scaling User Guide.
    public var serviceLinkedRoleARN: Swift.String?
    /// One or more tags. You can tag your Auto Scaling group and propagate the tags to the Amazon EC2 instances it launches. Tags are not propagated to Amazon EBS volumes. To add tags to Amazon EBS volumes, specify the tags in a launch template but use caution. If the launch template specifies an instance tag with a key that is also specified for the Auto Scaling group, Amazon EC2 Auto Scaling overrides the value of that instance tag with the value specified by the Auto Scaling group. For more information, see [Tag Auto Scaling groups and instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html) in the Amazon EC2 Auto Scaling User Guide.
    public var tags: [AutoScalingClientTypes.Tag]?
    /// The Amazon Resource Names (ARN) of the Elastic Load Balancing target groups to associate with the Auto Scaling group. Instances are registered as targets with the target groups. The target groups receive incoming traffic and route requests to one or more registered targets. For more information, see [Use Elastic Load Balancing to distribute traffic across the instances in your Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html) in the Amazon EC2 Auto Scaling User Guide.
    public var targetGroupARNs: [Swift.String]?
    /// A policy or a list of policies that are used to select the instance to terminate. These policies are executed in the order that you list them. For more information, see [Configure termination policies for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html) in the Amazon EC2 Auto Scaling User Guide. Valid values: Default | AllocationStrategy | ClosestToNextInstanceHour | NewestInstance | OldestInstance | OldestLaunchConfiguration | OldestLaunchTemplate | arn:aws:lambda:region:account-id:function:my-function:my-alias
    public var terminationPolicies: [Swift.String]?
    /// The list of traffic sources to attach to this Auto Scaling group. You can use any of the following as traffic sources for an Auto Scaling group: Classic Load Balancer, Application Load Balancer, Gateway Load Balancer, Network Load Balancer, and VPC Lattice.
    public var trafficSources: [AutoScalingClientTypes.TrafficSourceIdentifier]?
    /// A comma-separated list of subnet IDs for a virtual private cloud (VPC) where instances in the Auto Scaling group can be created. If you specify VPCZoneIdentifier with AvailabilityZones, the subnets that you specify must reside in those Availability Zones.
    public var vpcZoneIdentifier: Swift.String?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        availabilityZoneDistribution: AutoScalingClientTypes.AvailabilityZoneDistribution? = nil,
        availabilityZones: [Swift.String]? = nil,
        capacityRebalance: Swift.Bool? = nil,
        context: Swift.String? = nil,
        defaultCooldown: Swift.Int? = nil,
        defaultInstanceWarmup: Swift.Int? = nil,
        desiredCapacity: Swift.Int? = nil,
        desiredCapacityType: Swift.String? = nil,
        healthCheckGracePeriod: Swift.Int? = nil,
        healthCheckType: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        instanceMaintenancePolicy: AutoScalingClientTypes.InstanceMaintenancePolicy? = nil,
        launchConfigurationName: Swift.String? = nil,
        launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
        lifecycleHookSpecificationList: [AutoScalingClientTypes.LifecycleHookSpecification]? = nil,
        loadBalancerNames: [Swift.String]? = nil,
        maxInstanceLifetime: Swift.Int? = nil,
        maxSize: Swift.Int? = nil,
        minSize: Swift.Int? = nil,
        mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy? = nil,
        newInstancesProtectedFromScaleIn: Swift.Bool? = nil,
        placementGroup: Swift.String? = nil,
        serviceLinkedRoleARN: Swift.String? = nil,
        tags: [AutoScalingClientTypes.Tag]? = nil,
        targetGroupARNs: [Swift.String]? = nil,
        terminationPolicies: [Swift.String]? = nil,
        trafficSources: [AutoScalingClientTypes.TrafficSourceIdentifier]? = nil,
        vpcZoneIdentifier: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.availabilityZoneDistribution = availabilityZoneDistribution
        self.availabilityZones = availabilityZones
        self.capacityRebalance = capacityRebalance
        self.context = context
        self.defaultCooldown = defaultCooldown
        self.defaultInstanceWarmup = defaultInstanceWarmup
        self.desiredCapacity = desiredCapacity
        self.desiredCapacityType = desiredCapacityType
        self.healthCheckGracePeriod = healthCheckGracePeriod
        self.healthCheckType = healthCheckType
        self.instanceId = instanceId
        self.instanceMaintenancePolicy = instanceMaintenancePolicy
        self.launchConfigurationName = launchConfigurationName
        self.launchTemplate = launchTemplate
        self.lifecycleHookSpecificationList = lifecycleHookSpecificationList
        self.loadBalancerNames = loadBalancerNames
        self.maxInstanceLifetime = maxInstanceLifetime
        self.maxSize = maxSize
        self.minSize = minSize
        self.mixedInstancesPolicy = mixedInstancesPolicy
        self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
        self.placementGroup = placementGroup
        self.serviceLinkedRoleARN = serviceLinkedRoleARN
        self.tags = tags
        self.targetGroupARNs = targetGroupARNs
        self.terminationPolicies = terminationPolicies
        self.trafficSources = trafficSources
        self.vpcZoneIdentifier = vpcZoneIdentifier
    }
}

extension AutoScalingClientTypes {

    /// Describes information used to set up an Amazon EBS volume specified in a block device mapping.
    public struct Ebs: Swift.Sendable {
        /// Indicates whether the volume is deleted on instance termination. For Amazon EC2 Auto Scaling, the default value is true.
        public var deleteOnTermination: Swift.Bool?
        /// Specifies whether the volume should be encrypted. Encrypted EBS volumes can only be attached to instances that support Amazon EBS encryption. For more information, see [Requirements for Amazon EBS encryption](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-encryption-requirements.html) in the Amazon EBS User Guide. If your AMI uses encrypted volumes, you can also only launch it on supported instance types. If you are creating a volume from a snapshot, you cannot create an unencrypted volume from an encrypted snapshot. Also, you cannot specify a KMS key ID when using a launch configuration. If you enable encryption by default, the EBS volumes that you create are always encrypted, either using the Amazon Web Services managed KMS key or a customer-managed KMS key, regardless of whether the snapshot was encrypted. For more information, see [Use Amazon Web Services KMS keys to encrypt Amazon EBS volumes](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-data-protection.html#encryption) in the Amazon EC2 Auto Scaling User Guide.
        public var encrypted: Swift.Bool?
        /// The number of input/output (I/O) operations per second (IOPS) to provision for the volume. For gp3 and io1 volumes, this represents the number of IOPS that are provisioned for the volume. For gp2 volumes, this represents the baseline performance of the volume and the rate at which the volume accumulates I/O credits for bursting. The following are the supported values for each volume type:
        ///
        /// * gp3: 3,000-16,000 IOPS
        ///
        /// * io1: 100-64,000 IOPS
        ///
        ///
        /// For io1 volumes, we guarantee 64,000 IOPS only for [Instances built on the Amazon Web Services Nitro System](https://docs.aws.amazon.com/ec2/latest/instancetypes/ec2-nitro-instances.html). Other instance families guarantee performance up to 32,000 IOPS. Iops is supported when the volume type is gp3 or io1 and required only when the volume type is io1. (Not used with standard, gp2, st1, or sc1 volumes.)
        public var iops: Swift.Int?
        /// The snapshot ID of the volume to use. You must specify either a VolumeSize or a SnapshotId.
        public var snapshotId: Swift.String?
        /// The throughput (MiBps) to provision for a gp3 volume.
        public var throughput: Swift.Int?
        /// The volume size, in GiBs. The following are the supported volumes sizes for each volume type:
        ///
        /// * gp2 and gp3: 1-16,384
        ///
        /// * io1: 4-16,384
        ///
        /// * st1 and sc1: 125-16,384
        ///
        /// * standard: 1-1,024
        ///
        ///
        /// You must specify either a SnapshotId or a VolumeSize. If you specify both SnapshotId and VolumeSize, the volume size must be equal or greater than the size of the snapshot.
        public var volumeSize: Swift.Int?
        /// The volume type. For more information, see [Amazon EBS volume types](https://docs.aws.amazon.com/ebs/latest/userguide/ebs-volume-types.html) in the Amazon EBS User Guide. Valid values: standard | io1 | gp2 | st1 | sc1 | gp3
        public var volumeType: Swift.String?

        public init(
            deleteOnTermination: Swift.Bool? = nil,
            encrypted: Swift.Bool? = nil,
            iops: Swift.Int? = nil,
            snapshotId: Swift.String? = nil,
            throughput: Swift.Int? = nil,
            volumeSize: Swift.Int? = nil,
            volumeType: Swift.String? = nil
        )
        {
            self.deleteOnTermination = deleteOnTermination
            self.encrypted = encrypted
            self.iops = iops
            self.snapshotId = snapshotId
            self.throughput = throughput
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes a block device mapping.
    public struct BlockDeviceMapping: Swift.Sendable {
        /// The device name assigned to the volume (for example, /dev/sdh or xvdh). For more information, see [Device naming on Linux instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/device_naming.html) in the Amazon EC2 User Guide for Linux Instances. To define a block device mapping, set the device name and exactly one of the following properties: Ebs, NoDevice, or VirtualName.
        /// This member is required.
        public var deviceName: Swift.String?
        /// Information to attach an EBS volume to an instance at launch.
        public var ebs: AutoScalingClientTypes.Ebs?
        /// Setting this value to true prevents a volume that is included in the block device mapping of the AMI from being mapped to the specified device name at launch. If NoDevice is true for the root device, instances might fail the EC2 health check. In that case, Amazon EC2 Auto Scaling launches replacement instances.
        public var noDevice: Swift.Bool?
        /// The name of the instance store volume (virtual device) to attach to an instance at launch. The name must be in the form ephemeralX where X is a number starting from zero (0), for example, ephemeral0.
        public var virtualName: Swift.String?

        public init(
            deviceName: Swift.String? = nil,
            ebs: AutoScalingClientTypes.Ebs? = nil,
            noDevice: Swift.Bool? = nil,
            virtualName: Swift.String? = nil
        )
        {
            self.deviceName = deviceName
            self.ebs = ebs
            self.noDevice = noDevice
            self.virtualName = virtualName
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes whether detailed monitoring is enabled for the Auto Scaling instances.
    public struct InstanceMonitoring: Swift.Sendable {
        /// If true, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
        public var enabled: Swift.Bool?

        public init(
            enabled: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
        }
    }
}

extension AutoScalingClientTypes {

    public enum InstanceMetadataEndpointState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceMetadataEndpointState] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "disabled"
            case .enabled: return "enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    public enum InstanceMetadataHttpTokensState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `optional`
        case `required`
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceMetadataHttpTokensState] {
            return [
                .optional,
                .required
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .optional: return "optional"
            case .required: return "required"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    /// The metadata options for the instances. For more information, see [Configure the instance metadata options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds) in the Amazon EC2 Auto Scaling User Guide.
    public struct InstanceMetadataOptions: Swift.Sendable {
        /// This parameter enables or disables the HTTP metadata endpoint on your instances. If the parameter is not specified, the default state is enabled. If you specify a value of disabled, you will not be able to access your instance metadata.
        public var httpEndpoint: AutoScalingClientTypes.InstanceMetadataEndpointState?
        /// The desired HTTP PUT response hop limit for instance metadata requests. The larger the number, the further instance metadata requests can travel. Default: 1
        public var httpPutResponseHopLimit: Swift.Int?
        /// The state of token usage for your instance metadata requests. If the parameter is not specified in the request, the default state is optional. If the state is optional, you can choose to retrieve instance metadata with or without a signed token header on your request. If you retrieve the IAM role credentials without a token, the version 1.0 role credentials are returned. If you retrieve the IAM role credentials using a valid signed token, the version 2.0 role credentials are returned. If the state is required, you must send a signed token header with any instance metadata retrieval requests. In this state, retrieving the IAM role credentials always returns the version 2.0 credentials; the version 1.0 credentials are not available.
        public var httpTokens: AutoScalingClientTypes.InstanceMetadataHttpTokensState?

        public init(
            httpEndpoint: AutoScalingClientTypes.InstanceMetadataEndpointState? = nil,
            httpPutResponseHopLimit: Swift.Int? = nil,
            httpTokens: AutoScalingClientTypes.InstanceMetadataHttpTokensState? = nil
        )
        {
            self.httpEndpoint = httpEndpoint
            self.httpPutResponseHopLimit = httpPutResponseHopLimit
            self.httpTokens = httpTokens
        }
    }
}

public struct CreateLaunchConfigurationInput: Swift.Sendable {
    /// Specifies whether to assign a public IPv4 address to the group's instances. If the instance is launched into a default subnet, the default is to assign a public IPv4 address, unless you disabled the option to assign a public IPv4 address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IPv4 address, unless you enabled the option to assign a public IPv4 address on the subnet. If you specify true, each instance in the Auto Scaling group receives a unique public IPv4 address. For more information, see [Provide network connectivity for your Auto Scaling instances using Amazon VPC](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html) in the Amazon EC2 Auto Scaling User Guide. If you specify this property, you must specify at least one subnet for VPCZoneIdentifier when you create your group.
    public var associatePublicIpAddress: Swift.Bool?
    /// The block device mapping entries that define the block devices to attach to the instances at launch. By default, the block devices specified in the block device mapping for the AMI are used. For more information, see [Block device mappings](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html) in the Amazon EC2 User Guide for Linux Instances.
    public var blockDeviceMappings: [AutoScalingClientTypes.BlockDeviceMapping]?
    /// Available for backward compatibility.
    public var classicLinkVPCId: Swift.String?
    /// Available for backward compatibility.
    public var classicLinkVPCSecurityGroups: [Swift.String]?
    /// Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false). The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional fees are incurred when you enable EBS optimization for an instance type that is not EBS-optimized by default. For more information, see [Amazon EBS-optimized instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html) in the Amazon EC2 User Guide for Linux Instances. The default value is false.
    public var ebsOptimized: Swift.Bool?
    /// The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. For more information, see [IAM role for applications that run on Amazon EC2 instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html) in the Amazon EC2 Auto Scaling User Guide.
    public var iamInstanceProfile: Swift.String?
    /// The ID of the Amazon Machine Image (AMI) that was assigned during registration. For more information, see [Find a Linux AMI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html) in the Amazon EC2 User Guide for Linux Instances. If you specify InstanceId, an ImageId is not required.
    public var imageId: Swift.String?
    /// The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, except for the block device mapping. To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request. For more information, see [Create a launch configuration](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html) in the Amazon EC2 Auto Scaling User Guide.
    public var instanceId: Swift.String?
    /// Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring. The default value is true (enabled). When detailed monitoring is enabled, Amazon CloudWatch generates metrics every minute and your account is charged a fee. When you disable detailed monitoring, CloudWatch generates metrics every 5 minutes. For more information, see [Configure monitoring for Auto Scaling instances](https://docs.aws.amazon.com/autoscaling/latest/userguide/enable-as-instance-metrics.html) in the Amazon EC2 Auto Scaling User Guide.
    public var instanceMonitoring: AutoScalingClientTypes.InstanceMonitoring?
    /// Specifies the instance type of the EC2 instance. For information about available instance types, see [Available instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes) in the Amazon EC2 User Guide for Linux Instances. If you specify InstanceId, an InstanceType is not required.
    public var instanceType: Swift.String?
    /// The ID of the kernel associated with the AMI. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see [User provided kernels](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html) in the Amazon EC2 User Guide for Linux Instances.
    public var kernelId: Swift.String?
    /// The name of the key pair. For more information, see [Amazon EC2 key pairs and Amazon EC2 instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the Amazon EC2 User Guide for Linux Instances.
    public var keyName: Swift.String?
    /// The name of the launch configuration. This name must be unique per Region per account.
    /// This member is required.
    public var launchConfigurationName: Swift.String?
    /// The metadata options for the instances. For more information, see [Configure the instance metadata options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds) in the Amazon EC2 Auto Scaling User Guide.
    public var metadataOptions: AutoScalingClientTypes.InstanceMetadataOptions?
    /// The tenancy of the instance, either default or dedicated. An instance with dedicated tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC. To launch dedicated instances into a shared tenancy VPC (a VPC with the instance placement tenancy attribute set to default), you must set the value of this property to dedicated. If you specify PlacementTenancy, you must specify at least one subnet for VPCZoneIdentifier when you create your group. Valid values: default | dedicated
    public var placementTenancy: Swift.String?
    /// The ID of the RAM disk to select. We recommend that you use PV-GRUB instead of kernels and RAM disks. For more information, see [User provided kernels](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/UserProvidedKernels.html) in the Amazon EC2 User Guide for Linux Instances.
    public var ramdiskId: Swift.String?
    /// A list that contains the security group IDs to assign to the instances in the Auto Scaling group. For more information, see [Control traffic to your Amazon Web Services resources using security groups](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-security-groups.html) in the Amazon Virtual Private Cloud User Guide.
    public var securityGroups: [Swift.String]?
    /// The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see [Request Spot Instances for fault-tolerant and flexible applications](https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-template-spot-instances.html) in the Amazon EC2 Auto Scaling User Guide. Valid Range: Minimum value of 0.001 When you change your maximum price by creating a new launch configuration, running instances will continue to run as long as the maximum price for those running instances is higher than the current Spot price.
    public var spotPrice: Swift.String?
    /// The user data to make available to the launched EC2 instances. For more information, see [Instance metadata and user data](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) (Linux) and [Instance metadata and user data](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html) (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.
    public var userData: Swift.String?

    public init(
        associatePublicIpAddress: Swift.Bool? = nil,
        blockDeviceMappings: [AutoScalingClientTypes.BlockDeviceMapping]? = nil,
        classicLinkVPCId: Swift.String? = nil,
        classicLinkVPCSecurityGroups: [Swift.String]? = nil,
        ebsOptimized: Swift.Bool? = nil,
        iamInstanceProfile: Swift.String? = nil,
        imageId: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        instanceMonitoring: AutoScalingClientTypes.InstanceMonitoring? = nil,
        instanceType: Swift.String? = nil,
        kernelId: Swift.String? = nil,
        keyName: Swift.String? = nil,
        launchConfigurationName: Swift.String? = nil,
        metadataOptions: AutoScalingClientTypes.InstanceMetadataOptions? = nil,
        placementTenancy: Swift.String? = nil,
        ramdiskId: Swift.String? = nil,
        securityGroups: [Swift.String]? = nil,
        spotPrice: Swift.String? = nil,
        userData: Swift.String? = nil
    )
    {
        self.associatePublicIpAddress = associatePublicIpAddress
        self.blockDeviceMappings = blockDeviceMappings
        self.classicLinkVPCId = classicLinkVPCId
        self.classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups
        self.ebsOptimized = ebsOptimized
        self.iamInstanceProfile = iamInstanceProfile
        self.imageId = imageId
        self.instanceId = instanceId
        self.instanceMonitoring = instanceMonitoring
        self.instanceType = instanceType
        self.kernelId = kernelId
        self.keyName = keyName
        self.launchConfigurationName = launchConfigurationName
        self.metadataOptions = metadataOptions
        self.placementTenancy = placementTenancy
        self.ramdiskId = ramdiskId
        self.securityGroups = securityGroups
        self.spotPrice = spotPrice
        self.userData = userData
    }
}

/// The operation can't be performed because the resource is in use.
public struct ResourceInUseFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        ///
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceInUse" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateOrUpdateTagsInput: Swift.Sendable {
    /// One or more tags.
    /// This member is required.
    public var tags: [AutoScalingClientTypes.Tag]?

    public init(
        tags: [AutoScalingClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

/// The operation can't be performed because there are scaling activities in progress.
public struct ScalingActivityInProgressFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        ///
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ScalingActivityInProgress" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DeleteAutoScalingGroupInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// Specifies that the group is to be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This action also deletes any outstanding lifecycle actions associated with the group.
    public var forceDelete: Swift.Bool?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        forceDelete: Swift.Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.forceDelete = forceDelete
    }
}

public struct DeleteLaunchConfigurationInput: Swift.Sendable {
    /// The name of the launch configuration.
    /// This member is required.
    public var launchConfigurationName: Swift.String?

    public init(
        launchConfigurationName: Swift.String? = nil
    )
    {
        self.launchConfigurationName = launchConfigurationName
    }
}

public struct DeleteLifecycleHookInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The name of the lifecycle hook.
    /// This member is required.
    public var lifecycleHookName: Swift.String?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        lifecycleHookName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.lifecycleHookName = lifecycleHookName
    }
}

public struct DeleteLifecycleHookOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteNotificationConfigurationInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The Amazon Resource Name (ARN) of the Amazon SNS topic.
    /// This member is required.
    public var topicARN: Swift.String?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        topicARN: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.topicARN = topicARN
    }
}

public struct DeletePolicyInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    public var autoScalingGroupName: Swift.String?
    /// The name or Amazon Resource Name (ARN) of the policy.
    /// This member is required.
    public var policyName: Swift.String?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.policyName = policyName
    }
}

public struct DeleteScheduledActionInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The name of the action to delete.
    /// This member is required.
    public var scheduledActionName: Swift.String?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scheduledActionName = scheduledActionName
    }
}

public struct DeleteTagsInput: Swift.Sendable {
    /// One or more tags.
    /// This member is required.
    public var tags: [AutoScalingClientTypes.Tag]?

    public init(
        tags: [AutoScalingClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

public struct DeleteWarmPoolInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// Specifies that the warm pool is to be deleted along with all of its associated instances, without waiting for all instances to be terminated. This parameter also deletes any outstanding lifecycle actions associated with the warm pool instances.
    public var forceDelete: Swift.Bool?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        forceDelete: Swift.Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.forceDelete = forceDelete
    }
}

public struct DeleteWarmPoolOutput: Swift.Sendable {

    public init() { }
}

public struct DescribeAccountLimitsOutput: Swift.Sendable {
    /// The maximum number of groups allowed for your account. The default is 200 groups per Region.
    public var maxNumberOfAutoScalingGroups: Swift.Int?
    /// The maximum number of launch configurations allowed for your account. The default is 200 launch configurations per Region.
    public var maxNumberOfLaunchConfigurations: Swift.Int?
    /// The current number of groups for your account.
    public var numberOfAutoScalingGroups: Swift.Int?
    /// The current number of launch configurations for your account.
    public var numberOfLaunchConfigurations: Swift.Int?

    public init(
        maxNumberOfAutoScalingGroups: Swift.Int? = nil,
        maxNumberOfLaunchConfigurations: Swift.Int? = nil,
        numberOfAutoScalingGroups: Swift.Int? = nil,
        numberOfLaunchConfigurations: Swift.Int? = nil
    )
    {
        self.maxNumberOfAutoScalingGroups = maxNumberOfAutoScalingGroups
        self.maxNumberOfLaunchConfigurations = maxNumberOfLaunchConfigurations
        self.numberOfAutoScalingGroups = numberOfAutoScalingGroups
        self.numberOfLaunchConfigurations = numberOfLaunchConfigurations
    }
}

public struct DescribeAdjustmentTypesOutput: Swift.Sendable {
    /// The policy adjustment types.
    public var adjustmentTypes: [AutoScalingClientTypes.AdjustmentType]?

    public init(
        adjustmentTypes: [AutoScalingClientTypes.AdjustmentType]? = nil
    )
    {
        self.adjustmentTypes = adjustmentTypes
    }
}

/// The NextToken value is not valid.
public struct InvalidNextToken: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        ///
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidNextToken" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AutoScalingClientTypes {

    /// Describes a filter that is used to return a more specific list of results from a describe operation. If you specify multiple filters, the filters are automatically logically joined with an AND, and the request returns only the results that match all of the specified filters. For more information, see [Tag Auto Scaling groups and instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html) in the Amazon EC2 Auto Scaling User Guide.
    public struct Filter: Swift.Sendable {
        /// The name of the filter. The valid values for Name depend on which API operation you're using with the filter ([DescribeAutoScalingGroups](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_DescribeAutoScalingGroups.html) or [DescribeTags](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_DescribeTags.html)). DescribeAutoScalingGroups Valid values for Name include the following:
        ///
        /// * tag-key - Accepts tag keys. The results only include information about the Auto Scaling groups associated with these tag keys.
        ///
        /// * tag-value - Accepts tag values. The results only include information about the Auto Scaling groups associated with these tag values.
        ///
        /// * tag: - Accepts the key/value combination of the tag. Use the tag key in the filter name and the tag value as the filter value. The results only include information about the Auto Scaling groups associated with the specified key/value combination.
        ///
        ///
        /// DescribeTags Valid values for Name include the following:
        ///
        /// * auto-scaling-group - Accepts the names of Auto Scaling groups. The results only include information about the tags associated with these Auto Scaling groups.
        ///
        /// * key - Accepts tag keys. The results only include information about the tags associated with these tag keys.
        ///
        /// * value - Accepts tag values. The results only include information about the tags associated with these tag values.
        ///
        /// * propagate-at-launch - Accepts a Boolean value, which specifies whether tags propagate to instances at launch. The results only include information about the tags associated with the specified Boolean value.
        public var name: Swift.String?
        /// One or more filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are automatically logically joined with an OR, and the request returns all results that match any of the specified values. For example, specify "tag:environment" for the filter name and "production,development" for the filter values to find Auto Scaling groups with the tag "environment=production" or "environment=development".
        public var values: [Swift.String]?

        public init(
            name: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }
}

public struct DescribeAutoScalingGroupsInput: Swift.Sendable {
    /// The names of the Auto Scaling groups. By default, you can only specify up to 50 names. You can optionally increase this limit using the MaxRecords property. If you omit this property, all Auto Scaling groups are described.
    public var autoScalingGroupNames: [Swift.String]?
    /// One or more filters to limit the results based on specific tags.
    public var filters: [AutoScalingClientTypes.Filter]?
    /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init(
        autoScalingGroupNames: [Swift.String]? = nil,
        filters: [AutoScalingClientTypes.Filter]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupNames = autoScalingGroupNames
        self.filters = filters
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension AutoScalingClientTypes {

    /// Describes an enabled Auto Scaling group metric.
    public struct EnabledMetric: Swift.Sendable {
        /// The granularity of the metric. The only valid value is 1Minute.
        public var granularity: Swift.String?
        /// One of the following metrics:
        ///
        /// * GroupMinSize
        ///
        /// * GroupMaxSize
        ///
        /// * GroupDesiredCapacity
        ///
        /// * GroupInServiceInstances
        ///
        /// * GroupPendingInstances
        ///
        /// * GroupStandbyInstances
        ///
        /// * GroupTerminatingInstances
        ///
        /// * GroupTotalInstances
        ///
        /// * GroupInServiceCapacity
        ///
        /// * GroupPendingCapacity
        ///
        /// * GroupStandbyCapacity
        ///
        /// * GroupTerminatingCapacity
        ///
        /// * GroupTotalCapacity
        ///
        /// * WarmPoolDesiredCapacity
        ///
        /// * WarmPoolWarmedCapacity
        ///
        /// * WarmPoolPendingCapacity
        ///
        /// * WarmPoolTerminatingCapacity
        ///
        /// * WarmPoolTotalCapacity
        ///
        /// * GroupAndWarmPoolDesiredCapacity
        ///
        /// * GroupAndWarmPoolTotalCapacity
        ///
        ///
        /// For more information, see [Amazon CloudWatch metrics for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-metrics.html) in the Amazon EC2 Auto Scaling User Guide.
        public var metric: Swift.String?

        public init(
            granularity: Swift.String? = nil,
            metric: Swift.String? = nil
        )
        {
            self.granularity = granularity
            self.metric = metric
        }
    }
}

extension AutoScalingClientTypes {

    public enum LifecycleState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case detached
        case detaching
        case enteringStandby
        case inService
        case pending
        case pendingProceed
        case pendingWait
        case quarantined
        case standby
        case terminated
        case terminating
        case terminatingProceed
        case terminatingWait
        case warmedHibernated
        case warmedPending
        case warmedPendingProceed
        case warmedPendingWait
        case warmedRunning
        case warmedStopped
        case warmedTerminated
        case warmedTerminating
        case warmedTerminatingProceed
        case warmedTerminatingWait
        case sdkUnknown(Swift.String)

        public static var allCases: [LifecycleState] {
            return [
                .detached,
                .detaching,
                .enteringStandby,
                .inService,
                .pending,
                .pendingProceed,
                .pendingWait,
                .quarantined,
                .standby,
                .terminated,
                .terminating,
                .terminatingProceed,
                .terminatingWait,
                .warmedHibernated,
                .warmedPending,
                .warmedPendingProceed,
                .warmedPendingWait,
                .warmedRunning,
                .warmedStopped,
                .warmedTerminated,
                .warmedTerminating,
                .warmedTerminatingProceed,
                .warmedTerminatingWait
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .detached: return "Detached"
            case .detaching: return "Detaching"
            case .enteringStandby: return "EnteringStandby"
            case .inService: return "InService"
            case .pending: return "Pending"
            case .pendingProceed: return "Pending:Proceed"
            case .pendingWait: return "Pending:Wait"
            case .quarantined: return "Quarantined"
            case .standby: return "Standby"
            case .terminated: return "Terminated"
            case .terminating: return "Terminating"
            case .terminatingProceed: return "Terminating:Proceed"
            case .terminatingWait: return "Terminating:Wait"
            case .warmedHibernated: return "Warmed:Hibernated"
            case .warmedPending: return "Warmed:Pending"
            case .warmedPendingProceed: return "Warmed:Pending:Proceed"
            case .warmedPendingWait: return "Warmed:Pending:Wait"
            case .warmedRunning: return "Warmed:Running"
            case .warmedStopped: return "Warmed:Stopped"
            case .warmedTerminated: return "Warmed:Terminated"
            case .warmedTerminating: return "Warmed:Terminating"
            case .warmedTerminatingProceed: return "Warmed:Terminating:Proceed"
            case .warmedTerminatingWait: return "Warmed:Terminating:Wait"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes an EC2 instance.
    public struct Instance: Swift.Sendable {
        /// The Availability Zone in which the instance is running.
        /// This member is required.
        public var availabilityZone: Swift.String?
        /// The last reported health status of the instance. Healthy means that the instance is healthy and should remain in service. Unhealthy means that the instance is unhealthy and that Amazon EC2 Auto Scaling should terminate and replace it.
        /// This member is required.
        public var healthStatus: Swift.String?
        /// The ID of the instance.
        /// This member is required.
        public var instanceId: Swift.String?
        /// The instance type of the EC2 instance.
        public var instanceType: Swift.String?
        /// The launch configuration associated with the instance.
        public var launchConfigurationName: Swift.String?
        /// The launch template for the instance.
        public var launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
        /// A description of the current lifecycle state. The Quarantined state is not used. For more information, see [Amazon EC2 Auto Scaling instance lifecycle](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-lifecycle.html) in the Amazon EC2 Auto Scaling User Guide.
        /// This member is required.
        public var lifecycleState: AutoScalingClientTypes.LifecycleState?
        /// Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
        /// This member is required.
        public var protectedFromScaleIn: Swift.Bool?
        /// The number of capacity units contributed by the instance based on its instance type. Valid Range: Minimum value of 1. Maximum value of 999.
        public var weightedCapacity: Swift.String?

        public init(
            availabilityZone: Swift.String? = nil,
            healthStatus: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            launchConfigurationName: Swift.String? = nil,
            launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
            lifecycleState: AutoScalingClientTypes.LifecycleState? = nil,
            protectedFromScaleIn: Swift.Bool? = nil,
            weightedCapacity: Swift.String? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.healthStatus = healthStatus
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.launchConfigurationName = launchConfigurationName
            self.launchTemplate = launchTemplate
            self.lifecycleState = lifecycleState
            self.protectedFromScaleIn = protectedFromScaleIn
            self.weightedCapacity = weightedCapacity
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes an auto scaling process that has been suspended. For more information, see [Types of processes](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html#process-types) in the Amazon EC2 Auto Scaling User Guide.
    public struct SuspendedProcess: Swift.Sendable {
        /// The name of the suspended process.
        public var processName: Swift.String?
        /// The reason that the process was suspended.
        public var suspensionReason: Swift.String?

        public init(
            processName: Swift.String? = nil,
            suspensionReason: Swift.String? = nil
        )
        {
            self.processName = processName
            self.suspensionReason = suspensionReason
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes a tag for an Auto Scaling group.
    public struct TagDescription: Swift.Sendable {
        /// The tag key.
        public var key: Swift.String?
        /// Determines whether the tag is added to new instances as they are launched in the group.
        public var propagateAtLaunch: Swift.Bool?
        /// The name of the group.
        public var resourceId: Swift.String?
        /// The type of resource. The only supported value is auto-scaling-group.
        public var resourceType: Swift.String?
        /// The tag value.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            propagateAtLaunch: Swift.Bool? = nil,
            resourceId: Swift.String? = nil,
            resourceType: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.propagateAtLaunch = propagateAtLaunch
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.value = value
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes an instance reuse policy for a warm pool. For more information, see [Warm pools for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-warm-pools.html) in the Amazon EC2 Auto Scaling User Guide.
    public struct InstanceReusePolicy: Swift.Sendable {
        /// Specifies whether instances in the Auto Scaling group can be returned to the warm pool on scale in.
        public var reuseOnScaleIn: Swift.Bool?

        public init(
            reuseOnScaleIn: Swift.Bool? = nil
        )
        {
            self.reuseOnScaleIn = reuseOnScaleIn
        }
    }
}

extension AutoScalingClientTypes {

    public enum WarmPoolState: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case hibernated
        case running
        case stopped
        case sdkUnknown(Swift.String)

        public static var allCases: [WarmPoolState] {
            return [
                .hibernated,
                .running,
                .stopped
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .hibernated: return "Hibernated"
            case .running: return "Running"
            case .stopped: return "Stopped"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    public enum WarmPoolStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case pendingdelete
        case sdkUnknown(Swift.String)

        public static var allCases: [WarmPoolStatus] {
            return [
                .pendingdelete
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .pendingdelete: return "PendingDelete"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes a warm pool configuration.
    public struct WarmPoolConfiguration: Swift.Sendable {
        /// The instance reuse policy.
        public var instanceReusePolicy: AutoScalingClientTypes.InstanceReusePolicy?
        /// The maximum number of instances that are allowed to be in the warm pool or in any state except Terminated for the Auto Scaling group.
        public var maxGroupPreparedCapacity: Swift.Int?
        /// The minimum number of instances to maintain in the warm pool.
        public var minSize: Swift.Int?
        /// The instance state to transition to after the lifecycle actions are complete.
        public var poolState: AutoScalingClientTypes.WarmPoolState?
        /// The status of a warm pool that is marked for deletion.
        public var status: AutoScalingClientTypes.WarmPoolStatus?

        public init(
            instanceReusePolicy: AutoScalingClientTypes.InstanceReusePolicy? = nil,
            maxGroupPreparedCapacity: Swift.Int? = nil,
            minSize: Swift.Int? = nil,
            poolState: AutoScalingClientTypes.WarmPoolState? = nil,
            status: AutoScalingClientTypes.WarmPoolStatus? = nil
        )
        {
            self.instanceReusePolicy = instanceReusePolicy
            self.maxGroupPreparedCapacity = maxGroupPreparedCapacity
            self.minSize = minSize
            self.poolState = poolState
            self.status = status
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes an Auto Scaling group.
    public struct AutoScalingGroup: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the Auto Scaling group.
        public var autoScalingGroupARN: Swift.String?
        /// The name of the Auto Scaling group.
        /// This member is required.
        public var autoScalingGroupName: Swift.String?
        /// The instance capacity distribution across Availability Zones.
        public var availabilityZoneDistribution: AutoScalingClientTypes.AvailabilityZoneDistribution?
        /// One or more Availability Zones for the group.
        /// This member is required.
        public var availabilityZones: [Swift.String]?
        /// Indicates whether Capacity Rebalancing is enabled.
        public var capacityRebalance: Swift.Bool?
        /// Reserved.
        public var context: Swift.String?
        /// The date and time the group was created.
        /// This member is required.
        public var createdTime: Foundation.Date?
        /// The duration of the default cooldown period, in seconds.
        /// This member is required.
        public var defaultCooldown: Swift.Int?
        /// The duration of the default instance warmup, in seconds.
        public var defaultInstanceWarmup: Swift.Int?
        /// The desired size of the group.
        /// This member is required.
        public var desiredCapacity: Swift.Int?
        /// The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports DesiredCapacityType for attribute-based instance type selection only.
        public var desiredCapacityType: Swift.String?
        /// The metrics enabled for the group.
        public var enabledMetrics: [AutoScalingClientTypes.EnabledMetric]?
        /// The duration of the health check grace period, in seconds.
        public var healthCheckGracePeriod: Swift.Int?
        /// A comma-separated value string of one or more health check types.
        /// This member is required.
        public var healthCheckType: Swift.String?
        /// An instance maintenance policy.
        public var instanceMaintenancePolicy: AutoScalingClientTypes.InstanceMaintenancePolicy?
        /// The EC2 instances associated with the group.
        public var instances: [AutoScalingClientTypes.Instance]?
        /// The name of the associated launch configuration.
        public var launchConfigurationName: Swift.String?
        /// The launch template for the group.
        public var launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
        /// One or more load balancers associated with the group.
        public var loadBalancerNames: [Swift.String]?
        /// The maximum amount of time, in seconds, that an instance can be in service. Valid Range: Minimum value of 0.
        public var maxInstanceLifetime: Swift.Int?
        /// The maximum size of the group.
        /// This member is required.
        public var maxSize: Swift.Int?
        /// The minimum size of the group.
        /// This member is required.
        public var minSize: Swift.Int?
        /// The mixed instances policy for the group.
        public var mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy?
        /// Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in.
        public var newInstancesProtectedFromScaleIn: Swift.Bool?
        /// The name of the placement group into which to launch your instances, if any.
        public var placementGroup: Swift.String?
        /// The predicted capacity of the group when it has a predictive scaling policy.
        public var predictedCapacity: Swift.Int?
        /// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other Amazon Web Services on your behalf.
        public var serviceLinkedRoleARN: Swift.String?
        /// The current state of the group when the [DeleteAutoScalingGroup](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_DeleteAutoScalingGroup.html) operation is in progress.
        public var status: Swift.String?
        /// The suspended processes associated with the group.
        public var suspendedProcesses: [AutoScalingClientTypes.SuspendedProcess]?
        /// The tags for the group.
        public var tags: [AutoScalingClientTypes.TagDescription]?
        /// The Amazon Resource Names (ARN) of the target groups for your load balancer.
        public var targetGroupARNs: [Swift.String]?
        /// The termination policies for the group.
        public var terminationPolicies: [Swift.String]?
        /// The traffic sources associated with this Auto Scaling group.
        public var trafficSources: [AutoScalingClientTypes.TrafficSourceIdentifier]?
        /// One or more subnet IDs, if applicable, separated by commas.
        public var vpcZoneIdentifier: Swift.String?
        /// The warm pool for the group.
        public var warmPoolConfiguration: AutoScalingClientTypes.WarmPoolConfiguration?
        /// The current size of the warm pool.
        public var warmPoolSize: Swift.Int?

        public init(
            autoScalingGroupARN: Swift.String? = nil,
            autoScalingGroupName: Swift.String? = nil,
            availabilityZoneDistribution: AutoScalingClientTypes.AvailabilityZoneDistribution? = nil,
            availabilityZones: [Swift.String]? = nil,
            capacityRebalance: Swift.Bool? = nil,
            context: Swift.String? = nil,
            createdTime: Foundation.Date? = nil,
            defaultCooldown: Swift.Int? = nil,
            defaultInstanceWarmup: Swift.Int? = nil,
            desiredCapacity: Swift.Int? = nil,
            desiredCapacityType: Swift.String? = nil,
            enabledMetrics: [AutoScalingClientTypes.EnabledMetric]? = nil,
            healthCheckGracePeriod: Swift.Int? = nil,
            healthCheckType: Swift.String? = nil,
            instanceMaintenancePolicy: AutoScalingClientTypes.InstanceMaintenancePolicy? = nil,
            instances: [AutoScalingClientTypes.Instance]? = nil,
            launchConfigurationName: Swift.String? = nil,
            launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
            loadBalancerNames: [Swift.String]? = nil,
            maxInstanceLifetime: Swift.Int? = nil,
            maxSize: Swift.Int? = nil,
            minSize: Swift.Int? = nil,
            mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy? = nil,
            newInstancesProtectedFromScaleIn: Swift.Bool? = nil,
            placementGroup: Swift.String? = nil,
            predictedCapacity: Swift.Int? = nil,
            serviceLinkedRoleARN: Swift.String? = nil,
            status: Swift.String? = nil,
            suspendedProcesses: [AutoScalingClientTypes.SuspendedProcess]? = nil,
            tags: [AutoScalingClientTypes.TagDescription]? = nil,
            targetGroupARNs: [Swift.String]? = nil,
            terminationPolicies: [Swift.String]? = nil,
            trafficSources: [AutoScalingClientTypes.TrafficSourceIdentifier]? = nil,
            vpcZoneIdentifier: Swift.String? = nil,
            warmPoolConfiguration: AutoScalingClientTypes.WarmPoolConfiguration? = nil,
            warmPoolSize: Swift.Int? = nil
        )
        {
            self.autoScalingGroupARN = autoScalingGroupARN
            self.autoScalingGroupName = autoScalingGroupName
            self.availabilityZoneDistribution = availabilityZoneDistribution
            self.availabilityZones = availabilityZones
            self.capacityRebalance = capacityRebalance
            self.context = context
            self.createdTime = createdTime
            self.defaultCooldown = defaultCooldown
            self.defaultInstanceWarmup = defaultInstanceWarmup
            self.desiredCapacity = desiredCapacity
            self.desiredCapacityType = desiredCapacityType
            self.enabledMetrics = enabledMetrics
            self.healthCheckGracePeriod = healthCheckGracePeriod
            self.healthCheckType = healthCheckType
            self.instanceMaintenancePolicy = instanceMaintenancePolicy
            self.instances = instances
            self.launchConfigurationName = launchConfigurationName
            self.launchTemplate = launchTemplate
            self.loadBalancerNames = loadBalancerNames
            self.maxInstanceLifetime = maxInstanceLifetime
            self.maxSize = maxSize
            self.minSize = minSize
            self.mixedInstancesPolicy = mixedInstancesPolicy
            self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
            self.placementGroup = placementGroup
            self.predictedCapacity = predictedCapacity
            self.serviceLinkedRoleARN = serviceLinkedRoleARN
            self.status = status
            self.suspendedProcesses = suspendedProcesses
            self.tags = tags
            self.targetGroupARNs = targetGroupARNs
            self.terminationPolicies = terminationPolicies
            self.trafficSources = trafficSources
            self.vpcZoneIdentifier = vpcZoneIdentifier
            self.warmPoolConfiguration = warmPoolConfiguration
            self.warmPoolSize = warmPoolSize
        }
    }
}

public struct DescribeAutoScalingGroupsOutput: Swift.Sendable {
    /// The groups.
    /// This member is required.
    public var autoScalingGroups: [AutoScalingClientTypes.AutoScalingGroup]?
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?

    public init(
        autoScalingGroups: [AutoScalingClientTypes.AutoScalingGroup]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroups = autoScalingGroups
        self.nextToken = nextToken
    }
}

public struct DescribeAutoScalingInstancesInput: Swift.Sendable {
    /// The IDs of the instances. If you omit this property, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error. Array Members: Maximum number of 50 items.
    public var instanceIds: [Swift.String]?
    /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 50.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init(
        instanceIds: [Swift.String]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceIds = instanceIds
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension AutoScalingClientTypes {

    /// Describes an EC2 instance associated with an Auto Scaling group.
    public struct AutoScalingInstanceDetails: Swift.Sendable {
        /// The name of the Auto Scaling group for the instance.
        /// This member is required.
        public var autoScalingGroupName: Swift.String?
        /// The Availability Zone for the instance.
        /// This member is required.
        public var availabilityZone: Swift.String?
        /// The last reported health status of this instance. Healthy means that the instance is healthy and should remain in service. Unhealthy means that the instance is unhealthy and Amazon EC2 Auto Scaling should terminate and replace it.
        /// This member is required.
        public var healthStatus: Swift.String?
        /// The ID of the instance.
        /// This member is required.
        public var instanceId: Swift.String?
        /// The instance type of the EC2 instance.
        public var instanceType: Swift.String?
        /// The launch configuration used to launch the instance. This value is not available if you attached the instance to the Auto Scaling group.
        public var launchConfigurationName: Swift.String?
        /// The launch template for the instance.
        public var launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
        /// The lifecycle state for the instance. The Quarantined state is not used. For more information, see [Amazon EC2 Auto Scaling instance lifecycle](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-lifecycle.html) in the Amazon EC2 Auto Scaling User Guide. Valid values: Pending | Pending:Wait | Pending:Proceed | Quarantined | InService | Terminating | Terminating:Wait | Terminating:Proceed | Terminated | Detaching | Detached | EnteringStandby | Standby | Warmed:Pending | Warmed:Pending:Wait | Warmed:Pending:Proceed | Warmed:Terminating | Warmed:Terminating:Wait | Warmed:Terminating:Proceed | Warmed:Terminated | Warmed:Stopped | Warmed:Running
        /// This member is required.
        public var lifecycleState: Swift.String?
        /// Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
        /// This member is required.
        public var protectedFromScaleIn: Swift.Bool?
        /// The number of capacity units contributed by the instance based on its instance type. Valid Range: Minimum value of 1. Maximum value of 999.
        public var weightedCapacity: Swift.String?

        public init(
            autoScalingGroupName: Swift.String? = nil,
            availabilityZone: Swift.String? = nil,
            healthStatus: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            instanceType: Swift.String? = nil,
            launchConfigurationName: Swift.String? = nil,
            launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
            lifecycleState: Swift.String? = nil,
            protectedFromScaleIn: Swift.Bool? = nil,
            weightedCapacity: Swift.String? = nil
        )
        {
            self.autoScalingGroupName = autoScalingGroupName
            self.availabilityZone = availabilityZone
            self.healthStatus = healthStatus
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.launchConfigurationName = launchConfigurationName
            self.launchTemplate = launchTemplate
            self.lifecycleState = lifecycleState
            self.protectedFromScaleIn = protectedFromScaleIn
            self.weightedCapacity = weightedCapacity
        }
    }
}

public struct DescribeAutoScalingInstancesOutput: Swift.Sendable {
    /// The instances.
    public var autoScalingInstances: [AutoScalingClientTypes.AutoScalingInstanceDetails]?
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?

    public init(
        autoScalingInstances: [AutoScalingClientTypes.AutoScalingInstanceDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingInstances = autoScalingInstances
        self.nextToken = nextToken
    }
}

public struct DescribeAutoScalingNotificationTypesOutput: Swift.Sendable {
    /// The notification types.
    public var autoScalingNotificationTypes: [Swift.String]?

    public init(
        autoScalingNotificationTypes: [Swift.String]? = nil
    )
    {
        self.autoScalingNotificationTypes = autoScalingNotificationTypes
    }
}

public struct DescribeInstanceRefreshesInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// One or more instance refresh IDs.
    public var instanceRefreshIds: [Swift.String]?
    /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        instanceRefreshIds: [Swift.String]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceRefreshIds = instanceRefreshIds
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension AutoScalingClientTypes {

    /// Describes the desired configuration for an instance refresh. If you specify a desired configuration, you must specify either a LaunchTemplate or a MixedInstancesPolicy.
    public struct DesiredConfiguration: Swift.Sendable {
        /// Describes the launch template and the version of the launch template that Amazon EC2 Auto Scaling uses to launch Amazon EC2 instances. For more information about launch templates, see [Launch templates](https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-templates.html) in the Amazon EC2 Auto Scaling User Guide.
        public var launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
        /// Use this structure to launch multiple instance types and On-Demand Instances and Spot Instances within a single Auto Scaling group. A mixed instances policy contains information that Amazon EC2 Auto Scaling can use to launch instances and help optimize your costs. For more information, see [Auto Scaling groups with multiple instance types and purchase options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html) in the Amazon EC2 Auto Scaling User Guide.
        public var mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy?

        public init(
            launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
            mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy? = nil
        )
        {
            self.launchTemplate = launchTemplate
            self.mixedInstancesPolicy = mixedInstancesPolicy
        }
    }
}

extension AutoScalingClientTypes {

    public enum ScaleInProtectedInstances: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ignore
        case refresh
        case wait
        case sdkUnknown(Swift.String)

        public static var allCases: [ScaleInProtectedInstances] {
            return [
                .ignore,
                .refresh,
                .wait
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ignore: return "Ignore"
            case .refresh: return "Refresh"
            case .wait: return "Wait"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    public enum StandbyInstances: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ignore
        case terminate
        case wait
        case sdkUnknown(Swift.String)

        public static var allCases: [StandbyInstances] {
            return [
                .ignore,
                .terminate,
                .wait
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ignore: return "Ignore"
            case .terminate: return "Terminate"
            case .wait: return "Wait"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes the preferences for an instance refresh.
    public struct RefreshPreferences: Swift.Sendable {
        /// (Optional) The CloudWatch alarm specification. CloudWatch alarms can be used to identify any issues and fail the operation if an alarm threshold is met.
        public var alarmSpecification: AutoScalingClientTypes.AlarmSpecification?
        /// (Optional) Indicates whether to roll back the Auto Scaling group to its previous configuration if the instance refresh fails or a CloudWatch alarm threshold is met. The default is false. A rollback is not supported in the following situations:
        ///
        /// * There is no desired configuration specified for the instance refresh.
        ///
        /// * The Auto Scaling group has a launch template that uses an Amazon Web Services Systems Manager parameter instead of an AMI ID for the ImageId property.
        ///
        /// * The Auto Scaling group uses the launch template's $Latest or $Default version.
        ///
        ///
        /// For more information, see [Undo changes with a rollback](https://docs.aws.amazon.com/autoscaling/ec2/userguide/instance-refresh-rollback.html) in the Amazon EC2 Auto Scaling User Guide.
        public var autoRollback: Swift.Bool?
        /// The amount of time, in seconds, to wait at the end of an instance refresh before the instance refresh is considered complete.
        public var bakeTime: Swift.Int?
        /// (Optional) The amount of time, in seconds, to wait after a checkpoint before continuing. This property is optional, but if you specify a value for it, you must also specify a value for CheckpointPercentages. If you specify a value for CheckpointPercentages and not for CheckpointDelay, the CheckpointDelay defaults to 3600 (1 hour).
        public var checkpointDelay: Swift.Int?
        /// (Optional) Threshold values for each checkpoint in ascending order. Each number must be unique. To replace all instances in the Auto Scaling group, the last number in the array must be 100. For usage examples, see [Add checkpoints to an instance refresh](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-adding-checkpoints-instance-refresh.html) in the Amazon EC2 Auto Scaling User Guide.
        public var checkpointPercentages: [Swift.Int]?
        /// A time period, in seconds, during which an instance refresh waits before moving on to replacing the next instance after a new instance enters the InService state. This property is not required for normal usage. Instead, use the DefaultInstanceWarmup property of the Auto Scaling group. The InstanceWarmup and DefaultInstanceWarmup properties work the same way. Only specify this property if you must override the DefaultInstanceWarmup property. If you do not specify this property, the instance warmup by default is the value of the DefaultInstanceWarmup property, if defined (which is recommended in all cases), or the HealthCheckGracePeriod property otherwise.
        public var instanceWarmup: Swift.Int?
        /// Specifies the maximum percentage of the group that can be in service and healthy, or pending, to support your workload when replacing instances. The value is expressed as a percentage of the desired capacity of the Auto Scaling group. Value range is 100 to 200. If you specify MaxHealthyPercentage, you must also specify MinHealthyPercentage, and the difference between them cannot be greater than 100. A larger range increases the number of instances that can be replaced at the same time. If you do not specify this property, the default is 100 percent, or the percentage set in the instance maintenance policy for the Auto Scaling group, if defined.
        public var maxHealthyPercentage: Swift.Int?
        /// Specifies the minimum percentage of the group to keep in service, healthy, and ready to use to support your workload to allow the operation to continue. The value is expressed as a percentage of the desired capacity of the Auto Scaling group. Value range is 0 to 100. If you do not specify this property, the default is 90 percent, or the percentage set in the instance maintenance policy for the Auto Scaling group, if defined.
        public var minHealthyPercentage: Swift.Int?
        /// Choose the behavior that you want Amazon EC2 Auto Scaling to use if instances protected from scale in are found. The following lists the valid values: Refresh Amazon EC2 Auto Scaling replaces instances that are protected from scale in. Ignore Amazon EC2 Auto Scaling ignores instances that are protected from scale in and continues to replace instances that are not protected. Wait (default) Amazon EC2 Auto Scaling waits one hour for you to remove scale-in protection. Otherwise, the instance refresh will fail.
        public var scaleInProtectedInstances: AutoScalingClientTypes.ScaleInProtectedInstances?
        /// (Optional) Indicates whether skip matching is enabled. If enabled (true), then Amazon EC2 Auto Scaling skips replacing instances that match the desired configuration. If no desired configuration is specified, then it skips replacing instances that have the same launch template and instance types that the Auto Scaling group was using before the start of the instance refresh. The default is false. For more information, see [Use an instance refresh with skip matching](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-instance-refresh-skip-matching.html) in the Amazon EC2 Auto Scaling User Guide.
        public var skipMatching: Swift.Bool?
        /// Choose the behavior that you want Amazon EC2 Auto Scaling to use if instances in Standby state are found. The following lists the valid values: Terminate Amazon EC2 Auto Scaling terminates instances that are in Standby. Ignore Amazon EC2 Auto Scaling ignores instances that are in Standby and continues to replace instances that are in the InService state. Wait (default) Amazon EC2 Auto Scaling waits one hour for you to return the instances to service. Otherwise, the instance refresh will fail.
        public var standbyInstances: AutoScalingClientTypes.StandbyInstances?

        public init(
            alarmSpecification: AutoScalingClientTypes.AlarmSpecification? = nil,
            autoRollback: Swift.Bool? = nil,
            bakeTime: Swift.Int? = nil,
            checkpointDelay: Swift.Int? = nil,
            checkpointPercentages: [Swift.Int]? = nil,
            instanceWarmup: Swift.Int? = nil,
            maxHealthyPercentage: Swift.Int? = nil,
            minHealthyPercentage: Swift.Int? = nil,
            scaleInProtectedInstances: AutoScalingClientTypes.ScaleInProtectedInstances? = nil,
            skipMatching: Swift.Bool? = nil,
            standbyInstances: AutoScalingClientTypes.StandbyInstances? = nil
        )
        {
            self.alarmSpecification = alarmSpecification
            self.autoRollback = autoRollback
            self.bakeTime = bakeTime
            self.checkpointDelay = checkpointDelay
            self.checkpointPercentages = checkpointPercentages
            self.instanceWarmup = instanceWarmup
            self.maxHealthyPercentage = maxHealthyPercentage
            self.minHealthyPercentage = minHealthyPercentage
            self.scaleInProtectedInstances = scaleInProtectedInstances
            self.skipMatching = skipMatching
            self.standbyInstances = standbyInstances
        }
    }
}

extension AutoScalingClientTypes {

    /// Reports progress on replacing instances that are in the Auto Scaling group.
    public struct InstanceRefreshLivePoolProgress: Swift.Sendable {
        /// The number of instances remaining to update.
        public var instancesToUpdate: Swift.Int?
        /// The percentage of instances in the Auto Scaling group that have been replaced. For each instance replacement, Amazon EC2 Auto Scaling tracks the instance's health status and warm-up time. When the instance's health status changes to healthy and the specified warm-up time passes, the instance is considered updated and is added to the percentage complete.
        public var percentageComplete: Swift.Int?

        public init(
            instancesToUpdate: Swift.Int? = nil,
            percentageComplete: Swift.Int? = nil
        )
        {
            self.instancesToUpdate = instancesToUpdate
            self.percentageComplete = percentageComplete
        }
    }
}

extension AutoScalingClientTypes {

    /// Reports progress on replacing instances that are in the warm pool.
    public struct InstanceRefreshWarmPoolProgress: Swift.Sendable {
        /// The number of instances remaining to update.
        public var instancesToUpdate: Swift.Int?
        /// The percentage of instances in the warm pool that have been replaced. For each instance replacement, Amazon EC2 Auto Scaling tracks the instance's health status and warm-up time. When the instance's health status changes to healthy and the specified warm-up time passes, the instance is considered updated and is added to the percentage complete.
        public var percentageComplete: Swift.Int?

        public init(
            instancesToUpdate: Swift.Int? = nil,
            percentageComplete: Swift.Int? = nil
        )
        {
            self.instancesToUpdate = instancesToUpdate
            self.percentageComplete = percentageComplete
        }
    }
}

extension AutoScalingClientTypes {

    /// Reports progress on replacing instances in an Auto Scaling group that has a warm pool. This includes separate details for instances in the warm pool and instances in the Auto Scaling group (the live pool).
    public struct InstanceRefreshProgressDetails: Swift.Sendable {
        /// Reports progress on replacing instances that are in the Auto Scaling group.
        public var livePoolProgress: AutoScalingClientTypes.InstanceRefreshLivePoolProgress?
        /// Reports progress on replacing instances that are in the warm pool.
        public var warmPoolProgress: AutoScalingClientTypes.InstanceRefreshWarmPoolProgress?

        public init(
            livePoolProgress: AutoScalingClientTypes.InstanceRefreshLivePoolProgress? = nil,
            warmPoolProgress: AutoScalingClientTypes.InstanceRefreshWarmPoolProgress? = nil
        )
        {
            self.livePoolProgress = livePoolProgress
            self.warmPoolProgress = warmPoolProgress
        }
    }
}

extension AutoScalingClientTypes {

    /// Details about an instance refresh rollback.
    public struct RollbackDetails: Swift.Sendable {
        /// Indicates the value of InstancesToUpdate at the time the rollback started.
        public var instancesToUpdateOnRollback: Swift.Int?
        /// Indicates the value of PercentageComplete at the time the rollback started.
        public var percentageCompleteOnRollback: Swift.Int?
        /// Reports progress on replacing instances in an Auto Scaling group that has a warm pool. This includes separate details for instances in the warm pool and instances in the Auto Scaling group (the live pool).
        public var progressDetailsOnRollback: AutoScalingClientTypes.InstanceRefreshProgressDetails?
        /// The reason for this instance refresh rollback (for example, whether a manual or automatic rollback was initiated).
        public var rollbackReason: Swift.String?
        /// The date and time at which the rollback began.
        public var rollbackStartTime: Foundation.Date?

        public init(
            instancesToUpdateOnRollback: Swift.Int? = nil,
            percentageCompleteOnRollback: Swift.Int? = nil,
            progressDetailsOnRollback: AutoScalingClientTypes.InstanceRefreshProgressDetails? = nil,
            rollbackReason: Swift.String? = nil,
            rollbackStartTime: Foundation.Date? = nil
        )
        {
            self.instancesToUpdateOnRollback = instancesToUpdateOnRollback
            self.percentageCompleteOnRollback = percentageCompleteOnRollback
            self.progressDetailsOnRollback = progressDetailsOnRollback
            self.rollbackReason = rollbackReason
            self.rollbackStartTime = rollbackStartTime
        }
    }
}

extension AutoScalingClientTypes {

    public enum InstanceRefreshStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case baking
        case cancelled
        case cancelling
        case failed
        case inprogress
        case pending
        case rollbackfailed
        case rollbackinprogress
        case rollbacksuccessful
        case successful
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceRefreshStatus] {
            return [
                .baking,
                .cancelled,
                .cancelling,
                .failed,
                .inprogress,
                .pending,
                .rollbackfailed,
                .rollbackinprogress,
                .rollbacksuccessful,
                .successful
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .baking: return "Baking"
            case .cancelled: return "Cancelled"
            case .cancelling: return "Cancelling"
            case .failed: return "Failed"
            case .inprogress: return "InProgress"
            case .pending: return "Pending"
            case .rollbackfailed: return "RollbackFailed"
            case .rollbackinprogress: return "RollbackInProgress"
            case .rollbacksuccessful: return "RollbackSuccessful"
            case .successful: return "Successful"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes an instance refresh for an Auto Scaling group.
    public struct InstanceRefresh: Swift.Sendable {
        /// The name of the Auto Scaling group.
        public var autoScalingGroupName: Swift.String?
        /// Describes the desired configuration for the instance refresh.
        public var desiredConfiguration: AutoScalingClientTypes.DesiredConfiguration?
        /// The date and time at which the instance refresh ended.
        public var endTime: Foundation.Date?
        /// The instance refresh ID.
        public var instanceRefreshId: Swift.String?
        /// The number of instances remaining to update before the instance refresh is complete. If you roll back the instance refresh, InstancesToUpdate shows you the number of instances that were not yet updated by the instance refresh. Therefore, these instances don't need to be replaced as part of the rollback.
        public var instancesToUpdate: Swift.Int?
        /// The percentage of the instance refresh that is complete. For each instance replacement, Amazon EC2 Auto Scaling tracks the instance's health status and warm-up time. When the instance's health status changes to healthy and the specified warm-up time passes, the instance is considered updated and is added to the percentage complete. PercentageComplete does not include instances that are replaced during a rollback. This value gradually goes back down to zero during a rollback.
        public var percentageComplete: Swift.Int?
        /// The preferences for an instance refresh.
        public var preferences: AutoScalingClientTypes.RefreshPreferences?
        /// Additional progress details for an Auto Scaling group that has a warm pool.
        public var progressDetails: AutoScalingClientTypes.InstanceRefreshProgressDetails?
        /// The rollback details.
        public var rollbackDetails: AutoScalingClientTypes.RollbackDetails?
        /// The date and time at which the instance refresh began.
        public var startTime: Foundation.Date?
        /// The current status for the instance refresh operation:
        ///
        /// * Pending - The request was created, but the instance refresh has not started.
        ///
        /// * InProgress - An instance refresh is in progress.
        ///
        /// * Successful - An instance refresh completed successfully.
        ///
        /// * Failed - An instance refresh failed to complete. You can troubleshoot using the status reason and the scaling activities.
        ///
        /// * Cancelling - An ongoing instance refresh is being cancelled.
        ///
        /// * Cancelled - The instance refresh is cancelled.
        ///
        /// * RollbackInProgress - An instance refresh is being rolled back.
        ///
        /// * RollbackFailed - The rollback failed to complete. You can troubleshoot using the status reason and the scaling activities.
        ///
        /// * RollbackSuccessful - The rollback completed successfully.
        ///
        /// * Baking - Waiting the specified bake time after an instance refresh has finished updating instances.
        public var status: AutoScalingClientTypes.InstanceRefreshStatus?
        /// The explanation for the specific status assigned to this operation.
        public var statusReason: Swift.String?

        public init(
            autoScalingGroupName: Swift.String? = nil,
            desiredConfiguration: AutoScalingClientTypes.DesiredConfiguration? = nil,
            endTime: Foundation.Date? = nil,
            instanceRefreshId: Swift.String? = nil,
            instancesToUpdate: Swift.Int? = nil,
            percentageComplete: Swift.Int? = nil,
            preferences: AutoScalingClientTypes.RefreshPreferences? = nil,
            progressDetails: AutoScalingClientTypes.InstanceRefreshProgressDetails? = nil,
            rollbackDetails: AutoScalingClientTypes.RollbackDetails? = nil,
            startTime: Foundation.Date? = nil,
            status: AutoScalingClientTypes.InstanceRefreshStatus? = nil,
            statusReason: Swift.String? = nil
        )
        {
            self.autoScalingGroupName = autoScalingGroupName
            self.desiredConfiguration = desiredConfiguration
            self.endTime = endTime
            self.instanceRefreshId = instanceRefreshId
            self.instancesToUpdate = instancesToUpdate
            self.percentageComplete = percentageComplete
            self.preferences = preferences
            self.progressDetails = progressDetails
            self.rollbackDetails = rollbackDetails
            self.startTime = startTime
            self.status = status
            self.statusReason = statusReason
        }
    }
}

public struct DescribeInstanceRefreshesOutput: Swift.Sendable {
    /// The instance refreshes for the specified group, sorted by creation timestamp in descending order.
    public var instanceRefreshes: [AutoScalingClientTypes.InstanceRefresh]?
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?

    public init(
        instanceRefreshes: [AutoScalingClientTypes.InstanceRefresh]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.instanceRefreshes = instanceRefreshes
        self.nextToken = nextToken
    }
}

public struct DescribeLaunchConfigurationsInput: Swift.Sendable {
    /// The launch configuration names. If you omit this property, all launch configurations are described. Array Members: Maximum number of 50 items.
    public var launchConfigurationNames: [Swift.String]?
    /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init(
        launchConfigurationNames: [Swift.String]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.launchConfigurationNames = launchConfigurationNames
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension AutoScalingClientTypes {

    /// Describes a launch configuration.
    public struct LaunchConfiguration: Swift.Sendable {
        /// Specifies whether to assign a public IPv4 address to the group's instances. If the instance is launched into a default subnet, the default is to assign a public IPv4 address, unless you disabled the option to assign a public IPv4 address on the subnet. If the instance is launched into a nondefault subnet, the default is not to assign a public IPv4 address, unless you enabled the option to assign a public IPv4 address on the subnet. For more information, see [Provide network connectivity for your Auto Scaling instances using Amazon VPC](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-in-vpc.html) in the Amazon EC2 Auto Scaling User Guide.
        public var associatePublicIpAddress: Swift.Bool?
        /// The block device mapping entries that define the block devices to attach to the instances at launch. By default, the block devices specified in the block device mapping for the AMI are used. For more information, see [Block device mappings](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/block-device-mapping-concepts.html) in the Amazon EC2 User Guide for Linux Instances.
        public var blockDeviceMappings: [AutoScalingClientTypes.BlockDeviceMapping]?
        /// Available for backward compatibility.
        public var classicLinkVPCId: Swift.String?
        /// Available for backward compatibility.
        public var classicLinkVPCSecurityGroups: [Swift.String]?
        /// The creation date and time for the launch configuration.
        /// This member is required.
        public var createdTime: Foundation.Date?
        /// Specifies whether the launch configuration is optimized for EBS I/O (true) or not (false). For more information, see [Amazon EBS-optimized instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-optimized.html) in the Amazon EC2 User Guide for Linux Instances.
        public var ebsOptimized: Swift.Bool?
        /// The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. The instance profile contains the IAM role. For more information, see [IAM role for applications that run on Amazon EC2 instances](https://docs.aws.amazon.com/autoscaling/ec2/userguide/us-iam-role.html) in the Amazon EC2 Auto Scaling User Guide.
        public var iamInstanceProfile: Swift.String?
        /// The ID of the Amazon Machine Image (AMI) to use to launch your EC2 instances. For more information, see [Find a Linux AMI](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/finding-an-ami.html) in the Amazon EC2 User Guide for Linux Instances.
        /// This member is required.
        public var imageId: Swift.String?
        /// Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring. For more information, see [Configure monitoring for Auto Scaling instances](https://docs.aws.amazon.com/autoscaling/latest/userguide/enable-as-instance-metrics.html) in the Amazon EC2 Auto Scaling User Guide.
        public var instanceMonitoring: AutoScalingClientTypes.InstanceMonitoring?
        /// The instance type for the instances. For information about available instance types, see [Available instance types](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#AvailableInstanceTypes) in the Amazon EC2 User Guide for Linux Instances.
        /// This member is required.
        public var instanceType: Swift.String?
        /// The ID of the kernel associated with the AMI.
        public var kernelId: Swift.String?
        /// The name of the key pair. For more information, see [Amazon EC2 key pairs and Amazon EC2 instances](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html) in the Amazon EC2 User Guide for Linux Instances.
        public var keyName: Swift.String?
        /// The Amazon Resource Name (ARN) of the launch configuration.
        public var launchConfigurationARN: Swift.String?
        /// The name of the launch configuration.
        /// This member is required.
        public var launchConfigurationName: Swift.String?
        /// The metadata options for the instances. For more information, see [Configure the instance metadata options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-config.html#launch-configurations-imds) in the Amazon EC2 Auto Scaling User Guide.
        public var metadataOptions: AutoScalingClientTypes.InstanceMetadataOptions?
        /// The tenancy of the instance, either default or dedicated. An instance with dedicated tenancy runs on isolated, single-tenant hardware and can only be launched into a VPC.
        public var placementTenancy: Swift.String?
        /// The ID of the RAM disk associated with the AMI.
        public var ramdiskId: Swift.String?
        /// A list that contains the security groups to assign to the instances in the Auto Scaling group. For more information, see [Control traffic to your Amazon Web Services resources using security groups](https://docs.aws.amazon.com/vpc/latest/userguide/vpc-security-groups.html) in the Amazon Virtual Private Cloud User Guide.
        public var securityGroups: [Swift.String]?
        /// The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot price. For more information, see [Requesting Spot Instances for fault-tolerant and flexible applications](https://docs.aws.amazon.com/autoscaling/ec2/userguide/launch-template-spot-instances.html) in the Amazon EC2 Auto Scaling User Guide.
        public var spotPrice: Swift.String?
        /// The user data to make available to the launched EC2 instances. For more information, see [Instance metadata and user data](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-metadata.html) (Linux) and [Instance metadata and user data](https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-metadata.html) (Windows). If you are using a command line tool, base64-encoding is performed for you, and you can load the text from a file. Otherwise, you must provide base64-encoded text. User data is limited to 16 KB.
        public var userData: Swift.String?

        public init(
            associatePublicIpAddress: Swift.Bool? = nil,
            blockDeviceMappings: [AutoScalingClientTypes.BlockDeviceMapping]? = nil,
            classicLinkVPCId: Swift.String? = nil,
            classicLinkVPCSecurityGroups: [Swift.String]? = nil,
            createdTime: Foundation.Date? = nil,
            ebsOptimized: Swift.Bool? = nil,
            iamInstanceProfile: Swift.String? = nil,
            imageId: Swift.String? = nil,
            instanceMonitoring: AutoScalingClientTypes.InstanceMonitoring? = nil,
            instanceType: Swift.String? = nil,
            kernelId: Swift.String? = nil,
            keyName: Swift.String? = nil,
            launchConfigurationARN: Swift.String? = nil,
            launchConfigurationName: Swift.String? = nil,
            metadataOptions: AutoScalingClientTypes.InstanceMetadataOptions? = nil,
            placementTenancy: Swift.String? = nil,
            ramdiskId: Swift.String? = nil,
            securityGroups: [Swift.String]? = nil,
            spotPrice: Swift.String? = nil,
            userData: Swift.String? = nil
        )
        {
            self.associatePublicIpAddress = associatePublicIpAddress
            self.blockDeviceMappings = blockDeviceMappings
            self.classicLinkVPCId = classicLinkVPCId
            self.classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups
            self.createdTime = createdTime
            self.ebsOptimized = ebsOptimized
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.instanceMonitoring = instanceMonitoring
            self.instanceType = instanceType
            self.kernelId = kernelId
            self.keyName = keyName
            self.launchConfigurationARN = launchConfigurationARN
            self.launchConfigurationName = launchConfigurationName
            self.metadataOptions = metadataOptions
            self.placementTenancy = placementTenancy
            self.ramdiskId = ramdiskId
            self.securityGroups = securityGroups
            self.spotPrice = spotPrice
            self.userData = userData
        }
    }
}

public struct DescribeLaunchConfigurationsOutput: Swift.Sendable {
    /// The launch configurations.
    /// This member is required.
    public var launchConfigurations: [AutoScalingClientTypes.LaunchConfiguration]?
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?

    public init(
        launchConfigurations: [AutoScalingClientTypes.LaunchConfiguration]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.launchConfigurations = launchConfigurations
        self.nextToken = nextToken
    }
}

public struct DescribeLifecycleHooksInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The names of one or more lifecycle hooks. If you omit this property, all lifecycle hooks are described.
    public var lifecycleHookNames: [Swift.String]?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        lifecycleHookNames: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.lifecycleHookNames = lifecycleHookNames
    }
}

extension AutoScalingClientTypes {

    /// Describes a lifecycle hook. A lifecycle hook lets you create solutions that are aware of events in the Auto Scaling instance lifecycle, and then perform a custom action on instances when the corresponding lifecycle event occurs.
    public struct LifecycleHook: Swift.Sendable {
        /// The name of the Auto Scaling group for the lifecycle hook.
        public var autoScalingGroupName: Swift.String?
        /// The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. Valid values: CONTINUE | ABANDON
        public var defaultResult: Swift.String?
        /// The maximum time, in seconds, that an instance can remain in a wait state. The maximum is 172800 seconds (48 hours) or 100 times HeartbeatTimeout, whichever is smaller.
        public var globalTimeout: Swift.Int?
        /// The maximum time, in seconds, that can elapse before the lifecycle hook times out. If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the action that you specified in the DefaultResult property.
        public var heartbeatTimeout: Swift.Int?
        /// The name of the lifecycle hook.
        public var lifecycleHookName: Swift.String?
        /// The lifecycle transition. Valid values: autoscaling:EC2_INSTANCE_LAUNCHING | autoscaling:EC2_INSTANCE_TERMINATING
        public var lifecycleTransition: Swift.String?
        /// Additional information that is included any time Amazon EC2 Auto Scaling sends a message to the notification target.
        public var notificationMetadata: Swift.String?
        /// The ARN of the target that Amazon EC2 Auto Scaling sends notifications to when an instance is in a wait state for the lifecycle hook.
        public var notificationTargetARN: Swift.String?
        /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target (an Amazon SNS topic or an Amazon SQS queue).
        public var roleARN: Swift.String?

        public init(
            autoScalingGroupName: Swift.String? = nil,
            defaultResult: Swift.String? = nil,
            globalTimeout: Swift.Int? = nil,
            heartbeatTimeout: Swift.Int? = nil,
            lifecycleHookName: Swift.String? = nil,
            lifecycleTransition: Swift.String? = nil,
            notificationMetadata: Swift.String? = nil,
            notificationTargetARN: Swift.String? = nil,
            roleARN: Swift.String? = nil
        )
        {
            self.autoScalingGroupName = autoScalingGroupName
            self.defaultResult = defaultResult
            self.globalTimeout = globalTimeout
            self.heartbeatTimeout = heartbeatTimeout
            self.lifecycleHookName = lifecycleHookName
            self.lifecycleTransition = lifecycleTransition
            self.notificationMetadata = notificationMetadata
            self.notificationTargetARN = notificationTargetARN
            self.roleARN = roleARN
        }
    }
}

public struct DescribeLifecycleHooksOutput: Swift.Sendable {
    /// The lifecycle hooks for the specified group.
    public var lifecycleHooks: [AutoScalingClientTypes.LifecycleHook]?

    public init(
        lifecycleHooks: [AutoScalingClientTypes.LifecycleHook]? = nil
    )
    {
        self.lifecycleHooks = lifecycleHooks
    }
}

public struct DescribeLifecycleHookTypesOutput: Swift.Sendable {
    /// The lifecycle hook types.
    public var lifecycleHookTypes: [Swift.String]?

    public init(
        lifecycleHookTypes: [Swift.String]? = nil
    )
    {
        self.lifecycleHookTypes = lifecycleHookTypes
    }
}

public struct DescribeLoadBalancersInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The maximum number of items to return with this call. The default value is 100 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension AutoScalingClientTypes {

    /// Describes the state of a Classic Load Balancer.
    public struct LoadBalancerState: Swift.Sendable {
        /// The name of the load balancer.
        public var loadBalancerName: Swift.String?
        /// One of the following load balancer states:
        ///
        /// * Adding - The Auto Scaling instances are being registered with the load balancer.
        ///
        /// * Added - All Auto Scaling instances are registered with the load balancer.
        ///
        /// * InService - At least one Auto Scaling instance passed an ELB health check.
        ///
        /// * Removing - The Auto Scaling instances are being deregistered from the load balancer. If connection draining is enabled, Elastic Load Balancing waits for in-flight requests to complete before deregistering the instances.
        ///
        /// * Removed - All Auto Scaling instances are deregistered from the load balancer.
        public var state: Swift.String?

        public init(
            loadBalancerName: Swift.String? = nil,
            state: Swift.String? = nil
        )
        {
            self.loadBalancerName = loadBalancerName
            self.state = state
        }
    }
}

public struct DescribeLoadBalancersOutput: Swift.Sendable {
    /// The load balancers.
    public var loadBalancers: [AutoScalingClientTypes.LoadBalancerState]?
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?

    public init(
        loadBalancers: [AutoScalingClientTypes.LoadBalancerState]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.loadBalancers = loadBalancers
        self.nextToken = nextToken
    }
}

public struct DescribeLoadBalancerTargetGroupsInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The maximum number of items to return with this call. The default value is 100 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension AutoScalingClientTypes {

    /// Describes the state of a target group.
    public struct LoadBalancerTargetGroupState: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the target group.
        public var loadBalancerTargetGroupARN: Swift.String?
        /// The state of the target group.
        ///
        /// * Adding - The Auto Scaling instances are being registered with the target group.
        ///
        /// * Added - All Auto Scaling instances are registered with the target group.
        ///
        /// * InService - At least one Auto Scaling instance passed an ELB health check.
        ///
        /// * Removing - The Auto Scaling instances are being deregistered from the target group. If connection draining is enabled, Elastic Load Balancing waits for in-flight requests to complete before deregistering the instances.
        ///
        /// * Removed - All Auto Scaling instances are deregistered from the target group.
        public var state: Swift.String?

        public init(
            loadBalancerTargetGroupARN: Swift.String? = nil,
            state: Swift.String? = nil
        )
        {
            self.loadBalancerTargetGroupARN = loadBalancerTargetGroupARN
            self.state = state
        }
    }
}

public struct DescribeLoadBalancerTargetGroupsOutput: Swift.Sendable {
    /// Information about the target groups.
    public var loadBalancerTargetGroups: [AutoScalingClientTypes.LoadBalancerTargetGroupState]?
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?

    public init(
        loadBalancerTargetGroups: [AutoScalingClientTypes.LoadBalancerTargetGroupState]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.loadBalancerTargetGroups = loadBalancerTargetGroups
        self.nextToken = nextToken
    }
}

extension AutoScalingClientTypes {

    /// Describes a granularity of a metric.
    public struct MetricGranularityType: Swift.Sendable {
        /// The granularity. The only valid value is 1Minute.
        public var granularity: Swift.String?

        public init(
            granularity: Swift.String? = nil
        )
        {
            self.granularity = granularity
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes a metric.
    public struct MetricCollectionType: Swift.Sendable {
        /// One of the following metrics:
        ///
        /// * GroupMinSize
        ///
        /// * GroupMaxSize
        ///
        /// * GroupDesiredCapacity
        ///
        /// * GroupInServiceInstances
        ///
        /// * GroupPendingInstances
        ///
        /// * GroupStandbyInstances
        ///
        /// * GroupTerminatingInstances
        ///
        /// * GroupTotalInstances
        ///
        /// * GroupInServiceCapacity
        ///
        /// * GroupPendingCapacity
        ///
        /// * GroupStandbyCapacity
        ///
        /// * GroupTerminatingCapacity
        ///
        /// * GroupTotalCapacity
        ///
        /// * WarmPoolDesiredCapacity
        ///
        /// * WarmPoolWarmedCapacity
        ///
        /// * WarmPoolPendingCapacity
        ///
        /// * WarmPoolTerminatingCapacity
        ///
        /// * WarmPoolTotalCapacity
        ///
        /// * GroupAndWarmPoolDesiredCapacity
        ///
        /// * GroupAndWarmPoolTotalCapacity
        public var metric: Swift.String?

        public init(
            metric: Swift.String? = nil
        )
        {
            self.metric = metric
        }
    }
}

public struct DescribeMetricCollectionTypesOutput: Swift.Sendable {
    /// The granularities for the metrics.
    public var granularities: [AutoScalingClientTypes.MetricGranularityType]?
    /// The metrics.
    public var metrics: [AutoScalingClientTypes.MetricCollectionType]?

    public init(
        granularities: [AutoScalingClientTypes.MetricGranularityType]? = nil,
        metrics: [AutoScalingClientTypes.MetricCollectionType]? = nil
    )
    {
        self.granularities = granularities
        self.metrics = metrics
    }
}

public struct DescribeNotificationConfigurationsInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    public var autoScalingGroupNames: [Swift.String]?
    /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init(
        autoScalingGroupNames: [Swift.String]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupNames = autoScalingGroupNames
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

extension AutoScalingClientTypes {

    /// Describes a notification.
    public struct NotificationConfiguration: Swift.Sendable {
        /// The name of the Auto Scaling group.
        public var autoScalingGroupName: Swift.String?
        /// One of the following event notification types:
        ///
        /// * autoscaling:EC2_INSTANCE_LAUNCH
        ///
        /// * autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        ///
        /// * autoscaling:EC2_INSTANCE_TERMINATE
        ///
        /// * autoscaling:EC2_INSTANCE_TERMINATE_ERROR
        ///
        /// * autoscaling:TEST_NOTIFICATION
        public var notificationType: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic.
        public var topicARN: Swift.String?

        public init(
            autoScalingGroupName: Swift.String? = nil,
            notificationType: Swift.String? = nil,
            topicARN: Swift.String? = nil
        )
        {
            self.autoScalingGroupName = autoScalingGroupName
            self.notificationType = notificationType
            self.topicARN = topicARN
        }
    }
}

public struct DescribeNotificationConfigurationsOutput: Swift.Sendable {
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?
    /// The notification configurations.
    /// This member is required.
    public var notificationConfigurations: [AutoScalingClientTypes.NotificationConfiguration]?

    public init(
        nextToken: Swift.String? = nil,
        notificationConfigurations: [AutoScalingClientTypes.NotificationConfiguration]? = nil
    )
    {
        self.nextToken = nextToken
        self.notificationConfigurations = notificationConfigurations
    }
}

public struct DescribePoliciesInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    public var autoScalingGroupName: Swift.String?
    /// The maximum number of items to be returned with each call. The default value is 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?
    /// The names of one or more policies. If you omit this property, all policies are described. If a group name is provided, the results are limited to that group. If you specify an unknown policy name, it is ignored with no error. Array Members: Maximum number of 50 items.
    public var policyNames: [Swift.String]?
    /// One or more policy types. The valid values are SimpleScaling, StepScaling, TargetTrackingScaling, and PredictiveScaling.
    public var policyTypes: [Swift.String]?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        policyNames: [Swift.String]? = nil,
        policyTypes: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
        self.policyNames = policyNames
        self.policyTypes = policyTypes
    }
}

extension AutoScalingClientTypes {

    public enum PredictiveScalingMaxCapacityBreachBehavior: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case honormaxcapacity
        case increasemaxcapacity
        case sdkUnknown(Swift.String)

        public static var allCases: [PredictiveScalingMaxCapacityBreachBehavior] {
            return [
                .honormaxcapacity,
                .increasemaxcapacity
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .honormaxcapacity: return "HonorMaxCapacity"
            case .increasemaxcapacity: return "IncreaseMaxCapacity"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes the dimension of a metric.
    public struct MetricDimension: Swift.Sendable {
        /// The name of the dimension.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the dimension.
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }
}

extension AutoScalingClientTypes {

    /// Represents a specific metric.
    public struct Metric: Swift.Sendable {
        /// The dimensions for the metric. For the list of available dimensions, see the Amazon Web Services documentation available from the table in [Amazon Web Services services that publish CloudWatch metrics ](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html) in the Amazon CloudWatch User Guide. Conditional: If you published your metric with dimensions, you must specify the same dimensions in your scaling policy.
        public var dimensions: [AutoScalingClientTypes.MetricDimension]?
        /// The name of the metric.
        /// This member is required.
        public var metricName: Swift.String?
        /// The namespace of the metric. For more information, see the table in [Amazon Web Services services that publish CloudWatch metrics ](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html) in the Amazon CloudWatch User Guide.
        /// This member is required.
        public var namespace: Swift.String?

        public init(
            dimensions: [AutoScalingClientTypes.MetricDimension]? = nil,
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil
        )
        {
            self.dimensions = dimensions
            self.metricName = metricName
            self.namespace = namespace
        }
    }
}

extension AutoScalingClientTypes {

    /// This structure defines the CloudWatch metric to return, along with the statistic and unit. For more information about the CloudWatch terminology below, see [Amazon CloudWatch concepts](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html) in the Amazon CloudWatch User Guide.
    public struct MetricStat: Swift.Sendable {
        /// The CloudWatch metric to return, including the metric name, namespace, and dimensions. To get the exact metric name, namespace, and dimensions, inspect the [Metric](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_Metric.html) object that is returned by a call to [ListMetrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_ListMetrics.html).
        /// This member is required.
        public var metric: AutoScalingClientTypes.Metric?
        /// The statistic to return. It can include any CloudWatch statistic or extended statistic. For a list of valid values, see the table in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in the Amazon CloudWatch User Guide. The most commonly used metrics for predictive scaling are Average and Sum.
        /// This member is required.
        public var stat: Swift.String?
        /// The unit to use for the returned data points. For a complete list of the units that CloudWatch supports, see the [MetricDatum](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html) data type in the Amazon CloudWatch API Reference.
        public var unit: Swift.String?

        public init(
            metric: AutoScalingClientTypes.Metric? = nil,
            stat: Swift.String? = nil,
            unit: Swift.String? = nil
        )
        {
            self.metric = metric
            self.stat = stat
            self.unit = unit
        }
    }
}

extension AutoScalingClientTypes {

    /// The metric data to return. Also defines whether this call is returning data for one metric only, or whether it is performing a math expression on the values of returned metric statistics to create a new time series. A time series is a series of data points, each of which is associated with a timestamp. For more information and examples, see [Advanced predictive scaling policy configurations using custom metrics](https://docs.aws.amazon.com/autoscaling/ec2/userguide/predictive-scaling-customized-metric-specification.html) in the Amazon EC2 Auto Scaling User Guide.
    public struct MetricDataQuery: Swift.Sendable {
        /// The math expression to perform on the returned data, if this object is performing a math expression. This expression can use the Id of the other metrics to refer to those metrics, and can also use the Id of other expressions to use the result of those expressions. Conditional: Within each MetricDataQuery object, you must specify either Expression or MetricStat, but not both.
        public var expression: Swift.String?
        /// A short name that identifies the object's results in the response. This name must be unique among all MetricDataQuery objects specified for a single scaling policy. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscores. The first character must be a lowercase letter.
        /// This member is required.
        public var id: Swift.String?
        /// A human-readable label for this metric or expression. This is especially useful if this is a math expression, so that you know what the value represents.
        public var label: Swift.String?
        /// Information about the metric data to return. Conditional: Within each MetricDataQuery object, you must specify either Expression or MetricStat, but not both.
        public var metricStat: AutoScalingClientTypes.MetricStat?
        /// Indicates whether to return the timestamps and raw data values of this metric. If you use any math expressions, specify true for this value for only the final math expression that the metric specification is based on. You must specify false for ReturnData for all the other metrics and expressions used in the metric specification. If you are only retrieving metrics and not performing any math expressions, do not specify anything for ReturnData. This sets it to its default (true).
        public var returnData: Swift.Bool?

        public init(
            expression: Swift.String? = nil,
            id: Swift.String? = nil,
            label: Swift.String? = nil,
            metricStat: AutoScalingClientTypes.MetricStat? = nil,
            returnData: Swift.Bool? = nil
        )
        {
            self.expression = expression
            self.id = id
            self.label = label
            self.metricStat = metricStat
            self.returnData = returnData
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes a customized capacity metric for a predictive scaling policy.
    public struct PredictiveScalingCustomizedCapacityMetric: Swift.Sendable {
        /// One or more metric data queries to provide the data points for a capacity metric. Use multiple metric data queries only if you are performing a math expression on returned data.
        /// This member is required.
        public var metricDataQueries: [AutoScalingClientTypes.MetricDataQuery]?

        public init(
            metricDataQueries: [AutoScalingClientTypes.MetricDataQuery]? = nil
        )
        {
            self.metricDataQueries = metricDataQueries
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes a custom load metric for a predictive scaling policy.
    public struct PredictiveScalingCustomizedLoadMetric: Swift.Sendable {
        /// One or more metric data queries to provide the data points for a load metric. Use multiple metric data queries only if you are performing a math expression on returned data.
        /// This member is required.
        public var metricDataQueries: [AutoScalingClientTypes.MetricDataQuery]?

        public init(
            metricDataQueries: [AutoScalingClientTypes.MetricDataQuery]? = nil
        )
        {
            self.metricDataQueries = metricDataQueries
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes a custom scaling metric for a predictive scaling policy.
    public struct PredictiveScalingCustomizedScalingMetric: Swift.Sendable {
        /// One or more metric data queries to provide the data points for a scaling metric. Use multiple metric data queries only if you are performing a math expression on returned data.
        /// This member is required.
        public var metricDataQueries: [AutoScalingClientTypes.MetricDataQuery]?

        public init(
            metricDataQueries: [AutoScalingClientTypes.MetricDataQuery]? = nil
        )
        {
            self.metricDataQueries = metricDataQueries
        }
    }
}

extension AutoScalingClientTypes {

    public enum PredefinedLoadMetricType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case albtargetgrouprequestcount
        case asgtotalcpuutilization
        case asgtotalnetworkin
        case asgtotalnetworkout
        case sdkUnknown(Swift.String)

        public static var allCases: [PredefinedLoadMetricType] {
            return [
                .albtargetgrouprequestcount,
                .asgtotalcpuutilization,
                .asgtotalnetworkin,
                .asgtotalnetworkout
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .albtargetgrouprequestcount: return "ALBTargetGroupRequestCount"
            case .asgtotalcpuutilization: return "ASGTotalCPUUtilization"
            case .asgtotalnetworkin: return "ASGTotalNetworkIn"
            case .asgtotalnetworkout: return "ASGTotalNetworkOut"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes a load metric for a predictive scaling policy. When returned in the output of DescribePolicies, it indicates that a predictive scaling policy uses individually specified load and scaling metrics instead of a metric pair.
    public struct PredictiveScalingPredefinedLoadMetric: Swift.Sendable {
        /// The metric type.
        /// This member is required.
        public var predefinedMetricType: AutoScalingClientTypes.PredefinedLoadMetricType?
        /// A label that uniquely identifies a specific Application Load Balancer target group from which to determine the request count served by your Auto Scaling group. You can't specify a resource label unless the target group is attached to the Auto Scaling group. You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format of the resource label is: app/my-alb/778d41231b141a0f/targetgroup/my-alb-target-group/943f017f100becff. Where:
        ///
        /// * app// is the final portion of the load balancer ARN
        ///
        /// * targetgroup// is the final portion of the target group ARN.
        ///
        ///
        /// To find the ARN for an Application Load Balancer, use the [DescribeLoadBalancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html) API operation. To find the ARN for the target group, use the [DescribeTargetGroups](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html) API operation.
        public var resourceLabel: Swift.String?

        public init(
            predefinedMetricType: AutoScalingClientTypes.PredefinedLoadMetricType? = nil,
            resourceLabel: Swift.String? = nil
        )
        {
            self.predefinedMetricType = predefinedMetricType
            self.resourceLabel = resourceLabel
        }
    }
}

extension AutoScalingClientTypes {

    public enum PredefinedMetricPairType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case albrequestcount
        case asgcpuutilization
        case asgnetworkin
        case asgnetworkout
        case sdkUnknown(Swift.String)

        public static var allCases: [PredefinedMetricPairType] {
            return [
                .albrequestcount,
                .asgcpuutilization,
                .asgnetworkin,
                .asgnetworkout
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .albrequestcount: return "ALBRequestCount"
            case .asgcpuutilization: return "ASGCPUUtilization"
            case .asgnetworkin: return "ASGNetworkIn"
            case .asgnetworkout: return "ASGNetworkOut"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    /// Represents a metric pair for a predictive scaling policy.
    public struct PredictiveScalingPredefinedMetricPair: Swift.Sendable {
        /// Indicates which metrics to use. There are two different types of metrics for each metric type: one is a load metric and one is a scaling metric. For example, if the metric type is ASGCPUUtilization, the Auto Scaling group's total CPU metric is used as the load metric, and the average CPU metric is used for the scaling metric.
        /// This member is required.
        public var predefinedMetricType: AutoScalingClientTypes.PredefinedMetricPairType?
        /// A label that uniquely identifies a specific Application Load Balancer target group from which to determine the total and average request count served by your Auto Scaling group. You can't specify a resource label unless the target group is attached to the Auto Scaling group. You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format of the resource label is: app/my-alb/778d41231b141a0f/targetgroup/my-alb-target-group/943f017f100becff. Where:
        ///
        /// * app// is the final portion of the load balancer ARN
        ///
        /// * targetgroup// is the final portion of the target group ARN.
        ///
        ///
        /// To find the ARN for an Application Load Balancer, use the [DescribeLoadBalancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html) API operation. To find the ARN for the target group, use the [DescribeTargetGroups](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html) API operation.
        public var resourceLabel: Swift.String?

        public init(
            predefinedMetricType: AutoScalingClientTypes.PredefinedMetricPairType? = nil,
            resourceLabel: Swift.String? = nil
        )
        {
            self.predefinedMetricType = predefinedMetricType
            self.resourceLabel = resourceLabel
        }
    }
}

extension AutoScalingClientTypes {

    public enum PredefinedScalingMetricType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case albrequestcountpertarget
        case asgaveragecpuutilization
        case asgaveragenetworkin
        case asgaveragenetworkout
        case sdkUnknown(Swift.String)

        public static var allCases: [PredefinedScalingMetricType] {
            return [
                .albrequestcountpertarget,
                .asgaveragecpuutilization,
                .asgaveragenetworkin,
                .asgaveragenetworkout
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .albrequestcountpertarget: return "ALBRequestCountPerTarget"
            case .asgaveragecpuutilization: return "ASGAverageCPUUtilization"
            case .asgaveragenetworkin: return "ASGAverageNetworkIn"
            case .asgaveragenetworkout: return "ASGAverageNetworkOut"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes a scaling metric for a predictive scaling policy. When returned in the output of DescribePolicies, it indicates that a predictive scaling policy uses individually specified load and scaling metrics instead of a metric pair.
    public struct PredictiveScalingPredefinedScalingMetric: Swift.Sendable {
        /// The metric type.
        /// This member is required.
        public var predefinedMetricType: AutoScalingClientTypes.PredefinedScalingMetricType?
        /// A label that uniquely identifies a specific Application Load Balancer target group from which to determine the average request count served by your Auto Scaling group. You can't specify a resource label unless the target group is attached to the Auto Scaling group. You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format of the resource label is: app/my-alb/778d41231b141a0f/targetgroup/my-alb-target-group/943f017f100becff. Where:
        ///
        /// * app// is the final portion of the load balancer ARN
        ///
        /// * targetgroup// is the final portion of the target group ARN.
        ///
        ///
        /// To find the ARN for an Application Load Balancer, use the [DescribeLoadBalancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html) API operation. To find the ARN for the target group, use the [DescribeTargetGroups](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html) API operation.
        public var resourceLabel: Swift.String?

        public init(
            predefinedMetricType: AutoScalingClientTypes.PredefinedScalingMetricType? = nil,
            resourceLabel: Swift.String? = nil
        )
        {
            self.predefinedMetricType = predefinedMetricType
            self.resourceLabel = resourceLabel
        }
    }
}

extension AutoScalingClientTypes {

    /// This structure specifies the metrics and target utilization settings for a predictive scaling policy. You must specify either a metric pair, or a load metric and a scaling metric individually. Specifying a metric pair instead of individual metrics provides a simpler way to configure metrics for a scaling policy. You choose the metric pair, and the policy automatically knows the correct sum and average statistics to use for the load metric and the scaling metric. Example
    ///
    /// * You create a predictive scaling policy and specify ALBRequestCount as the value for the metric pair and 1000.0 as the target value. For this type of metric, you must provide the metric dimension for the corresponding target group, so you also provide a resource label for the Application Load Balancer target group that is attached to your Auto Scaling group.
    ///
    /// * The number of requests the target group receives per minute provides the load metric, and the request count averaged between the members of the target group provides the scaling metric. In CloudWatch, this refers to the RequestCount and RequestCountPerTarget metrics, respectively.
    ///
    /// * For optimal use of predictive scaling, you adhere to the best practice of using a dynamic scaling policy to automatically scale between the minimum capacity and maximum capacity in response to real-time changes in resource utilization.
    ///
    /// * Amazon EC2 Auto Scaling consumes data points for the load metric over the last 14 days and creates an hourly load forecast for predictive scaling. (A minimum of 24 hours of data is required.)
    ///
    /// * After creating the load forecast, Amazon EC2 Auto Scaling determines when to reduce or increase the capacity of your Auto Scaling group in each hour of the forecast period so that the average number of requests received by each instance is as close to 1000 requests per minute as possible at all times.
    ///
    ///
    /// For information about using custom metrics with predictive scaling, see [Advanced predictive scaling policy configurations using custom metrics](https://docs.aws.amazon.com/autoscaling/ec2/userguide/predictive-scaling-customized-metric-specification.html) in the Amazon EC2 Auto Scaling User Guide.
    public struct PredictiveScalingMetricSpecification: Swift.Sendable {
        /// The customized capacity metric specification.
        public var customizedCapacityMetricSpecification: AutoScalingClientTypes.PredictiveScalingCustomizedCapacityMetric?
        /// The customized load metric specification.
        public var customizedLoadMetricSpecification: AutoScalingClientTypes.PredictiveScalingCustomizedLoadMetric?
        /// The customized scaling metric specification.
        public var customizedScalingMetricSpecification: AutoScalingClientTypes.PredictiveScalingCustomizedScalingMetric?
        /// The predefined load metric specification.
        public var predefinedLoadMetricSpecification: AutoScalingClientTypes.PredictiveScalingPredefinedLoadMetric?
        /// The predefined metric pair specification from which Amazon EC2 Auto Scaling determines the appropriate scaling metric and load metric to use.
        public var predefinedMetricPairSpecification: AutoScalingClientTypes.PredictiveScalingPredefinedMetricPair?
        /// The predefined scaling metric specification.
        public var predefinedScalingMetricSpecification: AutoScalingClientTypes.PredictiveScalingPredefinedScalingMetric?
        /// Specifies the target utilization. Some metrics are based on a count instead of a percentage, such as the request count for an Application Load Balancer or the number of messages in an SQS queue. If the scaling policy specifies one of these metrics, specify the target utilization as the optimal average request or message count per instance during any one-minute interval.
        /// This member is required.
        public var targetValue: Swift.Double?

        public init(
            customizedCapacityMetricSpecification: AutoScalingClientTypes.PredictiveScalingCustomizedCapacityMetric? = nil,
            customizedLoadMetricSpecification: AutoScalingClientTypes.PredictiveScalingCustomizedLoadMetric? = nil,
            customizedScalingMetricSpecification: AutoScalingClientTypes.PredictiveScalingCustomizedScalingMetric? = nil,
            predefinedLoadMetricSpecification: AutoScalingClientTypes.PredictiveScalingPredefinedLoadMetric? = nil,
            predefinedMetricPairSpecification: AutoScalingClientTypes.PredictiveScalingPredefinedMetricPair? = nil,
            predefinedScalingMetricSpecification: AutoScalingClientTypes.PredictiveScalingPredefinedScalingMetric? = nil,
            targetValue: Swift.Double? = nil
        )
        {
            self.customizedCapacityMetricSpecification = customizedCapacityMetricSpecification
            self.customizedLoadMetricSpecification = customizedLoadMetricSpecification
            self.customizedScalingMetricSpecification = customizedScalingMetricSpecification
            self.predefinedLoadMetricSpecification = predefinedLoadMetricSpecification
            self.predefinedMetricPairSpecification = predefinedMetricPairSpecification
            self.predefinedScalingMetricSpecification = predefinedScalingMetricSpecification
            self.targetValue = targetValue
        }
    }
}

extension AutoScalingClientTypes {

    public enum PredictiveScalingMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case forecastandscale
        case forecastonly
        case sdkUnknown(Swift.String)

        public static var allCases: [PredictiveScalingMode] {
            return [
                .forecastandscale,
                .forecastonly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .forecastandscale: return "ForecastAndScale"
            case .forecastonly: return "ForecastOnly"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    /// Represents a predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
    public struct PredictiveScalingConfiguration: Swift.Sendable {
        /// Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity of the Auto Scaling group. Defaults to HonorMaxCapacity if not specified. The following are possible values:
        ///
        /// * HonorMaxCapacity - Amazon EC2 Auto Scaling can't increase the maximum capacity of the group when the forecast capacity is close to or exceeds the maximum capacity.
        ///
        /// * IncreaseMaxCapacity - Amazon EC2 Auto Scaling can increase the maximum capacity of the group when the forecast capacity is close to or exceeds the maximum capacity. The upper limit is determined by the forecasted capacity and the value for MaxCapacityBuffer.
        ///
        ///
        /// Use caution when allowing the maximum capacity to be automatically increased. This can lead to more instances being launched than intended if the increased maximum capacity is not monitored and managed. The increased maximum capacity then becomes the new normal maximum capacity for the Auto Scaling group until you manually update it. The maximum capacity does not automatically decrease back to the original maximum.
        public var maxCapacityBreachBehavior: AutoScalingClientTypes.PredictiveScalingMaxCapacityBreachBehavior?
        /// The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. For example, if the buffer is 10, this means a 10 percent buffer, such that if the forecast capacity is 50, and the maximum capacity is 40, then the effective maximum capacity is 55. If set to 0, Amazon EC2 Auto Scaling may scale capacity higher than the maximum capacity to equal but not exceed forecast capacity. Required if the MaxCapacityBreachBehavior property is set to IncreaseMaxCapacity, and cannot be used otherwise.
        public var maxCapacityBuffer: Swift.Int?
        /// This structure includes the metrics and target utilization to use for predictive scaling. This is an array, but we currently only support a single metric specification. That is, you can specify a target value and a single metric pair, or a target value and one scaling metric and one load metric.
        /// This member is required.
        public var metricSpecifications: [AutoScalingClientTypes.PredictiveScalingMetricSpecification]?
        /// The predictive scaling mode. Defaults to ForecastOnly if not specified.
        public var mode: AutoScalingClientTypes.PredictiveScalingMode?
        /// The amount of time, in seconds, by which the instance launch time can be advanced. For example, the forecast says to add capacity at 10:00 AM, and you choose to pre-launch instances by 5 minutes. In that case, the instances will be launched at 9:55 AM. The intention is to give resources time to be provisioned. It can take a few minutes to launch an EC2 instance. The actual amount of time required depends on several factors, such as the size of the instance and whether there are startup scripts to complete. The value must be less than the forecast interval duration of 3600 seconds (60 minutes). Defaults to 300 seconds if not specified.
        public var schedulingBufferTime: Swift.Int?

        public init(
            maxCapacityBreachBehavior: AutoScalingClientTypes.PredictiveScalingMaxCapacityBreachBehavior? = nil,
            maxCapacityBuffer: Swift.Int? = nil,
            metricSpecifications: [AutoScalingClientTypes.PredictiveScalingMetricSpecification]? = nil,
            mode: AutoScalingClientTypes.PredictiveScalingMode? = nil,
            schedulingBufferTime: Swift.Int? = nil
        )
        {
            self.maxCapacityBreachBehavior = maxCapacityBreachBehavior
            self.maxCapacityBuffer = maxCapacityBuffer
            self.metricSpecifications = metricSpecifications
            self.mode = mode
            self.schedulingBufferTime = schedulingBufferTime
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes information used to create a step adjustment for a step scaling policy. For the following examples, suppose that you have an alarm with a breach threshold of 50:
    ///
    /// * To trigger the adjustment when the metric is greater than or equal to 50 and less than 60, specify a lower bound of 0 and an upper bound of 10.
    ///
    /// * To trigger the adjustment when the metric is greater than 40 and less than or equal to 50, specify a lower bound of -10 and an upper bound of 0.
    ///
    ///
    /// There are a few rules for the step adjustments for your step policy:
    ///
    /// * The ranges of your step adjustments can't overlap or have a gap.
    ///
    /// * At most, one step adjustment can have a null lower bound. If one step adjustment has a negative lower bound, then there must be a step adjustment with a null lower bound.
    ///
    /// * At most, one step adjustment can have a null upper bound. If one step adjustment has a positive upper bound, then there must be a step adjustment with a null upper bound.
    ///
    /// * The upper and lower bound can't be null in the same step adjustment.
    ///
    ///
    /// For more information, see [Step adjustments](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-steps) in the Amazon EC2 Auto Scaling User Guide.
    public struct StepAdjustment: Swift.Sendable {
        /// The lower bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the lower bound is inclusive (the metric must be greater than or equal to the threshold plus the lower bound). Otherwise, it is exclusive (the metric must be greater than the threshold plus the lower bound). A null value indicates negative infinity.
        public var metricIntervalLowerBound: Swift.Double?
        /// The upper bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the upper bound is exclusive (the metric must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the metric must be less than or equal to the threshold plus the upper bound). A null value indicates positive infinity. The upper bound must be greater than the lower bound.
        public var metricIntervalUpperBound: Swift.Double?
        /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a non-negative value.
        /// This member is required.
        public var scalingAdjustment: Swift.Int?

        public init(
            metricIntervalLowerBound: Swift.Double? = nil,
            metricIntervalUpperBound: Swift.Double? = nil,
            scalingAdjustment: Swift.Int? = nil
        )
        {
            self.metricIntervalLowerBound = metricIntervalLowerBound
            self.metricIntervalUpperBound = metricIntervalUpperBound
            self.scalingAdjustment = scalingAdjustment
        }
    }
}

extension AutoScalingClientTypes {

    /// This structure defines the CloudWatch metric to return, along with the statistic and unit. For more information about the CloudWatch terminology below, see [Amazon CloudWatch concepts](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html) in the Amazon CloudWatch User Guide.
    public struct TargetTrackingMetricStat: Swift.Sendable {
        /// The metric to use.
        /// This member is required.
        public var metric: AutoScalingClientTypes.Metric?
        /// The statistic to return. It can include any CloudWatch statistic or extended statistic. For a list of valid values, see the table in [Statistics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html#Statistic) in the Amazon CloudWatch User Guide. The most commonly used metric for scaling is Average.
        /// This member is required.
        public var stat: Swift.String?
        /// The unit to use for the returned data points. For a complete list of the units that CloudWatch supports, see the [MetricDatum](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html) data type in the Amazon CloudWatch API Reference.
        public var unit: Swift.String?

        public init(
            metric: AutoScalingClientTypes.Metric? = nil,
            stat: Swift.String? = nil,
            unit: Swift.String? = nil
        )
        {
            self.metric = metric
            self.stat = stat
            self.unit = unit
        }
    }
}

extension AutoScalingClientTypes {

    /// The metric data to return. Also defines whether this call is returning data for one metric only, or whether it is performing a math expression on the values of returned metric statistics to create a new time series. A time series is a series of data points, each of which is associated with a timestamp.
    public struct TargetTrackingMetricDataQuery: Swift.Sendable {
        /// The math expression to perform on the returned data, if this object is performing a math expression. This expression can use the Id of the other metrics to refer to those metrics, and can also use the Id of other expressions to use the result of those expressions. Conditional: Within each TargetTrackingMetricDataQuery object, you must specify either Expression or MetricStat, but not both.
        public var expression: Swift.String?
        /// A short name that identifies the object's results in the response. This name must be unique among all TargetTrackingMetricDataQuery objects specified for a single scaling policy. If you are performing math expressions on this set of data, this name represents that data and can serve as a variable in the mathematical expression. The valid characters are letters, numbers, and underscores. The first character must be a lowercase letter.
        /// This member is required.
        public var id: Swift.String?
        /// A human-readable label for this metric or expression. This is especially useful if this is a math expression, so that you know what the value represents.
        public var label: Swift.String?
        /// Information about the metric data to return. Conditional: Within each TargetTrackingMetricDataQuery object, you must specify either Expression or MetricStat, but not both.
        public var metricStat: AutoScalingClientTypes.TargetTrackingMetricStat?
        /// Indicates whether to return the timestamps and raw data values of this metric. If you use any math expressions, specify true for this value for only the final math expression that the metric specification is based on. You must specify false for ReturnData for all the other metrics and expressions used in the metric specification. If you are only retrieving metrics and not performing any math expressions, do not specify anything for ReturnData. This sets it to its default (true).
        public var returnData: Swift.Bool?

        public init(
            expression: Swift.String? = nil,
            id: Swift.String? = nil,
            label: Swift.String? = nil,
            metricStat: AutoScalingClientTypes.TargetTrackingMetricStat? = nil,
            returnData: Swift.Bool? = nil
        )
        {
            self.expression = expression
            self.id = id
            self.label = label
            self.metricStat = metricStat
            self.returnData = returnData
        }
    }
}

extension AutoScalingClientTypes {

    public enum MetricStatistic: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case samplecount
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricStatistic] {
            return [
                .average,
                .maximum,
                .minimum,
                .samplecount,
                .sum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case .minimum: return "Minimum"
            case .samplecount: return "SampleCount"
            case .sum: return "Sum"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    /// Represents a CloudWatch metric of your choosing for a target tracking scaling policy to use with Amazon EC2 Auto Scaling. To create your customized metric specification:
    ///
    /// * Add values for each required property from CloudWatch. You can use an existing metric, or a new metric that you create. To use your own metric, you must first publish the metric to CloudWatch. For more information, see [Publish custom metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/publishingMetrics.html) in the Amazon CloudWatch User Guide.
    ///
    /// * Choose a metric that changes proportionally with capacity. The value of the metric should increase or decrease in inverse proportion to the number of capacity units. That is, the value of the metric should decrease when capacity increases.
    ///
    ///
    /// For more information about the CloudWatch terminology below, see [Amazon CloudWatch concepts](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/cloudwatch_concepts.html). Each individual service provides information about the metrics, namespace, and dimensions they use. For more information, see [Amazon Web Services services that publish CloudWatch metrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/aws-services-cloudwatch-metrics.html) in the Amazon CloudWatch User Guide.
    public struct CustomizedMetricSpecification: Swift.Sendable {
        /// The dimensions of the metric. Conditional: If you published your metric with dimensions, you must specify the same dimensions in your scaling policy.
        public var dimensions: [AutoScalingClientTypes.MetricDimension]?
        /// The name of the metric. To get the exact metric name, namespace, and dimensions, inspect the [Metric](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_Metric.html) object that is returned by a call to [ListMetrics](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_ListMetrics.html).
        public var metricName: Swift.String?
        /// The metrics to include in the target tracking scaling policy, as a metric data query. This can include both raw metric and metric math expressions.
        public var metrics: [AutoScalingClientTypes.TargetTrackingMetricDataQuery]?
        /// The namespace of the metric.
        public var namespace: Swift.String?
        /// The statistic of the metric.
        public var statistic: AutoScalingClientTypes.MetricStatistic?
        /// The unit of the metric. For a complete list of the units that CloudWatch supports, see the [MetricDatum](https://docs.aws.amazon.com/AmazonCloudWatch/latest/APIReference/API_MetricDatum.html) data type in the Amazon CloudWatch API Reference.
        public var unit: Swift.String?

        public init(
            dimensions: [AutoScalingClientTypes.MetricDimension]? = nil,
            metricName: Swift.String? = nil,
            metrics: [AutoScalingClientTypes.TargetTrackingMetricDataQuery]? = nil,
            namespace: Swift.String? = nil,
            statistic: AutoScalingClientTypes.MetricStatistic? = nil,
            unit: Swift.String? = nil
        )
        {
            self.dimensions = dimensions
            self.metricName = metricName
            self.metrics = metrics
            self.namespace = namespace
            self.statistic = statistic
            self.unit = unit
        }
    }
}

extension AutoScalingClientTypes {

    public enum MetricType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case albrequestcountpertarget
        case asgaveragecpuutilization
        case asgaveragenetworkin
        case asgaveragenetworkout
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricType] {
            return [
                .albrequestcountpertarget,
                .asgaveragecpuutilization,
                .asgaveragenetworkin,
                .asgaveragenetworkout
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .albrequestcountpertarget: return "ALBRequestCountPerTarget"
            case .asgaveragecpuutilization: return "ASGAverageCPUUtilization"
            case .asgaveragenetworkin: return "ASGAverageNetworkIn"
            case .asgaveragenetworkout: return "ASGAverageNetworkOut"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension AutoScalingClientTypes {

    /// Represents a predefined metric for a target tracking scaling policy to use with Amazon EC2 Auto Scaling.
    public struct PredefinedMetricSpecification: Swift.Sendable {
        /// The metric type. The following predefined metrics are available:
        ///
        /// * ASGAverageCPUUtilization - Average CPU utilization of the Auto Scaling group.
        ///
        /// * ASGAverageNetworkIn - Average number of bytes received on all network interfaces by the Auto Scaling group.
        ///
        /// * ASGAverageNetworkOut - Average number of bytes sent out on all network interfaces by the Auto Scaling group.
        ///
        /// * ALBRequestCountPerTarget - Average Application Load Balancer request count per target for your Auto Scaling group.
        /// This member is required.
        public var predefinedMetricType: AutoScalingClientTypes.MetricType?
        /// A label that uniquely identifies a specific Application Load Balancer target group from which to determine the average request count served by your Auto Scaling group. You can't specify a resource label unless the target group is attached to the Auto Scaling group. You create the resource label by appending the final portion of the load balancer ARN and the final portion of the target group ARN into a single value, separated by a forward slash (/). The format of the resource label is: app/my-alb/778d41231b141a0f/targetgroup/my-alb-target-group/943f017f100becff. Where:
        ///
        /// * app// is the final portion of the load balancer ARN
        ///
        /// * targetgroup// is the final portion of the target group ARN.
        ///
        ///
        /// To find the ARN for an Application Load Balancer, use the [DescribeLoadBalancers](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeLoadBalancers.html) API operation. To find the ARN for the target group, use the [DescribeTargetGroups](https://docs.aws.amazon.com/elasticloadbalancing/latest/APIReference/API_DescribeTargetGroups.html) API operation.
        public var resourceLabel: Swift.String?

        public init(
            predefinedMetricType: AutoScalingClientTypes.MetricType? = nil,
            resourceLabel: Swift.String? = nil
        )
        {
            self.predefinedMetricType = predefinedMetricType
            self.resourceLabel = resourceLabel
        }
    }
}

extension AutoScalingClientTypes {

    /// Represents a target tracking scaling policy configuration to use with Amazon EC2 Auto Scaling.
    public struct TargetTrackingConfiguration: Swift.Sendable {
        /// A customized metric. You must specify either a predefined metric or a customized metric.
        public var customizedMetricSpecification: AutoScalingClientTypes.CustomizedMetricSpecification?
        /// Indicates whether scaling in by the target tracking scaling policy is disabled. If scaling in is disabled, the target tracking scaling policy doesn't remove instances from the Auto Scaling group. Otherwise, the target tracking scaling policy can remove instances from the Auto Scaling group. The default is false.
        public var disableScaleIn: Swift.Bool?
        /// A predefined metric. You must specify either a predefined metric or a customized metric.
        public var predefinedMetricSpecification: AutoScalingClientTypes.PredefinedMetricSpecification?
        /// The target value for the metric. Some metrics are based on a count instead of a percentage, such as the request count for an Application Load Balancer or the number of messages in an SQS queue. If the scaling policy specifies one of these metrics, specify the target utilization as the optimal average request or message count per instance during any one-minute interval.
        /// This member is required.
        public var targetValue: Swift.Double?

        public init(
            customizedMetricSpecification: AutoScalingClientTypes.CustomizedMetricSpecification? = nil,
            disableScaleIn: Swift.Bool? = nil,
            predefinedMetricSpecification: AutoScalingClientTypes.PredefinedMetricSpecification? = nil,
            targetValue: Swift.Double? = nil
        )
        {
            self.customizedMetricSpecification = customizedMetricSpecification
            self.disableScaleIn = disableScaleIn
            self.predefinedMetricSpecification = predefinedMetricSpecification
            self.targetValue = targetValue
        }
    }
}

extension AutoScalingClientTypes {

    /// Describes a scaling policy.
    public struct ScalingPolicy: Swift.Sendable {
        /// Specifies how the scaling adjustment is interpreted (for example, an absolute number or a percentage). The valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
        public var adjustmentType: Swift.String?
        /// The CloudWatch alarms related to the policy.
        public var alarms: [AutoScalingClientTypes.Alarm]?
        /// The name of the Auto Scaling group.
        public var autoScalingGroupName: Swift.String?
        /// The duration of the policy's cooldown period, in seconds.
        public var cooldown: Swift.Int?
        /// Indicates whether the policy is enabled (true) or disabled (false).
        public var enabled: Swift.Bool?
        /// The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics.
        public var estimatedInstanceWarmup: Swift.Int?
        /// The aggregation type for the CloudWatch metrics. The valid values are Minimum, Maximum, and Average.
        public var metricAggregationType: Swift.String?
        /// The minimum value to scale by when the adjustment type is PercentChangeInCapacity.
        public var minAdjustmentMagnitude: Swift.Int?
        /// Available for backward compatibility. Use MinAdjustmentMagnitude instead.
        @available(*, deprecated)
        public var minAdjustmentStep: Swift.Int?
        /// The Amazon Resource Name (ARN) of the policy.
        public var policyARN: Swift.String?
        /// The name of the scaling policy.
        public var policyName: Swift.String?
        /// One of the following policy types:
        ///
        /// * TargetTrackingScaling
        ///
        /// * StepScaling
        ///
        /// * SimpleScaling (default)
        ///
        /// * PredictiveScaling
        ///
        ///
        /// For more information, see [Target tracking scaling policies](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-target-tracking.html) and [Step and simple scaling policies](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html) in the Amazon EC2 Auto Scaling User Guide.
        public var policyType: Swift.String?
        /// A predictive scaling policy.
        public var predictiveScalingConfiguration: AutoScalingClientTypes.PredictiveScalingConfiguration?
        /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity.
        public var scalingAdjustment: Swift.Int?
        /// A set of adjustments that enable you to scale based on the size of the alarm breach.
        public var stepAdjustments: [AutoScalingClientTypes.StepAdjustment]?
        /// A target tracking scaling policy.
        public var targetTrackingConfiguration: AutoScalingClientTypes.TargetTrackingConfiguration?

        public init(
            adjustmentType: Swift.String? = nil,
            alarms: [AutoScalingClientTypes.Alarm]? = nil,
            autoScalingGroupName: Swift.String? = nil,
            cooldown: Swift.Int? = nil,
            enabled: Swift.Bool? = nil,
            estimatedInstanceWarmup: Swift.Int? = nil,
            metricAggregationType: Swift.String? = nil,
            minAdjustmentMagnitude: Swift.Int? = nil,
            minAdjustmentStep: Swift.Int? = nil,
            policyARN: Swift.String? = nil,
            policyName: Swift.String? = nil,
            policyType: Swift.String? = nil,
            predictiveScalingConfiguration: AutoScalingClientTypes.PredictiveScalingConfiguration? = nil,
            scalingAdjustment: Swift.Int? = nil,
            stepAdjustments: [AutoScalingClientTypes.StepAdjustment]? = nil,
            targetTrackingConfiguration: AutoScalingClientTypes.TargetTrackingConfiguration? = nil
        )
        {
            self.adjustmentType = adjustmentType
            self.alarms = alarms
            self.autoScalingGroupName = autoScalingGroupName
            self.cooldown = cooldown
            self.enabled = enabled
            self.estimatedInstanceWarmup = estimatedInstanceWarmup
            self.metricAggregationType = metricAggregationType
            self.minAdjustmentMagnitude = minAdjustmentMagnitude
            self.minAdjustmentStep = minAdjustmentStep
            self.policyARN = policyARN
            self.policyName = policyName
            self.policyType = policyType
            self.predictiveScalingConfiguration = predictiveScalingConfiguration
            self.scalingAdjustment = scalingAdjustment
            self.stepAdjustments = stepAdjustments
            self.targetTrackingConfiguration = targetTrackingConfiguration
        }
    }
}

public struct DescribePoliciesOutput: Swift.Sendable {
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?
    /// The scaling policies.
    public var scalingPolicies: [AutoScalingClientTypes.ScalingPolicy]?

    public init(
        nextToken: Swift.String? = nil,
        scalingPolicies: [AutoScalingClientTypes.ScalingPolicy]? = nil
    )
    {
        self.nextToken = nextToken
        self.scalingPolicies = scalingPolicies
    }
}

public struct DescribeScalingActivitiesInput: Swift.Sendable {
    /// The activity IDs of the desired scaling activities. If you omit this property, all activities for the past six weeks are described. If unknown activities are requested, they are ignored with no error. If you specify an Auto Scaling group, the results are limited to that group. Array Members: Maximum number of 50 IDs.
    public var activityIds: [Swift.String]?
    /// The name of the Auto Scaling group.
    public var autoScalingGroupName: Swift.String?
    /// Indicates whether to include scaling activity from deleted Auto Scaling groups.
    public var includeDeletedGroups: Swift.Bool?
    /// The maximum number of items to return with this call. The default value is 100 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init(
        activityIds: [Swift.String]? = nil,
        autoScalingGroupName: Swift.String? = nil,
        includeDeletedGroups: Swift.Bool? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.activityIds = activityIds
        self.autoScalingGroupName = autoScalingGroupName
        self.includeDeletedGroups = includeDeletedGroups
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

public struct DescribeScalingActivitiesOutput: Swift.Sendable {
    /// The scaling activities. Activities are sorted by start time. Activities still in progress are described first.
    /// This member is required.
    public var activities: [AutoScalingClientTypes.Activity]?
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?

    public init(
        activities: [AutoScalingClientTypes.Activity]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.activities = activities
        self.nextToken = nextToken
    }
}

extension AutoScalingClientTypes {

    /// Describes a process type. For more information, see [Types of processes](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-suspend-resume-processes.html#process-types) in the Amazon EC2 Auto Scaling User Guide.
    public struct ProcessType: Swift.Sendable {
        /// One of the following processes:
        ///
        /// * Launch
        ///
        /// * Terminate
        ///
        /// * AddToLoadBalancer
        ///
        /// * AlarmNotification
        ///
        /// * AZRebalance
        ///
        /// * HealthCheck
        ///
        /// * InstanceRefresh
        ///
        /// * ReplaceUnhealthy
        ///
        /// * ScheduledActions
        /// This member is required.
        public var processName: Swift.String?

        public init(
            processName: Swift.String? = nil
        )
        {
            self.processName = processName
        }
    }
}

public struct DescribeScalingProcessTypesOutput: Swift.Sendable {
    /// The names of the process types.
    public var processes: [AutoScalingClientTypes.ProcessType]?

    public init(
        processes: [AutoScalingClientTypes.ProcessType]? = nil
    )
    {
        self.processes = processes
    }
}

public struct DescribeScheduledActionsInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    public var autoScalingGroupName: Swift.String?
    /// The latest scheduled start time to return. If scheduled action names are provided, this property is ignored.
    public var endTime: Foundation.Date?
    /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?
    /// The names of one or more scheduled actions. If you omit this property, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error. Array Members: Maximum number of 50 actions.
    public var scheduledActionNames: [Swift.String]?
    /// The earliest scheduled start time to return. If scheduled action names are provided, this property is ignored.
    public var startTime: Foundation.Date?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        endTime: Foundation.Date? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        scheduledActionNames: [Swift.String]? = nil,
        startTime: Foundation.Date? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.endTime = endTime
        self.maxRecords = maxRecords
        self.nextToken = nextToken
        self.scheduledActionNames = scheduledActionNames
        self.startTime = startTime
    }
}

extension AutoScalingClientTypes {

    /// Describes a scheduled scaling action.
    public struct ScheduledUpdateGroupAction: Swift.Sendable {
        /// The name of the Auto Scaling group.
        public var autoScalingGroupName: Swift.String?
        /// The desired capacity is the initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain.
        public var desiredCapacity: Swift.Int?
        /// The date and time in UTC for the recurring schedule to end. For example, "2019-06-01T00:00:00Z".
        public var endTime: Foundation.Date?
        /// The maximum size of the Auto Scaling group.
        public var maxSize: Swift.Int?
        /// The minimum size of the Auto Scaling group.
        public var minSize: Swift.Int?
        /// The recurring schedule for the action, in Unix cron syntax format. When StartTime and EndTime are specified with Recurrence, they form the boundaries of when the recurring action starts and stops.
        public var recurrence: Swift.String?
        /// The Amazon Resource Name (ARN) of the scheduled action.
        public var scheduledActionARN: Swift.String?
        /// The name of the scheduled action.
        public var scheduledActionName: Swift.String?
        /// The date and time in UTC for this action to start. For example, "2019-06-01T00:00:00Z".
        public var startTime: Foundation.Date?
        /// This property is no longer used.
        public var time: Foundation.Date?
        /// The time zone for the cron expression.
        public var timeZone: Swift.String?

        public init(
            autoScalingGroupName: Swift.String? = nil,
            desiredCapacity: Swift.Int? = nil,
            endTime: Foundation.Date? = nil,
            maxSize: Swift.Int? = nil,
            minSize: Swift.Int? = nil,
            recurrence: Swift.String? = nil,
            scheduledActionARN: Swift.String? = nil,
            scheduledActionName: Swift.String? = nil,
            startTime: Foundation.Date? = nil,
            time: Foundation.Date? = nil,
            timeZone: Swift.String? = nil
        )
        {
            self.autoScalingGroupName = autoScalingGroupName
            self.desiredCapacity = desiredCapacity
            self.endTime = endTime
            self.maxSize = maxSize
            self.minSize = minSize
            self.recurrence = recurrence
            self.scheduledActionARN = scheduledActionARN
            self.scheduledActionName = scheduledActionName
            self.startTime = startTime
            self.time = time
            self.timeZone = timeZone
        }
    }
}

public struct DescribeScheduledActionsOutput: Swift.Sendable {
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?
    /// The scheduled actions.
    public var scheduledUpdateGroupActions: [AutoScalingClientTypes.ScheduledUpdateGroupAction]?

    public init(
        nextToken: Swift.String? = nil,
        scheduledUpdateGroupActions: [AutoScalingClientTypes.ScheduledUpdateGroupAction]? = nil
    )
    {
        self.nextToken = nextToken
        self.scheduledUpdateGroupActions = scheduledUpdateGroupActions
    }
}

public struct DescribeTagsInput: Swift.Sendable {
    /// One or more filters to scope the tags to return. The maximum number of filters per filter type (for example, auto-scaling-group) is 1000.
    public var filters: [AutoScalingClientTypes.Filter]?
    /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init(
        filters: [AutoScalingClientTypes.Filter]? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

public struct DescribeTagsOutput: Swift.Sendable {
    /// A string that indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?
    /// One or more tags.
    public var tags: [AutoScalingClientTypes.TagDescription]?

    public init(
        nextToken: Swift.String? = nil,
        tags: [AutoScalingClientTypes.TagDescription]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

public struct DescribeTerminationPolicyTypesOutput: Swift.Sendable {
    /// The termination policies supported by Amazon EC2 Auto Scaling: OldestInstance, OldestLaunchConfiguration, NewestInstance, ClosestToNextInstanceHour, Default, OldestLaunchTemplate, and AllocationStrategy.
    public var terminationPolicyTypes: [Swift.String]?

    public init(
        terminationPolicyTypes: [Swift.String]? = nil
    )
    {
        self.terminationPolicyTypes = terminationPolicyTypes
    }
}

public struct DescribeTrafficSourcesInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The maximum number of items to return with this call. The maximum value is 50.
    public var maxRecords: Swift.Int?
    /// The token for the next set of items to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?
    /// The traffic source type that you want to describe. The following lists the valid values:
    ///
    /// * elb if the traffic source is a Classic Load Balancer.
    ///
    /// * elbv2 if the traffic source is a Application Load Balancer, Gateway Load Balancer, or Network Load Balancer.
    ///
    /// * vpc-lattice if the traffic source is VPC Lattice.
    public var trafficSourceType: Swift.String?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        trafficSourceType: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
        self.trafficSourceType = trafficSourceType
    }
}

extension AutoScalingClientTypes {

    /// Describes the state of a traffic source.
    public struct TrafficSourceState: Swift.Sendable {
        /// The unique identifier of the traffic source.
        public var identifier: Swift.String?
        /// Describes the current state of a traffic source. The state values are as follows:
        ///
        /// * Adding - The Auto Scaling instances are being registered with the load balancer or target group.
        ///
        /// * Added - All Auto Scaling instances are registered with the load balancer or target group.
        ///
        /// * InService - For an Elastic Load Balancing load balancer or target group, at least one Auto Scaling instance passed an ELB health check. For VPC Lattice, at least one Auto Scaling instance passed an VPC_LATTICE health check.
        ///
        /// * Removing - The Auto Scaling instances are being deregistered from the load balancer or target group. If connection draining (deregistration delay) is enabled, Elastic Load Balancing or VPC Lattice waits for in-flight requests to complete before deregistering the instances.
        ///
        /// * Removed - All Auto Scaling instances are deregistered from the load balancer or target group.
        public var state: Swift.String?
        /// This is replaced by Identifier.
        @available(*, deprecated, message: "TrafficSource has been replaced by Identifier")
        public var trafficSource: Swift.String?
        /// Provides additional context for the value of Identifier. The following lists the valid values:
        ///
        /// * elb if Identifier is the name of a Classic Load Balancer.
        ///
        /// * elbv2 if Identifier is the ARN of an Application Load Balancer, Gateway Load Balancer, or Network Load Balancer target group.
        ///
        /// * vpc-lattice if Identifier is the ARN of a VPC Lattice target group.
        ///
        ///
        /// Required if the identifier is the name of a Classic Load Balancer.
        public var type: Swift.String?

        public init(
            identifier: Swift.String? = nil,
            state: Swift.String? = nil,
            trafficSource: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.identifier = identifier
            self.state = state
            self.trafficSource = trafficSource
            self.type = type
        }
    }
}

public struct DescribeTrafficSourcesOutput: Swift.Sendable {
    /// This string indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?
    /// Information about the traffic sources.
    public var trafficSources: [AutoScalingClientTypes.TrafficSourceState]?

    public init(
        nextToken: Swift.String? = nil,
        trafficSources: [AutoScalingClientTypes.TrafficSourceState]? = nil
    )
    {
        self.nextToken = nextToken
        self.trafficSources = trafficSources
    }
}

public struct DescribeWarmPoolInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The maximum number of instances to return with this call. The maximum value is 50.
    public var maxRecords: Swift.Int?
    /// The token for the next set of instances to return. (You received this token from a previous call.)
    public var nextToken: Swift.String?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        maxRecords: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.maxRecords = maxRecords
        self.nextToken = nextToken
    }
}

public struct DescribeWarmPoolOutput: Swift.Sendable {
    /// The instances that are currently in the warm pool.
    public var instances: [AutoScalingClientTypes.Instance]?
    /// This string indicates that the response contains more items than can be returned in a single response. To receive additional items, specify this string for the NextToken value when requesting the next set of items. This value is null when there are no more items to return.
    public var nextToken: Swift.String?
    /// The warm pool configuration details.
    public var warmPoolConfiguration: AutoScalingClientTypes.WarmPoolConfiguration?

    public init(
        instances: [AutoScalingClientTypes.Instance]? = nil,
        nextToken: Swift.String? = nil,
        warmPoolConfiguration: AutoScalingClientTypes.WarmPoolConfiguration? = nil
    )
    {
        self.instances = instances
        self.nextToken = nextToken
        self.warmPoolConfiguration = warmPoolConfiguration
    }
}

public struct DetachInstancesInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The IDs of the instances. You can specify up to 20 instances.
    public var instanceIds: [Swift.String]?
    /// Indicates whether the Auto Scaling group decrements the desired capacity value by the number of instances detached.
    /// This member is required.
    public var shouldDecrementDesiredCapacity: Swift.Bool?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        instanceIds: [Swift.String]? = nil,
        shouldDecrementDesiredCapacity: Swift.Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
        self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
    }
}

public struct DetachInstancesOutput: Swift.Sendable {
    /// The activities related to detaching the instances from the Auto Scaling group.
    public var activities: [AutoScalingClientTypes.Activity]?

    public init(
        activities: [AutoScalingClientTypes.Activity]? = nil
    )
    {
        self.activities = activities
    }
}

public struct DetachLoadBalancersInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The names of the load balancers. You can specify up to 10 load balancers.
    /// This member is required.
    public var loadBalancerNames: [Swift.String]?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        loadBalancerNames: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.loadBalancerNames = loadBalancerNames
    }
}

public struct DetachLoadBalancersOutput: Swift.Sendable {

    public init() { }
}

public struct DetachLoadBalancerTargetGroupsInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The Amazon Resource Names (ARN) of the target groups. You can specify up to 10 target groups.
    /// This member is required.
    public var targetGroupARNs: [Swift.String]?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        targetGroupARNs: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.targetGroupARNs = targetGroupARNs
    }
}

public struct DetachLoadBalancerTargetGroupsOutput: Swift.Sendable {

    public init() { }
}

public struct DetachTrafficSourcesInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The unique identifiers of one or more traffic sources. You can specify up to 10 traffic sources.
    /// This member is required.
    public var trafficSources: [AutoScalingClientTypes.TrafficSourceIdentifier]?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        trafficSources: [AutoScalingClientTypes.TrafficSourceIdentifier]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.trafficSources = trafficSources
    }
}

public struct DetachTrafficSourcesOutput: Swift.Sendable {

    public init() { }
}

public struct DisableMetricsCollectionInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// Identifies the metrics to disable. You can specify one or more of the following metrics:
    ///
    /// * GroupMinSize
    ///
    /// * GroupMaxSize
    ///
    /// * GroupDesiredCapacity
    ///
    /// * GroupInServiceInstances
    ///
    /// * GroupPendingInstances
    ///
    /// * GroupStandbyInstances
    ///
    /// * GroupTerminatingInstances
    ///
    /// * GroupTotalInstances
    ///
    /// * GroupInServiceCapacity
    ///
    /// * GroupPendingCapacity
    ///
    /// * GroupStandbyCapacity
    ///
    /// * GroupTerminatingCapacity
    ///
    /// * GroupTotalCapacity
    ///
    /// * WarmPoolDesiredCapacity
    ///
    /// * WarmPoolWarmedCapacity
    ///
    /// * WarmPoolPendingCapacity
    ///
    /// * WarmPoolTerminatingCapacity
    ///
    /// * WarmPoolTotalCapacity
    ///
    /// * GroupAndWarmPoolDesiredCapacity
    ///
    /// * GroupAndWarmPoolTotalCapacity
    ///
    ///
    /// If you omit this property, all metrics are disabled. For more information, see [Amazon CloudWatch metrics for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-metrics.html) in the Amazon EC2 Auto Scaling User Guide.
    public var metrics: [Swift.String]?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        metrics: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.metrics = metrics
    }
}

public struct EnableMetricsCollectionInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The frequency at which Amazon EC2 Auto Scaling sends aggregated data to CloudWatch. The only valid value is 1Minute.
    /// This member is required.
    public var granularity: Swift.String?
    /// Identifies the metrics to enable. You can specify one or more of the following metrics:
    ///
    /// * GroupMinSize
    ///
    /// * GroupMaxSize
    ///
    /// * GroupDesiredCapacity
    ///
    /// * GroupInServiceInstances
    ///
    /// * GroupPendingInstances
    ///
    /// * GroupStandbyInstances
    ///
    /// * GroupTerminatingInstances
    ///
    /// * GroupTotalInstances
    ///
    /// * GroupInServiceCapacity
    ///
    /// * GroupPendingCapacity
    ///
    /// * GroupStandbyCapacity
    ///
    /// * GroupTerminatingCapacity
    ///
    /// * GroupTotalCapacity
    ///
    /// * WarmPoolDesiredCapacity
    ///
    /// * WarmPoolWarmedCapacity
    ///
    /// * WarmPoolPendingCapacity
    ///
    /// * WarmPoolTerminatingCapacity
    ///
    /// * WarmPoolTotalCapacity
    ///
    /// * GroupAndWarmPoolDesiredCapacity
    ///
    /// * GroupAndWarmPoolTotalCapacity
    ///
    ///
    /// If you specify Granularity and don't specify any metrics, all metrics are enabled. For more information, see [Amazon CloudWatch metrics for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-metrics.html) in the Amazon EC2 Auto Scaling User Guide.
    public var metrics: [Swift.String]?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        granularity: Swift.String? = nil,
        metrics: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.granularity = granularity
        self.metrics = metrics
    }
}

public struct EnterStandbyInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The IDs of the instances. You can specify up to 20 instances.
    public var instanceIds: [Swift.String]?
    /// Indicates whether to decrement the desired capacity of the Auto Scaling group by the number of instances moved to Standby mode.
    /// This member is required.
    public var shouldDecrementDesiredCapacity: Swift.Bool?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        instanceIds: [Swift.String]? = nil,
        shouldDecrementDesiredCapacity: Swift.Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
        self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
    }
}

public struct EnterStandbyOutput: Swift.Sendable {
    /// The activities related to moving instances into Standby mode.
    public var activities: [AutoScalingClientTypes.Activity]?

    public init(
        activities: [AutoScalingClientTypes.Activity]? = nil
    )
    {
        self.activities = activities
    }
}

public struct ExecutePolicyInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    public var autoScalingGroupName: Swift.String?
    /// The breach threshold for the alarm. Required if the policy type is StepScaling and not supported otherwise.
    public var breachThreshold: Swift.Double?
    /// Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before executing the policy. Valid only if the policy type is SimpleScaling. For more information, see [Scaling cooldowns for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-scaling-cooldowns.html) in the Amazon EC2 Auto Scaling User Guide.
    public var honorCooldown: Swift.Bool?
    /// The metric value to compare to BreachThreshold. This enables you to execute a policy of type StepScaling and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59. If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error. Required if the policy type is StepScaling and not supported otherwise.
    public var metricValue: Swift.Double?
    /// The name or ARN of the policy.
    /// This member is required.
    public var policyName: Swift.String?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        breachThreshold: Swift.Double? = nil,
        honorCooldown: Swift.Bool? = nil,
        metricValue: Swift.Double? = nil,
        policyName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.breachThreshold = breachThreshold
        self.honorCooldown = honorCooldown
        self.metricValue = metricValue
        self.policyName = policyName
    }
}

public struct ExitStandbyInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The IDs of the instances. You can specify up to 20 instances.
    public var instanceIds: [Swift.String]?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        instanceIds: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
    }
}

public struct ExitStandbyOutput: Swift.Sendable {
    /// The activities related to moving instances out of Standby mode.
    public var activities: [AutoScalingClientTypes.Activity]?

    public init(
        activities: [AutoScalingClientTypes.Activity]? = nil
    )
    {
        self.activities = activities
    }
}

public struct GetPredictiveScalingForecastInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is 30 days. Although this parameter can accept a date and time that is more than two days in the future, the availability of forecast data has limits. Amazon EC2 Auto Scaling only issues forecasts for periods of two days in advance.
    /// This member is required.
    public var endTime: Foundation.Date?
    /// The name of the policy.
    /// This member is required.
    public var policyName: Swift.String?
    /// The inclusive start time of the time range for the forecast data to get. At most, the date and time can be one year before the current date and time.
    /// This member is required.
    public var startTime: Foundation.Date?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        endTime: Foundation.Date? = nil,
        policyName: Swift.String? = nil,
        startTime: Foundation.Date? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.endTime = endTime
        self.policyName = policyName
        self.startTime = startTime
    }
}

extension AutoScalingClientTypes {

    /// A GetPredictiveScalingForecast call returns the capacity forecast for a predictive scaling policy. This structure includes the data points for that capacity forecast, along with the timestamps of those data points.
    public struct CapacityForecast: Swift.Sendable {
        /// The timestamps for the data points, in UTC format.
        /// This member is required.
        public var timestamps: [Foundation.Date]?
        /// The values of the data points.
        /// This member is required.
        public var values: [Swift.Double]?

        public init(
            timestamps: [Foundation.Date]? = nil,
            values: [Swift.Double]? = nil
        )
        {
            self.timestamps = timestamps
            self.values = values
        }
    }
}

extension AutoScalingClientTypes {

    /// A GetPredictiveScalingForecast call returns the load forecast for a predictive scaling policy. This structure includes the data points for that load forecast, along with the timestamps of those data points and the metric specification.
    public struct LoadForecast: Swift.Sendable {
        /// The metric specification for the load forecast.
        /// This member is required.
        public var metricSpecification: AutoScalingClientTypes.PredictiveScalingMetricSpecification?
        /// The timestamps for the data points, in UTC format.
        /// This member is required.
        public var timestamps: [Foundation.Date]?
        /// The values of the data points.
        /// This member is required.
        public var values: [Swift.Double]?

        public init(
            metricSpecification: AutoScalingClientTypes.PredictiveScalingMetricSpecification? = nil,
            timestamps: [Foundation.Date]? = nil,
            values: [Swift.Double]? = nil
        )
        {
            self.metricSpecification = metricSpecification
            self.timestamps = timestamps
            self.values = values
        }
    }
}

public struct GetPredictiveScalingForecastOutput: Swift.Sendable {
    /// The capacity forecast.
    /// This member is required.
    public var capacityForecast: AutoScalingClientTypes.CapacityForecast?
    /// The load forecast.
    /// This member is required.
    public var loadForecast: [AutoScalingClientTypes.LoadForecast]?
    /// The time the forecast was made.
    /// This member is required.
    public var updateTime: Foundation.Date?

    public init(
        capacityForecast: AutoScalingClientTypes.CapacityForecast? = nil,
        loadForecast: [AutoScalingClientTypes.LoadForecast]? = nil,
        updateTime: Foundation.Date? = nil
    )
    {
        self.capacityForecast = capacityForecast
        self.loadForecast = loadForecast
        self.updateTime = updateTime
    }
}

public struct PutLifecycleHookInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The action the Auto Scaling group takes when the lifecycle hook timeout elapses or if an unexpected failure occurs. The default value is ABANDON. Valid values: CONTINUE | ABANDON
    public var defaultResult: Swift.String?
    /// The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from 30 to 7200 seconds. The default value is 3600 seconds (1 hour).
    public var heartbeatTimeout: Swift.Int?
    /// The name of the lifecycle hook.
    /// This member is required.
    public var lifecycleHookName: Swift.String?
    /// The lifecycle transition. For Auto Scaling groups, there are two major lifecycle transitions.
    ///
    /// * To create a lifecycle hook for scale-out events, specify autoscaling:EC2_INSTANCE_LAUNCHING.
    ///
    /// * To create a lifecycle hook for scale-in events, specify autoscaling:EC2_INSTANCE_TERMINATING.
    ///
    ///
    /// Required for new lifecycle hooks, but optional when updating existing hooks.
    public var lifecycleTransition: Swift.String?
    /// Additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.
    public var notificationMetadata: Swift.String?
    /// The Amazon Resource Name (ARN) of the notification target that Amazon EC2 Auto Scaling uses to notify you when an instance is in a wait state for the lifecycle hook. You can specify either an Amazon SNS topic or an Amazon SQS queue. If you specify an empty string, this overrides the current ARN. This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key-value pair format when sending notifications to an Amazon SNS topic. When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contain the following additional key-value pair: "Event": "autoscaling:TEST_NOTIFICATION".
    public var notificationTargetARN: Swift.String?
    /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target. Valid only if the notification target is an Amazon SNS topic or an Amazon SQS queue. Required for new lifecycle hooks, but optional when updating existing hooks.
    public var roleARN: Swift.String?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        defaultResult: Swift.String? = nil,
        heartbeatTimeout: Swift.Int? = nil,
        lifecycleHookName: Swift.String? = nil,
        lifecycleTransition: Swift.String? = nil,
        notificationMetadata: Swift.String? = nil,
        notificationTargetARN: Swift.String? = nil,
        roleARN: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.defaultResult = defaultResult
        self.heartbeatTimeout = heartbeatTimeout
        self.lifecycleHookName = lifecycleHookName
        self.lifecycleTransition = lifecycleTransition
        self.notificationMetadata = notificationMetadata
        self.notificationTargetARN = notificationTargetARN
        self.roleARN = roleARN
    }
}

public struct PutLifecycleHookOutput: Swift.Sendable {

    public init() { }
}

public struct PutNotificationConfigurationInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The type of event that causes the notification to be sent. To query the notification types supported by Amazon EC2 Auto Scaling, call the [DescribeAutoScalingNotificationTypes](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_DescribeAutoScalingNotificationTypes.html) API.
    /// This member is required.
    public var notificationTypes: [Swift.String]?
    /// The Amazon Resource Name (ARN) of the Amazon SNS topic.
    /// This member is required.
    public var topicARN: Swift.String?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        notificationTypes: [Swift.String]? = nil,
        topicARN: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.notificationTypes = notificationTypes
        self.topicARN = topicARN
    }
}

public struct PutScalingPolicyInput: Swift.Sendable {
    /// Specifies how the scaling adjustment is interpreted (for example, an absolute number or a percentage). The valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity. Required if the policy type is StepScaling or SimpleScaling. For more information, see [Scaling adjustment types](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment) in the Amazon EC2 Auto Scaling User Guide.
    public var adjustmentType: Swift.String?
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// A cooldown period, in seconds, that applies to a specific simple scaling policy. When a cooldown period is specified here, it overrides the default cooldown. Valid only if the policy type is SimpleScaling. For more information, see [Scaling cooldowns for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-scaling-cooldowns.html) in the Amazon EC2 Auto Scaling User Guide. Default: None
    public var cooldown: Swift.Int?
    /// Indicates whether the scaling policy is enabled or disabled. The default is enabled. For more information, see [Disable a scaling policy for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-enable-disable-scaling-policy.html) in the Amazon EC2 Auto Scaling User Guide.
    public var enabled: Swift.Bool?
    /// Not needed if the default instance warmup is defined for the group. The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This warm-up period applies to instances launched due to a specific target tracking or step scaling policy. When a warm-up period is specified here, it overrides the default instance warmup. Valid only if the policy type is TargetTrackingScaling or StepScaling. The default is to use the value for the default instance warmup defined for the group. If default instance warmup is null, then EstimatedInstanceWarmup falls back to the value of default cooldown.
    public var estimatedInstanceWarmup: Swift.Int?
    /// The aggregation type for the CloudWatch metrics. The valid values are Minimum, Maximum, and Average. If the aggregation type is null, the value is treated as Average. Valid only if the policy type is StepScaling.
    public var metricAggregationType: Swift.String?
    /// The minimum value to scale by when the adjustment type is PercentChangeInCapacity. For example, suppose that you create a step scaling policy to scale out an Auto Scaling group by 25 percent and you specify a MinAdjustmentMagnitude of 2. If the group has 4 instances and the scaling policy is performed, 25 percent of 4 is 1. However, because you specified a MinAdjustmentMagnitude of 2, Amazon EC2 Auto Scaling scales out the group by 2 instances. Valid only if the policy type is StepScaling or SimpleScaling. For more information, see [Scaling adjustment types](https://docs.aws.amazon.com/autoscaling/ec2/userguide/as-scaling-simple-step.html#as-scaling-adjustment) in the Amazon EC2 Auto Scaling User Guide. Some Auto Scaling groups use instance weights. In this case, set the MinAdjustmentMagnitude to a value that is at least as large as your largest instance weight.
    public var minAdjustmentMagnitude: Swift.Int?
    /// Available for backward compatibility. Use MinAdjustmentMagnitude instead.
    @available(*, deprecated)
    public var minAdjustmentStep: Swift.Int?
    /// The name of the policy.
    /// This member is required.
    public var policyName: Swift.String?
    /// One of the following policy types:
    ///
    /// * TargetTrackingScaling
    ///
    /// * StepScaling
    ///
    /// * SimpleScaling (default)
    ///
    /// * PredictiveScaling
    public var policyType: Swift.String?
    /// A predictive scaling policy. Provides support for predefined and custom metrics. Predefined metrics include CPU utilization, network in/out, and the Application Load Balancer request count. For more information, see [PredictiveScalingConfiguration](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_PredictiveScalingConfiguration.html) in the Amazon EC2 Auto Scaling API Reference. Required if the policy type is PredictiveScaling.
    public var predictiveScalingConfiguration: AutoScalingClientTypes.PredictiveScalingConfiguration?
    /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. For exact capacity, you must specify a non-negative value. Required if the policy type is SimpleScaling. (Not used with any other policy type.)
    public var scalingAdjustment: Swift.Int?
    /// A set of adjustments that enable you to scale based on the size of the alarm breach. Required if the policy type is StepScaling. (Not used with any other policy type.)
    public var stepAdjustments: [AutoScalingClientTypes.StepAdjustment]?
    /// A target tracking scaling policy. Provides support for predefined or custom metrics. The following predefined metrics are available:
    ///
    /// * ASGAverageCPUUtilization
    ///
    /// * ASGAverageNetworkIn
    ///
    /// * ASGAverageNetworkOut
    ///
    /// * ALBRequestCountPerTarget
    ///
    ///
    /// If you specify ALBRequestCountPerTarget for the metric, you must specify the ResourceLabel property with the PredefinedMetricSpecification. For more information, see [TargetTrackingConfiguration](https://docs.aws.amazon.com/autoscaling/ec2/APIReference/API_TargetTrackingConfiguration.html) in the Amazon EC2 Auto Scaling API Reference. Required if the policy type is TargetTrackingScaling.
    public var targetTrackingConfiguration: AutoScalingClientTypes.TargetTrackingConfiguration?

    public init(
        adjustmentType: Swift.String? = nil,
        autoScalingGroupName: Swift.String? = nil,
        cooldown: Swift.Int? = nil,
        enabled: Swift.Bool? = nil,
        estimatedInstanceWarmup: Swift.Int? = nil,
        metricAggregationType: Swift.String? = nil,
        minAdjustmentMagnitude: Swift.Int? = nil,
        minAdjustmentStep: Swift.Int? = nil,
        policyName: Swift.String? = nil,
        policyType: Swift.String? = nil,
        predictiveScalingConfiguration: AutoScalingClientTypes.PredictiveScalingConfiguration? = nil,
        scalingAdjustment: Swift.Int? = nil,
        stepAdjustments: [AutoScalingClientTypes.StepAdjustment]? = nil,
        targetTrackingConfiguration: AutoScalingClientTypes.TargetTrackingConfiguration? = nil
    )
    {
        self.adjustmentType = adjustmentType
        self.autoScalingGroupName = autoScalingGroupName
        self.cooldown = cooldown
        self.enabled = enabled
        self.estimatedInstanceWarmup = estimatedInstanceWarmup
        self.metricAggregationType = metricAggregationType
        self.minAdjustmentMagnitude = minAdjustmentMagnitude
        self.minAdjustmentStep = minAdjustmentStep
        self.policyName = policyName
        self.policyType = policyType
        self.predictiveScalingConfiguration = predictiveScalingConfiguration
        self.scalingAdjustment = scalingAdjustment
        self.stepAdjustments = stepAdjustments
        self.targetTrackingConfiguration = targetTrackingConfiguration
    }
}

/// Contains the output of PutScalingPolicy.
public struct PutScalingPolicyOutput: Swift.Sendable {
    /// The CloudWatch alarms created for the target tracking scaling policy.
    public var alarms: [AutoScalingClientTypes.Alarm]?
    /// The Amazon Resource Name (ARN) of the policy.
    public var policyARN: Swift.String?

    public init(
        alarms: [AutoScalingClientTypes.Alarm]? = nil,
        policyARN: Swift.String? = nil
    )
    {
        self.alarms = alarms
        self.policyARN = policyARN
    }
}

public struct PutScheduledUpdateGroupActionInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The desired capacity is the initial capacity of the Auto Scaling group after the scheduled action runs and the capacity it attempts to maintain. It can scale beyond this capacity if you add more scaling conditions. You must specify at least one of the following properties: MaxSize, MinSize, or DesiredCapacity.
    public var desiredCapacity: Swift.Int?
    /// The date and time for the recurring schedule to end, in UTC. For example, "2021-06-01T00:00:00Z".
    public var endTime: Foundation.Date?
    /// The maximum size of the Auto Scaling group.
    public var maxSize: Swift.Int?
    /// The minimum size of the Auto Scaling group.
    public var minSize: Swift.Int?
    /// The recurring schedule for this action. This format consists of five fields separated by white spaces: [Minute] [Hour] [Day_of_Month] [Month_of_Year] [Day_of_Week]. The value must be in quotes (for example, "30 0 1 1,6,12 *"). For more information about this format, see [Crontab](http://crontab.org). When StartTime and EndTime are specified with Recurrence, they form the boundaries of when the recurring action starts and stops. Cron expressions use Universal Coordinated Time (UTC) by default.
    public var recurrence: Swift.String?
    /// The name of this scaling action.
    /// This member is required.
    public var scheduledActionName: Swift.String?
    /// The date and time for this action to start, in YYYY-MM-DDThh:mm:ssZ format in UTC/GMT only and in quotes (for example, "2021-06-01T00:00:00Z"). If you specify Recurrence and StartTime, Amazon EC2 Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence.
    public var startTime: Foundation.Date?
    /// This property is no longer used.
    public var time: Foundation.Date?
    /// Specifies the time zone for a cron expression. If a time zone is not provided, UTC is used by default. Valid values are the canonical names of the IANA time zones, derived from the IANA Time Zone Database (such as Etc/GMT+9 or Pacific/Tahiti). For more information, see [https://en.wikipedia.org/wiki/List_of_tz_database_time_zones](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
    public var timeZone: Swift.String?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        desiredCapacity: Swift.Int? = nil,
        endTime: Foundation.Date? = nil,
        maxSize: Swift.Int? = nil,
        minSize: Swift.Int? = nil,
        recurrence: Swift.String? = nil,
        scheduledActionName: Swift.String? = nil,
        startTime: Foundation.Date? = nil,
        time: Foundation.Date? = nil,
        timeZone: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.desiredCapacity = desiredCapacity
        self.endTime = endTime
        self.maxSize = maxSize
        self.minSize = minSize
        self.recurrence = recurrence
        self.scheduledActionName = scheduledActionName
        self.startTime = startTime
        self.time = time
        self.timeZone = timeZone
    }
}

public struct PutWarmPoolInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// Indicates whether instances in the Auto Scaling group can be returned to the warm pool on scale in. The default is to terminate instances in the Auto Scaling group when the group scales in.
    public var instanceReusePolicy: AutoScalingClientTypes.InstanceReusePolicy?
    /// Specifies the maximum number of instances that are allowed to be in the warm pool or in any state except Terminated for the Auto Scaling group. This is an optional property. Specify it only if you do not want the warm pool size to be determined by the difference between the group's maximum capacity and its desired capacity. If a value for MaxGroupPreparedCapacity is not specified, Amazon EC2 Auto Scaling launches and maintains the difference between the group's maximum capacity and its desired capacity. If you specify a value for MaxGroupPreparedCapacity, Amazon EC2 Auto Scaling uses the difference between the MaxGroupPreparedCapacity and the desired capacity instead. The size of the warm pool is dynamic. Only when MaxGroupPreparedCapacity and MinSize are set to the same value does the warm pool have an absolute size. If the desired capacity of the Auto Scaling group is higher than the MaxGroupPreparedCapacity, the capacity of the warm pool is 0, unless you specify a value for MinSize. To remove a value that you previously set, include the property but specify -1 for the value.
    public var maxGroupPreparedCapacity: Swift.Int?
    /// Specifies the minimum number of instances to maintain in the warm pool. This helps you to ensure that there is always a certain number of warmed instances available to handle traffic spikes. Defaults to 0 if not specified.
    public var minSize: Swift.Int?
    /// Sets the instance state to transition to after the lifecycle actions are complete. Default is Stopped.
    public var poolState: AutoScalingClientTypes.WarmPoolState?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        instanceReusePolicy: AutoScalingClientTypes.InstanceReusePolicy? = nil,
        maxGroupPreparedCapacity: Swift.Int? = nil,
        minSize: Swift.Int? = nil,
        poolState: AutoScalingClientTypes.WarmPoolState? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceReusePolicy = instanceReusePolicy
        self.maxGroupPreparedCapacity = maxGroupPreparedCapacity
        self.minSize = minSize
        self.poolState = poolState
    }
}

public struct PutWarmPoolOutput: Swift.Sendable {

    public init() { }
}

public struct RecordLifecycleActionHeartbeatInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The ID of the instance.
    public var instanceId: Swift.String?
    /// A token that uniquely identifies a specific lifecycle action associated with an instance. Amazon EC2 Auto Scaling sends this token to the notification target that you specified when you created the lifecycle hook.
    public var lifecycleActionToken: Swift.String?
    /// The name of the lifecycle hook.
    /// This member is required.
    public var lifecycleHookName: Swift.String?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        lifecycleActionToken: Swift.String? = nil,
        lifecycleHookName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceId = instanceId
        self.lifecycleActionToken = lifecycleActionToken
        self.lifecycleHookName = lifecycleHookName
    }
}

public struct RecordLifecycleActionHeartbeatOutput: Swift.Sendable {

    public init() { }
}

public struct ResumeProcessesInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// One or more of the following processes:
    ///
    /// * Launch
    ///
    /// * Terminate
    ///
    /// * AddToLoadBalancer
    ///
    /// * AlarmNotification
    ///
    /// * AZRebalance
    ///
    /// * HealthCheck
    ///
    /// * InstanceRefresh
    ///
    /// * ReplaceUnhealthy
    ///
    /// * ScheduledActions
    ///
    ///
    /// If you omit this property, all processes are specified.
    public var scalingProcesses: [Swift.String]?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        scalingProcesses: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scalingProcesses = scalingProcesses
    }
}

/// The request failed because a desired configuration was not found or an incompatible launch template (uses a Systems Manager parameter instead of an AMI ID) or launch template version ($Latest or $Default) is present on the Auto Scaling group.
public struct IrreversibleInstanceRefreshFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IrreversibleInstanceRefresh" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct RollbackInstanceRefreshInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?

    public init(
        autoScalingGroupName: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
    }
}

public struct RollbackInstanceRefreshOutput: Swift.Sendable {
    /// The instance refresh ID associated with the request. This is the unique ID assigned to the instance refresh when it was started.
    public var instanceRefreshId: Swift.String?

    public init(
        instanceRefreshId: Swift.String? = nil
    )
    {
        self.instanceRefreshId = instanceRefreshId
    }
}

public struct SetDesiredCapacityInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The desired capacity is the initial capacity of the Auto Scaling group after this operation completes and the capacity it attempts to maintain.
    /// This member is required.
    public var desiredCapacity: Swift.Int?
    /// Indicates whether Amazon EC2 Auto Scaling waits for the cooldown period to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity. By default, Amazon EC2 Auto Scaling does not honor the cooldown period during manual scaling activities.
    public var honorCooldown: Swift.Bool?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        desiredCapacity: Swift.Int? = nil,
        honorCooldown: Swift.Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.desiredCapacity = desiredCapacity
        self.honorCooldown = honorCooldown
    }
}

public struct SetInstanceHealthInput: Swift.Sendable {
    /// The health status of the instance. Set to Healthy to have the instance remain in service. Set to Unhealthy to have the instance be out of service. Amazon EC2 Auto Scaling terminates and replaces the unhealthy instance.
    /// This member is required.
    public var healthStatus: Swift.String?
    /// The ID of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// If the Auto Scaling group of the specified instance has a HealthCheckGracePeriod specified for the group, by default, this call respects the grace period. Set this to False, to have the call not respect the grace period associated with the group. For more information about the health check grace period, see [Set the health check grace period for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html) in the Amazon EC2 Auto Scaling User Guide.
    public var shouldRespectGracePeriod: Swift.Bool?

    public init(
        healthStatus: Swift.String? = nil,
        instanceId: Swift.String? = nil,
        shouldRespectGracePeriod: Swift.Bool? = nil
    )
    {
        self.healthStatus = healthStatus
        self.instanceId = instanceId
        self.shouldRespectGracePeriod = shouldRespectGracePeriod
    }
}

public struct SetInstanceProtectionInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// One or more instance IDs. You can specify up to 50 instances.
    /// This member is required.
    public var instanceIds: [Swift.String]?
    /// Indicates whether the instance is protected from termination by Amazon EC2 Auto Scaling when scaling in.
    /// This member is required.
    public var protectedFromScaleIn: Swift.Bool?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        instanceIds: [Swift.String]? = nil,
        protectedFromScaleIn: Swift.Bool? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.instanceIds = instanceIds
        self.protectedFromScaleIn = protectedFromScaleIn
    }
}

public struct SetInstanceProtectionOutput: Swift.Sendable {

    public init() { }
}

/// The request failed because an active instance refresh already exists for the specified Auto Scaling group.
public struct InstanceRefreshInProgressFault: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InstanceRefreshInProgress" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension AutoScalingClientTypes {

    public enum RefreshStrategy: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rolling
        case sdkUnknown(Swift.String)

        public static var allCases: [RefreshStrategy] {
            return [
                .rolling
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rolling: return "Rolling"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct StartInstanceRefreshInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The desired configuration. For example, the desired configuration can specify a new launch template or a new version of the current launch template. Once the instance refresh succeeds, Amazon EC2 Auto Scaling updates the settings of the Auto Scaling group to reflect the new desired configuration. When you specify a new launch template or a new version of the current launch template for your desired configuration, consider enabling the SkipMatching property in preferences. If it's enabled, Amazon EC2 Auto Scaling skips replacing instances that already use the specified launch template and instance types. This can help you reduce the number of replacements that are required to apply updates.
    public var desiredConfiguration: AutoScalingClientTypes.DesiredConfiguration?
    /// Sets your preferences for the instance refresh so that it performs as expected when you start it. Includes the instance warmup time, the minimum and maximum healthy percentages, and the behaviors that you want Amazon EC2 Auto Scaling to use if instances that are in Standby state or protected from scale in are found. You can also choose to enable additional features, such as the following:
    ///
    /// * Auto rollback
    ///
    /// * Checkpoints
    ///
    /// * CloudWatch alarms
    ///
    /// * Skip matching
    ///
    /// * Bake time
    public var preferences: AutoScalingClientTypes.RefreshPreferences?
    /// The strategy to use for the instance refresh. The only valid value is Rolling.
    public var strategy: AutoScalingClientTypes.RefreshStrategy?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        desiredConfiguration: AutoScalingClientTypes.DesiredConfiguration? = nil,
        preferences: AutoScalingClientTypes.RefreshPreferences? = nil,
        strategy: AutoScalingClientTypes.RefreshStrategy? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.desiredConfiguration = desiredConfiguration
        self.preferences = preferences
        self.strategy = strategy
    }
}

public struct StartInstanceRefreshOutput: Swift.Sendable {
    /// A unique ID for tracking the progress of the instance refresh.
    public var instanceRefreshId: Swift.String?

    public init(
        instanceRefreshId: Swift.String? = nil
    )
    {
        self.instanceRefreshId = instanceRefreshId
    }
}

public struct SuspendProcessesInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// One or more of the following processes:
    ///
    /// * Launch
    ///
    /// * Terminate
    ///
    /// * AddToLoadBalancer
    ///
    /// * AlarmNotification
    ///
    /// * AZRebalance
    ///
    /// * HealthCheck
    ///
    /// * InstanceRefresh
    ///
    /// * ReplaceUnhealthy
    ///
    /// * ScheduledActions
    ///
    ///
    /// If you omit this property, all processes are specified.
    public var scalingProcesses: [Swift.String]?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        scalingProcesses: [Swift.String]? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.scalingProcesses = scalingProcesses
    }
}

public struct TerminateInstanceInAutoScalingGroupInput: Swift.Sendable {
    /// The ID of the instance.
    /// This member is required.
    public var instanceId: Swift.String?
    /// Indicates whether terminating the instance also decrements the size of the Auto Scaling group.
    /// This member is required.
    public var shouldDecrementDesiredCapacity: Swift.Bool?

    public init(
        instanceId: Swift.String? = nil,
        shouldDecrementDesiredCapacity: Swift.Bool? = nil
    )
    {
        self.instanceId = instanceId
        self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
    }
}

public struct TerminateInstanceInAutoScalingGroupOutput: Swift.Sendable {
    /// A scaling activity.
    public var activity: AutoScalingClientTypes.Activity?

    public init(
        activity: AutoScalingClientTypes.Activity? = nil
    )
    {
        self.activity = activity
    }
}

public struct UpdateAutoScalingGroupInput: Swift.Sendable {
    /// The name of the Auto Scaling group.
    /// This member is required.
    public var autoScalingGroupName: Swift.String?
    /// The instance capacity distribution across Availability Zones.
    public var availabilityZoneDistribution: AutoScalingClientTypes.AvailabilityZoneDistribution?
    /// One or more Availability Zones for the group.
    public var availabilityZones: [Swift.String]?
    /// Enables or disables Capacity Rebalancing. For more information, see [Use Capacity Rebalancing to handle Amazon EC2 Spot Interruptions](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html) in the Amazon EC2 Auto Scaling User Guide.
    public var capacityRebalance: Swift.Bool?
    /// Reserved.
    public var context: Swift.String?
    /// Only needed if you use simple scaling policies. The amount of time, in seconds, between one scaling activity ending and another one starting due to simple scaling policies. For more information, see [Scaling cooldowns for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-scaling-cooldowns.html) in the Amazon EC2 Auto Scaling User Guide.
    public var defaultCooldown: Swift.Int?
    /// The amount of time, in seconds, until a new instance is considered to have finished initializing and resource consumption to become stable after it enters the InService state. During an instance refresh, Amazon EC2 Auto Scaling waits for the warm-up period after it replaces an instance before it moves on to replacing the next instance. Amazon EC2 Auto Scaling also waits for the warm-up period before aggregating the metrics for new instances with existing instances in the Amazon CloudWatch metrics that are used for scaling, resulting in more reliable usage data. For more information, see [Set the default instance warmup for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html) in the Amazon EC2 Auto Scaling User Guide. To manage various warm-up settings at the group level, we recommend that you set the default instance warmup, even if it is set to 0 seconds. To remove a value that you previously set, include the property but specify -1 for the value. However, we strongly recommend keeping the default instance warmup enabled by specifying a value of 0 or other nominal value.
    public var defaultInstanceWarmup: Swift.Int?
    /// The desired capacity is the initial capacity of the Auto Scaling group after this operation completes and the capacity it attempts to maintain. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
    public var desiredCapacity: Swift.Int?
    /// The unit of measurement for the value specified for desired capacity. Amazon EC2 Auto Scaling supports DesiredCapacityType for attribute-based instance type selection only. For more information, see [Create a mixed instances group using attribute-based instance type selection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-mixed-instances-group-attribute-based-instance-type-selection.html) in the Amazon EC2 Auto Scaling User Guide. By default, Amazon EC2 Auto Scaling specifies units, which translates into number of instances. Valid values: units | vcpu | memory-mib
    public var desiredCapacityType: Swift.String?
    /// The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before checking the health status of an EC2 instance that has come into service and marking it unhealthy due to a failed health check. This is useful if your instances do not immediately pass their health checks after they enter the InService state. For more information, see [Set the health check grace period for an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html) in the Amazon EC2 Auto Scaling User Guide.
    public var healthCheckGracePeriod: Swift.Int?
    /// A comma-separated value string of one or more health check types. The valid values are EC2, EBS, ELB, and VPC_LATTICE. EC2 is the default health check and cannot be disabled. For more information, see [Health checks for instances in an Auto Scaling group](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-health-checks.html) in the Amazon EC2 Auto Scaling User Guide. Only specify EC2 if you must clear a value that was previously set.
    public var healthCheckType: Swift.String?
    /// An instance maintenance policy. For more information, see [Set instance maintenance policy](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-maintenance-policy.html) in the Amazon EC2 Auto Scaling User Guide.
    public var instanceMaintenancePolicy: AutoScalingClientTypes.InstanceMaintenancePolicy?
    /// The name of the launch configuration. If you specify LaunchConfigurationName in your update request, you can't specify LaunchTemplate or MixedInstancesPolicy.
    public var launchConfigurationName: Swift.String?
    /// The launch template and version to use to specify the updates. If you specify LaunchTemplate in your update request, you can't specify LaunchConfigurationName or MixedInstancesPolicy.
    public var launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification?
    /// The maximum amount of time, in seconds, that an instance can be in service. The default is null. If specified, the value must be either 0 or a number equal to or greater than 86,400 seconds (1 day). To clear a previously set value, specify a new value of 0. For more information, see [Replacing Auto Scaling instances based on maximum instance lifetime](https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html) in the Amazon EC2 Auto Scaling User Guide.
    public var maxInstanceLifetime: Swift.Int?
    /// The maximum size of the Auto Scaling group. With a mixed instances policy that uses instance weighting, Amazon EC2 Auto Scaling may need to go above MaxSize to meet your capacity requirements. In this event, Amazon EC2 Auto Scaling will never go above MaxSize by more than your largest instance weight (weights that define how many units each instance contributes to the desired capacity of the group).
    public var maxSize: Swift.Int?
    /// The minimum size of the Auto Scaling group.
    public var minSize: Swift.Int?
    /// The mixed instances policy. For more information, see [Auto Scaling groups with multiple instance types and purchase options](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html) in the Amazon EC2 Auto Scaling User Guide.
    public var mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy?
    /// Indicates whether newly launched instances are protected from termination by Amazon EC2 Auto Scaling when scaling in. For more information about preventing instances from terminating on scale in, see [Use instance scale-in protection](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html) in the Amazon EC2 Auto Scaling User Guide.
    public var newInstancesProtectedFromScaleIn: Swift.Bool?
    /// The name of an existing placement group into which to launch your instances. To remove the placement group setting, pass an empty string for placement-group. For more information about placement groups, see [Placement groups](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html) in the Amazon EC2 User Guide for Linux Instances. A cluster placement group is a logical grouping of instances within a single Availability Zone. You cannot specify multiple Availability Zones and a cluster placement group.
    public var placementGroup: Swift.String?
    /// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling group uses to call other Amazon Web Services on your behalf. For more information, see [Service-linked roles](https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html) in the Amazon EC2 Auto Scaling User Guide.
    public var serviceLinkedRoleARN: Swift.String?
    /// A policy or a list of policies that are used to select the instances to terminate. The policies are executed in the order that you list them. For more information, see [Configure termination policies for Amazon EC2 Auto Scaling](https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html) in the Amazon EC2 Auto Scaling User Guide. Valid values: Default | AllocationStrategy | ClosestToNextInstanceHour | NewestInstance | OldestInstance | OldestLaunchConfiguration | OldestLaunchTemplate | arn:aws:lambda:region:account-id:function:my-function:my-alias
    public var terminationPolicies: [Swift.String]?
    /// A comma-separated list of subnet IDs for a virtual private cloud (VPC). If you specify VPCZoneIdentifier with AvailabilityZones, the subnets that you specify must reside in those Availability Zones.
    public var vpcZoneIdentifier: Swift.String?

    public init(
        autoScalingGroupName: Swift.String? = nil,
        availabilityZoneDistribution: AutoScalingClientTypes.AvailabilityZoneDistribution? = nil,
        availabilityZones: [Swift.String]? = nil,
        capacityRebalance: Swift.Bool? = nil,
        context: Swift.String? = nil,
        defaultCooldown: Swift.Int? = nil,
        defaultInstanceWarmup: Swift.Int? = nil,
        desiredCapacity: Swift.Int? = nil,
        desiredCapacityType: Swift.String? = nil,
        healthCheckGracePeriod: Swift.Int? = nil,
        healthCheckType: Swift.String? = nil,
        instanceMaintenancePolicy: AutoScalingClientTypes.InstanceMaintenancePolicy? = nil,
        launchConfigurationName: Swift.String? = nil,
        launchTemplate: AutoScalingClientTypes.LaunchTemplateSpecification? = nil,
        maxInstanceLifetime: Swift.Int? = nil,
        maxSize: Swift.Int? = nil,
        minSize: Swift.Int? = nil,
        mixedInstancesPolicy: AutoScalingClientTypes.MixedInstancesPolicy? = nil,
        newInstancesProtectedFromScaleIn: Swift.Bool? = nil,
        placementGroup: Swift.String? = nil,
        serviceLinkedRoleARN: Swift.String? = nil,
        terminationPolicies: [Swift.String]? = nil,
        vpcZoneIdentifier: Swift.String? = nil
    )
    {
        self.autoScalingGroupName = autoScalingGroupName
        self.availabilityZoneDistribution = availabilityZoneDistribution
        self.availabilityZones = availabilityZones
        self.capacityRebalance = capacityRebalance
        self.context = context
        self.defaultCooldown = defaultCooldown
        self.defaultInstanceWarmup = defaultInstanceWarmup
        self.desiredCapacity = desiredCapacity
        self.desiredCapacityType = desiredCapacityType
        self.healthCheckGracePeriod = healthCheckGracePeriod
        self.healthCheckType = healthCheckType
        self.instanceMaintenancePolicy = instanceMaintenancePolicy
        self.launchConfigurationName = launchConfigurationName
        self.launchTemplate = launchTemplate
        self.maxInstanceLifetime = maxInstanceLifetime
        self.maxSize = maxSize
        self.minSize = minSize
        self.mixedInstancesPolicy = mixedInstancesPolicy
        self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
        self.placementGroup = placementGroup
        self.serviceLinkedRoleARN = serviceLinkedRoleARN
        self.terminationPolicies = terminationPolicies
        self.vpcZoneIdentifier = vpcZoneIdentifier
    }
}

extension AttachInstancesInput {

    static func urlPathProvider(_ value: AttachInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension AttachLoadBalancersInput {

    static func urlPathProvider(_ value: AttachLoadBalancersInput) -> Swift.String? {
        return "/"
    }
}

extension AttachLoadBalancerTargetGroupsInput {

    static func urlPathProvider(_ value: AttachLoadBalancerTargetGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension AttachTrafficSourcesInput {

    static func urlPathProvider(_ value: AttachTrafficSourcesInput) -> Swift.String? {
        return "/"
    }
}

extension BatchDeleteScheduledActionInput {

    static func urlPathProvider(_ value: BatchDeleteScheduledActionInput) -> Swift.String? {
        return "/"
    }
}

extension BatchPutScheduledUpdateGroupActionInput {

    static func urlPathProvider(_ value: BatchPutScheduledUpdateGroupActionInput) -> Swift.String? {
        return "/"
    }
}

extension CancelInstanceRefreshInput {

    static func urlPathProvider(_ value: CancelInstanceRefreshInput) -> Swift.String? {
        return "/"
    }
}

extension CompleteLifecycleActionInput {

    static func urlPathProvider(_ value: CompleteLifecycleActionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateAutoScalingGroupInput {

    static func urlPathProvider(_ value: CreateAutoScalingGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateLaunchConfigurationInput {

    static func urlPathProvider(_ value: CreateLaunchConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension CreateOrUpdateTagsInput {

    static func urlPathProvider(_ value: CreateOrUpdateTagsInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAutoScalingGroupInput {

    static func urlPathProvider(_ value: DeleteAutoScalingGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteLaunchConfigurationInput {

    static func urlPathProvider(_ value: DeleteLaunchConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteLifecycleHookInput {

    static func urlPathProvider(_ value: DeleteLifecycleHookInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteNotificationConfigurationInput {

    static func urlPathProvider(_ value: DeleteNotificationConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension DeletePolicyInput {

    static func urlPathProvider(_ value: DeletePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteScheduledActionInput {

    static func urlPathProvider(_ value: DeleteScheduledActionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteTagsInput {

    static func urlPathProvider(_ value: DeleteTagsInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteWarmPoolInput {

    static func urlPathProvider(_ value: DeleteWarmPoolInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAccountLimitsInput {

    static func urlPathProvider(_ value: DescribeAccountLimitsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAdjustmentTypesInput {

    static func urlPathProvider(_ value: DescribeAdjustmentTypesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAutoScalingGroupsInput {

    static func urlPathProvider(_ value: DescribeAutoScalingGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAutoScalingInstancesInput {

    static func urlPathProvider(_ value: DescribeAutoScalingInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAutoScalingNotificationTypesInput {

    static func urlPathProvider(_ value: DescribeAutoScalingNotificationTypesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeInstanceRefreshesInput {

    static func urlPathProvider(_ value: DescribeInstanceRefreshesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeLaunchConfigurationsInput {

    static func urlPathProvider(_ value: DescribeLaunchConfigurationsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeLifecycleHooksInput {

    static func urlPathProvider(_ value: DescribeLifecycleHooksInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeLifecycleHookTypesInput {

    static func urlPathProvider(_ value: DescribeLifecycleHookTypesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeLoadBalancersInput {

    static func urlPathProvider(_ value: DescribeLoadBalancersInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeLoadBalancerTargetGroupsInput {

    static func urlPathProvider(_ value: DescribeLoadBalancerTargetGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeMetricCollectionTypesInput {

    static func urlPathProvider(_ value: DescribeMetricCollectionTypesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeNotificationConfigurationsInput {

    static func urlPathProvider(_ value: DescribeNotificationConfigurationsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribePoliciesInput {

    static func urlPathProvider(_ value: DescribePoliciesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeScalingActivitiesInput {

    static func urlPathProvider(_ value: DescribeScalingActivitiesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeScalingProcessTypesInput {

    static func urlPathProvider(_ value: DescribeScalingProcessTypesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeScheduledActionsInput {

    static func urlPathProvider(_ value: DescribeScheduledActionsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTagsInput {

    static func urlPathProvider(_ value: DescribeTagsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTerminationPolicyTypesInput {

    static func urlPathProvider(_ value: DescribeTerminationPolicyTypesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTrafficSourcesInput {

    static func urlPathProvider(_ value: DescribeTrafficSourcesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeWarmPoolInput {

    static func urlPathProvider(_ value: DescribeWarmPoolInput) -> Swift.String? {
        return "/"
    }
}

extension DetachInstancesInput {

    static func urlPathProvider(_ value: DetachInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension DetachLoadBalancersInput {

    static func urlPathProvider(_ value: DetachLoadBalancersInput) -> Swift.String? {
        return "/"
    }
}

extension DetachLoadBalancerTargetGroupsInput {

    static func urlPathProvider(_ value: DetachLoadBalancerTargetGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension DetachTrafficSourcesInput {

    static func urlPathProvider(_ value: DetachTrafficSourcesInput) -> Swift.String? {
        return "/"
    }
}

extension DisableMetricsCollectionInput {

    static func urlPathProvider(_ value: DisableMetricsCollectionInput) -> Swift.String? {
        return "/"
    }
}

extension EnableMetricsCollectionInput {

    static func urlPathProvider(_ value: EnableMetricsCollectionInput) -> Swift.String? {
        return "/"
    }
}

extension EnterStandbyInput {

    static func urlPathProvider(_ value: EnterStandbyInput) -> Swift.String? {
        return "/"
    }
}

extension ExecutePolicyInput {

    static func urlPathProvider(_ value: ExecutePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension ExitStandbyInput {

    static func urlPathProvider(_ value: ExitStandbyInput) -> Swift.String? {
        return "/"
    }
}

extension GetPredictiveScalingForecastInput {

    static func urlPathProvider(_ value: GetPredictiveScalingForecastInput) -> Swift.String? {
        return "/"
    }
}

extension PutLifecycleHookInput {

    static func urlPathProvider(_ value: PutLifecycleHookInput) -> Swift.String? {
        return "/"
    }
}

extension PutNotificationConfigurationInput {

    static func urlPathProvider(_ value: PutNotificationConfigurationInput) -> Swift.String? {
        return "/"
    }
}

extension PutScalingPolicyInput {

    static func urlPathProvider(_ value: PutScalingPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension PutScheduledUpdateGroupActionInput {

    static func urlPathProvider(_ value: PutScheduledUpdateGroupActionInput) -> Swift.String? {
        return "/"
    }
}

extension PutWarmPoolInput {

    static func urlPathProvider(_ value: PutWarmPoolInput) -> Swift.String? {
        return "/"
    }
}

extension RecordLifecycleActionHeartbeatInput {

    static func urlPathProvider(_ value: RecordLifecycleActionHeartbeatInput) -> Swift.String? {
        return "/"
    }
}

extension ResumeProcessesInput {

    static func urlPathProvider(_ value: ResumeProcessesInput) -> Swift.String? {
        return "/"
    }
}

extension RollbackInstanceRefreshInput {

    static func urlPathProvider(_ value: RollbackInstanceRefreshInput) -> Swift.String? {
        return "/"
    }
}

extension SetDesiredCapacityInput {

    static func urlPathProvider(_ value: SetDesiredCapacityInput) -> Swift.String? {
        return "/"
    }
}

extension SetInstanceHealthInput {

    static func urlPathProvider(_ value: SetInstanceHealthInput) -> Swift.String? {
        return "/"
    }
}

extension SetInstanceProtectionInput {

    static func urlPathProvider(_ value: SetInstanceProtectionInput) -> Swift.String? {
        return "/"
    }
}

extension StartInstanceRefreshInput {

    static func urlPathProvider(_ value: StartInstanceRefreshInput) -> Swift.String? {
        return "/"
    }
}

extension SuspendProcessesInput {

    static func urlPathProvider(_ value: SuspendProcessesInput) -> Swift.String? {
        return "/"
    }
}

extension TerminateInstanceInAutoScalingGroupInput {

    static func urlPathProvider(_ value: TerminateInstanceInAutoScalingGroupInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateAutoScalingGroupInput {

    static func urlPathProvider(_ value: UpdateAutoScalingGroupInput) -> Swift.String? {
        return "/"
    }
}

extension AttachInstancesInput {

    static func write(value: AttachInstancesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["InstanceIds"].writeList(value.instanceIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("AttachInstances")
        try writer["Version"].write("2011-01-01")
    }
}

extension AttachLoadBalancersInput {

    static func write(value: AttachLoadBalancersInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["LoadBalancerNames"].writeList(value.loadBalancerNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("AttachLoadBalancers")
        try writer["Version"].write("2011-01-01")
    }
}

extension AttachLoadBalancerTargetGroupsInput {

    static func write(value: AttachLoadBalancerTargetGroupsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["TargetGroupARNs"].writeList(value.targetGroupARNs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("AttachLoadBalancerTargetGroups")
        try writer["Version"].write("2011-01-01")
    }
}

extension AttachTrafficSourcesInput {

    static func write(value: AttachTrafficSourcesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["TrafficSources"].writeList(value.trafficSources, memberWritingClosure: AutoScalingClientTypes.TrafficSourceIdentifier.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("AttachTrafficSources")
        try writer["Version"].write("2011-01-01")
    }
}

extension BatchDeleteScheduledActionInput {

    static func write(value: BatchDeleteScheduledActionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["ScheduledActionNames"].writeList(value.scheduledActionNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("BatchDeleteScheduledAction")
        try writer["Version"].write("2011-01-01")
    }
}

extension BatchPutScheduledUpdateGroupActionInput {

    static func write(value: BatchPutScheduledUpdateGroupActionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["ScheduledUpdateGroupActions"].writeList(value.scheduledUpdateGroupActions, memberWritingClosure: AutoScalingClientTypes.ScheduledUpdateGroupActionRequest.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("BatchPutScheduledUpdateGroupAction")
        try writer["Version"].write("2011-01-01")
    }
}

extension CancelInstanceRefreshInput {

    static func write(value: CancelInstanceRefreshInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["Action"].write("CancelInstanceRefresh")
        try writer["Version"].write("2011-01-01")
    }
}

extension CompleteLifecycleActionInput {

    static func write(value: CompleteLifecycleActionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["InstanceId"].write(value.instanceId)
        try writer["LifecycleActionResult"].write(value.lifecycleActionResult)
        try writer["LifecycleActionToken"].write(value.lifecycleActionToken)
        try writer["LifecycleHookName"].write(value.lifecycleHookName)
        try writer["Action"].write("CompleteLifecycleAction")
        try writer["Version"].write("2011-01-01")
    }
}

extension CreateAutoScalingGroupInput {

    static func write(value: CreateAutoScalingGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["AvailabilityZoneDistribution"].write(value.availabilityZoneDistribution, with: AutoScalingClientTypes.AvailabilityZoneDistribution.write(value:to:))
        try writer["AvailabilityZones"].writeList(value.availabilityZones, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CapacityRebalance"].write(value.capacityRebalance)
        try writer["Context"].write(value.context)
        try writer["DefaultCooldown"].write(value.defaultCooldown)
        try writer["DefaultInstanceWarmup"].write(value.defaultInstanceWarmup)
        try writer["DesiredCapacity"].write(value.desiredCapacity)
        try writer["DesiredCapacityType"].write(value.desiredCapacityType)
        try writer["HealthCheckGracePeriod"].write(value.healthCheckGracePeriod)
        try writer["HealthCheckType"].write(value.healthCheckType)
        try writer["InstanceId"].write(value.instanceId)
        try writer["InstanceMaintenancePolicy"].write(value.instanceMaintenancePolicy, with: AutoScalingClientTypes.InstanceMaintenancePolicy.write(value:to:))
        try writer["LaunchConfigurationName"].write(value.launchConfigurationName)
        try writer["LaunchTemplate"].write(value.launchTemplate, with: AutoScalingClientTypes.LaunchTemplateSpecification.write(value:to:))
        try writer["LifecycleHookSpecificationList"].writeList(value.lifecycleHookSpecificationList, memberWritingClosure: AutoScalingClientTypes.LifecycleHookSpecification.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LoadBalancerNames"].writeList(value.loadBalancerNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxInstanceLifetime"].write(value.maxInstanceLifetime)
        try writer["MaxSize"].write(value.maxSize)
        try writer["MinSize"].write(value.minSize)
        try writer["MixedInstancesPolicy"].write(value.mixedInstancesPolicy, with: AutoScalingClientTypes.MixedInstancesPolicy.write(value:to:))
        try writer["NewInstancesProtectedFromScaleIn"].write(value.newInstancesProtectedFromScaleIn)
        try writer["PlacementGroup"].write(value.placementGroup)
        try writer["ServiceLinkedRoleARN"].write(value.serviceLinkedRoleARN)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: AutoScalingClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TargetGroupARNs"].writeList(value.targetGroupARNs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TerminationPolicies"].writeList(value.terminationPolicies, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TrafficSources"].writeList(value.trafficSources, memberWritingClosure: AutoScalingClientTypes.TrafficSourceIdentifier.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VPCZoneIdentifier"].write(value.vpcZoneIdentifier)
        try writer["Action"].write("CreateAutoScalingGroup")
        try writer["Version"].write("2011-01-01")
    }
}

extension CreateLaunchConfigurationInput {

    static func write(value: CreateLaunchConfigurationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AssociatePublicIpAddress"].write(value.associatePublicIpAddress)
        try writer["BlockDeviceMappings"].writeList(value.blockDeviceMappings, memberWritingClosure: AutoScalingClientTypes.BlockDeviceMapping.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ClassicLinkVPCId"].write(value.classicLinkVPCId)
        try writer["ClassicLinkVPCSecurityGroups"].writeList(value.classicLinkVPCSecurityGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EbsOptimized"].write(value.ebsOptimized)
        try writer["IamInstanceProfile"].write(value.iamInstanceProfile)
        try writer["ImageId"].write(value.imageId)
        try writer["InstanceId"].write(value.instanceId)
        try writer["InstanceMonitoring"].write(value.instanceMonitoring, with: AutoScalingClientTypes.InstanceMonitoring.write(value:to:))
        try writer["InstanceType"].write(value.instanceType)
        try writer["KernelId"].write(value.kernelId)
        try writer["KeyName"].write(value.keyName)
        try writer["LaunchConfigurationName"].write(value.launchConfigurationName)
        try writer["MetadataOptions"].write(value.metadataOptions, with: AutoScalingClientTypes.InstanceMetadataOptions.write(value:to:))
        try writer["PlacementTenancy"].write(value.placementTenancy)
        try writer["RamdiskId"].write(value.ramdiskId)
        try writer["SecurityGroups"].writeList(value.securityGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SpotPrice"].write(value.spotPrice)
        try writer["UserData"].write(value.userData)
        try writer["Action"].write("CreateLaunchConfiguration")
        try writer["Version"].write("2011-01-01")
    }
}

extension CreateOrUpdateTagsInput {

    static func write(value: CreateOrUpdateTagsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Tags"].writeList(value.tags, memberWritingClosure: AutoScalingClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("CreateOrUpdateTags")
        try writer["Version"].write("2011-01-01")
    }
}

extension DeleteAutoScalingGroupInput {

    static func write(value: DeleteAutoScalingGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["ForceDelete"].write(value.forceDelete)
        try writer["Action"].write("DeleteAutoScalingGroup")
        try writer["Version"].write("2011-01-01")
    }
}

extension DeleteLaunchConfigurationInput {

    static func write(value: DeleteLaunchConfigurationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["LaunchConfigurationName"].write(value.launchConfigurationName)
        try writer["Action"].write("DeleteLaunchConfiguration")
        try writer["Version"].write("2011-01-01")
    }
}

extension DeleteLifecycleHookInput {

    static func write(value: DeleteLifecycleHookInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["LifecycleHookName"].write(value.lifecycleHookName)
        try writer["Action"].write("DeleteLifecycleHook")
        try writer["Version"].write("2011-01-01")
    }
}

extension DeleteNotificationConfigurationInput {

    static func write(value: DeleteNotificationConfigurationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["TopicARN"].write(value.topicARN)
        try writer["Action"].write("DeleteNotificationConfiguration")
        try writer["Version"].write("2011-01-01")
    }
}

extension DeletePolicyInput {

    static func write(value: DeletePolicyInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["PolicyName"].write(value.policyName)
        try writer["Action"].write("DeletePolicy")
        try writer["Version"].write("2011-01-01")
    }
}

extension DeleteScheduledActionInput {

    static func write(value: DeleteScheduledActionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["ScheduledActionName"].write(value.scheduledActionName)
        try writer["Action"].write("DeleteScheduledAction")
        try writer["Version"].write("2011-01-01")
    }
}

extension DeleteTagsInput {

    static func write(value: DeleteTagsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Tags"].writeList(value.tags, memberWritingClosure: AutoScalingClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DeleteTags")
        try writer["Version"].write("2011-01-01")
    }
}

extension DeleteWarmPoolInput {

    static func write(value: DeleteWarmPoolInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["ForceDelete"].write(value.forceDelete)
        try writer["Action"].write("DeleteWarmPool")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeAccountLimitsInput {

    static func write(value: DescribeAccountLimitsInput?, to writer: SmithyFormURL.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
        try writer["Action"].write("DescribeAccountLimits")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeAdjustmentTypesInput {

    static func write(value: DescribeAdjustmentTypesInput?, to writer: SmithyFormURL.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
        try writer["Action"].write("DescribeAdjustmentTypes")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeAutoScalingGroupsInput {

    static func write(value: DescribeAutoScalingGroupsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupNames"].writeList(value.autoScalingGroupNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Filters"].writeList(value.filters, memberWritingClosure: AutoScalingClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["NextToken"].write(value.nextToken)
        try writer["Action"].write("DescribeAutoScalingGroups")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeAutoScalingInstancesInput {

    static func write(value: DescribeAutoScalingInstancesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["InstanceIds"].writeList(value.instanceIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["NextToken"].write(value.nextToken)
        try writer["Action"].write("DescribeAutoScalingInstances")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeAutoScalingNotificationTypesInput {

    static func write(value: DescribeAutoScalingNotificationTypesInput?, to writer: SmithyFormURL.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
        try writer["Action"].write("DescribeAutoScalingNotificationTypes")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeInstanceRefreshesInput {

    static func write(value: DescribeInstanceRefreshesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["InstanceRefreshIds"].writeList(value.instanceRefreshIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["NextToken"].write(value.nextToken)
        try writer["Action"].write("DescribeInstanceRefreshes")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeLaunchConfigurationsInput {

    static func write(value: DescribeLaunchConfigurationsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["LaunchConfigurationNames"].writeList(value.launchConfigurationNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["NextToken"].write(value.nextToken)
        try writer["Action"].write("DescribeLaunchConfigurations")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeLifecycleHooksInput {

    static func write(value: DescribeLifecycleHooksInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["LifecycleHookNames"].writeList(value.lifecycleHookNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DescribeLifecycleHooks")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeLifecycleHookTypesInput {

    static func write(value: DescribeLifecycleHookTypesInput?, to writer: SmithyFormURL.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
        try writer["Action"].write("DescribeLifecycleHookTypes")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeLoadBalancersInput {

    static func write(value: DescribeLoadBalancersInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["NextToken"].write(value.nextToken)
        try writer["Action"].write("DescribeLoadBalancers")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeLoadBalancerTargetGroupsInput {

    static func write(value: DescribeLoadBalancerTargetGroupsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["NextToken"].write(value.nextToken)
        try writer["Action"].write("DescribeLoadBalancerTargetGroups")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeMetricCollectionTypesInput {

    static func write(value: DescribeMetricCollectionTypesInput?, to writer: SmithyFormURL.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
        try writer["Action"].write("DescribeMetricCollectionTypes")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeNotificationConfigurationsInput {

    static func write(value: DescribeNotificationConfigurationsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupNames"].writeList(value.autoScalingGroupNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["NextToken"].write(value.nextToken)
        try writer["Action"].write("DescribeNotificationConfigurations")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribePoliciesInput {

    static func write(value: DescribePoliciesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["NextToken"].write(value.nextToken)
        try writer["PolicyNames"].writeList(value.policyNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["PolicyTypes"].writeList(value.policyTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DescribePolicies")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeScalingActivitiesInput {

    static func write(value: DescribeScalingActivitiesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ActivityIds"].writeList(value.activityIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["IncludeDeletedGroups"].write(value.includeDeletedGroups)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["NextToken"].write(value.nextToken)
        try writer["Action"].write("DescribeScalingActivities")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeScalingProcessTypesInput {

    static func write(value: DescribeScalingProcessTypesInput?, to writer: SmithyFormURL.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
        try writer["Action"].write("DescribeScalingProcessTypes")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeScheduledActionsInput {

    static func write(value: DescribeScheduledActionsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["NextToken"].write(value.nextToken)
        try writer["ScheduledActionNames"].writeList(value.scheduledActionNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["Action"].write("DescribeScheduledActions")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeTagsInput {

    static func write(value: DescribeTagsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: AutoScalingClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["NextToken"].write(value.nextToken)
        try writer["Action"].write("DescribeTags")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeTerminationPolicyTypesInput {

    static func write(value: DescribeTerminationPolicyTypesInput?, to writer: SmithyFormURL.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
        try writer["Action"].write("DescribeTerminationPolicyTypes")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeTrafficSourcesInput {

    static func write(value: DescribeTrafficSourcesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["NextToken"].write(value.nextToken)
        try writer["TrafficSourceType"].write(value.trafficSourceType)
        try writer["Action"].write("DescribeTrafficSources")
        try writer["Version"].write("2011-01-01")
    }
}

extension DescribeWarmPoolInput {

    static func write(value: DescribeWarmPoolInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["MaxRecords"].write(value.maxRecords)
        try writer["NextToken"].write(value.nextToken)
        try writer["Action"].write("DescribeWarmPool")
        try writer["Version"].write("2011-01-01")
    }
}

extension DetachInstancesInput {

    static func write(value: DetachInstancesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["InstanceIds"].writeList(value.instanceIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ShouldDecrementDesiredCapacity"].write(value.shouldDecrementDesiredCapacity)
        try writer["Action"].write("DetachInstances")
        try writer["Version"].write("2011-01-01")
    }
}

extension DetachLoadBalancersInput {

    static func write(value: DetachLoadBalancersInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["LoadBalancerNames"].writeList(value.loadBalancerNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DetachLoadBalancers")
        try writer["Version"].write("2011-01-01")
    }
}

extension DetachLoadBalancerTargetGroupsInput {

    static func write(value: DetachLoadBalancerTargetGroupsInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["TargetGroupARNs"].writeList(value.targetGroupARNs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DetachLoadBalancerTargetGroups")
        try writer["Version"].write("2011-01-01")
    }
}

extension DetachTrafficSourcesInput {

    static func write(value: DetachTrafficSourcesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["TrafficSources"].writeList(value.trafficSources, memberWritingClosure: AutoScalingClientTypes.TrafficSourceIdentifier.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DetachTrafficSources")
        try writer["Version"].write("2011-01-01")
    }
}

extension DisableMetricsCollectionInput {

    static func write(value: DisableMetricsCollectionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["Metrics"].writeList(value.metrics, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("DisableMetricsCollection")
        try writer["Version"].write("2011-01-01")
    }
}

extension EnableMetricsCollectionInput {

    static func write(value: EnableMetricsCollectionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["Granularity"].write(value.granularity)
        try writer["Metrics"].writeList(value.metrics, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("EnableMetricsCollection")
        try writer["Version"].write("2011-01-01")
    }
}

extension EnterStandbyInput {

    static func write(value: EnterStandbyInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["InstanceIds"].writeList(value.instanceIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ShouldDecrementDesiredCapacity"].write(value.shouldDecrementDesiredCapacity)
        try writer["Action"].write("EnterStandby")
        try writer["Version"].write("2011-01-01")
    }
}

extension ExecutePolicyInput {

    static func write(value: ExecutePolicyInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["BreachThreshold"].write(value.breachThreshold)
        try writer["HonorCooldown"].write(value.honorCooldown)
        try writer["MetricValue"].write(value.metricValue)
        try writer["PolicyName"].write(value.policyName)
        try writer["Action"].write("ExecutePolicy")
        try writer["Version"].write("2011-01-01")
    }
}

extension ExitStandbyInput {

    static func write(value: ExitStandbyInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["InstanceIds"].writeList(value.instanceIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("ExitStandby")
        try writer["Version"].write("2011-01-01")
    }
}

extension GetPredictiveScalingForecastInput {

    static func write(value: GetPredictiveScalingForecastInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["PolicyName"].write(value.policyName)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["Action"].write("GetPredictiveScalingForecast")
        try writer["Version"].write("2011-01-01")
    }
}

extension PutLifecycleHookInput {

    static func write(value: PutLifecycleHookInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["DefaultResult"].write(value.defaultResult)
        try writer["HeartbeatTimeout"].write(value.heartbeatTimeout)
        try writer["LifecycleHookName"].write(value.lifecycleHookName)
        try writer["LifecycleTransition"].write(value.lifecycleTransition)
        try writer["NotificationMetadata"].write(value.notificationMetadata)
        try writer["NotificationTargetARN"].write(value.notificationTargetARN)
        try writer["RoleARN"].write(value.roleARN)
        try writer["Action"].write("PutLifecycleHook")
        try writer["Version"].write("2011-01-01")
    }
}

extension PutNotificationConfigurationInput {

    static func write(value: PutNotificationConfigurationInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["NotificationTypes"].writeList(value.notificationTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TopicARN"].write(value.topicARN)
        try writer["Action"].write("PutNotificationConfiguration")
        try writer["Version"].write("2011-01-01")
    }
}

extension PutScalingPolicyInput {

    static func write(value: PutScalingPolicyInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AdjustmentType"].write(value.adjustmentType)
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["Cooldown"].write(value.cooldown)
        try writer["Enabled"].write(value.enabled)
        try writer["EstimatedInstanceWarmup"].write(value.estimatedInstanceWarmup)
        try writer["MetricAggregationType"].write(value.metricAggregationType)
        try writer["MinAdjustmentMagnitude"].write(value.minAdjustmentMagnitude)
        try writer["MinAdjustmentStep"].write(value.minAdjustmentStep)
        try writer["PolicyName"].write(value.policyName)
        try writer["PolicyType"].write(value.policyType)
        try writer["PredictiveScalingConfiguration"].write(value.predictiveScalingConfiguration, with: AutoScalingClientTypes.PredictiveScalingConfiguration.write(value:to:))
        try writer["ScalingAdjustment"].write(value.scalingAdjustment)
        try writer["StepAdjustments"].writeList(value.stepAdjustments, memberWritingClosure: AutoScalingClientTypes.StepAdjustment.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TargetTrackingConfiguration"].write(value.targetTrackingConfiguration, with: AutoScalingClientTypes.TargetTrackingConfiguration.write(value:to:))
        try writer["Action"].write("PutScalingPolicy")
        try writer["Version"].write("2011-01-01")
    }
}

extension PutScheduledUpdateGroupActionInput {

    static func write(value: PutScheduledUpdateGroupActionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["DesiredCapacity"].write(value.desiredCapacity)
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["MaxSize"].write(value.maxSize)
        try writer["MinSize"].write(value.minSize)
        try writer["Recurrence"].write(value.recurrence)
        try writer["ScheduledActionName"].write(value.scheduledActionName)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["Time"].writeTimestamp(value.time, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["TimeZone"].write(value.timeZone)
        try writer["Action"].write("PutScheduledUpdateGroupAction")
        try writer["Version"].write("2011-01-01")
    }
}

extension PutWarmPoolInput {

    static func write(value: PutWarmPoolInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["InstanceReusePolicy"].write(value.instanceReusePolicy, with: AutoScalingClientTypes.InstanceReusePolicy.write(value:to:))
        try writer["MaxGroupPreparedCapacity"].write(value.maxGroupPreparedCapacity)
        try writer["MinSize"].write(value.minSize)
        try writer["PoolState"].write(value.poolState)
        try writer["Action"].write("PutWarmPool")
        try writer["Version"].write("2011-01-01")
    }
}

extension RecordLifecycleActionHeartbeatInput {

    static func write(value: RecordLifecycleActionHeartbeatInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["InstanceId"].write(value.instanceId)
        try writer["LifecycleActionToken"].write(value.lifecycleActionToken)
        try writer["LifecycleHookName"].write(value.lifecycleHookName)
        try writer["Action"].write("RecordLifecycleActionHeartbeat")
        try writer["Version"].write("2011-01-01")
    }
}

extension ResumeProcessesInput {

    static func write(value: ResumeProcessesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["ScalingProcesses"].writeList(value.scalingProcesses, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("ResumeProcesses")
        try writer["Version"].write("2011-01-01")
    }
}

extension RollbackInstanceRefreshInput {

    static func write(value: RollbackInstanceRefreshInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["Action"].write("RollbackInstanceRefresh")
        try writer["Version"].write("2011-01-01")
    }
}

extension SetDesiredCapacityInput {

    static func write(value: SetDesiredCapacityInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["DesiredCapacity"].write(value.desiredCapacity)
        try writer["HonorCooldown"].write(value.honorCooldown)
        try writer["Action"].write("SetDesiredCapacity")
        try writer["Version"].write("2011-01-01")
    }
}

extension SetInstanceHealthInput {

    static func write(value: SetInstanceHealthInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["HealthStatus"].write(value.healthStatus)
        try writer["InstanceId"].write(value.instanceId)
        try writer["ShouldRespectGracePeriod"].write(value.shouldRespectGracePeriod)
        try writer["Action"].write("SetInstanceHealth")
        try writer["Version"].write("2011-01-01")
    }
}

extension SetInstanceProtectionInput {

    static func write(value: SetInstanceProtectionInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["InstanceIds"].writeList(value.instanceIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ProtectedFromScaleIn"].write(value.protectedFromScaleIn)
        try writer["Action"].write("SetInstanceProtection")
        try writer["Version"].write("2011-01-01")
    }
}

extension StartInstanceRefreshInput {

    static func write(value: StartInstanceRefreshInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["DesiredConfiguration"].write(value.desiredConfiguration, with: AutoScalingClientTypes.DesiredConfiguration.write(value:to:))
        try writer["Preferences"].write(value.preferences, with: AutoScalingClientTypes.RefreshPreferences.write(value:to:))
        try writer["Strategy"].write(value.strategy)
        try writer["Action"].write("StartInstanceRefresh")
        try writer["Version"].write("2011-01-01")
    }
}

extension SuspendProcessesInput {

    static func write(value: SuspendProcessesInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["ScalingProcesses"].writeList(value.scalingProcesses, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Action"].write("SuspendProcesses")
        try writer["Version"].write("2011-01-01")
    }
}

extension TerminateInstanceInAutoScalingGroupInput {

    static func write(value: TerminateInstanceInAutoScalingGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["InstanceId"].write(value.instanceId)
        try writer["ShouldDecrementDesiredCapacity"].write(value.shouldDecrementDesiredCapacity)
        try writer["Action"].write("TerminateInstanceInAutoScalingGroup")
        try writer["Version"].write("2011-01-01")
    }
}

extension UpdateAutoScalingGroupInput {

    static func write(value: UpdateAutoScalingGroupInput?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AutoScalingGroupName"].write(value.autoScalingGroupName)
        try writer["AvailabilityZoneDistribution"].write(value.availabilityZoneDistribution, with: AutoScalingClientTypes.AvailabilityZoneDistribution.write(value:to:))
        try writer["AvailabilityZones"].writeList(value.availabilityZones, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CapacityRebalance"].write(value.capacityRebalance)
        try writer["Context"].write(value.context)
        try writer["DefaultCooldown"].write(value.defaultCooldown)
        try writer["DefaultInstanceWarmup"].write(value.defaultInstanceWarmup)
        try writer["DesiredCapacity"].write(value.desiredCapacity)
        try writer["DesiredCapacityType"].write(value.desiredCapacityType)
        try writer["HealthCheckGracePeriod"].write(value.healthCheckGracePeriod)
        try writer["HealthCheckType"].write(value.healthCheckType)
        try writer["InstanceMaintenancePolicy"].write(value.instanceMaintenancePolicy, with: AutoScalingClientTypes.InstanceMaintenancePolicy.write(value:to:))
        try writer["LaunchConfigurationName"].write(value.launchConfigurationName)
        try writer["LaunchTemplate"].write(value.launchTemplate, with: AutoScalingClientTypes.LaunchTemplateSpecification.write(value:to:))
        try writer["MaxInstanceLifetime"].write(value.maxInstanceLifetime)
        try writer["MaxSize"].write(value.maxSize)
        try writer["MinSize"].write(value.minSize)
        try writer["MixedInstancesPolicy"].write(value.mixedInstancesPolicy, with: AutoScalingClientTypes.MixedInstancesPolicy.write(value:to:))
        try writer["NewInstancesProtectedFromScaleIn"].write(value.newInstancesProtectedFromScaleIn)
        try writer["PlacementGroup"].write(value.placementGroup)
        try writer["ServiceLinkedRoleARN"].write(value.serviceLinkedRoleARN)
        try writer["TerminationPolicies"].writeList(value.terminationPolicies, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VPCZoneIdentifier"].write(value.vpcZoneIdentifier)
        try writer["Action"].write("UpdateAutoScalingGroup")
        try writer["Version"].write("2011-01-01")
    }
}

extension AttachInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AttachInstancesOutput {
        return AttachInstancesOutput()
    }
}

extension AttachLoadBalancersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AttachLoadBalancersOutput {
        return AttachLoadBalancersOutput()
    }
}

extension AttachLoadBalancerTargetGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AttachLoadBalancerTargetGroupsOutput {
        return AttachLoadBalancerTargetGroupsOutput()
    }
}

extension AttachTrafficSourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AttachTrafficSourcesOutput {
        return AttachTrafficSourcesOutput()
    }
}

extension BatchDeleteScheduledActionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchDeleteScheduledActionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["BatchDeleteScheduledActionResult"]
        var value = BatchDeleteScheduledActionOutput()
        value.failedScheduledActions = try reader["FailedScheduledActions"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension BatchPutScheduledUpdateGroupActionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchPutScheduledUpdateGroupActionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["BatchPutScheduledUpdateGroupActionResult"]
        var value = BatchPutScheduledUpdateGroupActionOutput()
        value.failedScheduledUpdateGroupActions = try reader["FailedScheduledUpdateGroupActions"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CancelInstanceRefreshOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CancelInstanceRefreshOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["CancelInstanceRefreshResult"]
        var value = CancelInstanceRefreshOutput()
        value.instanceRefreshId = try reader["InstanceRefreshId"].readIfPresent()
        return value
    }
}

extension CompleteLifecycleActionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CompleteLifecycleActionOutput {
        return CompleteLifecycleActionOutput()
    }
}

extension CreateAutoScalingGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAutoScalingGroupOutput {
        return CreateAutoScalingGroupOutput()
    }
}

extension CreateLaunchConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateLaunchConfigurationOutput {
        return CreateLaunchConfigurationOutput()
    }
}

extension CreateOrUpdateTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateOrUpdateTagsOutput {
        return CreateOrUpdateTagsOutput()
    }
}

extension DeleteAutoScalingGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAutoScalingGroupOutput {
        return DeleteAutoScalingGroupOutput()
    }
}

extension DeleteLaunchConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteLaunchConfigurationOutput {
        return DeleteLaunchConfigurationOutput()
    }
}

extension DeleteLifecycleHookOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteLifecycleHookOutput {
        return DeleteLifecycleHookOutput()
    }
}

extension DeleteNotificationConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteNotificationConfigurationOutput {
        return DeleteNotificationConfigurationOutput()
    }
}

extension DeletePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePolicyOutput {
        return DeletePolicyOutput()
    }
}

extension DeleteScheduledActionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteScheduledActionOutput {
        return DeleteScheduledActionOutput()
    }
}

extension DeleteTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTagsOutput {
        return DeleteTagsOutput()
    }
}

extension DeleteWarmPoolOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteWarmPoolOutput {
        return DeleteWarmPoolOutput()
    }
}

extension DescribeAccountLimitsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAccountLimitsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeAccountLimitsResult"]
        var value = DescribeAccountLimitsOutput()
        value.maxNumberOfAutoScalingGroups = try reader["MaxNumberOfAutoScalingGroups"].readIfPresent()
        value.maxNumberOfLaunchConfigurations = try reader["MaxNumberOfLaunchConfigurations"].readIfPresent()
        value.numberOfAutoScalingGroups = try reader["NumberOfAutoScalingGroups"].readIfPresent()
        value.numberOfLaunchConfigurations = try reader["NumberOfLaunchConfigurations"].readIfPresent()
        return value
    }
}

extension DescribeAdjustmentTypesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAdjustmentTypesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeAdjustmentTypesResult"]
        var value = DescribeAdjustmentTypesOutput()
        value.adjustmentTypes = try reader["AdjustmentTypes"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.AdjustmentType.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeAutoScalingGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAutoScalingGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeAutoScalingGroupsResult"]
        var value = DescribeAutoScalingGroupsOutput()
        value.autoScalingGroups = try reader["AutoScalingGroups"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.AutoScalingGroup.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeAutoScalingInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAutoScalingInstancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeAutoScalingInstancesResult"]
        var value = DescribeAutoScalingInstancesOutput()
        value.autoScalingInstances = try reader["AutoScalingInstances"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.AutoScalingInstanceDetails.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeAutoScalingNotificationTypesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAutoScalingNotificationTypesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeAutoScalingNotificationTypesResult"]
        var value = DescribeAutoScalingNotificationTypesOutput()
        value.autoScalingNotificationTypes = try reader["AutoScalingNotificationTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeInstanceRefreshesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeInstanceRefreshesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeInstanceRefreshesResult"]
        var value = DescribeInstanceRefreshesOutput()
        value.instanceRefreshes = try reader["InstanceRefreshes"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.InstanceRefresh.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeLaunchConfigurationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeLaunchConfigurationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeLaunchConfigurationsResult"]
        var value = DescribeLaunchConfigurationsOutput()
        value.launchConfigurations = try reader["LaunchConfigurations"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.LaunchConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeLifecycleHooksOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeLifecycleHooksOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeLifecycleHooksResult"]
        var value = DescribeLifecycleHooksOutput()
        value.lifecycleHooks = try reader["LifecycleHooks"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.LifecycleHook.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeLifecycleHookTypesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeLifecycleHookTypesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeLifecycleHookTypesResult"]
        var value = DescribeLifecycleHookTypesOutput()
        value.lifecycleHookTypes = try reader["LifecycleHookTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeLoadBalancersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeLoadBalancersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeLoadBalancersResult"]
        var value = DescribeLoadBalancersOutput()
        value.loadBalancers = try reader["LoadBalancers"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.LoadBalancerState.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeLoadBalancerTargetGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeLoadBalancerTargetGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeLoadBalancerTargetGroupsResult"]
        var value = DescribeLoadBalancerTargetGroupsOutput()
        value.loadBalancerTargetGroups = try reader["LoadBalancerTargetGroups"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.LoadBalancerTargetGroupState.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeMetricCollectionTypesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeMetricCollectionTypesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeMetricCollectionTypesResult"]
        var value = DescribeMetricCollectionTypesOutput()
        value.granularities = try reader["Granularities"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.MetricGranularityType.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.metrics = try reader["Metrics"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.MetricCollectionType.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeNotificationConfigurationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeNotificationConfigurationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeNotificationConfigurationsResult"]
        var value = DescribeNotificationConfigurationsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.notificationConfigurations = try reader["NotificationConfigurations"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.NotificationConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension DescribePoliciesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribePoliciesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribePoliciesResult"]
        var value = DescribePoliciesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.scalingPolicies = try reader["ScalingPolicies"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.ScalingPolicy.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeScalingActivitiesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeScalingActivitiesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeScalingActivitiesResult"]
        var value = DescribeScalingActivitiesOutput()
        value.activities = try reader["Activities"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.Activity.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension DescribeScalingProcessTypesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeScalingProcessTypesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeScalingProcessTypesResult"]
        var value = DescribeScalingProcessTypesOutput()
        value.processes = try reader["Processes"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.ProcessType.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeScheduledActionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeScheduledActionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeScheduledActionsResult"]
        var value = DescribeScheduledActionsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.scheduledUpdateGroupActions = try reader["ScheduledUpdateGroupActions"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.ScheduledUpdateGroupAction.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTagsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeTagsResult"]
        var value = DescribeTagsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.TagDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeTerminationPolicyTypesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTerminationPolicyTypesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeTerminationPolicyTypesResult"]
        var value = DescribeTerminationPolicyTypesOutput()
        value.terminationPolicyTypes = try reader["TerminationPolicyTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeTrafficSourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTrafficSourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeTrafficSourcesResult"]
        var value = DescribeTrafficSourcesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.trafficSources = try reader["TrafficSources"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.TrafficSourceState.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeWarmPoolOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeWarmPoolOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DescribeWarmPoolResult"]
        var value = DescribeWarmPoolOutput()
        value.instances = try reader["Instances"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.Instance.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.warmPoolConfiguration = try reader["WarmPoolConfiguration"].readIfPresent(with: AutoScalingClientTypes.WarmPoolConfiguration.read(from:))
        return value
    }
}

extension DetachInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetachInstancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["DetachInstancesResult"]
        var value = DetachInstancesOutput()
        value.activities = try reader["Activities"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.Activity.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DetachLoadBalancersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetachLoadBalancersOutput {
        return DetachLoadBalancersOutput()
    }
}

extension DetachLoadBalancerTargetGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetachLoadBalancerTargetGroupsOutput {
        return DetachLoadBalancerTargetGroupsOutput()
    }
}

extension DetachTrafficSourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetachTrafficSourcesOutput {
        return DetachTrafficSourcesOutput()
    }
}

extension DisableMetricsCollectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisableMetricsCollectionOutput {
        return DisableMetricsCollectionOutput()
    }
}

extension EnableMetricsCollectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableMetricsCollectionOutput {
        return EnableMetricsCollectionOutput()
    }
}

extension EnterStandbyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnterStandbyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["EnterStandbyResult"]
        var value = EnterStandbyOutput()
        value.activities = try reader["Activities"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.Activity.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ExecutePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExecutePolicyOutput {
        return ExecutePolicyOutput()
    }
}

extension ExitStandbyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ExitStandbyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["ExitStandbyResult"]
        var value = ExitStandbyOutput()
        value.activities = try reader["Activities"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.Activity.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetPredictiveScalingForecastOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetPredictiveScalingForecastOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["GetPredictiveScalingForecastResult"]
        var value = GetPredictiveScalingForecastOutput()
        value.capacityForecast = try reader["CapacityForecast"].readIfPresent(with: AutoScalingClientTypes.CapacityForecast.read(from:))
        value.loadForecast = try reader["LoadForecast"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.LoadForecast.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.updateTime = try reader["UpdateTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension PutLifecycleHookOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutLifecycleHookOutput {
        return PutLifecycleHookOutput()
    }
}

extension PutNotificationConfigurationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutNotificationConfigurationOutput {
        return PutNotificationConfigurationOutput()
    }
}

extension PutScalingPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutScalingPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["PutScalingPolicyResult"]
        var value = PutScalingPolicyOutput()
        value.alarms = try reader["Alarms"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.Alarm.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.policyARN = try reader["PolicyARN"].readIfPresent()
        return value
    }
}

extension PutScheduledUpdateGroupActionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutScheduledUpdateGroupActionOutput {
        return PutScheduledUpdateGroupActionOutput()
    }
}

extension PutWarmPoolOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutWarmPoolOutput {
        return PutWarmPoolOutput()
    }
}

extension RecordLifecycleActionHeartbeatOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RecordLifecycleActionHeartbeatOutput {
        return RecordLifecycleActionHeartbeatOutput()
    }
}

extension ResumeProcessesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ResumeProcessesOutput {
        return ResumeProcessesOutput()
    }
}

extension RollbackInstanceRefreshOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RollbackInstanceRefreshOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["RollbackInstanceRefreshResult"]
        var value = RollbackInstanceRefreshOutput()
        value.instanceRefreshId = try reader["InstanceRefreshId"].readIfPresent()
        return value
    }
}

extension SetDesiredCapacityOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetDesiredCapacityOutput {
        return SetDesiredCapacityOutput()
    }
}

extension SetInstanceHealthOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetInstanceHealthOutput {
        return SetInstanceHealthOutput()
    }
}

extension SetInstanceProtectionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SetInstanceProtectionOutput {
        return SetInstanceProtectionOutput()
    }
}

extension StartInstanceRefreshOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartInstanceRefreshOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["StartInstanceRefreshResult"]
        var value = StartInstanceRefreshOutput()
        value.instanceRefreshId = try reader["InstanceRefreshId"].readIfPresent()
        return value
    }
}

extension SuspendProcessesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SuspendProcessesOutput {
        return SuspendProcessesOutput()
    }
}

extension TerminateInstanceInAutoScalingGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TerminateInstanceInAutoScalingGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let reader = responseReader["TerminateInstanceInAutoScalingGroupResult"]
        var value = TerminateInstanceInAutoScalingGroupOutput()
        value.activity = try reader["Activity"].readIfPresent(with: AutoScalingClientTypes.Activity.read(from:))
        return value
    }
}

extension UpdateAutoScalingGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAutoScalingGroupOutput {
        return UpdateAutoScalingGroupOutput()
    }
}

enum AttachInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleFailure": return try ServiceLinkedRoleFailure.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AttachLoadBalancersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleFailure": return try ServiceLinkedRoleFailure.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AttachLoadBalancerTargetGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleFailure": return try ServiceLinkedRoleFailure.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AttachTrafficSourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleFailure": return try ServiceLinkedRoleFailure.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchDeleteScheduledActionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchPutScheduledUpdateGroupActionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExists": return try AlreadyExistsFault.makeError(baseError: baseError)
            case "LimitExceeded": return try LimitExceededFault.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CancelInstanceRefreshOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ActiveInstanceRefreshNotFound": return try ActiveInstanceRefreshNotFoundFault.makeError(baseError: baseError)
            case "LimitExceeded": return try LimitExceededFault.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CompleteLifecycleActionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAutoScalingGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExists": return try AlreadyExistsFault.makeError(baseError: baseError)
            case "LimitExceeded": return try LimitExceededFault.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleFailure": return try ServiceLinkedRoleFailure.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateLaunchConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExists": return try AlreadyExistsFault.makeError(baseError: baseError)
            case "LimitExceeded": return try LimitExceededFault.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateOrUpdateTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExists": return try AlreadyExistsFault.makeError(baseError: baseError)
            case "LimitExceeded": return try LimitExceededFault.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ResourceInUse": return try ResourceInUseFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAutoScalingGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ResourceInUse": return try ResourceInUseFault.makeError(baseError: baseError)
            case "ScalingActivityInProgress": return try ScalingActivityInProgressFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteLaunchConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ResourceInUse": return try ResourceInUseFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteLifecycleHookOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteNotificationConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleFailure": return try ServiceLinkedRoleFailure.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteScheduledActionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ResourceInUse": return try ResourceInUseFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteWarmPoolOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "LimitExceeded": return try LimitExceededFault.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ResourceInUse": return try ResourceInUseFault.makeError(baseError: baseError)
            case "ScalingActivityInProgress": return try ScalingActivityInProgressFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAccountLimitsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAdjustmentTypesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAutoScalingGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAutoScalingInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAutoScalingNotificationTypesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeInstanceRefreshesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeLaunchConfigurationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeLifecycleHooksOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeLifecycleHookTypesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeLoadBalancersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeLoadBalancerTargetGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeMetricCollectionTypesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeNotificationConfigurationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribePoliciesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleFailure": return try ServiceLinkedRoleFailure.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeScalingActivitiesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeScalingProcessTypesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeScheduledActionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTerminationPolicyTypesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTrafficSourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeWarmPoolOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InvalidNextToken": return try InvalidNextToken.makeError(baseError: baseError)
            case "LimitExceeded": return try LimitExceededFault.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetachInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetachLoadBalancersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetachLoadBalancerTargetGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetachTrafficSourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisableMetricsCollectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableMetricsCollectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnterStandbyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExecutePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ScalingActivityInProgress": return try ScalingActivityInProgressFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ExitStandbyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetPredictiveScalingForecastOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutLifecycleHookOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "LimitExceeded": return try LimitExceededFault.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutNotificationConfigurationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "LimitExceeded": return try LimitExceededFault.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleFailure": return try ServiceLinkedRoleFailure.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutScalingPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "LimitExceeded": return try LimitExceededFault.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleFailure": return try ServiceLinkedRoleFailure.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutScheduledUpdateGroupActionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AlreadyExists": return try AlreadyExistsFault.makeError(baseError: baseError)
            case "LimitExceeded": return try LimitExceededFault.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutWarmPoolOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "LimitExceeded": return try LimitExceededFault.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RecordLifecycleActionHeartbeatOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ResumeProcessesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ResourceInUse": return try ResourceInUseFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RollbackInstanceRefreshOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ActiveInstanceRefreshNotFound": return try ActiveInstanceRefreshNotFoundFault.makeError(baseError: baseError)
            case "IrreversibleInstanceRefresh": return try IrreversibleInstanceRefreshFault.makeError(baseError: baseError)
            case "LimitExceeded": return try LimitExceededFault.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetDesiredCapacityOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ScalingActivityInProgress": return try ScalingActivityInProgressFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetInstanceHealthOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SetInstanceProtectionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "LimitExceeded": return try LimitExceededFault.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartInstanceRefreshOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InstanceRefreshInProgress": return try InstanceRefreshInProgressFault.makeError(baseError: baseError)
            case "LimitExceeded": return try LimitExceededFault.makeError(baseError: baseError)
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SuspendProcessesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ResourceInUse": return try ResourceInUseFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TerminateInstanceInAutoScalingGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ScalingActivityInProgress": return try ScalingActivityInProgressFault.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAutoScalingGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyXML.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSQueryError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceContention": return try ResourceContentionFault.makeError(baseError: baseError)
            case "ScalingActivityInProgress": return try ScalingActivityInProgressFault.makeError(baseError: baseError)
            case "ServiceLinkedRoleFailure": return try ServiceLinkedRoleFailure.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ServiceLinkedRoleFailure {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ServiceLinkedRoleFailure {
        let reader = baseError.errorBodyReader
        var value = ServiceLinkedRoleFailure()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceContentionFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ResourceContentionFault {
        let reader = baseError.errorBodyReader
        var value = ResourceContentionFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AlreadyExistsFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> AlreadyExistsFault {
        let reader = baseError.errorBodyReader
        var value = AlreadyExistsFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> LimitExceededFault {
        let reader = baseError.errorBodyReader
        var value = LimitExceededFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ActiveInstanceRefreshNotFoundFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ActiveInstanceRefreshNotFoundFault {
        let reader = baseError.errorBodyReader
        var value = ActiveInstanceRefreshNotFoundFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceInUseFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ResourceInUseFault {
        let reader = baseError.errorBodyReader
        var value = ResourceInUseFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ScalingActivityInProgressFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> ScalingActivityInProgressFault {
        let reader = baseError.errorBodyReader
        var value = ScalingActivityInProgressFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidNextToken {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InvalidNextToken {
        let reader = baseError.errorBodyReader
        var value = InvalidNextToken()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IrreversibleInstanceRefreshFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> IrreversibleInstanceRefreshFault {
        let reader = baseError.errorBodyReader
        var value = IrreversibleInstanceRefreshFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InstanceRefreshInProgressFault {

    static func makeError(baseError: AWSClientRuntime.AWSQueryError) throws -> InstanceRefreshInProgressFault {
        let reader = baseError.errorBodyReader
        var value = InstanceRefreshInProgressFault()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.FailedScheduledUpdateGroupActionRequest()
        value.scheduledActionName = try reader["ScheduledActionName"].readIfPresent() ?? ""
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.AdjustmentType {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.AdjustmentType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.AdjustmentType()
        value.adjustmentType = try reader["AdjustmentType"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.AutoScalingGroup {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.AutoScalingGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.AutoScalingGroup()
        value.autoScalingGroupName = try reader["AutoScalingGroupName"].readIfPresent() ?? ""
        value.autoScalingGroupARN = try reader["AutoScalingGroupARN"].readIfPresent()
        value.launchConfigurationName = try reader["LaunchConfigurationName"].readIfPresent()
        value.launchTemplate = try reader["LaunchTemplate"].readIfPresent(with: AutoScalingClientTypes.LaunchTemplateSpecification.read(from:))
        value.mixedInstancesPolicy = try reader["MixedInstancesPolicy"].readIfPresent(with: AutoScalingClientTypes.MixedInstancesPolicy.read(from:))
        value.minSize = try reader["MinSize"].readIfPresent() ?? 0
        value.maxSize = try reader["MaxSize"].readIfPresent() ?? 0
        value.desiredCapacity = try reader["DesiredCapacity"].readIfPresent() ?? 0
        value.predictedCapacity = try reader["PredictedCapacity"].readIfPresent()
        value.defaultCooldown = try reader["DefaultCooldown"].readIfPresent() ?? 0
        value.availabilityZones = try reader["AvailabilityZones"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.loadBalancerNames = try reader["LoadBalancerNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.targetGroupARNs = try reader["TargetGroupARNs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.healthCheckType = try reader["HealthCheckType"].readIfPresent() ?? ""
        value.healthCheckGracePeriod = try reader["HealthCheckGracePeriod"].readIfPresent()
        value.instances = try reader["Instances"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.Instance.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.suspendedProcesses = try reader["SuspendedProcesses"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.SuspendedProcess.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.placementGroup = try reader["PlacementGroup"].readIfPresent()
        value.vpcZoneIdentifier = try reader["VPCZoneIdentifier"].readIfPresent()
        value.enabledMetrics = try reader["EnabledMetrics"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.EnabledMetric.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.status = try reader["Status"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.TagDescription.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.terminationPolicies = try reader["TerminationPolicies"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.newInstancesProtectedFromScaleIn = try reader["NewInstancesProtectedFromScaleIn"].readIfPresent()
        value.serviceLinkedRoleARN = try reader["ServiceLinkedRoleARN"].readIfPresent()
        value.maxInstanceLifetime = try reader["MaxInstanceLifetime"].readIfPresent()
        value.capacityRebalance = try reader["CapacityRebalance"].readIfPresent()
        value.warmPoolConfiguration = try reader["WarmPoolConfiguration"].readIfPresent(with: AutoScalingClientTypes.WarmPoolConfiguration.read(from:))
        value.warmPoolSize = try reader["WarmPoolSize"].readIfPresent()
        value.context = try reader["Context"].readIfPresent()
        value.desiredCapacityType = try reader["DesiredCapacityType"].readIfPresent()
        value.defaultInstanceWarmup = try reader["DefaultInstanceWarmup"].readIfPresent()
        value.trafficSources = try reader["TrafficSources"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.TrafficSourceIdentifier.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.instanceMaintenancePolicy = try reader["InstanceMaintenancePolicy"].readIfPresent(with: AutoScalingClientTypes.InstanceMaintenancePolicy.read(from:))
        value.availabilityZoneDistribution = try reader["AvailabilityZoneDistribution"].readIfPresent(with: AutoScalingClientTypes.AvailabilityZoneDistribution.read(from:))
        return value
    }
}

extension AutoScalingClientTypes.AvailabilityZoneDistribution {

    static func write(value: AutoScalingClientTypes.AvailabilityZoneDistribution?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CapacityDistributionStrategy"].write(value.capacityDistributionStrategy)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.AvailabilityZoneDistribution {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.AvailabilityZoneDistribution()
        value.capacityDistributionStrategy = try reader["CapacityDistributionStrategy"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.InstanceMaintenancePolicy {

    static func write(value: AutoScalingClientTypes.InstanceMaintenancePolicy?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["MaxHealthyPercentage"].write(value.maxHealthyPercentage)
        try writer["MinHealthyPercentage"].write(value.minHealthyPercentage)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.InstanceMaintenancePolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.InstanceMaintenancePolicy()
        value.minHealthyPercentage = try reader["MinHealthyPercentage"].readIfPresent()
        value.maxHealthyPercentage = try reader["MaxHealthyPercentage"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.TrafficSourceIdentifier {

    static func write(value: AutoScalingClientTypes.TrafficSourceIdentifier?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Identifier"].write(value.identifier)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.TrafficSourceIdentifier {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.TrafficSourceIdentifier()
        value.identifier = try reader["Identifier"].readIfPresent() ?? ""
        value.type = try reader["Type"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.WarmPoolConfiguration {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.WarmPoolConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.WarmPoolConfiguration()
        value.maxGroupPreparedCapacity = try reader["MaxGroupPreparedCapacity"].readIfPresent()
        value.minSize = try reader["MinSize"].readIfPresent()
        value.poolState = try reader["PoolState"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.instanceReusePolicy = try reader["InstanceReusePolicy"].readIfPresent(with: AutoScalingClientTypes.InstanceReusePolicy.read(from:))
        return value
    }
}

extension AutoScalingClientTypes.InstanceReusePolicy {

    static func write(value: AutoScalingClientTypes.InstanceReusePolicy?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["ReuseOnScaleIn"].write(value.reuseOnScaleIn)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.InstanceReusePolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.InstanceReusePolicy()
        value.reuseOnScaleIn = try reader["ReuseOnScaleIn"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.TagDescription {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.TagDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.TagDescription()
        value.resourceId = try reader["ResourceId"].readIfPresent()
        value.resourceType = try reader["ResourceType"].readIfPresent()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        value.propagateAtLaunch = try reader["PropagateAtLaunch"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.EnabledMetric {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.EnabledMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.EnabledMetric()
        value.metric = try reader["Metric"].readIfPresent()
        value.granularity = try reader["Granularity"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.SuspendedProcess {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.SuspendedProcess {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.SuspendedProcess()
        value.processName = try reader["ProcessName"].readIfPresent()
        value.suspensionReason = try reader["SuspensionReason"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.Instance {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.Instance {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.Instance()
        value.instanceId = try reader["InstanceId"].readIfPresent() ?? ""
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.availabilityZone = try reader["AvailabilityZone"].readIfPresent() ?? ""
        value.lifecycleState = try reader["LifecycleState"].readIfPresent() ?? .sdkUnknown("")
        value.healthStatus = try reader["HealthStatus"].readIfPresent() ?? ""
        value.launchConfigurationName = try reader["LaunchConfigurationName"].readIfPresent()
        value.launchTemplate = try reader["LaunchTemplate"].readIfPresent(with: AutoScalingClientTypes.LaunchTemplateSpecification.read(from:))
        value.protectedFromScaleIn = try reader["ProtectedFromScaleIn"].readIfPresent() ?? false
        value.weightedCapacity = try reader["WeightedCapacity"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.LaunchTemplateSpecification {

    static func write(value: AutoScalingClientTypes.LaunchTemplateSpecification?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["LaunchTemplateId"].write(value.launchTemplateId)
        try writer["LaunchTemplateName"].write(value.launchTemplateName)
        try writer["Version"].write(value.version)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.LaunchTemplateSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.LaunchTemplateSpecification()
        value.launchTemplateId = try reader["LaunchTemplateId"].readIfPresent()
        value.launchTemplateName = try reader["LaunchTemplateName"].readIfPresent()
        value.version = try reader["Version"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.MixedInstancesPolicy {

    static func write(value: AutoScalingClientTypes.MixedInstancesPolicy?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["InstancesDistribution"].write(value.instancesDistribution, with: AutoScalingClientTypes.InstancesDistribution.write(value:to:))
        try writer["LaunchTemplate"].write(value.launchTemplate, with: AutoScalingClientTypes.LaunchTemplate.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.MixedInstancesPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.MixedInstancesPolicy()
        value.launchTemplate = try reader["LaunchTemplate"].readIfPresent(with: AutoScalingClientTypes.LaunchTemplate.read(from:))
        value.instancesDistribution = try reader["InstancesDistribution"].readIfPresent(with: AutoScalingClientTypes.InstancesDistribution.read(from:))
        return value
    }
}

extension AutoScalingClientTypes.InstancesDistribution {

    static func write(value: AutoScalingClientTypes.InstancesDistribution?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["OnDemandAllocationStrategy"].write(value.onDemandAllocationStrategy)
        try writer["OnDemandBaseCapacity"].write(value.onDemandBaseCapacity)
        try writer["OnDemandPercentageAboveBaseCapacity"].write(value.onDemandPercentageAboveBaseCapacity)
        try writer["SpotAllocationStrategy"].write(value.spotAllocationStrategy)
        try writer["SpotInstancePools"].write(value.spotInstancePools)
        try writer["SpotMaxPrice"].write(value.spotMaxPrice)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.InstancesDistribution {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.InstancesDistribution()
        value.onDemandAllocationStrategy = try reader["OnDemandAllocationStrategy"].readIfPresent()
        value.onDemandBaseCapacity = try reader["OnDemandBaseCapacity"].readIfPresent()
        value.onDemandPercentageAboveBaseCapacity = try reader["OnDemandPercentageAboveBaseCapacity"].readIfPresent()
        value.spotAllocationStrategy = try reader["SpotAllocationStrategy"].readIfPresent()
        value.spotInstancePools = try reader["SpotInstancePools"].readIfPresent()
        value.spotMaxPrice = try reader["SpotMaxPrice"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.LaunchTemplate {

    static func write(value: AutoScalingClientTypes.LaunchTemplate?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["LaunchTemplateSpecification"].write(value.launchTemplateSpecification, with: AutoScalingClientTypes.LaunchTemplateSpecification.write(value:to:))
        try writer["Overrides"].writeList(value.overrides, memberWritingClosure: AutoScalingClientTypes.LaunchTemplateOverrides.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.LaunchTemplate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.LaunchTemplate()
        value.launchTemplateSpecification = try reader["LaunchTemplateSpecification"].readIfPresent(with: AutoScalingClientTypes.LaunchTemplateSpecification.read(from:))
        value.overrides = try reader["Overrides"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.LaunchTemplateOverrides.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AutoScalingClientTypes.LaunchTemplateOverrides {

    static func write(value: AutoScalingClientTypes.LaunchTemplateOverrides?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["InstanceRequirements"].write(value.instanceRequirements, with: AutoScalingClientTypes.InstanceRequirements.write(value:to:))
        try writer["InstanceType"].write(value.instanceType)
        try writer["LaunchTemplateSpecification"].write(value.launchTemplateSpecification, with: AutoScalingClientTypes.LaunchTemplateSpecification.write(value:to:))
        try writer["WeightedCapacity"].write(value.weightedCapacity)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.LaunchTemplateOverrides {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.LaunchTemplateOverrides()
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.weightedCapacity = try reader["WeightedCapacity"].readIfPresent()
        value.launchTemplateSpecification = try reader["LaunchTemplateSpecification"].readIfPresent(with: AutoScalingClientTypes.LaunchTemplateSpecification.read(from:))
        value.instanceRequirements = try reader["InstanceRequirements"].readIfPresent(with: AutoScalingClientTypes.InstanceRequirements.read(from:))
        return value
    }
}

extension AutoScalingClientTypes.InstanceRequirements {

    static func write(value: AutoScalingClientTypes.InstanceRequirements?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AcceleratorCount"].write(value.acceleratorCount, with: AutoScalingClientTypes.AcceleratorCountRequest.write(value:to:))
        try writer["AcceleratorManufacturers"].writeList(value.acceleratorManufacturers, memberWritingClosure: SmithyReadWrite.WritingClosureBox<AutoScalingClientTypes.AcceleratorManufacturer>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AcceleratorNames"].writeList(value.acceleratorNames, memberWritingClosure: SmithyReadWrite.WritingClosureBox<AutoScalingClientTypes.AcceleratorName>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AcceleratorTotalMemoryMiB"].write(value.acceleratorTotalMemoryMiB, with: AutoScalingClientTypes.AcceleratorTotalMemoryMiBRequest.write(value:to:))
        try writer["AcceleratorTypes"].writeList(value.acceleratorTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<AutoScalingClientTypes.AcceleratorType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AllowedInstanceTypes"].writeList(value.allowedInstanceTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["BareMetal"].write(value.bareMetal)
        try writer["BaselineEbsBandwidthMbps"].write(value.baselineEbsBandwidthMbps, with: AutoScalingClientTypes.BaselineEbsBandwidthMbpsRequest.write(value:to:))
        try writer["BurstablePerformance"].write(value.burstablePerformance)
        try writer["CpuManufacturers"].writeList(value.cpuManufacturers, memberWritingClosure: SmithyReadWrite.WritingClosureBox<AutoScalingClientTypes.CpuManufacturer>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ExcludedInstanceTypes"].writeList(value.excludedInstanceTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InstanceGenerations"].writeList(value.instanceGenerations, memberWritingClosure: SmithyReadWrite.WritingClosureBox<AutoScalingClientTypes.InstanceGeneration>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LocalStorage"].write(value.localStorage)
        try writer["LocalStorageTypes"].writeList(value.localStorageTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<AutoScalingClientTypes.LocalStorageType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MaxSpotPriceAsPercentageOfOptimalOnDemandPrice"].write(value.maxSpotPriceAsPercentageOfOptimalOnDemandPrice)
        try writer["MemoryGiBPerVCpu"].write(value.memoryGiBPerVCpu, with: AutoScalingClientTypes.MemoryGiBPerVCpuRequest.write(value:to:))
        try writer["MemoryMiB"].write(value.memoryMiB, with: AutoScalingClientTypes.MemoryMiBRequest.write(value:to:))
        try writer["NetworkBandwidthGbps"].write(value.networkBandwidthGbps, with: AutoScalingClientTypes.NetworkBandwidthGbpsRequest.write(value:to:))
        try writer["NetworkInterfaceCount"].write(value.networkInterfaceCount, with: AutoScalingClientTypes.NetworkInterfaceCountRequest.write(value:to:))
        try writer["OnDemandMaxPricePercentageOverLowestPrice"].write(value.onDemandMaxPricePercentageOverLowestPrice)
        try writer["RequireHibernateSupport"].write(value.requireHibernateSupport)
        try writer["SpotMaxPricePercentageOverLowestPrice"].write(value.spotMaxPricePercentageOverLowestPrice)
        try writer["TotalLocalStorageGB"].write(value.totalLocalStorageGB, with: AutoScalingClientTypes.TotalLocalStorageGBRequest.write(value:to:))
        try writer["VCpuCount"].write(value.vCpuCount, with: AutoScalingClientTypes.VCpuCountRequest.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.InstanceRequirements {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.InstanceRequirements()
        value.vCpuCount = try reader["VCpuCount"].readIfPresent(with: AutoScalingClientTypes.VCpuCountRequest.read(from:))
        value.memoryMiB = try reader["MemoryMiB"].readIfPresent(with: AutoScalingClientTypes.MemoryMiBRequest.read(from:))
        value.cpuManufacturers = try reader["CpuManufacturers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<AutoScalingClientTypes.CpuManufacturer>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.memoryGiBPerVCpu = try reader["MemoryGiBPerVCpu"].readIfPresent(with: AutoScalingClientTypes.MemoryGiBPerVCpuRequest.read(from:))
        value.excludedInstanceTypes = try reader["ExcludedInstanceTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.instanceGenerations = try reader["InstanceGenerations"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<AutoScalingClientTypes.InstanceGeneration>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.spotMaxPricePercentageOverLowestPrice = try reader["SpotMaxPricePercentageOverLowestPrice"].readIfPresent()
        value.maxSpotPriceAsPercentageOfOptimalOnDemandPrice = try reader["MaxSpotPriceAsPercentageOfOptimalOnDemandPrice"].readIfPresent()
        value.onDemandMaxPricePercentageOverLowestPrice = try reader["OnDemandMaxPricePercentageOverLowestPrice"].readIfPresent()
        value.bareMetal = try reader["BareMetal"].readIfPresent()
        value.burstablePerformance = try reader["BurstablePerformance"].readIfPresent()
        value.requireHibernateSupport = try reader["RequireHibernateSupport"].readIfPresent()
        value.networkInterfaceCount = try reader["NetworkInterfaceCount"].readIfPresent(with: AutoScalingClientTypes.NetworkInterfaceCountRequest.read(from:))
        value.localStorage = try reader["LocalStorage"].readIfPresent()
        value.localStorageTypes = try reader["LocalStorageTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<AutoScalingClientTypes.LocalStorageType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.totalLocalStorageGB = try reader["TotalLocalStorageGB"].readIfPresent(with: AutoScalingClientTypes.TotalLocalStorageGBRequest.read(from:))
        value.baselineEbsBandwidthMbps = try reader["BaselineEbsBandwidthMbps"].readIfPresent(with: AutoScalingClientTypes.BaselineEbsBandwidthMbpsRequest.read(from:))
        value.acceleratorTypes = try reader["AcceleratorTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<AutoScalingClientTypes.AcceleratorType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.acceleratorCount = try reader["AcceleratorCount"].readIfPresent(with: AutoScalingClientTypes.AcceleratorCountRequest.read(from:))
        value.acceleratorManufacturers = try reader["AcceleratorManufacturers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<AutoScalingClientTypes.AcceleratorManufacturer>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.acceleratorNames = try reader["AcceleratorNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<AutoScalingClientTypes.AcceleratorName>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.acceleratorTotalMemoryMiB = try reader["AcceleratorTotalMemoryMiB"].readIfPresent(with: AutoScalingClientTypes.AcceleratorTotalMemoryMiBRequest.read(from:))
        value.networkBandwidthGbps = try reader["NetworkBandwidthGbps"].readIfPresent(with: AutoScalingClientTypes.NetworkBandwidthGbpsRequest.read(from:))
        value.allowedInstanceTypes = try reader["AllowedInstanceTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AutoScalingClientTypes.NetworkBandwidthGbpsRequest {

    static func write(value: AutoScalingClientTypes.NetworkBandwidthGbpsRequest?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Max"].write(value.max)
        try writer["Min"].write(value.min)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.NetworkBandwidthGbpsRequest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.NetworkBandwidthGbpsRequest()
        value.min = try reader["Min"].readIfPresent()
        value.max = try reader["Max"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.AcceleratorTotalMemoryMiBRequest {

    static func write(value: AutoScalingClientTypes.AcceleratorTotalMemoryMiBRequest?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Max"].write(value.max)
        try writer["Min"].write(value.min)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.AcceleratorTotalMemoryMiBRequest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.AcceleratorTotalMemoryMiBRequest()
        value.min = try reader["Min"].readIfPresent()
        value.max = try reader["Max"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.AcceleratorCountRequest {

    static func write(value: AutoScalingClientTypes.AcceleratorCountRequest?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Max"].write(value.max)
        try writer["Min"].write(value.min)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.AcceleratorCountRequest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.AcceleratorCountRequest()
        value.min = try reader["Min"].readIfPresent()
        value.max = try reader["Max"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.BaselineEbsBandwidthMbpsRequest {

    static func write(value: AutoScalingClientTypes.BaselineEbsBandwidthMbpsRequest?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Max"].write(value.max)
        try writer["Min"].write(value.min)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.BaselineEbsBandwidthMbpsRequest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.BaselineEbsBandwidthMbpsRequest()
        value.min = try reader["Min"].readIfPresent()
        value.max = try reader["Max"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.TotalLocalStorageGBRequest {

    static func write(value: AutoScalingClientTypes.TotalLocalStorageGBRequest?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Max"].write(value.max)
        try writer["Min"].write(value.min)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.TotalLocalStorageGBRequest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.TotalLocalStorageGBRequest()
        value.min = try reader["Min"].readIfPresent()
        value.max = try reader["Max"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.NetworkInterfaceCountRequest {

    static func write(value: AutoScalingClientTypes.NetworkInterfaceCountRequest?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Max"].write(value.max)
        try writer["Min"].write(value.min)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.NetworkInterfaceCountRequest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.NetworkInterfaceCountRequest()
        value.min = try reader["Min"].readIfPresent()
        value.max = try reader["Max"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.MemoryGiBPerVCpuRequest {

    static func write(value: AutoScalingClientTypes.MemoryGiBPerVCpuRequest?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Max"].write(value.max)
        try writer["Min"].write(value.min)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.MemoryGiBPerVCpuRequest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.MemoryGiBPerVCpuRequest()
        value.min = try reader["Min"].readIfPresent()
        value.max = try reader["Max"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.MemoryMiBRequest {

    static func write(value: AutoScalingClientTypes.MemoryMiBRequest?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Max"].write(value.max)
        try writer["Min"].write(value.min)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.MemoryMiBRequest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.MemoryMiBRequest()
        value.min = try reader["Min"].readIfPresent() ?? 0
        value.max = try reader["Max"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.VCpuCountRequest {

    static func write(value: AutoScalingClientTypes.VCpuCountRequest?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Max"].write(value.max)
        try writer["Min"].write(value.min)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.VCpuCountRequest {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.VCpuCountRequest()
        value.min = try reader["Min"].readIfPresent() ?? 0
        value.max = try reader["Max"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.AutoScalingInstanceDetails {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.AutoScalingInstanceDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.AutoScalingInstanceDetails()
        value.instanceId = try reader["InstanceId"].readIfPresent() ?? ""
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.autoScalingGroupName = try reader["AutoScalingGroupName"].readIfPresent() ?? ""
        value.availabilityZone = try reader["AvailabilityZone"].readIfPresent() ?? ""
        value.lifecycleState = try reader["LifecycleState"].readIfPresent() ?? ""
        value.healthStatus = try reader["HealthStatus"].readIfPresent() ?? ""
        value.launchConfigurationName = try reader["LaunchConfigurationName"].readIfPresent()
        value.launchTemplate = try reader["LaunchTemplate"].readIfPresent(with: AutoScalingClientTypes.LaunchTemplateSpecification.read(from:))
        value.protectedFromScaleIn = try reader["ProtectedFromScaleIn"].readIfPresent() ?? false
        value.weightedCapacity = try reader["WeightedCapacity"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.InstanceRefresh {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.InstanceRefresh {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.InstanceRefresh()
        value.instanceRefreshId = try reader["InstanceRefreshId"].readIfPresent()
        value.autoScalingGroupName = try reader["AutoScalingGroupName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusReason = try reader["StatusReason"].readIfPresent()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.percentageComplete = try reader["PercentageComplete"].readIfPresent()
        value.instancesToUpdate = try reader["InstancesToUpdate"].readIfPresent()
        value.progressDetails = try reader["ProgressDetails"].readIfPresent(with: AutoScalingClientTypes.InstanceRefreshProgressDetails.read(from:))
        value.preferences = try reader["Preferences"].readIfPresent(with: AutoScalingClientTypes.RefreshPreferences.read(from:))
        value.desiredConfiguration = try reader["DesiredConfiguration"].readIfPresent(with: AutoScalingClientTypes.DesiredConfiguration.read(from:))
        value.rollbackDetails = try reader["RollbackDetails"].readIfPresent(with: AutoScalingClientTypes.RollbackDetails.read(from:))
        return value
    }
}

extension AutoScalingClientTypes.RollbackDetails {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.RollbackDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.RollbackDetails()
        value.rollbackReason = try reader["RollbackReason"].readIfPresent()
        value.rollbackStartTime = try reader["RollbackStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.percentageCompleteOnRollback = try reader["PercentageCompleteOnRollback"].readIfPresent()
        value.instancesToUpdateOnRollback = try reader["InstancesToUpdateOnRollback"].readIfPresent()
        value.progressDetailsOnRollback = try reader["ProgressDetailsOnRollback"].readIfPresent(with: AutoScalingClientTypes.InstanceRefreshProgressDetails.read(from:))
        return value
    }
}

extension AutoScalingClientTypes.InstanceRefreshProgressDetails {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.InstanceRefreshProgressDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.InstanceRefreshProgressDetails()
        value.livePoolProgress = try reader["LivePoolProgress"].readIfPresent(with: AutoScalingClientTypes.InstanceRefreshLivePoolProgress.read(from:))
        value.warmPoolProgress = try reader["WarmPoolProgress"].readIfPresent(with: AutoScalingClientTypes.InstanceRefreshWarmPoolProgress.read(from:))
        return value
    }
}

extension AutoScalingClientTypes.InstanceRefreshWarmPoolProgress {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.InstanceRefreshWarmPoolProgress {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.InstanceRefreshWarmPoolProgress()
        value.percentageComplete = try reader["PercentageComplete"].readIfPresent()
        value.instancesToUpdate = try reader["InstancesToUpdate"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.InstanceRefreshLivePoolProgress {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.InstanceRefreshLivePoolProgress {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.InstanceRefreshLivePoolProgress()
        value.percentageComplete = try reader["PercentageComplete"].readIfPresent()
        value.instancesToUpdate = try reader["InstancesToUpdate"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.DesiredConfiguration {

    static func write(value: AutoScalingClientTypes.DesiredConfiguration?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["LaunchTemplate"].write(value.launchTemplate, with: AutoScalingClientTypes.LaunchTemplateSpecification.write(value:to:))
        try writer["MixedInstancesPolicy"].write(value.mixedInstancesPolicy, with: AutoScalingClientTypes.MixedInstancesPolicy.write(value:to:))
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.DesiredConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.DesiredConfiguration()
        value.launchTemplate = try reader["LaunchTemplate"].readIfPresent(with: AutoScalingClientTypes.LaunchTemplateSpecification.read(from:))
        value.mixedInstancesPolicy = try reader["MixedInstancesPolicy"].readIfPresent(with: AutoScalingClientTypes.MixedInstancesPolicy.read(from:))
        return value
    }
}

extension AutoScalingClientTypes.RefreshPreferences {

    static func write(value: AutoScalingClientTypes.RefreshPreferences?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["AlarmSpecification"].write(value.alarmSpecification, with: AutoScalingClientTypes.AlarmSpecification.write(value:to:))
        try writer["AutoRollback"].write(value.autoRollback)
        try writer["BakeTime"].write(value.bakeTime)
        try writer["CheckpointDelay"].write(value.checkpointDelay)
        try writer["CheckpointPercentages"].writeList(value.checkpointPercentages, memberWritingClosure: SmithyReadWrite.WritingClosures.writeInt(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InstanceWarmup"].write(value.instanceWarmup)
        try writer["MaxHealthyPercentage"].write(value.maxHealthyPercentage)
        try writer["MinHealthyPercentage"].write(value.minHealthyPercentage)
        try writer["ScaleInProtectedInstances"].write(value.scaleInProtectedInstances)
        try writer["SkipMatching"].write(value.skipMatching)
        try writer["StandbyInstances"].write(value.standbyInstances)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.RefreshPreferences {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.RefreshPreferences()
        value.minHealthyPercentage = try reader["MinHealthyPercentage"].readIfPresent()
        value.instanceWarmup = try reader["InstanceWarmup"].readIfPresent()
        value.checkpointPercentages = try reader["CheckpointPercentages"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        value.checkpointDelay = try reader["CheckpointDelay"].readIfPresent()
        value.skipMatching = try reader["SkipMatching"].readIfPresent()
        value.autoRollback = try reader["AutoRollback"].readIfPresent()
        value.scaleInProtectedInstances = try reader["ScaleInProtectedInstances"].readIfPresent()
        value.standbyInstances = try reader["StandbyInstances"].readIfPresent()
        value.alarmSpecification = try reader["AlarmSpecification"].readIfPresent(with: AutoScalingClientTypes.AlarmSpecification.read(from:))
        value.maxHealthyPercentage = try reader["MaxHealthyPercentage"].readIfPresent()
        value.bakeTime = try reader["BakeTime"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.AlarmSpecification {

    static func write(value: AutoScalingClientTypes.AlarmSpecification?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Alarms"].writeList(value.alarms, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.AlarmSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.AlarmSpecification()
        value.alarms = try reader["Alarms"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AutoScalingClientTypes.LaunchConfiguration {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.LaunchConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.LaunchConfiguration()
        value.launchConfigurationName = try reader["LaunchConfigurationName"].readIfPresent() ?? ""
        value.launchConfigurationARN = try reader["LaunchConfigurationARN"].readIfPresent()
        value.imageId = try reader["ImageId"].readIfPresent() ?? ""
        value.keyName = try reader["KeyName"].readIfPresent()
        value.securityGroups = try reader["SecurityGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.classicLinkVPCId = try reader["ClassicLinkVPCId"].readIfPresent()
        value.classicLinkVPCSecurityGroups = try reader["ClassicLinkVPCSecurityGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.userData = try reader["UserData"].readIfPresent()
        value.instanceType = try reader["InstanceType"].readIfPresent() ?? ""
        value.kernelId = try reader["KernelId"].readIfPresent()
        value.ramdiskId = try reader["RamdiskId"].readIfPresent()
        value.blockDeviceMappings = try reader["BlockDeviceMappings"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.BlockDeviceMapping.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.instanceMonitoring = try reader["InstanceMonitoring"].readIfPresent(with: AutoScalingClientTypes.InstanceMonitoring.read(from:))
        value.spotPrice = try reader["SpotPrice"].readIfPresent()
        value.iamInstanceProfile = try reader["IamInstanceProfile"].readIfPresent()
        value.createdTime = try reader["CreatedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.ebsOptimized = try reader["EbsOptimized"].readIfPresent()
        value.associatePublicIpAddress = try reader["AssociatePublicIpAddress"].readIfPresent()
        value.placementTenancy = try reader["PlacementTenancy"].readIfPresent()
        value.metadataOptions = try reader["MetadataOptions"].readIfPresent(with: AutoScalingClientTypes.InstanceMetadataOptions.read(from:))
        return value
    }
}

extension AutoScalingClientTypes.InstanceMetadataOptions {

    static func write(value: AutoScalingClientTypes.InstanceMetadataOptions?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["HttpEndpoint"].write(value.httpEndpoint)
        try writer["HttpPutResponseHopLimit"].write(value.httpPutResponseHopLimit)
        try writer["HttpTokens"].write(value.httpTokens)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.InstanceMetadataOptions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.InstanceMetadataOptions()
        value.httpTokens = try reader["HttpTokens"].readIfPresent()
        value.httpPutResponseHopLimit = try reader["HttpPutResponseHopLimit"].readIfPresent()
        value.httpEndpoint = try reader["HttpEndpoint"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.InstanceMonitoring {

    static func write(value: AutoScalingClientTypes.InstanceMonitoring?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Enabled"].write(value.enabled)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.InstanceMonitoring {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.InstanceMonitoring()
        value.enabled = try reader["Enabled"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.BlockDeviceMapping {

    static func write(value: AutoScalingClientTypes.BlockDeviceMapping?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DeviceName"].write(value.deviceName)
        try writer["Ebs"].write(value.ebs, with: AutoScalingClientTypes.Ebs.write(value:to:))
        try writer["NoDevice"].write(value.noDevice)
        try writer["VirtualName"].write(value.virtualName)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.BlockDeviceMapping {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.BlockDeviceMapping()
        value.virtualName = try reader["VirtualName"].readIfPresent()
        value.deviceName = try reader["DeviceName"].readIfPresent() ?? ""
        value.ebs = try reader["Ebs"].readIfPresent(with: AutoScalingClientTypes.Ebs.read(from:))
        value.noDevice = try reader["NoDevice"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.Ebs {

    static func write(value: AutoScalingClientTypes.Ebs?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DeleteOnTermination"].write(value.deleteOnTermination)
        try writer["Encrypted"].write(value.encrypted)
        try writer["Iops"].write(value.iops)
        try writer["SnapshotId"].write(value.snapshotId)
        try writer["Throughput"].write(value.throughput)
        try writer["VolumeSize"].write(value.volumeSize)
        try writer["VolumeType"].write(value.volumeType)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.Ebs {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.Ebs()
        value.snapshotId = try reader["SnapshotId"].readIfPresent()
        value.volumeSize = try reader["VolumeSize"].readIfPresent()
        value.volumeType = try reader["VolumeType"].readIfPresent()
        value.deleteOnTermination = try reader["DeleteOnTermination"].readIfPresent()
        value.iops = try reader["Iops"].readIfPresent()
        value.encrypted = try reader["Encrypted"].readIfPresent()
        value.throughput = try reader["Throughput"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.LifecycleHook {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.LifecycleHook {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.LifecycleHook()
        value.lifecycleHookName = try reader["LifecycleHookName"].readIfPresent()
        value.autoScalingGroupName = try reader["AutoScalingGroupName"].readIfPresent()
        value.lifecycleTransition = try reader["LifecycleTransition"].readIfPresent()
        value.notificationTargetARN = try reader["NotificationTargetARN"].readIfPresent()
        value.roleARN = try reader["RoleARN"].readIfPresent()
        value.notificationMetadata = try reader["NotificationMetadata"].readIfPresent()
        value.heartbeatTimeout = try reader["HeartbeatTimeout"].readIfPresent()
        value.globalTimeout = try reader["GlobalTimeout"].readIfPresent()
        value.defaultResult = try reader["DefaultResult"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.LoadBalancerState {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.LoadBalancerState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.LoadBalancerState()
        value.loadBalancerName = try reader["LoadBalancerName"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.LoadBalancerTargetGroupState {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.LoadBalancerTargetGroupState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.LoadBalancerTargetGroupState()
        value.loadBalancerTargetGroupARN = try reader["LoadBalancerTargetGroupARN"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.MetricCollectionType {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.MetricCollectionType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.MetricCollectionType()
        value.metric = try reader["Metric"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.MetricGranularityType {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.MetricGranularityType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.MetricGranularityType()
        value.granularity = try reader["Granularity"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.NotificationConfiguration {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.NotificationConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.NotificationConfiguration()
        value.autoScalingGroupName = try reader["AutoScalingGroupName"].readIfPresent()
        value.topicARN = try reader["TopicARN"].readIfPresent()
        value.notificationType = try reader["NotificationType"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.ScalingPolicy {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.ScalingPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.ScalingPolicy()
        value.autoScalingGroupName = try reader["AutoScalingGroupName"].readIfPresent()
        value.policyName = try reader["PolicyName"].readIfPresent()
        value.policyARN = try reader["PolicyARN"].readIfPresent()
        value.policyType = try reader["PolicyType"].readIfPresent()
        value.adjustmentType = try reader["AdjustmentType"].readIfPresent()
        value.minAdjustmentStep = try reader["MinAdjustmentStep"].readIfPresent()
        value.minAdjustmentMagnitude = try reader["MinAdjustmentMagnitude"].readIfPresent()
        value.scalingAdjustment = try reader["ScalingAdjustment"].readIfPresent()
        value.cooldown = try reader["Cooldown"].readIfPresent()
        value.stepAdjustments = try reader["StepAdjustments"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.StepAdjustment.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.metricAggregationType = try reader["MetricAggregationType"].readIfPresent()
        value.estimatedInstanceWarmup = try reader["EstimatedInstanceWarmup"].readIfPresent()
        value.alarms = try reader["Alarms"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.Alarm.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.targetTrackingConfiguration = try reader["TargetTrackingConfiguration"].readIfPresent(with: AutoScalingClientTypes.TargetTrackingConfiguration.read(from:))
        value.enabled = try reader["Enabled"].readIfPresent()
        value.predictiveScalingConfiguration = try reader["PredictiveScalingConfiguration"].readIfPresent(with: AutoScalingClientTypes.PredictiveScalingConfiguration.read(from:))
        return value
    }
}

extension AutoScalingClientTypes.PredictiveScalingConfiguration {

    static func write(value: AutoScalingClientTypes.PredictiveScalingConfiguration?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["MaxCapacityBreachBehavior"].write(value.maxCapacityBreachBehavior)
        try writer["MaxCapacityBuffer"].write(value.maxCapacityBuffer)
        try writer["MetricSpecifications"].writeList(value.metricSpecifications, memberWritingClosure: AutoScalingClientTypes.PredictiveScalingMetricSpecification.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Mode"].write(value.mode)
        try writer["SchedulingBufferTime"].write(value.schedulingBufferTime)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.PredictiveScalingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.PredictiveScalingConfiguration()
        value.metricSpecifications = try reader["MetricSpecifications"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.PredictiveScalingMetricSpecification.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.mode = try reader["Mode"].readIfPresent()
        value.schedulingBufferTime = try reader["SchedulingBufferTime"].readIfPresent()
        value.maxCapacityBreachBehavior = try reader["MaxCapacityBreachBehavior"].readIfPresent()
        value.maxCapacityBuffer = try reader["MaxCapacityBuffer"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.PredictiveScalingMetricSpecification {

    static func write(value: AutoScalingClientTypes.PredictiveScalingMetricSpecification?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CustomizedCapacityMetricSpecification"].write(value.customizedCapacityMetricSpecification, with: AutoScalingClientTypes.PredictiveScalingCustomizedCapacityMetric.write(value:to:))
        try writer["CustomizedLoadMetricSpecification"].write(value.customizedLoadMetricSpecification, with: AutoScalingClientTypes.PredictiveScalingCustomizedLoadMetric.write(value:to:))
        try writer["CustomizedScalingMetricSpecification"].write(value.customizedScalingMetricSpecification, with: AutoScalingClientTypes.PredictiveScalingCustomizedScalingMetric.write(value:to:))
        try writer["PredefinedLoadMetricSpecification"].write(value.predefinedLoadMetricSpecification, with: AutoScalingClientTypes.PredictiveScalingPredefinedLoadMetric.write(value:to:))
        try writer["PredefinedMetricPairSpecification"].write(value.predefinedMetricPairSpecification, with: AutoScalingClientTypes.PredictiveScalingPredefinedMetricPair.write(value:to:))
        try writer["PredefinedScalingMetricSpecification"].write(value.predefinedScalingMetricSpecification, with: AutoScalingClientTypes.PredictiveScalingPredefinedScalingMetric.write(value:to:))
        try writer["TargetValue"].write(value.targetValue)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.PredictiveScalingMetricSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.PredictiveScalingMetricSpecification()
        value.targetValue = try reader["TargetValue"].readIfPresent() ?? 0.0
        value.predefinedMetricPairSpecification = try reader["PredefinedMetricPairSpecification"].readIfPresent(with: AutoScalingClientTypes.PredictiveScalingPredefinedMetricPair.read(from:))
        value.predefinedScalingMetricSpecification = try reader["PredefinedScalingMetricSpecification"].readIfPresent(with: AutoScalingClientTypes.PredictiveScalingPredefinedScalingMetric.read(from:))
        value.predefinedLoadMetricSpecification = try reader["PredefinedLoadMetricSpecification"].readIfPresent(with: AutoScalingClientTypes.PredictiveScalingPredefinedLoadMetric.read(from:))
        value.customizedScalingMetricSpecification = try reader["CustomizedScalingMetricSpecification"].readIfPresent(with: AutoScalingClientTypes.PredictiveScalingCustomizedScalingMetric.read(from:))
        value.customizedLoadMetricSpecification = try reader["CustomizedLoadMetricSpecification"].readIfPresent(with: AutoScalingClientTypes.PredictiveScalingCustomizedLoadMetric.read(from:))
        value.customizedCapacityMetricSpecification = try reader["CustomizedCapacityMetricSpecification"].readIfPresent(with: AutoScalingClientTypes.PredictiveScalingCustomizedCapacityMetric.read(from:))
        return value
    }
}

extension AutoScalingClientTypes.PredictiveScalingCustomizedCapacityMetric {

    static func write(value: AutoScalingClientTypes.PredictiveScalingCustomizedCapacityMetric?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["MetricDataQueries"].writeList(value.metricDataQueries, memberWritingClosure: AutoScalingClientTypes.MetricDataQuery.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.PredictiveScalingCustomizedCapacityMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.PredictiveScalingCustomizedCapacityMetric()
        value.metricDataQueries = try reader["MetricDataQueries"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.MetricDataQuery.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension AutoScalingClientTypes.MetricDataQuery {

    static func write(value: AutoScalingClientTypes.MetricDataQuery?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Expression"].write(value.expression)
        try writer["Id"].write(value.id)
        try writer["Label"].write(value.label)
        try writer["MetricStat"].write(value.metricStat, with: AutoScalingClientTypes.MetricStat.write(value:to:))
        try writer["ReturnData"].write(value.returnData)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.MetricDataQuery {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.MetricDataQuery()
        value.id = try reader["Id"].readIfPresent() ?? ""
        value.expression = try reader["Expression"].readIfPresent()
        value.metricStat = try reader["MetricStat"].readIfPresent(with: AutoScalingClientTypes.MetricStat.read(from:))
        value.label = try reader["Label"].readIfPresent()
        value.returnData = try reader["ReturnData"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.MetricStat {

    static func write(value: AutoScalingClientTypes.MetricStat?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Metric"].write(value.metric, with: AutoScalingClientTypes.Metric.write(value:to:))
        try writer["Stat"].write(value.stat)
        try writer["Unit"].write(value.unit)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.MetricStat {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.MetricStat()
        value.metric = try reader["Metric"].readIfPresent(with: AutoScalingClientTypes.Metric.read(from:))
        value.stat = try reader["Stat"].readIfPresent() ?? ""
        value.unit = try reader["Unit"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.Metric {

    static func write(value: AutoScalingClientTypes.Metric?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Dimensions"].writeList(value.dimensions, memberWritingClosure: AutoScalingClientTypes.MetricDimension.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MetricName"].write(value.metricName)
        try writer["Namespace"].write(value.namespace)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.Metric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.Metric()
        value.namespace = try reader["Namespace"].readIfPresent() ?? ""
        value.metricName = try reader["MetricName"].readIfPresent() ?? ""
        value.dimensions = try reader["Dimensions"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.MetricDimension.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AutoScalingClientTypes.MetricDimension {

    static func write(value: AutoScalingClientTypes.MetricDimension?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.MetricDimension {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.MetricDimension()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension AutoScalingClientTypes.PredictiveScalingCustomizedLoadMetric {

    static func write(value: AutoScalingClientTypes.PredictiveScalingCustomizedLoadMetric?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["MetricDataQueries"].writeList(value.metricDataQueries, memberWritingClosure: AutoScalingClientTypes.MetricDataQuery.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.PredictiveScalingCustomizedLoadMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.PredictiveScalingCustomizedLoadMetric()
        value.metricDataQueries = try reader["MetricDataQueries"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.MetricDataQuery.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension AutoScalingClientTypes.PredictiveScalingCustomizedScalingMetric {

    static func write(value: AutoScalingClientTypes.PredictiveScalingCustomizedScalingMetric?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["MetricDataQueries"].writeList(value.metricDataQueries, memberWritingClosure: AutoScalingClientTypes.MetricDataQuery.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.PredictiveScalingCustomizedScalingMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.PredictiveScalingCustomizedScalingMetric()
        value.metricDataQueries = try reader["MetricDataQueries"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.MetricDataQuery.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension AutoScalingClientTypes.PredictiveScalingPredefinedLoadMetric {

    static func write(value: AutoScalingClientTypes.PredictiveScalingPredefinedLoadMetric?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["PredefinedMetricType"].write(value.predefinedMetricType)
        try writer["ResourceLabel"].write(value.resourceLabel)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.PredictiveScalingPredefinedLoadMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.PredictiveScalingPredefinedLoadMetric()
        value.predefinedMetricType = try reader["PredefinedMetricType"].readIfPresent() ?? .sdkUnknown("")
        value.resourceLabel = try reader["ResourceLabel"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.PredictiveScalingPredefinedScalingMetric {

    static func write(value: AutoScalingClientTypes.PredictiveScalingPredefinedScalingMetric?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["PredefinedMetricType"].write(value.predefinedMetricType)
        try writer["ResourceLabel"].write(value.resourceLabel)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.PredictiveScalingPredefinedScalingMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.PredictiveScalingPredefinedScalingMetric()
        value.predefinedMetricType = try reader["PredefinedMetricType"].readIfPresent() ?? .sdkUnknown("")
        value.resourceLabel = try reader["ResourceLabel"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.PredictiveScalingPredefinedMetricPair {

    static func write(value: AutoScalingClientTypes.PredictiveScalingPredefinedMetricPair?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["PredefinedMetricType"].write(value.predefinedMetricType)
        try writer["ResourceLabel"].write(value.resourceLabel)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.PredictiveScalingPredefinedMetricPair {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.PredictiveScalingPredefinedMetricPair()
        value.predefinedMetricType = try reader["PredefinedMetricType"].readIfPresent() ?? .sdkUnknown("")
        value.resourceLabel = try reader["ResourceLabel"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.TargetTrackingConfiguration {

    static func write(value: AutoScalingClientTypes.TargetTrackingConfiguration?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["CustomizedMetricSpecification"].write(value.customizedMetricSpecification, with: AutoScalingClientTypes.CustomizedMetricSpecification.write(value:to:))
        try writer["DisableScaleIn"].write(value.disableScaleIn)
        try writer["PredefinedMetricSpecification"].write(value.predefinedMetricSpecification, with: AutoScalingClientTypes.PredefinedMetricSpecification.write(value:to:))
        try writer["TargetValue"].write(value.targetValue)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.TargetTrackingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.TargetTrackingConfiguration()
        value.predefinedMetricSpecification = try reader["PredefinedMetricSpecification"].readIfPresent(with: AutoScalingClientTypes.PredefinedMetricSpecification.read(from:))
        value.customizedMetricSpecification = try reader["CustomizedMetricSpecification"].readIfPresent(with: AutoScalingClientTypes.CustomizedMetricSpecification.read(from:))
        value.targetValue = try reader["TargetValue"].readIfPresent() ?? 0.0
        value.disableScaleIn = try reader["DisableScaleIn"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.CustomizedMetricSpecification {

    static func write(value: AutoScalingClientTypes.CustomizedMetricSpecification?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Dimensions"].writeList(value.dimensions, memberWritingClosure: AutoScalingClientTypes.MetricDimension.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MetricName"].write(value.metricName)
        try writer["Metrics"].writeList(value.metrics, memberWritingClosure: AutoScalingClientTypes.TargetTrackingMetricDataQuery.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Namespace"].write(value.namespace)
        try writer["Statistic"].write(value.statistic)
        try writer["Unit"].write(value.unit)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.CustomizedMetricSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.CustomizedMetricSpecification()
        value.metricName = try reader["MetricName"].readIfPresent()
        value.namespace = try reader["Namespace"].readIfPresent()
        value.dimensions = try reader["Dimensions"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.MetricDimension.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.statistic = try reader["Statistic"].readIfPresent()
        value.unit = try reader["Unit"].readIfPresent()
        value.metrics = try reader["Metrics"].readListIfPresent(memberReadingClosure: AutoScalingClientTypes.TargetTrackingMetricDataQuery.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AutoScalingClientTypes.TargetTrackingMetricDataQuery {

    static func write(value: AutoScalingClientTypes.TargetTrackingMetricDataQuery?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Expression"].write(value.expression)
        try writer["Id"].write(value.id)
        try writer["Label"].write(value.label)
        try writer["MetricStat"].write(value.metricStat, with: AutoScalingClientTypes.TargetTrackingMetricStat.write(value:to:))
        try writer["ReturnData"].write(value.returnData)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.TargetTrackingMetricDataQuery {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.TargetTrackingMetricDataQuery()
        value.id = try reader["Id"].readIfPresent() ?? ""
        value.expression = try reader["Expression"].readIfPresent()
        value.metricStat = try reader["MetricStat"].readIfPresent(with: AutoScalingClientTypes.TargetTrackingMetricStat.read(from:))
        value.label = try reader["Label"].readIfPresent()
        value.returnData = try reader["ReturnData"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.TargetTrackingMetricStat {

    static func write(value: AutoScalingClientTypes.TargetTrackingMetricStat?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Metric"].write(value.metric, with: AutoScalingClientTypes.Metric.write(value:to:))
        try writer["Stat"].write(value.stat)
        try writer["Unit"].write(value.unit)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.TargetTrackingMetricStat {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.TargetTrackingMetricStat()
        value.metric = try reader["Metric"].readIfPresent(with: AutoScalingClientTypes.Metric.read(from:))
        value.stat = try reader["Stat"].readIfPresent() ?? ""
        value.unit = try reader["Unit"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.PredefinedMetricSpecification {

    static func write(value: AutoScalingClientTypes.PredefinedMetricSpecification?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["PredefinedMetricType"].write(value.predefinedMetricType)
        try writer["ResourceLabel"].write(value.resourceLabel)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.PredefinedMetricSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.PredefinedMetricSpecification()
        value.predefinedMetricType = try reader["PredefinedMetricType"].readIfPresent() ?? .sdkUnknown("")
        value.resourceLabel = try reader["ResourceLabel"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.Alarm {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.Alarm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.Alarm()
        value.alarmName = try reader["AlarmName"].readIfPresent()
        value.alarmARN = try reader["AlarmARN"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.StepAdjustment {

    static func write(value: AutoScalingClientTypes.StepAdjustment?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["MetricIntervalLowerBound"].write(value.metricIntervalLowerBound)
        try writer["MetricIntervalUpperBound"].write(value.metricIntervalUpperBound)
        try writer["ScalingAdjustment"].write(value.scalingAdjustment)
    }

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.StepAdjustment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.StepAdjustment()
        value.metricIntervalLowerBound = try reader["MetricIntervalLowerBound"].readIfPresent()
        value.metricIntervalUpperBound = try reader["MetricIntervalUpperBound"].readIfPresent()
        value.scalingAdjustment = try reader["ScalingAdjustment"].readIfPresent() ?? 0
        return value
    }
}

extension AutoScalingClientTypes.Activity {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.Activity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.Activity()
        value.activityId = try reader["ActivityId"].readIfPresent() ?? ""
        value.autoScalingGroupName = try reader["AutoScalingGroupName"].readIfPresent() ?? ""
        value.description = try reader["Description"].readIfPresent()
        value.cause = try reader["Cause"].readIfPresent() ?? ""
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.statusCode = try reader["StatusCode"].readIfPresent() ?? .sdkUnknown("")
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.progress = try reader["Progress"].readIfPresent()
        value.details = try reader["Details"].readIfPresent()
        value.autoScalingGroupState = try reader["AutoScalingGroupState"].readIfPresent()
        value.autoScalingGroupARN = try reader["AutoScalingGroupARN"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.ProcessType {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.ProcessType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.ProcessType()
        value.processName = try reader["ProcessName"].readIfPresent() ?? ""
        return value
    }
}

extension AutoScalingClientTypes.ScheduledUpdateGroupAction {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.ScheduledUpdateGroupAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.ScheduledUpdateGroupAction()
        value.autoScalingGroupName = try reader["AutoScalingGroupName"].readIfPresent()
        value.scheduledActionName = try reader["ScheduledActionName"].readIfPresent()
        value.scheduledActionARN = try reader["ScheduledActionARN"].readIfPresent()
        value.time = try reader["Time"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.dateTime)
        value.recurrence = try reader["Recurrence"].readIfPresent()
        value.minSize = try reader["MinSize"].readIfPresent()
        value.maxSize = try reader["MaxSize"].readIfPresent()
        value.desiredCapacity = try reader["DesiredCapacity"].readIfPresent()
        value.timeZone = try reader["TimeZone"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.TrafficSourceState {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.TrafficSourceState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.TrafficSourceState()
        value.trafficSource = try reader["TrafficSource"].readIfPresent()
        value.state = try reader["State"].readIfPresent()
        value.identifier = try reader["Identifier"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        return value
    }
}

extension AutoScalingClientTypes.LoadForecast {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.LoadForecast {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.LoadForecast()
        value.timestamps = try reader["Timestamps"].readListIfPresent(memberReadingClosure: SmithyReadWrite.timestampReadingClosure(format: SmithyTimestamps.TimestampFormat.dateTime), memberNodeInfo: "member", isFlattened: false) ?? []
        value.values = try reader["Values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readDouble(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.metricSpecification = try reader["MetricSpecification"].readIfPresent(with: AutoScalingClientTypes.PredictiveScalingMetricSpecification.read(from:))
        return value
    }
}

extension AutoScalingClientTypes.CapacityForecast {

    static func read(from reader: SmithyXML.Reader) throws -> AutoScalingClientTypes.CapacityForecast {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = AutoScalingClientTypes.CapacityForecast()
        value.timestamps = try reader["Timestamps"].readListIfPresent(memberReadingClosure: SmithyReadWrite.timestampReadingClosure(format: SmithyTimestamps.TimestampFormat.dateTime), memberNodeInfo: "member", isFlattened: false) ?? []
        value.values = try reader["Values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readDouble(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension AutoScalingClientTypes.ScheduledUpdateGroupActionRequest {

    static func write(value: AutoScalingClientTypes.ScheduledUpdateGroupActionRequest?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DesiredCapacity"].write(value.desiredCapacity)
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["MaxSize"].write(value.maxSize)
        try writer["MinSize"].write(value.minSize)
        try writer["Recurrence"].write(value.recurrence)
        try writer["ScheduledActionName"].write(value.scheduledActionName)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.dateTime)
        try writer["TimeZone"].write(value.timeZone)
    }
}

extension AutoScalingClientTypes.LifecycleHookSpecification {

    static func write(value: AutoScalingClientTypes.LifecycleHookSpecification?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["DefaultResult"].write(value.defaultResult)
        try writer["HeartbeatTimeout"].write(value.heartbeatTimeout)
        try writer["LifecycleHookName"].write(value.lifecycleHookName)
        try writer["LifecycleTransition"].write(value.lifecycleTransition)
        try writer["NotificationMetadata"].write(value.notificationMetadata)
        try writer["NotificationTargetARN"].write(value.notificationTargetARN)
        try writer["RoleARN"].write(value.roleARN)
    }
}

extension AutoScalingClientTypes.Tag {

    static func write(value: AutoScalingClientTypes.Tag?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["PropagateAtLaunch"].write(value.propagateAtLaunch)
        try writer["ResourceId"].write(value.resourceId)
        try writer["ResourceType"].write(value.resourceType)
        try writer["Value"].write(value.value)
    }
}

extension AutoScalingClientTypes.Filter {

    static func write(value: AutoScalingClientTypes.Filter?, to writer: SmithyFormURL.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

public enum AutoScalingClientTypes {}
