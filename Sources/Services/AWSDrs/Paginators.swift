// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime


/// Paginate over `[ListExtensibleSourceServersOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListExtensibleSourceServersInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListExtensibleSourceServersOutputResponse`
extension DrsClient {
    public func listExtensibleSourceServersPaginated(input: ListExtensibleSourceServersInput) -> ClientRuntime.PaginatorSequence<ListExtensibleSourceServersInput, ListExtensibleSourceServersOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListExtensibleSourceServersInput, ListExtensibleSourceServersOutputResponse>(input: input, inputKey: \ListExtensibleSourceServersInput.nextToken, outputKey: \ListExtensibleSourceServersOutputResponse.nextToken, paginationFunction: self.listExtensibleSourceServers(input:))
    }
}

extension ListExtensibleSourceServersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListExtensibleSourceServersInput {
        return ListExtensibleSourceServersInput(
            maxResults: self.maxResults,
            nextToken: token,
            stagingAccountID: self.stagingAccountID
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listExtensibleSourceServersPaginated`
/// to access the nested member `[DrsClientTypes.StagingSourceServer]`
/// - Returns: `[DrsClientTypes.StagingSourceServer]`
extension PaginatorSequence where Input == ListExtensibleSourceServersInput, Output == ListExtensibleSourceServersOutputResponse {
    public func items() async throws -> [DrsClientTypes.StagingSourceServer] {
        return try await self.asyncCompactMap { item in item.items }
    }
}

/// Paginate over `[ListStagingAccountsOutputResponse]` results.
///
/// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
/// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
/// until then. If there are errors in your request, you will see the failures only after you start iterating.
/// - Parameters:
///     - input: A `[ListStagingAccountsInput]` to start pagination
/// - Returns: An `AsyncSequence` that can iterate over `ListStagingAccountsOutputResponse`
extension DrsClient {
    public func listStagingAccountsPaginated(input: ListStagingAccountsInput) -> ClientRuntime.PaginatorSequence<ListStagingAccountsInput, ListStagingAccountsOutputResponse> {
        return ClientRuntime.PaginatorSequence<ListStagingAccountsInput, ListStagingAccountsOutputResponse>(input: input, inputKey: \ListStagingAccountsInput.nextToken, outputKey: \ListStagingAccountsOutputResponse.nextToken, paginationFunction: self.listStagingAccounts(input:))
    }
}

extension ListStagingAccountsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListStagingAccountsInput {
        return ListStagingAccountsInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}

/// This paginator transforms the `AsyncSequence` returned by `listStagingAccountsPaginated`
/// to access the nested member `[DrsClientTypes.Account]`
/// - Returns: `[DrsClientTypes.Account]`
extension PaginatorSequence where Input == ListStagingAccountsInput, Output == ListStagingAccountsOutputResponse {
    public func accounts() async throws -> [DrsClientTypes.Account] {
        return try await self.asyncCompactMap { item in item.accounts }
    }
}
