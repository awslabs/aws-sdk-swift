// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ServerlessApplicationRepositoryClient {
    /// Paginate over `[ListApplicationDependenciesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListApplicationDependenciesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListApplicationDependenciesOutput`
    public func listApplicationDependenciesPaginated(input: ListApplicationDependenciesInput) -> ClientRuntime.PaginatorSequence<ListApplicationDependenciesInput, ListApplicationDependenciesOutput> {
        return ClientRuntime.PaginatorSequence<ListApplicationDependenciesInput, ListApplicationDependenciesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listApplicationDependencies(input:))
    }
}

extension ListApplicationDependenciesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListApplicationDependenciesInput {
        return ListApplicationDependenciesInput(
            applicationId: self.applicationId,
            maxItems: self.maxItems,
            nextToken: token,
            semanticVersion: self.semanticVersion
        )}
}
extension ServerlessApplicationRepositoryClient {
    /// Paginate over `[ListApplicationsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListApplicationsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListApplicationsOutput`
    public func listApplicationsPaginated(input: ListApplicationsInput) -> ClientRuntime.PaginatorSequence<ListApplicationsInput, ListApplicationsOutput> {
        return ClientRuntime.PaginatorSequence<ListApplicationsInput, ListApplicationsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listApplications(input:))
    }
}

extension ListApplicationsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListApplicationsInput {
        return ListApplicationsInput(
            maxItems: self.maxItems,
            nextToken: token
        )}
}
extension ServerlessApplicationRepositoryClient {
    /// Paginate over `[ListApplicationVersionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListApplicationVersionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListApplicationVersionsOutput`
    public func listApplicationVersionsPaginated(input: ListApplicationVersionsInput) -> ClientRuntime.PaginatorSequence<ListApplicationVersionsInput, ListApplicationVersionsOutput> {
        return ClientRuntime.PaginatorSequence<ListApplicationVersionsInput, ListApplicationVersionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listApplicationVersions(input:))
    }
}

extension ListApplicationVersionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListApplicationVersionsInput {
        return ListApplicationVersionsInput(
            applicationId: self.applicationId,
            maxItems: self.maxItems,
            nextToken: token
        )}
}
