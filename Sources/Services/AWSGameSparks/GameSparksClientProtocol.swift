// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

///
public protocol GameSparksClientProtocol {
    /// Creates a new game with an empty configuration. After creating your game, you can update the configuration using UpdateGameConfiguration or ImportGameConfiguration.
    func createGame(input: CreateGameInput) async throws -> CreateGameOutputResponse
    /// Creates a snapshot of the game configuration.
    func createSnapshot(input: CreateSnapshotInput) async throws -> CreateSnapshotOutputResponse
    /// Creates a new stage for stage-by-stage game development and deployment.
    func createStage(input: CreateStageInput) async throws -> CreateStageOutputResponse
    /// Deletes a game.
    func deleteGame(input: DeleteGameInput) async throws -> DeleteGameOutputResponse
    /// Deletes a stage from a game, along with the associated game runtime.
    func deleteStage(input: DeleteStageInput) async throws -> DeleteStageOutputResponse
    /// Disconnects a player from the game runtime. If a player has multiple connections, this operation attempts to close all of them.
    func disconnectPlayer(input: DisconnectPlayerInput) async throws -> DisconnectPlayerOutputResponse
    /// Exports a game configuration snapshot.
    func exportSnapshot(input: ExportSnapshotInput) async throws -> ExportSnapshotOutputResponse
    /// Gets details about a specified extension.
    func getExtension(input: GetExtensionInput) async throws -> GetExtensionOutputResponse
    /// Gets details about a specified extension version.
    func getExtensionVersion(input: GetExtensionVersionInput) async throws -> GetExtensionVersionOutputResponse
    /// Gets details about a game.
    func getGame(input: GetGameInput) async throws -> GetGameOutputResponse
    /// Gets the configuration of the game.
    func getGameConfiguration(input: GetGameConfigurationInput) async throws -> GetGameConfigurationOutputResponse
    /// Gets details about a job that is generating code for a snapshot.
    func getGeneratedCodeJob(input: GetGeneratedCodeJobInput) async throws -> GetGeneratedCodeJobOutputResponse
    /// Gets the status of a player's connection to the game runtime. It's possible for a single player to have multiple connections to the game runtime. If a player is not connected, this operation returns an empty list.
    func getPlayerConnectionStatus(input: GetPlayerConnectionStatusInput) async throws -> GetPlayerConnectionStatusOutputResponse
    /// Gets a copy of the game configuration in a snapshot.
    func getSnapshot(input: GetSnapshotInput) async throws -> GetSnapshotOutputResponse
    /// Gets information about a stage.
    func getStage(input: GetStageInput) async throws -> GetStageOutputResponse
    /// Gets information about a stage deployment.
    func getStageDeployment(input: GetStageDeploymentInput) async throws -> GetStageDeploymentOutputResponse
    /// Imports a game configuration. This operation replaces the current configuration of the game with the provided input. This is not a reversible operation. If you want to preserve the previous configuration, use CreateSnapshot to make a new snapshot before importing.
    func importGameConfiguration(input: ImportGameConfigurationInput) async throws -> ImportGameConfigurationOutputResponse
    /// Gets a paginated list of available extensions. Extensions provide features that games can use from scripts.
    func listExtensions(input: ListExtensionsInput) async throws -> ListExtensionsOutputResponse
    /// Gets a paginated list of available versions for the extension. Each time an API change is made to an extension, the version is incremented. The list retrieved by this operation shows the versions that are currently available.
    func listExtensionVersions(input: ListExtensionVersionsInput) async throws -> ListExtensionVersionsOutputResponse
    /// Gets a paginated list of games.
    func listGames(input: ListGamesInput) async throws -> ListGamesOutputResponse
    /// Gets a paginated list of code generation jobs for a snapshot.
    func listGeneratedCodeJobs(input: ListGeneratedCodeJobsInput) async throws -> ListGeneratedCodeJobsOutputResponse
    /// Gets a paginated list of snapshot summaries from the game.
    func listSnapshots(input: ListSnapshotsInput) async throws -> ListSnapshotsOutputResponse
    /// Gets a paginated list of stage deployment summaries from the game.
    func listStageDeployments(input: ListStageDeploymentsInput) async throws -> ListStageDeploymentsOutputResponse
    /// Gets a paginated list of stage summaries from the game.
    func listStages(input: ListStagesInput) async throws -> ListStagesOutputResponse
    /// Lists the tags associated with a GameSparks resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    /// Starts an asynchronous process that generates client code for system-defined and custom messages. The resulting code is collected as a .zip file and uploaded to a pre-signed Amazon S3 URL.
    func startGeneratedCodeJob(input: StartGeneratedCodeJobInput) async throws -> StartGeneratedCodeJobOutputResponse
    /// Deploys a snapshot to the stage and creates a new game runtime. After you call this operation, you can check the deployment status by using GetStageDeployment. If there are any players connected to the previous game runtime, then both runtimes persist. Existing connections to the previous runtime are maintained. When players disconnect and reconnect, they connect to the new runtime. After there are no connections to the previous game runtime, it is deleted.
    func startStageDeployment(input: StartStageDeploymentInput) async throws -> StartStageDeploymentOutputResponse
    /// Adds tags to a GameSparks resource.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    /// Removes tags from a GameSparks resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    /// Updates details of the game.
    func updateGame(input: UpdateGameInput) async throws -> UpdateGameOutputResponse
    /// Updates one or more sections of the game configuration.
    func updateGameConfiguration(input: UpdateGameConfigurationInput) async throws -> UpdateGameConfigurationOutputResponse
    /// Updates the metadata of a GameSparks snapshot.
    func updateSnapshot(input: UpdateSnapshotInput) async throws -> UpdateSnapshotOutputResponse
    /// Updates the metadata of a stage.
    func updateStage(input: UpdateStageInput) async throws -> UpdateStageOutputResponse
}

public enum GameSparksClientTypes {}
