// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AddStorageSystemInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case clientToken = "ClientToken"
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case credentials = "Credentials"
        case name = "Name"
        case serverConfiguration = "ServerConfiguration"
        case systemType = "SystemType"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarn0 in agentArns {
                try agentArnsContainer.encode(agentarn0)
            }
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let cloudWatchLogGroupArn = self.cloudWatchLogGroupArn {
            try encodeContainer.encode(cloudWatchLogGroupArn, forKey: .cloudWatchLogGroupArn)
        }
        if let credentials = self.credentials {
            try encodeContainer.encode(credentials, forKey: .credentials)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let serverConfiguration = self.serverConfiguration {
            try encodeContainer.encode(serverConfiguration, forKey: .serverConfiguration)
        }
        if let systemType = self.systemType {
            try encodeContainer.encode(systemType.rawValue, forKey: .systemType)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglistentry0 in tags {
                try tagsContainer.encode(taglistentry0)
            }
        }
    }
}

extension AddStorageSystemInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AddStorageSystemInput: Swift.Equatable {
    /// Specifies the Amazon Resource Name (ARN) of the DataSync agent that connects to and reads from your on-premises storage system's management interface. You can only specify one ARN.
    /// This member is required.
    public var agentArns: [Swift.String]?
    /// Specifies a client token to make sure requests with this API operation are idempotent. If you don't specify a client token, DataSync generates one for you automatically.
    /// This member is required.
    public var clientToken: Swift.String?
    /// Specifies the ARN of the Amazon CloudWatch log group for monitoring and logging discovery job events.
    public var cloudWatchLogGroupArn: Swift.String?
    /// Specifies the user name and password for accessing your on-premises storage system's management interface.
    /// This member is required.
    public var credentials: DataSyncClientTypes.Credentials?
    /// Specifies a familiar name for your on-premises storage system.
    public var name: Swift.String?
    /// Specifies the server name and network port required to connect with the management interface of your on-premises storage system.
    /// This member is required.
    public var serverConfiguration: DataSyncClientTypes.DiscoveryServerConfiguration?
    /// Specifies the type of on-premises storage system that you want DataSync Discovery to collect information about. DataSync Discovery currently supports NetApp Fabric-Attached Storage (FAS) and All Flash FAS (AFF) systems running ONTAP 9.7 or later.
    /// This member is required.
    public var systemType: DataSyncClientTypes.DiscoverySystemType?
    /// Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your on-premises storage system.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init(
        agentArns: [Swift.String]? = nil,
        clientToken: Swift.String? = nil,
        cloudWatchLogGroupArn: Swift.String? = nil,
        credentials: DataSyncClientTypes.Credentials? = nil,
        name: Swift.String? = nil,
        serverConfiguration: DataSyncClientTypes.DiscoveryServerConfiguration? = nil,
        systemType: DataSyncClientTypes.DiscoverySystemType? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.agentArns = agentArns
        self.clientToken = clientToken
        self.cloudWatchLogGroupArn = cloudWatchLogGroupArn
        self.credentials = credentials
        self.name = name
        self.serverConfiguration = serverConfiguration
        self.systemType = systemType
        self.tags = tags
    }
}

struct AddStorageSystemInputBody: Swift.Equatable {
    let serverConfiguration: DataSyncClientTypes.DiscoveryServerConfiguration?
    let systemType: DataSyncClientTypes.DiscoverySystemType?
    let agentArns: [Swift.String]?
    let cloudWatchLogGroupArn: Swift.String?
    let tags: [DataSyncClientTypes.TagListEntry]?
    let name: Swift.String?
    let clientToken: Swift.String?
    let credentials: DataSyncClientTypes.Credentials?
}

extension AddStorageSystemInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case clientToken = "ClientToken"
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case credentials = "Credentials"
        case name = "Name"
        case serverConfiguration = "ServerConfiguration"
        case systemType = "SystemType"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverConfigurationDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.DiscoveryServerConfiguration.self, forKey: .serverConfiguration)
        serverConfiguration = serverConfigurationDecoded
        let systemTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.DiscoverySystemType.self, forKey: .systemType)
        systemType = systemTypeDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let cloudWatchLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogGroupArn)
        cloudWatchLogGroupArn = cloudWatchLogGroupArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let credentialsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Credentials.self, forKey: .credentials)
        credentials = credentialsDecoded
    }
}

public enum AddStorageSystemOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension AddStorageSystemOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: AddStorageSystemOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.storageSystemArn = output.storageSystemArn
        } else {
            self.storageSystemArn = nil
        }
    }
}

public struct AddStorageSystemOutputResponse: Swift.Equatable {
    /// The ARN of the on-premises storage system that you can use with DataSync Discovery.
    /// This member is required.
    public var storageSystemArn: Swift.String?

    public init(
        storageSystemArn: Swift.String? = nil
    )
    {
        self.storageSystemArn = storageSystemArn
    }
}

struct AddStorageSystemOutputResponseBody: Swift.Equatable {
    let storageSystemArn: Swift.String?
}

extension AddStorageSystemOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storageSystemArn = "StorageSystemArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageSystemArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageSystemArn)
        storageSystemArn = storageSystemArnDecoded
    }
}

extension DataSyncClientTypes.AgentListEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArn = "AgentArn"
        case name = "Name"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArn = self.agentArn {
            try encodeContainer.encode(agentArn, forKey: .agentArn)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentArn)
        agentArn = agentArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.AgentStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension DataSyncClientTypes {
    /// Represents a single entry in a list (or array) of DataSync agents when you call the [ListAgents](https://docs.aws.amazon.com/datasync/latest/userguide/API_ListAgents.html) operation.
    public struct AgentListEntry: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of a DataSync agent.
        public var agentArn: Swift.String?
        /// The name of an agent.
        public var name: Swift.String?
        /// The status of an agent. For more information, see [DataSync agent statuses](https://docs.aws.amazon.com/datasync/latest/userguide/understand-agent-statuses.html).
        public var status: DataSyncClientTypes.AgentStatus?

        public init(
            agentArn: Swift.String? = nil,
            name: Swift.String? = nil,
            status: DataSyncClientTypes.AgentStatus? = nil
        )
        {
            self.agentArn = agentArn
            self.name = name
            self.status = status
        }
    }

}

extension DataSyncClientTypes {
    public enum AgentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case offline
        case online
        case sdkUnknown(Swift.String)

        public static var allCases: [AgentStatus] {
            return [
                .offline,
                .online,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .offline: return "OFFLINE"
            case .online: return "ONLINE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AgentStatus(rawValue: rawValue) ?? AgentStatus.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum Atime: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case bestEffort
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [Atime] {
            return [
                .bestEffort,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .bestEffort: return "BEST_EFFORT"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Atime(rawValue: rawValue) ?? Atime.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum AzureAccessTier: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case archive
        case cool
        case hot
        case sdkUnknown(Swift.String)

        public static var allCases: [AzureAccessTier] {
            return [
                .archive,
                .cool,
                .hot,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .archive: return "ARCHIVE"
            case .cool: return "COOL"
            case .hot: return "HOT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AzureAccessTier(rawValue: rawValue) ?? AzureAccessTier.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum AzureBlobAuthenticationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case sas
        case sdkUnknown(Swift.String)

        public static var allCases: [AzureBlobAuthenticationType] {
            return [
                .sas,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .sas: return "SAS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AzureBlobAuthenticationType(rawValue: rawValue) ?? AzureBlobAuthenticationType.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.AzureBlobSasConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case token = "Token"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let token = self.token {
            try encodeContainer.encode(token, forKey: .token)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .token)
        token = tokenDecoded
    }
}

extension DataSyncClientTypes.AzureBlobSasConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AzureBlobSasConfiguration(token: \"CONTENT_REDACTED\")"}
}

extension DataSyncClientTypes {
    /// The shared access signature (SAS) configuration that allows DataSync to access your Microsoft Azure Blob Storage. For more information, see [SAS tokens](https://docs.aws.amazon.com/datasync/latest/userguide/creating-azure-blob-location.html#azure-blob-sas-tokens) for accessing your Azure Blob Storage.
    public struct AzureBlobSasConfiguration: Swift.Equatable {
        /// Specifies a SAS token that provides permissions to access your Azure Blob Storage. The token is part of the SAS URI string that comes after the storage resource URI and a question mark. A token looks something like this: sp=r&st=2023-12-20T14:54:52Z&se=2023-12-20T22:54:52Z&spr=https&sv=2021-06-08&sr=c&sig=aBBKDWQvyuVcTPH9EBp%2FXTI9E%2F%2Fmq171%2BZU178wcwqU%3D
        /// This member is required.
        public var token: Swift.String?

        public init(
            token: Swift.String? = nil
        )
        {
            self.token = token
        }
    }

}

extension DataSyncClientTypes {
    public enum AzureBlobType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case block
        case sdkUnknown(Swift.String)

        public static var allCases: [AzureBlobType] {
            return [
                .block,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .block: return "BLOCK"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AzureBlobType(rawValue: rawValue) ?? AzureBlobType.sdkUnknown(rawValue)
        }
    }
}

extension CancelTaskExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskExecutionArn = "TaskExecutionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let taskExecutionArn = self.taskExecutionArn {
            try encodeContainer.encode(taskExecutionArn, forKey: .taskExecutionArn)
        }
    }
}

extension CancelTaskExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// CancelTaskExecutionRequest
public struct CancelTaskExecutionInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the task execution to stop.
    /// This member is required.
    public var taskExecutionArn: Swift.String?

    public init(
        taskExecutionArn: Swift.String? = nil
    )
    {
        self.taskExecutionArn = taskExecutionArn
    }
}

struct CancelTaskExecutionInputBody: Swift.Equatable {
    let taskExecutionArn: Swift.String?
}

extension CancelTaskExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskExecutionArn = "TaskExecutionArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskExecutionArn)
        taskExecutionArn = taskExecutionArnDecoded
    }
}

public enum CancelTaskExecutionOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CancelTaskExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct CancelTaskExecutionOutputResponse: Swift.Equatable {

    public init() { }
}

extension DataSyncClientTypes.Capacity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterCloudStorageUsed = "ClusterCloudStorageUsed"
        case logicalUsed = "LogicalUsed"
        case provisioned = "Provisioned"
        case used = "Used"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterCloudStorageUsed = self.clusterCloudStorageUsed {
            try encodeContainer.encode(clusterCloudStorageUsed, forKey: .clusterCloudStorageUsed)
        }
        if let logicalUsed = self.logicalUsed {
            try encodeContainer.encode(logicalUsed, forKey: .logicalUsed)
        }
        if let provisioned = self.provisioned {
            try encodeContainer.encode(provisioned, forKey: .provisioned)
        }
        if let used = self.used {
            try encodeContainer.encode(used, forKey: .used)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .used)
        used = usedDecoded
        let provisionedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .provisioned)
        provisioned = provisionedDecoded
        let logicalUsedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .logicalUsed)
        logicalUsed = logicalUsedDecoded
        let clusterCloudStorageUsedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .clusterCloudStorageUsed)
        clusterCloudStorageUsed = clusterCloudStorageUsedDecoded
    }
}

extension DataSyncClientTypes {
    /// The storage capacity of an on-premises storage system resource (for example, a volume).
    public struct Capacity: Swift.Equatable {
        /// The amount of space in the cluster that's in cloud storage (for example, if you're using data tiering).
        public var clusterCloudStorageUsed: Swift.Int?
        /// The amount of space that's being used in a storage system resource without accounting for compression or deduplication.
        public var logicalUsed: Swift.Int?
        /// The total amount of space available in a storage system resource.
        public var provisioned: Swift.Int?
        /// The amount of space that's being used in a storage system resource.
        public var used: Swift.Int?

        public init(
            clusterCloudStorageUsed: Swift.Int? = nil,
            logicalUsed: Swift.Int? = nil,
            provisioned: Swift.Int? = nil,
            used: Swift.Int? = nil
        )
        {
            self.clusterCloudStorageUsed = clusterCloudStorageUsed
            self.logicalUsed = logicalUsed
            self.provisioned = provisioned
            self.used = used
        }
    }

}

extension CreateAgentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activationKey = "ActivationKey"
        case agentName = "AgentName"
        case securityGroupArns = "SecurityGroupArns"
        case subnetArns = "SubnetArns"
        case tags = "Tags"
        case vpcEndpointId = "VpcEndpointId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activationKey = self.activationKey {
            try encodeContainer.encode(activationKey, forKey: .activationKey)
        }
        if let agentName = self.agentName {
            try encodeContainer.encode(agentName, forKey: .agentName)
        }
        if let securityGroupArns = securityGroupArns {
            var securityGroupArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupArns)
            for ec2securitygrouparn0 in securityGroupArns {
                try securityGroupArnsContainer.encode(ec2securitygrouparn0)
            }
        }
        if let subnetArns = subnetArns {
            var subnetArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetArns)
            for ec2subnetarn0 in subnetArns {
                try subnetArnsContainer.encode(ec2subnetarn0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglistentry0 in tags {
                try tagsContainer.encode(taglistentry0)
            }
        }
        if let vpcEndpointId = self.vpcEndpointId {
            try encodeContainer.encode(vpcEndpointId, forKey: .vpcEndpointId)
        }
    }
}

extension CreateAgentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// CreateAgentRequest
public struct CreateAgentInput: Swift.Equatable {
    /// Specifies your DataSync agent's activation key. If you don't have an activation key, see [Activate your agent](https://docs.aws.amazon.com/datasync/latest/userguide/activate-agent.html).
    /// This member is required.
    public var activationKey: Swift.String?
    /// Specifies a name for your agent. You can see this name in the DataSync console.
    public var agentName: Swift.String?
    /// Specifies the Amazon Resource Name (ARN) of the security group that protects your task's [network interfaces](https://docs.aws.amazon.com/datasync/latest/userguide/datasync-network.html#required-network-interfaces) when [using a virtual private cloud (VPC) endpoint](https://docs.aws.amazon.com/datasync/latest/userguide/choose-service-endpoint.html#choose-service-endpoint-vpc). You can only specify one ARN.
    public var securityGroupArns: [Swift.String]?
    /// Specifies the ARN of the subnet where you want to run your DataSync task when using a VPC endpoint. This is the subnet where DataSync creates and manages the [network interfaces](https://docs.aws.amazon.com/datasync/latest/userguide/datasync-network.html#required-network-interfaces) for your transfer. You can only specify one ARN.
    public var subnetArns: [Swift.String]?
    /// Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least one tag for your agent.
    public var tags: [DataSyncClientTypes.TagListEntry]?
    /// Specifies the ID of the VPC endpoint that you want your agent to connect to. For example, a VPC endpoint ID looks like vpce-01234d5aff67890e1. The VPC endpoint you use must include the DataSync service name (for example, com.amazonaws.us-east-2.datasync).
    public var vpcEndpointId: Swift.String?

    public init(
        activationKey: Swift.String? = nil,
        agentName: Swift.String? = nil,
        securityGroupArns: [Swift.String]? = nil,
        subnetArns: [Swift.String]? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil,
        vpcEndpointId: Swift.String? = nil
    )
    {
        self.activationKey = activationKey
        self.agentName = agentName
        self.securityGroupArns = securityGroupArns
        self.subnetArns = subnetArns
        self.tags = tags
        self.vpcEndpointId = vpcEndpointId
    }
}

struct CreateAgentInputBody: Swift.Equatable {
    let activationKey: Swift.String?
    let agentName: Swift.String?
    let tags: [DataSyncClientTypes.TagListEntry]?
    let vpcEndpointId: Swift.String?
    let subnetArns: [Swift.String]?
    let securityGroupArns: [Swift.String]?
}

extension CreateAgentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activationKey = "ActivationKey"
        case agentName = "AgentName"
        case securityGroupArns = "SecurityGroupArns"
        case subnetArns = "SubnetArns"
        case tags = "Tags"
        case vpcEndpointId = "VpcEndpointId"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let activationKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activationKey)
        activationKey = activationKeyDecoded
        let agentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentName)
        agentName = agentNameDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let vpcEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointId)
        vpcEndpointId = vpcEndpointIdDecoded
        let subnetArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetArns)
        var subnetArnsDecoded0:[Swift.String]? = nil
        if let subnetArnsContainer = subnetArnsContainer {
            subnetArnsDecoded0 = [Swift.String]()
            for string0 in subnetArnsContainer {
                if let string0 = string0 {
                    subnetArnsDecoded0?.append(string0)
                }
            }
        }
        subnetArns = subnetArnsDecoded0
        let securityGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupArns)
        var securityGroupArnsDecoded0:[Swift.String]? = nil
        if let securityGroupArnsContainer = securityGroupArnsContainer {
            securityGroupArnsDecoded0 = [Swift.String]()
            for string0 in securityGroupArnsContainer {
                if let string0 = string0 {
                    securityGroupArnsDecoded0?.append(string0)
                }
            }
        }
        securityGroupArns = securityGroupArnsDecoded0
    }
}

public enum CreateAgentOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateAgentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateAgentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.agentArn = output.agentArn
        } else {
            self.agentArn = nil
        }
    }
}

/// CreateAgentResponse
public struct CreateAgentOutputResponse: Swift.Equatable {
    /// The ARN of the agent that you just activated. Use the [ListAgents](https://docs.aws.amazon.com/datasync/latest/userguide/API_ListAgents.html) operation to return a list of agents in your Amazon Web Services account and Amazon Web Services Region.
    public var agentArn: Swift.String?

    public init(
        agentArn: Swift.String? = nil
    )
    {
        self.agentArn = agentArn
    }
}

struct CreateAgentOutputResponseBody: Swift.Equatable {
    let agentArn: Swift.String?
}

extension CreateAgentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArn = "AgentArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentArn)
        agentArn = agentArnDecoded
    }
}

extension CreateLocationAzureBlobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessTier = "AccessTier"
        case agentArns = "AgentArns"
        case authenticationType = "AuthenticationType"
        case blobType = "BlobType"
        case containerUrl = "ContainerUrl"
        case sasConfiguration = "SasConfiguration"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessTier = self.accessTier {
            try encodeContainer.encode(accessTier.rawValue, forKey: .accessTier)
        }
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarn0 in agentArns {
                try agentArnsContainer.encode(agentarn0)
            }
        }
        if let authenticationType = self.authenticationType {
            try encodeContainer.encode(authenticationType.rawValue, forKey: .authenticationType)
        }
        if let blobType = self.blobType {
            try encodeContainer.encode(blobType.rawValue, forKey: .blobType)
        }
        if let containerUrl = self.containerUrl {
            try encodeContainer.encode(containerUrl, forKey: .containerUrl)
        }
        if let sasConfiguration = self.sasConfiguration {
            try encodeContainer.encode(sasConfiguration, forKey: .sasConfiguration)
        }
        if let subdirectory = self.subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglistentry0 in tags {
                try tagsContainer.encode(taglistentry0)
            }
        }
    }
}

extension CreateLocationAzureBlobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLocationAzureBlobInput: Swift.Equatable {
    /// Specifies the access tier that you want your objects or files transferred into. This only applies when using the location as a transfer destination. For more information, see [Access tiers](https://docs.aws.amazon.com/datasync/latest/userguide/creating-azure-blob-location.html#azure-blob-access-tiers).
    public var accessTier: DataSyncClientTypes.AzureAccessTier?
    /// Specifies the Amazon Resource Name (ARN) of the DataSync agent that can connect with your Azure Blob Storage container. You can specify more than one agent. For more information, see [Using multiple agents for your transfer](https://docs.aws.amazon.com/datasync/latest/userguide/multiple-agents.html).
    /// This member is required.
    public var agentArns: [Swift.String]?
    /// Specifies the authentication method DataSync uses to access your Azure Blob Storage. DataSync can access blob storage using a shared access signature (SAS).
    /// This member is required.
    public var authenticationType: DataSyncClientTypes.AzureBlobAuthenticationType?
    /// Specifies the type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Currently, DataSync only supports moving data into Azure Blob Storage as block blobs. For more information on blob types, see the [Azure Blob Storage documentation](https://learn.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs).
    public var blobType: DataSyncClientTypes.AzureBlobType?
    /// Specifies the URL of the Azure Blob Storage container involved in your transfer.
    /// This member is required.
    public var containerUrl: Swift.String?
    /// Specifies the SAS configuration that allows DataSync to access your Azure Blob Storage.
    public var sasConfiguration: DataSyncClientTypes.AzureBlobSasConfiguration?
    /// Specifies path segments if you want to limit your transfer to a virtual directory in your container (for example, /my/images).
    public var subdirectory: Swift.String?
    /// Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your transfer location.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init(
        accessTier: DataSyncClientTypes.AzureAccessTier? = nil,
        agentArns: [Swift.String]? = nil,
        authenticationType: DataSyncClientTypes.AzureBlobAuthenticationType? = nil,
        blobType: DataSyncClientTypes.AzureBlobType? = nil,
        containerUrl: Swift.String? = nil,
        sasConfiguration: DataSyncClientTypes.AzureBlobSasConfiguration? = nil,
        subdirectory: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.accessTier = accessTier
        self.agentArns = agentArns
        self.authenticationType = authenticationType
        self.blobType = blobType
        self.containerUrl = containerUrl
        self.sasConfiguration = sasConfiguration
        self.subdirectory = subdirectory
        self.tags = tags
    }
}

struct CreateLocationAzureBlobInputBody: Swift.Equatable {
    let containerUrl: Swift.String?
    let authenticationType: DataSyncClientTypes.AzureBlobAuthenticationType?
    let sasConfiguration: DataSyncClientTypes.AzureBlobSasConfiguration?
    let blobType: DataSyncClientTypes.AzureBlobType?
    let accessTier: DataSyncClientTypes.AzureAccessTier?
    let subdirectory: Swift.String?
    let agentArns: [Swift.String]?
    let tags: [DataSyncClientTypes.TagListEntry]?
}

extension CreateLocationAzureBlobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessTier = "AccessTier"
        case agentArns = "AgentArns"
        case authenticationType = "AuthenticationType"
        case blobType = "BlobType"
        case containerUrl = "ContainerUrl"
        case sasConfiguration = "SasConfiguration"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let containerUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .containerUrl)
        containerUrl = containerUrlDecoded
        let authenticationTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.AzureBlobAuthenticationType.self, forKey: .authenticationType)
        authenticationType = authenticationTypeDecoded
        let sasConfigurationDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.AzureBlobSasConfiguration.self, forKey: .sasConfiguration)
        sasConfiguration = sasConfigurationDecoded
        let blobTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.AzureBlobType.self, forKey: .blobType)
        blobType = blobTypeDecoded
        let accessTierDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.AzureAccessTier.self, forKey: .accessTier)
        accessTier = accessTierDecoded
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public enum CreateLocationAzureBlobOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateLocationAzureBlobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateLocationAzureBlobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locationArn = output.locationArn
        } else {
            self.locationArn = nil
        }
    }
}

public struct CreateLocationAzureBlobOutputResponse: Swift.Equatable {
    /// The ARN of the Azure Blob Storage transfer location that you created.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct CreateLocationAzureBlobOutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension CreateLocationAzureBlobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension CreateLocationEfsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPointArn = "AccessPointArn"
        case ec2Config = "Ec2Config"
        case efsFilesystemArn = "EfsFilesystemArn"
        case fileSystemAccessRoleArn = "FileSystemAccessRoleArn"
        case inTransitEncryption = "InTransitEncryption"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPointArn = self.accessPointArn {
            try encodeContainer.encode(accessPointArn, forKey: .accessPointArn)
        }
        if let ec2Config = self.ec2Config {
            try encodeContainer.encode(ec2Config, forKey: .ec2Config)
        }
        if let efsFilesystemArn = self.efsFilesystemArn {
            try encodeContainer.encode(efsFilesystemArn, forKey: .efsFilesystemArn)
        }
        if let fileSystemAccessRoleArn = self.fileSystemAccessRoleArn {
            try encodeContainer.encode(fileSystemAccessRoleArn, forKey: .fileSystemAccessRoleArn)
        }
        if let inTransitEncryption = self.inTransitEncryption {
            try encodeContainer.encode(inTransitEncryption.rawValue, forKey: .inTransitEncryption)
        }
        if let subdirectory = self.subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglistentry0 in tags {
                try tagsContainer.encode(taglistentry0)
            }
        }
    }
}

extension CreateLocationEfsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// CreateLocationEfsRequest
public struct CreateLocationEfsInput: Swift.Equatable {
    /// Specifies the Amazon Resource Name (ARN) of the access point that DataSync uses to access the Amazon EFS file system.
    public var accessPointArn: Swift.String?
    /// Specifies the subnet and security groups DataSync uses to access your Amazon EFS file system.
    /// This member is required.
    public var ec2Config: DataSyncClientTypes.Ec2Config?
    /// Specifies the ARN for the Amazon EFS file system.
    /// This member is required.
    public var efsFilesystemArn: Swift.String?
    /// Specifies an Identity and Access Management (IAM) role that DataSync assumes when mounting the Amazon EFS file system.
    public var fileSystemAccessRoleArn: Swift.String?
    /// Specifies whether you want DataSync to use Transport Layer Security (TLS) 1.2 encryption when it copies data to or from the Amazon EFS file system. If you specify an access point using AccessPointArn or an IAM role using FileSystemAccessRoleArn, you must set this parameter to TLS1_2.
    public var inTransitEncryption: DataSyncClientTypes.EfsInTransitEncryption?
    /// Specifies a mount path for your Amazon EFS file system. This is where DataSync reads or writes data (depending on if this is a source or destination location). By default, DataSync uses the root directory, but you can also include subdirectories. You must specify a value with forward slashes (for example, /path/to/folder).
    public var subdirectory: Swift.String?
    /// Specifies the key-value pair that represents a tag that you want to add to the resource. The value can be an empty string. This value helps you manage, filter, and search for your resources. We recommend that you create a name tag for your location.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init(
        accessPointArn: Swift.String? = nil,
        ec2Config: DataSyncClientTypes.Ec2Config? = nil,
        efsFilesystemArn: Swift.String? = nil,
        fileSystemAccessRoleArn: Swift.String? = nil,
        inTransitEncryption: DataSyncClientTypes.EfsInTransitEncryption? = nil,
        subdirectory: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.accessPointArn = accessPointArn
        self.ec2Config = ec2Config
        self.efsFilesystemArn = efsFilesystemArn
        self.fileSystemAccessRoleArn = fileSystemAccessRoleArn
        self.inTransitEncryption = inTransitEncryption
        self.subdirectory = subdirectory
        self.tags = tags
    }
}

struct CreateLocationEfsInputBody: Swift.Equatable {
    let subdirectory: Swift.String?
    let efsFilesystemArn: Swift.String?
    let ec2Config: DataSyncClientTypes.Ec2Config?
    let tags: [DataSyncClientTypes.TagListEntry]?
    let accessPointArn: Swift.String?
    let fileSystemAccessRoleArn: Swift.String?
    let inTransitEncryption: DataSyncClientTypes.EfsInTransitEncryption?
}

extension CreateLocationEfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPointArn = "AccessPointArn"
        case ec2Config = "Ec2Config"
        case efsFilesystemArn = "EfsFilesystemArn"
        case fileSystemAccessRoleArn = "FileSystemAccessRoleArn"
        case inTransitEncryption = "InTransitEncryption"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let efsFilesystemArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .efsFilesystemArn)
        efsFilesystemArn = efsFilesystemArnDecoded
        let ec2ConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Ec2Config.self, forKey: .ec2Config)
        ec2Config = ec2ConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let accessPointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPointArn)
        accessPointArn = accessPointArnDecoded
        let fileSystemAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemAccessRoleArn)
        fileSystemAccessRoleArn = fileSystemAccessRoleArnDecoded
        let inTransitEncryptionDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.EfsInTransitEncryption.self, forKey: .inTransitEncryption)
        inTransitEncryption = inTransitEncryptionDecoded
    }
}

public enum CreateLocationEfsOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateLocationEfsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateLocationEfsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locationArn = output.locationArn
        } else {
            self.locationArn = nil
        }
    }
}

/// CreateLocationEfs
public struct CreateLocationEfsOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the Amazon EFS file system location that you create.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct CreateLocationEfsOutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension CreateLocationEfsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension CreateLocationFsxLustreInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fsxFilesystemArn = "FsxFilesystemArn"
        case securityGroupArns = "SecurityGroupArns"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fsxFilesystemArn = self.fsxFilesystemArn {
            try encodeContainer.encode(fsxFilesystemArn, forKey: .fsxFilesystemArn)
        }
        if let securityGroupArns = securityGroupArns {
            var securityGroupArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupArns)
            for ec2securitygrouparn0 in securityGroupArns {
                try securityGroupArnsContainer.encode(ec2securitygrouparn0)
            }
        }
        if let subdirectory = self.subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglistentry0 in tags {
                try tagsContainer.encode(taglistentry0)
            }
        }
    }
}

extension CreateLocationFsxLustreInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLocationFsxLustreInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) for the FSx for Lustre file system.
    /// This member is required.
    public var fsxFilesystemArn: Swift.String?
    /// The Amazon Resource Names (ARNs) of the security groups that are used to configure the FSx for Lustre file system.
    /// This member is required.
    public var securityGroupArns: [Swift.String]?
    /// A subdirectory in the location's path. This subdirectory in the FSx for Lustre file system is used to read data from the FSx for Lustre source location or write data to the FSx for Lustre destination.
    public var subdirectory: Swift.String?
    /// The key-value pair that represents a tag that you want to add to the resource. The value can be an empty string. This value helps you manage, filter, and search for your resources. We recommend that you create a name tag for your location.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init(
        fsxFilesystemArn: Swift.String? = nil,
        securityGroupArns: [Swift.String]? = nil,
        subdirectory: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.fsxFilesystemArn = fsxFilesystemArn
        self.securityGroupArns = securityGroupArns
        self.subdirectory = subdirectory
        self.tags = tags
    }
}

struct CreateLocationFsxLustreInputBody: Swift.Equatable {
    let fsxFilesystemArn: Swift.String?
    let securityGroupArns: [Swift.String]?
    let subdirectory: Swift.String?
    let tags: [DataSyncClientTypes.TagListEntry]?
}

extension CreateLocationFsxLustreInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fsxFilesystemArn = "FsxFilesystemArn"
        case securityGroupArns = "SecurityGroupArns"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fsxFilesystemArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fsxFilesystemArn)
        fsxFilesystemArn = fsxFilesystemArnDecoded
        let securityGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupArns)
        var securityGroupArnsDecoded0:[Swift.String]? = nil
        if let securityGroupArnsContainer = securityGroupArnsContainer {
            securityGroupArnsDecoded0 = [Swift.String]()
            for string0 in securityGroupArnsContainer {
                if let string0 = string0 {
                    securityGroupArnsDecoded0?.append(string0)
                }
            }
        }
        securityGroupArns = securityGroupArnsDecoded0
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public enum CreateLocationFsxLustreOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateLocationFsxLustreOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateLocationFsxLustreOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locationArn = output.locationArn
        } else {
            self.locationArn = nil
        }
    }
}

public struct CreateLocationFsxLustreOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the FSx for Lustre file system location that's created.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct CreateLocationFsxLustreOutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension CreateLocationFsxLustreOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension CreateLocationFsxOntapInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `protocol` = "Protocol"
        case securityGroupArns = "SecurityGroupArns"
        case storageVirtualMachineArn = "StorageVirtualMachineArn"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`, forKey: .`protocol`)
        }
        if let securityGroupArns = securityGroupArns {
            var securityGroupArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupArns)
            for ec2securitygrouparn0 in securityGroupArns {
                try securityGroupArnsContainer.encode(ec2securitygrouparn0)
            }
        }
        if let storageVirtualMachineArn = self.storageVirtualMachineArn {
            try encodeContainer.encode(storageVirtualMachineArn, forKey: .storageVirtualMachineArn)
        }
        if let subdirectory = self.subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglistentry0 in tags {
                try tagsContainer.encode(taglistentry0)
            }
        }
    }
}

extension CreateLocationFsxOntapInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLocationFsxOntapInput: Swift.Equatable {
    /// Specifies the data transfer protocol that DataSync uses to access your Amazon FSx file system.
    /// This member is required.
    public var `protocol`: DataSyncClientTypes.FsxProtocol?
    /// Specifies the Amazon EC2 security groups that provide access to your file system's preferred subnet. The security groups must allow outbound traffic on the following ports (depending on the protocol you use):
    ///
    /// * Network File System (NFS): TCP ports 111, 635, and 2049
    ///
    /// * Server Message Block (SMB): TCP port 445
    ///
    ///
    /// Your file system's security groups must also allow inbound traffic on the same ports.
    /// This member is required.
    public var securityGroupArns: [Swift.String]?
    /// Specifies the ARN of the storage virtual machine (SVM) in your file system where you want to copy data to or from.
    /// This member is required.
    public var storageVirtualMachineArn: Swift.String?
    /// Specifies a path to the file share in the SVM where you'll copy your data. You can specify a junction path (also known as a mount point), qtree path (for NFS file shares), or share name (for SMB file shares). For example, your mount path might be /vol1, /vol1/tree1, or /share1. Don't specify a junction path in the SVM's root volume. For more information, see [Managing FSx for ONTAP storage virtual machines](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-svms.html) in the Amazon FSx for NetApp ONTAP User Guide.
    public var subdirectory: Swift.String?
    /// Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your location.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init(
        `protocol`: DataSyncClientTypes.FsxProtocol? = nil,
        securityGroupArns: [Swift.String]? = nil,
        storageVirtualMachineArn: Swift.String? = nil,
        subdirectory: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.`protocol` = `protocol`
        self.securityGroupArns = securityGroupArns
        self.storageVirtualMachineArn = storageVirtualMachineArn
        self.subdirectory = subdirectory
        self.tags = tags
    }
}

struct CreateLocationFsxOntapInputBody: Swift.Equatable {
    let `protocol`: DataSyncClientTypes.FsxProtocol?
    let securityGroupArns: [Swift.String]?
    let storageVirtualMachineArn: Swift.String?
    let subdirectory: Swift.String?
    let tags: [DataSyncClientTypes.TagListEntry]?
}

extension CreateLocationFsxOntapInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case `protocol` = "Protocol"
        case securityGroupArns = "SecurityGroupArns"
        case storageVirtualMachineArn = "StorageVirtualMachineArn"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protocolDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.FsxProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let securityGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupArns)
        var securityGroupArnsDecoded0:[Swift.String]? = nil
        if let securityGroupArnsContainer = securityGroupArnsContainer {
            securityGroupArnsDecoded0 = [Swift.String]()
            for string0 in securityGroupArnsContainer {
                if let string0 = string0 {
                    securityGroupArnsDecoded0?.append(string0)
                }
            }
        }
        securityGroupArns = securityGroupArnsDecoded0
        let storageVirtualMachineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageVirtualMachineArn)
        storageVirtualMachineArn = storageVirtualMachineArnDecoded
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public enum CreateLocationFsxOntapOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateLocationFsxOntapOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateLocationFsxOntapOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locationArn = output.locationArn
        } else {
            self.locationArn = nil
        }
    }
}

public struct CreateLocationFsxOntapOutputResponse: Swift.Equatable {
    /// Specifies the ARN of the FSx for ONTAP file system location that you create.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct CreateLocationFsxOntapOutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension CreateLocationFsxOntapOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension CreateLocationFsxOpenZfsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fsxFilesystemArn = "FsxFilesystemArn"
        case `protocol` = "Protocol"
        case securityGroupArns = "SecurityGroupArns"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let fsxFilesystemArn = self.fsxFilesystemArn {
            try encodeContainer.encode(fsxFilesystemArn, forKey: .fsxFilesystemArn)
        }
        if let `protocol` = self.`protocol` {
            try encodeContainer.encode(`protocol`, forKey: .`protocol`)
        }
        if let securityGroupArns = securityGroupArns {
            var securityGroupArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupArns)
            for ec2securitygrouparn0 in securityGroupArns {
                try securityGroupArnsContainer.encode(ec2securitygrouparn0)
            }
        }
        if let subdirectory = self.subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglistentry0 in tags {
                try tagsContainer.encode(taglistentry0)
            }
        }
    }
}

extension CreateLocationFsxOpenZfsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLocationFsxOpenZfsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the FSx for OpenZFS file system.
    /// This member is required.
    public var fsxFilesystemArn: Swift.String?
    /// The type of protocol that DataSync uses to access your file system.
    /// This member is required.
    public var `protocol`: DataSyncClientTypes.FsxProtocol?
    /// The ARNs of the security groups that are used to configure the FSx for OpenZFS file system.
    /// This member is required.
    public var securityGroupArns: [Swift.String]?
    /// A subdirectory in the location's path that must begin with /fsx. DataSync uses this subdirectory to read or write data (depending on whether the file system is a source or destination location).
    public var subdirectory: Swift.String?
    /// The key-value pair that represents a tag that you want to add to the resource. The value can be an empty string. This value helps you manage, filter, and search for your resources. We recommend that you create a name tag for your location.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init(
        fsxFilesystemArn: Swift.String? = nil,
        `protocol`: DataSyncClientTypes.FsxProtocol? = nil,
        securityGroupArns: [Swift.String]? = nil,
        subdirectory: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.fsxFilesystemArn = fsxFilesystemArn
        self.`protocol` = `protocol`
        self.securityGroupArns = securityGroupArns
        self.subdirectory = subdirectory
        self.tags = tags
    }
}

struct CreateLocationFsxOpenZfsInputBody: Swift.Equatable {
    let fsxFilesystemArn: Swift.String?
    let `protocol`: DataSyncClientTypes.FsxProtocol?
    let securityGroupArns: [Swift.String]?
    let subdirectory: Swift.String?
    let tags: [DataSyncClientTypes.TagListEntry]?
}

extension CreateLocationFsxOpenZfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fsxFilesystemArn = "FsxFilesystemArn"
        case `protocol` = "Protocol"
        case securityGroupArns = "SecurityGroupArns"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fsxFilesystemArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fsxFilesystemArn)
        fsxFilesystemArn = fsxFilesystemArnDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.FsxProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let securityGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupArns)
        var securityGroupArnsDecoded0:[Swift.String]? = nil
        if let securityGroupArnsContainer = securityGroupArnsContainer {
            securityGroupArnsDecoded0 = [Swift.String]()
            for string0 in securityGroupArnsContainer {
                if let string0 = string0 {
                    securityGroupArnsDecoded0?.append(string0)
                }
            }
        }
        securityGroupArns = securityGroupArnsDecoded0
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public enum CreateLocationFsxOpenZfsOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateLocationFsxOpenZfsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateLocationFsxOpenZfsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locationArn = output.locationArn
        } else {
            self.locationArn = nil
        }
    }
}

public struct CreateLocationFsxOpenZfsOutputResponse: Swift.Equatable {
    /// The ARN of the FSx for OpenZFS file system location that you created.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct CreateLocationFsxOpenZfsOutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension CreateLocationFsxOpenZfsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension CreateLocationFsxWindowsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLocationFsxWindowsInput(domain: \(Swift.String(describing: domain)), fsxFilesystemArn: \(Swift.String(describing: fsxFilesystemArn)), securityGroupArns: \(Swift.String(describing: securityGroupArns)), subdirectory: \(Swift.String(describing: subdirectory)), tags: \(Swift.String(describing: tags)), user: \(Swift.String(describing: user)), password: \"CONTENT_REDACTED\")"}
}

extension CreateLocationFsxWindowsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
        case fsxFilesystemArn = "FsxFilesystemArn"
        case password = "Password"
        case securityGroupArns = "SecurityGroupArns"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
        case user = "User"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let fsxFilesystemArn = self.fsxFilesystemArn {
            try encodeContainer.encode(fsxFilesystemArn, forKey: .fsxFilesystemArn)
        }
        if let password = self.password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let securityGroupArns = securityGroupArns {
            var securityGroupArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupArns)
            for ec2securitygrouparn0 in securityGroupArns {
                try securityGroupArnsContainer.encode(ec2securitygrouparn0)
            }
        }
        if let subdirectory = self.subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglistentry0 in tags {
                try tagsContainer.encode(taglistentry0)
            }
        }
        if let user = self.user {
            try encodeContainer.encode(user, forKey: .user)
        }
    }
}

extension CreateLocationFsxWindowsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLocationFsxWindowsInput: Swift.Equatable {
    /// Specifies the name of the Windows domain that the FSx for Windows File Server belongs to.
    public var domain: Swift.String?
    /// Specifies the Amazon Resource Name (ARN) for the FSx for Windows File Server file system.
    /// This member is required.
    public var fsxFilesystemArn: Swift.String?
    /// Specifies the password of the user who has the permissions to access files and folders in the file system.
    /// This member is required.
    public var password: Swift.String?
    /// Specifies the ARNs of the security groups that provide access to your file system's preferred subnet. If you choose a security group that doesn't allow connections from within itself, do one of the following:
    ///
    /// * Configure the security group to allow it to communicate within itself.
    ///
    /// * Choose a different security group that can communicate with the mount target's security group.
    /// This member is required.
    public var securityGroupArns: [Swift.String]?
    /// Specifies a mount path for your file system using forward slashes. This is where DataSync reads or writes data (depending on if this is a source or destination location).
    public var subdirectory: Swift.String?
    /// Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your location.
    public var tags: [DataSyncClientTypes.TagListEntry]?
    /// Specifies the user who has the permissions to access files, folders, and metadata in your file system. For information about choosing a user with sufficient permissions, see [Required permissions](https://docs.aws.amazon.com/datasync/latest/userguide/create-fsx-location.html#create-fsx-windows-location-permissions).
    /// This member is required.
    public var user: Swift.String?

    public init(
        domain: Swift.String? = nil,
        fsxFilesystemArn: Swift.String? = nil,
        password: Swift.String? = nil,
        securityGroupArns: [Swift.String]? = nil,
        subdirectory: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil,
        user: Swift.String? = nil
    )
    {
        self.domain = domain
        self.fsxFilesystemArn = fsxFilesystemArn
        self.password = password
        self.securityGroupArns = securityGroupArns
        self.subdirectory = subdirectory
        self.tags = tags
        self.user = user
    }
}

struct CreateLocationFsxWindowsInputBody: Swift.Equatable {
    let subdirectory: Swift.String?
    let fsxFilesystemArn: Swift.String?
    let securityGroupArns: [Swift.String]?
    let tags: [DataSyncClientTypes.TagListEntry]?
    let user: Swift.String?
    let domain: Swift.String?
    let password: Swift.String?
}

extension CreateLocationFsxWindowsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
        case fsxFilesystemArn = "FsxFilesystemArn"
        case password = "Password"
        case securityGroupArns = "SecurityGroupArns"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
        case user = "User"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let fsxFilesystemArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fsxFilesystemArn)
        fsxFilesystemArn = fsxFilesystemArnDecoded
        let securityGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupArns)
        var securityGroupArnsDecoded0:[Swift.String]? = nil
        if let securityGroupArnsContainer = securityGroupArnsContainer {
            securityGroupArnsDecoded0 = [Swift.String]()
            for string0 in securityGroupArnsContainer {
                if let string0 = string0 {
                    securityGroupArnsDecoded0?.append(string0)
                }
            }
        }
        securityGroupArns = securityGroupArnsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let userDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .user)
        user = userDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
    }
}

public enum CreateLocationFsxWindowsOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateLocationFsxWindowsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateLocationFsxWindowsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locationArn = output.locationArn
        } else {
            self.locationArn = nil
        }
    }
}

public struct CreateLocationFsxWindowsOutputResponse: Swift.Equatable {
    /// The ARN of the FSx for Windows File Server file system location you created.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct CreateLocationFsxWindowsOutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension CreateLocationFsxWindowsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension CreateLocationHdfsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case authenticationType = "AuthenticationType"
        case blockSize = "BlockSize"
        case kerberosKeytab = "KerberosKeytab"
        case kerberosKrb5Conf = "KerberosKrb5Conf"
        case kerberosPrincipal = "KerberosPrincipal"
        case kmsKeyProviderUri = "KmsKeyProviderUri"
        case nameNodes = "NameNodes"
        case qopConfiguration = "QopConfiguration"
        case replicationFactor = "ReplicationFactor"
        case simpleUser = "SimpleUser"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarn0 in agentArns {
                try agentArnsContainer.encode(agentarn0)
            }
        }
        if let authenticationType = self.authenticationType {
            try encodeContainer.encode(authenticationType.rawValue, forKey: .authenticationType)
        }
        if let blockSize = self.blockSize {
            try encodeContainer.encode(blockSize, forKey: .blockSize)
        }
        if let kerberosKeytab = self.kerberosKeytab {
            try encodeContainer.encode(kerberosKeytab.base64EncodedString(), forKey: .kerberosKeytab)
        }
        if let kerberosKrb5Conf = self.kerberosKrb5Conf {
            try encodeContainer.encode(kerberosKrb5Conf.base64EncodedString(), forKey: .kerberosKrb5Conf)
        }
        if let kerberosPrincipal = self.kerberosPrincipal {
            try encodeContainer.encode(kerberosPrincipal, forKey: .kerberosPrincipal)
        }
        if let kmsKeyProviderUri = self.kmsKeyProviderUri {
            try encodeContainer.encode(kmsKeyProviderUri, forKey: .kmsKeyProviderUri)
        }
        if let nameNodes = nameNodes {
            var nameNodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nameNodes)
            for hdfsnamenode0 in nameNodes {
                try nameNodesContainer.encode(hdfsnamenode0)
            }
        }
        if let qopConfiguration = self.qopConfiguration {
            try encodeContainer.encode(qopConfiguration, forKey: .qopConfiguration)
        }
        if let replicationFactor = self.replicationFactor {
            try encodeContainer.encode(replicationFactor, forKey: .replicationFactor)
        }
        if let simpleUser = self.simpleUser {
            try encodeContainer.encode(simpleUser, forKey: .simpleUser)
        }
        if let subdirectory = self.subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglistentry0 in tags {
                try tagsContainer.encode(taglistentry0)
            }
        }
    }
}

extension CreateLocationHdfsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateLocationHdfsInput: Swift.Equatable {
    /// The Amazon Resource Names (ARNs) of the agents that are used to connect to the HDFS cluster.
    /// This member is required.
    public var agentArns: [Swift.String]?
    /// The type of authentication used to determine the identity of the user.
    /// This member is required.
    public var authenticationType: DataSyncClientTypes.HdfsAuthenticationType?
    /// The size of data blocks to write into the HDFS cluster. The block size must be a multiple of 512 bytes. The default block size is 128 mebibytes (MiB).
    public var blockSize: Swift.Int?
    /// The Kerberos key table (keytab) that contains mappings between the defined Kerberos principal and the encrypted keys. You can load the keytab from a file by providing the file's address. If you're using the CLI, it performs base64 encoding for you. Otherwise, provide the base64-encoded text. If KERBEROS is specified for AuthenticationType, this parameter is required.
    public var kerberosKeytab: ClientRuntime.Data?
    /// The krb5.conf file that contains the Kerberos configuration information. You can load the krb5.conf file by providing the file's address. If you're using the CLI, it performs the base64 encoding for you. Otherwise, provide the base64-encoded text. If KERBEROS is specified for AuthenticationType, this parameter is required.
    public var kerberosKrb5Conf: ClientRuntime.Data?
    /// The Kerberos principal with access to the files and folders on the HDFS cluster. If KERBEROS is specified for AuthenticationType, this parameter is required.
    public var kerberosPrincipal: Swift.String?
    /// The URI of the HDFS cluster's Key Management Server (KMS).
    public var kmsKeyProviderUri: Swift.String?
    /// The NameNode that manages the HDFS namespace. The NameNode performs operations such as opening, closing, and renaming files and directories. The NameNode contains the information to map blocks of data to the DataNodes. You can use only one NameNode.
    /// This member is required.
    public var nameNodes: [DataSyncClientTypes.HdfsNameNode]?
    /// The Quality of Protection (QOP) configuration specifies the Remote Procedure Call (RPC) and data transfer protection settings configured on the Hadoop Distributed File System (HDFS) cluster. If QopConfiguration isn't specified, RpcProtection and DataTransferProtection default to PRIVACY. If you set RpcProtection or DataTransferProtection, the other parameter assumes the same value.
    public var qopConfiguration: DataSyncClientTypes.QopConfiguration?
    /// The number of DataNodes to replicate the data to when writing to the HDFS cluster. By default, data is replicated to three DataNodes.
    public var replicationFactor: Swift.Int?
    /// The user name used to identify the client on the host operating system. If SIMPLE is specified for AuthenticationType, this parameter is required.
    public var simpleUser: Swift.String?
    /// A subdirectory in the HDFS cluster. This subdirectory is used to read data from or write data to the HDFS cluster. If the subdirectory isn't specified, it will default to /.
    public var subdirectory: Swift.String?
    /// The key-value pair that represents the tag that you want to add to the location. The value can be an empty string. We recommend using tags to name your resources.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init(
        agentArns: [Swift.String]? = nil,
        authenticationType: DataSyncClientTypes.HdfsAuthenticationType? = nil,
        blockSize: Swift.Int? = nil,
        kerberosKeytab: ClientRuntime.Data? = nil,
        kerberosKrb5Conf: ClientRuntime.Data? = nil,
        kerberosPrincipal: Swift.String? = nil,
        kmsKeyProviderUri: Swift.String? = nil,
        nameNodes: [DataSyncClientTypes.HdfsNameNode]? = nil,
        qopConfiguration: DataSyncClientTypes.QopConfiguration? = nil,
        replicationFactor: Swift.Int? = nil,
        simpleUser: Swift.String? = nil,
        subdirectory: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.agentArns = agentArns
        self.authenticationType = authenticationType
        self.blockSize = blockSize
        self.kerberosKeytab = kerberosKeytab
        self.kerberosKrb5Conf = kerberosKrb5Conf
        self.kerberosPrincipal = kerberosPrincipal
        self.kmsKeyProviderUri = kmsKeyProviderUri
        self.nameNodes = nameNodes
        self.qopConfiguration = qopConfiguration
        self.replicationFactor = replicationFactor
        self.simpleUser = simpleUser
        self.subdirectory = subdirectory
        self.tags = tags
    }
}

struct CreateLocationHdfsInputBody: Swift.Equatable {
    let subdirectory: Swift.String?
    let nameNodes: [DataSyncClientTypes.HdfsNameNode]?
    let blockSize: Swift.Int?
    let replicationFactor: Swift.Int?
    let kmsKeyProviderUri: Swift.String?
    let qopConfiguration: DataSyncClientTypes.QopConfiguration?
    let authenticationType: DataSyncClientTypes.HdfsAuthenticationType?
    let simpleUser: Swift.String?
    let kerberosPrincipal: Swift.String?
    let kerberosKeytab: ClientRuntime.Data?
    let kerberosKrb5Conf: ClientRuntime.Data?
    let agentArns: [Swift.String]?
    let tags: [DataSyncClientTypes.TagListEntry]?
}

extension CreateLocationHdfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case authenticationType = "AuthenticationType"
        case blockSize = "BlockSize"
        case kerberosKeytab = "KerberosKeytab"
        case kerberosKrb5Conf = "KerberosKrb5Conf"
        case kerberosPrincipal = "KerberosPrincipal"
        case kmsKeyProviderUri = "KmsKeyProviderUri"
        case nameNodes = "NameNodes"
        case qopConfiguration = "QopConfiguration"
        case replicationFactor = "ReplicationFactor"
        case simpleUser = "SimpleUser"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let nameNodesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.HdfsNameNode?].self, forKey: .nameNodes)
        var nameNodesDecoded0:[DataSyncClientTypes.HdfsNameNode]? = nil
        if let nameNodesContainer = nameNodesContainer {
            nameNodesDecoded0 = [DataSyncClientTypes.HdfsNameNode]()
            for structure0 in nameNodesContainer {
                if let structure0 = structure0 {
                    nameNodesDecoded0?.append(structure0)
                }
            }
        }
        nameNodes = nameNodesDecoded0
        let blockSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .blockSize)
        blockSize = blockSizeDecoded
        let replicationFactorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .replicationFactor)
        replicationFactor = replicationFactorDecoded
        let kmsKeyProviderUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyProviderUri)
        kmsKeyProviderUri = kmsKeyProviderUriDecoded
        let qopConfigurationDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.QopConfiguration.self, forKey: .qopConfiguration)
        qopConfiguration = qopConfigurationDecoded
        let authenticationTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.HdfsAuthenticationType.self, forKey: .authenticationType)
        authenticationType = authenticationTypeDecoded
        let simpleUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .simpleUser)
        simpleUser = simpleUserDecoded
        let kerberosPrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kerberosPrincipal)
        kerberosPrincipal = kerberosPrincipalDecoded
        let kerberosKeytabDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .kerberosKeytab)
        kerberosKeytab = kerberosKeytabDecoded
        let kerberosKrb5ConfDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .kerberosKrb5Conf)
        kerberosKrb5Conf = kerberosKrb5ConfDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public enum CreateLocationHdfsOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateLocationHdfsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateLocationHdfsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locationArn = output.locationArn
        } else {
            self.locationArn = nil
        }
    }
}

public struct CreateLocationHdfsOutputResponse: Swift.Equatable {
    /// The ARN of the source HDFS cluster location that's created.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct CreateLocationHdfsOutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension CreateLocationHdfsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension CreateLocationNfsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mountOptions = "MountOptions"
        case onPremConfig = "OnPremConfig"
        case serverHostname = "ServerHostname"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mountOptions = self.mountOptions {
            try encodeContainer.encode(mountOptions, forKey: .mountOptions)
        }
        if let onPremConfig = self.onPremConfig {
            try encodeContainer.encode(onPremConfig, forKey: .onPremConfig)
        }
        if let serverHostname = self.serverHostname {
            try encodeContainer.encode(serverHostname, forKey: .serverHostname)
        }
        if let subdirectory = self.subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglistentry0 in tags {
                try tagsContainer.encode(taglistentry0)
            }
        }
    }
}

extension CreateLocationNfsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// CreateLocationNfsRequest
public struct CreateLocationNfsInput: Swift.Equatable {
    /// Specifies the options that DataSync can use to mount your NFS file server.
    public var mountOptions: DataSyncClientTypes.NfsMountOptions?
    /// Specifies the Amazon Resource Name (ARN) of the DataSync agent that want to connect to your NFS file server. You can specify more than one agent. For more information, see [Using multiple agents for transfers](https://docs.aws.amazon.com/datasync/latest/userguide/multiple-agents.html).
    /// This member is required.
    public var onPremConfig: DataSyncClientTypes.OnPremConfig?
    /// Specifies the Domain Name System (DNS) name or IP version 4 address of the NFS file server that your DataSync agent connects to.
    /// This member is required.
    public var serverHostname: Swift.String?
    /// Specifies the export path in your NFS file server that you want DataSync to mount. This path (or a subdirectory of the path) is where DataSync transfers data to or from. For information on configuring an export for DataSync, see [Accessing NFS file servers](https://docs.aws.amazon.com/datasync/latest/userguide/create-nfs-location.html#accessing-nfs).
    /// This member is required.
    public var subdirectory: Swift.String?
    /// Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your location.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init(
        mountOptions: DataSyncClientTypes.NfsMountOptions? = nil,
        onPremConfig: DataSyncClientTypes.OnPremConfig? = nil,
        serverHostname: Swift.String? = nil,
        subdirectory: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.mountOptions = mountOptions
        self.onPremConfig = onPremConfig
        self.serverHostname = serverHostname
        self.subdirectory = subdirectory
        self.tags = tags
    }
}

struct CreateLocationNfsInputBody: Swift.Equatable {
    let subdirectory: Swift.String?
    let serverHostname: Swift.String?
    let onPremConfig: DataSyncClientTypes.OnPremConfig?
    let mountOptions: DataSyncClientTypes.NfsMountOptions?
    let tags: [DataSyncClientTypes.TagListEntry]?
}

extension CreateLocationNfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mountOptions = "MountOptions"
        case onPremConfig = "OnPremConfig"
        case serverHostname = "ServerHostname"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let serverHostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverHostname)
        serverHostname = serverHostnameDecoded
        let onPremConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.OnPremConfig.self, forKey: .onPremConfig)
        onPremConfig = onPremConfigDecoded
        let mountOptionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.NfsMountOptions.self, forKey: .mountOptions)
        mountOptions = mountOptionsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public enum CreateLocationNfsOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateLocationNfsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateLocationNfsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locationArn = output.locationArn
        } else {
            self.locationArn = nil
        }
    }
}

/// CreateLocationNfsResponse
public struct CreateLocationNfsOutputResponse: Swift.Equatable {
    /// The ARN of the transfer location that you created for your NFS file server.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct CreateLocationNfsOutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension CreateLocationNfsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension CreateLocationObjectStorageInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLocationObjectStorageInput(accessKey: \(Swift.String(describing: accessKey)), agentArns: \(Swift.String(describing: agentArns)), bucketName: \(Swift.String(describing: bucketName)), serverCertificate: \(Swift.String(describing: serverCertificate)), serverHostname: \(Swift.String(describing: serverHostname)), serverPort: \(Swift.String(describing: serverPort)), serverProtocol: \(Swift.String(describing: serverProtocol)), subdirectory: \(Swift.String(describing: subdirectory)), tags: \(Swift.String(describing: tags)), secretKey: \"CONTENT_REDACTED\")"}
}

extension CreateLocationObjectStorageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKey = "AccessKey"
        case agentArns = "AgentArns"
        case bucketName = "BucketName"
        case secretKey = "SecretKey"
        case serverCertificate = "ServerCertificate"
        case serverHostname = "ServerHostname"
        case serverPort = "ServerPort"
        case serverProtocol = "ServerProtocol"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessKey = self.accessKey {
            try encodeContainer.encode(accessKey, forKey: .accessKey)
        }
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarn0 in agentArns {
                try agentArnsContainer.encode(agentarn0)
            }
        }
        if let bucketName = self.bucketName {
            try encodeContainer.encode(bucketName, forKey: .bucketName)
        }
        if let secretKey = self.secretKey {
            try encodeContainer.encode(secretKey, forKey: .secretKey)
        }
        if let serverCertificate = self.serverCertificate {
            try encodeContainer.encode(serverCertificate.base64EncodedString(), forKey: .serverCertificate)
        }
        if let serverHostname = self.serverHostname {
            try encodeContainer.encode(serverHostname, forKey: .serverHostname)
        }
        if let serverPort = self.serverPort {
            try encodeContainer.encode(serverPort, forKey: .serverPort)
        }
        if let serverProtocol = self.serverProtocol {
            try encodeContainer.encode(serverProtocol.rawValue, forKey: .serverProtocol)
        }
        if let subdirectory = self.subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglistentry0 in tags {
                try tagsContainer.encode(taglistentry0)
            }
        }
    }
}

extension CreateLocationObjectStorageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// CreateLocationObjectStorageRequest
public struct CreateLocationObjectStorageInput: Swift.Equatable {
    /// Specifies the access key (for example, a user name) if credentials are required to authenticate with the object storage server.
    public var accessKey: Swift.String?
    /// Specifies the Amazon Resource Names (ARNs) of the DataSync agents that can securely connect with your location.
    /// This member is required.
    public var agentArns: [Swift.String]?
    /// Specifies the name of the object storage bucket involved in the transfer.
    /// This member is required.
    public var bucketName: Swift.String?
    /// Specifies the secret key (for example, a password) if credentials are required to authenticate with the object storage server.
    public var secretKey: Swift.String?
    /// Specifies a file with the certificates that are used to sign the object storage server's certificate (for example, file:///home/user/.ssh/storage_sys_certificate.pem). The file you specify must include the following:
    ///
    /// * The certificate of the signing certificate authority (CA)
    ///
    /// * Any intermediate certificates
    ///
    /// * base64 encoding
    ///
    /// * A .pem extension
    ///
    ///
    /// The file can be up to 32768 bytes (before base64 encoding). To use this parameter, configure ServerProtocol to HTTPS.
    public var serverCertificate: ClientRuntime.Data?
    /// Specifies the domain name or IP address of the object storage server. A DataSync agent uses this hostname to mount the object storage server in a network.
    /// This member is required.
    public var serverHostname: Swift.String?
    /// Specifies the port that your object storage server accepts inbound network traffic on (for example, port 443).
    public var serverPort: Swift.Int?
    /// Specifies the protocol that your object storage server uses to communicate.
    public var serverProtocol: DataSyncClientTypes.ObjectStorageServerProtocol?
    /// Specifies the object prefix for your object storage server. If this is a source location, DataSync only copies objects with this prefix. If this is a destination location, DataSync writes all objects with this prefix.
    public var subdirectory: Swift.String?
    /// Specifies the key-value pair that represents a tag that you want to add to the resource. Tags can help you manage, filter, and search for your resources. We recommend creating a name tag for your location.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init(
        accessKey: Swift.String? = nil,
        agentArns: [Swift.String]? = nil,
        bucketName: Swift.String? = nil,
        secretKey: Swift.String? = nil,
        serverCertificate: ClientRuntime.Data? = nil,
        serverHostname: Swift.String? = nil,
        serverPort: Swift.Int? = nil,
        serverProtocol: DataSyncClientTypes.ObjectStorageServerProtocol? = nil,
        subdirectory: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.accessKey = accessKey
        self.agentArns = agentArns
        self.bucketName = bucketName
        self.secretKey = secretKey
        self.serverCertificate = serverCertificate
        self.serverHostname = serverHostname
        self.serverPort = serverPort
        self.serverProtocol = serverProtocol
        self.subdirectory = subdirectory
        self.tags = tags
    }
}

struct CreateLocationObjectStorageInputBody: Swift.Equatable {
    let serverHostname: Swift.String?
    let serverPort: Swift.Int?
    let serverProtocol: DataSyncClientTypes.ObjectStorageServerProtocol?
    let subdirectory: Swift.String?
    let bucketName: Swift.String?
    let accessKey: Swift.String?
    let secretKey: Swift.String?
    let agentArns: [Swift.String]?
    let tags: [DataSyncClientTypes.TagListEntry]?
    let serverCertificate: ClientRuntime.Data?
}

extension CreateLocationObjectStorageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKey = "AccessKey"
        case agentArns = "AgentArns"
        case bucketName = "BucketName"
        case secretKey = "SecretKey"
        case serverCertificate = "ServerCertificate"
        case serverHostname = "ServerHostname"
        case serverPort = "ServerPort"
        case serverProtocol = "ServerProtocol"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverHostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverHostname)
        serverHostname = serverHostnameDecoded
        let serverPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .serverPort)
        serverPort = serverPortDecoded
        let serverProtocolDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ObjectStorageServerProtocol.self, forKey: .serverProtocol)
        serverProtocol = serverProtocolDecoded
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let bucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketName)
        bucketName = bucketNameDecoded
        let accessKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessKey)
        accessKey = accessKeyDecoded
        let secretKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretKey)
        secretKey = secretKeyDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let serverCertificateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .serverCertificate)
        serverCertificate = serverCertificateDecoded
    }
}

public enum CreateLocationObjectStorageOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateLocationObjectStorageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateLocationObjectStorageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locationArn = output.locationArn
        } else {
            self.locationArn = nil
        }
    }
}

/// CreateLocationObjectStorageResponse
public struct CreateLocationObjectStorageOutputResponse: Swift.Equatable {
    /// Specifies the ARN of the object storage system location that you create.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct CreateLocationObjectStorageOutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension CreateLocationObjectStorageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension CreateLocationS3Input: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case s3BucketArn = "S3BucketArn"
        case s3Config = "S3Config"
        case s3StorageClass = "S3StorageClass"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarn0 in agentArns {
                try agentArnsContainer.encode(agentarn0)
            }
        }
        if let s3BucketArn = self.s3BucketArn {
            try encodeContainer.encode(s3BucketArn, forKey: .s3BucketArn)
        }
        if let s3Config = self.s3Config {
            try encodeContainer.encode(s3Config, forKey: .s3Config)
        }
        if let s3StorageClass = self.s3StorageClass {
            try encodeContainer.encode(s3StorageClass.rawValue, forKey: .s3StorageClass)
        }
        if let subdirectory = self.subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglistentry0 in tags {
                try tagsContainer.encode(taglistentry0)
            }
        }
    }
}

extension CreateLocationS3Input: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// CreateLocationS3Request
public struct CreateLocationS3Input: Swift.Equatable {
    /// If you're using DataSync on an Amazon Web Services Outpost, specify the Amazon Resource Names (ARNs) of the DataSync agents deployed on your Outpost. For more information about launching a DataSync agent on an Amazon Web Services Outpost, see [Deploy your DataSync agent on Outposts](https://docs.aws.amazon.com/datasync/latest/userguide/deploy-agents.html#outposts-agent).
    public var agentArns: [Swift.String]?
    /// The ARN of the Amazon S3 bucket. If the bucket is on an Amazon Web Services Outpost, this must be an access point ARN.
    /// This member is required.
    public var s3BucketArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role used to access an Amazon S3 bucket. For detailed information about using such a role, see Creating a Location for Amazon S3 in the DataSync User Guide.
    /// This member is required.
    public var s3Config: DataSyncClientTypes.S3Config?
    /// The Amazon S3 storage class that you want to store your files in when this location is used as a task destination. For buckets in Amazon Web Services Regions, the storage class defaults to Standard. For buckets on Outposts, the storage class defaults to Amazon Web Services S3 Outposts. For more information about S3 storage classes, see [Amazon S3 Storage Classes](http://aws.amazon.com/s3/storage-classes/). Some storage classes have behaviors that can affect your S3 storage cost. For detailed information, see [Considerations when working with S3 storage classes in DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes).
    public var s3StorageClass: DataSyncClientTypes.S3StorageClass?
    /// A subdirectory in the Amazon S3 bucket. This subdirectory in Amazon S3 is used to read data from the S3 source location or write data to the S3 destination.
    public var subdirectory: Swift.String?
    /// The key-value pair that represents the tag that you want to add to the location. The value can be an empty string. We recommend using tags to name your resources.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init(
        agentArns: [Swift.String]? = nil,
        s3BucketArn: Swift.String? = nil,
        s3Config: DataSyncClientTypes.S3Config? = nil,
        s3StorageClass: DataSyncClientTypes.S3StorageClass? = nil,
        subdirectory: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.agentArns = agentArns
        self.s3BucketArn = s3BucketArn
        self.s3Config = s3Config
        self.s3StorageClass = s3StorageClass
        self.subdirectory = subdirectory
        self.tags = tags
    }
}

struct CreateLocationS3InputBody: Swift.Equatable {
    let subdirectory: Swift.String?
    let s3BucketArn: Swift.String?
    let s3StorageClass: DataSyncClientTypes.S3StorageClass?
    let s3Config: DataSyncClientTypes.S3Config?
    let agentArns: [Swift.String]?
    let tags: [DataSyncClientTypes.TagListEntry]?
}

extension CreateLocationS3InputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case s3BucketArn = "S3BucketArn"
        case s3Config = "S3Config"
        case s3StorageClass = "S3StorageClass"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let s3BucketArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3BucketArn)
        s3BucketArn = s3BucketArnDecoded
        let s3StorageClassDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.S3StorageClass.self, forKey: .s3StorageClass)
        s3StorageClass = s3StorageClassDecoded
        let s3ConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.S3Config.self, forKey: .s3Config)
        s3Config = s3ConfigDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public enum CreateLocationS3OutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateLocationS3OutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateLocationS3OutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locationArn = output.locationArn
        } else {
            self.locationArn = nil
        }
    }
}

/// CreateLocationS3Response
public struct CreateLocationS3OutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the source Amazon S3 bucket location that is created.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct CreateLocationS3OutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension CreateLocationS3OutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension CreateLocationSmbInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLocationSmbInput(agentArns: \(Swift.String(describing: agentArns)), domain: \(Swift.String(describing: domain)), mountOptions: \(Swift.String(describing: mountOptions)), serverHostname: \(Swift.String(describing: serverHostname)), subdirectory: \(Swift.String(describing: subdirectory)), tags: \(Swift.String(describing: tags)), user: \(Swift.String(describing: user)), password: \"CONTENT_REDACTED\")"}
}

extension CreateLocationSmbInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case domain = "Domain"
        case mountOptions = "MountOptions"
        case password = "Password"
        case serverHostname = "ServerHostname"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
        case user = "User"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarn0 in agentArns {
                try agentArnsContainer.encode(agentarn0)
            }
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let mountOptions = self.mountOptions {
            try encodeContainer.encode(mountOptions, forKey: .mountOptions)
        }
        if let password = self.password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let serverHostname = self.serverHostname {
            try encodeContainer.encode(serverHostname, forKey: .serverHostname)
        }
        if let subdirectory = self.subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglistentry0 in tags {
                try tagsContainer.encode(taglistentry0)
            }
        }
        if let user = self.user {
            try encodeContainer.encode(user, forKey: .user)
        }
    }
}

extension CreateLocationSmbInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// CreateLocationSmbRequest
public struct CreateLocationSmbInput: Swift.Equatable {
    /// Specifies the DataSync agent (or agents) which you want to connect to your SMB file server. You specify an agent by using its Amazon Resource Name (ARN).
    /// This member is required.
    public var agentArns: [Swift.String]?
    /// Specifies the Windows domain name that your SMB file server belongs to. For more information, see [required permissions](https://docs.aws.amazon.com/datasync/latest/userguide/create-smb-location.html#configuring-smb-permissions) for SMB locations.
    public var domain: Swift.String?
    /// Specifies the version of the SMB protocol that DataSync uses to access your SMB file server.
    public var mountOptions: DataSyncClientTypes.SmbMountOptions?
    /// Specifies the password of the user who can mount your SMB file server and has permission to access the files and folders involved in your transfer. For more information, see [required permissions](https://docs.aws.amazon.com/datasync/latest/userguide/create-smb-location.html#configuring-smb-permissions) for SMB locations.
    /// This member is required.
    public var password: Swift.String?
    /// Specifies the Domain Name Service (DNS) name or IP address of the SMB file server that your DataSync agent will mount. You can't specify an IP version 6 (IPv6) address.
    /// This member is required.
    public var serverHostname: Swift.String?
    /// Specifies the name of the share exported by your SMB file server where DataSync will read or write data. You can include a subdirectory in the share path (for example, /path/to/subdirectory). Make sure that other SMB clients in your network can also mount this path. To copy all data in the specified subdirectory, DataSync must be able to mount the SMB share and access all of its data. For more information, see [required permissions](https://docs.aws.amazon.com/datasync/latest/userguide/create-smb-location.html#configuring-smb-permissions) for SMB locations.
    /// This member is required.
    public var subdirectory: Swift.String?
    /// Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your location.
    public var tags: [DataSyncClientTypes.TagListEntry]?
    /// Specifies the user name that can mount your SMB file server and has permission to access the files and folders involved in your transfer. For information about choosing a user with the right level of access for your transfer, see [required permissions](https://docs.aws.amazon.com/datasync/latest/userguide/create-smb-location.html#configuring-smb-permissions) for SMB locations.
    /// This member is required.
    public var user: Swift.String?

    public init(
        agentArns: [Swift.String]? = nil,
        domain: Swift.String? = nil,
        mountOptions: DataSyncClientTypes.SmbMountOptions? = nil,
        password: Swift.String? = nil,
        serverHostname: Swift.String? = nil,
        subdirectory: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil,
        user: Swift.String? = nil
    )
    {
        self.agentArns = agentArns
        self.domain = domain
        self.mountOptions = mountOptions
        self.password = password
        self.serverHostname = serverHostname
        self.subdirectory = subdirectory
        self.tags = tags
        self.user = user
    }
}

struct CreateLocationSmbInputBody: Swift.Equatable {
    let subdirectory: Swift.String?
    let serverHostname: Swift.String?
    let user: Swift.String?
    let domain: Swift.String?
    let password: Swift.String?
    let agentArns: [Swift.String]?
    let mountOptions: DataSyncClientTypes.SmbMountOptions?
    let tags: [DataSyncClientTypes.TagListEntry]?
}

extension CreateLocationSmbInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case domain = "Domain"
        case mountOptions = "MountOptions"
        case password = "Password"
        case serverHostname = "ServerHostname"
        case subdirectory = "Subdirectory"
        case tags = "Tags"
        case user = "User"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let serverHostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverHostname)
        serverHostname = serverHostnameDecoded
        let userDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .user)
        user = userDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let mountOptionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.SmbMountOptions.self, forKey: .mountOptions)
        mountOptions = mountOptionsDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public enum CreateLocationSmbOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateLocationSmbOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateLocationSmbOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locationArn = output.locationArn
        } else {
            self.locationArn = nil
        }
    }
}

/// CreateLocationSmbResponse
public struct CreateLocationSmbOutputResponse: Swift.Equatable {
    /// The ARN of the SMB location that you created.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct CreateLocationSmbOutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension CreateLocationSmbOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

extension CreateTaskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case destinationLocationArn = "DestinationLocationArn"
        case excludes = "Excludes"
        case includes = "Includes"
        case name = "Name"
        case options = "Options"
        case schedule = "Schedule"
        case sourceLocationArn = "SourceLocationArn"
        case tags = "Tags"
        case taskReportConfig = "TaskReportConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLogGroupArn = self.cloudWatchLogGroupArn {
            try encodeContainer.encode(cloudWatchLogGroupArn, forKey: .cloudWatchLogGroupArn)
        }
        if let destinationLocationArn = self.destinationLocationArn {
            try encodeContainer.encode(destinationLocationArn, forKey: .destinationLocationArn)
        }
        if let excludes = excludes {
            var excludesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludes)
            for filterrule0 in excludes {
                try excludesContainer.encode(filterrule0)
            }
        }
        if let includes = includes {
            var includesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includes)
            for filterrule0 in includes {
                try includesContainer.encode(filterrule0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let schedule = self.schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let sourceLocationArn = self.sourceLocationArn {
            try encodeContainer.encode(sourceLocationArn, forKey: .sourceLocationArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglistentry0 in tags {
                try tagsContainer.encode(taglistentry0)
            }
        }
        if let taskReportConfig = self.taskReportConfig {
            try encodeContainer.encode(taskReportConfig, forKey: .taskReportConfig)
        }
    }
}

extension CreateTaskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// CreateTaskRequest
public struct CreateTaskInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the Amazon CloudWatch log group that is used to monitor and log events in the task.
    public var cloudWatchLogGroupArn: Swift.String?
    /// The Amazon Resource Name (ARN) of an Amazon Web Services storage resource's location.
    /// This member is required.
    public var destinationLocationArn: Swift.String?
    /// Specifies a list of filter rules that exclude specific data during your transfer. For more information and examples, see [Filtering data transferred by DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html).
    public var excludes: [DataSyncClientTypes.FilterRule]?
    /// Specifies a list of filter rules that include specific data during your transfer. For more information and examples, see [Filtering data transferred by DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html).
    public var includes: [DataSyncClientTypes.FilterRule]?
    /// The name of a task. This value is a text reference that is used to identify the task in the console.
    public var name: Swift.String?
    /// Specifies the configuration options for a task. Some options include preserving file or object metadata and verifying data integrity. You can also override these options before starting an individual run of a task (also known as a task execution). For more information, see [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html).
    public var options: DataSyncClientTypes.Options?
    /// Specifies a schedule used to periodically transfer files from a source to a destination location. The schedule should be specified in UTC time. For more information, see [Scheduling your task](https://docs.aws.amazon.com/datasync/latest/userguide/task-scheduling.html).
    public var schedule: DataSyncClientTypes.TaskSchedule?
    /// The Amazon Resource Name (ARN) of the source location for the task.
    /// This member is required.
    public var sourceLocationArn: Swift.String?
    /// Specifies the tags that you want to apply to the Amazon Resource Name (ARN) representing the task. Tags are key-value pairs that help you manage, filter, and search for your DataSync resources.
    public var tags: [DataSyncClientTypes.TagListEntry]?
    /// Specifies how you want to configure a task report, which provides detailed information about for your DataSync transfer.
    public var taskReportConfig: DataSyncClientTypes.TaskReportConfig?

    public init(
        cloudWatchLogGroupArn: Swift.String? = nil,
        destinationLocationArn: Swift.String? = nil,
        excludes: [DataSyncClientTypes.FilterRule]? = nil,
        includes: [DataSyncClientTypes.FilterRule]? = nil,
        name: Swift.String? = nil,
        options: DataSyncClientTypes.Options? = nil,
        schedule: DataSyncClientTypes.TaskSchedule? = nil,
        sourceLocationArn: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil,
        taskReportConfig: DataSyncClientTypes.TaskReportConfig? = nil
    )
    {
        self.cloudWatchLogGroupArn = cloudWatchLogGroupArn
        self.destinationLocationArn = destinationLocationArn
        self.excludes = excludes
        self.includes = includes
        self.name = name
        self.options = options
        self.schedule = schedule
        self.sourceLocationArn = sourceLocationArn
        self.tags = tags
        self.taskReportConfig = taskReportConfig
    }
}

struct CreateTaskInputBody: Swift.Equatable {
    let sourceLocationArn: Swift.String?
    let destinationLocationArn: Swift.String?
    let cloudWatchLogGroupArn: Swift.String?
    let name: Swift.String?
    let options: DataSyncClientTypes.Options?
    let excludes: [DataSyncClientTypes.FilterRule]?
    let schedule: DataSyncClientTypes.TaskSchedule?
    let tags: [DataSyncClientTypes.TagListEntry]?
    let includes: [DataSyncClientTypes.FilterRule]?
    let taskReportConfig: DataSyncClientTypes.TaskReportConfig?
}

extension CreateTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case destinationLocationArn = "DestinationLocationArn"
        case excludes = "Excludes"
        case includes = "Includes"
        case name = "Name"
        case options = "Options"
        case schedule = "Schedule"
        case sourceLocationArn = "SourceLocationArn"
        case tags = "Tags"
        case taskReportConfig = "TaskReportConfig"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceLocationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceLocationArn)
        sourceLocationArn = sourceLocationArnDecoded
        let destinationLocationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationLocationArn)
        destinationLocationArn = destinationLocationArnDecoded
        let cloudWatchLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogGroupArn)
        cloudWatchLogGroupArn = cloudWatchLogGroupArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let optionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Options.self, forKey: .options)
        options = optionsDecoded
        let excludesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .excludes)
        var excludesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let excludesContainer = excludesContainer {
            excludesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in excludesContainer {
                if let structure0 = structure0 {
                    excludesDecoded0?.append(structure0)
                }
            }
        }
        excludes = excludesDecoded0
        let scheduleDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskSchedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let includesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .includes)
        var includesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let includesContainer = includesContainer {
            includesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in includesContainer {
                if let structure0 = structure0 {
                    includesDecoded0?.append(structure0)
                }
            }
        }
        includes = includesDecoded0
        let taskReportConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskReportConfig.self, forKey: .taskReportConfig)
        taskReportConfig = taskReportConfigDecoded
    }
}

public enum CreateTaskOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.taskArn = output.taskArn
        } else {
            self.taskArn = nil
        }
    }
}

/// CreateTaskResponse
public struct CreateTaskOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the task.
    public var taskArn: Swift.String?

    public init(
        taskArn: Swift.String? = nil
    )
    {
        self.taskArn = taskArn
    }
}

struct CreateTaskOutputResponseBody: Swift.Equatable {
    let taskArn: Swift.String?
}

extension CreateTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskArn = "TaskArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
    }
}

extension DataSyncClientTypes.Credentials: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case password = "Password"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let password = self.password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
    }
}

extension DataSyncClientTypes.Credentials: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Credentials(password: \"CONTENT_REDACTED\", username: \"CONTENT_REDACTED\")"}
}

extension DataSyncClientTypes {
    /// The credentials that provide DataSync Discovery read access to your on-premises storage system's management interface. DataSync Discovery stores these credentials in [Secrets Manager](https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html). For more information, see [Accessing your on-premises storage system](https://docs.aws.amazon.com/datasync/latest/userguide/discovery-configure-storage.html).
    public struct Credentials: Swift.Equatable {
        /// Specifies the password for your storage system's management interface.
        /// This member is required.
        public var password: Swift.String?
        /// Specifies the user name for your storage system's management interface.
        /// This member is required.
        public var username: Swift.String?

        public init(
            password: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.password = password
            self.username = username
        }
    }

}

extension DeleteAgentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArn = "AgentArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArn = self.agentArn {
            try encodeContainer.encode(agentArn, forKey: .agentArn)
        }
    }
}

extension DeleteAgentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// DeleteAgentRequest
public struct DeleteAgentInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the agent to delete. Use the ListAgents operation to return a list of agents for your account and Amazon Web Services Region.
    /// This member is required.
    public var agentArn: Swift.String?

    public init(
        agentArn: Swift.String? = nil
    )
    {
        self.agentArn = agentArn
    }
}

struct DeleteAgentInputBody: Swift.Equatable {
    let agentArn: Swift.String?
}

extension DeleteAgentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArn = "AgentArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentArn)
        agentArn = agentArnDecoded
    }
}

public enum DeleteAgentOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteAgentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteAgentOutputResponse: Swift.Equatable {

    public init() { }
}

extension DeleteLocationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = self.locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

extension DeleteLocationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// DeleteLocation
public struct DeleteLocationInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the location to delete.
    /// This member is required.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DeleteLocationInputBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension DeleteLocationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

public enum DeleteLocationOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteLocationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteLocationOutputResponse: Swift.Equatable {

    public init() { }
}

extension DeleteTaskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskArn = "TaskArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let taskArn = self.taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
    }
}

extension DeleteTaskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// DeleteTask
public struct DeleteTaskInput: Swift.Equatable {
    /// Specifies the Amazon Resource Name (ARN) of the task that you want to delete.
    /// This member is required.
    public var taskArn: Swift.String?

    public init(
        taskArn: Swift.String? = nil
    )
    {
        self.taskArn = taskArn
    }
}

struct DeleteTaskInputBody: Swift.Equatable {
    let taskArn: Swift.String?
}

extension DeleteTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskArn = "TaskArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
    }
}

public enum DeleteTaskOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteTaskOutputResponse: Swift.Equatable {

    public init() { }
}

extension DescribeAgentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArn = "AgentArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArn = self.agentArn {
            try encodeContainer.encode(agentArn, forKey: .agentArn)
        }
    }
}

extension DescribeAgentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// DescribeAgent
public struct DescribeAgentInput: Swift.Equatable {
    /// Specifies the Amazon Resource Name (ARN) of the DataSync agent to describe.
    /// This member is required.
    public var agentArn: Swift.String?

    public init(
        agentArn: Swift.String? = nil
    )
    {
        self.agentArn = agentArn
    }
}

struct DescribeAgentInputBody: Swift.Equatable {
    let agentArn: Swift.String?
}

extension DescribeAgentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArn = "AgentArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentArn)
        agentArn = agentArnDecoded
    }
}

public enum DescribeAgentOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeAgentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeAgentOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.agentArn = output.agentArn
            self.creationTime = output.creationTime
            self.endpointType = output.endpointType
            self.lastConnectionTime = output.lastConnectionTime
            self.name = output.name
            self.privateLinkConfig = output.privateLinkConfig
            self.status = output.status
        } else {
            self.agentArn = nil
            self.creationTime = nil
            self.endpointType = nil
            self.lastConnectionTime = nil
            self.name = nil
            self.privateLinkConfig = nil
            self.status = nil
        }
    }
}

/// DescribeAgentResponse
public struct DescribeAgentOutputResponse: Swift.Equatable {
    /// The ARN of the agent.
    public var agentArn: Swift.String?
    /// The time that the agent was activated (that is, created in your account).
    public var creationTime: ClientRuntime.Date?
    /// The type of endpoint that your agent is connected to. If the endpoint is a VPC endpoint, the agent is not accessible over the public internet.
    public var endpointType: DataSyncClientTypes.EndpointType?
    /// The time that the agent last connected to DataSync.
    public var lastConnectionTime: ClientRuntime.Date?
    /// The name of the agent.
    public var name: Swift.String?
    /// The subnet and the security group that DataSync used to access a VPC endpoint.
    public var privateLinkConfig: DataSyncClientTypes.PrivateLinkConfig?
    /// The status of the agent. If the status is ONLINE, then the agent is configured properly and is available to use. The Running status is the normal running status for an agent. If the status is OFFLINE, the agent's VM is turned off or the agent is in an unhealthy state. When the issue that caused the unhealthy state is resolved, the agent returns to ONLINE status.
    public var status: DataSyncClientTypes.AgentStatus?

    public init(
        agentArn: Swift.String? = nil,
        creationTime: ClientRuntime.Date? = nil,
        endpointType: DataSyncClientTypes.EndpointType? = nil,
        lastConnectionTime: ClientRuntime.Date? = nil,
        name: Swift.String? = nil,
        privateLinkConfig: DataSyncClientTypes.PrivateLinkConfig? = nil,
        status: DataSyncClientTypes.AgentStatus? = nil
    )
    {
        self.agentArn = agentArn
        self.creationTime = creationTime
        self.endpointType = endpointType
        self.lastConnectionTime = lastConnectionTime
        self.name = name
        self.privateLinkConfig = privateLinkConfig
        self.status = status
    }
}

struct DescribeAgentOutputResponseBody: Swift.Equatable {
    let agentArn: Swift.String?
    let name: Swift.String?
    let status: DataSyncClientTypes.AgentStatus?
    let lastConnectionTime: ClientRuntime.Date?
    let creationTime: ClientRuntime.Date?
    let endpointType: DataSyncClientTypes.EndpointType?
    let privateLinkConfig: DataSyncClientTypes.PrivateLinkConfig?
}

extension DescribeAgentOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArn = "AgentArn"
        case creationTime = "CreationTime"
        case endpointType = "EndpointType"
        case lastConnectionTime = "LastConnectionTime"
        case name = "Name"
        case privateLinkConfig = "PrivateLinkConfig"
        case status = "Status"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentArn)
        agentArn = agentArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.AgentStatus.self, forKey: .status)
        status = statusDecoded
        let lastConnectionTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastConnectionTime)
        lastConnectionTime = lastConnectionTimeDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let endpointTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.EndpointType.self, forKey: .endpointType)
        endpointType = endpointTypeDecoded
        let privateLinkConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.PrivateLinkConfig.self, forKey: .privateLinkConfig)
        privateLinkConfig = privateLinkConfigDecoded
    }
}

extension DescribeDiscoveryJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case discoveryJobArn = "DiscoveryJobArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let discoveryJobArn = self.discoveryJobArn {
            try encodeContainer.encode(discoveryJobArn, forKey: .discoveryJobArn)
        }
    }
}

extension DescribeDiscoveryJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDiscoveryJobInput: Swift.Equatable {
    /// Specifies the Amazon Resource Name (ARN) of the discovery job that you want information about.
    /// This member is required.
    public var discoveryJobArn: Swift.String?

    public init(
        discoveryJobArn: Swift.String? = nil
    )
    {
        self.discoveryJobArn = discoveryJobArn
    }
}

struct DescribeDiscoveryJobInputBody: Swift.Equatable {
    let discoveryJobArn: Swift.String?
}

extension DescribeDiscoveryJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case discoveryJobArn = "DiscoveryJobArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let discoveryJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .discoveryJobArn)
        discoveryJobArn = discoveryJobArnDecoded
    }
}

public enum DescribeDiscoveryJobOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeDiscoveryJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeDiscoveryJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.collectionDurationMinutes = output.collectionDurationMinutes
            self.discoveryJobArn = output.discoveryJobArn
            self.jobEndTime = output.jobEndTime
            self.jobStartTime = output.jobStartTime
            self.status = output.status
            self.storageSystemArn = output.storageSystemArn
        } else {
            self.collectionDurationMinutes = nil
            self.discoveryJobArn = nil
            self.jobEndTime = nil
            self.jobStartTime = nil
            self.status = nil
            self.storageSystemArn = nil
        }
    }
}

public struct DescribeDiscoveryJobOutputResponse: Swift.Equatable {
    /// The number of minutes that the discovery job runs.
    public var collectionDurationMinutes: Swift.Int?
    /// The ARN of the discovery job.
    public var discoveryJobArn: Swift.String?
    /// The time when the discovery job ended.
    public var jobEndTime: ClientRuntime.Date?
    /// The time when the discovery job started.
    public var jobStartTime: ClientRuntime.Date?
    /// Indicates the status of a discovery job. For more information, see [Discovery job statuses](https://docs.aws.amazon.com/datasync/latest/userguide/discovery-job-statuses.html#discovery-job-statuses-table).
    public var status: DataSyncClientTypes.DiscoveryJobStatus?
    /// The ARN of the on-premises storage system you're running the discovery job on.
    public var storageSystemArn: Swift.String?

    public init(
        collectionDurationMinutes: Swift.Int? = nil,
        discoveryJobArn: Swift.String? = nil,
        jobEndTime: ClientRuntime.Date? = nil,
        jobStartTime: ClientRuntime.Date? = nil,
        status: DataSyncClientTypes.DiscoveryJobStatus? = nil,
        storageSystemArn: Swift.String? = nil
    )
    {
        self.collectionDurationMinutes = collectionDurationMinutes
        self.discoveryJobArn = discoveryJobArn
        self.jobEndTime = jobEndTime
        self.jobStartTime = jobStartTime
        self.status = status
        self.storageSystemArn = storageSystemArn
    }
}

struct DescribeDiscoveryJobOutputResponseBody: Swift.Equatable {
    let storageSystemArn: Swift.String?
    let discoveryJobArn: Swift.String?
    let collectionDurationMinutes: Swift.Int?
    let status: DataSyncClientTypes.DiscoveryJobStatus?
    let jobStartTime: ClientRuntime.Date?
    let jobEndTime: ClientRuntime.Date?
}

extension DescribeDiscoveryJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionDurationMinutes = "CollectionDurationMinutes"
        case discoveryJobArn = "DiscoveryJobArn"
        case jobEndTime = "JobEndTime"
        case jobStartTime = "JobStartTime"
        case status = "Status"
        case storageSystemArn = "StorageSystemArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageSystemArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageSystemArn)
        storageSystemArn = storageSystemArnDecoded
        let discoveryJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .discoveryJobArn)
        discoveryJobArn = discoveryJobArnDecoded
        let collectionDurationMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .collectionDurationMinutes)
        collectionDurationMinutes = collectionDurationMinutesDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.DiscoveryJobStatus.self, forKey: .status)
        status = statusDecoded
        let jobStartTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .jobStartTime)
        jobStartTime = jobStartTimeDecoded
        let jobEndTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .jobEndTime)
        jobEndTime = jobEndTimeDecoded
    }
}

extension DescribeLocationAzureBlobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = self.locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

extension DescribeLocationAzureBlobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLocationAzureBlobInput: Swift.Equatable {
    /// Specifies the Amazon Resource Name (ARN) of your Azure Blob Storage transfer location.
    /// This member is required.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DescribeLocationAzureBlobInputBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension DescribeLocationAzureBlobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

public enum DescribeLocationAzureBlobOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeLocationAzureBlobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeLocationAzureBlobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accessTier = output.accessTier
            self.agentArns = output.agentArns
            self.authenticationType = output.authenticationType
            self.blobType = output.blobType
            self.creationTime = output.creationTime
            self.locationArn = output.locationArn
            self.locationUri = output.locationUri
        } else {
            self.accessTier = nil
            self.agentArns = nil
            self.authenticationType = nil
            self.blobType = nil
            self.creationTime = nil
            self.locationArn = nil
            self.locationUri = nil
        }
    }
}

public struct DescribeLocationAzureBlobOutputResponse: Swift.Equatable {
    /// The access tier that you want your objects or files transferred into. This only applies when using the location as a transfer destination. For more information, see [Access tiers](https://docs.aws.amazon.com/datasync/latest/userguide/creating-azure-blob-location.html#azure-blob-access-tiers).
    public var accessTier: DataSyncClientTypes.AzureAccessTier?
    /// The ARNs of the DataSync agents that can connect with your Azure Blob Storage container.
    public var agentArns: [Swift.String]?
    /// The authentication method DataSync uses to access your Azure Blob Storage. DataSync can access blob storage using a shared access signature (SAS).
    public var authenticationType: DataSyncClientTypes.AzureBlobAuthenticationType?
    /// The type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Currently, DataSync only supports moving data into Azure Blob Storage as block blobs. For more information on blob types, see the [Azure Blob Storage documentation](https://learn.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs).
    public var blobType: DataSyncClientTypes.AzureBlobType?
    /// The time that your Azure Blob Storage transfer location was created.
    public var creationTime: ClientRuntime.Date?
    /// The ARN of your Azure Blob Storage transfer location.
    public var locationArn: Swift.String?
    /// The URL of the Azure Blob Storage container involved in your transfer.
    public var locationUri: Swift.String?

    public init(
        accessTier: DataSyncClientTypes.AzureAccessTier? = nil,
        agentArns: [Swift.String]? = nil,
        authenticationType: DataSyncClientTypes.AzureBlobAuthenticationType? = nil,
        blobType: DataSyncClientTypes.AzureBlobType? = nil,
        creationTime: ClientRuntime.Date? = nil,
        locationArn: Swift.String? = nil,
        locationUri: Swift.String? = nil
    )
    {
        self.accessTier = accessTier
        self.agentArns = agentArns
        self.authenticationType = authenticationType
        self.blobType = blobType
        self.creationTime = creationTime
        self.locationArn = locationArn
        self.locationUri = locationUri
    }
}

struct DescribeLocationAzureBlobOutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
    let locationUri: Swift.String?
    let authenticationType: DataSyncClientTypes.AzureBlobAuthenticationType?
    let blobType: DataSyncClientTypes.AzureBlobType?
    let accessTier: DataSyncClientTypes.AzureAccessTier?
    let agentArns: [Swift.String]?
    let creationTime: ClientRuntime.Date?
}

extension DescribeLocationAzureBlobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessTier = "AccessTier"
        case agentArns = "AgentArns"
        case authenticationType = "AuthenticationType"
        case blobType = "BlobType"
        case creationTime = "CreationTime"
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let authenticationTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.AzureBlobAuthenticationType.self, forKey: .authenticationType)
        authenticationType = authenticationTypeDecoded
        let blobTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.AzureBlobType.self, forKey: .blobType)
        blobType = blobTypeDecoded
        let accessTierDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.AzureAccessTier.self, forKey: .accessTier)
        accessTier = accessTierDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension DescribeLocationEfsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = self.locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

extension DescribeLocationEfsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// DescribeLocationEfsRequest
public struct DescribeLocationEfsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the Amazon EFS file system location that you want information about.
    /// This member is required.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DescribeLocationEfsInputBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension DescribeLocationEfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

public enum DescribeLocationEfsOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeLocationEfsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeLocationEfsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accessPointArn = output.accessPointArn
            self.creationTime = output.creationTime
            self.ec2Config = output.ec2Config
            self.fileSystemAccessRoleArn = output.fileSystemAccessRoleArn
            self.inTransitEncryption = output.inTransitEncryption
            self.locationArn = output.locationArn
            self.locationUri = output.locationUri
        } else {
            self.accessPointArn = nil
            self.creationTime = nil
            self.ec2Config = nil
            self.fileSystemAccessRoleArn = nil
            self.inTransitEncryption = nil
            self.locationArn = nil
            self.locationUri = nil
        }
    }
}

/// DescribeLocationEfsResponse
public struct DescribeLocationEfsOutputResponse: Swift.Equatable {
    /// The ARN of the access point that DataSync uses to access the Amazon EFS file system.
    public var accessPointArn: Swift.String?
    /// The time that the location was created.
    public var creationTime: ClientRuntime.Date?
    /// The subnet and security groups that DataSync uses to access your Amazon EFS file system.
    public var ec2Config: DataSyncClientTypes.Ec2Config?
    /// The Identity and Access Management (IAM) role that DataSync assumes when mounting the Amazon EFS file system.
    public var fileSystemAccessRoleArn: Swift.String?
    /// Describes whether DataSync uses Transport Layer Security (TLS) encryption when copying data to or from the Amazon EFS file system.
    public var inTransitEncryption: DataSyncClientTypes.EfsInTransitEncryption?
    /// The ARN of the Amazon EFS file system location.
    public var locationArn: Swift.String?
    /// The URL of the Amazon EFS file system location.
    public var locationUri: Swift.String?

    public init(
        accessPointArn: Swift.String? = nil,
        creationTime: ClientRuntime.Date? = nil,
        ec2Config: DataSyncClientTypes.Ec2Config? = nil,
        fileSystemAccessRoleArn: Swift.String? = nil,
        inTransitEncryption: DataSyncClientTypes.EfsInTransitEncryption? = nil,
        locationArn: Swift.String? = nil,
        locationUri: Swift.String? = nil
    )
    {
        self.accessPointArn = accessPointArn
        self.creationTime = creationTime
        self.ec2Config = ec2Config
        self.fileSystemAccessRoleArn = fileSystemAccessRoleArn
        self.inTransitEncryption = inTransitEncryption
        self.locationArn = locationArn
        self.locationUri = locationUri
    }
}

struct DescribeLocationEfsOutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
    let locationUri: Swift.String?
    let ec2Config: DataSyncClientTypes.Ec2Config?
    let creationTime: ClientRuntime.Date?
    let accessPointArn: Swift.String?
    let fileSystemAccessRoleArn: Swift.String?
    let inTransitEncryption: DataSyncClientTypes.EfsInTransitEncryption?
}

extension DescribeLocationEfsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPointArn = "AccessPointArn"
        case creationTime = "CreationTime"
        case ec2Config = "Ec2Config"
        case fileSystemAccessRoleArn = "FileSystemAccessRoleArn"
        case inTransitEncryption = "InTransitEncryption"
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let ec2ConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Ec2Config.self, forKey: .ec2Config)
        ec2Config = ec2ConfigDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let accessPointArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPointArn)
        accessPointArn = accessPointArnDecoded
        let fileSystemAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fileSystemAccessRoleArn)
        fileSystemAccessRoleArn = fileSystemAccessRoleArnDecoded
        let inTransitEncryptionDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.EfsInTransitEncryption.self, forKey: .inTransitEncryption)
        inTransitEncryption = inTransitEncryptionDecoded
    }
}

extension DescribeLocationFsxLustreInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = self.locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

extension DescribeLocationFsxLustreInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLocationFsxLustreInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the FSx for Lustre location to describe.
    /// This member is required.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DescribeLocationFsxLustreInputBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension DescribeLocationFsxLustreInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

public enum DescribeLocationFsxLustreOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeLocationFsxLustreOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeLocationFsxLustreOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.locationArn = output.locationArn
            self.locationUri = output.locationUri
            self.securityGroupArns = output.securityGroupArns
        } else {
            self.creationTime = nil
            self.locationArn = nil
            self.locationUri = nil
            self.securityGroupArns = nil
        }
    }
}

public struct DescribeLocationFsxLustreOutputResponse: Swift.Equatable {
    /// The time that the FSx for Lustre location was created.
    public var creationTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the FSx for Lustre location that was described.
    public var locationArn: Swift.String?
    /// The URI of the FSx for Lustre location that was described.
    public var locationUri: Swift.String?
    /// The Amazon Resource Names (ARNs) of the security groups that are configured for the FSx for Lustre file system.
    public var securityGroupArns: [Swift.String]?

    public init(
        creationTime: ClientRuntime.Date? = nil,
        locationArn: Swift.String? = nil,
        locationUri: Swift.String? = nil,
        securityGroupArns: [Swift.String]? = nil
    )
    {
        self.creationTime = creationTime
        self.locationArn = locationArn
        self.locationUri = locationUri
        self.securityGroupArns = securityGroupArns
    }
}

struct DescribeLocationFsxLustreOutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
    let locationUri: Swift.String?
    let securityGroupArns: [Swift.String]?
    let creationTime: ClientRuntime.Date?
}

extension DescribeLocationFsxLustreOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
        case securityGroupArns = "SecurityGroupArns"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let securityGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupArns)
        var securityGroupArnsDecoded0:[Swift.String]? = nil
        if let securityGroupArnsContainer = securityGroupArnsContainer {
            securityGroupArnsDecoded0 = [Swift.String]()
            for string0 in securityGroupArnsContainer {
                if let string0 = string0 {
                    securityGroupArnsDecoded0?.append(string0)
                }
            }
        }
        securityGroupArns = securityGroupArnsDecoded0
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension DescribeLocationFsxOntapInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = self.locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

extension DescribeLocationFsxOntapInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLocationFsxOntapInput: Swift.Equatable {
    /// Specifies the Amazon Resource Name (ARN) of the FSx for ONTAP file system location that you want information about.
    /// This member is required.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DescribeLocationFsxOntapInputBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension DescribeLocationFsxOntapInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

public enum DescribeLocationFsxOntapOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeLocationFsxOntapOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeLocationFsxOntapOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.`protocol` = output.`protocol`
            self.creationTime = output.creationTime
            self.fsxFilesystemArn = output.fsxFilesystemArn
            self.locationArn = output.locationArn
            self.locationUri = output.locationUri
            self.securityGroupArns = output.securityGroupArns
            self.storageVirtualMachineArn = output.storageVirtualMachineArn
        } else {
            self.creationTime = nil
            self.fsxFilesystemArn = nil
            self.locationArn = nil
            self.locationUri = nil
            self.`protocol` = nil
            self.securityGroupArns = nil
            self.storageVirtualMachineArn = nil
        }
    }
}

public struct DescribeLocationFsxOntapOutputResponse: Swift.Equatable {
    /// The time that the location was created.
    public var creationTime: ClientRuntime.Date?
    /// The ARN of the FSx for ONTAP file system.
    public var fsxFilesystemArn: Swift.String?
    /// The ARN of the FSx for ONTAP file system location.
    public var locationArn: Swift.String?
    /// The uniform resource identifier (URI) of the FSx for ONTAP file system location.
    public var locationUri: Swift.String?
    /// Specifies the data transfer protocol that DataSync uses to access your Amazon FSx file system.
    public var `protocol`: DataSyncClientTypes.FsxProtocol?
    /// The security groups that DataSync uses to access your FSx for ONTAP file system.
    public var securityGroupArns: [Swift.String]?
    /// The ARN of the storage virtual machine (SVM) on your FSx for ONTAP file system where you're copying data to or from.
    public var storageVirtualMachineArn: Swift.String?

    public init(
        creationTime: ClientRuntime.Date? = nil,
        fsxFilesystemArn: Swift.String? = nil,
        locationArn: Swift.String? = nil,
        locationUri: Swift.String? = nil,
        `protocol`: DataSyncClientTypes.FsxProtocol? = nil,
        securityGroupArns: [Swift.String]? = nil,
        storageVirtualMachineArn: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.fsxFilesystemArn = fsxFilesystemArn
        self.locationArn = locationArn
        self.locationUri = locationUri
        self.`protocol` = `protocol`
        self.securityGroupArns = securityGroupArns
        self.storageVirtualMachineArn = storageVirtualMachineArn
    }
}

struct DescribeLocationFsxOntapOutputResponseBody: Swift.Equatable {
    let creationTime: ClientRuntime.Date?
    let locationArn: Swift.String?
    let locationUri: Swift.String?
    let `protocol`: DataSyncClientTypes.FsxProtocol?
    let securityGroupArns: [Swift.String]?
    let storageVirtualMachineArn: Swift.String?
    let fsxFilesystemArn: Swift.String?
}

extension DescribeLocationFsxOntapOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case fsxFilesystemArn = "FsxFilesystemArn"
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
        case `protocol` = "Protocol"
        case securityGroupArns = "SecurityGroupArns"
        case storageVirtualMachineArn = "StorageVirtualMachineArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.FsxProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let securityGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupArns)
        var securityGroupArnsDecoded0:[Swift.String]? = nil
        if let securityGroupArnsContainer = securityGroupArnsContainer {
            securityGroupArnsDecoded0 = [Swift.String]()
            for string0 in securityGroupArnsContainer {
                if let string0 = string0 {
                    securityGroupArnsDecoded0?.append(string0)
                }
            }
        }
        securityGroupArns = securityGroupArnsDecoded0
        let storageVirtualMachineArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageVirtualMachineArn)
        storageVirtualMachineArn = storageVirtualMachineArnDecoded
        let fsxFilesystemArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fsxFilesystemArn)
        fsxFilesystemArn = fsxFilesystemArnDecoded
    }
}

extension DescribeLocationFsxOpenZfsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = self.locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

extension DescribeLocationFsxOpenZfsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLocationFsxOpenZfsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the FSx for OpenZFS location to describe.
    /// This member is required.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DescribeLocationFsxOpenZfsInputBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension DescribeLocationFsxOpenZfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

public enum DescribeLocationFsxOpenZfsOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeLocationFsxOpenZfsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeLocationFsxOpenZfsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.`protocol` = output.`protocol`
            self.creationTime = output.creationTime
            self.locationArn = output.locationArn
            self.locationUri = output.locationUri
            self.securityGroupArns = output.securityGroupArns
        } else {
            self.creationTime = nil
            self.locationArn = nil
            self.locationUri = nil
            self.`protocol` = nil
            self.securityGroupArns = nil
        }
    }
}

public struct DescribeLocationFsxOpenZfsOutputResponse: Swift.Equatable {
    /// The time that the FSx for OpenZFS location was created.
    public var creationTime: ClientRuntime.Date?
    /// The ARN of the FSx for OpenZFS location that was described.
    public var locationArn: Swift.String?
    /// The uniform resource identifier (URI) of the FSx for OpenZFS location that was described. Example: fsxz://us-west-2.fs-1234567890abcdef02/fsx/folderA/folder
    public var locationUri: Swift.String?
    /// The type of protocol that DataSync uses to access your file system.
    public var `protocol`: DataSyncClientTypes.FsxProtocol?
    /// The ARNs of the security groups that are configured for the FSx for OpenZFS file system.
    public var securityGroupArns: [Swift.String]?

    public init(
        creationTime: ClientRuntime.Date? = nil,
        locationArn: Swift.String? = nil,
        locationUri: Swift.String? = nil,
        `protocol`: DataSyncClientTypes.FsxProtocol? = nil,
        securityGroupArns: [Swift.String]? = nil
    )
    {
        self.creationTime = creationTime
        self.locationArn = locationArn
        self.locationUri = locationUri
        self.`protocol` = `protocol`
        self.securityGroupArns = securityGroupArns
    }
}

struct DescribeLocationFsxOpenZfsOutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
    let locationUri: Swift.String?
    let securityGroupArns: [Swift.String]?
    let `protocol`: DataSyncClientTypes.FsxProtocol?
    let creationTime: ClientRuntime.Date?
}

extension DescribeLocationFsxOpenZfsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
        case `protocol` = "Protocol"
        case securityGroupArns = "SecurityGroupArns"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let securityGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupArns)
        var securityGroupArnsDecoded0:[Swift.String]? = nil
        if let securityGroupArnsContainer = securityGroupArnsContainer {
            securityGroupArnsDecoded0 = [Swift.String]()
            for string0 in securityGroupArnsContainer {
                if let string0 = string0 {
                    securityGroupArnsDecoded0?.append(string0)
                }
            }
        }
        securityGroupArns = securityGroupArnsDecoded0
        let protocolDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.FsxProtocol.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension DescribeLocationFsxWindowsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = self.locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

extension DescribeLocationFsxWindowsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLocationFsxWindowsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the FSx for Windows File Server location to describe.
    /// This member is required.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DescribeLocationFsxWindowsInputBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension DescribeLocationFsxWindowsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

public enum DescribeLocationFsxWindowsOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeLocationFsxWindowsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeLocationFsxWindowsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.domain = output.domain
            self.locationArn = output.locationArn
            self.locationUri = output.locationUri
            self.securityGroupArns = output.securityGroupArns
            self.user = output.user
        } else {
            self.creationTime = nil
            self.domain = nil
            self.locationArn = nil
            self.locationUri = nil
            self.securityGroupArns = nil
            self.user = nil
        }
    }
}

public struct DescribeLocationFsxWindowsOutputResponse: Swift.Equatable {
    /// The time that the FSx for Windows File Server location was created.
    public var creationTime: ClientRuntime.Date?
    /// The name of the Windows domain that the FSx for Windows File Server belongs to.
    public var domain: Swift.String?
    /// The Amazon Resource Name (ARN) of the FSx for Windows File Server location that was described.
    public var locationArn: Swift.String?
    /// The URL of the FSx for Windows File Server location that was described.
    public var locationUri: Swift.String?
    /// The Amazon Resource Names (ARNs) of the security groups that are configured for the FSx for Windows File Server file system.
    public var securityGroupArns: [Swift.String]?
    /// The user who has the permissions to access files and folders in the FSx for Windows File Server file system.
    public var user: Swift.String?

    public init(
        creationTime: ClientRuntime.Date? = nil,
        domain: Swift.String? = nil,
        locationArn: Swift.String? = nil,
        locationUri: Swift.String? = nil,
        securityGroupArns: [Swift.String]? = nil,
        user: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.domain = domain
        self.locationArn = locationArn
        self.locationUri = locationUri
        self.securityGroupArns = securityGroupArns
        self.user = user
    }
}

struct DescribeLocationFsxWindowsOutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
    let locationUri: Swift.String?
    let securityGroupArns: [Swift.String]?
    let creationTime: ClientRuntime.Date?
    let user: Swift.String?
    let domain: Swift.String?
}

extension DescribeLocationFsxWindowsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case domain = "Domain"
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
        case securityGroupArns = "SecurityGroupArns"
        case user = "User"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let securityGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupArns)
        var securityGroupArnsDecoded0:[Swift.String]? = nil
        if let securityGroupArnsContainer = securityGroupArnsContainer {
            securityGroupArnsDecoded0 = [Swift.String]()
            for string0 in securityGroupArnsContainer {
                if let string0 = string0 {
                    securityGroupArnsDecoded0?.append(string0)
                }
            }
        }
        securityGroupArns = securityGroupArnsDecoded0
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let userDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .user)
        user = userDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
    }
}

extension DescribeLocationHdfsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = self.locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

extension DescribeLocationHdfsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeLocationHdfsInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the HDFS cluster location to describe.
    /// This member is required.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DescribeLocationHdfsInputBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension DescribeLocationHdfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

public enum DescribeLocationHdfsOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeLocationHdfsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeLocationHdfsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.agentArns = output.agentArns
            self.authenticationType = output.authenticationType
            self.blockSize = output.blockSize
            self.creationTime = output.creationTime
            self.kerberosPrincipal = output.kerberosPrincipal
            self.kmsKeyProviderUri = output.kmsKeyProviderUri
            self.locationArn = output.locationArn
            self.locationUri = output.locationUri
            self.nameNodes = output.nameNodes
            self.qopConfiguration = output.qopConfiguration
            self.replicationFactor = output.replicationFactor
            self.simpleUser = output.simpleUser
        } else {
            self.agentArns = nil
            self.authenticationType = nil
            self.blockSize = nil
            self.creationTime = nil
            self.kerberosPrincipal = nil
            self.kmsKeyProviderUri = nil
            self.locationArn = nil
            self.locationUri = nil
            self.nameNodes = nil
            self.qopConfiguration = nil
            self.replicationFactor = nil
            self.simpleUser = nil
        }
    }
}

public struct DescribeLocationHdfsOutputResponse: Swift.Equatable {
    /// The ARNs of the agents that are used to connect to the HDFS cluster.
    public var agentArns: [Swift.String]?
    /// The type of authentication used to determine the identity of the user.
    public var authenticationType: DataSyncClientTypes.HdfsAuthenticationType?
    /// The size of the data blocks to write into the HDFS cluster.
    public var blockSize: Swift.Int?
    /// The time that the HDFS location was created.
    public var creationTime: ClientRuntime.Date?
    /// The Kerberos principal with access to the files and folders on the HDFS cluster. This parameter is used if the AuthenticationType is defined as KERBEROS.
    public var kerberosPrincipal: Swift.String?
    /// The URI of the HDFS cluster's Key Management Server (KMS).
    public var kmsKeyProviderUri: Swift.String?
    /// The ARN of the HDFS cluster location.
    public var locationArn: Swift.String?
    /// The URI of the HDFS cluster location.
    public var locationUri: Swift.String?
    /// The NameNode that manage the HDFS namespace.
    public var nameNodes: [DataSyncClientTypes.HdfsNameNode]?
    /// The Quality of Protection (QOP) configuration specifies the Remote Procedure Call (RPC) and data transfer protection settings configured on the Hadoop Distributed File System (HDFS) cluster.
    public var qopConfiguration: DataSyncClientTypes.QopConfiguration?
    /// The number of DataNodes to replicate the data to when writing to the HDFS cluster.
    public var replicationFactor: Swift.Int?
    /// The user name used to identify the client on the host operating system. This parameter is used if the AuthenticationType is defined as SIMPLE.
    public var simpleUser: Swift.String?

    public init(
        agentArns: [Swift.String]? = nil,
        authenticationType: DataSyncClientTypes.HdfsAuthenticationType? = nil,
        blockSize: Swift.Int? = nil,
        creationTime: ClientRuntime.Date? = nil,
        kerberosPrincipal: Swift.String? = nil,
        kmsKeyProviderUri: Swift.String? = nil,
        locationArn: Swift.String? = nil,
        locationUri: Swift.String? = nil,
        nameNodes: [DataSyncClientTypes.HdfsNameNode]? = nil,
        qopConfiguration: DataSyncClientTypes.QopConfiguration? = nil,
        replicationFactor: Swift.Int? = nil,
        simpleUser: Swift.String? = nil
    )
    {
        self.agentArns = agentArns
        self.authenticationType = authenticationType
        self.blockSize = blockSize
        self.creationTime = creationTime
        self.kerberosPrincipal = kerberosPrincipal
        self.kmsKeyProviderUri = kmsKeyProviderUri
        self.locationArn = locationArn
        self.locationUri = locationUri
        self.nameNodes = nameNodes
        self.qopConfiguration = qopConfiguration
        self.replicationFactor = replicationFactor
        self.simpleUser = simpleUser
    }
}

struct DescribeLocationHdfsOutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
    let locationUri: Swift.String?
    let nameNodes: [DataSyncClientTypes.HdfsNameNode]?
    let blockSize: Swift.Int?
    let replicationFactor: Swift.Int?
    let kmsKeyProviderUri: Swift.String?
    let qopConfiguration: DataSyncClientTypes.QopConfiguration?
    let authenticationType: DataSyncClientTypes.HdfsAuthenticationType?
    let simpleUser: Swift.String?
    let kerberosPrincipal: Swift.String?
    let agentArns: [Swift.String]?
    let creationTime: ClientRuntime.Date?
}

extension DescribeLocationHdfsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case authenticationType = "AuthenticationType"
        case blockSize = "BlockSize"
        case creationTime = "CreationTime"
        case kerberosPrincipal = "KerberosPrincipal"
        case kmsKeyProviderUri = "KmsKeyProviderUri"
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
        case nameNodes = "NameNodes"
        case qopConfiguration = "QopConfiguration"
        case replicationFactor = "ReplicationFactor"
        case simpleUser = "SimpleUser"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let nameNodesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.HdfsNameNode?].self, forKey: .nameNodes)
        var nameNodesDecoded0:[DataSyncClientTypes.HdfsNameNode]? = nil
        if let nameNodesContainer = nameNodesContainer {
            nameNodesDecoded0 = [DataSyncClientTypes.HdfsNameNode]()
            for structure0 in nameNodesContainer {
                if let structure0 = structure0 {
                    nameNodesDecoded0?.append(structure0)
                }
            }
        }
        nameNodes = nameNodesDecoded0
        let blockSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .blockSize)
        blockSize = blockSizeDecoded
        let replicationFactorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .replicationFactor)
        replicationFactor = replicationFactorDecoded
        let kmsKeyProviderUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyProviderUri)
        kmsKeyProviderUri = kmsKeyProviderUriDecoded
        let qopConfigurationDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.QopConfiguration.self, forKey: .qopConfiguration)
        qopConfiguration = qopConfigurationDecoded
        let authenticationTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.HdfsAuthenticationType.self, forKey: .authenticationType)
        authenticationType = authenticationTypeDecoded
        let simpleUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .simpleUser)
        simpleUser = simpleUserDecoded
        let kerberosPrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kerberosPrincipal)
        kerberosPrincipal = kerberosPrincipalDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension DescribeLocationNfsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = self.locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

extension DescribeLocationNfsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// DescribeLocationNfsRequest
public struct DescribeLocationNfsInput: Swift.Equatable {
    /// Specifies the Amazon Resource Name (ARN) of the NFS location that you want information about.
    /// This member is required.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DescribeLocationNfsInputBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension DescribeLocationNfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

public enum DescribeLocationNfsOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeLocationNfsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeLocationNfsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.creationTime = output.creationTime
            self.locationArn = output.locationArn
            self.locationUri = output.locationUri
            self.mountOptions = output.mountOptions
            self.onPremConfig = output.onPremConfig
        } else {
            self.creationTime = nil
            self.locationArn = nil
            self.locationUri = nil
            self.mountOptions = nil
            self.onPremConfig = nil
        }
    }
}

/// DescribeLocationNfsResponse
public struct DescribeLocationNfsOutputResponse: Swift.Equatable {
    /// The time when the NFS location was created.
    public var creationTime: ClientRuntime.Date?
    /// The ARN of the NFS location.
    public var locationArn: Swift.String?
    /// The URL of the NFS location.
    public var locationUri: Swift.String?
    /// The mount options that DataSync uses to mount your NFS file server.
    public var mountOptions: DataSyncClientTypes.NfsMountOptions?
    /// The DataSync agents that are connecting to a Network File System (NFS) location.
    public var onPremConfig: DataSyncClientTypes.OnPremConfig?

    public init(
        creationTime: ClientRuntime.Date? = nil,
        locationArn: Swift.String? = nil,
        locationUri: Swift.String? = nil,
        mountOptions: DataSyncClientTypes.NfsMountOptions? = nil,
        onPremConfig: DataSyncClientTypes.OnPremConfig? = nil
    )
    {
        self.creationTime = creationTime
        self.locationArn = locationArn
        self.locationUri = locationUri
        self.mountOptions = mountOptions
        self.onPremConfig = onPremConfig
    }
}

struct DescribeLocationNfsOutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
    let locationUri: Swift.String?
    let onPremConfig: DataSyncClientTypes.OnPremConfig?
    let mountOptions: DataSyncClientTypes.NfsMountOptions?
    let creationTime: ClientRuntime.Date?
}

extension DescribeLocationNfsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTime = "CreationTime"
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
        case mountOptions = "MountOptions"
        case onPremConfig = "OnPremConfig"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let onPremConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.OnPremConfig.self, forKey: .onPremConfig)
        onPremConfig = onPremConfigDecoded
        let mountOptionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.NfsMountOptions.self, forKey: .mountOptions)
        mountOptions = mountOptionsDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension DescribeLocationObjectStorageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = self.locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

extension DescribeLocationObjectStorageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// DescribeLocationObjectStorageRequest
public struct DescribeLocationObjectStorageInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the object storage system location that you want information about.
    /// This member is required.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DescribeLocationObjectStorageInputBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension DescribeLocationObjectStorageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

public enum DescribeLocationObjectStorageOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeLocationObjectStorageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeLocationObjectStorageOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accessKey = output.accessKey
            self.agentArns = output.agentArns
            self.creationTime = output.creationTime
            self.locationArn = output.locationArn
            self.locationUri = output.locationUri
            self.serverCertificate = output.serverCertificate
            self.serverPort = output.serverPort
            self.serverProtocol = output.serverProtocol
        } else {
            self.accessKey = nil
            self.agentArns = nil
            self.creationTime = nil
            self.locationArn = nil
            self.locationUri = nil
            self.serverCertificate = nil
            self.serverPort = nil
            self.serverProtocol = nil
        }
    }
}

/// DescribeLocationObjectStorageResponse
public struct DescribeLocationObjectStorageOutputResponse: Swift.Equatable {
    /// The access key (for example, a user name) required to authenticate with the object storage system.
    public var accessKey: Swift.String?
    /// The ARNs of the DataSync agents that can securely connect with your location.
    public var agentArns: [Swift.String]?
    /// The time that the location was created.
    public var creationTime: ClientRuntime.Date?
    /// The ARN of the object storage system location.
    public var locationArn: Swift.String?
    /// The URL of the object storage system location.
    public var locationUri: Swift.String?
    /// The self-signed certificate that DataSync uses to securely authenticate with your object storage system.
    public var serverCertificate: ClientRuntime.Data?
    /// The port that your object storage server accepts inbound network traffic on (for example, port 443).
    public var serverPort: Swift.Int?
    /// The protocol that your object storage system uses to communicate.
    public var serverProtocol: DataSyncClientTypes.ObjectStorageServerProtocol?

    public init(
        accessKey: Swift.String? = nil,
        agentArns: [Swift.String]? = nil,
        creationTime: ClientRuntime.Date? = nil,
        locationArn: Swift.String? = nil,
        locationUri: Swift.String? = nil,
        serverCertificate: ClientRuntime.Data? = nil,
        serverPort: Swift.Int? = nil,
        serverProtocol: DataSyncClientTypes.ObjectStorageServerProtocol? = nil
    )
    {
        self.accessKey = accessKey
        self.agentArns = agentArns
        self.creationTime = creationTime
        self.locationArn = locationArn
        self.locationUri = locationUri
        self.serverCertificate = serverCertificate
        self.serverPort = serverPort
        self.serverProtocol = serverProtocol
    }
}

struct DescribeLocationObjectStorageOutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
    let locationUri: Swift.String?
    let accessKey: Swift.String?
    let serverPort: Swift.Int?
    let serverProtocol: DataSyncClientTypes.ObjectStorageServerProtocol?
    let agentArns: [Swift.String]?
    let creationTime: ClientRuntime.Date?
    let serverCertificate: ClientRuntime.Data?
}

extension DescribeLocationObjectStorageOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKey = "AccessKey"
        case agentArns = "AgentArns"
        case creationTime = "CreationTime"
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
        case serverCertificate = "ServerCertificate"
        case serverPort = "ServerPort"
        case serverProtocol = "ServerProtocol"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let accessKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessKey)
        accessKey = accessKeyDecoded
        let serverPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .serverPort)
        serverPort = serverPortDecoded
        let serverProtocolDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ObjectStorageServerProtocol.self, forKey: .serverProtocol)
        serverProtocol = serverProtocolDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let serverCertificateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .serverCertificate)
        serverCertificate = serverCertificateDecoded
    }
}

extension DescribeLocationS3Input: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = self.locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

extension DescribeLocationS3Input: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// DescribeLocationS3Request
public struct DescribeLocationS3Input: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the Amazon S3 bucket location to describe.
    /// This member is required.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DescribeLocationS3InputBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension DescribeLocationS3InputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

public enum DescribeLocationS3OutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeLocationS3OutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeLocationS3OutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.agentArns = output.agentArns
            self.creationTime = output.creationTime
            self.locationArn = output.locationArn
            self.locationUri = output.locationUri
            self.s3Config = output.s3Config
            self.s3StorageClass = output.s3StorageClass
        } else {
            self.agentArns = nil
            self.creationTime = nil
            self.locationArn = nil
            self.locationUri = nil
            self.s3Config = nil
            self.s3StorageClass = nil
        }
    }
}

/// DescribeLocationS3Response
public struct DescribeLocationS3OutputResponse: Swift.Equatable {
    /// If you are using DataSync on an Amazon Web Services Outpost, the Amazon Resource Name (ARNs) of the EC2 agents deployed on your Outpost. For more information about launching a DataSync agent on an Amazon Web Services Outpost, see [Deploy your DataSync agent on Outposts](https://docs.aws.amazon.com/datasync/latest/userguide/deploy-agents.html#outposts-agent).
    public var agentArns: [Swift.String]?
    /// The time that the Amazon S3 bucket location was created.
    public var creationTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the Amazon S3 bucket or access point.
    public var locationArn: Swift.String?
    /// The URL of the Amazon S3 location that was described.
    public var locationUri: Swift.String?
    /// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role used to access an Amazon S3 bucket. For detailed information about using such a role, see Creating a Location for Amazon S3 in the DataSync User Guide.
    public var s3Config: DataSyncClientTypes.S3Config?
    /// The Amazon S3 storage class that you chose to store your files in when this location is used as a task destination. For more information about S3 storage classes, see [Amazon S3 Storage Classes](http://aws.amazon.com/s3/storage-classes/). Some storage classes have behaviors that can affect your S3 storage cost. For detailed information, see [Considerations when working with S3 storage classes in DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes).
    public var s3StorageClass: DataSyncClientTypes.S3StorageClass?

    public init(
        agentArns: [Swift.String]? = nil,
        creationTime: ClientRuntime.Date? = nil,
        locationArn: Swift.String? = nil,
        locationUri: Swift.String? = nil,
        s3Config: DataSyncClientTypes.S3Config? = nil,
        s3StorageClass: DataSyncClientTypes.S3StorageClass? = nil
    )
    {
        self.agentArns = agentArns
        self.creationTime = creationTime
        self.locationArn = locationArn
        self.locationUri = locationUri
        self.s3Config = s3Config
        self.s3StorageClass = s3StorageClass
    }
}

struct DescribeLocationS3OutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
    let locationUri: Swift.String?
    let s3StorageClass: DataSyncClientTypes.S3StorageClass?
    let s3Config: DataSyncClientTypes.S3Config?
    let agentArns: [Swift.String]?
    let creationTime: ClientRuntime.Date?
}

extension DescribeLocationS3OutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case creationTime = "CreationTime"
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
        case s3Config = "S3Config"
        case s3StorageClass = "S3StorageClass"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let s3StorageClassDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.S3StorageClass.self, forKey: .s3StorageClass)
        s3StorageClass = s3StorageClassDecoded
        let s3ConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.S3Config.self, forKey: .s3Config)
        s3Config = s3ConfigDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension DescribeLocationSmbInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = self.locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
    }
}

extension DescribeLocationSmbInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// DescribeLocationSmbRequest
public struct DescribeLocationSmbInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the SMB location to describe.
    /// This member is required.
    public var locationArn: Swift.String?

    public init(
        locationArn: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
    }
}

struct DescribeLocationSmbInputBody: Swift.Equatable {
    let locationArn: Swift.String?
}

extension DescribeLocationSmbInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
    }
}

public enum DescribeLocationSmbOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeLocationSmbOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeLocationSmbOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.agentArns = output.agentArns
            self.creationTime = output.creationTime
            self.domain = output.domain
            self.locationArn = output.locationArn
            self.locationUri = output.locationUri
            self.mountOptions = output.mountOptions
            self.user = output.user
        } else {
            self.agentArns = nil
            self.creationTime = nil
            self.domain = nil
            self.locationArn = nil
            self.locationUri = nil
            self.mountOptions = nil
            self.user = nil
        }
    }
}

/// DescribeLocationSmbResponse
public struct DescribeLocationSmbOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the source SMB file system location that is created.
    public var agentArns: [Swift.String]?
    /// The time that the SMB location was created.
    public var creationTime: ClientRuntime.Date?
    /// The name of the Windows domain that the SMB server belongs to.
    public var domain: Swift.String?
    /// The Amazon Resource Name (ARN) of the SMB location that was described.
    public var locationArn: Swift.String?
    /// The URL of the source SMB location that was described.
    public var locationUri: Swift.String?
    /// The mount options that are available for DataSync to use to access an SMB location.
    public var mountOptions: DataSyncClientTypes.SmbMountOptions?
    /// The user who can mount the share, has the permissions to access files and folders in the SMB share.
    public var user: Swift.String?

    public init(
        agentArns: [Swift.String]? = nil,
        creationTime: ClientRuntime.Date? = nil,
        domain: Swift.String? = nil,
        locationArn: Swift.String? = nil,
        locationUri: Swift.String? = nil,
        mountOptions: DataSyncClientTypes.SmbMountOptions? = nil,
        user: Swift.String? = nil
    )
    {
        self.agentArns = agentArns
        self.creationTime = creationTime
        self.domain = domain
        self.locationArn = locationArn
        self.locationUri = locationUri
        self.mountOptions = mountOptions
        self.user = user
    }
}

struct DescribeLocationSmbOutputResponseBody: Swift.Equatable {
    let locationArn: Swift.String?
    let locationUri: Swift.String?
    let agentArns: [Swift.String]?
    let user: Swift.String?
    let domain: Swift.String?
    let mountOptions: DataSyncClientTypes.SmbMountOptions?
    let creationTime: ClientRuntime.Date?
}

extension DescribeLocationSmbOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case creationTime = "CreationTime"
        case domain = "Domain"
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
        case mountOptions = "MountOptions"
        case user = "User"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let userDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .user)
        user = userDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let mountOptionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.SmbMountOptions.self, forKey: .mountOptions)
        mountOptions = mountOptionsDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
    }
}

extension DescribeStorageSystemInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storageSystemArn = "StorageSystemArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let storageSystemArn = self.storageSystemArn {
            try encodeContainer.encode(storageSystemArn, forKey: .storageSystemArn)
        }
    }
}

extension DescribeStorageSystemInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeStorageSystemInput: Swift.Equatable {
    /// Specifies the Amazon Resource Name (ARN) of an on-premises storage system that you're using with DataSync Discovery.
    /// This member is required.
    public var storageSystemArn: Swift.String?

    public init(
        storageSystemArn: Swift.String? = nil
    )
    {
        self.storageSystemArn = storageSystemArn
    }
}

struct DescribeStorageSystemInputBody: Swift.Equatable {
    let storageSystemArn: Swift.String?
}

extension DescribeStorageSystemInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storageSystemArn = "StorageSystemArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageSystemArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageSystemArn)
        storageSystemArn = storageSystemArnDecoded
    }
}

public enum DescribeStorageSystemOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeStorageSystemOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeStorageSystemOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.agentArns = output.agentArns
            self.cloudWatchLogGroupArn = output.cloudWatchLogGroupArn
            self.connectivityStatus = output.connectivityStatus
            self.creationTime = output.creationTime
            self.errorMessage = output.errorMessage
            self.name = output.name
            self.secretsManagerArn = output.secretsManagerArn
            self.serverConfiguration = output.serverConfiguration
            self.storageSystemArn = output.storageSystemArn
            self.systemType = output.systemType
        } else {
            self.agentArns = nil
            self.cloudWatchLogGroupArn = nil
            self.connectivityStatus = nil
            self.creationTime = nil
            self.errorMessage = nil
            self.name = nil
            self.secretsManagerArn = nil
            self.serverConfiguration = nil
            self.storageSystemArn = nil
            self.systemType = nil
        }
    }
}

public struct DescribeStorageSystemOutputResponse: Swift.Equatable {
    /// The ARN of the DataSync agent that connects to and reads from your on-premises storage system.
    public var agentArns: [Swift.String]?
    /// The ARN of the Amazon CloudWatch log group that's used to monitor and log discovery job events.
    public var cloudWatchLogGroupArn: Swift.String?
    /// Indicates whether your DataSync agent can connect to your on-premises storage system.
    public var connectivityStatus: DataSyncClientTypes.StorageSystemConnectivityStatus?
    /// The time when you added the on-premises storage system to DataSync Discovery.
    public var creationTime: ClientRuntime.Date?
    /// Describes the connectivity error that the DataSync agent is encountering with your on-premises storage system.
    public var errorMessage: Swift.String?
    /// The name that you gave your on-premises storage system when adding it to DataSync Discovery.
    public var name: Swift.String?
    /// The ARN of the secret that stores your on-premises storage system's credentials. DataSync Discovery stores these credentials in [Secrets Manager](https://docs.aws.amazon.com/datasync/latest/userguide/discovery-configure-storage.html#discovery-add-storage).
    public var secretsManagerArn: Swift.String?
    /// The server name and network port required to connect with your on-premises storage system's management interface.
    public var serverConfiguration: DataSyncClientTypes.DiscoveryServerConfiguration?
    /// The ARN of the on-premises storage system that the discovery job looked at.
    public var storageSystemArn: Swift.String?
    /// The type of on-premises storage system. DataSync Discovery currently only supports NetApp Fabric-Attached Storage (FAS) and All Flash FAS (AFF) systems running ONTAP 9.7 or later.
    public var systemType: DataSyncClientTypes.DiscoverySystemType?

    public init(
        agentArns: [Swift.String]? = nil,
        cloudWatchLogGroupArn: Swift.String? = nil,
        connectivityStatus: DataSyncClientTypes.StorageSystemConnectivityStatus? = nil,
        creationTime: ClientRuntime.Date? = nil,
        errorMessage: Swift.String? = nil,
        name: Swift.String? = nil,
        secretsManagerArn: Swift.String? = nil,
        serverConfiguration: DataSyncClientTypes.DiscoveryServerConfiguration? = nil,
        storageSystemArn: Swift.String? = nil,
        systemType: DataSyncClientTypes.DiscoverySystemType? = nil
    )
    {
        self.agentArns = agentArns
        self.cloudWatchLogGroupArn = cloudWatchLogGroupArn
        self.connectivityStatus = connectivityStatus
        self.creationTime = creationTime
        self.errorMessage = errorMessage
        self.name = name
        self.secretsManagerArn = secretsManagerArn
        self.serverConfiguration = serverConfiguration
        self.storageSystemArn = storageSystemArn
        self.systemType = systemType
    }
}

struct DescribeStorageSystemOutputResponseBody: Swift.Equatable {
    let storageSystemArn: Swift.String?
    let serverConfiguration: DataSyncClientTypes.DiscoveryServerConfiguration?
    let systemType: DataSyncClientTypes.DiscoverySystemType?
    let agentArns: [Swift.String]?
    let name: Swift.String?
    let errorMessage: Swift.String?
    let connectivityStatus: DataSyncClientTypes.StorageSystemConnectivityStatus?
    let cloudWatchLogGroupArn: Swift.String?
    let creationTime: ClientRuntime.Date?
    let secretsManagerArn: Swift.String?
}

extension DescribeStorageSystemOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case connectivityStatus = "ConnectivityStatus"
        case creationTime = "CreationTime"
        case errorMessage = "ErrorMessage"
        case name = "Name"
        case secretsManagerArn = "SecretsManagerArn"
        case serverConfiguration = "ServerConfiguration"
        case storageSystemArn = "StorageSystemArn"
        case systemType = "SystemType"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageSystemArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageSystemArn)
        storageSystemArn = storageSystemArnDecoded
        let serverConfigurationDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.DiscoveryServerConfiguration.self, forKey: .serverConfiguration)
        serverConfiguration = serverConfigurationDecoded
        let systemTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.DiscoverySystemType.self, forKey: .systemType)
        systemType = systemTypeDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
        let connectivityStatusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.StorageSystemConnectivityStatus.self, forKey: .connectivityStatus)
        connectivityStatus = connectivityStatusDecoded
        let cloudWatchLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogGroupArn)
        cloudWatchLogGroupArn = cloudWatchLogGroupArnDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let secretsManagerArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretsManagerArn)
        secretsManagerArn = secretsManagerArnDecoded
    }
}

extension DescribeStorageSystemResourceMetricsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case discoveryJobArn = "DiscoveryJobArn"
        case endTime = "EndTime"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let discoveryJobArn = self.discoveryJobArn {
            try encodeContainer.encode(discoveryJobArn, forKey: .discoveryJobArn)
        }
        if let endTime = self.endTime {
            try encodeContainer.encodeTimestamp(endTime, format: .epochSeconds, forKey: .endTime)
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let startTime = self.startTime {
            try encodeContainer.encodeTimestamp(startTime, format: .epochSeconds, forKey: .startTime)
        }
    }
}

extension DescribeStorageSystemResourceMetricsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeStorageSystemResourceMetricsInput: Swift.Equatable {
    /// Specifies the Amazon Resource Name (ARN) of the discovery job that collects information about your on-premises storage system.
    /// This member is required.
    public var discoveryJobArn: Swift.String?
    /// Specifies a time within the total duration that the discovery job ran. To see information gathered during a certain time frame, use this parameter with StartTime.
    public var endTime: ClientRuntime.Date?
    /// Specifies how many results that you want in the response.
    public var maxResults: Swift.Int?
    /// Specifies an opaque string that indicates the position to begin the next list of results in the response.
    public var nextToken: Swift.String?
    /// Specifies the universally unique identifier (UUID) of the storage system resource that you want information about.
    /// This member is required.
    public var resourceId: Swift.String?
    /// Specifies the kind of storage system resource that you want information about.
    /// This member is required.
    public var resourceType: DataSyncClientTypes.DiscoveryResourceType?
    /// Specifies a time within the total duration that the discovery job ran. To see information gathered during a certain time frame, use this parameter with EndTime.
    public var startTime: ClientRuntime.Date?

    public init(
        discoveryJobArn: Swift.String? = nil,
        endTime: ClientRuntime.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: DataSyncClientTypes.DiscoveryResourceType? = nil,
        startTime: ClientRuntime.Date? = nil
    )
    {
        self.discoveryJobArn = discoveryJobArn
        self.endTime = endTime
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceId = resourceId
        self.resourceType = resourceType
        self.startTime = startTime
    }
}

struct DescribeStorageSystemResourceMetricsInputBody: Swift.Equatable {
    let discoveryJobArn: Swift.String?
    let resourceType: DataSyncClientTypes.DiscoveryResourceType?
    let resourceId: Swift.String?
    let startTime: ClientRuntime.Date?
    let endTime: ClientRuntime.Date?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeStorageSystemResourceMetricsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case discoveryJobArn = "DiscoveryJobArn"
        case endTime = "EndTime"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case startTime = "StartTime"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let discoveryJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .discoveryJobArn)
        discoveryJobArn = discoveryJobArnDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.DiscoveryResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .endTime)
        endTime = endTimeDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public enum DescribeStorageSystemResourceMetricsOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeStorageSystemResourceMetricsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeStorageSystemResourceMetricsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.metrics = output.metrics
            self.nextToken = output.nextToken
        } else {
            self.metrics = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeStorageSystemResourceMetricsOutputResponse: Swift.Equatable {
    /// The details that your discovery job collected about your storage system resource.
    public var metrics: [DataSyncClientTypes.ResourceMetrics]?
    /// The opaque string that indicates the position to begin the next list of results in the response.
    public var nextToken: Swift.String?

    public init(
        metrics: [DataSyncClientTypes.ResourceMetrics]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.metrics = metrics
        self.nextToken = nextToken
    }
}

struct DescribeStorageSystemResourceMetricsOutputResponseBody: Swift.Equatable {
    let metrics: [DataSyncClientTypes.ResourceMetrics]?
    let nextToken: Swift.String?
}

extension DescribeStorageSystemResourceMetricsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case metrics = "Metrics"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.ResourceMetrics?].self, forKey: .metrics)
        var metricsDecoded0:[DataSyncClientTypes.ResourceMetrics]? = nil
        if let metricsContainer = metricsContainer {
            metricsDecoded0 = [DataSyncClientTypes.ResourceMetrics]()
            for structure0 in metricsContainer {
                if let structure0 = structure0 {
                    metricsDecoded0?.append(structure0)
                }
            }
        }
        metrics = metricsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeStorageSystemResourcesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case discoveryJobArn = "DiscoveryJobArn"
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceIds = "ResourceIds"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let discoveryJobArn = self.discoveryJobArn {
            try encodeContainer.encode(discoveryJobArn, forKey: .discoveryJobArn)
        }
        if let filter = filter {
            var filterContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .filter)
            for (dictKey0, resourceFilters0) in filter {
                var resourceFilters0Container = filterContainer.nestedUnkeyedContainer(forKey: ClientRuntime.Key(stringValue: dictKey0))
                for ptolemystring1 in resourceFilters0 {
                    try resourceFilters0Container.encode(ptolemystring1)
                }
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceIds = resourceIds {
            var resourceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceIds)
            for resourceid0 in resourceIds {
                try resourceIdsContainer.encode(resourceid0)
            }
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }
}

extension DescribeStorageSystemResourcesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeStorageSystemResourcesInput: Swift.Equatable {
    /// Specifies the Amazon Resource Name (ARN) of the discovery job that's collecting data from your on-premises storage system.
    /// This member is required.
    public var discoveryJobArn: Swift.String?
    /// Filters the storage system resources that you want returned. For example, this might be volumes associated with a specific storage virtual machine (SVM).
    public var filter: [Swift.String:[Swift.String]]?
    /// Specifies the maximum number of storage system resources that you want to list in a response.
    public var maxResults: Swift.Int?
    /// Specifies an opaque string that indicates the position to begin the next list of results in the response.
    public var nextToken: Swift.String?
    /// Specifies the universally unique identifiers (UUIDs) of the storage system resources that you want information about. You can't use this parameter in combination with the Filter parameter.
    public var resourceIds: [Swift.String]?
    /// Specifies what kind of storage system resources that you want information about.
    /// This member is required.
    public var resourceType: DataSyncClientTypes.DiscoveryResourceType?

    public init(
        discoveryJobArn: Swift.String? = nil,
        filter: [Swift.String:[Swift.String]]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceIds: [Swift.String]? = nil,
        resourceType: DataSyncClientTypes.DiscoveryResourceType? = nil
    )
    {
        self.discoveryJobArn = discoveryJobArn
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceIds = resourceIds
        self.resourceType = resourceType
    }
}

struct DescribeStorageSystemResourcesInputBody: Swift.Equatable {
    let discoveryJobArn: Swift.String?
    let resourceType: DataSyncClientTypes.DiscoveryResourceType?
    let resourceIds: [Swift.String]?
    let filter: [Swift.String:[Swift.String]]?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension DescribeStorageSystemResourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case discoveryJobArn = "DiscoveryJobArn"
        case filter = "Filter"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceIds = "ResourceIds"
        case resourceType = "ResourceType"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let discoveryJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .discoveryJobArn)
        discoveryJobArn = discoveryJobArnDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.DiscoveryResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let resourceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceIds)
        var resourceIdsDecoded0:[Swift.String]? = nil
        if let resourceIdsContainer = resourceIdsContainer {
            resourceIdsDecoded0 = [Swift.String]()
            for string0 in resourceIdsContainer {
                if let string0 = string0 {
                    resourceIdsDecoded0?.append(string0)
                }
            }
        }
        resourceIds = resourceIdsDecoded0
        let filterContainer = try containerValues.decodeIfPresent([Swift.String: [Swift.String?]?].self, forKey: .filter)
        var filterDecoded0: [Swift.String:[Swift.String]]? = nil
        if let filterContainer = filterContainer {
            filterDecoded0 = [Swift.String:[Swift.String]]()
            for (key0, filtermembers0) in filterContainer {
                var filtermembers0Decoded0: [Swift.String]? = nil
                if let filtermembers0 = filtermembers0 {
                    filtermembers0Decoded0 = [Swift.String]()
                    for string1 in filtermembers0 {
                        if let string1 = string1 {
                            filtermembers0Decoded0?.append(string1)
                        }
                    }
                }
                filterDecoded0?[key0] = filtermembers0Decoded0
            }
        }
        filter = filterDecoded0
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public enum DescribeStorageSystemResourcesOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeStorageSystemResourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeStorageSystemResourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.resourceDetails = output.resourceDetails
        } else {
            self.nextToken = nil
            self.resourceDetails = nil
        }
    }
}

public struct DescribeStorageSystemResourcesOutputResponse: Swift.Equatable {
    /// The opaque string that indicates the position to begin the next list of results in the response.
    public var nextToken: Swift.String?
    /// The information collected about your storage system's resources. A response can also include Amazon Web Services storage service recommendations. For more information, see [storage resource information](https://docs.aws.amazon.com/datasync/latest/userguide/discovery-understand-findings.html) collected by and [recommendations](https://docs.aws.amazon.com/datasync/latest/userguide/discovery-understand-recommendations.html) provided by DataSync Discovery.
    public var resourceDetails: DataSyncClientTypes.ResourceDetails?

    public init(
        nextToken: Swift.String? = nil,
        resourceDetails: DataSyncClientTypes.ResourceDetails? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceDetails = resourceDetails
    }
}

struct DescribeStorageSystemResourcesOutputResponseBody: Swift.Equatable {
    let resourceDetails: DataSyncClientTypes.ResourceDetails?
    let nextToken: Swift.String?
}

extension DescribeStorageSystemResourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case resourceDetails = "ResourceDetails"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceDetailsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ResourceDetails.self, forKey: .resourceDetails)
        resourceDetails = resourceDetailsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeTaskExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskExecutionArn = "TaskExecutionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let taskExecutionArn = self.taskExecutionArn {
            try encodeContainer.encode(taskExecutionArn, forKey: .taskExecutionArn)
        }
    }
}

extension DescribeTaskExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// DescribeTaskExecutionRequest
public struct DescribeTaskExecutionInput: Swift.Equatable {
    /// Specifies the Amazon Resource Name (ARN) of the task execution that you want information about.
    /// This member is required.
    public var taskExecutionArn: Swift.String?

    public init(
        taskExecutionArn: Swift.String? = nil
    )
    {
        self.taskExecutionArn = taskExecutionArn
    }
}

struct DescribeTaskExecutionInputBody: Swift.Equatable {
    let taskExecutionArn: Swift.String?
}

extension DescribeTaskExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskExecutionArn = "TaskExecutionArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskExecutionArn)
        taskExecutionArn = taskExecutionArnDecoded
    }
}

public enum DescribeTaskExecutionOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeTaskExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeTaskExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.bytesCompressed = output.bytesCompressed
            self.bytesTransferred = output.bytesTransferred
            self.bytesWritten = output.bytesWritten
            self.estimatedBytesToTransfer = output.estimatedBytesToTransfer
            self.estimatedFilesToDelete = output.estimatedFilesToDelete
            self.estimatedFilesToTransfer = output.estimatedFilesToTransfer
            self.excludes = output.excludes
            self.filesDeleted = output.filesDeleted
            self.filesSkipped = output.filesSkipped
            self.filesTransferred = output.filesTransferred
            self.filesVerified = output.filesVerified
            self.includes = output.includes
            self.options = output.options
            self.reportResult = output.reportResult
            self.result = output.result
            self.startTime = output.startTime
            self.status = output.status
            self.taskExecutionArn = output.taskExecutionArn
            self.taskReportConfig = output.taskReportConfig
        } else {
            self.bytesCompressed = 0
            self.bytesTransferred = 0
            self.bytesWritten = 0
            self.estimatedBytesToTransfer = 0
            self.estimatedFilesToDelete = 0
            self.estimatedFilesToTransfer = 0
            self.excludes = nil
            self.filesDeleted = 0
            self.filesSkipped = 0
            self.filesTransferred = 0
            self.filesVerified = 0
            self.includes = nil
            self.options = nil
            self.reportResult = nil
            self.result = nil
            self.startTime = nil
            self.status = nil
            self.taskExecutionArn = nil
            self.taskReportConfig = nil
        }
    }
}

/// DescribeTaskExecutionResponse
public struct DescribeTaskExecutionOutputResponse: Swift.Equatable {
    /// The physical number of bytes transferred over the network after compression was applied. In most cases, this number is less than BytesTransferred unless the data isn't compressible.
    public var bytesCompressed: Swift.Int
    /// The total number of bytes that are involved in the transfer. For the number of bytes sent over the network, see BytesCompressed.
    public var bytesTransferred: Swift.Int
    /// The number of logical bytes written to the destination location.
    public var bytesWritten: Swift.Int
    /// The estimated physical number of bytes that will transfer over the network.
    public var estimatedBytesToTransfer: Swift.Int
    /// The expected number of files, objects, and directories that DataSync will delete in your destination location. If you don't [configure your task](https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html) to delete data in the destination that isn't in the source, the value is always 0.
    public var estimatedFilesToDelete: Swift.Int
    /// The expected number of files, objects, and directories that DataSync will transfer over the network. This value is calculated during the task execution's PREPARING phase before the TRANSFERRING phase. The calculation is based on comparing the content of the source and destination locations and finding the difference that needs to be transferred.
    public var estimatedFilesToTransfer: Swift.Int
    /// A list of filter rules that exclude specific data during your transfer. For more information and examples, see [Filtering data transferred by DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html).
    public var excludes: [DataSyncClientTypes.FilterRule]?
    /// The number of files, objects, and directories that DataSync deleted in your destination location. If you don't [configure your task](https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html) to delete data in the destination that isn't in the source, the value is always 0.
    public var filesDeleted: Swift.Int
    /// The number of files, objects, and directories that DataSync skipped during your transfer.
    public var filesSkipped: Swift.Int
    /// The actual number of files, objects, and directories that DataSync transferred over the network. This value is updated periodically during the task execution's TRANSFERRING phase when something is read from the source and sent over the network. If DataSync fails to transfer something, this value can be less than EstimatedFilesToTransfer. In some cases, this value can also be greater than EstimatedFilesToTransfer. This element is implementation-specific for some location types, so don't use it as an exact indication of what transferred or to monitor your task execution.
    public var filesTransferred: Swift.Int
    /// The number of files, objects, and directories that DataSync verified during your transfer.
    public var filesVerified: Swift.Int
    /// A list of filter rules that include specific data during your transfer. For more information and examples, see [Filtering data transferred by DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html).
    public var includes: [DataSyncClientTypes.FilterRule]?
    /// Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options. Each option has a default value. Unless you need to, you don't have to configure any of these options before starting your task.
    public var options: DataSyncClientTypes.Options?
    /// Indicates whether DataSync generated a complete [task report](https://docs.aws.amazon.com/datasync/latest/userguide/creating-task-reports.html) for your transfer.
    public var reportResult: DataSyncClientTypes.ReportResult?
    /// The result of the task execution.
    public var result: DataSyncClientTypes.TaskExecutionResultDetail?
    /// The time when the task execution started.
    public var startTime: ClientRuntime.Date?
    /// The status of the task execution.
    public var status: DataSyncClientTypes.TaskExecutionStatus?
    /// The ARN of the task execution that you wanted information about. TaskExecutionArn is hierarchical and includes TaskArn for the task that was executed. For example, a TaskExecution value with the ARN arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2/execution/exec-08ef1e88ec491019b executed the task with the ARN arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2.
    public var taskExecutionArn: Swift.String?
    /// The configuration of your task report, which provides detailed information about for your DataSync transfer.
    public var taskReportConfig: DataSyncClientTypes.TaskReportConfig?

    public init(
        bytesCompressed: Swift.Int = 0,
        bytesTransferred: Swift.Int = 0,
        bytesWritten: Swift.Int = 0,
        estimatedBytesToTransfer: Swift.Int = 0,
        estimatedFilesToDelete: Swift.Int = 0,
        estimatedFilesToTransfer: Swift.Int = 0,
        excludes: [DataSyncClientTypes.FilterRule]? = nil,
        filesDeleted: Swift.Int = 0,
        filesSkipped: Swift.Int = 0,
        filesTransferred: Swift.Int = 0,
        filesVerified: Swift.Int = 0,
        includes: [DataSyncClientTypes.FilterRule]? = nil,
        options: DataSyncClientTypes.Options? = nil,
        reportResult: DataSyncClientTypes.ReportResult? = nil,
        result: DataSyncClientTypes.TaskExecutionResultDetail? = nil,
        startTime: ClientRuntime.Date? = nil,
        status: DataSyncClientTypes.TaskExecutionStatus? = nil,
        taskExecutionArn: Swift.String? = nil,
        taskReportConfig: DataSyncClientTypes.TaskReportConfig? = nil
    )
    {
        self.bytesCompressed = bytesCompressed
        self.bytesTransferred = bytesTransferred
        self.bytesWritten = bytesWritten
        self.estimatedBytesToTransfer = estimatedBytesToTransfer
        self.estimatedFilesToDelete = estimatedFilesToDelete
        self.estimatedFilesToTransfer = estimatedFilesToTransfer
        self.excludes = excludes
        self.filesDeleted = filesDeleted
        self.filesSkipped = filesSkipped
        self.filesTransferred = filesTransferred
        self.filesVerified = filesVerified
        self.includes = includes
        self.options = options
        self.reportResult = reportResult
        self.result = result
        self.startTime = startTime
        self.status = status
        self.taskExecutionArn = taskExecutionArn
        self.taskReportConfig = taskReportConfig
    }
}

struct DescribeTaskExecutionOutputResponseBody: Swift.Equatable {
    let taskExecutionArn: Swift.String?
    let status: DataSyncClientTypes.TaskExecutionStatus?
    let options: DataSyncClientTypes.Options?
    let excludes: [DataSyncClientTypes.FilterRule]?
    let includes: [DataSyncClientTypes.FilterRule]?
    let startTime: ClientRuntime.Date?
    let estimatedFilesToTransfer: Swift.Int
    let estimatedBytesToTransfer: Swift.Int
    let filesTransferred: Swift.Int
    let bytesWritten: Swift.Int
    let bytesTransferred: Swift.Int
    let result: DataSyncClientTypes.TaskExecutionResultDetail?
    let bytesCompressed: Swift.Int
    let taskReportConfig: DataSyncClientTypes.TaskReportConfig?
    let filesDeleted: Swift.Int
    let filesSkipped: Swift.Int
    let filesVerified: Swift.Int
    let reportResult: DataSyncClientTypes.ReportResult?
    let estimatedFilesToDelete: Swift.Int
}

extension DescribeTaskExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bytesCompressed = "BytesCompressed"
        case bytesTransferred = "BytesTransferred"
        case bytesWritten = "BytesWritten"
        case estimatedBytesToTransfer = "EstimatedBytesToTransfer"
        case estimatedFilesToDelete = "EstimatedFilesToDelete"
        case estimatedFilesToTransfer = "EstimatedFilesToTransfer"
        case excludes = "Excludes"
        case filesDeleted = "FilesDeleted"
        case filesSkipped = "FilesSkipped"
        case filesTransferred = "FilesTransferred"
        case filesVerified = "FilesVerified"
        case includes = "Includes"
        case options = "Options"
        case reportResult = "ReportResult"
        case result = "Result"
        case startTime = "StartTime"
        case status = "Status"
        case taskExecutionArn = "TaskExecutionArn"
        case taskReportConfig = "TaskReportConfig"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskExecutionArn)
        taskExecutionArn = taskExecutionArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskExecutionStatus.self, forKey: .status)
        status = statusDecoded
        let optionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Options.self, forKey: .options)
        options = optionsDecoded
        let excludesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .excludes)
        var excludesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let excludesContainer = excludesContainer {
            excludesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in excludesContainer {
                if let structure0 = structure0 {
                    excludesDecoded0?.append(structure0)
                }
            }
        }
        excludes = excludesDecoded0
        let includesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .includes)
        var includesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let includesContainer = includesContainer {
            includesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in includesContainer {
                if let structure0 = structure0 {
                    includesDecoded0?.append(structure0)
                }
            }
        }
        includes = includesDecoded0
        let startTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startTime)
        startTime = startTimeDecoded
        let estimatedFilesToTransferDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedFilesToTransfer) ?? 0
        estimatedFilesToTransfer = estimatedFilesToTransferDecoded
        let estimatedBytesToTransferDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedBytesToTransfer) ?? 0
        estimatedBytesToTransfer = estimatedBytesToTransferDecoded
        let filesTransferredDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .filesTransferred) ?? 0
        filesTransferred = filesTransferredDecoded
        let bytesWrittenDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bytesWritten) ?? 0
        bytesWritten = bytesWrittenDecoded
        let bytesTransferredDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bytesTransferred) ?? 0
        bytesTransferred = bytesTransferredDecoded
        let resultDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskExecutionResultDetail.self, forKey: .result)
        result = resultDecoded
        let bytesCompressedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bytesCompressed) ?? 0
        bytesCompressed = bytesCompressedDecoded
        let taskReportConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskReportConfig.self, forKey: .taskReportConfig)
        taskReportConfig = taskReportConfigDecoded
        let filesDeletedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .filesDeleted) ?? 0
        filesDeleted = filesDeletedDecoded
        let filesSkippedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .filesSkipped) ?? 0
        filesSkipped = filesSkippedDecoded
        let filesVerifiedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .filesVerified) ?? 0
        filesVerified = filesVerifiedDecoded
        let reportResultDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ReportResult.self, forKey: .reportResult)
        reportResult = reportResultDecoded
        let estimatedFilesToDeleteDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .estimatedFilesToDelete) ?? 0
        estimatedFilesToDelete = estimatedFilesToDeleteDecoded
    }
}

extension DescribeTaskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskArn = "TaskArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let taskArn = self.taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
    }
}

extension DescribeTaskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// DescribeTaskRequest
public struct DescribeTaskInput: Swift.Equatable {
    /// Specifies the Amazon Resource Name (ARN) of the transfer task.
    /// This member is required.
    public var taskArn: Swift.String?

    public init(
        taskArn: Swift.String? = nil
    )
    {
        self.taskArn = taskArn
    }
}

struct DescribeTaskInputBody: Swift.Equatable {
    let taskArn: Swift.String?
}

extension DescribeTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskArn = "TaskArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
    }
}

public enum DescribeTaskOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DescribeTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: DescribeTaskOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.cloudWatchLogGroupArn = output.cloudWatchLogGroupArn
            self.creationTime = output.creationTime
            self.currentTaskExecutionArn = output.currentTaskExecutionArn
            self.destinationLocationArn = output.destinationLocationArn
            self.destinationNetworkInterfaceArns = output.destinationNetworkInterfaceArns
            self.errorCode = output.errorCode
            self.errorDetail = output.errorDetail
            self.excludes = output.excludes
            self.includes = output.includes
            self.name = output.name
            self.options = output.options
            self.schedule = output.schedule
            self.sourceLocationArn = output.sourceLocationArn
            self.sourceNetworkInterfaceArns = output.sourceNetworkInterfaceArns
            self.status = output.status
            self.taskArn = output.taskArn
            self.taskReportConfig = output.taskReportConfig
        } else {
            self.cloudWatchLogGroupArn = nil
            self.creationTime = nil
            self.currentTaskExecutionArn = nil
            self.destinationLocationArn = nil
            self.destinationNetworkInterfaceArns = nil
            self.errorCode = nil
            self.errorDetail = nil
            self.excludes = nil
            self.includes = nil
            self.name = nil
            self.options = nil
            self.schedule = nil
            self.sourceLocationArn = nil
            self.sourceNetworkInterfaceArns = nil
            self.status = nil
            self.taskArn = nil
            self.taskReportConfig = nil
        }
    }
}

/// DescribeTaskResponse
public struct DescribeTaskOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the Amazon CloudWatch log group that was used to monitor and log events in the task. For more information on these groups, see Working with Log Groups and Log Streams in the Amazon CloudWatch User Guide.
    public var cloudWatchLogGroupArn: Swift.String?
    /// The time that the task was created.
    public var creationTime: ClientRuntime.Date?
    /// The Amazon Resource Name (ARN) of the task execution that is transferring files.
    public var currentTaskExecutionArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the Amazon Web Services storage resource's location.
    public var destinationLocationArn: Swift.String?
    /// The Amazon Resource Names (ARNs) of the network interfaces created for your destination location. For more information, see [Network interface requirements](https://docs.aws.amazon.com/datasync/latest/userguide/datasync-network.html#required-network-interfaces).
    public var destinationNetworkInterfaceArns: [Swift.String]?
    /// Errors that DataSync encountered during execution of the task. You can use this error code to help troubleshoot issues.
    public var errorCode: Swift.String?
    /// Detailed description of an error that was encountered during the task execution. You can use this information to help troubleshoot issues.
    public var errorDetail: Swift.String?
    /// A list of filter rules that exclude specific data during your transfer. For more information and examples, see [Filtering data transferred by DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html).
    public var excludes: [DataSyncClientTypes.FilterRule]?
    /// A list of filter rules that include specific data during your transfer. For more information and examples, see [Filtering data transferred by DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html).
    public var includes: [DataSyncClientTypes.FilterRule]?
    /// The name of the task that was described.
    public var name: Swift.String?
    /// The configuration options that control the behavior of the StartTaskExecution operation. Some options include preserving file or object metadata and verifying data integrity. You can override these options for each task execution. For more information, see [StartTaskExecution](https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html).
    public var options: DataSyncClientTypes.Options?
    /// The schedule used to periodically transfer files from a source to a destination location.
    public var schedule: DataSyncClientTypes.TaskSchedule?
    /// The Amazon Resource Name (ARN) of the source file system's location.
    public var sourceLocationArn: Swift.String?
    /// The Amazon Resource Names (ARNs) of the network interfaces created for your source location. For more information, see [Network interface requirements](https://docs.aws.amazon.com/datasync/latest/userguide/datasync-network.html#required-network-interfaces).
    public var sourceNetworkInterfaceArns: [Swift.String]?
    /// The status of the task that was described. For detailed information about task execution statuses, see Understanding Task Statuses in the DataSync User Guide.
    public var status: DataSyncClientTypes.TaskStatus?
    /// The Amazon Resource Name (ARN) of the task that was described.
    public var taskArn: Swift.String?
    /// The configuration of your task report. For more information, see [Creating a task report](https://docs.aws.amazon.com/https:/docs.aws.amazon.com/datasync/latest/userguide/creating-task-reports.html).
    public var taskReportConfig: DataSyncClientTypes.TaskReportConfig?

    public init(
        cloudWatchLogGroupArn: Swift.String? = nil,
        creationTime: ClientRuntime.Date? = nil,
        currentTaskExecutionArn: Swift.String? = nil,
        destinationLocationArn: Swift.String? = nil,
        destinationNetworkInterfaceArns: [Swift.String]? = nil,
        errorCode: Swift.String? = nil,
        errorDetail: Swift.String? = nil,
        excludes: [DataSyncClientTypes.FilterRule]? = nil,
        includes: [DataSyncClientTypes.FilterRule]? = nil,
        name: Swift.String? = nil,
        options: DataSyncClientTypes.Options? = nil,
        schedule: DataSyncClientTypes.TaskSchedule? = nil,
        sourceLocationArn: Swift.String? = nil,
        sourceNetworkInterfaceArns: [Swift.String]? = nil,
        status: DataSyncClientTypes.TaskStatus? = nil,
        taskArn: Swift.String? = nil,
        taskReportConfig: DataSyncClientTypes.TaskReportConfig? = nil
    )
    {
        self.cloudWatchLogGroupArn = cloudWatchLogGroupArn
        self.creationTime = creationTime
        self.currentTaskExecutionArn = currentTaskExecutionArn
        self.destinationLocationArn = destinationLocationArn
        self.destinationNetworkInterfaceArns = destinationNetworkInterfaceArns
        self.errorCode = errorCode
        self.errorDetail = errorDetail
        self.excludes = excludes
        self.includes = includes
        self.name = name
        self.options = options
        self.schedule = schedule
        self.sourceLocationArn = sourceLocationArn
        self.sourceNetworkInterfaceArns = sourceNetworkInterfaceArns
        self.status = status
        self.taskArn = taskArn
        self.taskReportConfig = taskReportConfig
    }
}

struct DescribeTaskOutputResponseBody: Swift.Equatable {
    let taskArn: Swift.String?
    let status: DataSyncClientTypes.TaskStatus?
    let name: Swift.String?
    let currentTaskExecutionArn: Swift.String?
    let sourceLocationArn: Swift.String?
    let destinationLocationArn: Swift.String?
    let cloudWatchLogGroupArn: Swift.String?
    let sourceNetworkInterfaceArns: [Swift.String]?
    let destinationNetworkInterfaceArns: [Swift.String]?
    let options: DataSyncClientTypes.Options?
    let excludes: [DataSyncClientTypes.FilterRule]?
    let schedule: DataSyncClientTypes.TaskSchedule?
    let errorCode: Swift.String?
    let errorDetail: Swift.String?
    let creationTime: ClientRuntime.Date?
    let includes: [DataSyncClientTypes.FilterRule]?
    let taskReportConfig: DataSyncClientTypes.TaskReportConfig?
}

extension DescribeTaskOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case creationTime = "CreationTime"
        case currentTaskExecutionArn = "CurrentTaskExecutionArn"
        case destinationLocationArn = "DestinationLocationArn"
        case destinationNetworkInterfaceArns = "DestinationNetworkInterfaceArns"
        case errorCode = "ErrorCode"
        case errorDetail = "ErrorDetail"
        case excludes = "Excludes"
        case includes = "Includes"
        case name = "Name"
        case options = "Options"
        case schedule = "Schedule"
        case sourceLocationArn = "SourceLocationArn"
        case sourceNetworkInterfaceArns = "SourceNetworkInterfaceArns"
        case status = "Status"
        case taskArn = "TaskArn"
        case taskReportConfig = "TaskReportConfig"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskStatus.self, forKey: .status)
        status = statusDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let currentTaskExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentTaskExecutionArn)
        currentTaskExecutionArn = currentTaskExecutionArnDecoded
        let sourceLocationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceLocationArn)
        sourceLocationArn = sourceLocationArnDecoded
        let destinationLocationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationLocationArn)
        destinationLocationArn = destinationLocationArnDecoded
        let cloudWatchLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogGroupArn)
        cloudWatchLogGroupArn = cloudWatchLogGroupArnDecoded
        let sourceNetworkInterfaceArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .sourceNetworkInterfaceArns)
        var sourceNetworkInterfaceArnsDecoded0:[Swift.String]? = nil
        if let sourceNetworkInterfaceArnsContainer = sourceNetworkInterfaceArnsContainer {
            sourceNetworkInterfaceArnsDecoded0 = [Swift.String]()
            for string0 in sourceNetworkInterfaceArnsContainer {
                if let string0 = string0 {
                    sourceNetworkInterfaceArnsDecoded0?.append(string0)
                }
            }
        }
        sourceNetworkInterfaceArns = sourceNetworkInterfaceArnsDecoded0
        let destinationNetworkInterfaceArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .destinationNetworkInterfaceArns)
        var destinationNetworkInterfaceArnsDecoded0:[Swift.String]? = nil
        if let destinationNetworkInterfaceArnsContainer = destinationNetworkInterfaceArnsContainer {
            destinationNetworkInterfaceArnsDecoded0 = [Swift.String]()
            for string0 in destinationNetworkInterfaceArnsContainer {
                if let string0 = string0 {
                    destinationNetworkInterfaceArnsDecoded0?.append(string0)
                }
            }
        }
        destinationNetworkInterfaceArns = destinationNetworkInterfaceArnsDecoded0
        let optionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Options.self, forKey: .options)
        options = optionsDecoded
        let excludesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .excludes)
        var excludesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let excludesContainer = excludesContainer {
            excludesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in excludesContainer {
                if let structure0 = structure0 {
                    excludesDecoded0?.append(structure0)
                }
            }
        }
        excludes = excludesDecoded0
        let scheduleDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskSchedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorDetailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorDetail)
        errorDetail = errorDetailDecoded
        let creationTimeDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let includesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .includes)
        var includesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let includesContainer = includesContainer {
            includesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in includesContainer {
                if let structure0 = structure0 {
                    includesDecoded0?.append(structure0)
                }
            }
        }
        includes = includesDecoded0
        let taskReportConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskReportConfig.self, forKey: .taskReportConfig)
        taskReportConfig = taskReportConfigDecoded
    }
}

extension DataSyncClientTypes.DiscoveryJobListEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case discoveryJobArn = "DiscoveryJobArn"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let discoveryJobArn = self.discoveryJobArn {
            try encodeContainer.encode(discoveryJobArn, forKey: .discoveryJobArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let discoveryJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .discoveryJobArn)
        discoveryJobArn = discoveryJobArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.DiscoveryJobStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension DataSyncClientTypes {
    /// The details about a specific DataSync discovery job.
    public struct DiscoveryJobListEntry: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of a discovery job.
        public var discoveryJobArn: Swift.String?
        /// The status of a discovery job. For more information, see [Discovery job statuses](https://docs.aws.amazon.com/datasync/latest/userguide/discovery-job-statuses.html#discovery-job-statuses-table).
        public var status: DataSyncClientTypes.DiscoveryJobStatus?

        public init(
            discoveryJobArn: Swift.String? = nil,
            status: DataSyncClientTypes.DiscoveryJobStatus? = nil
        )
        {
            self.discoveryJobArn = discoveryJobArn
            self.status = status
        }
    }

}

extension DataSyncClientTypes {
    public enum DiscoveryJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case completedWithIssues
        case failed
        case running
        case stopped
        case terminated
        case warning
        case sdkUnknown(Swift.String)

        public static var allCases: [DiscoveryJobStatus] {
            return [
                .completed,
                .completedWithIssues,
                .failed,
                .running,
                .stopped,
                .terminated,
                .warning,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .completedWithIssues: return "COMPLETED_WITH_ISSUES"
            case .failed: return "FAILED"
            case .running: return "RUNNING"
            case .stopped: return "STOPPED"
            case .terminated: return "TERMINATED"
            case .warning: return "WARNING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DiscoveryJobStatus(rawValue: rawValue) ?? DiscoveryJobStatus.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum DiscoveryResourceFilter: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case svm
        case sdkUnknown(Swift.String)

        public static var allCases: [DiscoveryResourceFilter] {
            return [
                .svm,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .svm: return "SVM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DiscoveryResourceFilter(rawValue: rawValue) ?? DiscoveryResourceFilter.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum DiscoveryResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cluster
        case svm
        case volume
        case sdkUnknown(Swift.String)

        public static var allCases: [DiscoveryResourceType] {
            return [
                .cluster,
                .svm,
                .volume,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cluster: return "CLUSTER"
            case .svm: return "SVM"
            case .volume: return "VOLUME"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DiscoveryResourceType(rawValue: rawValue) ?? DiscoveryResourceType.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.DiscoveryServerConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case serverHostname = "ServerHostname"
        case serverPort = "ServerPort"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let serverHostname = self.serverHostname {
            try encodeContainer.encode(serverHostname, forKey: .serverHostname)
        }
        if let serverPort = self.serverPort {
            try encodeContainer.encode(serverPort, forKey: .serverPort)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let serverHostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverHostname)
        serverHostname = serverHostnameDecoded
        let serverPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .serverPort)
        serverPort = serverPortDecoded
    }
}

extension DataSyncClientTypes {
    /// The network settings that DataSync Discovery uses to connect with your on-premises storage system's management interface.
    public struct DiscoveryServerConfiguration: Swift.Equatable {
        /// The domain name or IP address of your storage system's management interface.
        /// This member is required.
        public var serverHostname: Swift.String?
        /// The network port for accessing the storage system's management interface.
        public var serverPort: Swift.Int?

        public init(
            serverHostname: Swift.String? = nil,
            serverPort: Swift.Int? = nil
        )
        {
            self.serverHostname = serverHostname
            self.serverPort = serverPort
        }
    }

}

extension DataSyncClientTypes {
    public enum DiscoverySystemType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case netappontap
        case sdkUnknown(Swift.String)

        public static var allCases: [DiscoverySystemType] {
            return [
                .netappontap,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .netappontap: return "NetAppONTAP"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DiscoverySystemType(rawValue: rawValue) ?? DiscoverySystemType.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.Ec2Config: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityGroupArns = "SecurityGroupArns"
        case subnetArn = "SubnetArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let securityGroupArns = securityGroupArns {
            var securityGroupArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupArns)
            for ec2securitygrouparn0 in securityGroupArns {
                try securityGroupArnsContainer.encode(ec2securitygrouparn0)
            }
        }
        if let subnetArn = self.subnetArn {
            try encodeContainer.encode(subnetArn, forKey: .subnetArn)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetArn)
        subnetArn = subnetArnDecoded
        let securityGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupArns)
        var securityGroupArnsDecoded0:[Swift.String]? = nil
        if let securityGroupArnsContainer = securityGroupArnsContainer {
            securityGroupArnsDecoded0 = [Swift.String]()
            for string0 in securityGroupArnsContainer {
                if let string0 = string0 {
                    securityGroupArnsDecoded0?.append(string0)
                }
            }
        }
        securityGroupArns = securityGroupArnsDecoded0
    }
}

extension DataSyncClientTypes {
    /// The subnet and security groups that DataSync uses to access your Amazon EFS file system.
    public struct Ec2Config: Swift.Equatable {
        /// Specifies the Amazon Resource Names (ARNs) of the security groups associated with an Amazon EFS file system's mount target.
        /// This member is required.
        public var securityGroupArns: [Swift.String]?
        /// Specifies the ARN of a subnet where DataSync creates the [network interfaces](https://docs.aws.amazon.com/datasync/latest/userguide/datasync-network.html#required-network-interfaces) for managing traffic during your transfer. The subnet must be located:
        ///
        /// * In the same virtual private cloud (VPC) as the Amazon EFS file system.
        ///
        /// * In the same Availability Zone as at least one mount target for the Amazon EFS file system.
        ///
        ///
        /// You don't need to specify a subnet that includes a file system mount target.
        /// This member is required.
        public var subnetArn: Swift.String?

        public init(
            securityGroupArns: [Swift.String]? = nil,
            subnetArn: Swift.String? = nil
        )
        {
            self.securityGroupArns = securityGroupArns
            self.subnetArn = subnetArn
        }
    }

}

extension DataSyncClientTypes {
    public enum EfsInTransitEncryption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case tls12
        case sdkUnknown(Swift.String)

        public static var allCases: [EfsInTransitEncryption] {
            return [
                .none,
                .tls12,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .tls12: return "TLS1_2"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EfsInTransitEncryption(rawValue: rawValue) ?? EfsInTransitEncryption.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum EndpointType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fips
        case privateLink
        case `public`
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointType] {
            return [
                .fips,
                .privateLink,
                .public,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fips: return "FIPS"
            case .privateLink: return "PRIVATE_LINK"
            case .public: return "PUBLIC"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EndpointType(rawValue: rawValue) ?? EndpointType.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.FilterRule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filterType = "FilterType"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filterType = self.filterType {
            try encodeContainer.encode(filterType.rawValue, forKey: .filterType)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.FilterType.self, forKey: .filterType)
        filterType = filterTypeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension DataSyncClientTypes {
    /// Specifies which files, folders, and objects to include or exclude when transferring files from source to destination.
    public struct FilterRule: Swift.Equatable {
        /// The type of filter rule to apply. DataSync only supports the SIMPLE_PATTERN rule type.
        public var filterType: DataSyncClientTypes.FilterType?
        /// A single filter string that consists of the patterns to include or exclude. The patterns are delimited by "|" (that is, a pipe), for example: /folder1|/folder2
        public var value: Swift.String?

        public init(
            filterType: DataSyncClientTypes.FilterType? = nil,
            value: Swift.String? = nil
        )
        {
            self.filterType = filterType
            self.value = value
        }
    }

}

extension DataSyncClientTypes {
    public enum FilterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case simplePattern
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterType] {
            return [
                .simplePattern,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .simplePattern: return "SIMPLE_PATTERN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FilterType(rawValue: rawValue) ?? FilterType.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.FsxProtocol: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nfs = "NFS"
        case smb = "SMB"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nfs = self.nfs {
            try encodeContainer.encode(nfs, forKey: .nfs)
        }
        if let smb = self.smb {
            try encodeContainer.encode(smb, forKey: .smb)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nfsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.FsxProtocolNfs.self, forKey: .nfs)
        nfs = nfsDecoded
        let smbDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.FsxProtocolSmb.self, forKey: .smb)
        smb = smbDecoded
    }
}

extension DataSyncClientTypes {
    /// Specifies the data transfer protocol that DataSync uses to access your Amazon FSx file system.
    public struct FsxProtocol: Swift.Equatable {
        /// Specifies the Network File System (NFS) protocol configuration that DataSync uses to access your FSx for OpenZFS file system or FSx for ONTAP file system's storage virtual machine (SVM).
        public var nfs: DataSyncClientTypes.FsxProtocolNfs?
        /// Specifies the Server Message Block (SMB) protocol configuration that DataSync uses to access your FSx for ONTAP file system's SVM.
        public var smb: DataSyncClientTypes.FsxProtocolSmb?

        public init(
            nfs: DataSyncClientTypes.FsxProtocolNfs? = nil,
            smb: DataSyncClientTypes.FsxProtocolSmb? = nil
        )
        {
            self.nfs = nfs
            self.smb = smb
        }
    }

}

extension DataSyncClientTypes.FsxProtocolNfs: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mountOptions = "MountOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mountOptions = self.mountOptions {
            try encodeContainer.encode(mountOptions, forKey: .mountOptions)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mountOptionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.NfsMountOptions.self, forKey: .mountOptions)
        mountOptions = mountOptionsDecoded
    }
}

extension DataSyncClientTypes {
    /// Specifies the Network File System (NFS) protocol configuration that DataSync uses to access your Amazon FSx for OpenZFS or Amazon FSx for NetApp ONTAP file system.
    public struct FsxProtocolNfs: Swift.Equatable {
        /// Specifies how DataSync can access a location using the NFS protocol.
        public var mountOptions: DataSyncClientTypes.NfsMountOptions?

        public init(
            mountOptions: DataSyncClientTypes.NfsMountOptions? = nil
        )
        {
            self.mountOptions = mountOptions
        }
    }

}

extension DataSyncClientTypes.FsxProtocolSmb: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
        case mountOptions = "MountOptions"
        case password = "Password"
        case user = "User"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let mountOptions = self.mountOptions {
            try encodeContainer.encode(mountOptions, forKey: .mountOptions)
        }
        if let password = self.password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let user = self.user {
            try encodeContainer.encode(user, forKey: .user)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let mountOptionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.SmbMountOptions.self, forKey: .mountOptions)
        mountOptions = mountOptionsDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let userDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .user)
        user = userDecoded
    }
}

extension DataSyncClientTypes.FsxProtocolSmb: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FsxProtocolSmb(domain: \(Swift.String(describing: domain)), mountOptions: \(Swift.String(describing: mountOptions)), user: \(Swift.String(describing: user)), password: \"CONTENT_REDACTED\")"}
}

extension DataSyncClientTypes {
    /// Specifies the Server Message Block (SMB) protocol configuration that DataSync uses to access your Amazon FSx for NetApp ONTAP file system. For more information, see [Accessing FSx for ONTAP file systems](https://docs.aws.amazon.com/datasync/latest/userguide/create-ontap-location.html#create-ontap-location-access).
    public struct FsxProtocolSmb: Swift.Equatable {
        /// Specifies the fully qualified domain name (FQDN) of the Microsoft Active Directory that your storage virtual machine (SVM) belongs to.
        public var domain: Swift.String?
        /// Specifies the version of the Server Message Block (SMB) protocol that DataSync uses to access an SMB file server.
        public var mountOptions: DataSyncClientTypes.SmbMountOptions?
        /// Specifies the password of a user who has permission to access your SVM.
        /// This member is required.
        public var password: Swift.String?
        /// Specifies a user name that can mount the location and access the files, folders, and metadata that you need in the SVM. If you provide a user in your Active Directory, note the following:
        ///
        /// * If you're using Directory Service for Microsoft Active Directory, the user must be a member of the Amazon Web Services Delegated FSx Administrators group.
        ///
        /// * If you're using a self-managed Active Directory, the user must be a member of either the Domain Admins group or a custom group that you specified for file system administration when you created your file system.
        ///
        ///
        /// Make sure that the user has the permissions it needs to copy the data you want:
        ///
        /// * SE_TCB_NAME: Required to set object ownership and file metadata. With this privilege, you also can copy NTFS discretionary access lists (DACLs).
        ///
        /// * SE_SECURITY_NAME: May be needed to copy NTFS system access control lists (SACLs). This operation specifically requires the Windows privilege, which is granted to members of the Domain Admins group. If you configure your task to copy SACLs, make sure that the user has the required privileges. For information about copying SACLs, see [Ownership and permissions-related options](https://docs.aws.amazon.com/datasync/latest/userguide/create-task.html#configure-ownership-and-permissions).
        /// This member is required.
        public var user: Swift.String?

        public init(
            domain: Swift.String? = nil,
            mountOptions: DataSyncClientTypes.SmbMountOptions? = nil,
            password: Swift.String? = nil,
            user: Swift.String? = nil
        )
        {
            self.domain = domain
            self.mountOptions = mountOptions
            self.password = password
            self.user = user
        }
    }

}

extension GenerateRecommendationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case discoveryJobArn = "DiscoveryJobArn"
        case resourceIds = "ResourceIds"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let discoveryJobArn = self.discoveryJobArn {
            try encodeContainer.encode(discoveryJobArn, forKey: .discoveryJobArn)
        }
        if let resourceIds = resourceIds {
            var resourceIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceIds)
            for resourceid0 in resourceIds {
                try resourceIdsContainer.encode(resourceid0)
            }
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }
}

extension GenerateRecommendationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GenerateRecommendationsInput: Swift.Equatable {
    /// Specifies the Amazon Resource Name (ARN) of the discovery job that collects information about your on-premises storage system.
    /// This member is required.
    public var discoveryJobArn: Swift.String?
    /// Specifies the universally unique identifiers (UUIDs) of the resources in your storage system that you want recommendations on.
    /// This member is required.
    public var resourceIds: [Swift.String]?
    /// Specifies the type of resource in your storage system that you want recommendations on.
    /// This member is required.
    public var resourceType: DataSyncClientTypes.DiscoveryResourceType?

    public init(
        discoveryJobArn: Swift.String? = nil,
        resourceIds: [Swift.String]? = nil,
        resourceType: DataSyncClientTypes.DiscoveryResourceType? = nil
    )
    {
        self.discoveryJobArn = discoveryJobArn
        self.resourceIds = resourceIds
        self.resourceType = resourceType
    }
}

struct GenerateRecommendationsInputBody: Swift.Equatable {
    let discoveryJobArn: Swift.String?
    let resourceIds: [Swift.String]?
    let resourceType: DataSyncClientTypes.DiscoveryResourceType?
}

extension GenerateRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case discoveryJobArn = "DiscoveryJobArn"
        case resourceIds = "ResourceIds"
        case resourceType = "ResourceType"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let discoveryJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .discoveryJobArn)
        discoveryJobArn = discoveryJobArnDecoded
        let resourceIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .resourceIds)
        var resourceIdsDecoded0:[Swift.String]? = nil
        if let resourceIdsContainer = resourceIdsContainer {
            resourceIdsDecoded0 = [Swift.String]()
            for string0 in resourceIdsContainer {
                if let string0 = string0 {
                    resourceIdsDecoded0?.append(string0)
                }
            }
        }
        resourceIds = resourceIdsDecoded0
        let resourceTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.DiscoveryResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

public enum GenerateRecommendationsOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GenerateRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct GenerateRecommendationsOutputResponse: Swift.Equatable {

    public init() { }
}

extension DataSyncClientTypes {
    public enum Gid: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case both
        case intValue
        case name
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [Gid] {
            return [
                .both,
                .intValue,
                .name,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .both: return "BOTH"
            case .intValue: return "INT_VALUE"
            case .name: return "NAME"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Gid(rawValue: rawValue) ?? Gid.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum HdfsAuthenticationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case kerberos
        case simple
        case sdkUnknown(Swift.String)

        public static var allCases: [HdfsAuthenticationType] {
            return [
                .kerberos,
                .simple,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .kerberos: return "KERBEROS"
            case .simple: return "SIMPLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HdfsAuthenticationType(rawValue: rawValue) ?? HdfsAuthenticationType.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum HdfsDataTransferProtection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case authentication
        case disabled
        case integrity
        case privacy
        case sdkUnknown(Swift.String)

        public static var allCases: [HdfsDataTransferProtection] {
            return [
                .authentication,
                .disabled,
                .integrity,
                .privacy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .authentication: return "AUTHENTICATION"
            case .disabled: return "DISABLED"
            case .integrity: return "INTEGRITY"
            case .privacy: return "PRIVACY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HdfsDataTransferProtection(rawValue: rawValue) ?? HdfsDataTransferProtection.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.HdfsNameNode: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hostname = "Hostname"
        case port = "Port"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hostname = self.hostname {
            try encodeContainer.encode(hostname, forKey: .hostname)
        }
        if let port = self.port {
            try encodeContainer.encode(port, forKey: .port)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hostnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostname)
        hostname = hostnameDecoded
        let portDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .port)
        port = portDecoded
    }
}

extension DataSyncClientTypes {
    /// The NameNode of the Hadoop Distributed File System (HDFS). The NameNode manages the file system's namespace. The NameNode performs operations such as opening, closing, and renaming files and directories. The NameNode contains the information to map blocks of data to the DataNodes.
    public struct HdfsNameNode: Swift.Equatable {
        /// The hostname of the NameNode in the HDFS cluster. This value is the IP address or Domain Name Service (DNS) name of the NameNode. An agent that's installed on-premises uses this hostname to communicate with the NameNode in the network.
        /// This member is required.
        public var hostname: Swift.String?
        /// The port that the NameNode uses to listen to client requests.
        /// This member is required.
        public var port: Swift.Int?

        public init(
            hostname: Swift.String? = nil,
            port: Swift.Int? = nil
        )
        {
            self.hostname = hostname
            self.port = port
        }
    }

}

extension DataSyncClientTypes {
    public enum HdfsRpcProtection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case authentication
        case disabled
        case integrity
        case privacy
        case sdkUnknown(Swift.String)

        public static var allCases: [HdfsRpcProtection] {
            return [
                .authentication,
                .disabled,
                .integrity,
                .privacy,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .authentication: return "AUTHENTICATION"
            case .disabled: return "DISABLED"
            case .integrity: return "INTEGRITY"
            case .privacy: return "PRIVACY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HdfsRpcProtection(rawValue: rawValue) ?? HdfsRpcProtection.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.IOPS: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case other = "Other"
        case read = "Read"
        case total = "Total"
        case write = "Write"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let other = self.other {
            try encodeContainer.encode(other, forKey: .other)
        }
        if let read = self.read {
            try encodeContainer.encode(read, forKey: .read)
        }
        if let total = self.total {
            try encodeContainer.encode(total, forKey: .total)
        }
        if let write = self.write {
            try encodeContainer.encode(write, forKey: .write)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let readDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .read)
        read = readDecoded
        let writeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .write)
        write = writeDecoded
        let otherDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .other)
        other = otherDecoded
        let totalDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .total)
        total = totalDecoded
    }
}

extension DataSyncClientTypes {
    /// The IOPS peaks for an on-premises storage system resource. Each data point represents the 95th percentile peak value during a 1-hour interval.
    public struct IOPS: Swift.Equatable {
        /// Peak IOPS unrelated to read and write operations.
        public var other: Swift.Double?
        /// Peak IOPS related to read operations.
        public var read: Swift.Double?
        /// Peak total IOPS on your on-premises storage system resource.
        public var total: Swift.Double?
        /// Peak IOPS related to write operations.
        public var write: Swift.Double?

        public init(
            other: Swift.Double? = nil,
            read: Swift.Double? = nil,
            total: Swift.Double? = nil,
            write: Swift.Double? = nil
        )
        {
            self.other = other
            self.read = read
            self.total = total
            self.write = write
        }
    }

}

extension InternalException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: InternalExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.errorCode = output.errorCode
            self.properties.message = output.message
        } else {
            self.properties.errorCode = nil
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// This exception is thrown when an error occurs in the DataSync service.
public struct InternalException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var errorCode: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalException" }
    public static var fault: ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        errorCode: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.errorCode = errorCode
        self.properties.message = message
    }
}

struct InternalExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let errorCode: Swift.String?
}

extension InternalExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
    }
}

extension InvalidRequestException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: InvalidRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.datasyncErrorCode = output.datasyncErrorCode
            self.properties.errorCode = output.errorCode
            self.properties.message = output.message
        } else {
            self.properties.datasyncErrorCode = nil
            self.properties.errorCode = nil
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// This exception is thrown when the client submits a malformed request.
public struct InvalidRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var datasyncErrorCode: Swift.String? = nil
        public internal(set) var errorCode: Swift.String? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRequestException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        datasyncErrorCode: Swift.String? = nil,
        errorCode: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.datasyncErrorCode = datasyncErrorCode
        self.properties.errorCode = errorCode
        self.properties.message = message
    }
}

struct InvalidRequestExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let errorCode: Swift.String?
    let datasyncErrorCode: Swift.String?
}

extension InvalidRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case datasyncErrorCode
        case errorCode
        case message
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let datasyncErrorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .datasyncErrorCode)
        datasyncErrorCode = datasyncErrorCodeDecoded
    }
}

extension DataSyncClientTypes.Latency: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case other = "Other"
        case read = "Read"
        case write = "Write"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let other = self.other {
            try encodeContainer.encode(other, forKey: .other)
        }
        if let read = self.read {
            try encodeContainer.encode(read, forKey: .read)
        }
        if let write = self.write {
            try encodeContainer.encode(write, forKey: .write)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let readDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .read)
        read = readDecoded
        let writeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .write)
        write = writeDecoded
        let otherDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .other)
        other = otherDecoded
    }
}

extension DataSyncClientTypes {
    /// The latency peaks for an on-premises storage system resource. Each data point represents the 95th percentile peak value during a 1-hour interval.
    public struct Latency: Swift.Equatable {
        /// Peak latency for operations unrelated to read and write operations.
        public var other: Swift.Double?
        /// Peak latency for read operations.
        public var read: Swift.Double?
        /// Peak latency for write operations.
        public var write: Swift.Double?

        public init(
            other: Swift.Double? = nil,
            read: Swift.Double? = nil,
            write: Swift.Double? = nil
        )
        {
            self.other = other
            self.read = read
            self.write = write
        }
    }

}

extension ListAgentsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListAgentsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// ListAgentsRequest
public struct ListAgentsInput: Swift.Equatable {
    /// Specifies the maximum number of DataSync agents to list in a response. By default, a response shows a maximum of 100 agents.
    public var maxResults: Swift.Int?
    /// Specifies an opaque string that indicates the position to begin the next list of results in the response.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListAgentsInputBody: Swift.Equatable {
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListAgentsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public enum ListAgentsOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListAgentsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListAgentsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.agents = output.agents
            self.nextToken = output.nextToken
        } else {
            self.agents = nil
            self.nextToken = nil
        }
    }
}

/// ListAgentsResponse
public struct ListAgentsOutputResponse: Swift.Equatable {
    /// A list of DataSync agents in your Amazon Web Services account in the Amazon Web Services Region specified in the request. The list is ordered by the agents' Amazon Resource Names (ARNs).
    public var agents: [DataSyncClientTypes.AgentListEntry]?
    /// The opaque string that indicates the position to begin the next list of results in the response.
    public var nextToken: Swift.String?

    public init(
        agents: [DataSyncClientTypes.AgentListEntry]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.agents = agents
        self.nextToken = nextToken
    }
}

struct ListAgentsOutputResponseBody: Swift.Equatable {
    let agents: [DataSyncClientTypes.AgentListEntry]?
    let nextToken: Swift.String?
}

extension ListAgentsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agents = "Agents"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.AgentListEntry?].self, forKey: .agents)
        var agentsDecoded0:[DataSyncClientTypes.AgentListEntry]? = nil
        if let agentsContainer = agentsContainer {
            agentsDecoded0 = [DataSyncClientTypes.AgentListEntry]()
            for structure0 in agentsContainer {
                if let structure0 = structure0 {
                    agentsDecoded0?.append(structure0)
                }
            }
        }
        agents = agentsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDiscoveryJobsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case storageSystemArn = "StorageSystemArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let storageSystemArn = self.storageSystemArn {
            try encodeContainer.encode(storageSystemArn, forKey: .storageSystemArn)
        }
    }
}

extension ListDiscoveryJobsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListDiscoveryJobsInput: Swift.Equatable {
    /// Specifies how many results you want in the response.
    public var maxResults: Swift.Int?
    /// Specifies an opaque string that indicates the position to begin the next list of results in the response.
    public var nextToken: Swift.String?
    /// Specifies the Amazon Resource Name (ARN) of an on-premises storage system. Use this parameter if you only want to list the discovery jobs that are associated with a specific storage system.
    public var storageSystemArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        storageSystemArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.storageSystemArn = storageSystemArn
    }
}

struct ListDiscoveryJobsInputBody: Swift.Equatable {
    let storageSystemArn: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListDiscoveryJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case storageSystemArn = "StorageSystemArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageSystemArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageSystemArn)
        storageSystemArn = storageSystemArnDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public enum ListDiscoveryJobsOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListDiscoveryJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListDiscoveryJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.discoveryJobs = output.discoveryJobs
            self.nextToken = output.nextToken
        } else {
            self.discoveryJobs = nil
            self.nextToken = nil
        }
    }
}

public struct ListDiscoveryJobsOutputResponse: Swift.Equatable {
    /// The discovery jobs that you've run.
    public var discoveryJobs: [DataSyncClientTypes.DiscoveryJobListEntry]?
    /// The opaque string that indicates the position to begin the next list of results in the response.
    public var nextToken: Swift.String?

    public init(
        discoveryJobs: [DataSyncClientTypes.DiscoveryJobListEntry]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.discoveryJobs = discoveryJobs
        self.nextToken = nextToken
    }
}

struct ListDiscoveryJobsOutputResponseBody: Swift.Equatable {
    let discoveryJobs: [DataSyncClientTypes.DiscoveryJobListEntry]?
    let nextToken: Swift.String?
}

extension ListDiscoveryJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case discoveryJobs = "DiscoveryJobs"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let discoveryJobsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.DiscoveryJobListEntry?].self, forKey: .discoveryJobs)
        var discoveryJobsDecoded0:[DataSyncClientTypes.DiscoveryJobListEntry]? = nil
        if let discoveryJobsContainer = discoveryJobsContainer {
            discoveryJobsDecoded0 = [DataSyncClientTypes.DiscoveryJobListEntry]()
            for structure0 in discoveryJobsContainer {
                if let structure0 = structure0 {
                    discoveryJobsDecoded0?.append(structure0)
                }
            }
        }
        discoveryJobs = discoveryJobsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListLocationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for locationfilter0 in filters {
                try filtersContainer.encode(locationfilter0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListLocationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// ListLocationsRequest
public struct ListLocationsInput: Swift.Equatable {
    /// You can use API filters to narrow down the list of resources returned by ListLocations. For example, to retrieve all tasks on a specific source location, you can use ListLocations with filter name LocationType S3 and Operator Equals.
    public var filters: [DataSyncClientTypes.LocationFilter]?
    /// The maximum number of locations to return.
    public var maxResults: Swift.Int?
    /// An opaque string that indicates the position at which to begin the next list of locations.
    public var nextToken: Swift.String?

    public init(
        filters: [DataSyncClientTypes.LocationFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListLocationsInputBody: Swift.Equatable {
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let filters: [DataSyncClientTypes.LocationFilter]?
}

extension ListLocationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let filtersContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.LocationFilter?].self, forKey: .filters)
        var filtersDecoded0:[DataSyncClientTypes.LocationFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [DataSyncClientTypes.LocationFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
    }
}

public enum ListLocationsOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListLocationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListLocationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.locations = output.locations
            self.nextToken = output.nextToken
        } else {
            self.locations = nil
            self.nextToken = nil
        }
    }
}

/// ListLocationsResponse
public struct ListLocationsOutputResponse: Swift.Equatable {
    /// An array that contains a list of locations.
    public var locations: [DataSyncClientTypes.LocationListEntry]?
    /// An opaque string that indicates the position at which to begin returning the next list of locations.
    public var nextToken: Swift.String?

    public init(
        locations: [DataSyncClientTypes.LocationListEntry]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.locations = locations
        self.nextToken = nextToken
    }
}

struct ListLocationsOutputResponseBody: Swift.Equatable {
    let locations: [DataSyncClientTypes.LocationListEntry]?
    let nextToken: Swift.String?
}

extension ListLocationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locations = "Locations"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.LocationListEntry?].self, forKey: .locations)
        var locationsDecoded0:[DataSyncClientTypes.LocationListEntry]? = nil
        if let locationsContainer = locationsContainer {
            locationsDecoded0 = [DataSyncClientTypes.LocationListEntry]()
            for structure0 in locationsContainer {
                if let structure0 = structure0 {
                    locationsDecoded0?.append(structure0)
                }
            }
        }
        locations = locationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListStorageSystemsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListStorageSystemsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct ListStorageSystemsInput: Swift.Equatable {
    /// Specifies how many results you want in the response.
    public var maxResults: Swift.Int?
    /// Specifies an opaque string that indicates the position to begin the next list of results in the response.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListStorageSystemsInputBody: Swift.Equatable {
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListStorageSystemsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public enum ListStorageSystemsOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListStorageSystemsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListStorageSystemsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.storageSystems = output.storageSystems
        } else {
            self.nextToken = nil
            self.storageSystems = nil
        }
    }
}

public struct ListStorageSystemsOutputResponse: Swift.Equatable {
    /// The opaque string that indicates the position to begin the next list of results in the response.
    public var nextToken: Swift.String?
    /// The Amazon Resource Names ARNs) of the on-premises storage systems that you're using with DataSync Discovery.
    public var storageSystems: [DataSyncClientTypes.StorageSystemListEntry]?

    public init(
        nextToken: Swift.String? = nil,
        storageSystems: [DataSyncClientTypes.StorageSystemListEntry]? = nil
    )
    {
        self.nextToken = nextToken
        self.storageSystems = storageSystems
    }
}

struct ListStorageSystemsOutputResponseBody: Swift.Equatable {
    let storageSystems: [DataSyncClientTypes.StorageSystemListEntry]?
    let nextToken: Swift.String?
}

extension ListStorageSystemsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case storageSystems = "StorageSystems"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageSystemsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.StorageSystemListEntry?].self, forKey: .storageSystems)
        var storageSystemsDecoded0:[DataSyncClientTypes.StorageSystemListEntry]? = nil
        if let storageSystemsContainer = storageSystemsContainer {
            storageSystemsDecoded0 = [DataSyncClientTypes.StorageSystemListEntry]()
            for structure0 in storageSystemsContainer {
                if let structure0 = structure0 {
                    storageSystemsDecoded0?.append(structure0)
                }
            }
        }
        storageSystems = storageSystemsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// ListTagsForResourceRequest
public struct ListTagsForResourceInput: Swift.Equatable {
    /// Specifies how many results that you want in the response.
    public var maxResults: Swift.Int?
    /// Specifies an opaque string that indicates the position to begin the next list of results in the response.
    public var nextToken: Swift.String?
    /// Specifies the Amazon Resource Name (ARN) of the resource that you want tag information on.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListTagsForResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case resourceArn = "ResourceArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public enum ListTagsForResourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tags = output.tags
        } else {
            self.nextToken = nil
            self.tags = nil
        }
    }
}

/// ListTagsForResourceResponse
public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// The opaque string that indicates the position to begin the next list of results in the response.
    public var nextToken: Swift.String?
    /// An array of tags applied to the specified resource.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init(
        nextToken: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [DataSyncClientTypes.TagListEntry]?
    let nextToken: Swift.String?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTaskExecutionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case taskArn = "TaskArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let taskArn = self.taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
    }
}

extension ListTaskExecutionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// ListTaskExecutions
public struct ListTaskExecutionsInput: Swift.Equatable {
    /// The maximum number of executed tasks to list.
    public var maxResults: Swift.Int?
    /// An opaque string that indicates the position at which to begin the next list of the executed tasks.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the task whose tasks you want to list.
    public var taskArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        taskArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.taskArn = taskArn
    }
}

struct ListTaskExecutionsInputBody: Swift.Equatable {
    let taskArn: Swift.String?
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
}

extension ListTaskExecutionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case taskArn = "TaskArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public enum ListTaskExecutionsOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListTaskExecutionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListTaskExecutionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.taskExecutions = output.taskExecutions
        } else {
            self.nextToken = nil
            self.taskExecutions = nil
        }
    }
}

/// ListTaskExecutionsResponse
public struct ListTaskExecutionsOutputResponse: Swift.Equatable {
    /// An opaque string that indicates the position at which to begin returning the next list of executed tasks.
    public var nextToken: Swift.String?
    /// A list of executed tasks.
    public var taskExecutions: [DataSyncClientTypes.TaskExecutionListEntry]?

    public init(
        nextToken: Swift.String? = nil,
        taskExecutions: [DataSyncClientTypes.TaskExecutionListEntry]? = nil
    )
    {
        self.nextToken = nextToken
        self.taskExecutions = taskExecutions
    }
}

struct ListTaskExecutionsOutputResponseBody: Swift.Equatable {
    let taskExecutions: [DataSyncClientTypes.TaskExecutionListEntry]?
    let nextToken: Swift.String?
}

extension ListTaskExecutionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case taskExecutions = "TaskExecutions"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskExecutionsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TaskExecutionListEntry?].self, forKey: .taskExecutions)
        var taskExecutionsDecoded0:[DataSyncClientTypes.TaskExecutionListEntry]? = nil
        if let taskExecutionsContainer = taskExecutionsContainer {
            taskExecutionsDecoded0 = [DataSyncClientTypes.TaskExecutionListEntry]()
            for structure0 in taskExecutionsContainer {
                if let structure0 = structure0 {
                    taskExecutionsDecoded0?.append(structure0)
                }
            }
        }
        taskExecutions = taskExecutionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTasksInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for taskfilter0 in filters {
                try filtersContainer.encode(taskfilter0)
            }
        }
        if let maxResults = self.maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

extension ListTasksInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// ListTasksRequest
public struct ListTasksInput: Swift.Equatable {
    /// You can use API filters to narrow down the list of resources returned by ListTasks. For example, to retrieve all tasks on a specific source location, you can use ListTasks with filter name LocationId and Operator Equals with the ARN for the location.
    public var filters: [DataSyncClientTypes.TaskFilter]?
    /// The maximum number of tasks to return.
    public var maxResults: Swift.Int?
    /// An opaque string that indicates the position at which to begin the next list of tasks.
    public var nextToken: Swift.String?

    public init(
        filters: [DataSyncClientTypes.TaskFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListTasksInputBody: Swift.Equatable {
    let maxResults: Swift.Int?
    let nextToken: Swift.String?
    let filters: [DataSyncClientTypes.TaskFilter]?
}

extension ListTasksInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let filtersContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TaskFilter?].self, forKey: .filters)
        var filtersDecoded0:[DataSyncClientTypes.TaskFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [DataSyncClientTypes.TaskFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
    }
}

public enum ListTasksOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListTasksOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListTasksOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.tasks = output.tasks
        } else {
            self.nextToken = nil
            self.tasks = nil
        }
    }
}

/// ListTasksResponse
public struct ListTasksOutputResponse: Swift.Equatable {
    /// An opaque string that indicates the position at which to begin returning the next list of tasks.
    public var nextToken: Swift.String?
    /// A list of all the tasks that are returned.
    public var tasks: [DataSyncClientTypes.TaskListEntry]?

    public init(
        nextToken: Swift.String? = nil,
        tasks: [DataSyncClientTypes.TaskListEntry]? = nil
    )
    {
        self.nextToken = nextToken
        self.tasks = tasks
    }
}

struct ListTasksOutputResponseBody: Swift.Equatable {
    let tasks: [DataSyncClientTypes.TaskListEntry]?
    let nextToken: Swift.String?
}

extension ListTasksOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case tasks = "Tasks"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tasksContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TaskListEntry?].self, forKey: .tasks)
        var tasksDecoded0:[DataSyncClientTypes.TaskListEntry]? = nil
        if let tasksContainer = tasksContainer {
            tasksDecoded0 = [DataSyncClientTypes.TaskListEntry]()
            for structure0 in tasksContainer {
                if let structure0 = structure0 {
                    tasksDecoded0?.append(structure0)
                }
            }
        }
        tasks = tasksDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DataSyncClientTypes.LocationFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case `operator` = "Operator"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let `operator` = self.`operator` {
            try encodeContainer.encode(`operator`.rawValue, forKey: .`operator`)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for filterattributevalue0 in values {
                try valuesContainer.encode(filterattributevalue0)
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.LocationFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
        let operatorDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Operator.self, forKey: .operator)
        `operator` = operatorDecoded
    }
}

extension DataSyncClientTypes {
    /// Narrow down the list of resources returned by ListLocations. For example, to see all your Amazon S3 locations, create a filter using "Name": "LocationType", "Operator": "Equals", and "Values": "S3". For more information, see [filtering resources](https://docs.aws.amazon.com/datasync/latest/userguide/query-resources.html).
    public struct LocationFilter: Swift.Equatable {
        /// The name of the filter being used. Each API call supports a list of filters that are available for it (for example, LocationType for ListLocations).
        /// This member is required.
        public var name: DataSyncClientTypes.LocationFilterName?
        /// The operator that is used to compare filter values (for example, Equals or Contains).
        /// This member is required.
        public var `operator`: DataSyncClientTypes.Operator?
        /// The values that you want to filter for. For example, you might want to display only Amazon S3 locations.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: DataSyncClientTypes.LocationFilterName? = nil,
            `operator`: DataSyncClientTypes.Operator? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.values = values
        }
    }

}

extension DataSyncClientTypes {
    public enum LocationFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationtime
        case locationtype
        case locationuri
        case sdkUnknown(Swift.String)

        public static var allCases: [LocationFilterName] {
            return [
                .creationtime,
                .locationtype,
                .locationuri,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .locationtype: return "LocationType"
            case .locationuri: return "LocationUri"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LocationFilterName(rawValue: rawValue) ?? LocationFilterName.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.LocationListEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
        case locationUri = "LocationUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = self.locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
        if let locationUri = self.locationUri {
            try encodeContainer.encode(locationUri, forKey: .locationUri)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let locationUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationUri)
        locationUri = locationUriDecoded
    }
}

extension DataSyncClientTypes {
    /// Represents a single entry in a list of locations. LocationListEntry returns an array that contains a list of locations when the [ListLocations](https://docs.aws.amazon.com/datasync/latest/userguide/API_ListLocations.html) operation is called.
    public struct LocationListEntry: Swift.Equatable {
        /// The Amazon Resource Name (ARN) of the location. For Network File System (NFS) or Amazon EFS, the location is the export path. For Amazon S3, the location is the prefix path that you want to mount and use as the root of the location.
        public var locationArn: Swift.String?
        /// Represents a list of URIs of a location. LocationUri returns an array that contains a list of locations when the [ListLocations](https://docs.aws.amazon.com/datasync/latest/userguide/API_ListLocations.html) operation is called. Format: TYPE://GLOBAL_ID/SUBDIR. TYPE designates the type of location (for example, nfs or s3). GLOBAL_ID is the globally unique identifier of the resource that backs the location. An example for EFS is us-east-2.fs-abcd1234. An example for Amazon S3 is the bucket name, such as myBucket. An example for NFS is a valid IPv4 address or a hostname that is compliant with Domain Name Service (DNS). SUBDIR is a valid file system path, delimited by forward slashes as is the *nix convention. For NFS and Amazon EFS, it's the export path to mount the location. For Amazon S3, it's the prefix path that you mount to and treat as the root of the location.
        public var locationUri: Swift.String?

        public init(
            locationArn: Swift.String? = nil,
            locationUri: Swift.String? = nil
        )
        {
            self.locationArn = locationArn
            self.locationUri = locationUri
        }
    }

}

extension DataSyncClientTypes {
    public enum LogLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case basic
        case off
        case transfer
        case sdkUnknown(Swift.String)

        public static var allCases: [LogLevel] {
            return [
                .basic,
                .off,
                .transfer,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .basic: return "BASIC"
            case .off: return "OFF"
            case .transfer: return "TRANSFER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LogLevel(rawValue: rawValue) ?? LogLevel.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.MaxP95Performance: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case iopsOther = "IopsOther"
        case iopsRead = "IopsRead"
        case iopsTotal = "IopsTotal"
        case iopsWrite = "IopsWrite"
        case latencyOther = "LatencyOther"
        case latencyRead = "LatencyRead"
        case latencyWrite = "LatencyWrite"
        case throughputOther = "ThroughputOther"
        case throughputRead = "ThroughputRead"
        case throughputTotal = "ThroughputTotal"
        case throughputWrite = "ThroughputWrite"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let iopsOther = self.iopsOther {
            try encodeContainer.encode(iopsOther, forKey: .iopsOther)
        }
        if let iopsRead = self.iopsRead {
            try encodeContainer.encode(iopsRead, forKey: .iopsRead)
        }
        if let iopsTotal = self.iopsTotal {
            try encodeContainer.encode(iopsTotal, forKey: .iopsTotal)
        }
        if let iopsWrite = self.iopsWrite {
            try encodeContainer.encode(iopsWrite, forKey: .iopsWrite)
        }
        if let latencyOther = self.latencyOther {
            try encodeContainer.encode(latencyOther, forKey: .latencyOther)
        }
        if let latencyRead = self.latencyRead {
            try encodeContainer.encode(latencyRead, forKey: .latencyRead)
        }
        if let latencyWrite = self.latencyWrite {
            try encodeContainer.encode(latencyWrite, forKey: .latencyWrite)
        }
        if let throughputOther = self.throughputOther {
            try encodeContainer.encode(throughputOther, forKey: .throughputOther)
        }
        if let throughputRead = self.throughputRead {
            try encodeContainer.encode(throughputRead, forKey: .throughputRead)
        }
        if let throughputTotal = self.throughputTotal {
            try encodeContainer.encode(throughputTotal, forKey: .throughputTotal)
        }
        if let throughputWrite = self.throughputWrite {
            try encodeContainer.encode(throughputWrite, forKey: .throughputWrite)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iopsReadDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .iopsRead)
        iopsRead = iopsReadDecoded
        let iopsWriteDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .iopsWrite)
        iopsWrite = iopsWriteDecoded
        let iopsOtherDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .iopsOther)
        iopsOther = iopsOtherDecoded
        let iopsTotalDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .iopsTotal)
        iopsTotal = iopsTotalDecoded
        let throughputReadDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .throughputRead)
        throughputRead = throughputReadDecoded
        let throughputWriteDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .throughputWrite)
        throughputWrite = throughputWriteDecoded
        let throughputOtherDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .throughputOther)
        throughputOther = throughputOtherDecoded
        let throughputTotalDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .throughputTotal)
        throughputTotal = throughputTotalDecoded
        let latencyReadDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .latencyRead)
        latencyRead = latencyReadDecoded
        let latencyWriteDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .latencyWrite)
        latencyWrite = latencyWriteDecoded
        let latencyOtherDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .latencyOther)
        latencyOther = latencyOtherDecoded
    }
}

extension DataSyncClientTypes {
    /// The performance data that DataSync Discovery collects about an on-premises storage system resource.
    public struct MaxP95Performance: Swift.Equatable {
        /// Peak IOPS unrelated to read and write operations.
        public var iopsOther: Swift.Double?
        /// Peak IOPS related to read operations.
        public var iopsRead: Swift.Double?
        /// Peak total IOPS on your on-premises storage system resource.
        public var iopsTotal: Swift.Double?
        /// Peak IOPS related to write operations.
        public var iopsWrite: Swift.Double?
        /// Peak latency for operations unrelated to read and write operations.
        public var latencyOther: Swift.Double?
        /// Peak latency for read operations.
        public var latencyRead: Swift.Double?
        /// Peak latency for write operations.
        public var latencyWrite: Swift.Double?
        /// Peak throughput unrelated to read and write operations.
        public var throughputOther: Swift.Double?
        /// Peak throughput related to read operations.
        public var throughputRead: Swift.Double?
        /// Peak total throughput on your on-premises storage system resource.
        public var throughputTotal: Swift.Double?
        /// Peak throughput related to write operations.
        public var throughputWrite: Swift.Double?

        public init(
            iopsOther: Swift.Double? = nil,
            iopsRead: Swift.Double? = nil,
            iopsTotal: Swift.Double? = nil,
            iopsWrite: Swift.Double? = nil,
            latencyOther: Swift.Double? = nil,
            latencyRead: Swift.Double? = nil,
            latencyWrite: Swift.Double? = nil,
            throughputOther: Swift.Double? = nil,
            throughputRead: Swift.Double? = nil,
            throughputTotal: Swift.Double? = nil,
            throughputWrite: Swift.Double? = nil
        )
        {
            self.iopsOther = iopsOther
            self.iopsRead = iopsRead
            self.iopsTotal = iopsTotal
            self.iopsWrite = iopsWrite
            self.latencyOther = latencyOther
            self.latencyRead = latencyRead
            self.latencyWrite = latencyWrite
            self.throughputOther = throughputOther
            self.throughputRead = throughputRead
            self.throughputTotal = throughputTotal
            self.throughputWrite = throughputWrite
        }
    }

}

extension DataSyncClientTypes {
    public enum Mtime: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case preserve
        case sdkUnknown(Swift.String)

        public static var allCases: [Mtime] {
            return [
                .none,
                .preserve,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .preserve: return "PRESERVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Mtime(rawValue: rawValue) ?? Mtime.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.NetAppONTAPCluster: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cifsShareCount = "CifsShareCount"
        case clusterBlockStorageLogicalUsed = "ClusterBlockStorageLogicalUsed"
        case clusterBlockStorageSize = "ClusterBlockStorageSize"
        case clusterBlockStorageUsed = "ClusterBlockStorageUsed"
        case clusterCloudStorageUsed = "ClusterCloudStorageUsed"
        case clusterName = "ClusterName"
        case lunCount = "LunCount"
        case maxP95Performance = "MaxP95Performance"
        case nfsExportedVolumes = "NfsExportedVolumes"
        case recommendationStatus = "RecommendationStatus"
        case recommendations = "Recommendations"
        case resourceId = "ResourceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cifsShareCount = self.cifsShareCount {
            try encodeContainer.encode(cifsShareCount, forKey: .cifsShareCount)
        }
        if let clusterBlockStorageLogicalUsed = self.clusterBlockStorageLogicalUsed {
            try encodeContainer.encode(clusterBlockStorageLogicalUsed, forKey: .clusterBlockStorageLogicalUsed)
        }
        if let clusterBlockStorageSize = self.clusterBlockStorageSize {
            try encodeContainer.encode(clusterBlockStorageSize, forKey: .clusterBlockStorageSize)
        }
        if let clusterBlockStorageUsed = self.clusterBlockStorageUsed {
            try encodeContainer.encode(clusterBlockStorageUsed, forKey: .clusterBlockStorageUsed)
        }
        if let clusterCloudStorageUsed = self.clusterCloudStorageUsed {
            try encodeContainer.encode(clusterCloudStorageUsed, forKey: .clusterCloudStorageUsed)
        }
        if let clusterName = self.clusterName {
            try encodeContainer.encode(clusterName, forKey: .clusterName)
        }
        if let lunCount = self.lunCount {
            try encodeContainer.encode(lunCount, forKey: .lunCount)
        }
        if let maxP95Performance = self.maxP95Performance {
            try encodeContainer.encode(maxP95Performance, forKey: .maxP95Performance)
        }
        if let nfsExportedVolumes = self.nfsExportedVolumes {
            try encodeContainer.encode(nfsExportedVolumes, forKey: .nfsExportedVolumes)
        }
        if let recommendationStatus = self.recommendationStatus {
            try encodeContainer.encode(recommendationStatus.rawValue, forKey: .recommendationStatus)
        }
        if let recommendations = recommendations {
            var recommendationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recommendations)
            for recommendation0 in recommendations {
                try recommendationsContainer.encode(recommendation0)
            }
        }
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cifsShareCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cifsShareCount)
        cifsShareCount = cifsShareCountDecoded
        let nfsExportedVolumesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .nfsExportedVolumes)
        nfsExportedVolumes = nfsExportedVolumesDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let clusterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterName)
        clusterName = clusterNameDecoded
        let maxP95PerformanceDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.MaxP95Performance.self, forKey: .maxP95Performance)
        maxP95Performance = maxP95PerformanceDecoded
        let clusterBlockStorageSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .clusterBlockStorageSize)
        clusterBlockStorageSize = clusterBlockStorageSizeDecoded
        let clusterBlockStorageUsedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .clusterBlockStorageUsed)
        clusterBlockStorageUsed = clusterBlockStorageUsedDecoded
        let clusterBlockStorageLogicalUsedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .clusterBlockStorageLogicalUsed)
        clusterBlockStorageLogicalUsed = clusterBlockStorageLogicalUsedDecoded
        let recommendationsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.Recommendation?].self, forKey: .recommendations)
        var recommendationsDecoded0:[DataSyncClientTypes.Recommendation]? = nil
        if let recommendationsContainer = recommendationsContainer {
            recommendationsDecoded0 = [DataSyncClientTypes.Recommendation]()
            for structure0 in recommendationsContainer {
                if let structure0 = structure0 {
                    recommendationsDecoded0?.append(structure0)
                }
            }
        }
        recommendations = recommendationsDecoded0
        let recommendationStatusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.RecommendationStatus.self, forKey: .recommendationStatus)
        recommendationStatus = recommendationStatusDecoded
        let lunCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lunCount)
        lunCount = lunCountDecoded
        let clusterCloudStorageUsedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .clusterCloudStorageUsed)
        clusterCloudStorageUsed = clusterCloudStorageUsedDecoded
    }
}

extension DataSyncClientTypes {
    /// The information that DataSync Discovery collects about an on-premises storage system cluster.
    public struct NetAppONTAPCluster: Swift.Equatable {
        /// The number of CIFS shares in the cluster.
        public var cifsShareCount: Swift.Int?
        /// The storage space that's being used in the cluster without accounting for compression or deduplication.
        public var clusterBlockStorageLogicalUsed: Swift.Int?
        /// The total storage space that's available in the cluster.
        public var clusterBlockStorageSize: Swift.Int?
        /// The storage space that's being used in a cluster.
        public var clusterBlockStorageUsed: Swift.Int?
        /// The amount of space in the cluster that's in cloud storage (for example, if you're using data tiering).
        public var clusterCloudStorageUsed: Swift.Int?
        /// The name of the cluster.
        public var clusterName: Swift.String?
        /// The number of LUNs (logical unit numbers) in the cluster.
        public var lunCount: Swift.Int?
        /// The performance data that DataSync Discovery collects about the cluster.
        public var maxP95Performance: DataSyncClientTypes.MaxP95Performance?
        /// The number of NFS volumes in the cluster.
        public var nfsExportedVolumes: Swift.Int?
        /// Indicates whether DataSync Discovery recommendations for the cluster are ready to view, incomplete, or can't be determined. For more information, see [Recommendation statuses](https://docs.aws.amazon.com/datasync/latest/userguide/discovery-job-statuses.html#recommendation-statuses-table).
        public var recommendationStatus: DataSyncClientTypes.RecommendationStatus?
        /// The Amazon Web Services storage services that DataSync Discovery recommends for the cluster. For more information, see [Recommendations provided by DataSync Discovery](https://docs.aws.amazon.com/datasync/latest/userguide/discovery-understand-recommendations.html).
        public var recommendations: [DataSyncClientTypes.Recommendation]?
        /// The universally unique identifier (UUID) of the cluster.
        public var resourceId: Swift.String?

        public init(
            cifsShareCount: Swift.Int? = nil,
            clusterBlockStorageLogicalUsed: Swift.Int? = nil,
            clusterBlockStorageSize: Swift.Int? = nil,
            clusterBlockStorageUsed: Swift.Int? = nil,
            clusterCloudStorageUsed: Swift.Int? = nil,
            clusterName: Swift.String? = nil,
            lunCount: Swift.Int? = nil,
            maxP95Performance: DataSyncClientTypes.MaxP95Performance? = nil,
            nfsExportedVolumes: Swift.Int? = nil,
            recommendationStatus: DataSyncClientTypes.RecommendationStatus? = nil,
            recommendations: [DataSyncClientTypes.Recommendation]? = nil,
            resourceId: Swift.String? = nil
        )
        {
            self.cifsShareCount = cifsShareCount
            self.clusterBlockStorageLogicalUsed = clusterBlockStorageLogicalUsed
            self.clusterBlockStorageSize = clusterBlockStorageSize
            self.clusterBlockStorageUsed = clusterBlockStorageUsed
            self.clusterCloudStorageUsed = clusterCloudStorageUsed
            self.clusterName = clusterName
            self.lunCount = lunCount
            self.maxP95Performance = maxP95Performance
            self.nfsExportedVolumes = nfsExportedVolumes
            self.recommendationStatus = recommendationStatus
            self.recommendations = recommendations
            self.resourceId = resourceId
        }
    }

}

extension DataSyncClientTypes.NetAppONTAPSVM: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cifsShareCount = "CifsShareCount"
        case clusterUuid = "ClusterUuid"
        case enabledProtocols = "EnabledProtocols"
        case lunCount = "LunCount"
        case maxP95Performance = "MaxP95Performance"
        case nfsExportedVolumes = "NfsExportedVolumes"
        case recommendationStatus = "RecommendationStatus"
        case recommendations = "Recommendations"
        case resourceId = "ResourceId"
        case svmName = "SvmName"
        case totalCapacityProvisioned = "TotalCapacityProvisioned"
        case totalCapacityUsed = "TotalCapacityUsed"
        case totalLogicalCapacityUsed = "TotalLogicalCapacityUsed"
        case totalSnapshotCapacityUsed = "TotalSnapshotCapacityUsed"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cifsShareCount = self.cifsShareCount {
            try encodeContainer.encode(cifsShareCount, forKey: .cifsShareCount)
        }
        if let clusterUuid = self.clusterUuid {
            try encodeContainer.encode(clusterUuid, forKey: .clusterUuid)
        }
        if let enabledProtocols = enabledProtocols {
            var enabledProtocolsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .enabledProtocols)
            for ptolemystring0 in enabledProtocols {
                try enabledProtocolsContainer.encode(ptolemystring0)
            }
        }
        if let lunCount = self.lunCount {
            try encodeContainer.encode(lunCount, forKey: .lunCount)
        }
        if let maxP95Performance = self.maxP95Performance {
            try encodeContainer.encode(maxP95Performance, forKey: .maxP95Performance)
        }
        if let nfsExportedVolumes = self.nfsExportedVolumes {
            try encodeContainer.encode(nfsExportedVolumes, forKey: .nfsExportedVolumes)
        }
        if let recommendationStatus = self.recommendationStatus {
            try encodeContainer.encode(recommendationStatus.rawValue, forKey: .recommendationStatus)
        }
        if let recommendations = recommendations {
            var recommendationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recommendations)
            for recommendation0 in recommendations {
                try recommendationsContainer.encode(recommendation0)
            }
        }
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let svmName = self.svmName {
            try encodeContainer.encode(svmName, forKey: .svmName)
        }
        if let totalCapacityProvisioned = self.totalCapacityProvisioned {
            try encodeContainer.encode(totalCapacityProvisioned, forKey: .totalCapacityProvisioned)
        }
        if let totalCapacityUsed = self.totalCapacityUsed {
            try encodeContainer.encode(totalCapacityUsed, forKey: .totalCapacityUsed)
        }
        if let totalLogicalCapacityUsed = self.totalLogicalCapacityUsed {
            try encodeContainer.encode(totalLogicalCapacityUsed, forKey: .totalLogicalCapacityUsed)
        }
        if let totalSnapshotCapacityUsed = self.totalSnapshotCapacityUsed {
            try encodeContainer.encode(totalSnapshotCapacityUsed, forKey: .totalSnapshotCapacityUsed)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterUuidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterUuid)
        clusterUuid = clusterUuidDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let svmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .svmName)
        svmName = svmNameDecoded
        let cifsShareCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cifsShareCount)
        cifsShareCount = cifsShareCountDecoded
        let enabledProtocolsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .enabledProtocols)
        var enabledProtocolsDecoded0:[Swift.String]? = nil
        if let enabledProtocolsContainer = enabledProtocolsContainer {
            enabledProtocolsDecoded0 = [Swift.String]()
            for string0 in enabledProtocolsContainer {
                if let string0 = string0 {
                    enabledProtocolsDecoded0?.append(string0)
                }
            }
        }
        enabledProtocols = enabledProtocolsDecoded0
        let totalCapacityUsedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalCapacityUsed)
        totalCapacityUsed = totalCapacityUsedDecoded
        let totalCapacityProvisionedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalCapacityProvisioned)
        totalCapacityProvisioned = totalCapacityProvisionedDecoded
        let totalLogicalCapacityUsedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalLogicalCapacityUsed)
        totalLogicalCapacityUsed = totalLogicalCapacityUsedDecoded
        let maxP95PerformanceDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.MaxP95Performance.self, forKey: .maxP95Performance)
        maxP95Performance = maxP95PerformanceDecoded
        let recommendationsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.Recommendation?].self, forKey: .recommendations)
        var recommendationsDecoded0:[DataSyncClientTypes.Recommendation]? = nil
        if let recommendationsContainer = recommendationsContainer {
            recommendationsDecoded0 = [DataSyncClientTypes.Recommendation]()
            for structure0 in recommendationsContainer {
                if let structure0 = structure0 {
                    recommendationsDecoded0?.append(structure0)
                }
            }
        }
        recommendations = recommendationsDecoded0
        let nfsExportedVolumesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .nfsExportedVolumes)
        nfsExportedVolumes = nfsExportedVolumesDecoded
        let recommendationStatusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.RecommendationStatus.self, forKey: .recommendationStatus)
        recommendationStatus = recommendationStatusDecoded
        let totalSnapshotCapacityUsedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalSnapshotCapacityUsed)
        totalSnapshotCapacityUsed = totalSnapshotCapacityUsedDecoded
        let lunCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lunCount)
        lunCount = lunCountDecoded
    }
}

extension DataSyncClientTypes {
    /// The information that DataSync Discovery collects about a storage virtual machine (SVM) in your on-premises storage system.
    public struct NetAppONTAPSVM: Swift.Equatable {
        /// The number of CIFS shares in the SVM.
        public var cifsShareCount: Swift.Int?
        /// The universally unique identifier (UUID) of the cluster associated with the SVM.
        public var clusterUuid: Swift.String?
        /// The data transfer protocols (such as NFS) configured for the SVM.
        public var enabledProtocols: [Swift.String]?
        /// The number of LUNs (logical unit numbers) in the SVM.
        public var lunCount: Swift.Int?
        /// The performance data that DataSync Discovery collects about the SVM.
        public var maxP95Performance: DataSyncClientTypes.MaxP95Performance?
        /// The number of NFS volumes in the SVM.
        public var nfsExportedVolumes: Swift.Int?
        /// Indicates whether DataSync Discovery recommendations for the SVM are ready to view, incomplete, or can't be determined. For more information, see [Recommendation statuses](https://docs.aws.amazon.com/datasync/latest/userguide/discovery-job-statuses.html#recommendation-statuses-table).
        public var recommendationStatus: DataSyncClientTypes.RecommendationStatus?
        /// The Amazon Web Services storage services that DataSync Discovery recommends for the SVM. For more information, see [Recommendations provided by DataSync Discovery](https://docs.aws.amazon.com/datasync/latest/userguide/discovery-understand-recommendations.html).
        public var recommendations: [DataSyncClientTypes.Recommendation]?
        /// The UUID of the SVM.
        public var resourceId: Swift.String?
        /// The name of the SVM
        public var svmName: Swift.String?
        /// The total storage space that's available in the SVM.
        public var totalCapacityProvisioned: Swift.Int?
        /// The storage space that's being used in the SVM.
        public var totalCapacityUsed: Swift.Int?
        /// The storage space that's being used in the SVM without accounting for compression or deduplication.
        public var totalLogicalCapacityUsed: Swift.Int?
        /// The amount of storage in the SVM that's being used for snapshots.
        public var totalSnapshotCapacityUsed: Swift.Int?

        public init(
            cifsShareCount: Swift.Int? = nil,
            clusterUuid: Swift.String? = nil,
            enabledProtocols: [Swift.String]? = nil,
            lunCount: Swift.Int? = nil,
            maxP95Performance: DataSyncClientTypes.MaxP95Performance? = nil,
            nfsExportedVolumes: Swift.Int? = nil,
            recommendationStatus: DataSyncClientTypes.RecommendationStatus? = nil,
            recommendations: [DataSyncClientTypes.Recommendation]? = nil,
            resourceId: Swift.String? = nil,
            svmName: Swift.String? = nil,
            totalCapacityProvisioned: Swift.Int? = nil,
            totalCapacityUsed: Swift.Int? = nil,
            totalLogicalCapacityUsed: Swift.Int? = nil,
            totalSnapshotCapacityUsed: Swift.Int? = nil
        )
        {
            self.cifsShareCount = cifsShareCount
            self.clusterUuid = clusterUuid
            self.enabledProtocols = enabledProtocols
            self.lunCount = lunCount
            self.maxP95Performance = maxP95Performance
            self.nfsExportedVolumes = nfsExportedVolumes
            self.recommendationStatus = recommendationStatus
            self.recommendations = recommendations
            self.resourceId = resourceId
            self.svmName = svmName
            self.totalCapacityProvisioned = totalCapacityProvisioned
            self.totalCapacityUsed = totalCapacityUsed
            self.totalLogicalCapacityUsed = totalLogicalCapacityUsed
            self.totalSnapshotCapacityUsed = totalSnapshotCapacityUsed
        }
    }

}

extension DataSyncClientTypes.NetAppONTAPVolume: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacityProvisioned = "CapacityProvisioned"
        case capacityUsed = "CapacityUsed"
        case cifsShareCount = "CifsShareCount"
        case logicalCapacityUsed = "LogicalCapacityUsed"
        case lunCount = "LunCount"
        case maxP95Performance = "MaxP95Performance"
        case nfsExported = "NfsExported"
        case recommendationStatus = "RecommendationStatus"
        case recommendations = "Recommendations"
        case resourceId = "ResourceId"
        case securityStyle = "SecurityStyle"
        case snapshotCapacityUsed = "SnapshotCapacityUsed"
        case svmName = "SvmName"
        case svmUuid = "SvmUuid"
        case volumeName = "VolumeName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacityProvisioned = self.capacityProvisioned {
            try encodeContainer.encode(capacityProvisioned, forKey: .capacityProvisioned)
        }
        if let capacityUsed = self.capacityUsed {
            try encodeContainer.encode(capacityUsed, forKey: .capacityUsed)
        }
        if let cifsShareCount = self.cifsShareCount {
            try encodeContainer.encode(cifsShareCount, forKey: .cifsShareCount)
        }
        if let logicalCapacityUsed = self.logicalCapacityUsed {
            try encodeContainer.encode(logicalCapacityUsed, forKey: .logicalCapacityUsed)
        }
        if let lunCount = self.lunCount {
            try encodeContainer.encode(lunCount, forKey: .lunCount)
        }
        if let maxP95Performance = self.maxP95Performance {
            try encodeContainer.encode(maxP95Performance, forKey: .maxP95Performance)
        }
        if nfsExported != false {
            try encodeContainer.encode(nfsExported, forKey: .nfsExported)
        }
        if let recommendationStatus = self.recommendationStatus {
            try encodeContainer.encode(recommendationStatus.rawValue, forKey: .recommendationStatus)
        }
        if let recommendations = recommendations {
            var recommendationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recommendations)
            for recommendation0 in recommendations {
                try recommendationsContainer.encode(recommendation0)
            }
        }
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let securityStyle = self.securityStyle {
            try encodeContainer.encode(securityStyle, forKey: .securityStyle)
        }
        if let snapshotCapacityUsed = self.snapshotCapacityUsed {
            try encodeContainer.encode(snapshotCapacityUsed, forKey: .snapshotCapacityUsed)
        }
        if let svmName = self.svmName {
            try encodeContainer.encode(svmName, forKey: .svmName)
        }
        if let svmUuid = self.svmUuid {
            try encodeContainer.encode(svmUuid, forKey: .svmUuid)
        }
        if let volumeName = self.volumeName {
            try encodeContainer.encode(volumeName, forKey: .volumeName)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeName)
        volumeName = volumeNameDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let cifsShareCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .cifsShareCount)
        cifsShareCount = cifsShareCountDecoded
        let securityStyleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .securityStyle)
        securityStyle = securityStyleDecoded
        let svmUuidDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .svmUuid)
        svmUuid = svmUuidDecoded
        let svmNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .svmName)
        svmName = svmNameDecoded
        let capacityUsedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacityUsed)
        capacityUsed = capacityUsedDecoded
        let capacityProvisionedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .capacityProvisioned)
        capacityProvisioned = capacityProvisionedDecoded
        let logicalCapacityUsedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .logicalCapacityUsed)
        logicalCapacityUsed = logicalCapacityUsedDecoded
        let nfsExportedDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .nfsExported) ?? false
        nfsExported = nfsExportedDecoded
        let snapshotCapacityUsedDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .snapshotCapacityUsed)
        snapshotCapacityUsed = snapshotCapacityUsedDecoded
        let maxP95PerformanceDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.MaxP95Performance.self, forKey: .maxP95Performance)
        maxP95Performance = maxP95PerformanceDecoded
        let recommendationsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.Recommendation?].self, forKey: .recommendations)
        var recommendationsDecoded0:[DataSyncClientTypes.Recommendation]? = nil
        if let recommendationsContainer = recommendationsContainer {
            recommendationsDecoded0 = [DataSyncClientTypes.Recommendation]()
            for structure0 in recommendationsContainer {
                if let structure0 = structure0 {
                    recommendationsDecoded0?.append(structure0)
                }
            }
        }
        recommendations = recommendationsDecoded0
        let recommendationStatusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.RecommendationStatus.self, forKey: .recommendationStatus)
        recommendationStatus = recommendationStatusDecoded
        let lunCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .lunCount)
        lunCount = lunCountDecoded
    }
}

extension DataSyncClientTypes {
    /// The information that DataSync Discovery collects about a volume in your on-premises storage system.
    public struct NetAppONTAPVolume: Swift.Equatable {
        /// The total storage space that's available in the volume.
        public var capacityProvisioned: Swift.Int?
        /// The storage space that's being used in the volume.
        public var capacityUsed: Swift.Int?
        /// The number of CIFS shares in the volume.
        public var cifsShareCount: Swift.Int?
        /// The storage space that's being used in the volume without accounting for compression or deduplication.
        public var logicalCapacityUsed: Swift.Int?
        /// The number of LUNs (logical unit numbers) in the volume.
        public var lunCount: Swift.Int?
        /// The performance data that DataSync Discovery collects about the volume.
        public var maxP95Performance: DataSyncClientTypes.MaxP95Performance?
        /// The number of NFS volumes in the volume.
        public var nfsExported: Swift.Bool
        /// Indicates whether DataSync Discovery recommendations for the volume are ready to view, incomplete, or can't be determined. For more information, see [Recommendation statuses](https://docs.aws.amazon.com/datasync/latest/userguide/discovery-job-statuses.html#recommendation-statuses-table).
        public var recommendationStatus: DataSyncClientTypes.RecommendationStatus?
        /// The Amazon Web Services storage services that DataSync Discovery recommends for the volume. For more information, see [Recommendations provided by DataSync Discovery](https://docs.aws.amazon.com/datasync/latest/userguide/discovery-understand-recommendations.html).
        public var recommendations: [DataSyncClientTypes.Recommendation]?
        /// The universally unique identifier (UUID) of the volume.
        public var resourceId: Swift.String?
        /// The volume's security style (such as Unix or NTFS).
        public var securityStyle: Swift.String?
        /// The amount of storage in the volume that's being used for snapshots.
        public var snapshotCapacityUsed: Swift.Int?
        /// The name of the SVM associated with the volume.
        public var svmName: Swift.String?
        /// The UUID of the storage virtual machine (SVM) associated with the volume.
        public var svmUuid: Swift.String?
        /// The name of the volume.
        public var volumeName: Swift.String?

        public init(
            capacityProvisioned: Swift.Int? = nil,
            capacityUsed: Swift.Int? = nil,
            cifsShareCount: Swift.Int? = nil,
            logicalCapacityUsed: Swift.Int? = nil,
            lunCount: Swift.Int? = nil,
            maxP95Performance: DataSyncClientTypes.MaxP95Performance? = nil,
            nfsExported: Swift.Bool = false,
            recommendationStatus: DataSyncClientTypes.RecommendationStatus? = nil,
            recommendations: [DataSyncClientTypes.Recommendation]? = nil,
            resourceId: Swift.String? = nil,
            securityStyle: Swift.String? = nil,
            snapshotCapacityUsed: Swift.Int? = nil,
            svmName: Swift.String? = nil,
            svmUuid: Swift.String? = nil,
            volumeName: Swift.String? = nil
        )
        {
            self.capacityProvisioned = capacityProvisioned
            self.capacityUsed = capacityUsed
            self.cifsShareCount = cifsShareCount
            self.logicalCapacityUsed = logicalCapacityUsed
            self.lunCount = lunCount
            self.maxP95Performance = maxP95Performance
            self.nfsExported = nfsExported
            self.recommendationStatus = recommendationStatus
            self.recommendations = recommendations
            self.resourceId = resourceId
            self.securityStyle = securityStyle
            self.snapshotCapacityUsed = snapshotCapacityUsed
            self.svmName = svmName
            self.svmUuid = svmUuid
            self.volumeName = volumeName
        }
    }

}

extension DataSyncClientTypes.NfsMountOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let version = self.version {
            try encodeContainer.encode(version.rawValue, forKey: .version)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.NfsVersion.self, forKey: .version)
        version = versionDecoded
    }
}

extension DataSyncClientTypes {
    /// Specifies how DataSync can access a location using the NFS protocol.
    public struct NfsMountOptions: Swift.Equatable {
        /// Specifies the NFS version that you want DataSync to use when mounting your NFS share. If the server refuses to use the version specified, the task fails. You can specify the following options:
        ///
        /// * AUTOMATIC (default): DataSync chooses NFS version 4.1.
        ///
        /// * NFS3: Stateless protocol version that allows for asynchronous writes on the server.
        ///
        /// * NFSv4_0: Stateful, firewall-friendly protocol version that supports delegations and pseudo file systems.
        ///
        /// * NFSv4_1: Stateful protocol version that supports sessions, directory delegations, and parallel data processing. NFS version 4.1 also includes all features available in version 4.0.
        ///
        ///
        /// DataSync currently only supports NFS version 3 with Amazon FSx for NetApp ONTAP locations.
        public var version: DataSyncClientTypes.NfsVersion?

        public init(
            version: DataSyncClientTypes.NfsVersion? = nil
        )
        {
            self.version = version
        }
    }

}

extension DataSyncClientTypes {
    public enum NfsVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case automatic
        case nfs3
        case nfs40
        case nfs41
        case sdkUnknown(Swift.String)

        public static var allCases: [NfsVersion] {
            return [
                .automatic,
                .nfs3,
                .nfs40,
                .nfs41,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .automatic: return "AUTOMATIC"
            case .nfs3: return "NFS3"
            case .nfs40: return "NFS4_0"
            case .nfs41: return "NFS4_1"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NfsVersion(rawValue: rawValue) ?? NfsVersion.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum ObjectStorageServerProtocol: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case http
        case https
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectStorageServerProtocol] {
            return [
                .http,
                .https,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .http: return "HTTP"
            case .https: return "HTTPS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectStorageServerProtocol(rawValue: rawValue) ?? ObjectStorageServerProtocol.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum ObjectTags: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case preserve
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectTags] {
            return [
                .none,
                .preserve,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .preserve: return "PRESERVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectTags(rawValue: rawValue) ?? ObjectTags.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum ObjectVersionIds: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case include
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectVersionIds] {
            return [
                .include,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .include: return "INCLUDE"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ObjectVersionIds(rawValue: rawValue) ?? ObjectVersionIds.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.OnPremConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarn0 in agentArns {
                try agentArnsContainer.encode(agentarn0)
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
    }
}

extension DataSyncClientTypes {
    /// The DataSync agents that are connecting to a Network File System (NFS) location.
    public struct OnPremConfig: Swift.Equatable {
        /// The Amazon Resource Names (ARNs) of the agents connecting to a transfer location.
        /// This member is required.
        public var agentArns: [Swift.String]?

        public init(
            agentArns: [Swift.String]? = nil
        )
        {
            self.agentArns = agentArns
        }
    }

}

extension DataSyncClientTypes {
    public enum Operator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case beginsWith
        case contains
        case eq
        case ge
        case gt
        case `in`
        case le
        case lt
        case ne
        case notContains
        case sdkUnknown(Swift.String)

        public static var allCases: [Operator] {
            return [
                .beginsWith,
                .contains,
                .eq,
                .ge,
                .gt,
                .in,
                .le,
                .lt,
                .ne,
                .notContains,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .beginsWith: return "BeginsWith"
            case .contains: return "Contains"
            case .eq: return "Equals"
            case .ge: return "GreaterThanOrEqual"
            case .gt: return "GreaterThan"
            case .in: return "In"
            case .le: return "LessThanOrEqual"
            case .lt: return "LessThan"
            case .ne: return "NotEquals"
            case .notContains: return "NotContains"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Operator(rawValue: rawValue) ?? Operator.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.Options: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case atime = "Atime"
        case bytesPerSecond = "BytesPerSecond"
        case gid = "Gid"
        case logLevel = "LogLevel"
        case mtime = "Mtime"
        case objectTags = "ObjectTags"
        case overwriteMode = "OverwriteMode"
        case posixPermissions = "PosixPermissions"
        case preserveDeletedFiles = "PreserveDeletedFiles"
        case preserveDevices = "PreserveDevices"
        case securityDescriptorCopyFlags = "SecurityDescriptorCopyFlags"
        case taskQueueing = "TaskQueueing"
        case transferMode = "TransferMode"
        case uid = "Uid"
        case verifyMode = "VerifyMode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let atime = self.atime {
            try encodeContainer.encode(atime.rawValue, forKey: .atime)
        }
        if let bytesPerSecond = self.bytesPerSecond {
            try encodeContainer.encode(bytesPerSecond, forKey: .bytesPerSecond)
        }
        if let gid = self.gid {
            try encodeContainer.encode(gid.rawValue, forKey: .gid)
        }
        if let logLevel = self.logLevel {
            try encodeContainer.encode(logLevel.rawValue, forKey: .logLevel)
        }
        if let mtime = self.mtime {
            try encodeContainer.encode(mtime.rawValue, forKey: .mtime)
        }
        if let objectTags = self.objectTags {
            try encodeContainer.encode(objectTags.rawValue, forKey: .objectTags)
        }
        if let overwriteMode = self.overwriteMode {
            try encodeContainer.encode(overwriteMode.rawValue, forKey: .overwriteMode)
        }
        if let posixPermissions = self.posixPermissions {
            try encodeContainer.encode(posixPermissions.rawValue, forKey: .posixPermissions)
        }
        if let preserveDeletedFiles = self.preserveDeletedFiles {
            try encodeContainer.encode(preserveDeletedFiles.rawValue, forKey: .preserveDeletedFiles)
        }
        if let preserveDevices = self.preserveDevices {
            try encodeContainer.encode(preserveDevices.rawValue, forKey: .preserveDevices)
        }
        if let securityDescriptorCopyFlags = self.securityDescriptorCopyFlags {
            try encodeContainer.encode(securityDescriptorCopyFlags.rawValue, forKey: .securityDescriptorCopyFlags)
        }
        if let taskQueueing = self.taskQueueing {
            try encodeContainer.encode(taskQueueing.rawValue, forKey: .taskQueueing)
        }
        if let transferMode = self.transferMode {
            try encodeContainer.encode(transferMode.rawValue, forKey: .transferMode)
        }
        if let uid = self.uid {
            try encodeContainer.encode(uid.rawValue, forKey: .uid)
        }
        if let verifyMode = self.verifyMode {
            try encodeContainer.encode(verifyMode.rawValue, forKey: .verifyMode)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let verifyModeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.VerifyMode.self, forKey: .verifyMode)
        verifyMode = verifyModeDecoded
        let overwriteModeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.OverwriteMode.self, forKey: .overwriteMode)
        overwriteMode = overwriteModeDecoded
        let atimeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Atime.self, forKey: .atime)
        atime = atimeDecoded
        let mtimeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Mtime.self, forKey: .mtime)
        mtime = mtimeDecoded
        let uidDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Uid.self, forKey: .uid)
        uid = uidDecoded
        let gidDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Gid.self, forKey: .gid)
        gid = gidDecoded
        let preserveDeletedFilesDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.PreserveDeletedFiles.self, forKey: .preserveDeletedFiles)
        preserveDeletedFiles = preserveDeletedFilesDecoded
        let preserveDevicesDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.PreserveDevices.self, forKey: .preserveDevices)
        preserveDevices = preserveDevicesDecoded
        let posixPermissionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.PosixPermissions.self, forKey: .posixPermissions)
        posixPermissions = posixPermissionsDecoded
        let bytesPerSecondDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .bytesPerSecond)
        bytesPerSecond = bytesPerSecondDecoded
        let taskQueueingDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskQueueing.self, forKey: .taskQueueing)
        taskQueueing = taskQueueingDecoded
        let logLevelDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.LogLevel.self, forKey: .logLevel)
        logLevel = logLevelDecoded
        let transferModeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TransferMode.self, forKey: .transferMode)
        transferMode = transferModeDecoded
        let securityDescriptorCopyFlagsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.SmbSecurityDescriptorCopyFlags.self, forKey: .securityDescriptorCopyFlags)
        securityDescriptorCopyFlags = securityDescriptorCopyFlagsDecoded
        let objectTagsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ObjectTags.self, forKey: .objectTags)
        objectTags = objectTagsDecoded
    }
}

extension DataSyncClientTypes {
    /// Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options. Each option has a default value. Unless you need to, you don't have to configure any of these options before starting your task.
    public struct Options: Swift.Equatable {
        /// Specifies whether to preserve metadata indicating the last time a file was read or written to. If you set Atime to BEST_EFFORT, DataSync attempts to preserve the original Atime attribute on all source files (that is, the version before the PREPARING phase of the task execution). The behavior of Atime isn't fully standard across platforms, so DataSync can only do this on a best-effort basis. Default value: BEST_EFFORTBEST_EFFORT: Attempt to preserve the per-file Atime value (recommended). NONE: Ignore Atime. If Atime is set to BEST_EFFORT, Mtime must be set to PRESERVE. If Atime is set to NONE, Mtime must also be NONE.
        public var atime: DataSyncClientTypes.Atime?
        /// Limits the bandwidth used by a DataSync task. For example, if you want DataSync to use a maximum of 1 MB, set this value to 1048576 (=1024*1024).
        public var bytesPerSecond: Swift.Int?
        /// Specifies the POSIX group ID (GID) of the file's owners. For more information, see [Metadata copied by DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html#metadata-copied). Default value: INT_VALUE. This preserves the integer value of the ID. INT_VALUE: Preserve the integer value of user ID (UID) and GID (recommended). NONE: Ignore UID and GID.
        public var gid: DataSyncClientTypes.Gid?
        /// Specifies the type of logs that DataSync publishes to a Amazon CloudWatch Logs log group. To specify the log group, see [CloudWatchLogGroupArn](https://docs.aws.amazon.com/datasync/latest/userguide/API_CreateTask.html#DataSync-CreateTask-request-CloudWatchLogGroupArn). If you set LogLevel to OFF, no logs are published. BASIC publishes logs on errors for individual files transferred. TRANSFER publishes logs for every file or object that is transferred and integrity checked.
        public var logLevel: DataSyncClientTypes.LogLevel?
        /// Specifies whether to preserve metadata indicating the last time that a file was written to before the PREPARING phase of your task execution. This option is required when you need to run the a task more than once. Default Value: PRESERVEPRESERVE: Preserve original Mtime (recommended) NONE: Ignore Mtime. If Mtime is set to PRESERVE, Atime must be set to BEST_EFFORT. If Mtime is set to NONE, Atime must also be set to NONE.
        public var mtime: DataSyncClientTypes.Mtime?
        /// Specifies whether object tags are preserved when transferring between object storage systems. If you want your DataSync task to ignore object tags, specify the NONE value. Default Value: PRESERVE
        public var objectTags: DataSyncClientTypes.ObjectTags?
        /// Specifies whether data at the destination location should be overwritten or preserved. If set to NEVER, a destination file for example will not be replaced by a source file (even if the destination file differs from the source file). If you modify files in the destination and you sync the files, you can use this value to protect against overwriting those changes. Some storage classes have specific behaviors that can affect your Amazon S3 storage cost. For detailed information, see [Considerations when working with Amazon S3 storage classes in DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes).
        public var overwriteMode: DataSyncClientTypes.OverwriteMode?
        /// Specifies which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file. For more information, see [Metadata copied by DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html#metadata-copied). Default value: PRESERVEPRESERVE: Preserve POSIX-style permissions (recommended). NONE: Ignore permissions. DataSync can preserve extant permissions of a source location.
        public var posixPermissions: DataSyncClientTypes.PosixPermissions?
        /// Specifies whether files in the destination location that don't exist in the source should be preserved. This option can affect your Amazon S3 storage cost. If your task deletes objects, you might incur minimum storage duration charges for certain storage classes. For detailed information, see [Considerations when working with Amazon S3 storage classes in DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes). Default value: PRESERVEPRESERVE: Ignore such destination files (recommended). REMOVE: Delete destination files that aren’t present in the source. If you set this parameter to REMOVE, you can't set TransferMode to ALL. When you transfer all data, DataSync doesn't scan your destination location and doesn't know what to delete.
        public var preserveDeletedFiles: DataSyncClientTypes.PreserveDeletedFiles?
        /// Specifies whether DataSync should preserve the metadata of block and character devices in the source location and recreate the files with that device name and metadata on the destination. DataSync copies only the name and metadata of such devices. DataSync can't copy the actual contents of these devices because they're nonterminal and don't return an end-of-file (EOF) marker. Default value: NONENONE: Ignore special devices (recommended). PRESERVE: Preserve character and block device metadata. This option currently isn't supported for Amazon EFS.
        public var preserveDevices: DataSyncClientTypes.PreserveDevices?
        /// Specifies which components of the SMB security descriptor are copied from source to destination objects. This value is only used for transfers between SMB and Amazon FSx for Windows File Server locations or between two FSx for Windows File Server locations. For more information, see [how DataSync handles metadata](https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html). Default value: OWNER_DACLOWNER_DACL: For each copied object, DataSync copies the following metadata:
        ///
        /// * The object owner.
        ///
        /// * NTFS discretionary access control lists (DACLs), which determine whether to grant access to an object. DataSync won't copy NTFS system access control lists (SACLs) with this option.
        ///
        ///
        /// OWNER_DACL_SACL: For each copied object, DataSync copies the following metadata:
        ///
        /// * The object owner.
        ///
        /// * NTFS discretionary access control lists (DACLs), which determine whether to grant access to an object.
        ///
        /// * SACLs, which are used by administrators to log attempts to access a secured object. Copying SACLs requires granting additional permissions to the Windows user that DataSync uses to access your SMB location. For information about choosing a user that ensures sufficient permissions to files, folders, and metadata, see [user].
        ///
        ///
        /// NONE: None of the SMB security descriptor components are copied. Destination objects are owned by the user that was provided for accessing the destination location. DACLs and SACLs are set based on the destination server’s configuration.
        public var securityDescriptorCopyFlags: DataSyncClientTypes.SmbSecurityDescriptorCopyFlags?
        /// Specifies whether your transfer tasks should be put into a queue during certain scenarios when [running multiple tasks](https://docs.aws.amazon.com/datasync/latest/userguide/run-task.html#running-multiple-tasks). This is ENABLED by default.
        public var taskQueueing: DataSyncClientTypes.TaskQueueing?
        /// Determines whether DataSync transfers only the data and metadata that differ between the source and the destination location or transfers all the content from the source (without comparing what's in the destination). CHANGED: DataSync copies only data or metadata that is new or different content from the source location to the destination location. ALL: DataSync copies all source location content to the destination (without comparing what's in the destination).
        public var transferMode: DataSyncClientTypes.TransferMode?
        /// Specifies the POSIX user ID (UID) of the file's owner. For more information, see [Metadata copied by DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html#metadata-copied). Default value: INT_VALUE. This preserves the integer value of the ID. INT_VALUE: Preserve the integer value of UID and group ID (GID) (recommended). NONE: Ignore UID and GID.
        public var uid: DataSyncClientTypes.Uid?
        /// Specifies how and when DataSync checks the integrity of your data during a transfer. Default value: POINT_IN_TIME_CONSISTENTONLY_FILES_TRANSFERRED (recommended): DataSync calculates the checksum of transferred files and metadata at the source location. At the end of the transfer, DataSync then compares this checksum to the checksum calculated on those files at the destination. We recommend this option when transferring to S3 Glacier Flexible Retrieval or S3 Glacier Deep Archive storage classes. For more information, see [Storage class considerations with Amazon S3 locations](https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes). POINT_IN_TIME_CONSISTENT: At the end of the transfer, DataSync scans the entire source and destination to verify that both locations are fully synchronized. You can't use this option when transferring to S3 Glacier Flexible Retrieval or S3 Glacier Deep Archive storage classes. For more information, see [Storage class considerations with Amazon S3 locations](https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes). NONE: DataSync doesn't run additional verification at the end of the transfer. All data transmissions are still integrity-checked with checksum verification during the transfer.
        public var verifyMode: DataSyncClientTypes.VerifyMode?

        public init(
            atime: DataSyncClientTypes.Atime? = nil,
            bytesPerSecond: Swift.Int? = nil,
            gid: DataSyncClientTypes.Gid? = nil,
            logLevel: DataSyncClientTypes.LogLevel? = nil,
            mtime: DataSyncClientTypes.Mtime? = nil,
            objectTags: DataSyncClientTypes.ObjectTags? = nil,
            overwriteMode: DataSyncClientTypes.OverwriteMode? = nil,
            posixPermissions: DataSyncClientTypes.PosixPermissions? = nil,
            preserveDeletedFiles: DataSyncClientTypes.PreserveDeletedFiles? = nil,
            preserveDevices: DataSyncClientTypes.PreserveDevices? = nil,
            securityDescriptorCopyFlags: DataSyncClientTypes.SmbSecurityDescriptorCopyFlags? = nil,
            taskQueueing: DataSyncClientTypes.TaskQueueing? = nil,
            transferMode: DataSyncClientTypes.TransferMode? = nil,
            uid: DataSyncClientTypes.Uid? = nil,
            verifyMode: DataSyncClientTypes.VerifyMode? = nil
        )
        {
            self.atime = atime
            self.bytesPerSecond = bytesPerSecond
            self.gid = gid
            self.logLevel = logLevel
            self.mtime = mtime
            self.objectTags = objectTags
            self.overwriteMode = overwriteMode
            self.posixPermissions = posixPermissions
            self.preserveDeletedFiles = preserveDeletedFiles
            self.preserveDevices = preserveDevices
            self.securityDescriptorCopyFlags = securityDescriptorCopyFlags
            self.taskQueueing = taskQueueing
            self.transferMode = transferMode
            self.uid = uid
            self.verifyMode = verifyMode
        }
    }

}

extension DataSyncClientTypes {
    public enum OverwriteMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case always
        case never
        case sdkUnknown(Swift.String)

        public static var allCases: [OverwriteMode] {
            return [
                .always,
                .never,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .always: return "ALWAYS"
            case .never: return "NEVER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OverwriteMode(rawValue: rawValue) ?? OverwriteMode.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.P95Metrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case iops = "IOPS"
        case latency = "Latency"
        case throughput = "Throughput"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let iops = self.iops {
            try encodeContainer.encode(iops, forKey: .iops)
        }
        if let latency = self.latency {
            try encodeContainer.encode(latency, forKey: .latency)
        }
        if let throughput = self.throughput {
            try encodeContainer.encode(throughput, forKey: .throughput)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let iopsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.IOPS.self, forKey: .iops)
        iops = iopsDecoded
        let throughputDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Throughput.self, forKey: .throughput)
        throughput = throughputDecoded
        let latencyDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Latency.self, forKey: .latency)
        latency = latencyDecoded
    }
}

extension DataSyncClientTypes {
    /// The types of performance data that DataSync Discovery collects about an on-premises storage system resource.
    public struct P95Metrics: Swift.Equatable {
        /// The IOPS peaks for an on-premises storage system resource. Each data point represents the 95th percentile peak value during a 1-hour interval.
        public var iops: DataSyncClientTypes.IOPS?
        /// The latency peaks for an on-premises storage system resource. Each data point represents the 95th percentile peak value during a 1-hour interval.
        public var latency: DataSyncClientTypes.Latency?
        /// The throughput peaks for an on-premises storage system resource. Each data point represents the 95th percentile peak value during a 1-hour interval.
        public var throughput: DataSyncClientTypes.Throughput?

        public init(
            iops: DataSyncClientTypes.IOPS? = nil,
            latency: DataSyncClientTypes.Latency? = nil,
            throughput: DataSyncClientTypes.Throughput? = nil
        )
        {
            self.iops = iops
            self.latency = latency
            self.throughput = throughput
        }
    }

}

extension DataSyncClientTypes {
    public enum PhaseStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case error
        case pending
        case success
        case sdkUnknown(Swift.String)

        public static var allCases: [PhaseStatus] {
            return [
                .error,
                .pending,
                .success,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .error: return "ERROR"
            case .pending: return "PENDING"
            case .success: return "SUCCESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PhaseStatus(rawValue: rawValue) ?? PhaseStatus.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum PosixPermissions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case preserve
        case sdkUnknown(Swift.String)

        public static var allCases: [PosixPermissions] {
            return [
                .none,
                .preserve,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .preserve: return "PRESERVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PosixPermissions(rawValue: rawValue) ?? PosixPermissions.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum PreserveDeletedFiles: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case preserve
        case remove
        case sdkUnknown(Swift.String)

        public static var allCases: [PreserveDeletedFiles] {
            return [
                .preserve,
                .remove,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .preserve: return "PRESERVE"
            case .remove: return "REMOVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PreserveDeletedFiles(rawValue: rawValue) ?? PreserveDeletedFiles.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum PreserveDevices: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case preserve
        case sdkUnknown(Swift.String)

        public static var allCases: [PreserveDevices] {
            return [
                .none,
                .preserve,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .preserve: return "PRESERVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PreserveDevices(rawValue: rawValue) ?? PreserveDevices.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.PrivateLinkConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case privateLinkEndpoint = "PrivateLinkEndpoint"
        case securityGroupArns = "SecurityGroupArns"
        case subnetArns = "SubnetArns"
        case vpcEndpointId = "VpcEndpointId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let privateLinkEndpoint = self.privateLinkEndpoint {
            try encodeContainer.encode(privateLinkEndpoint, forKey: .privateLinkEndpoint)
        }
        if let securityGroupArns = securityGroupArns {
            var securityGroupArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupArns)
            for ec2securitygrouparn0 in securityGroupArns {
                try securityGroupArnsContainer.encode(ec2securitygrouparn0)
            }
        }
        if let subnetArns = subnetArns {
            var subnetArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetArns)
            for ec2subnetarn0 in subnetArns {
                try subnetArnsContainer.encode(ec2subnetarn0)
            }
        }
        if let vpcEndpointId = self.vpcEndpointId {
            try encodeContainer.encode(vpcEndpointId, forKey: .vpcEndpointId)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcEndpointIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcEndpointId)
        vpcEndpointId = vpcEndpointIdDecoded
        let privateLinkEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateLinkEndpoint)
        privateLinkEndpoint = privateLinkEndpointDecoded
        let subnetArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetArns)
        var subnetArnsDecoded0:[Swift.String]? = nil
        if let subnetArnsContainer = subnetArnsContainer {
            subnetArnsDecoded0 = [Swift.String]()
            for string0 in subnetArnsContainer {
                if let string0 = string0 {
                    subnetArnsDecoded0?.append(string0)
                }
            }
        }
        subnetArns = subnetArnsDecoded0
        let securityGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupArns)
        var securityGroupArnsDecoded0:[Swift.String]? = nil
        if let securityGroupArnsContainer = securityGroupArnsContainer {
            securityGroupArnsDecoded0 = [Swift.String]()
            for string0 in securityGroupArnsContainer {
                if let string0 = string0 {
                    securityGroupArnsDecoded0?.append(string0)
                }
            }
        }
        securityGroupArns = securityGroupArnsDecoded0
    }
}

extension DataSyncClientTypes {
    /// Specifies how your DataSync agent connects to Amazon Web Services using a virtual private cloud (VPC) service endpoint. An agent that uses a VPC endpoint isn't accessible over the public internet.
    public struct PrivateLinkConfig: Swift.Equatable {
        /// Specifies the VPC endpoint provided by [Amazon Web Services PrivateLink](https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html) that your agent connects to.
        public var privateLinkEndpoint: Swift.String?
        /// Specifies the Amazon Resource Names (ARN) of the security group that provides DataSync access to your VPC endpoint. You can only specify one ARN.
        public var securityGroupArns: [Swift.String]?
        /// Specifies the ARN of the subnet where your VPC endpoint is located. You can only specify one ARN.
        public var subnetArns: [Swift.String]?
        /// Specifies the ID of the VPC endpoint that your agent connects to.
        public var vpcEndpointId: Swift.String?

        public init(
            privateLinkEndpoint: Swift.String? = nil,
            securityGroupArns: [Swift.String]? = nil,
            subnetArns: [Swift.String]? = nil,
            vpcEndpointId: Swift.String? = nil
        )
        {
            self.privateLinkEndpoint = privateLinkEndpoint
            self.securityGroupArns = securityGroupArns
            self.subnetArns = subnetArns
            self.vpcEndpointId = vpcEndpointId
        }
    }

}

extension DataSyncClientTypes.QopConfiguration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataTransferProtection = "DataTransferProtection"
        case rpcProtection = "RpcProtection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataTransferProtection = self.dataTransferProtection {
            try encodeContainer.encode(dataTransferProtection.rawValue, forKey: .dataTransferProtection)
        }
        if let rpcProtection = self.rpcProtection {
            try encodeContainer.encode(rpcProtection.rawValue, forKey: .rpcProtection)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rpcProtectionDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.HdfsRpcProtection.self, forKey: .rpcProtection)
        rpcProtection = rpcProtectionDecoded
        let dataTransferProtectionDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.HdfsDataTransferProtection.self, forKey: .dataTransferProtection)
        dataTransferProtection = dataTransferProtectionDecoded
    }
}

extension DataSyncClientTypes {
    /// The Quality of Protection (QOP) configuration specifies the Remote Procedure Call (RPC) and data transfer privacy settings configured on the Hadoop Distributed File System (HDFS) cluster.
    public struct QopConfiguration: Swift.Equatable {
        /// The data transfer protection setting configured on the HDFS cluster. This setting corresponds to your dfs.data.transfer.protection setting in the hdfs-site.xml file on your Hadoop cluster.
        public var dataTransferProtection: DataSyncClientTypes.HdfsDataTransferProtection?
        /// The RPC protection setting configured on the HDFS cluster. This setting corresponds to your hadoop.rpc.protection setting in your core-site.xml file on your Hadoop cluster.
        public var rpcProtection: DataSyncClientTypes.HdfsRpcProtection?

        public init(
            dataTransferProtection: DataSyncClientTypes.HdfsDataTransferProtection? = nil,
            rpcProtection: DataSyncClientTypes.HdfsRpcProtection? = nil
        )
        {
            self.dataTransferProtection = dataTransferProtection
            self.rpcProtection = rpcProtection
        }
    }

}

extension DataSyncClientTypes.Recommendation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case estimatedMonthlyStorageCost = "EstimatedMonthlyStorageCost"
        case storageConfiguration = "StorageConfiguration"
        case storageType = "StorageType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let estimatedMonthlyStorageCost = self.estimatedMonthlyStorageCost {
            try encodeContainer.encode(estimatedMonthlyStorageCost, forKey: .estimatedMonthlyStorageCost)
        }
        if let storageConfiguration = storageConfiguration {
            var storageConfigurationContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .storageConfiguration)
            for (dictKey0, recommendationsConfigMap0) in storageConfiguration {
                try storageConfigurationContainer.encode(recommendationsConfigMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let storageType = self.storageType {
            try encodeContainer.encode(storageType, forKey: .storageType)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let storageConfigurationContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .storageConfiguration)
        var storageConfigurationDecoded0: [Swift.String:Swift.String]? = nil
        if let storageConfigurationContainer = storageConfigurationContainer {
            storageConfigurationDecoded0 = [Swift.String:Swift.String]()
            for (key0, ptolemystring0) in storageConfigurationContainer {
                if let ptolemystring0 = ptolemystring0 {
                    storageConfigurationDecoded0?[key0] = ptolemystring0
                }
            }
        }
        storageConfiguration = storageConfigurationDecoded0
        let estimatedMonthlyStorageCostDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .estimatedMonthlyStorageCost)
        estimatedMonthlyStorageCost = estimatedMonthlyStorageCostDecoded
    }
}

extension DataSyncClientTypes {
    /// The details about an Amazon Web Services storage service that DataSync Discovery recommends for a resource in your on-premises storage system. For more information, see [Recommendations provided by DataSync Discovery](https://docs.aws.amazon.com/datasync/latest/userguide/discovery-understand-recommendations.html).
    public struct Recommendation: Swift.Equatable {
        /// The estimated monthly cost of the recommended Amazon Web Services storage service.
        public var estimatedMonthlyStorageCost: Swift.String?
        /// Information about how you can set up a recommended Amazon Web Services storage service.
        public var storageConfiguration: [Swift.String:Swift.String]?
        /// A recommended Amazon Web Services storage service that you can migrate data to based on information that DataSync Discovery collects about your on-premises storage system.
        public var storageType: Swift.String?

        public init(
            estimatedMonthlyStorageCost: Swift.String? = nil,
            storageConfiguration: [Swift.String:Swift.String]? = nil,
            storageType: Swift.String? = nil
        )
        {
            self.estimatedMonthlyStorageCost = estimatedMonthlyStorageCost
            self.storageConfiguration = storageConfiguration
            self.storageType = storageType
        }
    }

}

extension DataSyncClientTypes {
    public enum RecommendationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecommendationStatus(rawValue: rawValue) ?? RecommendationStatus.sdkUnknown(rawValue)
        }
    }
}

extension RemoveStorageSystemInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storageSystemArn = "StorageSystemArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let storageSystemArn = self.storageSystemArn {
            try encodeContainer.encode(storageSystemArn, forKey: .storageSystemArn)
        }
    }
}

extension RemoveStorageSystemInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct RemoveStorageSystemInput: Swift.Equatable {
    /// Specifies the Amazon Resource Name (ARN) of the storage system that you want to permanently remove from DataSync Discovery.
    /// This member is required.
    public var storageSystemArn: Swift.String?

    public init(
        storageSystemArn: Swift.String? = nil
    )
    {
        self.storageSystemArn = storageSystemArn
    }
}

struct RemoveStorageSystemInputBody: Swift.Equatable {
    let storageSystemArn: Swift.String?
}

extension RemoveStorageSystemInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case storageSystemArn = "StorageSystemArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageSystemArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageSystemArn)
        storageSystemArn = storageSystemArnDecoded
    }
}

public enum RemoveStorageSystemOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension RemoveStorageSystemOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct RemoveStorageSystemOutputResponse: Swift.Equatable {

    public init() { }
}

extension DataSyncClientTypes.ReportDestination: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3 = "S3"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3 = self.s3 {
            try encodeContainer.encode(s3, forKey: .s3)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3Decoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ReportDestinationS3.self, forKey: .s3)
        s3 = s3Decoded
    }
}

extension DataSyncClientTypes {
    /// Specifies where DataSync uploads your [task report](https://docs.aws.amazon.com/datasync/latest/userguide/creating-task-reports.html).
    public struct ReportDestination: Swift.Equatable {
        /// Specifies the Amazon S3 bucket where DataSync uploads your task report.
        public var s3: DataSyncClientTypes.ReportDestinationS3?

        public init(
            s3: DataSyncClientTypes.ReportDestinationS3? = nil
        )
        {
            self.s3 = s3
        }
    }

}

extension DataSyncClientTypes.ReportDestinationS3: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketAccessRoleArn = "BucketAccessRoleArn"
        case s3BucketArn = "S3BucketArn"
        case subdirectory = "Subdirectory"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketAccessRoleArn = self.bucketAccessRoleArn {
            try encodeContainer.encode(bucketAccessRoleArn, forKey: .bucketAccessRoleArn)
        }
        if let s3BucketArn = self.s3BucketArn {
            try encodeContainer.encode(s3BucketArn, forKey: .s3BucketArn)
        }
        if let subdirectory = self.subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let s3BucketArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3BucketArn)
        s3BucketArn = s3BucketArnDecoded
        let bucketAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketAccessRoleArn)
        bucketAccessRoleArn = bucketAccessRoleArnDecoded
    }
}

extension DataSyncClientTypes {
    /// Specifies the Amazon S3 bucket where DataSync uploads your [task report](https://docs.aws.amazon.com/datasync/latest/userguide/creating-task-reports.html).
    public struct ReportDestinationS3: Swift.Equatable {
        /// Specifies the Amazon Resource Name (ARN) of the IAM policy that allows DataSync to upload a task report to your S3 bucket. For more information, see [Allowing DataSync to upload a task report to an Amazon S3 bucket](https://docs.aws.amazon.com/https:/docs.aws.amazon.com/datasync/latest/userguide/creating-task-reports.html).
        /// This member is required.
        public var bucketAccessRoleArn: Swift.String?
        /// Specifies the ARN of the S3 bucket where DataSync uploads your report.
        /// This member is required.
        public var s3BucketArn: Swift.String?
        /// Specifies a bucket prefix for your report.
        public var subdirectory: Swift.String?

        public init(
            bucketAccessRoleArn: Swift.String? = nil,
            s3BucketArn: Swift.String? = nil,
            subdirectory: Swift.String? = nil
        )
        {
            self.bucketAccessRoleArn = bucketAccessRoleArn
            self.s3BucketArn = s3BucketArn
            self.subdirectory = subdirectory
        }
    }

}

extension DataSyncClientTypes {
    public enum ReportLevel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case errorsOnly
        case successesAndErrors
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportLevel] {
            return [
                .errorsOnly,
                .successesAndErrors,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .errorsOnly: return "ERRORS_ONLY"
            case .successesAndErrors: return "SUCCESSES_AND_ERRORS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReportLevel(rawValue: rawValue) ?? ReportLevel.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum ReportOutputType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case standard
        case summaryOnly
        case sdkUnknown(Swift.String)

        public static var allCases: [ReportOutputType] {
            return [
                .standard,
                .summaryOnly,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .standard: return "STANDARD"
            case .summaryOnly: return "SUMMARY_ONLY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ReportOutputType(rawValue: rawValue) ?? ReportOutputType.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.ReportOverride: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case reportLevel = "ReportLevel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let reportLevel = self.reportLevel {
            try encodeContainer.encode(reportLevel.rawValue, forKey: .reportLevel)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reportLevelDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ReportLevel.self, forKey: .reportLevel)
        reportLevel = reportLevelDecoded
    }
}

extension DataSyncClientTypes {
    /// Specifies the level of detail for a particular aspect of your DataSync [task report](https://docs.aws.amazon.com/datasync/latest/userguide/creating-task-reports.html).
    public struct ReportOverride: Swift.Equatable {
        /// Specifies whether your task report includes errors only or successes and errors. For example, your report might mostly include only what didn't go well in your transfer (ERRORS_ONLY). At the same time, you want to verify that your [task filter](https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html) is working correctly. In this situation, you can get a list of what files DataSync successfully skipped and if something transferred that you didn't to transfer (SUCCESSES_AND_ERRORS).
        public var reportLevel: DataSyncClientTypes.ReportLevel?

        public init(
            reportLevel: DataSyncClientTypes.ReportLevel? = nil
        )
        {
            self.reportLevel = reportLevel
        }
    }

}

extension DataSyncClientTypes.ReportOverrides: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleted = "Deleted"
        case skipped = "Skipped"
        case transferred = "Transferred"
        case verified = "Verified"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deleted = self.deleted {
            try encodeContainer.encode(deleted, forKey: .deleted)
        }
        if let skipped = self.skipped {
            try encodeContainer.encode(skipped, forKey: .skipped)
        }
        if let transferred = self.transferred {
            try encodeContainer.encode(transferred, forKey: .transferred)
        }
        if let verified = self.verified {
            try encodeContainer.encode(verified, forKey: .verified)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transferredDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ReportOverride.self, forKey: .transferred)
        transferred = transferredDecoded
        let verifiedDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ReportOverride.self, forKey: .verified)
        verified = verifiedDecoded
        let deletedDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ReportOverride.self, forKey: .deleted)
        deleted = deletedDecoded
        let skippedDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ReportOverride.self, forKey: .skipped)
        skipped = skippedDecoded
    }
}

extension DataSyncClientTypes {
    /// The level of detail included in each aspect of your DataSync [task report](https://docs.aws.amazon.com/datasync/latest/userguide/creating-task-reports.html).
    public struct ReportOverrides: Swift.Equatable {
        /// Specifies the level of reporting for the files, objects, and directories that DataSync attempted to delete in your destination location. This only applies if you [configure your task](https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html) to delete data in the destination that isn't in the source.
        public var deleted: DataSyncClientTypes.ReportOverride?
        /// Specifies the level of reporting for the files, objects, and directories that DataSync attempted to skip during your transfer.
        public var skipped: DataSyncClientTypes.ReportOverride?
        /// Specifies the level of reporting for the files, objects, and directories that DataSync attempted to transfer.
        public var transferred: DataSyncClientTypes.ReportOverride?
        /// Specifies the level of reporting for the files, objects, and directories that DataSync attempted to verify at the end of your transfer. This only applies if you [configure your task](https://docs.aws.amazon.com/datasync/latest/userguide/configure-data-verification-options.html) to verify data during and after the transfer (which DataSync does by default).
        public var verified: DataSyncClientTypes.ReportOverride?

        public init(
            deleted: DataSyncClientTypes.ReportOverride? = nil,
            skipped: DataSyncClientTypes.ReportOverride? = nil,
            transferred: DataSyncClientTypes.ReportOverride? = nil,
            verified: DataSyncClientTypes.ReportOverride? = nil
        )
        {
            self.deleted = deleted
            self.skipped = skipped
            self.transferred = transferred
            self.verified = verified
        }
    }

}

extension DataSyncClientTypes.ReportResult: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorDetail = "ErrorDetail"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorDetail = self.errorDetail {
            try encodeContainer.encode(errorDetail, forKey: .errorDetail)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.PhaseStatus.self, forKey: .status)
        status = statusDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorDetailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorDetail)
        errorDetail = errorDetailDecoded
    }
}

extension DataSyncClientTypes {
    /// Indicates whether DataSync created a complete [task report](https://docs.aws.amazon.com/datasync/latest/userguide/creating-task-reports.html) for your transfer.
    public struct ReportResult: Swift.Equatable {
        /// Indicates the code associated with the error if DataSync can't create a complete report.
        public var errorCode: Swift.String?
        /// Provides details about issues creating a report.
        public var errorDetail: Swift.String?
        /// Indicates whether DataSync is still working on your report, created a report, or can't create a complete report.
        public var status: DataSyncClientTypes.PhaseStatus?

        public init(
            errorCode: Swift.String? = nil,
            errorDetail: Swift.String? = nil,
            status: DataSyncClientTypes.PhaseStatus? = nil
        )
        {
            self.errorCode = errorCode
            self.errorDetail = errorDetail
            self.status = status
        }
    }

}

extension DataSyncClientTypes.ResourceDetails: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case netAppONTAPClusters = "NetAppONTAPClusters"
        case netAppONTAPSVMs = "NetAppONTAPSVMs"
        case netAppONTAPVolumes = "NetAppONTAPVolumes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let netAppONTAPClusters = netAppONTAPClusters {
            var netAppONTAPClustersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .netAppONTAPClusters)
            for netappontapcluster0 in netAppONTAPClusters {
                try netAppONTAPClustersContainer.encode(netappontapcluster0)
            }
        }
        if let netAppONTAPSVMs = netAppONTAPSVMs {
            var netAppONTAPSVMsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .netAppONTAPSVMs)
            for netappontapsvm0 in netAppONTAPSVMs {
                try netAppONTAPSVMsContainer.encode(netappontapsvm0)
            }
        }
        if let netAppONTAPVolumes = netAppONTAPVolumes {
            var netAppONTAPVolumesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .netAppONTAPVolumes)
            for netappontapvolume0 in netAppONTAPVolumes {
                try netAppONTAPVolumesContainer.encode(netappontapvolume0)
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let netAppONTAPSVMsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.NetAppONTAPSVM?].self, forKey: .netAppONTAPSVMs)
        var netAppONTAPSVMsDecoded0:[DataSyncClientTypes.NetAppONTAPSVM]? = nil
        if let netAppONTAPSVMsContainer = netAppONTAPSVMsContainer {
            netAppONTAPSVMsDecoded0 = [DataSyncClientTypes.NetAppONTAPSVM]()
            for structure0 in netAppONTAPSVMsContainer {
                if let structure0 = structure0 {
                    netAppONTAPSVMsDecoded0?.append(structure0)
                }
            }
        }
        netAppONTAPSVMs = netAppONTAPSVMsDecoded0
        let netAppONTAPVolumesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.NetAppONTAPVolume?].self, forKey: .netAppONTAPVolumes)
        var netAppONTAPVolumesDecoded0:[DataSyncClientTypes.NetAppONTAPVolume]? = nil
        if let netAppONTAPVolumesContainer = netAppONTAPVolumesContainer {
            netAppONTAPVolumesDecoded0 = [DataSyncClientTypes.NetAppONTAPVolume]()
            for structure0 in netAppONTAPVolumesContainer {
                if let structure0 = structure0 {
                    netAppONTAPVolumesDecoded0?.append(structure0)
                }
            }
        }
        netAppONTAPVolumes = netAppONTAPVolumesDecoded0
        let netAppONTAPClustersContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.NetAppONTAPCluster?].self, forKey: .netAppONTAPClusters)
        var netAppONTAPClustersDecoded0:[DataSyncClientTypes.NetAppONTAPCluster]? = nil
        if let netAppONTAPClustersContainer = netAppONTAPClustersContainer {
            netAppONTAPClustersDecoded0 = [DataSyncClientTypes.NetAppONTAPCluster]()
            for structure0 in netAppONTAPClustersContainer {
                if let structure0 = structure0 {
                    netAppONTAPClustersDecoded0?.append(structure0)
                }
            }
        }
        netAppONTAPClusters = netAppONTAPClustersDecoded0
    }
}

extension DataSyncClientTypes {
    /// Information provided by DataSync Discovery about the resources in your on-premises storage system.
    public struct ResourceDetails: Swift.Equatable {
        /// The information that DataSync Discovery collects about the cluster in your on-premises storage system.
        public var netAppONTAPClusters: [DataSyncClientTypes.NetAppONTAPCluster]?
        /// The information that DataSync Discovery collects about storage virtual machines (SVMs) in your on-premises storage system.
        public var netAppONTAPSVMs: [DataSyncClientTypes.NetAppONTAPSVM]?
        /// The information that DataSync Discovery collects about volumes in your on-premises storage system.
        public var netAppONTAPVolumes: [DataSyncClientTypes.NetAppONTAPVolume]?

        public init(
            netAppONTAPClusters: [DataSyncClientTypes.NetAppONTAPCluster]? = nil,
            netAppONTAPSVMs: [DataSyncClientTypes.NetAppONTAPSVM]? = nil,
            netAppONTAPVolumes: [DataSyncClientTypes.NetAppONTAPVolume]? = nil
        )
        {
            self.netAppONTAPClusters = netAppONTAPClusters
            self.netAppONTAPSVMs = netAppONTAPSVMs
            self.netAppONTAPVolumes = netAppONTAPVolumes
        }
    }

}

extension DataSyncClientTypes.ResourceMetrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case capacity = "Capacity"
        case p95Metrics = "P95Metrics"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case timestamp = "Timestamp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let capacity = self.capacity {
            try encodeContainer.encode(capacity, forKey: .capacity)
        }
        if let p95Metrics = self.p95Metrics {
            try encodeContainer.encode(p95Metrics, forKey: .p95Metrics)
        }
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let timestamp = self.timestamp {
            try encodeContainer.encodeTimestamp(timestamp, format: .epochSeconds, forKey: .timestamp)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let timestampDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .timestamp)
        timestamp = timestampDecoded
        let p95MetricsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.P95Metrics.self, forKey: .p95Metrics)
        p95Metrics = p95MetricsDecoded
        let capacityDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Capacity.self, forKey: .capacity)
        capacity = capacityDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.DiscoveryResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension DataSyncClientTypes {
    /// Information, including performance data and capacity usage, provided by DataSync Discovery about a resource in your on-premises storage system.
    public struct ResourceMetrics: Swift.Equatable {
        /// The storage capacity of the on-premises storage system resource.
        public var capacity: DataSyncClientTypes.Capacity?
        /// The types of performance data that DataSync Discovery collects about the on-premises storage system resource.
        public var p95Metrics: DataSyncClientTypes.P95Metrics?
        /// The universally unique identifier (UUID) of the on-premises storage system resource.
        public var resourceId: Swift.String?
        /// The type of on-premises storage system resource.
        public var resourceType: DataSyncClientTypes.DiscoveryResourceType?
        /// The time when DataSync Discovery collected this information from the resource.
        public var timestamp: ClientRuntime.Date?

        public init(
            capacity: DataSyncClientTypes.Capacity? = nil,
            p95Metrics: DataSyncClientTypes.P95Metrics? = nil,
            resourceId: Swift.String? = nil,
            resourceType: DataSyncClientTypes.DiscoveryResourceType? = nil,
            timestamp: ClientRuntime.Date? = nil
        )
        {
            self.capacity = capacity
            self.p95Metrics = p95Metrics
            self.resourceId = resourceId
            self.resourceType = resourceType
            self.timestamp = timestamp
        }
    }

}

extension DataSyncClientTypes.S3Config: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucketAccessRoleArn = "BucketAccessRoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucketAccessRoleArn = self.bucketAccessRoleArn {
            try encodeContainer.encode(bucketAccessRoleArn, forKey: .bucketAccessRoleArn)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucketAccessRoleArn)
        bucketAccessRoleArn = bucketAccessRoleArnDecoded
    }
}

extension DataSyncClientTypes {
    /// The Amazon Resource Name (ARN) of the Identity and Access Management (IAM) role used to access an Amazon S3 bucket. For detailed information about using such a role, see Creating a Location for Amazon S3 in the DataSync User Guide.
    public struct S3Config: Swift.Equatable {
        /// The ARN of the IAM role for accessing the S3 bucket.
        /// This member is required.
        public var bucketAccessRoleArn: Swift.String?

        public init(
            bucketAccessRoleArn: Swift.String? = nil
        )
        {
            self.bucketAccessRoleArn = bucketAccessRoleArn
        }
    }

}

extension DataSyncClientTypes {
    public enum S3StorageClass: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deepArchive
        case glacier
        case glacierInstantRetrieval
        case intelligentTiering
        case onezoneIa
        case outposts
        case standard
        case standardIa
        case sdkUnknown(Swift.String)

        public static var allCases: [S3StorageClass] {
            return [
                .deepArchive,
                .glacier,
                .glacierInstantRetrieval,
                .intelligentTiering,
                .onezoneIa,
                .outposts,
                .standard,
                .standardIa,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deepArchive: return "DEEP_ARCHIVE"
            case .glacier: return "GLACIER"
            case .glacierInstantRetrieval: return "GLACIER_INSTANT_RETRIEVAL"
            case .intelligentTiering: return "INTELLIGENT_TIERING"
            case .onezoneIa: return "ONEZONE_IA"
            case .outposts: return "OUTPOSTS"
            case .standard: return "STANDARD"
            case .standardIa: return "STANDARD_IA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = S3StorageClass(rawValue: rawValue) ?? S3StorageClass.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.SmbMountOptions: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let version = self.version {
            try encodeContainer.encode(version.rawValue, forKey: .version)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.SmbVersion.self, forKey: .version)
        version = versionDecoded
    }
}

extension DataSyncClientTypes {
    /// Specifies the version of the Server Message Block (SMB) protocol that DataSync uses to access an SMB file server.
    public struct SmbMountOptions: Swift.Equatable {
        /// By default, DataSync automatically chooses an SMB protocol version based on negotiation with your SMB file server. You also can configure DataSync to use a specific SMB version, but we recommend doing this only if DataSync has trouble negotiating with the SMB file server automatically. These are the following options for configuring the SMB version:
        ///
        /// * AUTOMATIC (default): DataSync and the SMB file server negotiate the highest version of SMB that they mutually support between 2.1 and 3.1.1. This is the recommended option. If you instead choose a specific version that your file server doesn't support, you may get an Operation Not Supported error.
        ///
        /// * SMB3: Restricts the protocol negotiation to only SMB version 3.0.2.
        ///
        /// * SMB2: Restricts the protocol negotiation to only SMB version 2.1.
        ///
        /// * SMB2_0: Restricts the protocol negotiation to only SMB version 2.0.
        ///
        /// * SMB1: Restricts the protocol negotiation to only SMB version 1.0. The SMB1 option isn't available when [creating an Amazon FSx for NetApp ONTAP location](https://docs.aws.amazon.com/datasync/latest/userguide/API_CreateLocationFsxOntap.html).
        public var version: DataSyncClientTypes.SmbVersion?

        public init(
            version: DataSyncClientTypes.SmbVersion? = nil
        )
        {
            self.version = version
        }
    }

}

extension DataSyncClientTypes {
    public enum SmbSecurityDescriptorCopyFlags: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case ownerDacl
        case ownerDaclSacl
        case sdkUnknown(Swift.String)

        public static var allCases: [SmbSecurityDescriptorCopyFlags] {
            return [
                .none,
                .ownerDacl,
                .ownerDaclSacl,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .ownerDacl: return "OWNER_DACL"
            case .ownerDaclSacl: return "OWNER_DACL_SACL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SmbSecurityDescriptorCopyFlags(rawValue: rawValue) ?? SmbSecurityDescriptorCopyFlags.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum SmbVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case automatic
        case smb1
        case smb2
        case smb20
        case smb3
        case sdkUnknown(Swift.String)

        public static var allCases: [SmbVersion] {
            return [
                .automatic,
                .smb1,
                .smb2,
                .smb20,
                .smb3,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .automatic: return "AUTOMATIC"
            case .smb1: return "SMB1"
            case .smb2: return "SMB2"
            case .smb20: return "SMB2_0"
            case .smb3: return "SMB3"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SmbVersion(rawValue: rawValue) ?? SmbVersion.sdkUnknown(rawValue)
        }
    }
}

extension StartDiscoveryJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case collectionDurationMinutes = "CollectionDurationMinutes"
        case storageSystemArn = "StorageSystemArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let collectionDurationMinutes = self.collectionDurationMinutes {
            try encodeContainer.encode(collectionDurationMinutes, forKey: .collectionDurationMinutes)
        }
        if let storageSystemArn = self.storageSystemArn {
            try encodeContainer.encode(storageSystemArn, forKey: .storageSystemArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglistentry0 in tags {
                try tagsContainer.encode(taglistentry0)
            }
        }
    }
}

extension StartDiscoveryJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StartDiscoveryJobInput: Swift.Equatable {
    /// Specifies a client token to make sure requests with this API operation are idempotent. If you don't specify a client token, DataSync generates one for you automatically.
    /// This member is required.
    public var clientToken: Swift.String?
    /// Specifies in minutes how long you want the discovery job to run. For more accurate recommendations, we recommend a duration of at least 14 days. Longer durations allow time to collect a sufficient number of data points and provide a realistic representation of storage performance and utilization.
    /// This member is required.
    public var collectionDurationMinutes: Swift.Int?
    /// Specifies the Amazon Resource Name (ARN) of the on-premises storage system that you want to run the discovery job on.
    /// This member is required.
    public var storageSystemArn: Swift.String?
    /// Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init(
        clientToken: Swift.String? = nil,
        collectionDurationMinutes: Swift.Int? = nil,
        storageSystemArn: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.clientToken = clientToken
        self.collectionDurationMinutes = collectionDurationMinutes
        self.storageSystemArn = storageSystemArn
        self.tags = tags
    }
}

struct StartDiscoveryJobInputBody: Swift.Equatable {
    let storageSystemArn: Swift.String?
    let collectionDurationMinutes: Swift.Int?
    let clientToken: Swift.String?
    let tags: [DataSyncClientTypes.TagListEntry]?
}

extension StartDiscoveryJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case collectionDurationMinutes = "CollectionDurationMinutes"
        case storageSystemArn = "StorageSystemArn"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageSystemArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageSystemArn)
        storageSystemArn = storageSystemArnDecoded
        let collectionDurationMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .collectionDurationMinutes)
        collectionDurationMinutes = collectionDurationMinutesDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public enum StartDiscoveryJobOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension StartDiscoveryJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: StartDiscoveryJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.discoveryJobArn = output.discoveryJobArn
        } else {
            self.discoveryJobArn = nil
        }
    }
}

public struct StartDiscoveryJobOutputResponse: Swift.Equatable {
    /// The ARN of the discovery job that you started.
    public var discoveryJobArn: Swift.String?

    public init(
        discoveryJobArn: Swift.String? = nil
    )
    {
        self.discoveryJobArn = discoveryJobArn
    }
}

struct StartDiscoveryJobOutputResponseBody: Swift.Equatable {
    let discoveryJobArn: Swift.String?
}

extension StartDiscoveryJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case discoveryJobArn = "DiscoveryJobArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let discoveryJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .discoveryJobArn)
        discoveryJobArn = discoveryJobArnDecoded
    }
}

extension StartTaskExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludes = "Excludes"
        case includes = "Includes"
        case overrideOptions = "OverrideOptions"
        case tags = "Tags"
        case taskArn = "TaskArn"
        case taskReportConfig = "TaskReportConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let excludes = excludes {
            var excludesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludes)
            for filterrule0 in excludes {
                try excludesContainer.encode(filterrule0)
            }
        }
        if let includes = includes {
            var includesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includes)
            for filterrule0 in includes {
                try includesContainer.encode(filterrule0)
            }
        }
        if let overrideOptions = self.overrideOptions {
            try encodeContainer.encode(overrideOptions, forKey: .overrideOptions)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglistentry0 in tags {
                try tagsContainer.encode(taglistentry0)
            }
        }
        if let taskArn = self.taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
        if let taskReportConfig = self.taskReportConfig {
            try encodeContainer.encode(taskReportConfig, forKey: .taskReportConfig)
        }
    }
}

extension StartTaskExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// StartTaskExecutionRequest
public struct StartTaskExecutionInput: Swift.Equatable {
    /// Specifies a list of filter rules that determines which files to exclude from a task. The list contains a single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example, "/folder1|/folder2".
    public var excludes: [DataSyncClientTypes.FilterRule]?
    /// Specifies a list of filter rules that determines which files to include when running a task. The pattern should contain a single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example, "/folder1|/folder2".
    public var includes: [DataSyncClientTypes.FilterRule]?
    /// Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options. Each option has a default value. Unless you need to, you don't have to configure any of these options before starting your task.
    public var overrideOptions: DataSyncClientTypes.Options?
    /// Specifies the tags that you want to apply to the Amazon Resource Name (ARN) representing the task execution. Tags are key-value pairs that help you manage, filter, and search for your DataSync resources.
    public var tags: [DataSyncClientTypes.TagListEntry]?
    /// Specifies the Amazon Resource Name (ARN) of the task that you want to start.
    /// This member is required.
    public var taskArn: Swift.String?
    /// Specifies how you want to configure a task report, which provides detailed information about for your DataSync transfer.
    public var taskReportConfig: DataSyncClientTypes.TaskReportConfig?

    public init(
        excludes: [DataSyncClientTypes.FilterRule]? = nil,
        includes: [DataSyncClientTypes.FilterRule]? = nil,
        overrideOptions: DataSyncClientTypes.Options? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil,
        taskArn: Swift.String? = nil,
        taskReportConfig: DataSyncClientTypes.TaskReportConfig? = nil
    )
    {
        self.excludes = excludes
        self.includes = includes
        self.overrideOptions = overrideOptions
        self.tags = tags
        self.taskArn = taskArn
        self.taskReportConfig = taskReportConfig
    }
}

struct StartTaskExecutionInputBody: Swift.Equatable {
    let taskArn: Swift.String?
    let overrideOptions: DataSyncClientTypes.Options?
    let includes: [DataSyncClientTypes.FilterRule]?
    let excludes: [DataSyncClientTypes.FilterRule]?
    let tags: [DataSyncClientTypes.TagListEntry]?
    let taskReportConfig: DataSyncClientTypes.TaskReportConfig?
}

extension StartTaskExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case excludes = "Excludes"
        case includes = "Includes"
        case overrideOptions = "OverrideOptions"
        case tags = "Tags"
        case taskArn = "TaskArn"
        case taskReportConfig = "TaskReportConfig"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let overrideOptionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Options.self, forKey: .overrideOptions)
        overrideOptions = overrideOptionsDecoded
        let includesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .includes)
        var includesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let includesContainer = includesContainer {
            includesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in includesContainer {
                if let structure0 = structure0 {
                    includesDecoded0?.append(structure0)
                }
            }
        }
        includes = includesDecoded0
        let excludesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .excludes)
        var excludesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let excludesContainer = excludesContainer {
            excludesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in excludesContainer {
                if let structure0 = structure0 {
                    excludesDecoded0?.append(structure0)
                }
            }
        }
        excludes = excludesDecoded0
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let taskReportConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskReportConfig.self, forKey: .taskReportConfig)
        taskReportConfig = taskReportConfigDecoded
    }
}

public enum StartTaskExecutionOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension StartTaskExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: StartTaskExecutionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.taskExecutionArn = output.taskExecutionArn
        } else {
            self.taskExecutionArn = nil
        }
    }
}

/// StartTaskExecutionResponse
public struct StartTaskExecutionOutputResponse: Swift.Equatable {
    /// The ARN of the running task execution.
    public var taskExecutionArn: Swift.String?

    public init(
        taskExecutionArn: Swift.String? = nil
    )
    {
        self.taskExecutionArn = taskExecutionArn
    }
}

struct StartTaskExecutionOutputResponseBody: Swift.Equatable {
    let taskExecutionArn: Swift.String?
}

extension StartTaskExecutionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case taskExecutionArn = "TaskExecutionArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskExecutionArn)
        taskExecutionArn = taskExecutionArnDecoded
    }
}

extension StopDiscoveryJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case discoveryJobArn = "DiscoveryJobArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let discoveryJobArn = self.discoveryJobArn {
            try encodeContainer.encode(discoveryJobArn, forKey: .discoveryJobArn)
        }
    }
}

extension StopDiscoveryJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct StopDiscoveryJobInput: Swift.Equatable {
    /// Specifies the Amazon Resource Name (ARN) of the discovery job that you want to stop.
    /// This member is required.
    public var discoveryJobArn: Swift.String?

    public init(
        discoveryJobArn: Swift.String? = nil
    )
    {
        self.discoveryJobArn = discoveryJobArn
    }
}

struct StopDiscoveryJobInputBody: Swift.Equatable {
    let discoveryJobArn: Swift.String?
}

extension StopDiscoveryJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case discoveryJobArn = "DiscoveryJobArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let discoveryJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .discoveryJobArn)
        discoveryJobArn = discoveryJobArnDecoded
    }
}

public enum StopDiscoveryJobOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension StopDiscoveryJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct StopDiscoveryJobOutputResponse: Swift.Equatable {

    public init() { }
}

extension DataSyncClientTypes {
    public enum StorageSystemConnectivityStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fail
        case pass
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageSystemConnectivityStatus] {
            return [
                .fail,
                .pass,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fail: return "FAIL"
            case .pass: return "PASS"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StorageSystemConnectivityStatus(rawValue: rawValue) ?? StorageSystemConnectivityStatus.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.StorageSystemListEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case storageSystemArn = "StorageSystemArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let storageSystemArn = self.storageSystemArn {
            try encodeContainer.encode(storageSystemArn, forKey: .storageSystemArn)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageSystemArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageSystemArn)
        storageSystemArn = storageSystemArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DataSyncClientTypes {
    /// Information that identifies an on-premises storage system that you're using with DataSync Discovery.
    public struct StorageSystemListEntry: Swift.Equatable {
        /// The name of an on-premises storage system that you added to DataSync Discovery.
        public var name: Swift.String?
        /// The Amazon Resource Names (ARN) of an on-premises storage system that you added to DataSync Discovery.
        public var storageSystemArn: Swift.String?

        public init(
            name: Swift.String? = nil,
            storageSystemArn: Swift.String? = nil
        )
        {
            self.name = name
            self.storageSystemArn = storageSystemArn
        }
    }

}

extension DataSyncClientTypes.TagListEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension DataSyncClientTypes {
    /// A key-value pair representing a single tag that's been applied to an Amazon Web Services resource.
    public struct TagListEntry: Swift.Equatable {
        /// The key for an Amazon Web Services resource tag.
        /// This member is required.
        public var key: Swift.String?
        /// The value for an Amazon Web Services resource tag.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglistentry0 in tags {
                try tagsContainer.encode(taglistentry0)
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// TagResourceRequest
public struct TagResourceInput: Swift.Equatable {
    /// Specifies the Amazon Resource Name (ARN) of the resource to apply the tag to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Specifies the tags that you want to apply to the resource.
    /// This member is required.
    public var tags: [DataSyncClientTypes.TagListEntry]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [DataSyncClientTypes.TagListEntry]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let tags: [DataSyncClientTypes.TagListEntry]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.TagListEntry?].self, forKey: .tags)
        var tagsDecoded0:[DataSyncClientTypes.TagListEntry]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [DataSyncClientTypes.TagListEntry]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

public enum TagResourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init() { }
}

extension DataSyncClientTypes.TaskExecutionListEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
        case taskExecutionArn = "TaskExecutionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let taskExecutionArn = self.taskExecutionArn {
            try encodeContainer.encode(taskExecutionArn, forKey: .taskExecutionArn)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskExecutionArn)
        taskExecutionArn = taskExecutionArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskExecutionStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension DataSyncClientTypes {
    /// Represents a single entry in a list of task executions. TaskExecutionListEntry returns an array that contains a list of specific invocations of a task when the [ListTaskExecutions](https://docs.aws.amazon.com/datasync/latest/userguide/API_ListTaskExecutions.html) operation is called.
    public struct TaskExecutionListEntry: Swift.Equatable {
        /// The status of a task execution.
        public var status: DataSyncClientTypes.TaskExecutionStatus?
        /// The Amazon Resource Name (ARN) of the task that was executed.
        public var taskExecutionArn: Swift.String?

        public init(
            status: DataSyncClientTypes.TaskExecutionStatus? = nil,
            taskExecutionArn: Swift.String? = nil
        )
        {
            self.status = status
            self.taskExecutionArn = taskExecutionArn
        }
    }

}

extension DataSyncClientTypes.TaskExecutionResultDetail: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorDetail = "ErrorDetail"
        case prepareDuration = "PrepareDuration"
        case prepareStatus = "PrepareStatus"
        case totalDuration = "TotalDuration"
        case transferDuration = "TransferDuration"
        case transferStatus = "TransferStatus"
        case verifyDuration = "VerifyDuration"
        case verifyStatus = "VerifyStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = self.errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorDetail = self.errorDetail {
            try encodeContainer.encode(errorDetail, forKey: .errorDetail)
        }
        if let prepareDuration = self.prepareDuration {
            try encodeContainer.encode(prepareDuration, forKey: .prepareDuration)
        }
        if let prepareStatus = self.prepareStatus {
            try encodeContainer.encode(prepareStatus.rawValue, forKey: .prepareStatus)
        }
        if let totalDuration = self.totalDuration {
            try encodeContainer.encode(totalDuration, forKey: .totalDuration)
        }
        if let transferDuration = self.transferDuration {
            try encodeContainer.encode(transferDuration, forKey: .transferDuration)
        }
        if let transferStatus = self.transferStatus {
            try encodeContainer.encode(transferStatus.rawValue, forKey: .transferStatus)
        }
        if let verifyDuration = self.verifyDuration {
            try encodeContainer.encode(verifyDuration, forKey: .verifyDuration)
        }
        if let verifyStatus = self.verifyStatus {
            try encodeContainer.encode(verifyStatus.rawValue, forKey: .verifyStatus)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prepareDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .prepareDuration)
        prepareDuration = prepareDurationDecoded
        let prepareStatusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.PhaseStatus.self, forKey: .prepareStatus)
        prepareStatus = prepareStatusDecoded
        let totalDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalDuration)
        totalDuration = totalDurationDecoded
        let transferDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .transferDuration)
        transferDuration = transferDurationDecoded
        let transferStatusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.PhaseStatus.self, forKey: .transferStatus)
        transferStatus = transferStatusDecoded
        let verifyDurationDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .verifyDuration)
        verifyDuration = verifyDurationDecoded
        let verifyStatusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.PhaseStatus.self, forKey: .verifyStatus)
        verifyStatus = verifyStatusDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorDetailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorDetail)
        errorDetail = errorDetailDecoded
    }
}

extension DataSyncClientTypes {
    /// Describes the detailed result of a TaskExecution operation. This result includes the time in milliseconds spent in each phase, the status of the task execution, and the errors encountered.
    public struct TaskExecutionResultDetail: Swift.Equatable {
        /// Errors that DataSync encountered during execution of the task. You can use this error code to help troubleshoot issues.
        public var errorCode: Swift.String?
        /// Detailed description of an error that was encountered during the task execution. You can use this information to help troubleshoot issues.
        public var errorDetail: Swift.String?
        /// The total time in milliseconds that DataSync spent in the PREPARING phase.
        public var prepareDuration: Swift.Int?
        /// The status of the PREPARING phase.
        public var prepareStatus: DataSyncClientTypes.PhaseStatus?
        /// The total time in milliseconds that DataSync took to transfer the file from the source to the destination location.
        public var totalDuration: Swift.Int?
        /// The total time in milliseconds that DataSync spent in the TRANSFERRING phase.
        public var transferDuration: Swift.Int?
        /// The status of the TRANSFERRING phase.
        public var transferStatus: DataSyncClientTypes.PhaseStatus?
        /// The total time in milliseconds that DataSync spent in the VERIFYING phase.
        public var verifyDuration: Swift.Int?
        /// The status of the VERIFYING phase.
        public var verifyStatus: DataSyncClientTypes.PhaseStatus?

        public init(
            errorCode: Swift.String? = nil,
            errorDetail: Swift.String? = nil,
            prepareDuration: Swift.Int? = nil,
            prepareStatus: DataSyncClientTypes.PhaseStatus? = nil,
            totalDuration: Swift.Int? = nil,
            transferDuration: Swift.Int? = nil,
            transferStatus: DataSyncClientTypes.PhaseStatus? = nil,
            verifyDuration: Swift.Int? = nil,
            verifyStatus: DataSyncClientTypes.PhaseStatus? = nil
        )
        {
            self.errorCode = errorCode
            self.errorDetail = errorDetail
            self.prepareDuration = prepareDuration
            self.prepareStatus = prepareStatus
            self.totalDuration = totalDuration
            self.transferDuration = transferDuration
            self.transferStatus = transferStatus
            self.verifyDuration = verifyDuration
            self.verifyStatus = verifyStatus
        }
    }

}

extension DataSyncClientTypes {
    public enum TaskExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case error
        case launching
        case preparing
        case queued
        case success
        case transferring
        case verifying
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskExecutionStatus] {
            return [
                .error,
                .launching,
                .preparing,
                .queued,
                .success,
                .transferring,
                .verifying,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .error: return "ERROR"
            case .launching: return "LAUNCHING"
            case .preparing: return "PREPARING"
            case .queued: return "QUEUED"
            case .success: return "SUCCESS"
            case .transferring: return "TRANSFERRING"
            case .verifying: return "VERIFYING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TaskExecutionStatus(rawValue: rawValue) ?? TaskExecutionStatus.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.TaskFilter: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case `operator` = "Operator"
        case values = "Values"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let `operator` = self.`operator` {
            try encodeContainer.encode(`operator`.rawValue, forKey: .`operator`)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for filterattributevalue0 in values {
                try valuesContainer.encode(filterattributevalue0)
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
        let operatorDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Operator.self, forKey: .operator)
        `operator` = operatorDecoded
    }
}

extension DataSyncClientTypes {
    /// You can use API filters to narrow down the list of resources returned by ListTasks. For example, to retrieve all tasks on a source location, you can use ListTasks with filter name LocationId and Operator Equals with the ARN for the location. For more information, see [filtering DataSync resources](https://docs.aws.amazon.com/datasync/latest/userguide/query-resources.html).
    public struct TaskFilter: Swift.Equatable {
        /// The name of the filter being used. Each API call supports a list of filters that are available for it. For example, LocationId for ListTasks.
        /// This member is required.
        public var name: DataSyncClientTypes.TaskFilterName?
        /// The operator that is used to compare filter values (for example, Equals or Contains).
        /// This member is required.
        public var `operator`: DataSyncClientTypes.Operator?
        /// The values that you want to filter for. For example, you might want to display only tasks for a specific destination location.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: DataSyncClientTypes.TaskFilterName? = nil,
            `operator`: DataSyncClientTypes.Operator? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.values = values
        }
    }

}

extension DataSyncClientTypes {
    public enum TaskFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case creationtime
        case locationid
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskFilterName] {
            return [
                .creationtime,
                .locationid,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .locationid: return "LocationId"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TaskFilterName(rawValue: rawValue) ?? TaskFilterName.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.TaskListEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case status = "Status"
        case taskArn = "TaskArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let taskArn = self.taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskStatus.self, forKey: .status)
        status = statusDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension DataSyncClientTypes {
    /// Represents a single entry in a list of tasks. TaskListEntry returns an array that contains a list of tasks when the [ListTasks](https://docs.aws.amazon.com/datasync/latest/userguide/API_ListTasks.html) operation is called. A task includes the source and destination file systems to sync and the options to use for the tasks.
    public struct TaskListEntry: Swift.Equatable {
        /// The name of the task.
        public var name: Swift.String?
        /// The status of the task.
        public var status: DataSyncClientTypes.TaskStatus?
        /// The Amazon Resource Name (ARN) of the task.
        public var taskArn: Swift.String?

        public init(
            name: Swift.String? = nil,
            status: DataSyncClientTypes.TaskStatus? = nil,
            taskArn: Swift.String? = nil
        )
        {
            self.name = name
            self.status = status
            self.taskArn = taskArn
        }
    }

}

extension DataSyncClientTypes {
    public enum TaskQueueing: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskQueueing] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TaskQueueing(rawValue: rawValue) ?? TaskQueueing.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.TaskReportConfig: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case objectVersionIds = "ObjectVersionIds"
        case outputType = "OutputType"
        case overrides = "Overrides"
        case reportLevel = "ReportLevel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = self.destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let objectVersionIds = self.objectVersionIds {
            try encodeContainer.encode(objectVersionIds.rawValue, forKey: .objectVersionIds)
        }
        if let outputType = self.outputType {
            try encodeContainer.encode(outputType.rawValue, forKey: .outputType)
        }
        if let overrides = self.overrides {
            try encodeContainer.encode(overrides, forKey: .overrides)
        }
        if let reportLevel = self.reportLevel {
            try encodeContainer.encode(reportLevel.rawValue, forKey: .reportLevel)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ReportDestination.self, forKey: .destination)
        destination = destinationDecoded
        let outputTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ReportOutputType.self, forKey: .outputType)
        outputType = outputTypeDecoded
        let reportLevelDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ReportLevel.self, forKey: .reportLevel)
        reportLevel = reportLevelDecoded
        let objectVersionIdsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ObjectVersionIds.self, forKey: .objectVersionIds)
        objectVersionIds = objectVersionIdsDecoded
        let overridesDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ReportOverrides.self, forKey: .overrides)
        overrides = overridesDecoded
    }
}

extension DataSyncClientTypes {
    /// Specifies how you want to configure a task report, which provides detailed information about for your DataSync transfer. For more information, see [Task reports](https://docs.aws.amazon.com/datasync/latest/userguide/creating-task-reports.html).
    public struct TaskReportConfig: Swift.Equatable {
        /// Specifies the Amazon S3 bucket where DataSync uploads your task report. For more information, see [Task reports](https://docs.aws.amazon.com/datasync/latest/userguide/creating-task-reports.html#task-report-access).
        public var destination: DataSyncClientTypes.ReportDestination?
        /// Specifies whether your task report includes the new version of each object transferred into an S3 bucket. This only applies if you [enable versioning on your bucket](https://docs.aws.amazon.com/AmazonS3/latest/userguide/manage-versioning-examples.html). Keep in mind that setting this to INCLUDE can increase the duration of your task execution.
        public var objectVersionIds: DataSyncClientTypes.ObjectVersionIds?
        /// Specifies the type of task report that you want:
        ///
        /// * SUMMARY_ONLY: Provides necessary details about your task, including the number of files, objects, and directories transferred and transfer duration.
        ///
        /// * STANDARD: Provides complete details about your task, including a full list of files, objects, and directories that were transferred, skipped, verified, and more.
        public var outputType: DataSyncClientTypes.ReportOutputType?
        /// Customizes the reporting level for aspects of your task report. For example, your report might generally only include errors, but you could specify that you want a list of successes and errors just for the files that DataSync attempted to delete in your destination location.
        public var overrides: DataSyncClientTypes.ReportOverrides?
        /// Specifies whether you want your task report to include only what went wrong with your transfer or a list of what succeeded and didn't.
        ///
        /// * ERRORS_ONLY: A report shows what DataSync was unable to transfer, skip, verify, and delete.
        ///
        /// * SUCCESSES_AND_ERRORS: A report shows what DataSync was able and unable to transfer, skip, verify, and delete.
        public var reportLevel: DataSyncClientTypes.ReportLevel?

        public init(
            destination: DataSyncClientTypes.ReportDestination? = nil,
            objectVersionIds: DataSyncClientTypes.ObjectVersionIds? = nil,
            outputType: DataSyncClientTypes.ReportOutputType? = nil,
            overrides: DataSyncClientTypes.ReportOverrides? = nil,
            reportLevel: DataSyncClientTypes.ReportLevel? = nil
        )
        {
            self.destination = destination
            self.objectVersionIds = objectVersionIds
            self.outputType = outputType
            self.overrides = overrides
            self.reportLevel = reportLevel
        }
    }

}

extension DataSyncClientTypes.TaskSchedule: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case scheduleExpression = "ScheduleExpression"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let scheduleExpression = self.scheduleExpression {
            try encodeContainer.encode(scheduleExpression, forKey: .scheduleExpression)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let scheduleExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheduleExpression)
        scheduleExpression = scheduleExpressionDecoded
    }
}

extension DataSyncClientTypes {
    /// Specifies the schedule you want your task to use for repeated executions. For more information, see [Schedule Expressions for Rules](https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html).
    public struct TaskSchedule: Swift.Equatable {
        /// A cron expression that specifies when DataSync initiates a scheduled transfer from a source to a destination location.
        /// This member is required.
        public var scheduleExpression: Swift.String?

        public init(
            scheduleExpression: Swift.String? = nil
        )
        {
            self.scheduleExpression = scheduleExpression
        }
    }

}

extension DataSyncClientTypes {
    public enum TaskStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case available
        case creating
        case queued
        case running
        case unavailable
        case sdkUnknown(Swift.String)

        public static var allCases: [TaskStatus] {
            return [
                .available,
                .creating,
                .queued,
                .running,
                .unavailable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .available: return "AVAILABLE"
            case .creating: return "CREATING"
            case .queued: return "QUEUED"
            case .running: return "RUNNING"
            case .unavailable: return "UNAVAILABLE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TaskStatus(rawValue: rawValue) ?? TaskStatus.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes.Throughput: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case other = "Other"
        case read = "Read"
        case total = "Total"
        case write = "Write"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let other = self.other {
            try encodeContainer.encode(other, forKey: .other)
        }
        if let read = self.read {
            try encodeContainer.encode(read, forKey: .read)
        }
        if let total = self.total {
            try encodeContainer.encode(total, forKey: .total)
        }
        if let write = self.write {
            try encodeContainer.encode(write, forKey: .write)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let readDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .read)
        read = readDecoded
        let writeDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .write)
        write = writeDecoded
        let otherDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .other)
        other = otherDecoded
        let totalDecoded = try containerValues.decodeIfPresent(Swift.Double.self, forKey: .total)
        total = totalDecoded
    }
}

extension DataSyncClientTypes {
    /// The throughput peaks for an on-premises storage system volume. Each data point represents the 95th percentile peak value during a 1-hour interval.
    public struct Throughput: Swift.Equatable {
        /// Peak throughput unrelated to read and write operations.
        public var other: Swift.Double?
        /// Peak throughput related to read operations.
        public var read: Swift.Double?
        /// Peak total throughput on your on-premises storage system resource.
        public var total: Swift.Double?
        /// Peak throughput related to write operations.
        public var write: Swift.Double?

        public init(
            other: Swift.Double? = nil,
            read: Swift.Double? = nil,
            total: Swift.Double? = nil,
            write: Swift.Double? = nil
        )
        {
            self.other = other
            self.read = read
            self.total = total
            self.write = write
        }
    }

}

extension DataSyncClientTypes {
    public enum TransferMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case changed
        case sdkUnknown(Swift.String)

        public static var allCases: [TransferMode] {
            return [
                .all,
                .changed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .changed: return "CHANGED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TransferMode(rawValue: rawValue) ?? TransferMode.sdkUnknown(rawValue)
        }
    }
}

extension DataSyncClientTypes {
    public enum Uid: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case both
        case intValue
        case name
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [Uid] {
            return [
                .both,
                .intValue,
                .name,
                .none,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .both: return "BOTH"
            case .intValue: return "INT_VALUE"
            case .name: return "NAME"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Uid(rawValue: rawValue) ?? Uid.sdkUnknown(rawValue)
        }
    }
}

extension UntagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keys = "Keys"
        case resourceArn = "ResourceArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let keys = keys {
            var keysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keys)
            for tagkey0 in keys {
                try keysContainer.encode(tagkey0)
            }
        }
        if let resourceArn = self.resourceArn {
            try encodeContainer.encode(resourceArn, forKey: .resourceArn)
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// UntagResourceRequest
public struct UntagResourceInput: Swift.Equatable {
    /// Specifies the keys in the tags that you want to remove.
    /// This member is required.
    public var keys: [Swift.String]?
    /// Specifies the Amazon Resource Name (ARN) of the resource to remove the tags from.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        keys: [Swift.String]? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.keys = keys
        self.resourceArn = resourceArn
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    let resourceArn: Swift.String?
    let keys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case keys = "Keys"
        case resourceArn = "ResourceArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let keysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .keys)
        var keysDecoded0:[Swift.String]? = nil
        if let keysContainer = keysContainer {
            keysDecoded0 = [Swift.String]()
            for string0 in keysContainer {
                if let string0 = string0 {
                    keysDecoded0?.append(string0)
                }
            }
        }
        keys = keysDecoded0
    }
}

public enum UntagResourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init() { }
}

extension UpdateAgentInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArn = "AgentArn"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArn = self.agentArn {
            try encodeContainer.encode(agentArn, forKey: .agentArn)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

extension UpdateAgentInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// UpdateAgentRequest
public struct UpdateAgentInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the agent to update.
    /// This member is required.
    public var agentArn: Swift.String?
    /// The name that you want to use to configure the agent.
    public var name: Swift.String?

    public init(
        agentArn: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.agentArn = agentArn
        self.name = name
    }
}

struct UpdateAgentInputBody: Swift.Equatable {
    let agentArn: Swift.String?
    let name: Swift.String?
}

extension UpdateAgentInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArn = "AgentArn"
        case name = "Name"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let agentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .agentArn)
        agentArn = agentArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

public enum UpdateAgentOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateAgentOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UpdateAgentOutputResponse: Swift.Equatable {

    public init() { }
}

extension UpdateDiscoveryJobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionDurationMinutes = "CollectionDurationMinutes"
        case discoveryJobArn = "DiscoveryJobArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let collectionDurationMinutes = self.collectionDurationMinutes {
            try encodeContainer.encode(collectionDurationMinutes, forKey: .collectionDurationMinutes)
        }
        if let discoveryJobArn = self.discoveryJobArn {
            try encodeContainer.encode(discoveryJobArn, forKey: .discoveryJobArn)
        }
    }
}

extension UpdateDiscoveryJobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateDiscoveryJobInput: Swift.Equatable {
    /// Specifies in minutes how long that you want the discovery job to run. (You can't set this parameter to less than the number of minutes that the job has already run for.)
    /// This member is required.
    public var collectionDurationMinutes: Swift.Int?
    /// Specifies the Amazon Resource Name (ARN) of the discovery job that you want to update.
    /// This member is required.
    public var discoveryJobArn: Swift.String?

    public init(
        collectionDurationMinutes: Swift.Int? = nil,
        discoveryJobArn: Swift.String? = nil
    )
    {
        self.collectionDurationMinutes = collectionDurationMinutes
        self.discoveryJobArn = discoveryJobArn
    }
}

struct UpdateDiscoveryJobInputBody: Swift.Equatable {
    let discoveryJobArn: Swift.String?
    let collectionDurationMinutes: Swift.Int?
}

extension UpdateDiscoveryJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case collectionDurationMinutes = "CollectionDurationMinutes"
        case discoveryJobArn = "DiscoveryJobArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let discoveryJobArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .discoveryJobArn)
        discoveryJobArn = discoveryJobArnDecoded
        let collectionDurationMinutesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .collectionDurationMinutes)
        collectionDurationMinutes = collectionDurationMinutesDecoded
    }
}

public enum UpdateDiscoveryJobOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateDiscoveryJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UpdateDiscoveryJobOutputResponse: Swift.Equatable {

    public init() { }
}

extension UpdateLocationAzureBlobInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessTier = "AccessTier"
        case agentArns = "AgentArns"
        case authenticationType = "AuthenticationType"
        case blobType = "BlobType"
        case locationArn = "LocationArn"
        case sasConfiguration = "SasConfiguration"
        case subdirectory = "Subdirectory"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessTier = self.accessTier {
            try encodeContainer.encode(accessTier.rawValue, forKey: .accessTier)
        }
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarn0 in agentArns {
                try agentArnsContainer.encode(agentarn0)
            }
        }
        if let authenticationType = self.authenticationType {
            try encodeContainer.encode(authenticationType.rawValue, forKey: .authenticationType)
        }
        if let blobType = self.blobType {
            try encodeContainer.encode(blobType.rawValue, forKey: .blobType)
        }
        if let locationArn = self.locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
        if let sasConfiguration = self.sasConfiguration {
            try encodeContainer.encode(sasConfiguration, forKey: .sasConfiguration)
        }
        if let subdirectory = self.subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
    }
}

extension UpdateLocationAzureBlobInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateLocationAzureBlobInput: Swift.Equatable {
    /// Specifies the access tier that you want your objects or files transferred into. This only applies when using the location as a transfer destination. For more information, see [Access tiers](https://docs.aws.amazon.com/datasync/latest/userguide/creating-azure-blob-location.html#azure-blob-access-tiers).
    public var accessTier: DataSyncClientTypes.AzureAccessTier?
    /// Specifies the Amazon Resource Name (ARN) of the DataSync agent that can connect with your Azure Blob Storage container. You can specify more than one agent. For more information, see [Using multiple agents for your transfer](https://docs.aws.amazon.com/datasync/latest/userguide/multiple-agents.html).
    public var agentArns: [Swift.String]?
    /// Specifies the authentication method DataSync uses to access your Azure Blob Storage. DataSync can access blob storage using a shared access signature (SAS).
    public var authenticationType: DataSyncClientTypes.AzureBlobAuthenticationType?
    /// Specifies the type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Currently, DataSync only supports moving data into Azure Blob Storage as block blobs. For more information on blob types, see the [Azure Blob Storage documentation](https://learn.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs).
    public var blobType: DataSyncClientTypes.AzureBlobType?
    /// Specifies the ARN of the Azure Blob Storage transfer location that you're updating.
    /// This member is required.
    public var locationArn: Swift.String?
    /// Specifies the SAS configuration that allows DataSync to access your Azure Blob Storage.
    public var sasConfiguration: DataSyncClientTypes.AzureBlobSasConfiguration?
    /// Specifies path segments if you want to limit your transfer to a virtual directory in your container (for example, /my/images).
    public var subdirectory: Swift.String?

    public init(
        accessTier: DataSyncClientTypes.AzureAccessTier? = nil,
        agentArns: [Swift.String]? = nil,
        authenticationType: DataSyncClientTypes.AzureBlobAuthenticationType? = nil,
        blobType: DataSyncClientTypes.AzureBlobType? = nil,
        locationArn: Swift.String? = nil,
        sasConfiguration: DataSyncClientTypes.AzureBlobSasConfiguration? = nil,
        subdirectory: Swift.String? = nil
    )
    {
        self.accessTier = accessTier
        self.agentArns = agentArns
        self.authenticationType = authenticationType
        self.blobType = blobType
        self.locationArn = locationArn
        self.sasConfiguration = sasConfiguration
        self.subdirectory = subdirectory
    }
}

struct UpdateLocationAzureBlobInputBody: Swift.Equatable {
    let locationArn: Swift.String?
    let subdirectory: Swift.String?
    let authenticationType: DataSyncClientTypes.AzureBlobAuthenticationType?
    let sasConfiguration: DataSyncClientTypes.AzureBlobSasConfiguration?
    let blobType: DataSyncClientTypes.AzureBlobType?
    let accessTier: DataSyncClientTypes.AzureAccessTier?
    let agentArns: [Swift.String]?
}

extension UpdateLocationAzureBlobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessTier = "AccessTier"
        case agentArns = "AgentArns"
        case authenticationType = "AuthenticationType"
        case blobType = "BlobType"
        case locationArn = "LocationArn"
        case sasConfiguration = "SasConfiguration"
        case subdirectory = "Subdirectory"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let authenticationTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.AzureBlobAuthenticationType.self, forKey: .authenticationType)
        authenticationType = authenticationTypeDecoded
        let sasConfigurationDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.AzureBlobSasConfiguration.self, forKey: .sasConfiguration)
        sasConfiguration = sasConfigurationDecoded
        let blobTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.AzureBlobType.self, forKey: .blobType)
        blobType = blobTypeDecoded
        let accessTierDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.AzureAccessTier.self, forKey: .accessTier)
        accessTier = accessTierDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
    }
}

public enum UpdateLocationAzureBlobOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateLocationAzureBlobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UpdateLocationAzureBlobOutputResponse: Swift.Equatable {

    public init() { }
}

extension UpdateLocationHdfsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case authenticationType = "AuthenticationType"
        case blockSize = "BlockSize"
        case kerberosKeytab = "KerberosKeytab"
        case kerberosKrb5Conf = "KerberosKrb5Conf"
        case kerberosPrincipal = "KerberosPrincipal"
        case kmsKeyProviderUri = "KmsKeyProviderUri"
        case locationArn = "LocationArn"
        case nameNodes = "NameNodes"
        case qopConfiguration = "QopConfiguration"
        case replicationFactor = "ReplicationFactor"
        case simpleUser = "SimpleUser"
        case subdirectory = "Subdirectory"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarn0 in agentArns {
                try agentArnsContainer.encode(agentarn0)
            }
        }
        if let authenticationType = self.authenticationType {
            try encodeContainer.encode(authenticationType.rawValue, forKey: .authenticationType)
        }
        if let blockSize = self.blockSize {
            try encodeContainer.encode(blockSize, forKey: .blockSize)
        }
        if let kerberosKeytab = self.kerberosKeytab {
            try encodeContainer.encode(kerberosKeytab.base64EncodedString(), forKey: .kerberosKeytab)
        }
        if let kerberosKrb5Conf = self.kerberosKrb5Conf {
            try encodeContainer.encode(kerberosKrb5Conf.base64EncodedString(), forKey: .kerberosKrb5Conf)
        }
        if let kerberosPrincipal = self.kerberosPrincipal {
            try encodeContainer.encode(kerberosPrincipal, forKey: .kerberosPrincipal)
        }
        if let kmsKeyProviderUri = self.kmsKeyProviderUri {
            try encodeContainer.encode(kmsKeyProviderUri, forKey: .kmsKeyProviderUri)
        }
        if let locationArn = self.locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
        if let nameNodes = nameNodes {
            var nameNodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nameNodes)
            for hdfsnamenode0 in nameNodes {
                try nameNodesContainer.encode(hdfsnamenode0)
            }
        }
        if let qopConfiguration = self.qopConfiguration {
            try encodeContainer.encode(qopConfiguration, forKey: .qopConfiguration)
        }
        if let replicationFactor = self.replicationFactor {
            try encodeContainer.encode(replicationFactor, forKey: .replicationFactor)
        }
        if let simpleUser = self.simpleUser {
            try encodeContainer.encode(simpleUser, forKey: .simpleUser)
        }
        if let subdirectory = self.subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
    }
}

extension UpdateLocationHdfsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateLocationHdfsInput: Swift.Equatable {
    /// The ARNs of the agents that are used to connect to the HDFS cluster.
    public var agentArns: [Swift.String]?
    /// The type of authentication used to determine the identity of the user.
    public var authenticationType: DataSyncClientTypes.HdfsAuthenticationType?
    /// The size of the data blocks to write into the HDFS cluster.
    public var blockSize: Swift.Int?
    /// The Kerberos key table (keytab) that contains mappings between the defined Kerberos principal and the encrypted keys. You can load the keytab from a file by providing the file's address. If you use the CLI, it performs base64 encoding for you. Otherwise, provide the base64-encoded text.
    public var kerberosKeytab: ClientRuntime.Data?
    /// The krb5.conf file that contains the Kerberos configuration information. You can load the krb5.conf file by providing the file's address. If you're using the CLI, it performs the base64 encoding for you. Otherwise, provide the base64-encoded text.
    public var kerberosKrb5Conf: ClientRuntime.Data?
    /// The Kerberos principal with access to the files and folders on the HDFS cluster.
    public var kerberosPrincipal: Swift.String?
    /// The URI of the HDFS cluster's Key Management Server (KMS).
    public var kmsKeyProviderUri: Swift.String?
    /// The Amazon Resource Name (ARN) of the source HDFS cluster location.
    /// This member is required.
    public var locationArn: Swift.String?
    /// The NameNode that manages the HDFS namespace. The NameNode performs operations such as opening, closing, and renaming files and directories. The NameNode contains the information to map blocks of data to the DataNodes. You can use only one NameNode.
    public var nameNodes: [DataSyncClientTypes.HdfsNameNode]?
    /// The Quality of Protection (QOP) configuration specifies the Remote Procedure Call (RPC) and data transfer privacy settings configured on the Hadoop Distributed File System (HDFS) cluster.
    public var qopConfiguration: DataSyncClientTypes.QopConfiguration?
    /// The number of DataNodes to replicate the data to when writing to the HDFS cluster.
    public var replicationFactor: Swift.Int?
    /// The user name used to identify the client on the host operating system.
    public var simpleUser: Swift.String?
    /// A subdirectory in the HDFS cluster. This subdirectory is used to read data from or write data to the HDFS cluster.
    public var subdirectory: Swift.String?

    public init(
        agentArns: [Swift.String]? = nil,
        authenticationType: DataSyncClientTypes.HdfsAuthenticationType? = nil,
        blockSize: Swift.Int? = nil,
        kerberosKeytab: ClientRuntime.Data? = nil,
        kerberosKrb5Conf: ClientRuntime.Data? = nil,
        kerberosPrincipal: Swift.String? = nil,
        kmsKeyProviderUri: Swift.String? = nil,
        locationArn: Swift.String? = nil,
        nameNodes: [DataSyncClientTypes.HdfsNameNode]? = nil,
        qopConfiguration: DataSyncClientTypes.QopConfiguration? = nil,
        replicationFactor: Swift.Int? = nil,
        simpleUser: Swift.String? = nil,
        subdirectory: Swift.String? = nil
    )
    {
        self.agentArns = agentArns
        self.authenticationType = authenticationType
        self.blockSize = blockSize
        self.kerberosKeytab = kerberosKeytab
        self.kerberosKrb5Conf = kerberosKrb5Conf
        self.kerberosPrincipal = kerberosPrincipal
        self.kmsKeyProviderUri = kmsKeyProviderUri
        self.locationArn = locationArn
        self.nameNodes = nameNodes
        self.qopConfiguration = qopConfiguration
        self.replicationFactor = replicationFactor
        self.simpleUser = simpleUser
        self.subdirectory = subdirectory
    }
}

struct UpdateLocationHdfsInputBody: Swift.Equatable {
    let locationArn: Swift.String?
    let subdirectory: Swift.String?
    let nameNodes: [DataSyncClientTypes.HdfsNameNode]?
    let blockSize: Swift.Int?
    let replicationFactor: Swift.Int?
    let kmsKeyProviderUri: Swift.String?
    let qopConfiguration: DataSyncClientTypes.QopConfiguration?
    let authenticationType: DataSyncClientTypes.HdfsAuthenticationType?
    let simpleUser: Swift.String?
    let kerberosPrincipal: Swift.String?
    let kerberosKeytab: ClientRuntime.Data?
    let kerberosKrb5Conf: ClientRuntime.Data?
    let agentArns: [Swift.String]?
}

extension UpdateLocationHdfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case authenticationType = "AuthenticationType"
        case blockSize = "BlockSize"
        case kerberosKeytab = "KerberosKeytab"
        case kerberosKrb5Conf = "KerberosKrb5Conf"
        case kerberosPrincipal = "KerberosPrincipal"
        case kmsKeyProviderUri = "KmsKeyProviderUri"
        case locationArn = "LocationArn"
        case nameNodes = "NameNodes"
        case qopConfiguration = "QopConfiguration"
        case replicationFactor = "ReplicationFactor"
        case simpleUser = "SimpleUser"
        case subdirectory = "Subdirectory"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let nameNodesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.HdfsNameNode?].self, forKey: .nameNodes)
        var nameNodesDecoded0:[DataSyncClientTypes.HdfsNameNode]? = nil
        if let nameNodesContainer = nameNodesContainer {
            nameNodesDecoded0 = [DataSyncClientTypes.HdfsNameNode]()
            for structure0 in nameNodesContainer {
                if let structure0 = structure0 {
                    nameNodesDecoded0?.append(structure0)
                }
            }
        }
        nameNodes = nameNodesDecoded0
        let blockSizeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .blockSize)
        blockSize = blockSizeDecoded
        let replicationFactorDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .replicationFactor)
        replicationFactor = replicationFactorDecoded
        let kmsKeyProviderUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyProviderUri)
        kmsKeyProviderUri = kmsKeyProviderUriDecoded
        let qopConfigurationDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.QopConfiguration.self, forKey: .qopConfiguration)
        qopConfiguration = qopConfigurationDecoded
        let authenticationTypeDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.HdfsAuthenticationType.self, forKey: .authenticationType)
        authenticationType = authenticationTypeDecoded
        let simpleUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .simpleUser)
        simpleUser = simpleUserDecoded
        let kerberosPrincipalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kerberosPrincipal)
        kerberosPrincipal = kerberosPrincipalDecoded
        let kerberosKeytabDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .kerberosKeytab)
        kerberosKeytab = kerberosKeytabDecoded
        let kerberosKrb5ConfDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .kerberosKrb5Conf)
        kerberosKrb5Conf = kerberosKrb5ConfDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
    }
}

public enum UpdateLocationHdfsOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateLocationHdfsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UpdateLocationHdfsOutputResponse: Swift.Equatable {

    public init() { }
}

extension UpdateLocationNfsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
        case mountOptions = "MountOptions"
        case onPremConfig = "OnPremConfig"
        case subdirectory = "Subdirectory"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let locationArn = self.locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
        if let mountOptions = self.mountOptions {
            try encodeContainer.encode(mountOptions, forKey: .mountOptions)
        }
        if let onPremConfig = self.onPremConfig {
            try encodeContainer.encode(onPremConfig, forKey: .onPremConfig)
        }
        if let subdirectory = self.subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
    }
}

extension UpdateLocationNfsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateLocationNfsInput: Swift.Equatable {
    /// Specifies the Amazon Resource Name (ARN) of the NFS transfer location that you want to update.
    /// This member is required.
    public var locationArn: Swift.String?
    /// Specifies how DataSync can access a location using the NFS protocol.
    public var mountOptions: DataSyncClientTypes.NfsMountOptions?
    /// The DataSync agents that are connecting to a Network File System (NFS) location.
    public var onPremConfig: DataSyncClientTypes.OnPremConfig?
    /// Specifies the export path in your NFS file server that you want DataSync to mount. This path (or a subdirectory of the path) is where DataSync transfers data to or from. For information on configuring an export for DataSync, see [Accessing NFS file servers](https://docs.aws.amazon.com/datasync/latest/userguide/create-nfs-location.html#accessing-nfs).
    public var subdirectory: Swift.String?

    public init(
        locationArn: Swift.String? = nil,
        mountOptions: DataSyncClientTypes.NfsMountOptions? = nil,
        onPremConfig: DataSyncClientTypes.OnPremConfig? = nil,
        subdirectory: Swift.String? = nil
    )
    {
        self.locationArn = locationArn
        self.mountOptions = mountOptions
        self.onPremConfig = onPremConfig
        self.subdirectory = subdirectory
    }
}

struct UpdateLocationNfsInputBody: Swift.Equatable {
    let locationArn: Swift.String?
    let subdirectory: Swift.String?
    let onPremConfig: DataSyncClientTypes.OnPremConfig?
    let mountOptions: DataSyncClientTypes.NfsMountOptions?
}

extension UpdateLocationNfsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case locationArn = "LocationArn"
        case mountOptions = "MountOptions"
        case onPremConfig = "OnPremConfig"
        case subdirectory = "Subdirectory"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let onPremConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.OnPremConfig.self, forKey: .onPremConfig)
        onPremConfig = onPremConfigDecoded
        let mountOptionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.NfsMountOptions.self, forKey: .mountOptions)
        mountOptions = mountOptionsDecoded
    }
}

public enum UpdateLocationNfsOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateLocationNfsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UpdateLocationNfsOutputResponse: Swift.Equatable {

    public init() { }
}

extension UpdateLocationObjectStorageInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateLocationObjectStorageInput(accessKey: \(Swift.String(describing: accessKey)), agentArns: \(Swift.String(describing: agentArns)), locationArn: \(Swift.String(describing: locationArn)), serverCertificate: \(Swift.String(describing: serverCertificate)), serverPort: \(Swift.String(describing: serverPort)), serverProtocol: \(Swift.String(describing: serverProtocol)), subdirectory: \(Swift.String(describing: subdirectory)), secretKey: \"CONTENT_REDACTED\")"}
}

extension UpdateLocationObjectStorageInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKey = "AccessKey"
        case agentArns = "AgentArns"
        case locationArn = "LocationArn"
        case secretKey = "SecretKey"
        case serverCertificate = "ServerCertificate"
        case serverPort = "ServerPort"
        case serverProtocol = "ServerProtocol"
        case subdirectory = "Subdirectory"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessKey = self.accessKey {
            try encodeContainer.encode(accessKey, forKey: .accessKey)
        }
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarn0 in agentArns {
                try agentArnsContainer.encode(agentarn0)
            }
        }
        if let locationArn = self.locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
        if let secretKey = self.secretKey {
            try encodeContainer.encode(secretKey, forKey: .secretKey)
        }
        if let serverCertificate = self.serverCertificate {
            try encodeContainer.encode(serverCertificate.base64EncodedString(), forKey: .serverCertificate)
        }
        if let serverPort = self.serverPort {
            try encodeContainer.encode(serverPort, forKey: .serverPort)
        }
        if let serverProtocol = self.serverProtocol {
            try encodeContainer.encode(serverProtocol.rawValue, forKey: .serverProtocol)
        }
        if let subdirectory = self.subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
    }
}

extension UpdateLocationObjectStorageInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateLocationObjectStorageInput: Swift.Equatable {
    /// Specifies the access key (for example, a user name) if credentials are required to authenticate with the object storage server.
    public var accessKey: Swift.String?
    /// Specifies the Amazon Resource Names (ARNs) of the DataSync agents that can securely connect with your location.
    public var agentArns: [Swift.String]?
    /// Specifies the ARN of the object storage system location that you're updating.
    /// This member is required.
    public var locationArn: Swift.String?
    /// Specifies the secret key (for example, a password) if credentials are required to authenticate with the object storage server.
    public var secretKey: Swift.String?
    /// Specifies a certificate to authenticate with an object storage system that uses a private or self-signed certificate authority (CA). You must specify a Base64-encoded .pem file (for example, file:///home/user/.ssh/storage_sys_certificate.pem). The certificate can be up to 32768 bytes (before Base64 encoding). To use this parameter, configure ServerProtocol to HTTPS. Updating the certificate doesn't interfere with tasks that you have in progress.
    public var serverCertificate: ClientRuntime.Data?
    /// Specifies the port that your object storage server accepts inbound network traffic on (for example, port 443).
    public var serverPort: Swift.Int?
    /// Specifies the protocol that your object storage server uses to communicate.
    public var serverProtocol: DataSyncClientTypes.ObjectStorageServerProtocol?
    /// Specifies the object prefix for your object storage server. If this is a source location, DataSync only copies objects with this prefix. If this is a destination location, DataSync writes all objects with this prefix.
    public var subdirectory: Swift.String?

    public init(
        accessKey: Swift.String? = nil,
        agentArns: [Swift.String]? = nil,
        locationArn: Swift.String? = nil,
        secretKey: Swift.String? = nil,
        serverCertificate: ClientRuntime.Data? = nil,
        serverPort: Swift.Int? = nil,
        serverProtocol: DataSyncClientTypes.ObjectStorageServerProtocol? = nil,
        subdirectory: Swift.String? = nil
    )
    {
        self.accessKey = accessKey
        self.agentArns = agentArns
        self.locationArn = locationArn
        self.secretKey = secretKey
        self.serverCertificate = serverCertificate
        self.serverPort = serverPort
        self.serverProtocol = serverProtocol
        self.subdirectory = subdirectory
    }
}

struct UpdateLocationObjectStorageInputBody: Swift.Equatable {
    let locationArn: Swift.String?
    let serverPort: Swift.Int?
    let serverProtocol: DataSyncClientTypes.ObjectStorageServerProtocol?
    let subdirectory: Swift.String?
    let accessKey: Swift.String?
    let secretKey: Swift.String?
    let agentArns: [Swift.String]?
    let serverCertificate: ClientRuntime.Data?
}

extension UpdateLocationObjectStorageInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKey = "AccessKey"
        case agentArns = "AgentArns"
        case locationArn = "LocationArn"
        case secretKey = "SecretKey"
        case serverCertificate = "ServerCertificate"
        case serverPort = "ServerPort"
        case serverProtocol = "ServerProtocol"
        case subdirectory = "Subdirectory"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let serverPortDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .serverPort)
        serverPort = serverPortDecoded
        let serverProtocolDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.ObjectStorageServerProtocol.self, forKey: .serverProtocol)
        serverProtocol = serverProtocolDecoded
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let accessKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessKey)
        accessKey = accessKeyDecoded
        let secretKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secretKey)
        secretKey = secretKeyDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let serverCertificateDecoded = try containerValues.decodeIfPresent(ClientRuntime.Data.self, forKey: .serverCertificate)
        serverCertificate = serverCertificateDecoded
    }
}

public enum UpdateLocationObjectStorageOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateLocationObjectStorageOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UpdateLocationObjectStorageOutputResponse: Swift.Equatable {

    public init() { }
}

extension UpdateLocationSmbInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateLocationSmbInput(agentArns: \(Swift.String(describing: agentArns)), domain: \(Swift.String(describing: domain)), locationArn: \(Swift.String(describing: locationArn)), mountOptions: \(Swift.String(describing: mountOptions)), subdirectory: \(Swift.String(describing: subdirectory)), user: \(Swift.String(describing: user)), password: \"CONTENT_REDACTED\")"}
}

extension UpdateLocationSmbInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case domain = "Domain"
        case locationArn = "LocationArn"
        case mountOptions = "MountOptions"
        case password = "Password"
        case subdirectory = "Subdirectory"
        case user = "User"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarn0 in agentArns {
                try agentArnsContainer.encode(agentarn0)
            }
        }
        if let domain = self.domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let locationArn = self.locationArn {
            try encodeContainer.encode(locationArn, forKey: .locationArn)
        }
        if let mountOptions = self.mountOptions {
            try encodeContainer.encode(mountOptions, forKey: .mountOptions)
        }
        if let password = self.password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let subdirectory = self.subdirectory {
            try encodeContainer.encode(subdirectory, forKey: .subdirectory)
        }
        if let user = self.user {
            try encodeContainer.encode(user, forKey: .user)
        }
    }
}

extension UpdateLocationSmbInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateLocationSmbInput: Swift.Equatable {
    /// The Amazon Resource Names (ARNs) of agents to use for a Simple Message Block (SMB) location.
    public var agentArns: [Swift.String]?
    /// The name of the Windows domain that the SMB server belongs to.
    public var domain: Swift.String?
    /// The Amazon Resource Name (ARN) of the SMB location to update.
    /// This member is required.
    public var locationArn: Swift.String?
    /// Specifies the version of the Server Message Block (SMB) protocol that DataSync uses to access an SMB file server.
    public var mountOptions: DataSyncClientTypes.SmbMountOptions?
    /// The password of the user who can mount the share has the permissions to access files and folders in the SMB share.
    public var password: Swift.String?
    /// The subdirectory in the SMB file system that is used to read data from the SMB source location or write data to the SMB destination. The SMB path should be a path that's exported by the SMB server, or a subdirectory of that path. The path should be such that it can be mounted by other SMB clients in your network. Subdirectory must be specified with forward slashes. For example, /path/to/folder. To transfer all the data in the folder that you specified, DataSync must have permissions to mount the SMB share and to access all the data in that share. To ensure this, do either of the following:
    ///
    /// * Ensure that the user/password specified belongs to the user who can mount the share and who has the appropriate permissions for all of the files and directories that you want DataSync to access.
    ///
    /// * Use credentials of a member of the Backup Operators group to mount the share.
    ///
    ///
    /// Doing either of these options enables the agent to access the data. For the agent to access directories, you must also enable all execute access.
    public var subdirectory: Swift.String?
    /// The user who can mount the share has the permissions to access files and folders in the SMB share.
    public var user: Swift.String?

    public init(
        agentArns: [Swift.String]? = nil,
        domain: Swift.String? = nil,
        locationArn: Swift.String? = nil,
        mountOptions: DataSyncClientTypes.SmbMountOptions? = nil,
        password: Swift.String? = nil,
        subdirectory: Swift.String? = nil,
        user: Swift.String? = nil
    )
    {
        self.agentArns = agentArns
        self.domain = domain
        self.locationArn = locationArn
        self.mountOptions = mountOptions
        self.password = password
        self.subdirectory = subdirectory
        self.user = user
    }
}

struct UpdateLocationSmbInputBody: Swift.Equatable {
    let locationArn: Swift.String?
    let subdirectory: Swift.String?
    let user: Swift.String?
    let domain: Swift.String?
    let password: Swift.String?
    let agentArns: [Swift.String]?
    let mountOptions: DataSyncClientTypes.SmbMountOptions?
}

extension UpdateLocationSmbInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case domain = "Domain"
        case locationArn = "LocationArn"
        case mountOptions = "MountOptions"
        case password = "Password"
        case subdirectory = "Subdirectory"
        case user = "User"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let locationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .locationArn)
        locationArn = locationArnDecoded
        let subdirectoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subdirectory)
        subdirectory = subdirectoryDecoded
        let userDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .user)
        user = userDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let mountOptionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.SmbMountOptions.self, forKey: .mountOptions)
        mountOptions = mountOptionsDecoded
    }
}

public enum UpdateLocationSmbOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateLocationSmbOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UpdateLocationSmbOutputResponse: Swift.Equatable {

    public init() { }
}

extension UpdateStorageSystemInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case credentials = "Credentials"
        case name = "Name"
        case serverConfiguration = "ServerConfiguration"
        case storageSystemArn = "StorageSystemArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let agentArns = agentArns {
            var agentArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .agentArns)
            for agentarn0 in agentArns {
                try agentArnsContainer.encode(agentarn0)
            }
        }
        if let cloudWatchLogGroupArn = self.cloudWatchLogGroupArn {
            try encodeContainer.encode(cloudWatchLogGroupArn, forKey: .cloudWatchLogGroupArn)
        }
        if let credentials = self.credentials {
            try encodeContainer.encode(credentials, forKey: .credentials)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let serverConfiguration = self.serverConfiguration {
            try encodeContainer.encode(serverConfiguration, forKey: .serverConfiguration)
        }
        if let storageSystemArn = self.storageSystemArn {
            try encodeContainer.encode(storageSystemArn, forKey: .storageSystemArn)
        }
    }
}

extension UpdateStorageSystemInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateStorageSystemInput: Swift.Equatable {
    /// Specifies the Amazon Resource Name (ARN) of the DataSync agent that connects to and reads your on-premises storage system. You can only specify one ARN.
    public var agentArns: [Swift.String]?
    /// Specifies the ARN of the Amazon CloudWatch log group for monitoring and logging discovery job events.
    public var cloudWatchLogGroupArn: Swift.String?
    /// Specifies the user name and password for accessing your on-premises storage system's management interface.
    public var credentials: DataSyncClientTypes.Credentials?
    /// Specifies a familiar name for your on-premises storage system.
    public var name: Swift.String?
    /// Specifies the server name and network port required to connect with your on-premises storage system's management interface.
    public var serverConfiguration: DataSyncClientTypes.DiscoveryServerConfiguration?
    /// Specifies the ARN of the on-premises storage system that you want reconfigure.
    /// This member is required.
    public var storageSystemArn: Swift.String?

    public init(
        agentArns: [Swift.String]? = nil,
        cloudWatchLogGroupArn: Swift.String? = nil,
        credentials: DataSyncClientTypes.Credentials? = nil,
        name: Swift.String? = nil,
        serverConfiguration: DataSyncClientTypes.DiscoveryServerConfiguration? = nil,
        storageSystemArn: Swift.String? = nil
    )
    {
        self.agentArns = agentArns
        self.cloudWatchLogGroupArn = cloudWatchLogGroupArn
        self.credentials = credentials
        self.name = name
        self.serverConfiguration = serverConfiguration
        self.storageSystemArn = storageSystemArn
    }
}

struct UpdateStorageSystemInputBody: Swift.Equatable {
    let storageSystemArn: Swift.String?
    let serverConfiguration: DataSyncClientTypes.DiscoveryServerConfiguration?
    let agentArns: [Swift.String]?
    let name: Swift.String?
    let cloudWatchLogGroupArn: Swift.String?
    let credentials: DataSyncClientTypes.Credentials?
}

extension UpdateStorageSystemInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case agentArns = "AgentArns"
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case credentials = "Credentials"
        case name = "Name"
        case serverConfiguration = "ServerConfiguration"
        case storageSystemArn = "StorageSystemArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let storageSystemArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageSystemArn)
        storageSystemArn = storageSystemArnDecoded
        let serverConfigurationDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.DiscoveryServerConfiguration.self, forKey: .serverConfiguration)
        serverConfiguration = serverConfigurationDecoded
        let agentArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .agentArns)
        var agentArnsDecoded0:[Swift.String]? = nil
        if let agentArnsContainer = agentArnsContainer {
            agentArnsDecoded0 = [Swift.String]()
            for string0 in agentArnsContainer {
                if let string0 = string0 {
                    agentArnsDecoded0?.append(string0)
                }
            }
        }
        agentArns = agentArnsDecoded0
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let cloudWatchLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogGroupArn)
        cloudWatchLogGroupArn = cloudWatchLogGroupArnDecoded
        let credentialsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Credentials.self, forKey: .credentials)
        credentials = credentialsDecoded
    }
}

public enum UpdateStorageSystemOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateStorageSystemOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UpdateStorageSystemOutputResponse: Swift.Equatable {

    public init() { }
}

extension UpdateTaskExecutionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case taskExecutionArn = "TaskExecutionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let taskExecutionArn = self.taskExecutionArn {
            try encodeContainer.encode(taskExecutionArn, forKey: .taskExecutionArn)
        }
    }
}

extension UpdateTaskExecutionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateTaskExecutionInput: Swift.Equatable {
    /// Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options. Each option has a default value. Unless you need to, you don't have to configure any of these options before starting your task.
    /// This member is required.
    public var options: DataSyncClientTypes.Options?
    /// Specifies the Amazon Resource Name (ARN) of the task execution that you're updating.
    /// This member is required.
    public var taskExecutionArn: Swift.String?

    public init(
        options: DataSyncClientTypes.Options? = nil,
        taskExecutionArn: Swift.String? = nil
    )
    {
        self.options = options
        self.taskExecutionArn = taskExecutionArn
    }
}

struct UpdateTaskExecutionInputBody: Swift.Equatable {
    let taskExecutionArn: Swift.String?
    let options: DataSyncClientTypes.Options?
}

extension UpdateTaskExecutionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case options = "Options"
        case taskExecutionArn = "TaskExecutionArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskExecutionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskExecutionArn)
        taskExecutionArn = taskExecutionArnDecoded
        let optionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Options.self, forKey: .options)
        options = optionsDecoded
    }
}

public enum UpdateTaskExecutionOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateTaskExecutionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UpdateTaskExecutionOutputResponse: Swift.Equatable {

    public init() { }
}

extension UpdateTaskInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case excludes = "Excludes"
        case includes = "Includes"
        case name = "Name"
        case options = "Options"
        case schedule = "Schedule"
        case taskArn = "TaskArn"
        case taskReportConfig = "TaskReportConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLogGroupArn = self.cloudWatchLogGroupArn {
            try encodeContainer.encode(cloudWatchLogGroupArn, forKey: .cloudWatchLogGroupArn)
        }
        if let excludes = excludes {
            var excludesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludes)
            for filterrule0 in excludes {
                try excludesContainer.encode(filterrule0)
            }
        }
        if let includes = includes {
            var includesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .includes)
            for filterrule0 in includes {
                try includesContainer.encode(filterrule0)
            }
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let options = self.options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let schedule = self.schedule {
            try encodeContainer.encode(schedule, forKey: .schedule)
        }
        if let taskArn = self.taskArn {
            try encodeContainer.encode(taskArn, forKey: .taskArn)
        }
        if let taskReportConfig = self.taskReportConfig {
            try encodeContainer.encode(taskReportConfig, forKey: .taskReportConfig)
        }
    }
}

extension UpdateTaskInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

/// UpdateTaskResponse
public struct UpdateTaskInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the resource name of the Amazon CloudWatch log group.
    public var cloudWatchLogGroupArn: Swift.String?
    /// Specifies a list of filter rules that exclude specific data during your transfer. For more information and examples, see [Filtering data transferred by DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html).
    public var excludes: [DataSyncClientTypes.FilterRule]?
    /// Specifies a list of filter rules that include specific data during your transfer. For more information and examples, see [Filtering data transferred by DataSync](https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html).
    public var includes: [DataSyncClientTypes.FilterRule]?
    /// The name of the task to update.
    public var name: Swift.String?
    /// Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options. Each option has a default value. Unless you need to, you don't have to configure any of these options before starting your task.
    public var options: DataSyncClientTypes.Options?
    /// Specifies a schedule used to periodically transfer files from a source to a destination location. You can configure your task to execute hourly, daily, weekly or on specific days of the week. You control when in the day or hour you want the task to execute. The time you specify is UTC time. For more information, see [Scheduling your task](https://docs.aws.amazon.com/datasync/latest/userguide/task-scheduling.html).
    public var schedule: DataSyncClientTypes.TaskSchedule?
    /// The Amazon Resource Name (ARN) of the resource name of the task to update.
    /// This member is required.
    public var taskArn: Swift.String?
    /// Specifies how you want to configure a task report, which provides detailed information about for your DataSync transfer.
    public var taskReportConfig: DataSyncClientTypes.TaskReportConfig?

    public init(
        cloudWatchLogGroupArn: Swift.String? = nil,
        excludes: [DataSyncClientTypes.FilterRule]? = nil,
        includes: [DataSyncClientTypes.FilterRule]? = nil,
        name: Swift.String? = nil,
        options: DataSyncClientTypes.Options? = nil,
        schedule: DataSyncClientTypes.TaskSchedule? = nil,
        taskArn: Swift.String? = nil,
        taskReportConfig: DataSyncClientTypes.TaskReportConfig? = nil
    )
    {
        self.cloudWatchLogGroupArn = cloudWatchLogGroupArn
        self.excludes = excludes
        self.includes = includes
        self.name = name
        self.options = options
        self.schedule = schedule
        self.taskArn = taskArn
        self.taskReportConfig = taskReportConfig
    }
}

struct UpdateTaskInputBody: Swift.Equatable {
    let taskArn: Swift.String?
    let options: DataSyncClientTypes.Options?
    let excludes: [DataSyncClientTypes.FilterRule]?
    let schedule: DataSyncClientTypes.TaskSchedule?
    let name: Swift.String?
    let cloudWatchLogGroupArn: Swift.String?
    let includes: [DataSyncClientTypes.FilterRule]?
    let taskReportConfig: DataSyncClientTypes.TaskReportConfig?
}

extension UpdateTaskInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogGroupArn = "CloudWatchLogGroupArn"
        case excludes = "Excludes"
        case includes = "Includes"
        case name = "Name"
        case options = "Options"
        case schedule = "Schedule"
        case taskArn = "TaskArn"
        case taskReportConfig = "TaskReportConfig"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let taskArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .taskArn)
        taskArn = taskArnDecoded
        let optionsDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.Options.self, forKey: .options)
        options = optionsDecoded
        let excludesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .excludes)
        var excludesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let excludesContainer = excludesContainer {
            excludesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in excludesContainer {
                if let structure0 = structure0 {
                    excludesDecoded0?.append(structure0)
                }
            }
        }
        excludes = excludesDecoded0
        let scheduleDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskSchedule.self, forKey: .schedule)
        schedule = scheduleDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let cloudWatchLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogGroupArn)
        cloudWatchLogGroupArn = cloudWatchLogGroupArnDecoded
        let includesContainer = try containerValues.decodeIfPresent([DataSyncClientTypes.FilterRule?].self, forKey: .includes)
        var includesDecoded0:[DataSyncClientTypes.FilterRule]? = nil
        if let includesContainer = includesContainer {
            includesDecoded0 = [DataSyncClientTypes.FilterRule]()
            for structure0 in includesContainer {
                if let structure0 = structure0 {
                    includesDecoded0?.append(structure0)
                }
            }
        }
        includes = includesDecoded0
        let taskReportConfigDecoded = try containerValues.decodeIfPresent(DataSyncClientTypes.TaskReportConfig.self, forKey: .taskReportConfig)
        taskReportConfig = taskReportConfigDecoded
    }
}

public enum UpdateTaskOutputError: ClientRuntime.HttpResponseErrorBinding {
    public static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "InternalException": return try await InternalException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InvalidRequestException": return try await InvalidRequestException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateTaskOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UpdateTaskOutputResponse: Swift.Equatable {

    public init() { }
}

extension DataSyncClientTypes {
    public enum VerifyMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `none`
        case onlyFilesTransferred
        case pointInTimeConsistent
        case sdkUnknown(Swift.String)

        public static var allCases: [VerifyMode] {
            return [
                .none,
                .onlyFilesTransferred,
                .pointInTimeConsistent,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .none: return "NONE"
            case .onlyFilesTransferred: return "ONLY_FILES_TRANSFERRED"
            case .pointInTimeConsistent: return "POINT_IN_TIME_CONSISTENT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VerifyMode(rawValue: rawValue) ?? VerifyMode.sdkUnknown(rawValue)
        }
    }
}
