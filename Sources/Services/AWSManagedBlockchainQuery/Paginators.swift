// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ManagedBlockchainQueryClient {
    /// Paginate over `[ListAssetContractsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAssetContractsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAssetContractsOutput`
    public func listAssetContractsPaginated(input: ListAssetContractsInput) -> ClientRuntime.PaginatorSequence<ListAssetContractsInput, ListAssetContractsOutput> {
        return ClientRuntime.PaginatorSequence<ListAssetContractsInput, ListAssetContractsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listAssetContracts(input:))
    }
}

extension ListAssetContractsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAssetContractsInput {
        return ListAssetContractsInput(
            contractFilter: self.contractFilter,
            maxResults: self.maxResults,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListAssetContractsInput, OperationStackOutput == ListAssetContractsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listAssetContractsPaginated`
    /// to access the nested member `[ManagedBlockchainQueryClientTypes.AssetContract]`
    /// - Returns: `[ManagedBlockchainQueryClientTypes.AssetContract]`
    public func contracts() async throws -> [ManagedBlockchainQueryClientTypes.AssetContract] {
        return try await self.asyncCompactMap { item in item.contracts }
    }
}
extension ManagedBlockchainQueryClient {
    /// Paginate over `[ListTokenBalancesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTokenBalancesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTokenBalancesOutput`
    public func listTokenBalancesPaginated(input: ListTokenBalancesInput) -> ClientRuntime.PaginatorSequence<ListTokenBalancesInput, ListTokenBalancesOutput> {
        return ClientRuntime.PaginatorSequence<ListTokenBalancesInput, ListTokenBalancesOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listTokenBalances(input:))
    }
}

extension ListTokenBalancesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTokenBalancesInput {
        return ListTokenBalancesInput(
            maxResults: self.maxResults,
            nextToken: token,
            ownerFilter: self.ownerFilter,
            tokenFilter: self.tokenFilter
        )}
}

extension PaginatorSequence where OperationStackInput == ListTokenBalancesInput, OperationStackOutput == ListTokenBalancesOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listTokenBalancesPaginated`
    /// to access the nested member `[ManagedBlockchainQueryClientTypes.TokenBalance]`
    /// - Returns: `[ManagedBlockchainQueryClientTypes.TokenBalance]`
    public func tokenBalances() async throws -> [ManagedBlockchainQueryClientTypes.TokenBalance] {
        return try await self.asyncCompactMap { item in item.tokenBalances }
    }
}
extension ManagedBlockchainQueryClient {
    /// Paginate over `[ListTransactionEventsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTransactionEventsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTransactionEventsOutput`
    public func listTransactionEventsPaginated(input: ListTransactionEventsInput) -> ClientRuntime.PaginatorSequence<ListTransactionEventsInput, ListTransactionEventsOutput> {
        return ClientRuntime.PaginatorSequence<ListTransactionEventsInput, ListTransactionEventsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listTransactionEvents(input:))
    }
}

extension ListTransactionEventsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTransactionEventsInput {
        return ListTransactionEventsInput(
            maxResults: self.maxResults,
            network: self.network,
            nextToken: token,
            transactionHash: self.transactionHash
        )}
}

extension PaginatorSequence where OperationStackInput == ListTransactionEventsInput, OperationStackOutput == ListTransactionEventsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listTransactionEventsPaginated`
    /// to access the nested member `[ManagedBlockchainQueryClientTypes.TransactionEvent]`
    /// - Returns: `[ManagedBlockchainQueryClientTypes.TransactionEvent]`
    public func events() async throws -> [ManagedBlockchainQueryClientTypes.TransactionEvent] {
        return try await self.asyncCompactMap { item in item.events }
    }
}
extension ManagedBlockchainQueryClient {
    /// Paginate over `[ListTransactionsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListTransactionsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListTransactionsOutput`
    public func listTransactionsPaginated(input: ListTransactionsInput) -> ClientRuntime.PaginatorSequence<ListTransactionsInput, ListTransactionsOutput> {
        return ClientRuntime.PaginatorSequence<ListTransactionsInput, ListTransactionsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listTransactions(input:))
    }
}

extension ListTransactionsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListTransactionsInput {
        return ListTransactionsInput(
            address: self.address,
            fromBlockchainInstant: self.fromBlockchainInstant,
            maxResults: self.maxResults,
            network: self.network,
            nextToken: token,
            sort: self.sort,
            toBlockchainInstant: self.toBlockchainInstant
        )}
}

extension PaginatorSequence where OperationStackInput == ListTransactionsInput, OperationStackOutput == ListTransactionsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listTransactionsPaginated`
    /// to access the nested member `[ManagedBlockchainQueryClientTypes.TransactionOutputItem]`
    /// - Returns: `[ManagedBlockchainQueryClientTypes.TransactionOutputItem]`
    public func transactions() async throws -> [ManagedBlockchainQueryClientTypes.TransactionOutputItem] {
        return try await self.asyncCompactMap { item in item.transactions }
    }
}
