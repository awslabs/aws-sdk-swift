// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// Amazon DocumentDB is a fast, reliable, and fully managed database service. Amazon DocumentDB makes it easy to set up, operate, and scale MongoDB-compatible databases in the cloud. With Amazon DocumentDB, you can run the same application code and use the same drivers and tools that you use with MongoDB.
public protocol DocDBClientProtocol {
    /// Performs the `AddSourceIdentifierToSubscription` operation on the `AmazonRDSv19` service.
    ///
    /// Adds a source identifier to an existing event notification subscription.
    ///
    /// - Parameter AddSourceIdentifierToSubscriptionInput : Represents the input to [AddSourceIdentifierToSubscription].
    ///
    /// - Returns: `AddSourceIdentifierToSubscriptionOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `SourceNotFoundFault` : The requested source could not be found.
    /// - `SubscriptionNotFoundFault` : The subscription name does not exist.
    func addSourceIdentifierToSubscription(input: AddSourceIdentifierToSubscriptionInput) async throws -> AddSourceIdentifierToSubscriptionOutput
    /// Performs the `AddTagsToResource` operation on the `AmazonRDSv19` service.
    ///
    /// Adds metadata tags to an Amazon DocumentDB resource. You can use these tags with cost allocation reporting to track costs that are associated with Amazon DocumentDB resources or in a Condition statement in an Identity and Access Management (IAM) policy for Amazon DocumentDB.
    ///
    /// - Parameter AddTagsToResourceInput : Represents the input to [AddTagsToResource].
    ///
    /// - Returns: `AddTagsToResourceOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterNotFoundFault` : DBClusterIdentifier doesn't refer to an existing cluster.
    /// - `DBInstanceNotFoundFault` : DBInstanceIdentifier doesn't refer to an existing instance.
    /// - `DBSnapshotNotFoundFault` : DBSnapshotIdentifier doesn't refer to an existing snapshot.
    func addTagsToResource(input: AddTagsToResourceInput) async throws -> AddTagsToResourceOutput
    /// Performs the `ApplyPendingMaintenanceAction` operation on the `AmazonRDSv19` service.
    ///
    /// Applies a pending maintenance action to a resource (for example, to an Amazon DocumentDB instance).
    ///
    /// - Parameter ApplyPendingMaintenanceActionInput : Represents the input to [ApplyPendingMaintenanceAction].
    ///
    /// - Returns: `ApplyPendingMaintenanceActionOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InvalidDBClusterStateFault` : The cluster isn't in a valid state.
    /// - `InvalidDBInstanceStateFault` : The specified instance isn't in the available state.
    /// - `ResourceNotFoundFault` : The specified resource ID was not found.
    func applyPendingMaintenanceAction(input: ApplyPendingMaintenanceActionInput) async throws -> ApplyPendingMaintenanceActionOutput
    /// Performs the `CopyDBClusterParameterGroup` operation on the `AmazonRDSv19` service.
    ///
    /// Copies the specified cluster parameter group.
    ///
    /// - Parameter CopyDBClusterParameterGroupInput : Represents the input to [CopyDBClusterParameterGroup].
    ///
    /// - Returns: `CopyDBClusterParameterGroupOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBParameterGroupAlreadyExistsFault` : A parameter group with the same name already exists.
    /// - `DBParameterGroupNotFoundFault` : DBParameterGroupName doesn't refer to an existing parameter group.
    /// - `DBParameterGroupQuotaExceededFault` : This request would cause you to exceed the allowed number of parameter groups.
    func copyDBClusterParameterGroup(input: CopyDBClusterParameterGroupInput) async throws -> CopyDBClusterParameterGroupOutput
    /// Performs the `CopyDBClusterSnapshot` operation on the `AmazonRDSv19` service.
    ///
    /// Copies a snapshot of a cluster. To copy a cluster snapshot from a shared manual cluster snapshot, SourceDBClusterSnapshotIdentifier must be the Amazon Resource Name (ARN) of the shared cluster snapshot. You can only copy a shared DB cluster snapshot, whether encrypted or not, in the same Amazon Web Services Region. To cancel the copy operation after it is in progress, delete the target cluster snapshot identified by TargetDBClusterSnapshotIdentifier while that cluster snapshot is in the copying status.
    ///
    /// - Parameter CopyDBClusterSnapshotInput : Represents the input to [CopyDBClusterSnapshot].
    ///
    /// - Returns: `CopyDBClusterSnapshotOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterSnapshotAlreadyExistsFault` : You already have a cluster snapshot with the given identifier.
    /// - `DBClusterSnapshotNotFoundFault` : DBClusterSnapshotIdentifier doesn't refer to an existing cluster snapshot.
    /// - `InvalidDBClusterSnapshotStateFault` : The provided value isn't a valid cluster snapshot state.
    /// - `InvalidDBClusterStateFault` : The cluster isn't in a valid state.
    /// - `KMSKeyNotAccessibleFault` : An error occurred when accessing an KMS key.
    /// - `SnapshotQuotaExceededFault` : The request would cause you to exceed the allowed number of snapshots.
    func copyDBClusterSnapshot(input: CopyDBClusterSnapshotInput) async throws -> CopyDBClusterSnapshotOutput
    /// Performs the `CreateDBCluster` operation on the `AmazonRDSv19` service.
    ///
    /// Creates a new Amazon DocumentDB cluster.
    ///
    /// - Parameter CreateDBClusterInput : Represents the input to [CreateDBCluster].
    ///
    /// - Returns: `CreateDBClusterOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterAlreadyExistsFault` : You already have a cluster with the given identifier.
    /// - `DBClusterNotFoundFault` : DBClusterIdentifier doesn't refer to an existing cluster.
    /// - `DBClusterParameterGroupNotFoundFault` : DBClusterParameterGroupName doesn't refer to an existing cluster parameter group.
    /// - `DBClusterQuotaExceededFault` : The cluster can't be created because you have reached the maximum allowed quota of clusters.
    /// - `DBInstanceNotFoundFault` : DBInstanceIdentifier doesn't refer to an existing instance.
    /// - `DBSubnetGroupDoesNotCoverEnoughAZs` : Subnets in the subnet group should cover at least two Availability Zones unless there is only one Availability Zone.
    /// - `DBSubnetGroupNotFoundFault` : DBSubnetGroupName doesn't refer to an existing subnet group.
    /// - `GlobalClusterNotFoundFault` : The GlobalClusterIdentifier doesn't refer to an existing global cluster.
    /// - `InsufficientStorageClusterCapacityFault` : There is not enough storage available for the current action. You might be able to resolve this error by updating your subnet group to use different Availability Zones that have more storage available.
    /// - `InvalidDBClusterStateFault` : The cluster isn't in a valid state.
    /// - `InvalidDBInstanceStateFault` : The specified instance isn't in the available state.
    /// - `InvalidDBSubnetGroupStateFault` : The subnet group can't be deleted because it's in use.
    /// - `InvalidGlobalClusterStateFault` : The requested operation can't be performed while the cluster is in this state.
    /// - `InvalidSubnet` : The requested subnet is not valid, or multiple subnets were requested that are not all in a common virtual private cloud (VPC).
    /// - `InvalidVPCNetworkStateFault` : The subnet group doesn't cover all Availability Zones after it is created because of changes that were made.
    /// - `KMSKeyNotAccessibleFault` : An error occurred when accessing an KMS key.
    /// - `StorageQuotaExceededFault` : The request would cause you to exceed the allowed amount of storage available across all instances.
    func createDBCluster(input: CreateDBClusterInput) async throws -> CreateDBClusterOutput
    /// Performs the `CreateDBClusterParameterGroup` operation on the `AmazonRDSv19` service.
    ///
    /// Creates a new cluster parameter group. Parameters in a cluster parameter group apply to all of the instances in a cluster. A cluster parameter group is initially created with the default parameters for the database engine used by instances in the cluster. In Amazon DocumentDB, you cannot make modifications directly to the default.docdb3.6 cluster parameter group. If your Amazon DocumentDB cluster is using the default cluster parameter group and you want to modify a value in it, you must first [ create a new parameter group](https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-create.html) or [ copy an existing parameter group](https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-copy.html), modify it, and then apply the modified parameter group to your cluster. For the new cluster parameter group and associated settings to take effect, you must then reboot the instances in the cluster without failover. For more information, see [ Modifying Amazon DocumentDB Cluster Parameter Groups](https://docs.aws.amazon.com/documentdb/latest/developerguide/cluster_parameter_group-modify.html).
    ///
    /// - Parameter CreateDBClusterParameterGroupInput : Represents the input of [CreateDBClusterParameterGroup].
    ///
    /// - Returns: `CreateDBClusterParameterGroupOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBParameterGroupAlreadyExistsFault` : A parameter group with the same name already exists.
    /// - `DBParameterGroupQuotaExceededFault` : This request would cause you to exceed the allowed number of parameter groups.
    func createDBClusterParameterGroup(input: CreateDBClusterParameterGroupInput) async throws -> CreateDBClusterParameterGroupOutput
    /// Performs the `CreateDBClusterSnapshot` operation on the `AmazonRDSv19` service.
    ///
    /// Creates a snapshot of a cluster.
    ///
    /// - Parameter CreateDBClusterSnapshotInput : Represents the input of [CreateDBClusterSnapshot].
    ///
    /// - Returns: `CreateDBClusterSnapshotOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterNotFoundFault` : DBClusterIdentifier doesn't refer to an existing cluster.
    /// - `DBClusterSnapshotAlreadyExistsFault` : You already have a cluster snapshot with the given identifier.
    /// - `InvalidDBClusterSnapshotStateFault` : The provided value isn't a valid cluster snapshot state.
    /// - `InvalidDBClusterStateFault` : The cluster isn't in a valid state.
    /// - `SnapshotQuotaExceededFault` : The request would cause you to exceed the allowed number of snapshots.
    func createDBClusterSnapshot(input: CreateDBClusterSnapshotInput) async throws -> CreateDBClusterSnapshotOutput
    /// Performs the `CreateDBInstance` operation on the `AmazonRDSv19` service.
    ///
    /// Creates a new instance.
    ///
    /// - Parameter CreateDBInstanceInput : Represents the input to [CreateDBInstance].
    ///
    /// - Returns: `CreateDBInstanceOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AuthorizationNotFoundFault` : The specified CIDR IP or Amazon EC2 security group isn't authorized for the specified security group. Amazon DocumentDB also might not be authorized to perform necessary actions on your behalf using IAM.
    /// - `DBClusterNotFoundFault` : DBClusterIdentifier doesn't refer to an existing cluster.
    /// - `DBInstanceAlreadyExistsFault` : You already have a instance with the given identifier.
    /// - `DBParameterGroupNotFoundFault` : DBParameterGroupName doesn't refer to an existing parameter group.
    /// - `DBSecurityGroupNotFoundFault` : DBSecurityGroupName doesn't refer to an existing security group.
    /// - `DBSubnetGroupDoesNotCoverEnoughAZs` : Subnets in the subnet group should cover at least two Availability Zones unless there is only one Availability Zone.
    /// - `DBSubnetGroupNotFoundFault` : DBSubnetGroupName doesn't refer to an existing subnet group.
    /// - `InstanceQuotaExceededFault` : The request would cause you to exceed the allowed number of instances.
    /// - `InsufficientDBInstanceCapacityFault` : The specified instance class isn't available in the specified Availability Zone.
    /// - `InvalidDBClusterStateFault` : The cluster isn't in a valid state.
    /// - `InvalidSubnet` : The requested subnet is not valid, or multiple subnets were requested that are not all in a common virtual private cloud (VPC).
    /// - `InvalidVPCNetworkStateFault` : The subnet group doesn't cover all Availability Zones after it is created because of changes that were made.
    /// - `KMSKeyNotAccessibleFault` : An error occurred when accessing an KMS key.
    /// - `StorageQuotaExceededFault` : The request would cause you to exceed the allowed amount of storage available across all instances.
    /// - `StorageTypeNotSupportedFault` : Storage of the specified StorageType can't be associated with the DB instance.
    func createDBInstance(input: CreateDBInstanceInput) async throws -> CreateDBInstanceOutput
    /// Performs the `CreateDBSubnetGroup` operation on the `AmazonRDSv19` service.
    ///
    /// Creates a new subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
    ///
    /// - Parameter CreateDBSubnetGroupInput : Represents the input to [CreateDBSubnetGroup].
    ///
    /// - Returns: `CreateDBSubnetGroupOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBSubnetGroupAlreadyExistsFault` : DBSubnetGroupName is already being used by an existing subnet group.
    /// - `DBSubnetGroupDoesNotCoverEnoughAZs` : Subnets in the subnet group should cover at least two Availability Zones unless there is only one Availability Zone.
    /// - `DBSubnetGroupQuotaExceededFault` : The request would cause you to exceed the allowed number of subnet groups.
    /// - `DBSubnetQuotaExceededFault` : The request would cause you to exceed the allowed number of subnets in a subnet group.
    /// - `InvalidSubnet` : The requested subnet is not valid, or multiple subnets were requested that are not all in a common virtual private cloud (VPC).
    func createDBSubnetGroup(input: CreateDBSubnetGroupInput) async throws -> CreateDBSubnetGroupOutput
    /// Performs the `CreateEventSubscription` operation on the `AmazonRDSv19` service.
    ///
    /// Creates an Amazon DocumentDB event notification subscription. This action requires a topic Amazon Resource Name (ARN) created by using the Amazon DocumentDB console, the Amazon SNS console, or the Amazon SNS API. To obtain an ARN with Amazon SNS, you must create a topic in Amazon SNS and subscribe to the topic. The ARN is displayed in the Amazon SNS console. You can specify the type of source (SourceType) that you want to be notified of. You can also provide a list of Amazon DocumentDB sources (SourceIds) that trigger the events, and you can provide a list of event categories (EventCategories) for events that you want to be notified of. For example, you can specify SourceType = db-instance, SourceIds = mydbinstance1, mydbinstance2 and EventCategories = Availability, Backup. If you specify both the SourceType and SourceIds (such as SourceType = db-instance and SourceIdentifier = myDBInstance1), you are notified of all the db-instance events for the specified source. If you specify a SourceType but do not specify a SourceIdentifier, you receive notice of the events for that source type for all your Amazon DocumentDB sources. If you do not specify either the SourceType or the SourceIdentifier, you are notified of events generated from all Amazon DocumentDB sources belonging to your customer account.
    ///
    /// - Parameter CreateEventSubscriptionInput : Represents the input to [CreateEventSubscription].
    ///
    /// - Returns: `CreateEventSubscriptionOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `EventSubscriptionQuotaExceededFault` : You have reached the maximum number of event subscriptions.
    /// - `SNSInvalidTopicFault` : Amazon SNS has responded that there is a problem with the specified topic.
    /// - `SNSNoAuthorizationFault` : You do not have permission to publish to the SNS topic Amazon Resource Name (ARN).
    /// - `SNSTopicArnNotFoundFault` : The SNS topic Amazon Resource Name (ARN) does not exist.
    /// - `SourceNotFoundFault` : The requested source could not be found.
    /// - `SubscriptionAlreadyExistFault` : The provided subscription name already exists.
    /// - `SubscriptionCategoryNotFoundFault` : The provided category does not exist.
    func createEventSubscription(input: CreateEventSubscriptionInput) async throws -> CreateEventSubscriptionOutput
    /// Performs the `CreateGlobalCluster` operation on the `AmazonRDSv19` service.
    ///
    /// Creates an Amazon DocumentDB global cluster that can span multiple multiple Amazon Web Services Regions. The global cluster contains one primary cluster with read-write capability, and up-to give read-only secondary clusters. Global clusters uses storage-based fast replication across regions with latencies less than one second, using dedicated infrastructure with no impact to your workload’s performance. You can create a global cluster that is initially empty, and then add a primary and a secondary to it. Or you can specify an existing cluster during the create operation, and this cluster becomes the primary of the global cluster. This action only applies to Amazon DocumentDB clusters.
    ///
    /// - Parameter CreateGlobalClusterInput : Represents the input to [CreateGlobalCluster].
    ///
    /// - Returns: `CreateGlobalClusterOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterNotFoundFault` : DBClusterIdentifier doesn't refer to an existing cluster.
    /// - `GlobalClusterAlreadyExistsFault` : The GlobalClusterIdentifier already exists. Choose a new global cluster identifier (unique name) to create a new global cluster.
    /// - `GlobalClusterQuotaExceededFault` : The number of global clusters for this account is already at the maximum allowed.
    /// - `InvalidDBClusterStateFault` : The cluster isn't in a valid state.
    func createGlobalCluster(input: CreateGlobalClusterInput) async throws -> CreateGlobalClusterOutput
    /// Performs the `DeleteDBCluster` operation on the `AmazonRDSv19` service.
    ///
    /// Deletes a previously provisioned cluster. When you delete a cluster, all automated backups for that cluster are deleted and can't be recovered. Manual DB cluster snapshots of the specified cluster are not deleted.
    ///
    /// - Parameter DeleteDBClusterInput : Represents the input to [DeleteDBCluster].
    ///
    /// - Returns: `DeleteDBClusterOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterNotFoundFault` : DBClusterIdentifier doesn't refer to an existing cluster.
    /// - `DBClusterSnapshotAlreadyExistsFault` : You already have a cluster snapshot with the given identifier.
    /// - `InvalidDBClusterSnapshotStateFault` : The provided value isn't a valid cluster snapshot state.
    /// - `InvalidDBClusterStateFault` : The cluster isn't in a valid state.
    /// - `SnapshotQuotaExceededFault` : The request would cause you to exceed the allowed number of snapshots.
    func deleteDBCluster(input: DeleteDBClusterInput) async throws -> DeleteDBClusterOutput
    /// Performs the `DeleteDBClusterParameterGroup` operation on the `AmazonRDSv19` service.
    ///
    /// Deletes a specified cluster parameter group. The cluster parameter group to be deleted can't be associated with any clusters.
    ///
    /// - Parameter DeleteDBClusterParameterGroupInput : Represents the input to [DeleteDBClusterParameterGroup].
    ///
    /// - Returns: `DeleteDBClusterParameterGroupOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBParameterGroupNotFoundFault` : DBParameterGroupName doesn't refer to an existing parameter group.
    /// - `InvalidDBParameterGroupStateFault` : The parameter group is in use, or it is in a state that is not valid. If you are trying to delete the parameter group, you can't delete it when the parameter group is in this state.
    func deleteDBClusterParameterGroup(input: DeleteDBClusterParameterGroupInput) async throws -> DeleteDBClusterParameterGroupOutput
    /// Performs the `DeleteDBClusterSnapshot` operation on the `AmazonRDSv19` service.
    ///
    /// Deletes a cluster snapshot. If the snapshot is being copied, the copy operation is terminated. The cluster snapshot must be in the available state to be deleted.
    ///
    /// - Parameter DeleteDBClusterSnapshotInput : Represents the input to [DeleteDBClusterSnapshot].
    ///
    /// - Returns: `DeleteDBClusterSnapshotOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterSnapshotNotFoundFault` : DBClusterSnapshotIdentifier doesn't refer to an existing cluster snapshot.
    /// - `InvalidDBClusterSnapshotStateFault` : The provided value isn't a valid cluster snapshot state.
    func deleteDBClusterSnapshot(input: DeleteDBClusterSnapshotInput) async throws -> DeleteDBClusterSnapshotOutput
    /// Performs the `DeleteDBInstance` operation on the `AmazonRDSv19` service.
    ///
    /// Deletes a previously provisioned instance.
    ///
    /// - Parameter DeleteDBInstanceInput : Represents the input to [DeleteDBInstance].
    ///
    /// - Returns: `DeleteDBInstanceOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBInstanceNotFoundFault` : DBInstanceIdentifier doesn't refer to an existing instance.
    /// - `DBSnapshotAlreadyExistsFault` : DBSnapshotIdentifier is already being used by an existing snapshot.
    /// - `InvalidDBClusterStateFault` : The cluster isn't in a valid state.
    /// - `InvalidDBInstanceStateFault` : The specified instance isn't in the available state.
    /// - `SnapshotQuotaExceededFault` : The request would cause you to exceed the allowed number of snapshots.
    func deleteDBInstance(input: DeleteDBInstanceInput) async throws -> DeleteDBInstanceOutput
    /// Performs the `DeleteDBSubnetGroup` operation on the `AmazonRDSv19` service.
    ///
    /// Deletes a subnet group. The specified database subnet group must not be associated with any DB instances.
    ///
    /// - Parameter DeleteDBSubnetGroupInput : Represents the input to [DeleteDBSubnetGroup].
    ///
    /// - Returns: `DeleteDBSubnetGroupOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBSubnetGroupNotFoundFault` : DBSubnetGroupName doesn't refer to an existing subnet group.
    /// - `InvalidDBSubnetGroupStateFault` : The subnet group can't be deleted because it's in use.
    /// - `InvalidDBSubnetStateFault` : The subnet isn't in the available state.
    func deleteDBSubnetGroup(input: DeleteDBSubnetGroupInput) async throws -> DeleteDBSubnetGroupOutput
    /// Performs the `DeleteEventSubscription` operation on the `AmazonRDSv19` service.
    ///
    /// Deletes an Amazon DocumentDB event notification subscription.
    ///
    /// - Parameter DeleteEventSubscriptionInput : Represents the input to [DeleteEventSubscription].
    ///
    /// - Returns: `DeleteEventSubscriptionOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `InvalidEventSubscriptionStateFault` : Someone else might be modifying a subscription. Wait a few seconds, and try again.
    /// - `SubscriptionNotFoundFault` : The subscription name does not exist.
    func deleteEventSubscription(input: DeleteEventSubscriptionInput) async throws -> DeleteEventSubscriptionOutput
    /// Performs the `DeleteGlobalCluster` operation on the `AmazonRDSv19` service.
    ///
    /// Deletes a global cluster. The primary and secondary clusters must already be detached or deleted before attempting to delete a global cluster. This action only applies to Amazon DocumentDB clusters.
    ///
    /// - Parameter DeleteGlobalClusterInput : Represents the input to [DeleteGlobalCluster].
    ///
    /// - Returns: `DeleteGlobalClusterOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `GlobalClusterNotFoundFault` : The GlobalClusterIdentifier doesn't refer to an existing global cluster.
    /// - `InvalidGlobalClusterStateFault` : The requested operation can't be performed while the cluster is in this state.
    func deleteGlobalCluster(input: DeleteGlobalClusterInput) async throws -> DeleteGlobalClusterOutput
    /// Performs the `DescribeCertificates` operation on the `AmazonRDSv19` service.
    ///
    /// Returns a list of certificate authority (CA) certificates provided by Amazon DocumentDB for this Amazon Web Services account.
    ///
    /// - Parameter DescribeCertificatesInput : [no documentation found]
    ///
    /// - Returns: `DescribeCertificatesOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `CertificateNotFoundFault` : CertificateIdentifier doesn't refer to an existing certificate.
    func describeCertificates(input: DescribeCertificatesInput) async throws -> DescribeCertificatesOutput
    /// Performs the `DescribeDBClusterParameterGroups` operation on the `AmazonRDSv19` service.
    ///
    /// Returns a list of DBClusterParameterGroup descriptions. If a DBClusterParameterGroupName parameter is specified, the list contains only the description of the specified cluster parameter group.
    ///
    /// - Parameter DescribeDBClusterParameterGroupsInput : Represents the input to [DescribeDBClusterParameterGroups].
    ///
    /// - Returns: `DescribeDBClusterParameterGroupsOutput` : Represents the output of [DBClusterParameterGroups].
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBParameterGroupNotFoundFault` : DBParameterGroupName doesn't refer to an existing parameter group.
    func describeDBClusterParameterGroups(input: DescribeDBClusterParameterGroupsInput) async throws -> DescribeDBClusterParameterGroupsOutput
    /// Performs the `DescribeDBClusterParameters` operation on the `AmazonRDSv19` service.
    ///
    /// Returns the detailed parameter list for a particular cluster parameter group.
    ///
    /// - Parameter DescribeDBClusterParametersInput : Represents the input to [DescribeDBClusterParameters].
    ///
    /// - Returns: `DescribeDBClusterParametersOutput` : Represents the output of [DBClusterParameterGroup].
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBParameterGroupNotFoundFault` : DBParameterGroupName doesn't refer to an existing parameter group.
    func describeDBClusterParameters(input: DescribeDBClusterParametersInput) async throws -> DescribeDBClusterParametersOutput
    /// Performs the `DescribeDBClusters` operation on the `AmazonRDSv19` service.
    ///
    /// Returns information about provisioned Amazon DocumentDB clusters. This API operation supports pagination. For certain management features such as cluster and instance lifecycle management, Amazon DocumentDB leverages operational technology that is shared with Amazon RDS and Amazon Neptune. Use the filterName=engine,Values=docdb filter parameter to return only Amazon DocumentDB clusters.
    ///
    /// - Parameter DescribeDBClustersInput : Represents the input to [DescribeDBClusters].
    ///
    /// - Returns: `DescribeDBClustersOutput` : Represents the output of [DescribeDBClusters].
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterNotFoundFault` : DBClusterIdentifier doesn't refer to an existing cluster.
    func describeDBClusters(input: DescribeDBClustersInput) async throws -> DescribeDBClustersOutput
    /// Performs the `DescribeDBClusterSnapshotAttributes` operation on the `AmazonRDSv19` service.
    ///
    /// Returns a list of cluster snapshot attribute names and values for a manual DB cluster snapshot. When you share snapshots with other Amazon Web Services accounts, DescribeDBClusterSnapshotAttributes returns the restore attribute and a list of IDs for the Amazon Web Services accounts that are authorized to copy or restore the manual cluster snapshot. If all is included in the list of values for the restore attribute, then the manual cluster snapshot is public and can be copied or restored by all Amazon Web Services accounts.
    ///
    /// - Parameter DescribeDBClusterSnapshotAttributesInput : Represents the input to [DescribeDBClusterSnapshotAttributes].
    ///
    /// - Returns: `DescribeDBClusterSnapshotAttributesOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterSnapshotNotFoundFault` : DBClusterSnapshotIdentifier doesn't refer to an existing cluster snapshot.
    func describeDBClusterSnapshotAttributes(input: DescribeDBClusterSnapshotAttributesInput) async throws -> DescribeDBClusterSnapshotAttributesOutput
    /// Performs the `DescribeDBClusterSnapshots` operation on the `AmazonRDSv19` service.
    ///
    /// Returns information about cluster snapshots. This API operation supports pagination.
    ///
    /// - Parameter DescribeDBClusterSnapshotsInput : Represents the input to [DescribeDBClusterSnapshots].
    ///
    /// - Returns: `DescribeDBClusterSnapshotsOutput` : Represents the output of [DescribeDBClusterSnapshots].
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterSnapshotNotFoundFault` : DBClusterSnapshotIdentifier doesn't refer to an existing cluster snapshot.
    func describeDBClusterSnapshots(input: DescribeDBClusterSnapshotsInput) async throws -> DescribeDBClusterSnapshotsOutput
    /// Performs the `DescribeDBEngineVersions` operation on the `AmazonRDSv19` service.
    ///
    /// Returns a list of the available engines.
    ///
    /// - Parameter DescribeDBEngineVersionsInput : Represents the input to [DescribeDBEngineVersions].
    ///
    /// - Returns: `DescribeDBEngineVersionsOutput` : Represents the output of [DescribeDBEngineVersions].
    func describeDBEngineVersions(input: DescribeDBEngineVersionsInput) async throws -> DescribeDBEngineVersionsOutput
    /// Performs the `DescribeDBInstances` operation on the `AmazonRDSv19` service.
    ///
    /// Returns information about provisioned Amazon DocumentDB instances. This API supports pagination.
    ///
    /// - Parameter DescribeDBInstancesInput : Represents the input to [DescribeDBInstances].
    ///
    /// - Returns: `DescribeDBInstancesOutput` : Represents the output of [DescribeDBInstances].
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBInstanceNotFoundFault` : DBInstanceIdentifier doesn't refer to an existing instance.
    func describeDBInstances(input: DescribeDBInstancesInput) async throws -> DescribeDBInstancesOutput
    /// Performs the `DescribeDBSubnetGroups` operation on the `AmazonRDSv19` service.
    ///
    /// Returns a list of DBSubnetGroup descriptions. If a DBSubnetGroupName is specified, the list will contain only the descriptions of the specified DBSubnetGroup.
    ///
    /// - Parameter DescribeDBSubnetGroupsInput : Represents the input to [DescribeDBSubnetGroups].
    ///
    /// - Returns: `DescribeDBSubnetGroupsOutput` : Represents the output of [DescribeDBSubnetGroups].
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBSubnetGroupNotFoundFault` : DBSubnetGroupName doesn't refer to an existing subnet group.
    func describeDBSubnetGroups(input: DescribeDBSubnetGroupsInput) async throws -> DescribeDBSubnetGroupsOutput
    /// Performs the `DescribeEngineDefaultClusterParameters` operation on the `AmazonRDSv19` service.
    ///
    /// Returns the default engine and system parameter information for the cluster database engine.
    ///
    /// - Parameter DescribeEngineDefaultClusterParametersInput : Represents the input to [DescribeEngineDefaultClusterParameters].
    ///
    /// - Returns: `DescribeEngineDefaultClusterParametersOutput` : [no documentation found]
    func describeEngineDefaultClusterParameters(input: DescribeEngineDefaultClusterParametersInput) async throws -> DescribeEngineDefaultClusterParametersOutput
    /// Performs the `DescribeEventCategories` operation on the `AmazonRDSv19` service.
    ///
    /// Displays a list of categories for all event source types, or, if specified, for a specified source type.
    ///
    /// - Parameter DescribeEventCategoriesInput : Represents the input to [DescribeEventCategories].
    ///
    /// - Returns: `DescribeEventCategoriesOutput` : Represents the output of [DescribeEventCategories].
    func describeEventCategories(input: DescribeEventCategoriesInput) async throws -> DescribeEventCategoriesOutput
    /// Performs the `DescribeEvents` operation on the `AmazonRDSv19` service.
    ///
    /// Returns events related to instances, security groups, snapshots, and DB parameter groups for the past 14 days. You can obtain events specific to a particular DB instance, security group, snapshot, or parameter group by providing the name as a parameter. By default, the events of the past hour are returned.
    ///
    /// - Parameter DescribeEventsInput : Represents the input to [DescribeEvents].
    ///
    /// - Returns: `DescribeEventsOutput` : Represents the output of [DescribeEvents].
    func describeEvents(input: DescribeEventsInput) async throws -> DescribeEventsOutput
    /// Performs the `DescribeEventSubscriptions` operation on the `AmazonRDSv19` service.
    ///
    /// Lists all the subscription descriptions for a customer account. The description for a subscription includes SubscriptionName, SNSTopicARN, CustomerID, SourceType, SourceID, CreationTime, and Status. If you specify a SubscriptionName, lists the description for that subscription.
    ///
    /// - Parameter DescribeEventSubscriptionsInput : Represents the input to [DescribeEventSubscriptions].
    ///
    /// - Returns: `DescribeEventSubscriptionsOutput` : Represents the output of [DescribeEventSubscriptions].
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `SubscriptionNotFoundFault` : The subscription name does not exist.
    func describeEventSubscriptions(input: DescribeEventSubscriptionsInput) async throws -> DescribeEventSubscriptionsOutput
    /// Performs the `DescribeGlobalClusters` operation on the `AmazonRDSv19` service.
    ///
    /// Returns information about Amazon DocumentDB global clusters. This API supports pagination. This action only applies to Amazon DocumentDB clusters.
    ///
    /// - Parameter DescribeGlobalClustersInput : [no documentation found]
    ///
    /// - Returns: `DescribeGlobalClustersOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `GlobalClusterNotFoundFault` : The GlobalClusterIdentifier doesn't refer to an existing global cluster.
    func describeGlobalClusters(input: DescribeGlobalClustersInput) async throws -> DescribeGlobalClustersOutput
    /// Performs the `DescribeOrderableDBInstanceOptions` operation on the `AmazonRDSv19` service.
    ///
    /// Returns a list of orderable instance options for the specified engine.
    ///
    /// - Parameter DescribeOrderableDBInstanceOptionsInput : Represents the input to [DescribeOrderableDBInstanceOptions].
    ///
    /// - Returns: `DescribeOrderableDBInstanceOptionsOutput` : Represents the output of [DescribeOrderableDBInstanceOptions].
    func describeOrderableDBInstanceOptions(input: DescribeOrderableDBInstanceOptionsInput) async throws -> DescribeOrderableDBInstanceOptionsOutput
    /// Performs the `DescribePendingMaintenanceActions` operation on the `AmazonRDSv19` service.
    ///
    /// Returns a list of resources (for example, instances) that have at least one pending maintenance action.
    ///
    /// - Parameter DescribePendingMaintenanceActionsInput : Represents the input to [DescribePendingMaintenanceActions].
    ///
    /// - Returns: `DescribePendingMaintenanceActionsOutput` : Represents the output of [DescribePendingMaintenanceActions].
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `ResourceNotFoundFault` : The specified resource ID was not found.
    func describePendingMaintenanceActions(input: DescribePendingMaintenanceActionsInput) async throws -> DescribePendingMaintenanceActionsOutput
    /// Performs the `FailoverDBCluster` operation on the `AmazonRDSv19` service.
    ///
    /// Forces a failover for a cluster. A failover for a cluster promotes one of the Amazon DocumentDB replicas (read-only instances) in the cluster to be the primary instance (the cluster writer). If the primary instance fails, Amazon DocumentDB automatically fails over to an Amazon DocumentDB replica, if one exists. You can force a failover when you want to simulate a failure of a primary instance for testing.
    ///
    /// - Parameter FailoverDBClusterInput : Represents the input to [FailoverDBCluster].
    ///
    /// - Returns: `FailoverDBClusterOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterNotFoundFault` : DBClusterIdentifier doesn't refer to an existing cluster.
    /// - `InvalidDBClusterStateFault` : The cluster isn't in a valid state.
    /// - `InvalidDBInstanceStateFault` : The specified instance isn't in the available state.
    func failoverDBCluster(input: FailoverDBClusterInput) async throws -> FailoverDBClusterOutput
    /// Performs the `ListTagsForResource` operation on the `AmazonRDSv19` service.
    ///
    /// Lists all tags on an Amazon DocumentDB resource.
    ///
    /// - Parameter ListTagsForResourceInput : Represents the input to [ListTagsForResource].
    ///
    /// - Returns: `ListTagsForResourceOutput` : Represents the output of [ListTagsForResource].
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterNotFoundFault` : DBClusterIdentifier doesn't refer to an existing cluster.
    /// - `DBInstanceNotFoundFault` : DBInstanceIdentifier doesn't refer to an existing instance.
    /// - `DBSnapshotNotFoundFault` : DBSnapshotIdentifier doesn't refer to an existing snapshot.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutput
    /// Performs the `ModifyDBCluster` operation on the `AmazonRDSv19` service.
    ///
    /// Modifies a setting for an Amazon DocumentDB cluster. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
    ///
    /// - Parameter ModifyDBClusterInput : Represents the input to [ModifyDBCluster].
    ///
    /// - Returns: `ModifyDBClusterOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterAlreadyExistsFault` : You already have a cluster with the given identifier.
    /// - `DBClusterNotFoundFault` : DBClusterIdentifier doesn't refer to an existing cluster.
    /// - `DBClusterParameterGroupNotFoundFault` : DBClusterParameterGroupName doesn't refer to an existing cluster parameter group.
    /// - `DBSubnetGroupNotFoundFault` : DBSubnetGroupName doesn't refer to an existing subnet group.
    /// - `InvalidDBClusterStateFault` : The cluster isn't in a valid state.
    /// - `InvalidDBInstanceStateFault` : The specified instance isn't in the available state.
    /// - `InvalidDBSecurityGroupStateFault` : The state of the security group doesn't allow deletion.
    /// - `InvalidDBSubnetGroupStateFault` : The subnet group can't be deleted because it's in use.
    /// - `InvalidSubnet` : The requested subnet is not valid, or multiple subnets were requested that are not all in a common virtual private cloud (VPC).
    /// - `InvalidVPCNetworkStateFault` : The subnet group doesn't cover all Availability Zones after it is created because of changes that were made.
    /// - `StorageQuotaExceededFault` : The request would cause you to exceed the allowed amount of storage available across all instances.
    func modifyDBCluster(input: ModifyDBClusterInput) async throws -> ModifyDBClusterOutput
    /// Performs the `ModifyDBClusterParameterGroup` operation on the `AmazonRDSv19` service.
    ///
    /// Modifies the parameters of a cluster parameter group. To modify more than one parameter, submit a list of the following: ParameterName, ParameterValue, and ApplyMethod. A maximum of 20 parameters can be modified in a single request. Changes to dynamic parameters are applied immediately. Changes to static parameters require a reboot or maintenance window before the change can take effect. After you create a cluster parameter group, you should wait at least 5 minutes before creating your first cluster that uses that cluster parameter group as the default parameter group. This allows Amazon DocumentDB to fully complete the create action before the parameter group is used as the default for a new cluster. This step is especially important for parameters that are critical when creating the default database for a cluster, such as the character set for the default database defined by the character_set_database parameter.
    ///
    /// - Parameter ModifyDBClusterParameterGroupInput : Represents the input to [ModifyDBClusterParameterGroup].
    ///
    /// - Returns: `ModifyDBClusterParameterGroupOutput` : Contains the name of a cluster parameter group.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBParameterGroupNotFoundFault` : DBParameterGroupName doesn't refer to an existing parameter group.
    /// - `InvalidDBParameterGroupStateFault` : The parameter group is in use, or it is in a state that is not valid. If you are trying to delete the parameter group, you can't delete it when the parameter group is in this state.
    func modifyDBClusterParameterGroup(input: ModifyDBClusterParameterGroupInput) async throws -> ModifyDBClusterParameterGroupOutput
    /// Performs the `ModifyDBClusterSnapshotAttribute` operation on the `AmazonRDSv19` service.
    ///
    /// Adds an attribute and values to, or removes an attribute and values from, a manual cluster snapshot. To share a manual cluster snapshot with other Amazon Web Services accounts, specify restore as the AttributeName, and use the ValuesToAdd parameter to add a list of IDs of the Amazon Web Services accounts that are authorized to restore the manual cluster snapshot. Use the value all to make the manual cluster snapshot public, which means that it can be copied or restored by all Amazon Web Services accounts. Do not add the all value for any manual cluster snapshots that contain private information that you don't want available to all Amazon Web Services accounts. If a manual cluster snapshot is encrypted, it can be shared, but only by specifying a list of authorized Amazon Web Services account IDs for the ValuesToAdd parameter. You can't use all as a value for that parameter in this case.
    ///
    /// - Parameter ModifyDBClusterSnapshotAttributeInput : Represents the input to [ModifyDBClusterSnapshotAttribute].
    ///
    /// - Returns: `ModifyDBClusterSnapshotAttributeOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterSnapshotNotFoundFault` : DBClusterSnapshotIdentifier doesn't refer to an existing cluster snapshot.
    /// - `InvalidDBClusterSnapshotStateFault` : The provided value isn't a valid cluster snapshot state.
    /// - `SharedSnapshotQuotaExceededFault` : You have exceeded the maximum number of accounts that you can share a manual DB snapshot with.
    func modifyDBClusterSnapshotAttribute(input: ModifyDBClusterSnapshotAttributeInput) async throws -> ModifyDBClusterSnapshotAttributeOutput
    /// Performs the `ModifyDBInstance` operation on the `AmazonRDSv19` service.
    ///
    /// Modifies settings for an instance. You can change one or more database configuration parameters by specifying these parameters and the new values in the request.
    ///
    /// - Parameter ModifyDBInstanceInput : Represents the input to [ModifyDBInstance].
    ///
    /// - Returns: `ModifyDBInstanceOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `AuthorizationNotFoundFault` : The specified CIDR IP or Amazon EC2 security group isn't authorized for the specified security group. Amazon DocumentDB also might not be authorized to perform necessary actions on your behalf using IAM.
    /// - `CertificateNotFoundFault` : CertificateIdentifier doesn't refer to an existing certificate.
    /// - `DBInstanceAlreadyExistsFault` : You already have a instance with the given identifier.
    /// - `DBInstanceNotFoundFault` : DBInstanceIdentifier doesn't refer to an existing instance.
    /// - `DBParameterGroupNotFoundFault` : DBParameterGroupName doesn't refer to an existing parameter group.
    /// - `DBSecurityGroupNotFoundFault` : DBSecurityGroupName doesn't refer to an existing security group.
    /// - `DBUpgradeDependencyFailureFault` : The upgrade failed because a resource that the depends on can't be modified.
    /// - `InsufficientDBInstanceCapacityFault` : The specified instance class isn't available in the specified Availability Zone.
    /// - `InvalidDBInstanceStateFault` : The specified instance isn't in the available state.
    /// - `InvalidDBSecurityGroupStateFault` : The state of the security group doesn't allow deletion.
    /// - `InvalidVPCNetworkStateFault` : The subnet group doesn't cover all Availability Zones after it is created because of changes that were made.
    /// - `StorageQuotaExceededFault` : The request would cause you to exceed the allowed amount of storage available across all instances.
    /// - `StorageTypeNotSupportedFault` : Storage of the specified StorageType can't be associated with the DB instance.
    func modifyDBInstance(input: ModifyDBInstanceInput) async throws -> ModifyDBInstanceOutput
    /// Performs the `ModifyDBSubnetGroup` operation on the `AmazonRDSv19` service.
    ///
    /// Modifies an existing subnet group. subnet groups must contain at least one subnet in at least two Availability Zones in the Amazon Web Services Region.
    ///
    /// - Parameter ModifyDBSubnetGroupInput : Represents the input to [ModifyDBSubnetGroup].
    ///
    /// - Returns: `ModifyDBSubnetGroupOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBSubnetGroupDoesNotCoverEnoughAZs` : Subnets in the subnet group should cover at least two Availability Zones unless there is only one Availability Zone.
    /// - `DBSubnetGroupNotFoundFault` : DBSubnetGroupName doesn't refer to an existing subnet group.
    /// - `DBSubnetQuotaExceededFault` : The request would cause you to exceed the allowed number of subnets in a subnet group.
    /// - `InvalidSubnet` : The requested subnet is not valid, or multiple subnets were requested that are not all in a common virtual private cloud (VPC).
    /// - `SubnetAlreadyInUse` : The subnet is already in use in the Availability Zone.
    func modifyDBSubnetGroup(input: ModifyDBSubnetGroupInput) async throws -> ModifyDBSubnetGroupOutput
    /// Performs the `ModifyEventSubscription` operation on the `AmazonRDSv19` service.
    ///
    /// Modifies an existing Amazon DocumentDB event notification subscription.
    ///
    /// - Parameter ModifyEventSubscriptionInput : Represents the input to [ModifyEventSubscription].
    ///
    /// - Returns: `ModifyEventSubscriptionOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `EventSubscriptionQuotaExceededFault` : You have reached the maximum number of event subscriptions.
    /// - `SNSInvalidTopicFault` : Amazon SNS has responded that there is a problem with the specified topic.
    /// - `SNSNoAuthorizationFault` : You do not have permission to publish to the SNS topic Amazon Resource Name (ARN).
    /// - `SNSTopicArnNotFoundFault` : The SNS topic Amazon Resource Name (ARN) does not exist.
    /// - `SubscriptionCategoryNotFoundFault` : The provided category does not exist.
    /// - `SubscriptionNotFoundFault` : The subscription name does not exist.
    func modifyEventSubscription(input: ModifyEventSubscriptionInput) async throws -> ModifyEventSubscriptionOutput
    /// Performs the `ModifyGlobalCluster` operation on the `AmazonRDSv19` service.
    ///
    /// Modify a setting for an Amazon DocumentDB global cluster. You can change one or more configuration parameters (for example: deletion protection), or the global cluster identifier by specifying these parameters and the new values in the request. This action only applies to Amazon DocumentDB clusters.
    ///
    /// - Parameter ModifyGlobalClusterInput : Represents the input to [ModifyGlobalCluster].
    ///
    /// - Returns: `ModifyGlobalClusterOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `GlobalClusterNotFoundFault` : The GlobalClusterIdentifier doesn't refer to an existing global cluster.
    /// - `InvalidGlobalClusterStateFault` : The requested operation can't be performed while the cluster is in this state.
    func modifyGlobalCluster(input: ModifyGlobalClusterInput) async throws -> ModifyGlobalClusterOutput
    /// Performs the `RebootDBInstance` operation on the `AmazonRDSv19` service.
    ///
    /// You might need to reboot your instance, usually for maintenance reasons. For example, if you make certain changes, or if you change the cluster parameter group that is associated with the instance, you must reboot the instance for the changes to take effect. Rebooting an instance restarts the database engine service. Rebooting an instance results in a momentary outage, during which the instance status is set to rebooting.
    ///
    /// - Parameter RebootDBInstanceInput : Represents the input to [RebootDBInstance].
    ///
    /// - Returns: `RebootDBInstanceOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBInstanceNotFoundFault` : DBInstanceIdentifier doesn't refer to an existing instance.
    /// - `InvalidDBInstanceStateFault` : The specified instance isn't in the available state.
    func rebootDBInstance(input: RebootDBInstanceInput) async throws -> RebootDBInstanceOutput
    /// Performs the `RemoveFromGlobalCluster` operation on the `AmazonRDSv19` service.
    ///
    /// Detaches an Amazon DocumentDB secondary cluster from a global cluster. The cluster becomes a standalone cluster with read-write capability instead of being read-only and receiving data from a primary in a different region. This action only applies to Amazon DocumentDB clusters.
    ///
    /// - Parameter RemoveFromGlobalClusterInput : Represents the input to [RemoveFromGlobalCluster].
    ///
    /// - Returns: `RemoveFromGlobalClusterOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterNotFoundFault` : DBClusterIdentifier doesn't refer to an existing cluster.
    /// - `GlobalClusterNotFoundFault` : The GlobalClusterIdentifier doesn't refer to an existing global cluster.
    /// - `InvalidGlobalClusterStateFault` : The requested operation can't be performed while the cluster is in this state.
    func removeFromGlobalCluster(input: RemoveFromGlobalClusterInput) async throws -> RemoveFromGlobalClusterOutput
    /// Performs the `RemoveSourceIdentifierFromSubscription` operation on the `AmazonRDSv19` service.
    ///
    /// Removes a source identifier from an existing Amazon DocumentDB event notification subscription.
    ///
    /// - Parameter RemoveSourceIdentifierFromSubscriptionInput : Represents the input to [RemoveSourceIdentifierFromSubscription].
    ///
    /// - Returns: `RemoveSourceIdentifierFromSubscriptionOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `SourceNotFoundFault` : The requested source could not be found.
    /// - `SubscriptionNotFoundFault` : The subscription name does not exist.
    func removeSourceIdentifierFromSubscription(input: RemoveSourceIdentifierFromSubscriptionInput) async throws -> RemoveSourceIdentifierFromSubscriptionOutput
    /// Performs the `RemoveTagsFromResource` operation on the `AmazonRDSv19` service.
    ///
    /// Removes metadata tags from an Amazon DocumentDB resource.
    ///
    /// - Parameter RemoveTagsFromResourceInput : Represents the input to [RemoveTagsFromResource].
    ///
    /// - Returns: `RemoveTagsFromResourceOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterNotFoundFault` : DBClusterIdentifier doesn't refer to an existing cluster.
    /// - `DBInstanceNotFoundFault` : DBInstanceIdentifier doesn't refer to an existing instance.
    /// - `DBSnapshotNotFoundFault` : DBSnapshotIdentifier doesn't refer to an existing snapshot.
    func removeTagsFromResource(input: RemoveTagsFromResourceInput) async throws -> RemoveTagsFromResourceOutput
    /// Performs the `ResetDBClusterParameterGroup` operation on the `AmazonRDSv19` service.
    ///
    /// Modifies the parameters of a cluster parameter group to the default value. To reset specific parameters, submit a list of the following: ParameterName and ApplyMethod. To reset the entire cluster parameter group, specify the DBClusterParameterGroupName and ResetAllParameters parameters. When you reset the entire group, dynamic parameters are updated immediately and static parameters are set to pending-reboot to take effect on the next DB instance reboot.
    ///
    /// - Parameter ResetDBClusterParameterGroupInput : Represents the input to [ResetDBClusterParameterGroup].
    ///
    /// - Returns: `ResetDBClusterParameterGroupOutput` : Contains the name of a cluster parameter group.
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBParameterGroupNotFoundFault` : DBParameterGroupName doesn't refer to an existing parameter group.
    /// - `InvalidDBParameterGroupStateFault` : The parameter group is in use, or it is in a state that is not valid. If you are trying to delete the parameter group, you can't delete it when the parameter group is in this state.
    func resetDBClusterParameterGroup(input: ResetDBClusterParameterGroupInput) async throws -> ResetDBClusterParameterGroupOutput
    /// Performs the `RestoreDBClusterFromSnapshot` operation on the `AmazonRDSv19` service.
    ///
    /// Creates a new cluster from a snapshot or cluster snapshot. If a snapshot is specified, the target cluster is created from the source DB snapshot with a default configuration and default security group. If a cluster snapshot is specified, the target cluster is created from the source cluster restore point with the same configuration as the original source DB cluster, except that the new cluster is created with the default security group.
    ///
    /// - Parameter RestoreDBClusterFromSnapshotInput : Represents the input to [RestoreDBClusterFromSnapshot].
    ///
    /// - Returns: `RestoreDBClusterFromSnapshotOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterAlreadyExistsFault` : You already have a cluster with the given identifier.
    /// - `DBClusterQuotaExceededFault` : The cluster can't be created because you have reached the maximum allowed quota of clusters.
    /// - `DBClusterSnapshotNotFoundFault` : DBClusterSnapshotIdentifier doesn't refer to an existing cluster snapshot.
    /// - `DBSnapshotNotFoundFault` : DBSnapshotIdentifier doesn't refer to an existing snapshot.
    /// - `DBSubnetGroupNotFoundFault` : DBSubnetGroupName doesn't refer to an existing subnet group.
    /// - `InsufficientDBClusterCapacityFault` : The cluster doesn't have enough capacity for the current operation.
    /// - `InsufficientStorageClusterCapacityFault` : There is not enough storage available for the current action. You might be able to resolve this error by updating your subnet group to use different Availability Zones that have more storage available.
    /// - `InvalidDBClusterSnapshotStateFault` : The provided value isn't a valid cluster snapshot state.
    /// - `InvalidDBSnapshotStateFault` : The state of the snapshot doesn't allow deletion.
    /// - `InvalidRestoreFault` : You cannot restore from a virtual private cloud (VPC) backup to a non-VPC DB instance.
    /// - `InvalidSubnet` : The requested subnet is not valid, or multiple subnets were requested that are not all in a common virtual private cloud (VPC).
    /// - `InvalidVPCNetworkStateFault` : The subnet group doesn't cover all Availability Zones after it is created because of changes that were made.
    /// - `KMSKeyNotAccessibleFault` : An error occurred when accessing an KMS key.
    /// - `StorageQuotaExceededFault` : The request would cause you to exceed the allowed amount of storage available across all instances.
    func restoreDBClusterFromSnapshot(input: RestoreDBClusterFromSnapshotInput) async throws -> RestoreDBClusterFromSnapshotOutput
    /// Performs the `RestoreDBClusterToPointInTime` operation on the `AmazonRDSv19` service.
    ///
    /// Restores a cluster to an arbitrary point in time. Users can restore to any point in time before LatestRestorableTime for up to BackupRetentionPeriod days. The target cluster is created from the source cluster with the same configuration as the original cluster, except that the new cluster is created with the default security group.
    ///
    /// - Parameter RestoreDBClusterToPointInTimeInput : Represents the input to [RestoreDBClusterToPointInTime].
    ///
    /// - Returns: `RestoreDBClusterToPointInTimeOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterAlreadyExistsFault` : You already have a cluster with the given identifier.
    /// - `DBClusterNotFoundFault` : DBClusterIdentifier doesn't refer to an existing cluster.
    /// - `DBClusterQuotaExceededFault` : The cluster can't be created because you have reached the maximum allowed quota of clusters.
    /// - `DBClusterSnapshotNotFoundFault` : DBClusterSnapshotIdentifier doesn't refer to an existing cluster snapshot.
    /// - `DBSubnetGroupNotFoundFault` : DBSubnetGroupName doesn't refer to an existing subnet group.
    /// - `InsufficientDBClusterCapacityFault` : The cluster doesn't have enough capacity for the current operation.
    /// - `InsufficientStorageClusterCapacityFault` : There is not enough storage available for the current action. You might be able to resolve this error by updating your subnet group to use different Availability Zones that have more storage available.
    /// - `InvalidDBClusterSnapshotStateFault` : The provided value isn't a valid cluster snapshot state.
    /// - `InvalidDBClusterStateFault` : The cluster isn't in a valid state.
    /// - `InvalidDBSnapshotStateFault` : The state of the snapshot doesn't allow deletion.
    /// - `InvalidRestoreFault` : You cannot restore from a virtual private cloud (VPC) backup to a non-VPC DB instance.
    /// - `InvalidSubnet` : The requested subnet is not valid, or multiple subnets were requested that are not all in a common virtual private cloud (VPC).
    /// - `InvalidVPCNetworkStateFault` : The subnet group doesn't cover all Availability Zones after it is created because of changes that were made.
    /// - `KMSKeyNotAccessibleFault` : An error occurred when accessing an KMS key.
    /// - `StorageQuotaExceededFault` : The request would cause you to exceed the allowed amount of storage available across all instances.
    func restoreDBClusterToPointInTime(input: RestoreDBClusterToPointInTimeInput) async throws -> RestoreDBClusterToPointInTimeOutput
    /// Performs the `StartDBCluster` operation on the `AmazonRDSv19` service.
    ///
    /// Restarts the stopped cluster that is specified by DBClusterIdentifier. For more information, see [Stopping and Starting an Amazon DocumentDB Cluster](https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html).
    ///
    /// - Parameter StartDBClusterInput : [no documentation found]
    ///
    /// - Returns: `StartDBClusterOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterNotFoundFault` : DBClusterIdentifier doesn't refer to an existing cluster.
    /// - `InvalidDBClusterStateFault` : The cluster isn't in a valid state.
    /// - `InvalidDBInstanceStateFault` : The specified instance isn't in the available state.
    func startDBCluster(input: StartDBClusterInput) async throws -> StartDBClusterOutput
    /// Performs the `StopDBCluster` operation on the `AmazonRDSv19` service.
    ///
    /// Stops the running cluster that is specified by DBClusterIdentifier. The cluster must be in the available state. For more information, see [Stopping and Starting an Amazon DocumentDB Cluster](https://docs.aws.amazon.com/documentdb/latest/developerguide/db-cluster-stop-start.html).
    ///
    /// - Parameter StopDBClusterInput : [no documentation found]
    ///
    /// - Returns: `StopDBClusterOutput` : [no documentation found]
    ///
    /// - Throws: One of the exceptions listed below __Possible Exceptions__.
    ///
    /// __Possible Exceptions:__
    /// - `DBClusterNotFoundFault` : DBClusterIdentifier doesn't refer to an existing cluster.
    /// - `InvalidDBClusterStateFault` : The cluster isn't in a valid state.
    /// - `InvalidDBInstanceStateFault` : The specified instance isn't in the available state.
    func stopDBCluster(input: StopDBClusterInput) async throws -> StopDBClusterOutput
}

public enum DocDBClientTypes {}
