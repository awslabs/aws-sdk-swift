//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem


public struct DeleteAppInstanceAdminOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteAppInstanceBotOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteAppInstanceOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteAppInstanceUserOutput: Swift.Sendable {

    public init() { }
}

public struct DeregisterAppInstanceUserEndpointOutput: Swift.Sendable {

    public init() { }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

extension ChimeSDKIdentityClientTypes {

    public enum AllowMessages: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [AllowMessages] {
            return [
                .all,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKIdentityClientTypes {

    /// The details of an AppInstance, an instance of an Amazon Chime SDK messaging application.
    public struct AppInstance: Swift.Sendable {
        /// The ARN of the messaging instance.
        public var appInstanceArn: Swift.String?
        /// The time at which an AppInstance was created. In epoch milliseconds.
        public var createdTimestamp: Foundation.Date?
        /// The time an AppInstance was last updated. In epoch milliseconds.
        public var lastUpdatedTimestamp: Foundation.Date?
        /// The metadata of an AppInstance.
        public var metadata: Swift.String?
        /// The name of an AppInstance.
        public var name: Swift.String?

        public init(
            appInstanceArn: Swift.String? = nil,
            createdTimestamp: Foundation.Date? = nil,
            lastUpdatedTimestamp: Foundation.Date? = nil,
            metadata: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.appInstanceArn = appInstanceArn
            self.createdTimestamp = createdTimestamp
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.metadata = metadata
            self.name = name
        }
    }
}

extension ChimeSDKIdentityClientTypes.AppInstance: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AppInstance(appInstanceArn: \(Swift.String(describing: appInstanceArn)), createdTimestamp: \(Swift.String(describing: createdTimestamp)), lastUpdatedTimestamp: \(Swift.String(describing: lastUpdatedTimestamp)), metadata: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKIdentityClientTypes {

    /// The details of a user or bot.
    public struct Identity: Swift.Sendable {
        /// The ARN in an Identity.
        public var arn: Swift.String?
        /// The name in an Identity.
        public var name: Swift.String?

        public init(
            arn: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.arn = arn
            self.name = name
        }
    }
}

extension ChimeSDKIdentityClientTypes.Identity: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Identity(arn: \(Swift.String(describing: arn)), name: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKIdentityClientTypes {

    /// The name and ARN of the admin for the AppInstance.
    public struct AppInstanceAdmin: Swift.Sendable {
        /// The AppInstanceAdmin data.
        public var admin: ChimeSDKIdentityClientTypes.Identity?
        /// The ARN of the AppInstance for which the user is an administrator.
        public var appInstanceArn: Swift.String?
        /// The time at which an administrator was created.
        public var createdTimestamp: Foundation.Date?

        public init(
            admin: ChimeSDKIdentityClientTypes.Identity? = nil,
            appInstanceArn: Swift.String? = nil,
            createdTimestamp: Foundation.Date? = nil
        )
        {
            self.admin = admin
            self.appInstanceArn = appInstanceArn
            self.createdTimestamp = createdTimestamp
        }
    }
}

extension ChimeSDKIdentityClientTypes {

    /// Summary of the details of an AppInstanceAdmin.
    public struct AppInstanceAdminSummary: Swift.Sendable {
        /// The details of the AppInstanceAdmin.
        public var admin: ChimeSDKIdentityClientTypes.Identity?

        public init(
            admin: ChimeSDKIdentityClientTypes.Identity? = nil
        )
        {
            self.admin = admin
        }
    }
}

extension ChimeSDKIdentityClientTypes {

    public enum StandardMessages: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case auto
        case mentions
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [StandardMessages] {
            return [
                .all,
                .auto,
                .mentions,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .auto: return "AUTO"
            case .mentions: return "MENTIONS"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKIdentityClientTypes {

    public enum TargetedMessages: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetedMessages] {
            return [
                .all,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKIdentityClientTypes {

    /// Specifies the type of message that triggers a bot.
    public struct InvokedBy: Swift.Sendable {
        /// Sets standard messages as the bot trigger. For standard messages:
        ///
        /// * ALL: The bot processes all standard messages.
        ///
        /// * AUTO: The bot responds to ALL messages when the channel has one other non-hidden member, and responds to MENTIONS when the channel has more than one other non-hidden member.
        ///
        /// * MENTIONS: The bot processes all standard messages that have a message attribute with CHIME.mentions and a value of the bot ARN.
        ///
        /// * NONE: The bot processes no standard messages.
        /// This member is required.
        public var standardMessages: ChimeSDKIdentityClientTypes.StandardMessages?
        /// Sets targeted messages as the bot trigger. For targeted messages:
        ///
        /// * ALL: The bot processes all TargetedMessages sent to it. The bot then responds with a targeted message back to the sender.
        ///
        /// * NONE: The bot processes no targeted messages.
        /// This member is required.
        public var targetedMessages: ChimeSDKIdentityClientTypes.TargetedMessages?

        public init(
            standardMessages: ChimeSDKIdentityClientTypes.StandardMessages? = nil,
            targetedMessages: ChimeSDKIdentityClientTypes.TargetedMessages? = nil
        )
        {
            self.standardMessages = standardMessages
            self.targetedMessages = targetedMessages
        }
    }
}

extension ChimeSDKIdentityClientTypes {

    public enum RespondsTo: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case standardMessages
        case sdkUnknown(Swift.String)

        public static var allCases: [RespondsTo] {
            return [
                .standardMessages
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .standardMessages: return "STANDARD_MESSAGES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKIdentityClientTypes {

    /// The configuration for an Amazon Lex V2 bot.
    public struct LexConfiguration: Swift.Sendable {
        /// Specifies the type of message that triggers a bot.
        public var invokedBy: ChimeSDKIdentityClientTypes.InvokedBy?
        /// The ARN of the Amazon Lex V2 bot's alias. The ARN uses this format: arn:aws:lex:REGION:ACCOUNT:bot-alias/MYBOTID/MYBOTALIAS
        /// This member is required.
        public var lexBotAliasArn: Swift.String?
        /// Identifies the Amazon Lex V2 bot's language and locale. The string must match one of the supported locales in Amazon Lex V2. All of the intents, slot types, and slots used in the bot must have the same locale. For more information, see [Supported languages](https://docs.aws.amazon.com/lexv2/latest/dg/how-languages.html) in the Amazon Lex V2 Developer Guide.
        /// This member is required.
        public var localeId: Swift.String?
        /// Deprecated. Use InvokedBy instead. Determines whether the Amazon Lex V2 bot responds to all standard messages. Control messages are not supported.
        public var respondsTo: ChimeSDKIdentityClientTypes.RespondsTo?
        /// The name of the welcome intent configured in the Amazon Lex V2 bot.
        public var welcomeIntent: Swift.String?

        public init(
            invokedBy: ChimeSDKIdentityClientTypes.InvokedBy? = nil,
            lexBotAliasArn: Swift.String? = nil,
            localeId: Swift.String? = nil,
            respondsTo: ChimeSDKIdentityClientTypes.RespondsTo? = nil,
            welcomeIntent: Swift.String? = nil
        )
        {
            self.invokedBy = invokedBy
            self.lexBotAliasArn = lexBotAliasArn
            self.localeId = localeId
            self.respondsTo = respondsTo
            self.welcomeIntent = welcomeIntent
        }
    }
}

extension ChimeSDKIdentityClientTypes {

    /// A structure that contains configuration data.
    public struct Configuration: Swift.Sendable {
        /// The configuration for an Amazon Lex V2 bot.
        /// This member is required.
        public var lex: ChimeSDKIdentityClientTypes.LexConfiguration?

        public init(
            lex: ChimeSDKIdentityClientTypes.LexConfiguration? = nil
        )
        {
            self.lex = lex
        }
    }
}

extension ChimeSDKIdentityClientTypes {

    /// An Amazon Lex V2 chat bot created under an AppInstance.
    public struct AppInstanceBot: Swift.Sendable {
        /// The ARN of the AppInstanceBot.
        public var appInstanceBotArn: Swift.String?
        /// The data processing instructions for an AppInstanceBot.
        public var configuration: ChimeSDKIdentityClientTypes.Configuration?
        /// The time at which the AppInstanceBot was created.
        public var createdTimestamp: Foundation.Date?
        /// The time at which the AppInstanceBot was last updated.
        public var lastUpdatedTimestamp: Foundation.Date?
        /// The metadata for an AppInstanceBot.
        public var metadata: Swift.String?
        /// The name of the AppInstanceBot.
        public var name: Swift.String?

        public init(
            appInstanceBotArn: Swift.String? = nil,
            configuration: ChimeSDKIdentityClientTypes.Configuration? = nil,
            createdTimestamp: Foundation.Date? = nil,
            lastUpdatedTimestamp: Foundation.Date? = nil,
            metadata: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.appInstanceBotArn = appInstanceBotArn
            self.configuration = configuration
            self.createdTimestamp = createdTimestamp
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.metadata = metadata
            self.name = name
        }
    }
}

extension ChimeSDKIdentityClientTypes.AppInstanceBot: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AppInstanceBot(appInstanceBotArn: \(Swift.String(describing: appInstanceBotArn)), configuration: \(Swift.String(describing: configuration)), createdTimestamp: \(Swift.String(describing: createdTimestamp)), lastUpdatedTimestamp: \(Swift.String(describing: lastUpdatedTimestamp)), metadata: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKIdentityClientTypes {

    /// High-level information about an AppInstanceBot.
    public struct AppInstanceBotSummary: Swift.Sendable {
        /// The ARN of the AppInstanceBot.
        public var appInstanceBotArn: Swift.String?
        /// The metadata of the AppInstanceBot.
        public var metadata: Swift.String?
        /// The name of the AppInstanceBox.
        public var name: Swift.String?

        public init(
            appInstanceBotArn: Swift.String? = nil,
            metadata: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.appInstanceBotArn = appInstanceBotArn
            self.metadata = metadata
            self.name = name
        }
    }
}

extension ChimeSDKIdentityClientTypes.AppInstanceBotSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AppInstanceBotSummary(appInstanceBotArn: \(Swift.String(describing: appInstanceBotArn)), metadata: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKIdentityClientTypes {

    /// Summary of the data for an AppInstance.
    public struct AppInstanceSummary: Swift.Sendable {
        /// The AppInstance ARN.
        public var appInstanceArn: Swift.String?
        /// The metadata of the AppInstance.
        public var metadata: Swift.String?
        /// The name of the AppInstance.
        public var name: Swift.String?

        public init(
            appInstanceArn: Swift.String? = nil,
            metadata: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.appInstanceArn = appInstanceArn
            self.metadata = metadata
            self.name = name
        }
    }
}

extension ChimeSDKIdentityClientTypes.AppInstanceSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AppInstanceSummary(appInstanceArn: \(Swift.String(describing: appInstanceArn)), metadata: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKIdentityClientTypes {

    /// The details of the retention settings for a channel.
    public struct ChannelRetentionSettings: Swift.Sendable {
        /// The time in days to retain the messages in a channel.
        public var retentionDays: Swift.Int?

        public init(
            retentionDays: Swift.Int? = nil
        )
        {
            self.retentionDays = retentionDays
        }
    }
}

extension ChimeSDKIdentityClientTypes {

    /// The details of the data-retention settings for an AppInstance.
    public struct AppInstanceRetentionSettings: Swift.Sendable {
        /// The length of time in days to retain the messages in a channel.
        public var channelRetentionSettings: ChimeSDKIdentityClientTypes.ChannelRetentionSettings?

        public init(
            channelRetentionSettings: ChimeSDKIdentityClientTypes.ChannelRetentionSettings? = nil
        )
        {
            self.channelRetentionSettings = channelRetentionSettings
        }
    }
}

extension ChimeSDKIdentityClientTypes {

    public enum ExpirationCriterion: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createdTimestamp
        case sdkUnknown(Swift.String)

        public static var allCases: [ExpirationCriterion] {
            return [
                .createdTimestamp
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createdTimestamp: return "CREATED_TIMESTAMP"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKIdentityClientTypes {

    /// Determines the interval after which an AppInstanceUser is automatically deleted.
    public struct ExpirationSettings: Swift.Sendable {
        /// Specifies the conditions under which an AppInstanceUser will expire.
        /// This member is required.
        public var expirationCriterion: ChimeSDKIdentityClientTypes.ExpirationCriterion?
        /// The period in days after which an AppInstanceUser will be automatically deleted.
        /// This member is required.
        public var expirationDays: Swift.Int?

        public init(
            expirationCriterion: ChimeSDKIdentityClientTypes.ExpirationCriterion? = nil,
            expirationDays: Swift.Int? = nil
        )
        {
            self.expirationCriterion = expirationCriterion
            self.expirationDays = expirationDays
        }
    }
}

extension ChimeSDKIdentityClientTypes {

    /// The details of an AppInstanceUser.
    public struct AppInstanceUser: Swift.Sendable {
        /// The ARN of the AppInstanceUser.
        public var appInstanceUserArn: Swift.String?
        /// The time at which the AppInstanceUser was created.
        public var createdTimestamp: Foundation.Date?
        /// The interval after which an AppInstanceUser is automatically deleted.
        public var expirationSettings: ChimeSDKIdentityClientTypes.ExpirationSettings?
        /// The time at which the AppInstanceUser was last updated.
        public var lastUpdatedTimestamp: Foundation.Date?
        /// The metadata of the AppInstanceUser.
        public var metadata: Swift.String?
        /// The name of the AppInstanceUser.
        public var name: Swift.String?

        public init(
            appInstanceUserArn: Swift.String? = nil,
            createdTimestamp: Foundation.Date? = nil,
            expirationSettings: ChimeSDKIdentityClientTypes.ExpirationSettings? = nil,
            lastUpdatedTimestamp: Foundation.Date? = nil,
            metadata: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.appInstanceUserArn = appInstanceUserArn
            self.createdTimestamp = createdTimestamp
            self.expirationSettings = expirationSettings
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.metadata = metadata
            self.name = name
        }
    }
}

extension ChimeSDKIdentityClientTypes.AppInstanceUser: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AppInstanceUser(appInstanceUserArn: \(Swift.String(describing: appInstanceUserArn)), createdTimestamp: \(Swift.String(describing: createdTimestamp)), expirationSettings: \(Swift.String(describing: expirationSettings)), lastUpdatedTimestamp: \(Swift.String(describing: lastUpdatedTimestamp)), metadata: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKIdentityClientTypes {

    /// The attributes of an Endpoint.
    public struct EndpointAttributes: Swift.Sendable {
        /// The device token for the GCM, APNS, and APNS_SANDBOX endpoint types.
        /// This member is required.
        public var deviceToken: Swift.String?
        /// The VOIP device token for the APNS and APNS_SANDBOX endpoint types.
        public var voipDeviceToken: Swift.String?

        public init(
            deviceToken: Swift.String? = nil,
            voipDeviceToken: Swift.String? = nil
        )
        {
            self.deviceToken = deviceToken
            self.voipDeviceToken = voipDeviceToken
        }
    }
}

extension ChimeSDKIdentityClientTypes.EndpointAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EndpointAttributes(deviceToken: \"CONTENT_REDACTED\", voipDeviceToken: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKIdentityClientTypes {

    public enum EndpointStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointStatus] {
            return [
                .active,
                .inactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .inactive: return "INACTIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKIdentityClientTypes {

    public enum EndpointStatusReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case invalidDeviceToken
        case invalidPinpointArn
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointStatusReason] {
            return [
                .invalidDeviceToken,
                .invalidPinpointArn
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .invalidDeviceToken: return "INVALID_DEVICE_TOKEN"
            case .invalidPinpointArn: return "INVALID_PINPOINT_ARN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKIdentityClientTypes {

    /// A read-only field that represents the state of an AppInstanceUserEndpoint. Supported values:
    ///
    /// * ACTIVE: The AppInstanceUserEndpoint is active and able to receive messages. When ACTIVE, the EndpointStatusReason remains empty.
    ///
    /// * INACTIVE: The AppInstanceUserEndpoint is inactive and can't receive message. When INACTIVE, the corresponding reason will be conveyed through EndpointStatusReason.
    ///
    /// * INVALID_DEVICE_TOKEN indicates that an AppInstanceUserEndpoint is INACTIVE due to invalid device token
    ///
    /// * INVALID_PINPOINT_ARN indicates that an AppInstanceUserEndpoint is INACTIVE due to an invalid pinpoint ARN that was input through the ResourceArn field.
    public struct EndpointState: Swift.Sendable {
        /// Enum that indicates the Status of an AppInstanceUserEndpoint.
        /// This member is required.
        public var status: ChimeSDKIdentityClientTypes.EndpointStatus?
        /// The reason for the EndpointStatus.
        public var statusReason: ChimeSDKIdentityClientTypes.EndpointStatusReason?

        public init(
            status: ChimeSDKIdentityClientTypes.EndpointStatus? = nil,
            statusReason: ChimeSDKIdentityClientTypes.EndpointStatusReason? = nil
        )
        {
            self.status = status
            self.statusReason = statusReason
        }
    }
}

extension ChimeSDKIdentityClientTypes {

    public enum AppInstanceUserEndpointType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case apns
        case apnsSandbox
        case gcm
        case sdkUnknown(Swift.String)

        public static var allCases: [AppInstanceUserEndpointType] {
            return [
                .apns,
                .apnsSandbox,
                .gcm
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .apns: return "APNS"
            case .apnsSandbox: return "APNS_SANDBOX"
            case .gcm: return "GCM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ChimeSDKIdentityClientTypes {

    /// An endpoint under an Amazon Chime AppInstanceUser that receives messages for a user. For push notifications, the endpoint is a mobile device used to receive mobile push notifications for a user.
    public struct AppInstanceUserEndpoint: Swift.Sendable {
        /// Boolean that controls whether the AppInstanceUserEndpoint is opted in to receive messages. ALL indicates the endpoint will receive all messages. NONE indicates the endpoint will receive no messages.
        public var allowMessages: ChimeSDKIdentityClientTypes.AllowMessages?
        /// The ARN of the AppInstanceUser.
        public var appInstanceUserArn: Swift.String?
        /// The time at which an AppInstanceUserEndpoint was created.
        public var createdTimestamp: Foundation.Date?
        /// The attributes of an Endpoint.
        public var endpointAttributes: ChimeSDKIdentityClientTypes.EndpointAttributes?
        /// The unique identifier of the AppInstanceUserEndpoint.
        public var endpointId: Swift.String?
        /// A read-only field that represents the state of an AppInstanceUserEndpoint. Supported values:
        ///
        /// * ACTIVE: The AppInstanceUserEndpoint is active and able to receive messages. When ACTIVE, the EndpointStatusReason remains empty.
        ///
        /// * INACTIVE: The AppInstanceUserEndpoint is inactive and can't receive message. When INACTIVE, the corresponding reason will be conveyed through EndpointStatusReason.
        ///
        /// * INVALID_DEVICE_TOKEN indicates that an AppInstanceUserEndpoint is INACTIVE due to invalid device token
        ///
        /// * INVALID_PINPOINT_ARN indicates that an AppInstanceUserEndpoint is INACTIVE due to an invalid pinpoint ARN that was input through the ResourceArn field.
        public var endpointState: ChimeSDKIdentityClientTypes.EndpointState?
        /// The time at which an AppInstanceUserEndpoint was last updated.
        public var lastUpdatedTimestamp: Foundation.Date?
        /// The name of the AppInstanceUserEndpoint.
        public var name: Swift.String?
        /// The ARN of the resource to which the endpoint belongs.
        public var resourceArn: Swift.String?
        /// The type of the AppInstanceUserEndpoint.
        public var type: ChimeSDKIdentityClientTypes.AppInstanceUserEndpointType?

        public init(
            allowMessages: ChimeSDKIdentityClientTypes.AllowMessages? = nil,
            appInstanceUserArn: Swift.String? = nil,
            createdTimestamp: Foundation.Date? = nil,
            endpointAttributes: ChimeSDKIdentityClientTypes.EndpointAttributes? = nil,
            endpointId: Swift.String? = nil,
            endpointState: ChimeSDKIdentityClientTypes.EndpointState? = nil,
            lastUpdatedTimestamp: Foundation.Date? = nil,
            name: Swift.String? = nil,
            resourceArn: Swift.String? = nil,
            type: ChimeSDKIdentityClientTypes.AppInstanceUserEndpointType? = nil
        )
        {
            self.allowMessages = allowMessages
            self.appInstanceUserArn = appInstanceUserArn
            self.createdTimestamp = createdTimestamp
            self.endpointAttributes = endpointAttributes
            self.endpointId = endpointId
            self.endpointState = endpointState
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.name = name
            self.resourceArn = resourceArn
            self.type = type
        }
    }
}

extension ChimeSDKIdentityClientTypes.AppInstanceUserEndpoint: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AppInstanceUserEndpoint(allowMessages: \(Swift.String(describing: allowMessages)), appInstanceUserArn: \(Swift.String(describing: appInstanceUserArn)), createdTimestamp: \(Swift.String(describing: createdTimestamp)), endpointAttributes: \(Swift.String(describing: endpointAttributes)), endpointId: \(Swift.String(describing: endpointId)), endpointState: \(Swift.String(describing: endpointState)), lastUpdatedTimestamp: \(Swift.String(describing: lastUpdatedTimestamp)), resourceArn: \(Swift.String(describing: resourceArn)), type: \(Swift.String(describing: type)), name: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKIdentityClientTypes {

    /// Summary of the details of an AppInstanceUserEndpoint.
    public struct AppInstanceUserEndpointSummary: Swift.Sendable {
        /// BBoolean that controls whether the AppInstanceUserEndpoint is opted in to receive messages. ALL indicates the endpoint will receive all messages. NONE indicates the endpoint will receive no messages.
        public var allowMessages: ChimeSDKIdentityClientTypes.AllowMessages?
        /// The ARN of the AppInstanceUser.
        public var appInstanceUserArn: Swift.String?
        /// The unique identifier of the AppInstanceUserEndpoint.
        public var endpointId: Swift.String?
        /// A read-only field that represent the state of an AppInstanceUserEndpoint.
        public var endpointState: ChimeSDKIdentityClientTypes.EndpointState?
        /// The name of the AppInstanceUserEndpoint.
        public var name: Swift.String?
        /// The type of the AppInstanceUserEndpoint.
        public var type: ChimeSDKIdentityClientTypes.AppInstanceUserEndpointType?

        public init(
            allowMessages: ChimeSDKIdentityClientTypes.AllowMessages? = nil,
            appInstanceUserArn: Swift.String? = nil,
            endpointId: Swift.String? = nil,
            endpointState: ChimeSDKIdentityClientTypes.EndpointState? = nil,
            name: Swift.String? = nil,
            type: ChimeSDKIdentityClientTypes.AppInstanceUserEndpointType? = nil
        )
        {
            self.allowMessages = allowMessages
            self.appInstanceUserArn = appInstanceUserArn
            self.endpointId = endpointId
            self.endpointState = endpointState
            self.name = name
            self.type = type
        }
    }
}

extension ChimeSDKIdentityClientTypes.AppInstanceUserEndpointSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AppInstanceUserEndpointSummary(allowMessages: \(Swift.String(describing: allowMessages)), appInstanceUserArn: \(Swift.String(describing: appInstanceUserArn)), endpointId: \(Swift.String(describing: endpointId)), endpointState: \(Swift.String(describing: endpointState)), type: \(Swift.String(describing: type)), name: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKIdentityClientTypes {

    /// Summary of the details of an AppInstanceUser.
    public struct AppInstanceUserSummary: Swift.Sendable {
        /// The ARN of the AppInstanceUser.
        public var appInstanceUserArn: Swift.String?
        /// The metadata of the AppInstanceUser.
        public var metadata: Swift.String?
        /// The name of an AppInstanceUser.
        public var name: Swift.String?

        public init(
            appInstanceUserArn: Swift.String? = nil,
            metadata: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.appInstanceUserArn = appInstanceUserArn
            self.metadata = metadata
            self.name = name
        }
    }
}

extension ChimeSDKIdentityClientTypes.AppInstanceUserSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AppInstanceUserSummary(appInstanceUserArn: \(Swift.String(describing: appInstanceUserArn)), metadata: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

extension ChimeSDKIdentityClientTypes {

    public enum ErrorCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accessdenied
        case badrequest
        case conflict
        case forbidden
        case notfound
        case phonenumberassociationsexist
        case preconditionfailed
        case resourcelimitexceeded
        case servicefailure
        case serviceunavailable
        case throttled
        case throttling
        case unauthorized
        case unprocessable
        case voiceconnectorgroupassociationsexist
        case sdkUnknown(Swift.String)

        public static var allCases: [ErrorCode] {
            return [
                .accessdenied,
                .badrequest,
                .conflict,
                .forbidden,
                .notfound,
                .phonenumberassociationsexist,
                .preconditionfailed,
                .resourcelimitexceeded,
                .servicefailure,
                .serviceunavailable,
                .throttled,
                .throttling,
                .unauthorized,
                .unprocessable,
                .voiceconnectorgroupassociationsexist
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accessdenied: return "AccessDenied"
            case .badrequest: return "BadRequest"
            case .conflict: return "Conflict"
            case .forbidden: return "Forbidden"
            case .notfound: return "NotFound"
            case .phonenumberassociationsexist: return "PhoneNumberAssociationsExist"
            case .preconditionfailed: return "PreconditionFailed"
            case .resourcelimitexceeded: return "ResourceLimitExceeded"
            case .servicefailure: return "ServiceFailure"
            case .serviceunavailable: return "ServiceUnavailable"
            case .throttled: return "Throttled"
            case .throttling: return "Throttling"
            case .unauthorized: return "Unauthorized"
            case .unprocessable: return "Unprocessable"
            case .voiceconnectorgroupassociationsexist: return "VoiceConnectorGroupAssociationsExist"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The input parameters don't match the service's restrictions.
public struct BadRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKIdentityClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BadRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKIdentityClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The request could not be processed because of conflict in the current state of the resource.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKIdentityClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKIdentityClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The client is permanently forbidden from making the request.
public struct ForbiddenException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKIdentityClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ForbiddenException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKIdentityClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The request exceeds the resource limit.
public struct ResourceLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKIdentityClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKIdentityClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The service encountered an unexpected error.
public struct ServiceFailureException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKIdentityClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceFailureException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKIdentityClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The service is currently unavailable.
public struct ServiceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKIdentityClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKIdentityClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The client exceeded its request rate limit.
public struct ThrottledClientException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKIdentityClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottledClientException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKIdentityClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The client is not currently authorized to make the request.
public struct UnauthorizedClientException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKIdentityClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnauthorizedClientException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKIdentityClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

extension ChimeSDKIdentityClientTypes {

    /// A tag object containing a key-value pair.
    public struct Tag: Swift.Sendable {
        /// The key in a tag.
        /// This member is required.
        public var key: Swift.String?
        /// The value in a tag.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

extension ChimeSDKIdentityClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \"CONTENT_REDACTED\", value: \"CONTENT_REDACTED\")"}
}

public struct CreateAppInstanceInput: Swift.Sendable {
    /// The unique ID of the request. Use different tokens to create different AppInstances.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// The metadata of the AppInstance. Limited to a 1KB string in UTF-8.
    public var metadata: Swift.String?
    /// The name of the AppInstance.
    /// This member is required.
    public var name: Swift.String?
    /// Tags assigned to the AppInstance.
    public var tags: [ChimeSDKIdentityClientTypes.Tag]?

    public init(
        clientRequestToken: Swift.String? = nil,
        metadata: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [ChimeSDKIdentityClientTypes.Tag]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.metadata = metadata
        self.name = name
        self.tags = tags
    }
}

extension CreateAppInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAppInstanceInput(clientRequestToken: \(Swift.String(describing: clientRequestToken)), tags: \(Swift.String(describing: tags)), metadata: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

public struct CreateAppInstanceOutput: Swift.Sendable {
    /// The Amazon Resource Number (ARN) of the AppInstance.
    public var appInstanceArn: Swift.String?

    public init(
        appInstanceArn: Swift.String? = nil
    )
    {
        self.appInstanceArn = appInstanceArn
    }
}

public struct CreateAppInstanceAdminInput: Swift.Sendable {
    /// The ARN of the administrator of the current AppInstance.
    /// This member is required.
    public var appInstanceAdminArn: Swift.String?
    /// The ARN of the AppInstance.
    /// This member is required.
    public var appInstanceArn: Swift.String?

    public init(
        appInstanceAdminArn: Swift.String? = nil,
        appInstanceArn: Swift.String? = nil
    )
    {
        self.appInstanceAdminArn = appInstanceAdminArn
        self.appInstanceArn = appInstanceArn
    }
}

public struct CreateAppInstanceAdminOutput: Swift.Sendable {
    /// The ARN and name of the administrator, the ARN of the AppInstance, and the created and last-updated timestamps. All timestamps use epoch milliseconds.
    public var appInstanceAdmin: ChimeSDKIdentityClientTypes.Identity?
    /// The ARN of the of the admin for the AppInstance.
    public var appInstanceArn: Swift.String?

    public init(
        appInstanceAdmin: ChimeSDKIdentityClientTypes.Identity? = nil,
        appInstanceArn: Swift.String? = nil
    )
    {
        self.appInstanceAdmin = appInstanceAdmin
        self.appInstanceArn = appInstanceArn
    }
}

public struct CreateAppInstanceBotInput: Swift.Sendable {
    /// The ARN of the AppInstance request.
    /// This member is required.
    public var appInstanceArn: Swift.String?
    /// The unique ID for the client making the request. Use different tokens for different AppInstanceBots.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// Configuration information about the Amazon Lex V2 V2 bot.
    /// This member is required.
    public var configuration: ChimeSDKIdentityClientTypes.Configuration?
    /// The request metadata. Limited to a 1KB string in UTF-8.
    public var metadata: Swift.String?
    /// The user's name.
    public var name: Swift.String?
    /// The tags assigned to the AppInstanceBot.
    public var tags: [ChimeSDKIdentityClientTypes.Tag]?

    public init(
        appInstanceArn: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        configuration: ChimeSDKIdentityClientTypes.Configuration? = nil,
        metadata: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [ChimeSDKIdentityClientTypes.Tag]? = nil
    )
    {
        self.appInstanceArn = appInstanceArn
        self.clientRequestToken = clientRequestToken
        self.configuration = configuration
        self.metadata = metadata
        self.name = name
        self.tags = tags
    }
}

extension CreateAppInstanceBotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAppInstanceBotInput(appInstanceArn: \(Swift.String(describing: appInstanceArn)), clientRequestToken: \(Swift.String(describing: clientRequestToken)), configuration: \(Swift.String(describing: configuration)), tags: \(Swift.String(describing: tags)), metadata: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

public struct CreateAppInstanceBotOutput: Swift.Sendable {
    /// The ARN of the AppinstanceBot.
    public var appInstanceBotArn: Swift.String?

    public init(
        appInstanceBotArn: Swift.String? = nil
    )
    {
        self.appInstanceBotArn = appInstanceBotArn
    }
}

public struct CreateAppInstanceUserInput: Swift.Sendable {
    /// The ARN of the AppInstance request.
    /// This member is required.
    public var appInstanceArn: Swift.String?
    /// The user ID of the AppInstance.
    /// This member is required.
    public var appInstanceUserId: Swift.String?
    /// The unique ID of the request. Use different tokens to request additional AppInstances.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// Settings that control the interval after which the AppInstanceUser is automatically deleted.
    public var expirationSettings: ChimeSDKIdentityClientTypes.ExpirationSettings?
    /// The request's metadata. Limited to a 1KB string in UTF-8.
    public var metadata: Swift.String?
    /// The user's name.
    /// This member is required.
    public var name: Swift.String?
    /// Tags assigned to the AppInstanceUser.
    public var tags: [ChimeSDKIdentityClientTypes.Tag]?

    public init(
        appInstanceArn: Swift.String? = nil,
        appInstanceUserId: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        expirationSettings: ChimeSDKIdentityClientTypes.ExpirationSettings? = nil,
        metadata: Swift.String? = nil,
        name: Swift.String? = nil,
        tags: [ChimeSDKIdentityClientTypes.Tag]? = nil
    )
    {
        self.appInstanceArn = appInstanceArn
        self.appInstanceUserId = appInstanceUserId
        self.clientRequestToken = clientRequestToken
        self.expirationSettings = expirationSettings
        self.metadata = metadata
        self.name = name
        self.tags = tags
    }
}

extension CreateAppInstanceUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateAppInstanceUserInput(appInstanceArn: \(Swift.String(describing: appInstanceArn)), clientRequestToken: \(Swift.String(describing: clientRequestToken)), expirationSettings: \(Swift.String(describing: expirationSettings)), tags: \(Swift.String(describing: tags)), appInstanceUserId: \"CONTENT_REDACTED\", metadata: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

public struct CreateAppInstanceUserOutput: Swift.Sendable {
    /// The user's ARN.
    public var appInstanceUserArn: Swift.String?

    public init(
        appInstanceUserArn: Swift.String? = nil
    )
    {
        self.appInstanceUserArn = appInstanceUserArn
    }
}

public struct DeleteAppInstanceInput: Swift.Sendable {
    /// The ARN of the AppInstance.
    /// This member is required.
    public var appInstanceArn: Swift.String?

    public init(
        appInstanceArn: Swift.String? = nil
    )
    {
        self.appInstanceArn = appInstanceArn
    }
}

public struct DeleteAppInstanceAdminInput: Swift.Sendable {
    /// The ARN of the AppInstance's administrator.
    /// This member is required.
    public var appInstanceAdminArn: Swift.String?
    /// The ARN of the AppInstance.
    /// This member is required.
    public var appInstanceArn: Swift.String?

    public init(
        appInstanceAdminArn: Swift.String? = nil,
        appInstanceArn: Swift.String? = nil
    )
    {
        self.appInstanceAdminArn = appInstanceAdminArn
        self.appInstanceArn = appInstanceArn
    }
}

public struct DeleteAppInstanceBotInput: Swift.Sendable {
    /// The ARN of the AppInstanceBot being deleted.
    /// This member is required.
    public var appInstanceBotArn: Swift.String?

    public init(
        appInstanceBotArn: Swift.String? = nil
    )
    {
        self.appInstanceBotArn = appInstanceBotArn
    }
}

public struct DeleteAppInstanceUserInput: Swift.Sendable {
    /// The ARN of the user request being deleted.
    /// This member is required.
    public var appInstanceUserArn: Swift.String?

    public init(
        appInstanceUserArn: Swift.String? = nil
    )
    {
        self.appInstanceUserArn = appInstanceUserArn
    }
}

public struct DeregisterAppInstanceUserEndpointInput: Swift.Sendable {
    /// The ARN of the AppInstanceUser.
    /// This member is required.
    public var appInstanceUserArn: Swift.String?
    /// The unique identifier of the AppInstanceUserEndpoint.
    /// This member is required.
    public var endpointId: Swift.String?

    public init(
        appInstanceUserArn: Swift.String? = nil,
        endpointId: Swift.String? = nil
    )
    {
        self.appInstanceUserArn = appInstanceUserArn
        self.endpointId = endpointId
    }
}

public struct DescribeAppInstanceInput: Swift.Sendable {
    /// The ARN of the AppInstance.
    /// This member is required.
    public var appInstanceArn: Swift.String?

    public init(
        appInstanceArn: Swift.String? = nil
    )
    {
        self.appInstanceArn = appInstanceArn
    }
}

public struct DescribeAppInstanceOutput: Swift.Sendable {
    /// The ARN, metadata, created and last-updated timestamps, and the name of the AppInstance. All timestamps use epoch milliseconds.
    public var appInstance: ChimeSDKIdentityClientTypes.AppInstance?

    public init(
        appInstance: ChimeSDKIdentityClientTypes.AppInstance? = nil
    )
    {
        self.appInstance = appInstance
    }
}

public struct DescribeAppInstanceAdminInput: Swift.Sendable {
    /// The ARN of the AppInstanceAdmin.
    /// This member is required.
    public var appInstanceAdminArn: Swift.String?
    /// The ARN of the AppInstance.
    /// This member is required.
    public var appInstanceArn: Swift.String?

    public init(
        appInstanceAdminArn: Swift.String? = nil,
        appInstanceArn: Swift.String? = nil
    )
    {
        self.appInstanceAdminArn = appInstanceAdminArn
        self.appInstanceArn = appInstanceArn
    }
}

public struct DescribeAppInstanceAdminOutput: Swift.Sendable {
    /// The ARN and name of the AppInstanceUser, the ARN of the AppInstance, and the created and last-updated timestamps. All timestamps use epoch milliseconds.
    public var appInstanceAdmin: ChimeSDKIdentityClientTypes.AppInstanceAdmin?

    public init(
        appInstanceAdmin: ChimeSDKIdentityClientTypes.AppInstanceAdmin? = nil
    )
    {
        self.appInstanceAdmin = appInstanceAdmin
    }
}

/// One or more of the resources in the request does not exist in the system.
public struct NotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: ChimeSDKIdentityClientTypes.ErrorCode? = nil
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "NotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: ChimeSDKIdentityClientTypes.ErrorCode? = nil,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

public struct DescribeAppInstanceBotInput: Swift.Sendable {
    /// The ARN of the AppInstanceBot.
    /// This member is required.
    public var appInstanceBotArn: Swift.String?

    public init(
        appInstanceBotArn: Swift.String? = nil
    )
    {
        self.appInstanceBotArn = appInstanceBotArn
    }
}

public struct DescribeAppInstanceBotOutput: Swift.Sendable {
    /// The detials of the AppInstanceBot.
    public var appInstanceBot: ChimeSDKIdentityClientTypes.AppInstanceBot?

    public init(
        appInstanceBot: ChimeSDKIdentityClientTypes.AppInstanceBot? = nil
    )
    {
        self.appInstanceBot = appInstanceBot
    }
}

public struct DescribeAppInstanceUserInput: Swift.Sendable {
    /// The ARN of the AppInstanceUser.
    /// This member is required.
    public var appInstanceUserArn: Swift.String?

    public init(
        appInstanceUserArn: Swift.String? = nil
    )
    {
        self.appInstanceUserArn = appInstanceUserArn
    }
}

public struct DescribeAppInstanceUserOutput: Swift.Sendable {
    /// The name of the AppInstanceUser.
    public var appInstanceUser: ChimeSDKIdentityClientTypes.AppInstanceUser?

    public init(
        appInstanceUser: ChimeSDKIdentityClientTypes.AppInstanceUser? = nil
    )
    {
        self.appInstanceUser = appInstanceUser
    }
}

public struct DescribeAppInstanceUserEndpointInput: Swift.Sendable {
    /// The ARN of the AppInstanceUser.
    /// This member is required.
    public var appInstanceUserArn: Swift.String?
    /// The unique identifier of the AppInstanceUserEndpoint.
    /// This member is required.
    public var endpointId: Swift.String?

    public init(
        appInstanceUserArn: Swift.String? = nil,
        endpointId: Swift.String? = nil
    )
    {
        self.appInstanceUserArn = appInstanceUserArn
        self.endpointId = endpointId
    }
}

public struct DescribeAppInstanceUserEndpointOutput: Swift.Sendable {
    /// The full details of an AppInstanceUserEndpoint: the AppInstanceUserArn, ID, name, type, resource ARN, attributes, allow messages, state, and created and last updated timestamps. All timestamps use epoch milliseconds.
    public var appInstanceUserEndpoint: ChimeSDKIdentityClientTypes.AppInstanceUserEndpoint?

    public init(
        appInstanceUserEndpoint: ChimeSDKIdentityClientTypes.AppInstanceUserEndpoint? = nil
    )
    {
        self.appInstanceUserEndpoint = appInstanceUserEndpoint
    }
}

public struct GetAppInstanceRetentionSettingsInput: Swift.Sendable {
    /// The ARN of the AppInstance.
    /// This member is required.
    public var appInstanceArn: Swift.String?

    public init(
        appInstanceArn: Swift.String? = nil
    )
    {
        self.appInstanceArn = appInstanceArn
    }
}

public struct GetAppInstanceRetentionSettingsOutput: Swift.Sendable {
    /// The retention settings for the AppInstance.
    public var appInstanceRetentionSettings: ChimeSDKIdentityClientTypes.AppInstanceRetentionSettings?
    /// The timestamp representing the time at which the specified items are retained, in Epoch Seconds.
    public var initiateDeletionTimestamp: Foundation.Date?

    public init(
        appInstanceRetentionSettings: ChimeSDKIdentityClientTypes.AppInstanceRetentionSettings? = nil,
        initiateDeletionTimestamp: Foundation.Date? = nil
    )
    {
        self.appInstanceRetentionSettings = appInstanceRetentionSettings
        self.initiateDeletionTimestamp = initiateDeletionTimestamp
    }
}

public struct ListAppInstanceAdminsInput: Swift.Sendable {
    /// The ARN of the AppInstance.
    /// This member is required.
    public var appInstanceArn: Swift.String?
    /// The maximum number of administrators that you want to return.
    public var maxResults: Swift.Int?
    /// The token returned from previous API requests until the number of administrators is reached.
    public var nextToken: Swift.String?

    public init(
        appInstanceArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appInstanceArn = appInstanceArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ListAppInstanceAdminsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAppInstanceAdminsInput(appInstanceArn: \(Swift.String(describing: appInstanceArn)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \"CONTENT_REDACTED\")"}
}

public struct ListAppInstanceAdminsOutput: Swift.Sendable {
    /// The information for each administrator.
    public var appInstanceAdmins: [ChimeSDKIdentityClientTypes.AppInstanceAdminSummary]?
    /// The ARN of the AppInstance.
    public var appInstanceArn: Swift.String?
    /// The token returned from previous API requests until the number of administrators is reached.
    public var nextToken: Swift.String?

    public init(
        appInstanceAdmins: [ChimeSDKIdentityClientTypes.AppInstanceAdminSummary]? = nil,
        appInstanceArn: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appInstanceAdmins = appInstanceAdmins
        self.appInstanceArn = appInstanceArn
        self.nextToken = nextToken
    }
}

extension ListAppInstanceAdminsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAppInstanceAdminsOutput(appInstanceAdmins: \(Swift.String(describing: appInstanceAdmins)), appInstanceArn: \(Swift.String(describing: appInstanceArn)), nextToken: \"CONTENT_REDACTED\")"}
}

public struct ListAppInstanceBotsInput: Swift.Sendable {
    /// The ARN of the AppInstance.
    /// This member is required.
    public var appInstanceArn: Swift.String?
    /// The maximum number of requests to return.
    public var maxResults: Swift.Int?
    /// The token passed by previous API calls until all requested bots are returned.
    public var nextToken: Swift.String?

    public init(
        appInstanceArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appInstanceArn = appInstanceArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ListAppInstanceBotsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAppInstanceBotsInput(appInstanceArn: \(Swift.String(describing: appInstanceArn)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \"CONTENT_REDACTED\")"}
}

public struct ListAppInstanceBotsOutput: Swift.Sendable {
    /// The ARN of the AppInstance.
    public var appInstanceArn: Swift.String?
    /// The information for each requested AppInstanceBot.
    public var appInstanceBots: [ChimeSDKIdentityClientTypes.AppInstanceBotSummary]?
    /// The token passed by previous API calls until all requested bots are returned.
    public var nextToken: Swift.String?

    public init(
        appInstanceArn: Swift.String? = nil,
        appInstanceBots: [ChimeSDKIdentityClientTypes.AppInstanceBotSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appInstanceArn = appInstanceArn
        self.appInstanceBots = appInstanceBots
        self.nextToken = nextToken
    }
}

extension ListAppInstanceBotsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAppInstanceBotsOutput(appInstanceArn: \(Swift.String(describing: appInstanceArn)), appInstanceBots: \(Swift.String(describing: appInstanceBots)), nextToken: \"CONTENT_REDACTED\")"}
}

public struct ListAppInstancesInput: Swift.Sendable {
    /// The maximum number of AppInstances that you want to return.
    public var maxResults: Swift.Int?
    /// The token passed by previous API requests until you reach the maximum number of AppInstances.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ListAppInstancesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAppInstancesInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \"CONTENT_REDACTED\")"}
}

public struct ListAppInstancesOutput: Swift.Sendable {
    /// The information for each AppInstance.
    public var appInstances: [ChimeSDKIdentityClientTypes.AppInstanceSummary]?
    /// The token passed by previous API requests until the maximum number of AppInstances is reached.
    public var nextToken: Swift.String?

    public init(
        appInstances: [ChimeSDKIdentityClientTypes.AppInstanceSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appInstances = appInstances
        self.nextToken = nextToken
    }
}

extension ListAppInstancesOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAppInstancesOutput(appInstances: \(Swift.String(describing: appInstances)), nextToken: \"CONTENT_REDACTED\")"}
}

public struct ListAppInstanceUserEndpointsInput: Swift.Sendable {
    /// The ARN of the AppInstanceUser.
    /// This member is required.
    public var appInstanceUserArn: Swift.String?
    /// The maximum number of endpoints that you want to return.
    public var maxResults: Swift.Int?
    /// The token passed by previous API calls until all requested endpoints are returned.
    public var nextToken: Swift.String?

    public init(
        appInstanceUserArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appInstanceUserArn = appInstanceUserArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ListAppInstanceUserEndpointsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAppInstanceUserEndpointsInput(maxResults: \(Swift.String(describing: maxResults)), appInstanceUserArn: \"CONTENT_REDACTED\", nextToken: \"CONTENT_REDACTED\")"}
}

public struct ListAppInstanceUserEndpointsOutput: Swift.Sendable {
    /// The information for each requested AppInstanceUserEndpoint.
    public var appInstanceUserEndpoints: [ChimeSDKIdentityClientTypes.AppInstanceUserEndpointSummary]?
    /// The token passed by previous API calls until all requested endpoints are returned.
    public var nextToken: Swift.String?

    public init(
        appInstanceUserEndpoints: [ChimeSDKIdentityClientTypes.AppInstanceUserEndpointSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appInstanceUserEndpoints = appInstanceUserEndpoints
        self.nextToken = nextToken
    }
}

extension ListAppInstanceUserEndpointsOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAppInstanceUserEndpointsOutput(appInstanceUserEndpoints: \(Swift.String(describing: appInstanceUserEndpoints)), nextToken: \"CONTENT_REDACTED\")"}
}

public struct ListAppInstanceUsersInput: Swift.Sendable {
    /// The ARN of the AppInstance.
    /// This member is required.
    public var appInstanceArn: Swift.String?
    /// The maximum number of requests that you want returned.
    public var maxResults: Swift.Int?
    /// The token passed by previous API calls until all requested users are returned.
    public var nextToken: Swift.String?

    public init(
        appInstanceArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appInstanceArn = appInstanceArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ListAppInstanceUsersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAppInstanceUsersInput(appInstanceArn: \(Swift.String(describing: appInstanceArn)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \"CONTENT_REDACTED\")"}
}

public struct ListAppInstanceUsersOutput: Swift.Sendable {
    /// The ARN of the AppInstance.
    public var appInstanceArn: Swift.String?
    /// The information for each requested AppInstanceUser.
    public var appInstanceUsers: [ChimeSDKIdentityClientTypes.AppInstanceUserSummary]?
    /// The token passed by previous API calls until all requested users are returned.
    public var nextToken: Swift.String?

    public init(
        appInstanceArn: Swift.String? = nil,
        appInstanceUsers: [ChimeSDKIdentityClientTypes.AppInstanceUserSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appInstanceArn = appInstanceArn
        self.appInstanceUsers = appInstanceUsers
        self.nextToken = nextToken
    }
}

extension ListAppInstanceUsersOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListAppInstanceUsersOutput(appInstanceArn: \(Swift.String(describing: appInstanceArn)), appInstanceUsers: \(Swift.String(describing: appInstanceUsers)), nextToken: \"CONTENT_REDACTED\")"}
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The ARN of the resource.
    /// This member is required.
    public var resourceARN: Swift.String?

    public init(
        resourceARN: Swift.String? = nil
    )
    {
        self.resourceARN = resourceARN
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// The tag key-value pairs.
    public var tags: [ChimeSDKIdentityClientTypes.Tag]?

    public init(
        tags: [ChimeSDKIdentityClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

public struct PutAppInstanceRetentionSettingsInput: Swift.Sendable {
    /// The ARN of the AppInstance.
    /// This member is required.
    public var appInstanceArn: Swift.String?
    /// The time in days to retain data. Data type: number.
    /// This member is required.
    public var appInstanceRetentionSettings: ChimeSDKIdentityClientTypes.AppInstanceRetentionSettings?

    public init(
        appInstanceArn: Swift.String? = nil,
        appInstanceRetentionSettings: ChimeSDKIdentityClientTypes.AppInstanceRetentionSettings? = nil
    )
    {
        self.appInstanceArn = appInstanceArn
        self.appInstanceRetentionSettings = appInstanceRetentionSettings
    }
}

public struct PutAppInstanceRetentionSettingsOutput: Swift.Sendable {
    /// The time in days to retain data. Data type: number.
    public var appInstanceRetentionSettings: ChimeSDKIdentityClientTypes.AppInstanceRetentionSettings?
    /// The time at which the API deletes data.
    public var initiateDeletionTimestamp: Foundation.Date?

    public init(
        appInstanceRetentionSettings: ChimeSDKIdentityClientTypes.AppInstanceRetentionSettings? = nil,
        initiateDeletionTimestamp: Foundation.Date? = nil
    )
    {
        self.appInstanceRetentionSettings = appInstanceRetentionSettings
        self.initiateDeletionTimestamp = initiateDeletionTimestamp
    }
}

public struct PutAppInstanceUserExpirationSettingsInput: Swift.Sendable {
    /// The ARN of the AppInstanceUser.
    /// This member is required.
    public var appInstanceUserArn: Swift.String?
    /// Settings that control the interval after which an AppInstanceUser is automatically deleted.
    public var expirationSettings: ChimeSDKIdentityClientTypes.ExpirationSettings?

    public init(
        appInstanceUserArn: Swift.String? = nil,
        expirationSettings: ChimeSDKIdentityClientTypes.ExpirationSettings? = nil
    )
    {
        self.appInstanceUserArn = appInstanceUserArn
        self.expirationSettings = expirationSettings
    }
}

public struct PutAppInstanceUserExpirationSettingsOutput: Swift.Sendable {
    /// The ARN of the AppInstanceUser.
    public var appInstanceUserArn: Swift.String?
    /// Settings that control the interval after which an AppInstanceUser is automatically deleted.
    public var expirationSettings: ChimeSDKIdentityClientTypes.ExpirationSettings?

    public init(
        appInstanceUserArn: Swift.String? = nil,
        expirationSettings: ChimeSDKIdentityClientTypes.ExpirationSettings? = nil
    )
    {
        self.appInstanceUserArn = appInstanceUserArn
        self.expirationSettings = expirationSettings
    }
}

public struct RegisterAppInstanceUserEndpointInput: Swift.Sendable {
    /// Boolean that controls whether the AppInstanceUserEndpoint is opted in to receive messages. ALL indicates the endpoint receives all messages. NONE indicates the endpoint receives no messages.
    public var allowMessages: ChimeSDKIdentityClientTypes.AllowMessages?
    /// The ARN of the AppInstanceUser.
    /// This member is required.
    public var appInstanceUserArn: Swift.String?
    /// The unique ID assigned to the request. Use different tokens to register other endpoints.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// The attributes of an Endpoint.
    /// This member is required.
    public var endpointAttributes: ChimeSDKIdentityClientTypes.EndpointAttributes?
    /// The name of the AppInstanceUserEndpoint.
    public var name: Swift.String?
    /// The ARN of the resource to which the endpoint belongs.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The type of the AppInstanceUserEndpoint. Supported types:
    ///
    /// * APNS: The mobile notification service for an Apple device.
    ///
    /// * APNS_SANDBOX: The sandbox environment of the mobile notification service for an Apple device.
    ///
    /// * GCM: The mobile notification service for an Android device.
    ///
    ///
    /// Populate the ResourceArn value of each type as PinpointAppArn.
    /// This member is required.
    public var type: ChimeSDKIdentityClientTypes.AppInstanceUserEndpointType?

    public init(
        allowMessages: ChimeSDKIdentityClientTypes.AllowMessages? = nil,
        appInstanceUserArn: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        endpointAttributes: ChimeSDKIdentityClientTypes.EndpointAttributes? = nil,
        name: Swift.String? = nil,
        resourceArn: Swift.String? = nil,
        type: ChimeSDKIdentityClientTypes.AppInstanceUserEndpointType? = nil
    )
    {
        self.allowMessages = allowMessages
        self.appInstanceUserArn = appInstanceUserArn
        self.clientRequestToken = clientRequestToken
        self.endpointAttributes = endpointAttributes
        self.name = name
        self.resourceArn = resourceArn
        self.type = type
    }
}

extension RegisterAppInstanceUserEndpointInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RegisterAppInstanceUserEndpointInput(allowMessages: \(Swift.String(describing: allowMessages)), clientRequestToken: \(Swift.String(describing: clientRequestToken)), endpointAttributes: \(Swift.String(describing: endpointAttributes)), resourceArn: \(Swift.String(describing: resourceArn)), type: \(Swift.String(describing: type)), appInstanceUserArn: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

public struct RegisterAppInstanceUserEndpointOutput: Swift.Sendable {
    /// The ARN of the AppInstanceUser.
    public var appInstanceUserArn: Swift.String?
    /// The unique identifier of the AppInstanceUserEndpoint.
    public var endpointId: Swift.String?

    public init(
        appInstanceUserArn: Swift.String? = nil,
        endpointId: Swift.String? = nil
    )
    {
        self.appInstanceUserArn = appInstanceUserArn
        self.endpointId = endpointId
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The resource ARN.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// The tag key-value pairs.
    /// This member is required.
    public var tags: [ChimeSDKIdentityClientTypes.Tag]?

    public init(
        resourceARN: Swift.String? = nil,
        tags: [ChimeSDKIdentityClientTypes.Tag]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tags = tags
    }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The resource ARN.
    /// This member is required.
    public var resourceARN: Swift.String?
    /// The tag keys.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceARN: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceARN = resourceARN
        self.tagKeys = tagKeys
    }
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceARN: \(Swift.String(describing: resourceARN)), tagKeys: \"CONTENT_REDACTED\")"}
}

public struct UpdateAppInstanceInput: Swift.Sendable {
    /// The ARN of the AppInstance.
    /// This member is required.
    public var appInstanceArn: Swift.String?
    /// The metadata that you want to change.
    /// This member is required.
    public var metadata: Swift.String?
    /// The name that you want to change.
    /// This member is required.
    public var name: Swift.String?

    public init(
        appInstanceArn: Swift.String? = nil,
        metadata: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.appInstanceArn = appInstanceArn
        self.metadata = metadata
        self.name = name
    }
}

extension UpdateAppInstanceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAppInstanceInput(appInstanceArn: \(Swift.String(describing: appInstanceArn)), metadata: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

public struct UpdateAppInstanceOutput: Swift.Sendable {
    /// The ARN of the AppInstance.
    public var appInstanceArn: Swift.String?

    public init(
        appInstanceArn: Swift.String? = nil
    )
    {
        self.appInstanceArn = appInstanceArn
    }
}

public struct UpdateAppInstanceBotInput: Swift.Sendable {
    /// The ARN of the AppInstanceBot.
    /// This member is required.
    public var appInstanceBotArn: Swift.String?
    /// The configuration for the bot update.
    public var configuration: ChimeSDKIdentityClientTypes.Configuration?
    /// The metadata of the AppInstanceBot.
    /// This member is required.
    public var metadata: Swift.String?
    /// The name of the AppInstanceBot.
    /// This member is required.
    public var name: Swift.String?

    public init(
        appInstanceBotArn: Swift.String? = nil,
        configuration: ChimeSDKIdentityClientTypes.Configuration? = nil,
        metadata: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.appInstanceBotArn = appInstanceBotArn
        self.configuration = configuration
        self.metadata = metadata
        self.name = name
    }
}

extension UpdateAppInstanceBotInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAppInstanceBotInput(appInstanceBotArn: \(Swift.String(describing: appInstanceBotArn)), configuration: \(Swift.String(describing: configuration)), metadata: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

public struct UpdateAppInstanceBotOutput: Swift.Sendable {
    /// The ARN of the AppInstanceBot.
    public var appInstanceBotArn: Swift.String?

    public init(
        appInstanceBotArn: Swift.String? = nil
    )
    {
        self.appInstanceBotArn = appInstanceBotArn
    }
}

public struct UpdateAppInstanceUserInput: Swift.Sendable {
    /// The ARN of the AppInstanceUser.
    /// This member is required.
    public var appInstanceUserArn: Swift.String?
    /// The metadata of the AppInstanceUser.
    /// This member is required.
    public var metadata: Swift.String?
    /// The name of the AppInstanceUser.
    /// This member is required.
    public var name: Swift.String?

    public init(
        appInstanceUserArn: Swift.String? = nil,
        metadata: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.appInstanceUserArn = appInstanceUserArn
        self.metadata = metadata
        self.name = name
    }
}

extension UpdateAppInstanceUserInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAppInstanceUserInput(appInstanceUserArn: \(Swift.String(describing: appInstanceUserArn)), metadata: \"CONTENT_REDACTED\", name: \"CONTENT_REDACTED\")"}
}

public struct UpdateAppInstanceUserOutput: Swift.Sendable {
    /// The ARN of the AppInstanceUser.
    public var appInstanceUserArn: Swift.String?

    public init(
        appInstanceUserArn: Swift.String? = nil
    )
    {
        self.appInstanceUserArn = appInstanceUserArn
    }
}

public struct UpdateAppInstanceUserEndpointInput: Swift.Sendable {
    /// Boolean that controls whether the AppInstanceUserEndpoint is opted in to receive messages. ALL indicates the endpoint will receive all messages. NONE indicates the endpoint will receive no messages.
    public var allowMessages: ChimeSDKIdentityClientTypes.AllowMessages?
    /// The ARN of the AppInstanceUser.
    /// This member is required.
    public var appInstanceUserArn: Swift.String?
    /// The unique identifier of the AppInstanceUserEndpoint.
    /// This member is required.
    public var endpointId: Swift.String?
    /// The name of the AppInstanceUserEndpoint.
    public var name: Swift.String?

    public init(
        allowMessages: ChimeSDKIdentityClientTypes.AllowMessages? = nil,
        appInstanceUserArn: Swift.String? = nil,
        endpointId: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.allowMessages = allowMessages
        self.appInstanceUserArn = appInstanceUserArn
        self.endpointId = endpointId
        self.name = name
    }
}

extension UpdateAppInstanceUserEndpointInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateAppInstanceUserEndpointInput(allowMessages: \(Swift.String(describing: allowMessages)), appInstanceUserArn: \(Swift.String(describing: appInstanceUserArn)), endpointId: \(Swift.String(describing: endpointId)), name: \"CONTENT_REDACTED\")"}
}

public struct UpdateAppInstanceUserEndpointOutput: Swift.Sendable {
    /// The ARN of the AppInstanceUser.
    public var appInstanceUserArn: Swift.String?
    /// The unique identifier of the AppInstanceUserEndpoint.
    public var endpointId: Swift.String?

    public init(
        appInstanceUserArn: Swift.String? = nil,
        endpointId: Swift.String? = nil
    )
    {
        self.appInstanceUserArn = appInstanceUserArn
        self.endpointId = endpointId
    }
}

extension CreateAppInstanceInput {

    static func urlPathProvider(_ value: CreateAppInstanceInput) -> Swift.String? {
        return "/app-instances"
    }
}

extension CreateAppInstanceAdminInput {

    static func urlPathProvider(_ value: CreateAppInstanceAdminInput) -> Swift.String? {
        guard let appInstanceArn = value.appInstanceArn else {
            return nil
        }
        return "/app-instances/\(appInstanceArn.urlPercentEncoding())/admins"
    }
}

extension CreateAppInstanceBotInput {

    static func urlPathProvider(_ value: CreateAppInstanceBotInput) -> Swift.String? {
        return "/app-instance-bots"
    }
}

extension CreateAppInstanceUserInput {

    static func urlPathProvider(_ value: CreateAppInstanceUserInput) -> Swift.String? {
        return "/app-instance-users"
    }
}

extension DeleteAppInstanceInput {

    static func urlPathProvider(_ value: DeleteAppInstanceInput) -> Swift.String? {
        guard let appInstanceArn = value.appInstanceArn else {
            return nil
        }
        return "/app-instances/\(appInstanceArn.urlPercentEncoding())"
    }
}

extension DeleteAppInstanceAdminInput {

    static func urlPathProvider(_ value: DeleteAppInstanceAdminInput) -> Swift.String? {
        guard let appInstanceArn = value.appInstanceArn else {
            return nil
        }
        guard let appInstanceAdminArn = value.appInstanceAdminArn else {
            return nil
        }
        return "/app-instances/\(appInstanceArn.urlPercentEncoding())/admins/\(appInstanceAdminArn.urlPercentEncoding())"
    }
}

extension DeleteAppInstanceBotInput {

    static func urlPathProvider(_ value: DeleteAppInstanceBotInput) -> Swift.String? {
        guard let appInstanceBotArn = value.appInstanceBotArn else {
            return nil
        }
        return "/app-instance-bots/\(appInstanceBotArn.urlPercentEncoding())"
    }
}

extension DeleteAppInstanceUserInput {

    static func urlPathProvider(_ value: DeleteAppInstanceUserInput) -> Swift.String? {
        guard let appInstanceUserArn = value.appInstanceUserArn else {
            return nil
        }
        return "/app-instance-users/\(appInstanceUserArn.urlPercentEncoding())"
    }
}

extension DeregisterAppInstanceUserEndpointInput {

    static func urlPathProvider(_ value: DeregisterAppInstanceUserEndpointInput) -> Swift.String? {
        guard let appInstanceUserArn = value.appInstanceUserArn else {
            return nil
        }
        guard let endpointId = value.endpointId else {
            return nil
        }
        return "/app-instance-users/\(appInstanceUserArn.urlPercentEncoding())/endpoints/\(endpointId.urlPercentEncoding())"
    }
}

extension DescribeAppInstanceInput {

    static func urlPathProvider(_ value: DescribeAppInstanceInput) -> Swift.String? {
        guard let appInstanceArn = value.appInstanceArn else {
            return nil
        }
        return "/app-instances/\(appInstanceArn.urlPercentEncoding())"
    }
}

extension DescribeAppInstanceAdminInput {

    static func urlPathProvider(_ value: DescribeAppInstanceAdminInput) -> Swift.String? {
        guard let appInstanceArn = value.appInstanceArn else {
            return nil
        }
        guard let appInstanceAdminArn = value.appInstanceAdminArn else {
            return nil
        }
        return "/app-instances/\(appInstanceArn.urlPercentEncoding())/admins/\(appInstanceAdminArn.urlPercentEncoding())"
    }
}

extension DescribeAppInstanceBotInput {

    static func urlPathProvider(_ value: DescribeAppInstanceBotInput) -> Swift.String? {
        guard let appInstanceBotArn = value.appInstanceBotArn else {
            return nil
        }
        return "/app-instance-bots/\(appInstanceBotArn.urlPercentEncoding())"
    }
}

extension DescribeAppInstanceUserInput {

    static func urlPathProvider(_ value: DescribeAppInstanceUserInput) -> Swift.String? {
        guard let appInstanceUserArn = value.appInstanceUserArn else {
            return nil
        }
        return "/app-instance-users/\(appInstanceUserArn.urlPercentEncoding())"
    }
}

extension DescribeAppInstanceUserEndpointInput {

    static func urlPathProvider(_ value: DescribeAppInstanceUserEndpointInput) -> Swift.String? {
        guard let appInstanceUserArn = value.appInstanceUserArn else {
            return nil
        }
        guard let endpointId = value.endpointId else {
            return nil
        }
        return "/app-instance-users/\(appInstanceUserArn.urlPercentEncoding())/endpoints/\(endpointId.urlPercentEncoding())"
    }
}

extension GetAppInstanceRetentionSettingsInput {

    static func urlPathProvider(_ value: GetAppInstanceRetentionSettingsInput) -> Swift.String? {
        guard let appInstanceArn = value.appInstanceArn else {
            return nil
        }
        return "/app-instances/\(appInstanceArn.urlPercentEncoding())/retention-settings"
    }
}

extension ListAppInstanceAdminsInput {

    static func urlPathProvider(_ value: ListAppInstanceAdminsInput) -> Swift.String? {
        guard let appInstanceArn = value.appInstanceArn else {
            return nil
        }
        return "/app-instances/\(appInstanceArn.urlPercentEncoding())/admins"
    }
}

extension ListAppInstanceAdminsInput {

    static func queryItemProvider(_ value: ListAppInstanceAdminsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListAppInstanceBotsInput {

    static func urlPathProvider(_ value: ListAppInstanceBotsInput) -> Swift.String? {
        return "/app-instance-bots"
    }
}

extension ListAppInstanceBotsInput {

    static func queryItemProvider(_ value: ListAppInstanceBotsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        guard let appInstanceArn = value.appInstanceArn else {
            let message = "Creating a URL Query Item failed. appInstanceArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let appInstanceArnQueryItem = Smithy.URIQueryItem(name: "app-instance-arn".urlPercentEncoding(), value: Swift.String(appInstanceArn).urlPercentEncoding())
        items.append(appInstanceArnQueryItem)
        return items
    }
}

extension ListAppInstancesInput {

    static func urlPathProvider(_ value: ListAppInstancesInput) -> Swift.String? {
        return "/app-instances"
    }
}

extension ListAppInstancesInput {

    static func queryItemProvider(_ value: ListAppInstancesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListAppInstanceUserEndpointsInput {

    static func urlPathProvider(_ value: ListAppInstanceUserEndpointsInput) -> Swift.String? {
        guard let appInstanceUserArn = value.appInstanceUserArn else {
            return nil
        }
        return "/app-instance-users/\(appInstanceUserArn.urlPercentEncoding())/endpoints"
    }
}

extension ListAppInstanceUserEndpointsInput {

    static func queryItemProvider(_ value: ListAppInstanceUserEndpointsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListAppInstanceUsersInput {

    static func urlPathProvider(_ value: ListAppInstanceUsersInput) -> Swift.String? {
        return "/app-instance-users"
    }
}

extension ListAppInstanceUsersInput {

    static func queryItemProvider(_ value: ListAppInstanceUsersInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "next-token".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "max-results".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        guard let appInstanceArn = value.appInstanceArn else {
            let message = "Creating a URL Query Item failed. appInstanceArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let appInstanceArnQueryItem = Smithy.URIQueryItem(name: "app-instance-arn".urlPercentEncoding(), value: Swift.String(appInstanceArn).urlPercentEncoding())
        items.append(appInstanceArnQueryItem)
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/tags"
    }
}

extension ListTagsForResourceInput {

    static func queryItemProvider(_ value: ListTagsForResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let resourceARN = value.resourceARN else {
            let message = "Creating a URL Query Item failed. resourceARN is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let resourceARNQueryItem = Smithy.URIQueryItem(name: "arn".urlPercentEncoding(), value: Swift.String(resourceARN).urlPercentEncoding())
        items.append(resourceARNQueryItem)
        return items
    }
}

extension PutAppInstanceRetentionSettingsInput {

    static func urlPathProvider(_ value: PutAppInstanceRetentionSettingsInput) -> Swift.String? {
        guard let appInstanceArn = value.appInstanceArn else {
            return nil
        }
        return "/app-instances/\(appInstanceArn.urlPercentEncoding())/retention-settings"
    }
}

extension PutAppInstanceUserExpirationSettingsInput {

    static func urlPathProvider(_ value: PutAppInstanceUserExpirationSettingsInput) -> Swift.String? {
        guard let appInstanceUserArn = value.appInstanceUserArn else {
            return nil
        }
        return "/app-instance-users/\(appInstanceUserArn.urlPercentEncoding())/expiration-settings"
    }
}

extension RegisterAppInstanceUserEndpointInput {

    static func urlPathProvider(_ value: RegisterAppInstanceUserEndpointInput) -> Swift.String? {
        guard let appInstanceUserArn = value.appInstanceUserArn else {
            return nil
        }
        return "/app-instance-users/\(appInstanceUserArn.urlPercentEncoding())/endpoints"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/tags"
    }
}

extension TagResourceInput {

    static func queryItemProvider(_ value: TagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "tag-resource"))
        return items
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/tags"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        items.append(Smithy.URIQueryItem(name: "operation", value: "untag-resource"))
        return items
    }
}

extension UpdateAppInstanceInput {

    static func urlPathProvider(_ value: UpdateAppInstanceInput) -> Swift.String? {
        guard let appInstanceArn = value.appInstanceArn else {
            return nil
        }
        return "/app-instances/\(appInstanceArn.urlPercentEncoding())"
    }
}

extension UpdateAppInstanceBotInput {

    static func urlPathProvider(_ value: UpdateAppInstanceBotInput) -> Swift.String? {
        guard let appInstanceBotArn = value.appInstanceBotArn else {
            return nil
        }
        return "/app-instance-bots/\(appInstanceBotArn.urlPercentEncoding())"
    }
}

extension UpdateAppInstanceUserInput {

    static func urlPathProvider(_ value: UpdateAppInstanceUserInput) -> Swift.String? {
        guard let appInstanceUserArn = value.appInstanceUserArn else {
            return nil
        }
        return "/app-instance-users/\(appInstanceUserArn.urlPercentEncoding())"
    }
}

extension UpdateAppInstanceUserEndpointInput {

    static func urlPathProvider(_ value: UpdateAppInstanceUserEndpointInput) -> Swift.String? {
        guard let appInstanceUserArn = value.appInstanceUserArn else {
            return nil
        }
        guard let endpointId = value.endpointId else {
            return nil
        }
        return "/app-instance-users/\(appInstanceUserArn.urlPercentEncoding())/endpoints/\(endpointId.urlPercentEncoding())"
    }
}

extension CreateAppInstanceInput {

    static func write(value: CreateAppInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["Metadata"].write(value.metadata)
        try writer["Name"].write(value.name)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ChimeSDKIdentityClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateAppInstanceAdminInput {

    static func write(value: CreateAppInstanceAdminInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppInstanceAdminArn"].write(value.appInstanceAdminArn)
    }
}

extension CreateAppInstanceBotInput {

    static func write(value: CreateAppInstanceBotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppInstanceArn"].write(value.appInstanceArn)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["Configuration"].write(value.configuration, with: ChimeSDKIdentityClientTypes.Configuration.write(value:to:))
        try writer["Metadata"].write(value.metadata)
        try writer["Name"].write(value.name)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ChimeSDKIdentityClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateAppInstanceUserInput {

    static func write(value: CreateAppInstanceUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppInstanceArn"].write(value.appInstanceArn)
        try writer["AppInstanceUserId"].write(value.appInstanceUserId)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["ExpirationSettings"].write(value.expirationSettings, with: ChimeSDKIdentityClientTypes.ExpirationSettings.write(value:to:))
        try writer["Metadata"].write(value.metadata)
        try writer["Name"].write(value.name)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ChimeSDKIdentityClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension PutAppInstanceRetentionSettingsInput {

    static func write(value: PutAppInstanceRetentionSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppInstanceRetentionSettings"].write(value.appInstanceRetentionSettings, with: ChimeSDKIdentityClientTypes.AppInstanceRetentionSettings.write(value:to:))
    }
}

extension PutAppInstanceUserExpirationSettingsInput {

    static func write(value: PutAppInstanceUserExpirationSettingsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExpirationSettings"].write(value.expirationSettings, with: ChimeSDKIdentityClientTypes.ExpirationSettings.write(value:to:))
    }
}

extension RegisterAppInstanceUserEndpointInput {

    static func write(value: RegisterAppInstanceUserEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AllowMessages"].write(value.allowMessages)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["EndpointAttributes"].write(value.endpointAttributes, with: ChimeSDKIdentityClientTypes.EndpointAttributes.write(value:to:))
        try writer["Name"].write(value.name)
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["Type"].write(value.type)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ChimeSDKIdentityClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceARN"].write(value.resourceARN)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateAppInstanceInput {

    static func write(value: UpdateAppInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Metadata"].write(value.metadata)
        try writer["Name"].write(value.name)
    }
}

extension UpdateAppInstanceBotInput {

    static func write(value: UpdateAppInstanceBotInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Configuration"].write(value.configuration, with: ChimeSDKIdentityClientTypes.Configuration.write(value:to:))
        try writer["Metadata"].write(value.metadata)
        try writer["Name"].write(value.name)
    }
}

extension UpdateAppInstanceUserInput {

    static func write(value: UpdateAppInstanceUserInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Metadata"].write(value.metadata)
        try writer["Name"].write(value.name)
    }
}

extension UpdateAppInstanceUserEndpointInput {

    static func write(value: UpdateAppInstanceUserEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AllowMessages"].write(value.allowMessages)
        try writer["Name"].write(value.name)
    }
}

extension CreateAppInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAppInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAppInstanceOutput()
        value.appInstanceArn = try reader["AppInstanceArn"].readIfPresent()
        return value
    }
}

extension CreateAppInstanceAdminOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAppInstanceAdminOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAppInstanceAdminOutput()
        value.appInstanceAdmin = try reader["AppInstanceAdmin"].readIfPresent(with: ChimeSDKIdentityClientTypes.Identity.read(from:))
        value.appInstanceArn = try reader["AppInstanceArn"].readIfPresent()
        return value
    }
}

extension CreateAppInstanceBotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAppInstanceBotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAppInstanceBotOutput()
        value.appInstanceBotArn = try reader["AppInstanceBotArn"].readIfPresent()
        return value
    }
}

extension CreateAppInstanceUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAppInstanceUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAppInstanceUserOutput()
        value.appInstanceUserArn = try reader["AppInstanceUserArn"].readIfPresent()
        return value
    }
}

extension DeleteAppInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAppInstanceOutput {
        return DeleteAppInstanceOutput()
    }
}

extension DeleteAppInstanceAdminOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAppInstanceAdminOutput {
        return DeleteAppInstanceAdminOutput()
    }
}

extension DeleteAppInstanceBotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAppInstanceBotOutput {
        return DeleteAppInstanceBotOutput()
    }
}

extension DeleteAppInstanceUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAppInstanceUserOutput {
        return DeleteAppInstanceUserOutput()
    }
}

extension DeregisterAppInstanceUserEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeregisterAppInstanceUserEndpointOutput {
        return DeregisterAppInstanceUserEndpointOutput()
    }
}

extension DescribeAppInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAppInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAppInstanceOutput()
        value.appInstance = try reader["AppInstance"].readIfPresent(with: ChimeSDKIdentityClientTypes.AppInstance.read(from:))
        return value
    }
}

extension DescribeAppInstanceAdminOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAppInstanceAdminOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAppInstanceAdminOutput()
        value.appInstanceAdmin = try reader["AppInstanceAdmin"].readIfPresent(with: ChimeSDKIdentityClientTypes.AppInstanceAdmin.read(from:))
        return value
    }
}

extension DescribeAppInstanceBotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAppInstanceBotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAppInstanceBotOutput()
        value.appInstanceBot = try reader["AppInstanceBot"].readIfPresent(with: ChimeSDKIdentityClientTypes.AppInstanceBot.read(from:))
        return value
    }
}

extension DescribeAppInstanceUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAppInstanceUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAppInstanceUserOutput()
        value.appInstanceUser = try reader["AppInstanceUser"].readIfPresent(with: ChimeSDKIdentityClientTypes.AppInstanceUser.read(from:))
        return value
    }
}

extension DescribeAppInstanceUserEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAppInstanceUserEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAppInstanceUserEndpointOutput()
        value.appInstanceUserEndpoint = try reader["AppInstanceUserEndpoint"].readIfPresent(with: ChimeSDKIdentityClientTypes.AppInstanceUserEndpoint.read(from:))
        return value
    }
}

extension GetAppInstanceRetentionSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetAppInstanceRetentionSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetAppInstanceRetentionSettingsOutput()
        value.appInstanceRetentionSettings = try reader["AppInstanceRetentionSettings"].readIfPresent(with: ChimeSDKIdentityClientTypes.AppInstanceRetentionSettings.read(from:))
        value.initiateDeletionTimestamp = try reader["InitiateDeletionTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension ListAppInstanceAdminsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAppInstanceAdminsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAppInstanceAdminsOutput()
        value.appInstanceAdmins = try reader["AppInstanceAdmins"].readListIfPresent(memberReadingClosure: ChimeSDKIdentityClientTypes.AppInstanceAdminSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.appInstanceArn = try reader["AppInstanceArn"].readIfPresent()
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListAppInstanceBotsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAppInstanceBotsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAppInstanceBotsOutput()
        value.appInstanceArn = try reader["AppInstanceArn"].readIfPresent()
        value.appInstanceBots = try reader["AppInstanceBots"].readListIfPresent(memberReadingClosure: ChimeSDKIdentityClientTypes.AppInstanceBotSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListAppInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAppInstancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAppInstancesOutput()
        value.appInstances = try reader["AppInstances"].readListIfPresent(memberReadingClosure: ChimeSDKIdentityClientTypes.AppInstanceSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListAppInstanceUserEndpointsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAppInstanceUserEndpointsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAppInstanceUserEndpointsOutput()
        value.appInstanceUserEndpoints = try reader["AppInstanceUserEndpoints"].readListIfPresent(memberReadingClosure: ChimeSDKIdentityClientTypes.AppInstanceUserEndpointSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListAppInstanceUsersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAppInstanceUsersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAppInstanceUsersOutput()
        value.appInstanceArn = try reader["AppInstanceArn"].readIfPresent()
        value.appInstanceUsers = try reader["AppInstanceUsers"].readListIfPresent(memberReadingClosure: ChimeSDKIdentityClientTypes.AppInstanceUserSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: ChimeSDKIdentityClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutAppInstanceRetentionSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAppInstanceRetentionSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutAppInstanceRetentionSettingsOutput()
        value.appInstanceRetentionSettings = try reader["AppInstanceRetentionSettings"].readIfPresent(with: ChimeSDKIdentityClientTypes.AppInstanceRetentionSettings.read(from:))
        value.initiateDeletionTimestamp = try reader["InitiateDeletionTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension PutAppInstanceUserExpirationSettingsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutAppInstanceUserExpirationSettingsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutAppInstanceUserExpirationSettingsOutput()
        value.appInstanceUserArn = try reader["AppInstanceUserArn"].readIfPresent()
        value.expirationSettings = try reader["ExpirationSettings"].readIfPresent(with: ChimeSDKIdentityClientTypes.ExpirationSettings.read(from:))
        return value
    }
}

extension RegisterAppInstanceUserEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegisterAppInstanceUserEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RegisterAppInstanceUserEndpointOutput()
        value.appInstanceUserArn = try reader["AppInstanceUserArn"].readIfPresent()
        value.endpointId = try reader["EndpointId"].readIfPresent()
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateAppInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAppInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAppInstanceOutput()
        value.appInstanceArn = try reader["AppInstanceArn"].readIfPresent()
        return value
    }
}

extension UpdateAppInstanceBotOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAppInstanceBotOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAppInstanceBotOutput()
        value.appInstanceBotArn = try reader["AppInstanceBotArn"].readIfPresent()
        return value
    }
}

extension UpdateAppInstanceUserOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAppInstanceUserOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAppInstanceUserOutput()
        value.appInstanceUserArn = try reader["AppInstanceUserArn"].readIfPresent()
        return value
    }
}

extension UpdateAppInstanceUserEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAppInstanceUserEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAppInstanceUserEndpointOutput()
        value.appInstanceUserArn = try reader["AppInstanceUserArn"].readIfPresent()
        value.endpointId = try reader["EndpointId"].readIfPresent()
        return value
    }
}

enum CreateAppInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAppInstanceAdminOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAppInstanceBotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAppInstanceUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAppInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAppInstanceAdminOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAppInstanceBotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAppInstanceUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeregisterAppInstanceUserEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAppInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAppInstanceAdminOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAppInstanceBotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "NotFoundException": return try NotFoundException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAppInstanceUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAppInstanceUserEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetAppInstanceRetentionSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAppInstanceAdminsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAppInstanceBotsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAppInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAppInstanceUserEndpointsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAppInstanceUsersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAppInstanceRetentionSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutAppInstanceUserExpirationSettingsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegisterAppInstanceUserEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAppInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAppInstanceBotOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAppInstanceUserOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAppInstanceUserEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BadRequestException": return try BadRequestException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ForbiddenException": return try ForbiddenException.makeError(baseError: baseError)
            case "ServiceFailureException": return try ServiceFailureException.makeError(baseError: baseError)
            case "ServiceUnavailableException": return try ServiceUnavailableException.makeError(baseError: baseError)
            case "ThrottledClientException": return try ThrottledClientException.makeError(baseError: baseError)
            case "UnauthorizedClientException": return try UnauthorizedClientException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ThrottledClientException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottledClientException {
        let reader = baseError.errorBodyReader
        var value = ThrottledClientException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BadRequestException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> BadRequestException {
        let reader = baseError.errorBodyReader
        var value = BadRequestException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = ResourceLimitExceededException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ServiceUnavailableException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ForbiddenException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ForbiddenException {
        let reader = baseError.errorBodyReader
        var value = ForbiddenException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnauthorizedClientException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> UnauthorizedClientException {
        let reader = baseError.errorBodyReader
        var value = UnauthorizedClientException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceFailureException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceFailureException {
        let reader = baseError.errorBodyReader
        var value = ServiceFailureException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension NotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> NotFoundException {
        let reader = baseError.errorBodyReader
        var value = NotFoundException()
        value.properties.code = try reader["Code"].readIfPresent()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ChimeSDKIdentityClientTypes.Identity {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.Identity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.Identity()
        value.arn = try reader["Arn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        return value
    }
}

extension ChimeSDKIdentityClientTypes.AppInstance {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.AppInstance {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.AppInstance()
        value.appInstanceArn = try reader["AppInstanceArn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedTimestamp = try reader["LastUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.metadata = try reader["Metadata"].readIfPresent()
        return value
    }
}

extension ChimeSDKIdentityClientTypes.AppInstanceAdmin {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.AppInstanceAdmin {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.AppInstanceAdmin()
        value.admin = try reader["Admin"].readIfPresent(with: ChimeSDKIdentityClientTypes.Identity.read(from:))
        value.appInstanceArn = try reader["AppInstanceArn"].readIfPresent()
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension ChimeSDKIdentityClientTypes.AppInstanceBot {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.AppInstanceBot {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.AppInstanceBot()
        value.appInstanceBotArn = try reader["AppInstanceBotArn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.configuration = try reader["Configuration"].readIfPresent(with: ChimeSDKIdentityClientTypes.Configuration.read(from:))
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedTimestamp = try reader["LastUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.metadata = try reader["Metadata"].readIfPresent()
        return value
    }
}

extension ChimeSDKIdentityClientTypes.Configuration {

    static func write(value: ChimeSDKIdentityClientTypes.Configuration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Lex"].write(value.lex, with: ChimeSDKIdentityClientTypes.LexConfiguration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.Configuration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.Configuration()
        value.lex = try reader["Lex"].readIfPresent(with: ChimeSDKIdentityClientTypes.LexConfiguration.read(from:))
        return value
    }
}

extension ChimeSDKIdentityClientTypes.LexConfiguration {

    static func write(value: ChimeSDKIdentityClientTypes.LexConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InvokedBy"].write(value.invokedBy, with: ChimeSDKIdentityClientTypes.InvokedBy.write(value:to:))
        try writer["LexBotAliasArn"].write(value.lexBotAliasArn)
        try writer["LocaleId"].write(value.localeId)
        try writer["RespondsTo"].write(value.respondsTo)
        try writer["WelcomeIntent"].write(value.welcomeIntent)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.LexConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.LexConfiguration()
        value.respondsTo = try reader["RespondsTo"].readIfPresent()
        value.invokedBy = try reader["InvokedBy"].readIfPresent(with: ChimeSDKIdentityClientTypes.InvokedBy.read(from:))
        value.lexBotAliasArn = try reader["LexBotAliasArn"].readIfPresent() ?? ""
        value.localeId = try reader["LocaleId"].readIfPresent() ?? ""
        value.welcomeIntent = try reader["WelcomeIntent"].readIfPresent()
        return value
    }
}

extension ChimeSDKIdentityClientTypes.InvokedBy {

    static func write(value: ChimeSDKIdentityClientTypes.InvokedBy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["StandardMessages"].write(value.standardMessages)
        try writer["TargetedMessages"].write(value.targetedMessages)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.InvokedBy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.InvokedBy()
        value.standardMessages = try reader["StandardMessages"].readIfPresent() ?? .sdkUnknown("")
        value.targetedMessages = try reader["TargetedMessages"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension ChimeSDKIdentityClientTypes.AppInstanceUser {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.AppInstanceUser {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.AppInstanceUser()
        value.appInstanceUserArn = try reader["AppInstanceUserArn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.metadata = try reader["Metadata"].readIfPresent()
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedTimestamp = try reader["LastUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.expirationSettings = try reader["ExpirationSettings"].readIfPresent(with: ChimeSDKIdentityClientTypes.ExpirationSettings.read(from:))
        return value
    }
}

extension ChimeSDKIdentityClientTypes.ExpirationSettings {

    static func write(value: ChimeSDKIdentityClientTypes.ExpirationSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExpirationCriterion"].write(value.expirationCriterion)
        try writer["ExpirationDays"].write(value.expirationDays)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.ExpirationSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.ExpirationSettings()
        value.expirationDays = try reader["ExpirationDays"].readIfPresent() ?? 0
        value.expirationCriterion = try reader["ExpirationCriterion"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension ChimeSDKIdentityClientTypes.AppInstanceUserEndpoint {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.AppInstanceUserEndpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.AppInstanceUserEndpoint()
        value.appInstanceUserArn = try reader["AppInstanceUserArn"].readIfPresent()
        value.endpointId = try reader["EndpointId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.resourceArn = try reader["ResourceArn"].readIfPresent()
        value.endpointAttributes = try reader["EndpointAttributes"].readIfPresent(with: ChimeSDKIdentityClientTypes.EndpointAttributes.read(from:))
        value.createdTimestamp = try reader["CreatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedTimestamp = try reader["LastUpdatedTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.allowMessages = try reader["AllowMessages"].readIfPresent()
        value.endpointState = try reader["EndpointState"].readIfPresent(with: ChimeSDKIdentityClientTypes.EndpointState.read(from:))
        return value
    }
}

extension ChimeSDKIdentityClientTypes.EndpointState {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.EndpointState {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.EndpointState()
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.statusReason = try reader["StatusReason"].readIfPresent()
        return value
    }
}

extension ChimeSDKIdentityClientTypes.EndpointAttributes {

    static func write(value: ChimeSDKIdentityClientTypes.EndpointAttributes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeviceToken"].write(value.deviceToken)
        try writer["VoipDeviceToken"].write(value.voipDeviceToken)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.EndpointAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.EndpointAttributes()
        value.deviceToken = try reader["DeviceToken"].readIfPresent() ?? ""
        value.voipDeviceToken = try reader["VoipDeviceToken"].readIfPresent()
        return value
    }
}

extension ChimeSDKIdentityClientTypes.AppInstanceRetentionSettings {

    static func write(value: ChimeSDKIdentityClientTypes.AppInstanceRetentionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChannelRetentionSettings"].write(value.channelRetentionSettings, with: ChimeSDKIdentityClientTypes.ChannelRetentionSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.AppInstanceRetentionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.AppInstanceRetentionSettings()
        value.channelRetentionSettings = try reader["ChannelRetentionSettings"].readIfPresent(with: ChimeSDKIdentityClientTypes.ChannelRetentionSettings.read(from:))
        return value
    }
}

extension ChimeSDKIdentityClientTypes.ChannelRetentionSettings {

    static func write(value: ChimeSDKIdentityClientTypes.ChannelRetentionSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RetentionDays"].write(value.retentionDays)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.ChannelRetentionSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.ChannelRetentionSettings()
        value.retentionDays = try reader["RetentionDays"].readIfPresent()
        return value
    }
}

extension ChimeSDKIdentityClientTypes.AppInstanceAdminSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.AppInstanceAdminSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.AppInstanceAdminSummary()
        value.admin = try reader["Admin"].readIfPresent(with: ChimeSDKIdentityClientTypes.Identity.read(from:))
        return value
    }
}

extension ChimeSDKIdentityClientTypes.AppInstanceBotSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.AppInstanceBotSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.AppInstanceBotSummary()
        value.appInstanceBotArn = try reader["AppInstanceBotArn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.metadata = try reader["Metadata"].readIfPresent()
        return value
    }
}

extension ChimeSDKIdentityClientTypes.AppInstanceSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.AppInstanceSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.AppInstanceSummary()
        value.appInstanceArn = try reader["AppInstanceArn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.metadata = try reader["Metadata"].readIfPresent()
        return value
    }
}

extension ChimeSDKIdentityClientTypes.AppInstanceUserEndpointSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.AppInstanceUserEndpointSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.AppInstanceUserEndpointSummary()
        value.appInstanceUserArn = try reader["AppInstanceUserArn"].readIfPresent()
        value.endpointId = try reader["EndpointId"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.allowMessages = try reader["AllowMessages"].readIfPresent()
        value.endpointState = try reader["EndpointState"].readIfPresent(with: ChimeSDKIdentityClientTypes.EndpointState.read(from:))
        return value
    }
}

extension ChimeSDKIdentityClientTypes.AppInstanceUserSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.AppInstanceUserSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.AppInstanceUserSummary()
        value.appInstanceUserArn = try reader["AppInstanceUserArn"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.metadata = try reader["Metadata"].readIfPresent()
        return value
    }
}

extension ChimeSDKIdentityClientTypes.Tag {

    static func write(value: ChimeSDKIdentityClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ChimeSDKIdentityClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ChimeSDKIdentityClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

public enum ChimeSDKIdentityClientTypes {}
