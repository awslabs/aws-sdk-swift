// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

extension ChimeSDKIdentityClient {
    /// Paginate over `[ListAppInstanceAdminsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAppInstanceAdminsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAppInstanceAdminsOutput`
    public func listAppInstanceAdminsPaginated(input: ListAppInstanceAdminsInput) -> ClientRuntime.PaginatorSequence<ListAppInstanceAdminsInput, ListAppInstanceAdminsOutput> {
        return ClientRuntime.PaginatorSequence<ListAppInstanceAdminsInput, ListAppInstanceAdminsOutput>(input: input, inputKey: \ListAppInstanceAdminsInput.nextToken, outputKey: \ListAppInstanceAdminsOutput.nextToken, paginationFunction: self.listAppInstanceAdmins(input:))
    }
}

extension ListAppInstanceAdminsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAppInstanceAdminsInput {
        return ListAppInstanceAdminsInput(
            appInstanceArn: self.appInstanceArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ChimeSDKIdentityClient {
    /// Paginate over `[ListAppInstanceBotsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAppInstanceBotsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAppInstanceBotsOutput`
    public func listAppInstanceBotsPaginated(input: ListAppInstanceBotsInput) -> ClientRuntime.PaginatorSequence<ListAppInstanceBotsInput, ListAppInstanceBotsOutput> {
        return ClientRuntime.PaginatorSequence<ListAppInstanceBotsInput, ListAppInstanceBotsOutput>(input: input, inputKey: \ListAppInstanceBotsInput.nextToken, outputKey: \ListAppInstanceBotsOutput.nextToken, paginationFunction: self.listAppInstanceBots(input:))
    }
}

extension ListAppInstanceBotsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAppInstanceBotsInput {
        return ListAppInstanceBotsInput(
            appInstanceArn: self.appInstanceArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ChimeSDKIdentityClient {
    /// Paginate over `[ListAppInstancesOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAppInstancesInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAppInstancesOutput`
    public func listAppInstancesPaginated(input: ListAppInstancesInput) -> ClientRuntime.PaginatorSequence<ListAppInstancesInput, ListAppInstancesOutput> {
        return ClientRuntime.PaginatorSequence<ListAppInstancesInput, ListAppInstancesOutput>(input: input, inputKey: \ListAppInstancesInput.nextToken, outputKey: \ListAppInstancesOutput.nextToken, paginationFunction: self.listAppInstances(input:))
    }
}

extension ListAppInstancesInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAppInstancesInput {
        return ListAppInstancesInput(
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ChimeSDKIdentityClient {
    /// Paginate over `[ListAppInstanceUserEndpointsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAppInstanceUserEndpointsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAppInstanceUserEndpointsOutput`
    public func listAppInstanceUserEndpointsPaginated(input: ListAppInstanceUserEndpointsInput) -> ClientRuntime.PaginatorSequence<ListAppInstanceUserEndpointsInput, ListAppInstanceUserEndpointsOutput> {
        return ClientRuntime.PaginatorSequence<ListAppInstanceUserEndpointsInput, ListAppInstanceUserEndpointsOutput>(input: input, inputKey: \ListAppInstanceUserEndpointsInput.nextToken, outputKey: \ListAppInstanceUserEndpointsOutput.nextToken, paginationFunction: self.listAppInstanceUserEndpoints(input:))
    }
}

extension ListAppInstanceUserEndpointsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAppInstanceUserEndpointsInput {
        return ListAppInstanceUserEndpointsInput(
            appInstanceUserArn: self.appInstanceUserArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
extension ChimeSDKIdentityClient {
    /// Paginate over `[ListAppInstanceUsersOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListAppInstanceUsersInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListAppInstanceUsersOutput`
    public func listAppInstanceUsersPaginated(input: ListAppInstanceUsersInput) -> ClientRuntime.PaginatorSequence<ListAppInstanceUsersInput, ListAppInstanceUsersOutput> {
        return ClientRuntime.PaginatorSequence<ListAppInstanceUsersInput, ListAppInstanceUsersOutput>(input: input, inputKey: \ListAppInstanceUsersInput.nextToken, outputKey: \ListAppInstanceUsersOutput.nextToken, paginationFunction: self.listAppInstanceUsers(input:))
    }
}

extension ListAppInstanceUsersInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListAppInstanceUsersInput {
        return ListAppInstanceUsersInput(
            appInstanceArn: self.appInstanceArn,
            maxResults: self.maxResults,
            nextToken: token
        )}
}
