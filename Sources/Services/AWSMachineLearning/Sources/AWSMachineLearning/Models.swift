//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPRequest
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.Interceptor
import protocol ClientRuntime.ModeledError
import protocol ClientRuntime.MutableInput
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError

/// An error on the server occurred when trying to process a request.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.Int = 0
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// An error on the client occurred. Typically, the cause is an invalid input value.
public struct InvalidInputException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.Int = 0
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidInputException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

public struct InvalidTagException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidTagException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// A specified resource cannot be located.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.Int = 0
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

public struct TagLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TagLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension MachineLearningClientTypes {

    public enum TaggableResourceType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case batchPrediction
        case datasource
        case evaluation
        case mlModel
        case sdkUnknown(Swift.String)

        public static var allCases: [TaggableResourceType] {
            return [
                .batchPrediction,
                .datasource,
                .evaluation,
                .mlModel
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .batchPrediction: return "BatchPrediction"
            case .datasource: return "DataSource"
            case .evaluation: return "Evaluation"
            case .mlModel: return "MLModel"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MachineLearningClientTypes {

    /// A custom key-value pair associated with an ML object, such as an ML model.
    public struct Tag: Swift.Sendable {
        /// A unique identifier for the tag. Valid characters include Unicode letters, digits, white space, _, ., /, =, +, -, %, and @.
        public var key: Swift.String?
        /// An optional string, typically used to describe or define the tag. Valid characters include Unicode letters, digits, white space, _, ., /, =, +, -, %, and @.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

public struct AddTagsInput: Swift.Sendable {
    /// The ID of the ML object to tag. For example, exampleModelId.
    /// This member is required.
    public var resourceId: Swift.String?
    /// The type of the ML object to tag.
    /// This member is required.
    public var resourceType: MachineLearningClientTypes.TaggableResourceType?
    /// The key-value pairs to use to create tags. If you specify a key without specifying a value, Amazon ML creates a tag with the specified key and a value of null.
    /// This member is required.
    public var tags: [MachineLearningClientTypes.Tag]?

    public init(
        resourceId: Swift.String? = nil,
        resourceType: MachineLearningClientTypes.TaggableResourceType? = nil,
        tags: [MachineLearningClientTypes.Tag]? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
        self.tags = tags
    }
}

/// Amazon ML returns the following elements.
public struct AddTagsOutput: Swift.Sendable {
    /// The ID of the ML object that was tagged.
    public var resourceId: Swift.String?
    /// The type of the ML object that was tagged.
    public var resourceType: MachineLearningClientTypes.TaggableResourceType?

    public init(
        resourceId: Swift.String? = nil,
        resourceType: MachineLearningClientTypes.TaggableResourceType? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

extension MachineLearningClientTypes {

    /// The function used to train an MLModel. Training choices supported by Amazon ML include the following:
    ///
    /// * SGD - Stochastic Gradient Descent.
    ///
    /// * RandomForest - Random forest of decision trees.
    public enum Algorithm: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case sgd
        case sdkUnknown(Swift.String)

        public static var allCases: [Algorithm] {
            return [
                .sgd
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .sgd: return "sgd"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// A second request to use or change an object was not allowed. This can result from retrying a request using a parameter that was not present in the original request.
public struct IdempotentParameterMismatchException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.Int = 0
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "IdempotentParameterMismatchException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

public struct CreateBatchPredictionInput: Swift.Sendable {
    /// The ID of the DataSource that points to the group of observations to predict.
    /// This member is required.
    public var batchPredictionDataSourceId: Swift.String?
    /// A user-supplied ID that uniquely identifies the BatchPrediction.
    /// This member is required.
    public var batchPredictionId: Swift.String?
    /// A user-supplied name or description of the BatchPrediction. BatchPredictionName can only use the UTF-8 character set.
    public var batchPredictionName: Swift.String?
    /// The ID of the MLModel that will generate predictions for the group of observations.
    /// This member is required.
    public var mlModelId: Swift.String?
    /// The location of an Amazon Simple Storage Service (Amazon S3) bucket or directory to store the batch prediction results. The following substrings are not allowed in the s3 key portion of the outputURI field: ':', '//', '/./', '/../'. Amazon ML needs permissions to store and retrieve the logs on your behalf. For information about how to set permissions, see the [Amazon Machine Learning Developer Guide](https://docs.aws.amazon.com/machine-learning/latest/dg).
    /// This member is required.
    public var outputUri: Swift.String?

    public init(
        batchPredictionDataSourceId: Swift.String? = nil,
        batchPredictionId: Swift.String? = nil,
        batchPredictionName: Swift.String? = nil,
        mlModelId: Swift.String? = nil,
        outputUri: Swift.String? = nil
    )
    {
        self.batchPredictionDataSourceId = batchPredictionDataSourceId
        self.batchPredictionId = batchPredictionId
        self.batchPredictionName = batchPredictionName
        self.mlModelId = mlModelId
        self.outputUri = outputUri
    }
}

/// Represents the output of a CreateBatchPrediction operation, and is an acknowledgement that Amazon ML received the request. The CreateBatchPrediction operation is asynchronous. You can poll for status updates by using the >GetBatchPrediction operation and checking the Status parameter of the result.
public struct CreateBatchPredictionOutput: Swift.Sendable {
    /// A user-supplied ID that uniquely identifies the BatchPrediction. This value is identical to the value of the BatchPredictionId in the request.
    public var batchPredictionId: Swift.String?

    public init(
        batchPredictionId: Swift.String? = nil
    )
    {
        self.batchPredictionId = batchPredictionId
    }
}

extension MachineLearningClientTypes {

    /// The database credentials to connect to a database on an RDS DB instance.
    public struct RDSDatabaseCredentials: Swift.Sendable {
        /// The password to be used by Amazon ML to connect to a database on an RDS DB instance. The password should have sufficient permissions to execute the RDSSelectQuery query.
        /// This member is required.
        public var password: Swift.String?
        /// The username to be used by Amazon ML to connect to database on an Amazon RDS instance. The username should have sufficient permissions to execute an RDSSelectSqlQuery query.
        /// This member is required.
        public var username: Swift.String?

        public init(
            password: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.password = password
            self.username = username
        }
    }
}

extension MachineLearningClientTypes.RDSDatabaseCredentials: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RDSDatabaseCredentials(username: \(Swift.String(describing: username)), password: \"CONTENT_REDACTED\")"}
}

extension MachineLearningClientTypes {

    /// The database details of an Amazon RDS database.
    public struct RDSDatabase: Swift.Sendable {
        /// The name of a database hosted on an RDS DB instance.
        /// This member is required.
        public var databaseName: Swift.String?
        /// The ID of an RDS DB instance.
        /// This member is required.
        public var instanceIdentifier: Swift.String?

        public init(
            databaseName: Swift.String? = nil,
            instanceIdentifier: Swift.String? = nil
        )
        {
            self.databaseName = databaseName
            self.instanceIdentifier = instanceIdentifier
        }
    }
}

extension MachineLearningClientTypes {

    /// The data specification of an Amazon Relational Database Service (Amazon RDS) DataSource.
    public struct RDSDataSpec: Swift.Sendable {
        /// A JSON string that represents the splitting and rearrangement processing to be applied to a DataSource. If the DataRearrangement parameter is not provided, all of the input data is used to create the Datasource. There are multiple parameters that control what data is used to create a datasource:
        ///
        /// * percentBegin Use percentBegin to indicate the beginning of the range of the data used to create the Datasource. If you do not include percentBegin and percentEnd, Amazon ML includes all of the data when creating the datasource.
        ///
        /// * percentEnd Use percentEnd to indicate the end of the range of the data used to create the Datasource. If you do not include percentBegin and percentEnd, Amazon ML includes all of the data when creating the datasource.
        ///
        /// * complement The complement parameter instructs Amazon ML to use the data that is not included in the range of percentBegin to percentEnd to create a datasource. The complement parameter is useful if you need to create complementary datasources for training and evaluation. To create a complementary datasource, use the same values for percentBegin and percentEnd, along with the complement parameter. For example, the following two datasources do not share any data, and can be used to train and evaluate a model. The first datasource has 25 percent of the data, and the second one has 75 percent of the data. Datasource for evaluation: {"splitting":{"percentBegin":0, "percentEnd":25}} Datasource for training: {"splitting":{"percentBegin":0, "percentEnd":25, "complement":"true"}}
        ///
        /// * strategy To change how Amazon ML splits the data for a datasource, use the strategy parameter. The default value for the strategy parameter is sequential, meaning that Amazon ML takes all of the data records between the percentBegin and percentEnd parameters for the datasource, in the order that the records appear in the input data. The following two DataRearrangement lines are examples of sequentially ordered training and evaluation datasources: Datasource for evaluation: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential"}} Datasource for training: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential", "complement":"true"}} To randomly split the input data into the proportions indicated by the percentBegin and percentEnd parameters, set the strategy parameter to random and provide a string that is used as the seed value for the random data splitting (for example, you can use the S3 path to your data as the random seed string). If you choose the random split strategy, Amazon ML assigns each row of data a pseudo-random number between 0 and 100, and then selects the rows that have an assigned number between percentBegin and percentEnd. Pseudo-random numbers are assigned using both the input seed string value and the byte offset as a seed, so changing the data results in a different split. Any existing ordering is preserved. The random splitting strategy ensures that variables in the training and evaluation data are distributed similarly. It is useful in the cases where the input data may have an implicit sort order, which would otherwise result in training and evaluation datasources containing non-similar data records. The following two DataRearrangement lines are examples of non-sequentially ordered training and evaluation datasources: Datasource for evaluation: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv"}} Datasource for training: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv", "complement":"true"}}
        public var dataRearrangement: Swift.String?
        /// A JSON string that represents the schema for an Amazon RDS DataSource. The DataSchema defines the structure of the observation data in the data file(s) referenced in the DataSource. A DataSchema is not required if you specify a DataSchemaUri Define your DataSchema as a series of key-value pairs. attributes and excludedVariableNames have an array of key-value pairs for their value. Use the following format to define your DataSchema. { "version": "1.0", "recordAnnotationFieldName": "F1", "recordWeightFieldName": "F2", "targetFieldName": "F3", "dataFormat": "CSV", "dataFileContainsHeader": true, "attributes": [ { "fieldName": "F1", "fieldType": "TEXT" }, { "fieldName": "F2", "fieldType": "NUMERIC" }, { "fieldName": "F3", "fieldType": "CATEGORICAL" }, { "fieldName": "F4", "fieldType": "NUMERIC" }, { "fieldName": "F5", "fieldType": "CATEGORICAL" }, { "fieldName": "F6", "fieldType": "TEXT" }, { "fieldName": "F7", "fieldType": "WEIGHTED_INT_SEQUENCE" }, { "fieldName": "F8", "fieldType": "WEIGHTED_STRING_SEQUENCE" } ], "excludedVariableNames": [ "F6" ] }
        public var dataSchema: Swift.String?
        /// The Amazon S3 location of the DataSchema.
        public var dataSchemaUri: Swift.String?
        /// The AWS Identity and Access Management (IAM) credentials that are used connect to the Amazon RDS database.
        /// This member is required.
        public var databaseCredentials: MachineLearningClientTypes.RDSDatabaseCredentials?
        /// Describes the DatabaseName and InstanceIdentifier of an Amazon RDS database.
        /// This member is required.
        public var databaseInformation: MachineLearningClientTypes.RDSDatabase?
        /// The role (DataPipelineDefaultResourceRole) assumed by an Amazon Elastic Compute Cloud (Amazon EC2) instance to carry out the copy operation from Amazon RDS to an Amazon S3 task. For more information, see [Role templates](https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html) for data pipelines.
        /// This member is required.
        public var resourceRole: Swift.String?
        /// The Amazon S3 location for staging Amazon RDS data. The data retrieved from Amazon RDS using SelectSqlQuery is stored in this location.
        /// This member is required.
        public var s3StagingLocation: Swift.String?
        /// The security group IDs to be used to access a VPC-based RDS DB instance. Ensure that there are appropriate ingress rules set up to allow access to the RDS DB instance. This attribute is used by Data Pipeline to carry out the copy operation from Amazon RDS to an Amazon S3 task.
        /// This member is required.
        public var securityGroupIds: [Swift.String]?
        /// The query that is used to retrieve the observation data for the DataSource.
        /// This member is required.
        public var selectSqlQuery: Swift.String?
        /// The role (DataPipelineDefaultRole) assumed by AWS Data Pipeline service to monitor the progress of the copy task from Amazon RDS to Amazon S3. For more information, see [Role templates](https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html) for data pipelines.
        /// This member is required.
        public var serviceRole: Swift.String?
        /// The subnet ID to be used to access a VPC-based RDS DB instance. This attribute is used by Data Pipeline to carry out the copy task from Amazon RDS to Amazon S3.
        /// This member is required.
        public var subnetId: Swift.String?

        public init(
            dataRearrangement: Swift.String? = nil,
            dataSchema: Swift.String? = nil,
            dataSchemaUri: Swift.String? = nil,
            databaseCredentials: MachineLearningClientTypes.RDSDatabaseCredentials? = nil,
            databaseInformation: MachineLearningClientTypes.RDSDatabase? = nil,
            resourceRole: Swift.String? = nil,
            s3StagingLocation: Swift.String? = nil,
            securityGroupIds: [Swift.String]? = nil,
            selectSqlQuery: Swift.String? = nil,
            serviceRole: Swift.String? = nil,
            subnetId: Swift.String? = nil
        )
        {
            self.dataRearrangement = dataRearrangement
            self.dataSchema = dataSchema
            self.dataSchemaUri = dataSchemaUri
            self.databaseCredentials = databaseCredentials
            self.databaseInformation = databaseInformation
            self.resourceRole = resourceRole
            self.s3StagingLocation = s3StagingLocation
            self.securityGroupIds = securityGroupIds
            self.selectSqlQuery = selectSqlQuery
            self.serviceRole = serviceRole
            self.subnetId = subnetId
        }
    }
}

public struct CreateDataSourceFromRDSInput: Swift.Sendable {
    /// The compute statistics for a DataSource. The statistics are generated from the observation data referenced by a DataSource. Amazon ML uses the statistics internally during MLModel training. This parameter must be set to true if the DataSource needs to be used for MLModel training.
    public var computeStatistics: Swift.Bool?
    /// A user-supplied ID that uniquely identifies the DataSource. Typically, an Amazon Resource Number (ARN) becomes the ID for a DataSource.
    /// This member is required.
    public var dataSourceId: Swift.String?
    /// A user-supplied name or description of the DataSource.
    public var dataSourceName: Swift.String?
    /// The data specification of an Amazon RDS DataSource:
    ///
    /// * DatabaseInformation -
    ///
    /// * DatabaseName - The name of the Amazon RDS database.
    ///
    /// * InstanceIdentifier  - A unique identifier for the Amazon RDS database instance.
    ///
    ///
    ///
    ///
    /// * DatabaseCredentials - AWS Identity and Access Management (IAM) credentials that are used to connect to the Amazon RDS database.
    ///
    /// * ResourceRole - A role (DataPipelineDefaultResourceRole) assumed by an EC2 instance to carry out the copy task from Amazon RDS to Amazon Simple Storage Service (Amazon S3). For more information, see [Role templates](https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html) for data pipelines.
    ///
    /// * ServiceRole - A role (DataPipelineDefaultRole) assumed by the AWS Data Pipeline service to monitor the progress of the copy task from Amazon RDS to Amazon S3. For more information, see [Role templates](https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html) for data pipelines.
    ///
    /// * SecurityInfo - The security information to use to access an RDS DB instance. You need to set up appropriate ingress rules for the security entity IDs provided to allow access to the Amazon RDS instance. Specify a [SubnetId, SecurityGroupIds] pair for a VPC-based RDS DB instance.
    ///
    /// * SelectSqlQuery - A query that is used to retrieve the observation data for the Datasource.
    ///
    /// * S3StagingLocation - The Amazon S3 location for staging Amazon RDS data. The data retrieved from Amazon RDS using SelectSqlQuery is stored in this location.
    ///
    /// * DataSchemaUri - The Amazon S3 location of the DataSchema.
    ///
    /// * DataSchema - A JSON string representing the schema. This is not required if DataSchemaUri is specified.
    ///
    /// * DataRearrangement - A JSON string that represents the splitting and rearrangement requirements for the Datasource. Sample -  "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"
    /// This member is required.
    public var rdsData: MachineLearningClientTypes.RDSDataSpec?
    /// The role that Amazon ML assumes on behalf of the user to create and activate a data pipeline in the user's account and copy data using the SelectSqlQuery query from Amazon RDS to Amazon S3.
    /// This member is required.
    public var roleARN: Swift.String?

    public init(
        computeStatistics: Swift.Bool? = false,
        dataSourceId: Swift.String? = nil,
        dataSourceName: Swift.String? = nil,
        rdsData: MachineLearningClientTypes.RDSDataSpec? = nil,
        roleARN: Swift.String? = nil
    )
    {
        self.computeStatistics = computeStatistics
        self.dataSourceId = dataSourceId
        self.dataSourceName = dataSourceName
        self.rdsData = rdsData
        self.roleARN = roleARN
    }
}

/// Represents the output of a CreateDataSourceFromRDS operation, and is an acknowledgement that Amazon ML received the request. The CreateDataSourceFromRDS> operation is asynchronous. You can poll for updates by using the GetBatchPrediction operation and checking the Status parameter. You can inspect the Message when Status shows up as FAILED. You can also check the progress of the copy operation by going to the DataPipeline console and looking up the pipeline using the pipelineId  from the describe call.
public struct CreateDataSourceFromRDSOutput: Swift.Sendable {
    /// A user-supplied ID that uniquely identifies the datasource. This value should be identical to the value of the DataSourceID in the request.
    public var dataSourceId: Swift.String?

    public init(
        dataSourceId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
    }
}

extension MachineLearningClientTypes {

    /// Describes the database credentials for connecting to a database on an Amazon Redshift cluster.
    public struct RedshiftDatabaseCredentials: Swift.Sendable {
        /// A password to be used by Amazon ML to connect to a database on an Amazon Redshift cluster. The password should have sufficient permissions to execute a RedshiftSelectSqlQuery query. The password should be valid for an Amazon Redshift [USER](https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html).
        /// This member is required.
        public var password: Swift.String?
        /// A username to be used by Amazon Machine Learning (Amazon ML)to connect to a database on an Amazon Redshift cluster. The username should have sufficient permissions to execute the RedshiftSelectSqlQuery query. The username should be valid for an Amazon Redshift [USER](https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html).
        /// This member is required.
        public var username: Swift.String?

        public init(
            password: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.password = password
            self.username = username
        }
    }
}

extension MachineLearningClientTypes.RedshiftDatabaseCredentials: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RedshiftDatabaseCredentials(username: \(Swift.String(describing: username)), password: \"CONTENT_REDACTED\")"}
}

extension MachineLearningClientTypes {

    /// Describes the database details required to connect to an Amazon Redshift database.
    public struct RedshiftDatabase: Swift.Sendable {
        /// The ID of an Amazon Redshift cluster.
        /// This member is required.
        public var clusterIdentifier: Swift.String?
        /// The name of a database hosted on an Amazon Redshift cluster.
        /// This member is required.
        public var databaseName: Swift.String?

        public init(
            clusterIdentifier: Swift.String? = nil,
            databaseName: Swift.String? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
            self.databaseName = databaseName
        }
    }
}

extension MachineLearningClientTypes {

    /// Describes the data specification of an Amazon Redshift DataSource.
    public struct RedshiftDataSpec: Swift.Sendable {
        /// A JSON string that represents the splitting and rearrangement processing to be applied to a DataSource. If the DataRearrangement parameter is not provided, all of the input data is used to create the Datasource. There are multiple parameters that control what data is used to create a datasource:
        ///
        /// * percentBegin Use percentBegin to indicate the beginning of the range of the data used to create the Datasource. If you do not include percentBegin and percentEnd, Amazon ML includes all of the data when creating the datasource.
        ///
        /// * percentEnd Use percentEnd to indicate the end of the range of the data used to create the Datasource. If you do not include percentBegin and percentEnd, Amazon ML includes all of the data when creating the datasource.
        ///
        /// * complement The complement parameter instructs Amazon ML to use the data that is not included in the range of percentBegin to percentEnd to create a datasource. The complement parameter is useful if you need to create complementary datasources for training and evaluation. To create a complementary datasource, use the same values for percentBegin and percentEnd, along with the complement parameter. For example, the following two datasources do not share any data, and can be used to train and evaluate a model. The first datasource has 25 percent of the data, and the second one has 75 percent of the data. Datasource for evaluation: {"splitting":{"percentBegin":0, "percentEnd":25}} Datasource for training: {"splitting":{"percentBegin":0, "percentEnd":25, "complement":"true"}}
        ///
        /// * strategy To change how Amazon ML splits the data for a datasource, use the strategy parameter. The default value for the strategy parameter is sequential, meaning that Amazon ML takes all of the data records between the percentBegin and percentEnd parameters for the datasource, in the order that the records appear in the input data. The following two DataRearrangement lines are examples of sequentially ordered training and evaluation datasources: Datasource for evaluation: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential"}} Datasource for training: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential", "complement":"true"}} To randomly split the input data into the proportions indicated by the percentBegin and percentEnd parameters, set the strategy parameter to random and provide a string that is used as the seed value for the random data splitting (for example, you can use the S3 path to your data as the random seed string). If you choose the random split strategy, Amazon ML assigns each row of data a pseudo-random number between 0 and 100, and then selects the rows that have an assigned number between percentBegin and percentEnd. Pseudo-random numbers are assigned using both the input seed string value and the byte offset as a seed, so changing the data results in a different split. Any existing ordering is preserved. The random splitting strategy ensures that variables in the training and evaluation data are distributed similarly. It is useful in the cases where the input data may have an implicit sort order, which would otherwise result in training and evaluation datasources containing non-similar data records. The following two DataRearrangement lines are examples of non-sequentially ordered training and evaluation datasources: Datasource for evaluation: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv"}} Datasource for training: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv", "complement":"true"}}
        public var dataRearrangement: Swift.String?
        /// A JSON string that represents the schema for an Amazon Redshift DataSource. The DataSchema defines the structure of the observation data in the data file(s) referenced in the DataSource. A DataSchema is not required if you specify a DataSchemaUri. Define your DataSchema as a series of key-value pairs. attributes and excludedVariableNames have an array of key-value pairs for their value. Use the following format to define your DataSchema. { "version": "1.0", "recordAnnotationFieldName": "F1", "recordWeightFieldName": "F2", "targetFieldName": "F3", "dataFormat": "CSV", "dataFileContainsHeader": true, "attributes": [ { "fieldName": "F1", "fieldType": "TEXT" }, { "fieldName": "F2", "fieldType": "NUMERIC" }, { "fieldName": "F3", "fieldType": "CATEGORICAL" }, { "fieldName": "F4", "fieldType": "NUMERIC" }, { "fieldName": "F5", "fieldType": "CATEGORICAL" }, { "fieldName": "F6", "fieldType": "TEXT" }, { "fieldName": "F7", "fieldType": "WEIGHTED_INT_SEQUENCE" }, { "fieldName": "F8", "fieldType": "WEIGHTED_STRING_SEQUENCE" } ], "excludedVariableNames": [ "F6" ] }
        public var dataSchema: Swift.String?
        /// Describes the schema location for an Amazon Redshift DataSource.
        public var dataSchemaUri: Swift.String?
        /// Describes AWS Identity and Access Management (IAM) credentials that are used connect to the Amazon Redshift database.
        /// This member is required.
        public var databaseCredentials: MachineLearningClientTypes.RedshiftDatabaseCredentials?
        /// Describes the DatabaseName and ClusterIdentifier for an Amazon Redshift DataSource.
        /// This member is required.
        public var databaseInformation: MachineLearningClientTypes.RedshiftDatabase?
        /// Describes an Amazon S3 location to store the result set of the SelectSqlQuery query.
        /// This member is required.
        public var s3StagingLocation: Swift.String?
        /// Describes the SQL Query to execute on an Amazon Redshift database for an Amazon Redshift DataSource.
        /// This member is required.
        public var selectSqlQuery: Swift.String?

        public init(
            dataRearrangement: Swift.String? = nil,
            dataSchema: Swift.String? = nil,
            dataSchemaUri: Swift.String? = nil,
            databaseCredentials: MachineLearningClientTypes.RedshiftDatabaseCredentials? = nil,
            databaseInformation: MachineLearningClientTypes.RedshiftDatabase? = nil,
            s3StagingLocation: Swift.String? = nil,
            selectSqlQuery: Swift.String? = nil
        )
        {
            self.dataRearrangement = dataRearrangement
            self.dataSchema = dataSchema
            self.dataSchemaUri = dataSchemaUri
            self.databaseCredentials = databaseCredentials
            self.databaseInformation = databaseInformation
            self.s3StagingLocation = s3StagingLocation
            self.selectSqlQuery = selectSqlQuery
        }
    }
}

public struct CreateDataSourceFromRedshiftInput: Swift.Sendable {
    /// The compute statistics for a DataSource. The statistics are generated from the observation data referenced by a DataSource. Amazon ML uses the statistics internally during MLModel training. This parameter must be set to true if the DataSource needs to be used for MLModel training.
    public var computeStatistics: Swift.Bool?
    /// A user-supplied ID that uniquely identifies the DataSource.
    /// This member is required.
    public var dataSourceId: Swift.String?
    /// A user-supplied name or description of the DataSource.
    public var dataSourceName: Swift.String?
    /// The data specification of an Amazon Redshift DataSource:
    ///
    /// * DatabaseInformation -
    ///
    /// * DatabaseName - The name of the Amazon Redshift database.
    ///
    /// * ClusterIdentifier - The unique ID for the Amazon Redshift cluster.
    ///
    ///
    ///
    ///
    /// * DatabaseCredentials - The AWS Identity and Access Management (IAM) credentials that are used to connect to the Amazon Redshift database.
    ///
    /// * SelectSqlQuery - The query that is used to retrieve the observation data for the Datasource.
    ///
    /// * S3StagingLocation - The Amazon Simple Storage Service (Amazon S3) location for staging Amazon Redshift data. The data retrieved from Amazon Redshift using the SelectSqlQuery query is stored in this location.
    ///
    /// * DataSchemaUri - The Amazon S3 location of the DataSchema.
    ///
    /// * DataSchema - A JSON string representing the schema. This is not required if DataSchemaUri is specified.
    ///
    /// * DataRearrangement - A JSON string that represents the splitting and rearrangement requirements for the DataSource. Sample -  "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"
    /// This member is required.
    public var dataSpec: MachineLearningClientTypes.RedshiftDataSpec?
    /// A fully specified role Amazon Resource Name (ARN). Amazon ML assumes the role on behalf of the user to create the following:
    ///
    /// * A security group to allow Amazon ML to execute the SelectSqlQuery query on an Amazon Redshift cluster
    ///
    /// * An Amazon S3 bucket policy to grant Amazon ML read/write permissions on the S3StagingLocation
    /// This member is required.
    public var roleARN: Swift.String?

    public init(
        computeStatistics: Swift.Bool? = false,
        dataSourceId: Swift.String? = nil,
        dataSourceName: Swift.String? = nil,
        dataSpec: MachineLearningClientTypes.RedshiftDataSpec? = nil,
        roleARN: Swift.String? = nil
    )
    {
        self.computeStatistics = computeStatistics
        self.dataSourceId = dataSourceId
        self.dataSourceName = dataSourceName
        self.dataSpec = dataSpec
        self.roleARN = roleARN
    }
}

/// Represents the output of a CreateDataSourceFromRedshift operation, and is an acknowledgement that Amazon ML received the request. The CreateDataSourceFromRedshift operation is asynchronous. You can poll for updates by using the GetBatchPrediction operation and checking the Status parameter.
public struct CreateDataSourceFromRedshiftOutput: Swift.Sendable {
    /// A user-supplied ID that uniquely identifies the datasource. This value should be identical to the value of the DataSourceID in the request.
    public var dataSourceId: Swift.String?

    public init(
        dataSourceId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
    }
}

extension MachineLearningClientTypes {

    /// Describes the data specification of a DataSource.
    public struct S3DataSpec: Swift.Sendable {
        /// The location of the data file(s) used by a DataSource. The URI specifies a data file or an Amazon Simple Storage Service (Amazon S3) directory or bucket containing data files.
        /// This member is required.
        public var dataLocationS3: Swift.String?
        /// A JSON string that represents the splitting and rearrangement processing to be applied to a DataSource. If the DataRearrangement parameter is not provided, all of the input data is used to create the Datasource. There are multiple parameters that control what data is used to create a datasource:
        ///
        /// * percentBegin Use percentBegin to indicate the beginning of the range of the data used to create the Datasource. If you do not include percentBegin and percentEnd, Amazon ML includes all of the data when creating the datasource.
        ///
        /// * percentEnd Use percentEnd to indicate the end of the range of the data used to create the Datasource. If you do not include percentBegin and percentEnd, Amazon ML includes all of the data when creating the datasource.
        ///
        /// * complement The complement parameter instructs Amazon ML to use the data that is not included in the range of percentBegin to percentEnd to create a datasource. The complement parameter is useful if you need to create complementary datasources for training and evaluation. To create a complementary datasource, use the same values for percentBegin and percentEnd, along with the complement parameter. For example, the following two datasources do not share any data, and can be used to train and evaluate a model. The first datasource has 25 percent of the data, and the second one has 75 percent of the data. Datasource for evaluation: {"splitting":{"percentBegin":0, "percentEnd":25}} Datasource for training: {"splitting":{"percentBegin":0, "percentEnd":25, "complement":"true"}}
        ///
        /// * strategy To change how Amazon ML splits the data for a datasource, use the strategy parameter. The default value for the strategy parameter is sequential, meaning that Amazon ML takes all of the data records between the percentBegin and percentEnd parameters for the datasource, in the order that the records appear in the input data. The following two DataRearrangement lines are examples of sequentially ordered training and evaluation datasources: Datasource for evaluation: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential"}} Datasource for training: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential", "complement":"true"}} To randomly split the input data into the proportions indicated by the percentBegin and percentEnd parameters, set the strategy parameter to random and provide a string that is used as the seed value for the random data splitting (for example, you can use the S3 path to your data as the random seed string). If you choose the random split strategy, Amazon ML assigns each row of data a pseudo-random number between 0 and 100, and then selects the rows that have an assigned number between percentBegin and percentEnd. Pseudo-random numbers are assigned using both the input seed string value and the byte offset as a seed, so changing the data results in a different split. Any existing ordering is preserved. The random splitting strategy ensures that variables in the training and evaluation data are distributed similarly. It is useful in the cases where the input data may have an implicit sort order, which would otherwise result in training and evaluation datasources containing non-similar data records. The following two DataRearrangement lines are examples of non-sequentially ordered training and evaluation datasources: Datasource for evaluation: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv"}} Datasource for training: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv", "complement":"true"}}
        public var dataRearrangement: Swift.String?
        /// A JSON string that represents the schema for an Amazon S3 DataSource. The DataSchema defines the structure of the observation data in the data file(s) referenced in the DataSource. You must provide either the DataSchema or the DataSchemaLocationS3. Define your DataSchema as a series of key-value pairs. attributes and excludedVariableNames have an array of key-value pairs for their value. Use the following format to define your DataSchema. { "version": "1.0", "recordAnnotationFieldName": "F1", "recordWeightFieldName": "F2", "targetFieldName": "F3", "dataFormat": "CSV", "dataFileContainsHeader": true, "attributes": [ { "fieldName": "F1", "fieldType": "TEXT" }, { "fieldName": "F2", "fieldType": "NUMERIC" }, { "fieldName": "F3", "fieldType": "CATEGORICAL" }, { "fieldName": "F4", "fieldType": "NUMERIC" }, { "fieldName": "F5", "fieldType": "CATEGORICAL" }, { "fieldName": "F6", "fieldType": "TEXT" }, { "fieldName": "F7", "fieldType": "WEIGHTED_INT_SEQUENCE" }, { "fieldName": "F8", "fieldType": "WEIGHTED_STRING_SEQUENCE" } ], "excludedVariableNames": [ "F6" ] }
        public var dataSchema: Swift.String?
        /// Describes the schema location in Amazon S3. You must provide either the DataSchema or the DataSchemaLocationS3.
        public var dataSchemaLocationS3: Swift.String?

        public init(
            dataLocationS3: Swift.String? = nil,
            dataRearrangement: Swift.String? = nil,
            dataSchema: Swift.String? = nil,
            dataSchemaLocationS3: Swift.String? = nil
        )
        {
            self.dataLocationS3 = dataLocationS3
            self.dataRearrangement = dataRearrangement
            self.dataSchema = dataSchema
            self.dataSchemaLocationS3 = dataSchemaLocationS3
        }
    }
}

public struct CreateDataSourceFromS3Input: Swift.Sendable {
    /// The compute statistics for a DataSource. The statistics are generated from the observation data referenced by a DataSource. Amazon ML uses the statistics internally during MLModel training. This parameter must be set to true if the DataSource needs to be used for MLModel training.
    public var computeStatistics: Swift.Bool?
    /// A user-supplied identifier that uniquely identifies the DataSource.
    /// This member is required.
    public var dataSourceId: Swift.String?
    /// A user-supplied name or description of the DataSource.
    public var dataSourceName: Swift.String?
    /// The data specification of a DataSource:
    ///
    /// * DataLocationS3 - The Amazon S3 location of the observation data.
    ///
    /// * DataSchemaLocationS3 - The Amazon S3 location of the DataSchema.
    ///
    /// * DataSchema - A JSON string representing the schema. This is not required if DataSchemaUri is specified.
    ///
    /// * DataRearrangement - A JSON string that represents the splitting and rearrangement requirements for the Datasource. Sample -  "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"
    /// This member is required.
    public var dataSpec: MachineLearningClientTypes.S3DataSpec?

    public init(
        computeStatistics: Swift.Bool? = false,
        dataSourceId: Swift.String? = nil,
        dataSourceName: Swift.String? = nil,
        dataSpec: MachineLearningClientTypes.S3DataSpec? = nil
    )
    {
        self.computeStatistics = computeStatistics
        self.dataSourceId = dataSourceId
        self.dataSourceName = dataSourceName
        self.dataSpec = dataSpec
    }
}

/// Represents the output of a CreateDataSourceFromS3 operation, and is an acknowledgement that Amazon ML received the request. The CreateDataSourceFromS3 operation is asynchronous. You can poll for updates by using the GetBatchPrediction operation and checking the Status parameter.
public struct CreateDataSourceFromS3Output: Swift.Sendable {
    /// A user-supplied ID that uniquely identifies the DataSource. This value should be identical to the value of the DataSourceID in the request.
    public var dataSourceId: Swift.String?

    public init(
        dataSourceId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
    }
}

public struct CreateEvaluationInput: Swift.Sendable {
    /// The ID of the DataSource for the evaluation. The schema of the DataSource must match the schema used to create the MLModel.
    /// This member is required.
    public var evaluationDataSourceId: Swift.String?
    /// A user-supplied ID that uniquely identifies the Evaluation.
    /// This member is required.
    public var evaluationId: Swift.String?
    /// A user-supplied name or description of the Evaluation.
    public var evaluationName: Swift.String?
    /// The ID of the MLModel to evaluate. The schema used in creating the MLModel must match the schema of the DataSource used in the Evaluation.
    /// This member is required.
    public var mlModelId: Swift.String?

    public init(
        evaluationDataSourceId: Swift.String? = nil,
        evaluationId: Swift.String? = nil,
        evaluationName: Swift.String? = nil,
        mlModelId: Swift.String? = nil
    )
    {
        self.evaluationDataSourceId = evaluationDataSourceId
        self.evaluationId = evaluationId
        self.evaluationName = evaluationName
        self.mlModelId = mlModelId
    }
}

/// Represents the output of a CreateEvaluation operation, and is an acknowledgement that Amazon ML received the request. CreateEvaluation operation is asynchronous. You can poll for status updates by using the GetEvcaluation operation and checking the Status parameter.
public struct CreateEvaluationOutput: Swift.Sendable {
    /// The user-supplied ID that uniquely identifies the Evaluation. This value should be identical to the value of the EvaluationId in the request.
    public var evaluationId: Swift.String?

    public init(
        evaluationId: Swift.String? = nil
    )
    {
        self.evaluationId = evaluationId
    }
}

extension MachineLearningClientTypes {

    public enum MLModelType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case binary
        case multiclass
        case regression
        case sdkUnknown(Swift.String)

        public static var allCases: [MLModelType] {
            return [
                .binary,
                .multiclass,
                .regression
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .binary: return "BINARY"
            case .multiclass: return "MULTICLASS"
            case .regression: return "REGRESSION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateMLModelInput: Swift.Sendable {
    /// A user-supplied ID that uniquely identifies the MLModel.
    /// This member is required.
    public var mlModelId: Swift.String?
    /// A user-supplied name or description of the MLModel.
    public var mlModelName: Swift.String?
    /// The category of supervised learning that this MLModel will address. Choose from the following types:
    ///
    /// * Choose REGRESSION if the MLModel will be used to predict a numeric value.
    ///
    /// * Choose BINARY if the MLModel result has two possible values.
    ///
    /// * Choose MULTICLASS if the MLModel result has a limited number of values.
    ///
    ///
    /// For more information, see the [Amazon Machine Learning Developer Guide](https://docs.aws.amazon.com/machine-learning/latest/dg).
    /// This member is required.
    public var mlModelType: MachineLearningClientTypes.MLModelType?
    /// A list of the training parameters in the MLModel. The list is implemented as a map of key-value pairs. The following is the current set of training parameters:
    ///
    /// * sgd.maxMLModelSizeInBytes - The maximum allowed size of the model. Depending on the input data, the size of the model might affect its performance. The value is an integer that ranges from 100000 to 2147483648. The default value is 33554432.
    ///
    /// * sgd.maxPasses - The number of times that the training process traverses the observations to build the MLModel. The value is an integer that ranges from 1 to 10000. The default value is 10.
    ///
    /// * sgd.shuffleType - Whether Amazon ML shuffles the training data. Shuffling the data improves a model's ability to find the optimal solution for a variety of data types. The valid values are auto and none. The default value is none. We strongly recommend that you shuffle your data.
    ///
    /// * sgd.l1RegularizationAmount - The coefficient regularization L1 norm. It controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to zero, resulting in a sparse feature set. If you use this parameter, start by specifying a small value, such as 1.0E-08. The value is a double that ranges from 0 to MAX_DOUBLE. The default is to not use L1 normalization. This parameter can't be used when L2 is specified. Use this parameter sparingly.
    ///
    /// * sgd.l2RegularizationAmount - The coefficient regularization L2 norm. It controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to small, nonzero values. If you use this parameter, start by specifying a small value, such as 1.0E-08. The value is a double that ranges from 0 to MAX_DOUBLE. The default is to not use L2 normalization. This parameter can't be used when L1 is specified. Use this parameter sparingly.
    public var parameters: [Swift.String: Swift.String]?
    /// The data recipe for creating the MLModel. You must specify either the recipe or its URI. If you don't specify a recipe or its URI, Amazon ML creates a default.
    public var recipe: Swift.String?
    /// The Amazon Simple Storage Service (Amazon S3) location and file name that contains the MLModel recipe. You must specify either the recipe or its URI. If you don't specify a recipe or its URI, Amazon ML creates a default.
    public var recipeUri: Swift.String?
    /// The DataSource that points to the training data.
    /// This member is required.
    public var trainingDataSourceId: Swift.String?

    public init(
        mlModelId: Swift.String? = nil,
        mlModelName: Swift.String? = nil,
        mlModelType: MachineLearningClientTypes.MLModelType? = nil,
        parameters: [Swift.String: Swift.String]? = nil,
        recipe: Swift.String? = nil,
        recipeUri: Swift.String? = nil,
        trainingDataSourceId: Swift.String? = nil
    )
    {
        self.mlModelId = mlModelId
        self.mlModelName = mlModelName
        self.mlModelType = mlModelType
        self.parameters = parameters
        self.recipe = recipe
        self.recipeUri = recipeUri
        self.trainingDataSourceId = trainingDataSourceId
    }
}

/// Represents the output of a CreateMLModel operation, and is an acknowledgement that Amazon ML received the request. The CreateMLModel operation is asynchronous. You can poll for status updates by using the GetMLModel operation and checking the Status parameter.
public struct CreateMLModelOutput: Swift.Sendable {
    /// A user-supplied ID that uniquely identifies the MLModel. This value should be identical to the value of the MLModelId in the request.
    public var mlModelId: Swift.String?

    public init(
        mlModelId: Swift.String? = nil
    )
    {
        self.mlModelId = mlModelId
    }
}

public struct CreateRealtimeEndpointInput: Swift.Sendable {
    /// The ID assigned to the MLModel during creation.
    /// This member is required.
    public var mlModelId: Swift.String?

    public init(
        mlModelId: Swift.String? = nil
    )
    {
        self.mlModelId = mlModelId
    }
}

extension MachineLearningClientTypes {

    public enum RealtimeEndpointStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case `none`
        case ready
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [RealtimeEndpointStatus] {
            return [
                .failed,
                .none,
                .ready,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .none: return "NONE"
            case .ready: return "READY"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MachineLearningClientTypes {

    /// Describes the real-time endpoint information for an MLModel.
    public struct RealtimeEndpointInfo: Swift.Sendable {
        /// The time that the request to create the real-time endpoint for the MLModel was received. The time is expressed in epoch time.
        public var createdAt: Foundation.Date?
        /// The current status of the real-time endpoint for the MLModel. This element can have one of the following values:
        ///
        /// * NONE - Endpoint does not exist or was previously deleted.
        ///
        /// * READY - Endpoint is ready to be used for real-time predictions.
        ///
        /// * UPDATING - Updating/creating the endpoint.
        public var endpointStatus: MachineLearningClientTypes.RealtimeEndpointStatus?
        /// The URI that specifies where to send real-time prediction requests for the MLModel. Note: The application must wait until the real-time endpoint is ready before using this URI.
        public var endpointUrl: Swift.String?
        /// The maximum processing rate for the real-time endpoint for MLModel, measured in incoming requests per second.
        public var peakRequestsPerSecond: Swift.Int

        public init(
            createdAt: Foundation.Date? = nil,
            endpointStatus: MachineLearningClientTypes.RealtimeEndpointStatus? = nil,
            endpointUrl: Swift.String? = nil,
            peakRequestsPerSecond: Swift.Int = 0
        )
        {
            self.createdAt = createdAt
            self.endpointStatus = endpointStatus
            self.endpointUrl = endpointUrl
            self.peakRequestsPerSecond = peakRequestsPerSecond
        }
    }
}

/// Represents the output of an CreateRealtimeEndpoint operation. The result contains the MLModelId and the endpoint information for the MLModel. Note: The endpoint information includes the URI of the MLModel; that is, the location to send online prediction requests for the specified MLModel.
public struct CreateRealtimeEndpointOutput: Swift.Sendable {
    /// A user-supplied ID that uniquely identifies the MLModel. This value should be identical to the value of the MLModelId in the request.
    public var mlModelId: Swift.String?
    /// The endpoint information of the MLModel
    public var realtimeEndpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo?

    public init(
        mlModelId: Swift.String? = nil,
        realtimeEndpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo? = nil
    )
    {
        self.mlModelId = mlModelId
        self.realtimeEndpointInfo = realtimeEndpointInfo
    }
}

public struct DeleteBatchPredictionInput: Swift.Sendable {
    /// A user-supplied ID that uniquely identifies the BatchPrediction.
    /// This member is required.
    public var batchPredictionId: Swift.String?

    public init(
        batchPredictionId: Swift.String? = nil
    )
    {
        self.batchPredictionId = batchPredictionId
    }
}

/// Represents the output of a DeleteBatchPrediction operation. You can use the GetBatchPrediction operation and check the value of the Status parameter to see whether a BatchPrediction is marked as DELETED.
public struct DeleteBatchPredictionOutput: Swift.Sendable {
    /// A user-supplied ID that uniquely identifies the BatchPrediction. This value should be identical to the value of the BatchPredictionID in the request.
    public var batchPredictionId: Swift.String?

    public init(
        batchPredictionId: Swift.String? = nil
    )
    {
        self.batchPredictionId = batchPredictionId
    }
}

public struct DeleteDataSourceInput: Swift.Sendable {
    /// A user-supplied ID that uniquely identifies the DataSource.
    /// This member is required.
    public var dataSourceId: Swift.String?

    public init(
        dataSourceId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
    }
}

/// Represents the output of a DeleteDataSource operation.
public struct DeleteDataSourceOutput: Swift.Sendable {
    /// A user-supplied ID that uniquely identifies the DataSource. This value should be identical to the value of the DataSourceID in the request.
    public var dataSourceId: Swift.String?

    public init(
        dataSourceId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
    }
}

public struct DeleteEvaluationInput: Swift.Sendable {
    /// A user-supplied ID that uniquely identifies the Evaluation to delete.
    /// This member is required.
    public var evaluationId: Swift.String?

    public init(
        evaluationId: Swift.String? = nil
    )
    {
        self.evaluationId = evaluationId
    }
}

/// Represents the output of a DeleteEvaluation operation. The output indicates that Amazon Machine Learning (Amazon ML) received the request. You can use the GetEvaluation operation and check the value of the Status parameter to see whether an Evaluation is marked as DELETED.
public struct DeleteEvaluationOutput: Swift.Sendable {
    /// A user-supplied ID that uniquely identifies the Evaluation. This value should be identical to the value of the EvaluationId in the request.
    public var evaluationId: Swift.String?

    public init(
        evaluationId: Swift.String? = nil
    )
    {
        self.evaluationId = evaluationId
    }
}

public struct DeleteMLModelInput: Swift.Sendable {
    /// A user-supplied ID that uniquely identifies the MLModel.
    /// This member is required.
    public var mlModelId: Swift.String?

    public init(
        mlModelId: Swift.String? = nil
    )
    {
        self.mlModelId = mlModelId
    }
}

/// Represents the output of a DeleteMLModel operation. You can use the GetMLModel operation and check the value of the Status parameter to see whether an MLModel is marked as DELETED.
public struct DeleteMLModelOutput: Swift.Sendable {
    /// A user-supplied ID that uniquely identifies the MLModel. This value should be identical to the value of the MLModelID in the request.
    public var mlModelId: Swift.String?

    public init(
        mlModelId: Swift.String? = nil
    )
    {
        self.mlModelId = mlModelId
    }
}

public struct DeleteRealtimeEndpointInput: Swift.Sendable {
    /// The ID assigned to the MLModel during creation.
    /// This member is required.
    public var mlModelId: Swift.String?

    public init(
        mlModelId: Swift.String? = nil
    )
    {
        self.mlModelId = mlModelId
    }
}

/// Represents the output of an DeleteRealtimeEndpoint operation. The result contains the MLModelId and the endpoint information for the MLModel.
public struct DeleteRealtimeEndpointOutput: Swift.Sendable {
    /// A user-supplied ID that uniquely identifies the MLModel. This value should be identical to the value of the MLModelId in the request.
    public var mlModelId: Swift.String?
    /// The endpoint information of the MLModel
    public var realtimeEndpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo?

    public init(
        mlModelId: Swift.String? = nil,
        realtimeEndpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo? = nil
    )
    {
        self.mlModelId = mlModelId
        self.realtimeEndpointInfo = realtimeEndpointInfo
    }
}

public struct DeleteTagsInput: Swift.Sendable {
    /// The ID of the tagged ML object. For example, exampleModelId.
    /// This member is required.
    public var resourceId: Swift.String?
    /// The type of the tagged ML object.
    /// This member is required.
    public var resourceType: MachineLearningClientTypes.TaggableResourceType?
    /// One or more tags to delete.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceId: Swift.String? = nil,
        resourceType: MachineLearningClientTypes.TaggableResourceType? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
        self.tagKeys = tagKeys
    }
}

/// Amazon ML returns the following elements.
public struct DeleteTagsOutput: Swift.Sendable {
    /// The ID of the ML object from which tags were deleted.
    public var resourceId: Swift.String?
    /// The type of the ML object from which tags were deleted.
    public var resourceType: MachineLearningClientTypes.TaggableResourceType?

    public init(
        resourceId: Swift.String? = nil,
        resourceType: MachineLearningClientTypes.TaggableResourceType? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

extension MachineLearningClientTypes {

    /// A list of the variables to use in searching or filtering BatchPrediction.
    ///
    /// * CreatedAt - Sets the search criteria to BatchPrediction creation date.
    ///
    /// * Status - Sets the search criteria to BatchPrediction status.
    ///
    /// * Name - Sets the search criteria to the contents of BatchPredictionName.
    ///
    /// * IAMUser - Sets the search criteria to the user account that invoked the BatchPrediction creation.
    ///
    /// * MLModelId - Sets the search criteria to the MLModel used in the BatchPrediction.
    ///
    /// * DataSourceId - Sets the search criteria to the DataSource used in the BatchPrediction.
    ///
    /// * DataURI - Sets the search criteria to the data file(s) used in the BatchPrediction. The URL can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.
    public enum BatchPredictionFilterVariable: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createdAt
        case datasourceId
        case dataUri
        case iamUser
        case lastUpdatedAt
        case mlModelId
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [BatchPredictionFilterVariable] {
            return [
                .createdAt,
                .datasourceId,
                .dataUri,
                .iamUser,
                .lastUpdatedAt,
                .mlModelId,
                .name,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createdAt: return "CreatedAt"
            case .datasourceId: return "DataSourceId"
            case .dataUri: return "DataURI"
            case .iamUser: return "IAMUser"
            case .lastUpdatedAt: return "LastUpdatedAt"
            case .mlModelId: return "MLModelId"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MachineLearningClientTypes {

    /// The sort order specified in a listing condition. Possible values include the following:
    ///
    /// * asc - Present the information in ascending order (from A-Z).
    ///
    /// * dsc - Present the information in descending order (from Z-A).
    public enum SortOrder: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case asc
        case dsc
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .asc,
                .dsc
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .asc: return "asc"
            case .dsc: return "dsc"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeBatchPredictionsInput: Swift.Sendable {
    /// The equal to operator. The BatchPrediction results will have FilterVariable values that exactly match the value specified with EQ.
    public var eq: Swift.String?
    /// Use one of the following variables to filter a list of BatchPrediction:
    ///
    /// * CreatedAt - Sets the search criteria to the BatchPrediction creation date.
    ///
    /// * Status - Sets the search criteria to the BatchPrediction status.
    ///
    /// * Name - Sets the search criteria to the contents of the BatchPredictionName.
    ///
    /// * IAMUser - Sets the search criteria to the user account that invoked the BatchPrediction creation.
    ///
    /// * MLModelId - Sets the search criteria to the MLModel used in the BatchPrediction.
    ///
    /// * DataSourceId - Sets the search criteria to the DataSource used in the BatchPrediction.
    ///
    /// * DataURI - Sets the search criteria to the data file(s) used in the BatchPrediction. The URL can identify either a file or an Amazon Simple Storage Solution (Amazon S3) bucket or directory.
    public var filterVariable: MachineLearningClientTypes.BatchPredictionFilterVariable?
    /// The greater than or equal to operator. The BatchPrediction results will have FilterVariable values that are greater than or equal to the value specified with GE.
    public var ge: Swift.String?
    /// The greater than operator. The BatchPrediction results will have FilterVariable values that are greater than the value specified with GT.
    public var gt: Swift.String?
    /// The less than or equal to operator. The BatchPrediction results will have FilterVariable values that are less than or equal to the value specified with LE.
    public var le: Swift.String?
    /// The number of pages of information to include in the result. The range of acceptable values is 1 through 100. The default value is 100.
    public var limit: Swift.Int?
    /// The less than operator. The BatchPrediction results will have FilterVariable values that are less than the value specified with LT.
    public var lt: Swift.String?
    /// The not equal to operator. The BatchPrediction results will have FilterVariable values not equal to the value specified with NE.
    public var ne: Swift.String?
    /// An ID of the page in the paginated results.
    public var nextToken: Swift.String?
    /// A string that is found at the beginning of a variable, such as Name or Id. For example, a Batch Prediction operation could have the Name2014-09-09-HolidayGiftMailer. To search for this BatchPrediction, select Name for the FilterVariable and any of the following strings for the Prefix:
    ///
    /// * 2014-09
    ///
    /// * 2014-09-09
    ///
    /// * 2014-09-09-Holiday
    public var `prefix`: Swift.String?
    /// A two-value parameter that determines the sequence of the resulting list of MLModels.
    ///
    /// * asc - Arranges the list in ascending order (A-Z, 0-9).
    ///
    /// * dsc - Arranges the list in descending order (Z-A, 9-0).
    ///
    ///
    /// Results are sorted by FilterVariable.
    public var sortOrder: MachineLearningClientTypes.SortOrder?

    public init(
        eq: Swift.String? = nil,
        filterVariable: MachineLearningClientTypes.BatchPredictionFilterVariable? = nil,
        ge: Swift.String? = nil,
        gt: Swift.String? = nil,
        le: Swift.String? = nil,
        limit: Swift.Int? = nil,
        lt: Swift.String? = nil,
        ne: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        `prefix`: Swift.String? = nil,
        sortOrder: MachineLearningClientTypes.SortOrder? = nil
    )
    {
        self.eq = eq
        self.filterVariable = filterVariable
        self.ge = ge
        self.gt = gt
        self.le = le
        self.limit = limit
        self.lt = lt
        self.ne = ne
        self.nextToken = nextToken
        self.`prefix` = `prefix`
        self.sortOrder = sortOrder
    }
}

extension MachineLearningClientTypes {

    /// Object status with the following possible values:
    ///
    /// * PENDING
    ///
    /// * INPROGRESS
    ///
    /// * FAILED
    ///
    /// * COMPLETED
    ///
    /// * DELETED
    public enum EntityStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case deleted
        case failed
        case inprogress
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [EntityStatus] {
            return [
                .completed,
                .deleted,
                .failed,
                .inprogress,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .deleted: return "DELETED"
            case .failed: return "FAILED"
            case .inprogress: return "INPROGRESS"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MachineLearningClientTypes {

    /// Represents the output of a GetBatchPrediction operation. The content consists of the detailed metadata, the status, and the data file information of a Batch Prediction.
    public struct BatchPrediction: Swift.Sendable {
        /// The ID of the DataSource that points to the group of observations to predict.
        public var batchPredictionDataSourceId: Swift.String?
        /// The ID assigned to the BatchPrediction at creation. This value should be identical to the value of the BatchPredictionID in the request.
        public var batchPredictionId: Swift.String?
        /// Long integer type that is a 64-bit signed number.
        public var computeTime: Swift.Int?
        /// The time that the BatchPrediction was created. The time is expressed in epoch time.
        public var createdAt: Foundation.Date?
        /// The AWS user account that invoked the BatchPrediction. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
        public var createdByIamUser: Swift.String?
        /// A timestamp represented in epoch time.
        public var finishedAt: Foundation.Date?
        /// The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
        public var inputDataLocationS3: Swift.String?
        /// Long integer type that is a 64-bit signed number.
        public var invalidRecordCount: Swift.Int?
        /// The time of the most recent edit to the BatchPrediction. The time is expressed in epoch time.
        public var lastUpdatedAt: Foundation.Date?
        /// A description of the most recent details about processing the batch prediction request.
        public var message: Swift.String?
        /// The ID of the MLModel that generated predictions for the BatchPrediction request.
        public var mlModelId: Swift.String?
        /// A user-supplied name or description of the BatchPrediction.
        public var name: Swift.String?
        /// The location of an Amazon S3 bucket or directory to receive the operation results. The following substrings are not allowed in the s3 key portion of the outputURI field: ':', '//', '/./', '/../'.
        public var outputUri: Swift.String?
        /// A timestamp represented in epoch time.
        public var startedAt: Foundation.Date?
        /// The status of the BatchPrediction. This element can have one of the following values:
        ///
        /// * PENDING - Amazon Machine Learning (Amazon ML) submitted a request to generate predictions for a batch of observations.
        ///
        /// * INPROGRESS - The process is underway.
        ///
        /// * FAILED - The request to perform a batch prediction did not run to completion. It is not usable.
        ///
        /// * COMPLETED - The batch prediction process completed successfully.
        ///
        /// * DELETED - The BatchPrediction is marked as deleted. It is not usable.
        public var status: MachineLearningClientTypes.EntityStatus?
        /// Long integer type that is a 64-bit signed number.
        public var totalRecordCount: Swift.Int?

        public init(
            batchPredictionDataSourceId: Swift.String? = nil,
            batchPredictionId: Swift.String? = nil,
            computeTime: Swift.Int? = nil,
            createdAt: Foundation.Date? = nil,
            createdByIamUser: Swift.String? = nil,
            finishedAt: Foundation.Date? = nil,
            inputDataLocationS3: Swift.String? = nil,
            invalidRecordCount: Swift.Int? = nil,
            lastUpdatedAt: Foundation.Date? = nil,
            message: Swift.String? = nil,
            mlModelId: Swift.String? = nil,
            name: Swift.String? = nil,
            outputUri: Swift.String? = nil,
            startedAt: Foundation.Date? = nil,
            status: MachineLearningClientTypes.EntityStatus? = nil,
            totalRecordCount: Swift.Int? = nil
        )
        {
            self.batchPredictionDataSourceId = batchPredictionDataSourceId
            self.batchPredictionId = batchPredictionId
            self.computeTime = computeTime
            self.createdAt = createdAt
            self.createdByIamUser = createdByIamUser
            self.finishedAt = finishedAt
            self.inputDataLocationS3 = inputDataLocationS3
            self.invalidRecordCount = invalidRecordCount
            self.lastUpdatedAt = lastUpdatedAt
            self.message = message
            self.mlModelId = mlModelId
            self.name = name
            self.outputUri = outputUri
            self.startedAt = startedAt
            self.status = status
            self.totalRecordCount = totalRecordCount
        }
    }
}

/// Represents the output of a DescribeBatchPredictions operation. The content is essentially a list of BatchPredictions.
public struct DescribeBatchPredictionsOutput: Swift.Sendable {
    /// The ID of the next page in the paginated results that indicates at least one more page follows.
    public var nextToken: Swift.String?
    /// A list of BatchPrediction objects that meet the search criteria.
    public var results: [MachineLearningClientTypes.BatchPrediction]?

    public init(
        nextToken: Swift.String? = nil,
        results: [MachineLearningClientTypes.BatchPrediction]? = nil
    )
    {
        self.nextToken = nextToken
        self.results = results
    }
}

extension MachineLearningClientTypes {

    /// A list of the variables to use in searching or filtering DataSource.
    ///
    /// * CreatedAt - Sets the search criteria to DataSource creation date.
    ///
    /// * Status - Sets the search criteria to DataSource status.
    ///
    /// * Name - Sets the search criteria to the contents of DataSourceName.
    ///
    /// * DataUri - Sets the search criteria to the URI of data files used to create the DataSource. The URI can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.
    ///
    /// * IAMUser - Sets the search criteria to the user account that invoked the DataSource creation.
    ///
    ///
    /// Note: The variable names should match the variable names in the DataSource.
    public enum DataSourceFilterVariable: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createdAt
        case dataUri
        case iamUser
        case lastUpdatedAt
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [DataSourceFilterVariable] {
            return [
                .createdAt,
                .dataUri,
                .iamUser,
                .lastUpdatedAt,
                .name,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createdAt: return "CreatedAt"
            case .dataUri: return "DataLocationS3"
            case .iamUser: return "IAMUser"
            case .lastUpdatedAt: return "LastUpdatedAt"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeDataSourcesInput: Swift.Sendable {
    /// The equal to operator. The DataSource results will have FilterVariable values that exactly match the value specified with EQ.
    public var eq: Swift.String?
    /// Use one of the following variables to filter a list of DataSource:
    ///
    /// * CreatedAt - Sets the search criteria to DataSource creation dates.
    ///
    /// * Status - Sets the search criteria to DataSource statuses.
    ///
    /// * Name - Sets the search criteria to the contents of DataSourceName.
    ///
    /// * DataUri - Sets the search criteria to the URI of data files used to create the DataSource. The URI can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.
    ///
    /// * IAMUser - Sets the search criteria to the user account that invoked the DataSource creation.
    public var filterVariable: MachineLearningClientTypes.DataSourceFilterVariable?
    /// The greater than or equal to operator. The DataSource results will have FilterVariable values that are greater than or equal to the value specified with GE.
    public var ge: Swift.String?
    /// The greater than operator. The DataSource results will have FilterVariable values that are greater than the value specified with GT.
    public var gt: Swift.String?
    /// The less than or equal to operator. The DataSource results will have FilterVariable values that are less than or equal to the value specified with LE.
    public var le: Swift.String?
    /// The maximum number of DataSource to include in the result.
    public var limit: Swift.Int?
    /// The less than operator. The DataSource results will have FilterVariable values that are less than the value specified with LT.
    public var lt: Swift.String?
    /// The not equal to operator. The DataSource results will have FilterVariable values not equal to the value specified with NE.
    public var ne: Swift.String?
    /// The ID of the page in the paginated results.
    public var nextToken: Swift.String?
    /// A string that is found at the beginning of a variable, such as Name or Id. For example, a DataSource could have the Name2014-09-09-HolidayGiftMailer. To search for this DataSource, select Name for the FilterVariable and any of the following strings for the Prefix:
    ///
    /// * 2014-09
    ///
    /// * 2014-09-09
    ///
    /// * 2014-09-09-Holiday
    public var `prefix`: Swift.String?
    /// A two-value parameter that determines the sequence of the resulting list of DataSource.
    ///
    /// * asc - Arranges the list in ascending order (A-Z, 0-9).
    ///
    /// * dsc - Arranges the list in descending order (Z-A, 9-0).
    ///
    ///
    /// Results are sorted by FilterVariable.
    public var sortOrder: MachineLearningClientTypes.SortOrder?

    public init(
        eq: Swift.String? = nil,
        filterVariable: MachineLearningClientTypes.DataSourceFilterVariable? = nil,
        ge: Swift.String? = nil,
        gt: Swift.String? = nil,
        le: Swift.String? = nil,
        limit: Swift.Int? = nil,
        lt: Swift.String? = nil,
        ne: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        `prefix`: Swift.String? = nil,
        sortOrder: MachineLearningClientTypes.SortOrder? = nil
    )
    {
        self.eq = eq
        self.filterVariable = filterVariable
        self.ge = ge
        self.gt = gt
        self.le = le
        self.limit = limit
        self.lt = lt
        self.ne = ne
        self.nextToken = nextToken
        self.`prefix` = `prefix`
        self.sortOrder = sortOrder
    }
}

extension MachineLearningClientTypes {

    /// The datasource details that are specific to Amazon RDS.
    public struct RDSMetadata: Swift.Sendable {
        /// The ID of the Data Pipeline instance that is used to carry to copy data from Amazon RDS to Amazon S3. You can use the ID to find details about the instance in the Data Pipeline console.
        public var dataPipelineId: Swift.String?
        /// The database details required to connect to an Amazon RDS.
        public var database: MachineLearningClientTypes.RDSDatabase?
        /// The username to be used by Amazon ML to connect to database on an Amazon RDS instance. The username should have sufficient permissions to execute an RDSSelectSqlQuery query.
        public var databaseUserName: Swift.String?
        /// The role (DataPipelineDefaultResourceRole) assumed by an Amazon EC2 instance to carry out the copy task from Amazon RDS to Amazon S3. For more information, see [Role templates](https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html) for data pipelines.
        public var resourceRole: Swift.String?
        /// The SQL query that is supplied during [CreateDataSourceFromRDS]. Returns only if Verbose is true in GetDataSourceInput.
        public var selectSqlQuery: Swift.String?
        /// The role (DataPipelineDefaultRole) assumed by the Data Pipeline service to monitor the progress of the copy task from Amazon RDS to Amazon S3. For more information, see [Role templates](https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html) for data pipelines.
        public var serviceRole: Swift.String?

        public init(
            dataPipelineId: Swift.String? = nil,
            database: MachineLearningClientTypes.RDSDatabase? = nil,
            databaseUserName: Swift.String? = nil,
            resourceRole: Swift.String? = nil,
            selectSqlQuery: Swift.String? = nil,
            serviceRole: Swift.String? = nil
        )
        {
            self.dataPipelineId = dataPipelineId
            self.database = database
            self.databaseUserName = databaseUserName
            self.resourceRole = resourceRole
            self.selectSqlQuery = selectSqlQuery
            self.serviceRole = serviceRole
        }
    }
}

extension MachineLearningClientTypes {

    /// Describes the DataSource details specific to Amazon Redshift.
    public struct RedshiftMetadata: Swift.Sendable {
        /// A username to be used by Amazon Machine Learning (Amazon ML)to connect to a database on an Amazon Redshift cluster. The username should have sufficient permissions to execute the RedshiftSelectSqlQuery query. The username should be valid for an Amazon Redshift [USER](https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html).
        public var databaseUserName: Swift.String?
        /// Describes the database details required to connect to an Amazon Redshift database.
        public var redshiftDatabase: MachineLearningClientTypes.RedshiftDatabase?
        /// The SQL query that is specified during [CreateDataSourceFromRedshift]. Returns only if Verbose is true in GetDataSourceInput.
        public var selectSqlQuery: Swift.String?

        public init(
            databaseUserName: Swift.String? = nil,
            redshiftDatabase: MachineLearningClientTypes.RedshiftDatabase? = nil,
            selectSqlQuery: Swift.String? = nil
        )
        {
            self.databaseUserName = databaseUserName
            self.redshiftDatabase = redshiftDatabase
            self.selectSqlQuery = selectSqlQuery
        }
    }
}

extension MachineLearningClientTypes {

    /// Represents the output of the GetDataSource operation. The content consists of the detailed metadata and data file information and the current status of the DataSource.
    public struct DataSource: Swift.Sendable {
        /// The parameter is true if statistics need to be generated from the observation data.
        public var computeStatistics: Swift.Bool
        /// Long integer type that is a 64-bit signed number.
        public var computeTime: Swift.Int?
        /// The time that the DataSource was created. The time is expressed in epoch time.
        public var createdAt: Foundation.Date?
        /// The AWS user account from which the DataSource was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
        public var createdByIamUser: Swift.String?
        /// The location and name of the data in Amazon Simple Storage Service (Amazon S3) that is used by a DataSource.
        public var dataLocationS3: Swift.String?
        /// A JSON string that represents the splitting and rearrangement requirement used when this DataSource was created.
        public var dataRearrangement: Swift.String?
        /// The total number of observations contained in the data files that the DataSource references.
        public var dataSizeInBytes: Swift.Int?
        /// The ID that is assigned to the DataSource during creation.
        public var dataSourceId: Swift.String?
        /// A timestamp represented in epoch time.
        public var finishedAt: Foundation.Date?
        /// The time of the most recent edit to the BatchPrediction. The time is expressed in epoch time.
        public var lastUpdatedAt: Foundation.Date?
        /// A description of the most recent details about creating the DataSource.
        public var message: Swift.String?
        /// A user-supplied name or description of the DataSource.
        public var name: Swift.String?
        /// The number of data files referenced by the DataSource.
        public var numberOfFiles: Swift.Int?
        /// The datasource details that are specific to Amazon RDS.
        public var rdsMetadata: MachineLearningClientTypes.RDSMetadata?
        /// Describes the DataSource details specific to Amazon Redshift.
        public var redshiftMetadata: MachineLearningClientTypes.RedshiftMetadata?
        /// The Amazon Resource Name (ARN) of an [AWS IAM Role](https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html#roles-about-termsandconcepts), such as the following: arn:aws:iam::account:role/rolename.
        public var roleARN: Swift.String?
        /// A timestamp represented in epoch time.
        public var startedAt: Foundation.Date?
        /// The current status of the DataSource. This element can have one of the following values:
        ///
        /// * PENDING - Amazon Machine Learning (Amazon ML) submitted a request to create a DataSource.
        ///
        /// * INPROGRESS - The creation process is underway.
        ///
        /// * FAILED - The request to create a DataSource did not run to completion. It is not usable.
        ///
        /// * COMPLETED - The creation process completed successfully.
        ///
        /// * DELETED - The DataSource is marked as deleted. It is not usable.
        public var status: MachineLearningClientTypes.EntityStatus?

        public init(
            computeStatistics: Swift.Bool = false,
            computeTime: Swift.Int? = nil,
            createdAt: Foundation.Date? = nil,
            createdByIamUser: Swift.String? = nil,
            dataLocationS3: Swift.String? = nil,
            dataRearrangement: Swift.String? = nil,
            dataSizeInBytes: Swift.Int? = nil,
            dataSourceId: Swift.String? = nil,
            finishedAt: Foundation.Date? = nil,
            lastUpdatedAt: Foundation.Date? = nil,
            message: Swift.String? = nil,
            name: Swift.String? = nil,
            numberOfFiles: Swift.Int? = nil,
            rdsMetadata: MachineLearningClientTypes.RDSMetadata? = nil,
            redshiftMetadata: MachineLearningClientTypes.RedshiftMetadata? = nil,
            roleARN: Swift.String? = nil,
            startedAt: Foundation.Date? = nil,
            status: MachineLearningClientTypes.EntityStatus? = nil
        )
        {
            self.computeStatistics = computeStatistics
            self.computeTime = computeTime
            self.createdAt = createdAt
            self.createdByIamUser = createdByIamUser
            self.dataLocationS3 = dataLocationS3
            self.dataRearrangement = dataRearrangement
            self.dataSizeInBytes = dataSizeInBytes
            self.dataSourceId = dataSourceId
            self.finishedAt = finishedAt
            self.lastUpdatedAt = lastUpdatedAt
            self.message = message
            self.name = name
            self.numberOfFiles = numberOfFiles
            self.rdsMetadata = rdsMetadata
            self.redshiftMetadata = redshiftMetadata
            self.roleARN = roleARN
            self.startedAt = startedAt
            self.status = status
        }
    }
}

/// Represents the query results from a [DescribeDataSources] operation. The content is essentially a list of DataSource.
public struct DescribeDataSourcesOutput: Swift.Sendable {
    /// An ID of the next page in the paginated results that indicates at least one more page follows.
    public var nextToken: Swift.String?
    /// A list of DataSource that meet the search criteria.
    public var results: [MachineLearningClientTypes.DataSource]?

    public init(
        nextToken: Swift.String? = nil,
        results: [MachineLearningClientTypes.DataSource]? = nil
    )
    {
        self.nextToken = nextToken
        self.results = results
    }
}

extension MachineLearningClientTypes {

    /// A list of the variables to use in searching or filtering Evaluation.
    ///
    /// * CreatedAt - Sets the search criteria to Evaluation creation date.
    ///
    /// * Status - Sets the search criteria to Evaluation status.
    ///
    /// * Name - Sets the search criteria to the contents of EvaluationName.
    ///
    /// * IAMUser - Sets the search criteria to the user account that invoked an evaluation.
    ///
    /// * MLModelId - Sets the search criteria to the Predictor that was evaluated.
    ///
    /// * DataSourceId - Sets the search criteria to the DataSource used in evaluation.
    ///
    /// * DataUri - Sets the search criteria to the data file(s) used in evaluation. The URL can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.
    public enum EvaluationFilterVariable: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createdAt
        case datasourceId
        case dataUri
        case iamUser
        case lastUpdatedAt
        case mlModelId
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [EvaluationFilterVariable] {
            return [
                .createdAt,
                .datasourceId,
                .dataUri,
                .iamUser,
                .lastUpdatedAt,
                .mlModelId,
                .name,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createdAt: return "CreatedAt"
            case .datasourceId: return "DataSourceId"
            case .dataUri: return "DataURI"
            case .iamUser: return "IAMUser"
            case .lastUpdatedAt: return "LastUpdatedAt"
            case .mlModelId: return "MLModelId"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeEvaluationsInput: Swift.Sendable {
    /// The equal to operator. The Evaluation results will have FilterVariable values that exactly match the value specified with EQ.
    public var eq: Swift.String?
    /// Use one of the following variable to filter a list of Evaluation objects:
    ///
    /// * CreatedAt - Sets the search criteria to the Evaluation creation date.
    ///
    /// * Status - Sets the search criteria to the Evaluation status.
    ///
    /// * Name - Sets the search criteria to the contents of EvaluationName.
    ///
    /// * IAMUser - Sets the search criteria to the user account that invoked an Evaluation.
    ///
    /// * MLModelId - Sets the search criteria to the MLModel that was evaluated.
    ///
    /// * DataSourceId - Sets the search criteria to the DataSource used in Evaluation.
    ///
    /// * DataUri - Sets the search criteria to the data file(s) used in Evaluation. The URL can identify either a file or an Amazon Simple Storage Solution (Amazon S3) bucket or directory.
    public var filterVariable: MachineLearningClientTypes.EvaluationFilterVariable?
    /// The greater than or equal to operator. The Evaluation results will have FilterVariable values that are greater than or equal to the value specified with GE.
    public var ge: Swift.String?
    /// The greater than operator. The Evaluation results will have FilterVariable values that are greater than the value specified with GT.
    public var gt: Swift.String?
    /// The less than or equal to operator. The Evaluation results will have FilterVariable values that are less than or equal to the value specified with LE.
    public var le: Swift.String?
    /// The maximum number of Evaluation to include in the result.
    public var limit: Swift.Int?
    /// The less than operator. The Evaluation results will have FilterVariable values that are less than the value specified with LT.
    public var lt: Swift.String?
    /// The not equal to operator. The Evaluation results will have FilterVariable values not equal to the value specified with NE.
    public var ne: Swift.String?
    /// The ID of the page in the paginated results.
    public var nextToken: Swift.String?
    /// A string that is found at the beginning of a variable, such as Name or Id. For example, an Evaluation could have the Name2014-09-09-HolidayGiftMailer. To search for this Evaluation, select Name for the FilterVariable and any of the following strings for the Prefix:
    ///
    /// * 2014-09
    ///
    /// * 2014-09-09
    ///
    /// * 2014-09-09-Holiday
    public var `prefix`: Swift.String?
    /// A two-value parameter that determines the sequence of the resulting list of Evaluation.
    ///
    /// * asc - Arranges the list in ascending order (A-Z, 0-9).
    ///
    /// * dsc - Arranges the list in descending order (Z-A, 9-0).
    ///
    ///
    /// Results are sorted by FilterVariable.
    public var sortOrder: MachineLearningClientTypes.SortOrder?

    public init(
        eq: Swift.String? = nil,
        filterVariable: MachineLearningClientTypes.EvaluationFilterVariable? = nil,
        ge: Swift.String? = nil,
        gt: Swift.String? = nil,
        le: Swift.String? = nil,
        limit: Swift.Int? = nil,
        lt: Swift.String? = nil,
        ne: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        `prefix`: Swift.String? = nil,
        sortOrder: MachineLearningClientTypes.SortOrder? = nil
    )
    {
        self.eq = eq
        self.filterVariable = filterVariable
        self.ge = ge
        self.gt = gt
        self.le = le
        self.limit = limit
        self.lt = lt
        self.ne = ne
        self.nextToken = nextToken
        self.`prefix` = `prefix`
        self.sortOrder = sortOrder
    }
}

extension MachineLearningClientTypes {

    /// Measurements of how well the MLModel performed on known observations. One of the following metrics is returned, based on the type of the MLModel:
    ///
    /// * BinaryAUC: The binary MLModel uses the Area Under the Curve (AUC) technique to measure performance.
    ///
    /// * RegressionRMSE: The regression MLModel uses the Root Mean Square Error (RMSE) technique to measure performance. RMSE measures the difference between predicted and actual values for a single variable.
    ///
    /// * MulticlassAvgFScore: The multiclass MLModel uses the F1 score technique to measure performance.
    ///
    ///
    /// For more information about performance metrics, please see the [Amazon Machine Learning Developer Guide](https://docs.aws.amazon.com/machine-learning/latest/dg).
    public struct PerformanceMetrics: Swift.Sendable {
        public var properties: [Swift.String: Swift.String]?

        public init(
            properties: [Swift.String: Swift.String]? = nil
        )
        {
            self.properties = properties
        }
    }
}

extension MachineLearningClientTypes {

    /// Represents the output of GetEvaluation operation. The content consists of the detailed metadata and data file information and the current status of the Evaluation.
    public struct Evaluation: Swift.Sendable {
        /// Long integer type that is a 64-bit signed number.
        public var computeTime: Swift.Int?
        /// The time that the Evaluation was created. The time is expressed in epoch time.
        public var createdAt: Foundation.Date?
        /// The AWS user account that invoked the evaluation. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
        public var createdByIamUser: Swift.String?
        /// The ID of the DataSource that is used to evaluate the MLModel.
        public var evaluationDataSourceId: Swift.String?
        /// The ID that is assigned to the Evaluation at creation.
        public var evaluationId: Swift.String?
        /// A timestamp represented in epoch time.
        public var finishedAt: Foundation.Date?
        /// The location and name of the data in Amazon Simple Storage Server (Amazon S3) that is used in the evaluation.
        public var inputDataLocationS3: Swift.String?
        /// The time of the most recent edit to the Evaluation. The time is expressed in epoch time.
        public var lastUpdatedAt: Foundation.Date?
        /// A description of the most recent details about evaluating the MLModel.
        public var message: Swift.String?
        /// The ID of the MLModel that is the focus of the evaluation.
        public var mlModelId: Swift.String?
        /// A user-supplied name or description of the Evaluation.
        public var name: Swift.String?
        /// Measurements of how well the MLModel performed, using observations referenced by the DataSource. One of the following metrics is returned, based on the type of the MLModel:
        ///
        /// * BinaryAUC: A binary MLModel uses the Area Under the Curve (AUC) technique to measure performance.
        ///
        /// * RegressionRMSE: A regression MLModel uses the Root Mean Square Error (RMSE) technique to measure performance. RMSE measures the difference between predicted and actual values for a single variable.
        ///
        /// * MulticlassAvgFScore: A multiclass MLModel uses the F1 score technique to measure performance.
        ///
        ///
        /// For more information about performance metrics, please see the [Amazon Machine Learning Developer Guide](https://docs.aws.amazon.com/machine-learning/latest/dg).
        public var performanceMetrics: MachineLearningClientTypes.PerformanceMetrics?
        /// A timestamp represented in epoch time.
        public var startedAt: Foundation.Date?
        /// The status of the evaluation. This element can have one of the following values:
        ///
        /// * PENDING - Amazon Machine Learning (Amazon ML) submitted a request to evaluate an MLModel.
        ///
        /// * INPROGRESS - The evaluation is underway.
        ///
        /// * FAILED - The request to evaluate an MLModel did not run to completion. It is not usable.
        ///
        /// * COMPLETED - The evaluation process completed successfully.
        ///
        /// * DELETED - The Evaluation is marked as deleted. It is not usable.
        public var status: MachineLearningClientTypes.EntityStatus?

        public init(
            computeTime: Swift.Int? = nil,
            createdAt: Foundation.Date? = nil,
            createdByIamUser: Swift.String? = nil,
            evaluationDataSourceId: Swift.String? = nil,
            evaluationId: Swift.String? = nil,
            finishedAt: Foundation.Date? = nil,
            inputDataLocationS3: Swift.String? = nil,
            lastUpdatedAt: Foundation.Date? = nil,
            message: Swift.String? = nil,
            mlModelId: Swift.String? = nil,
            name: Swift.String? = nil,
            performanceMetrics: MachineLearningClientTypes.PerformanceMetrics? = nil,
            startedAt: Foundation.Date? = nil,
            status: MachineLearningClientTypes.EntityStatus? = nil
        )
        {
            self.computeTime = computeTime
            self.createdAt = createdAt
            self.createdByIamUser = createdByIamUser
            self.evaluationDataSourceId = evaluationDataSourceId
            self.evaluationId = evaluationId
            self.finishedAt = finishedAt
            self.inputDataLocationS3 = inputDataLocationS3
            self.lastUpdatedAt = lastUpdatedAt
            self.message = message
            self.mlModelId = mlModelId
            self.name = name
            self.performanceMetrics = performanceMetrics
            self.startedAt = startedAt
            self.status = status
        }
    }
}

/// Represents the query results from a DescribeEvaluations operation. The content is essentially a list of Evaluation.
public struct DescribeEvaluationsOutput: Swift.Sendable {
    /// The ID of the next page in the paginated results that indicates at least one more page follows.
    public var nextToken: Swift.String?
    /// A list of Evaluation that meet the search criteria.
    public var results: [MachineLearningClientTypes.Evaluation]?

    public init(
        nextToken: Swift.String? = nil,
        results: [MachineLearningClientTypes.Evaluation]? = nil
    )
    {
        self.nextToken = nextToken
        self.results = results
    }
}

extension MachineLearningClientTypes {

    public enum MLModelFilterVariable: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case algorithm
        case createdAt
        case iamUser
        case lastUpdatedAt
        case mlModelType
        case name
        case realTimeEndpointStatus
        case status
        case trainingDatasourceId
        case trainingDataUri
        case sdkUnknown(Swift.String)

        public static var allCases: [MLModelFilterVariable] {
            return [
                .algorithm,
                .createdAt,
                .iamUser,
                .lastUpdatedAt,
                .mlModelType,
                .name,
                .realTimeEndpointStatus,
                .status,
                .trainingDatasourceId,
                .trainingDataUri
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .algorithm: return "Algorithm"
            case .createdAt: return "CreatedAt"
            case .iamUser: return "IAMUser"
            case .lastUpdatedAt: return "LastUpdatedAt"
            case .mlModelType: return "MLModelType"
            case .name: return "Name"
            case .realTimeEndpointStatus: return "RealtimeEndpointStatus"
            case .status: return "Status"
            case .trainingDatasourceId: return "TrainingDataSourceId"
            case .trainingDataUri: return "TrainingDataURI"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeMLModelsInput: Swift.Sendable {
    /// The equal to operator. The MLModel results will have FilterVariable values that exactly match the value specified with EQ.
    public var eq: Swift.String?
    /// Use one of the following variables to filter a list of MLModel:
    ///
    /// * CreatedAt - Sets the search criteria to MLModel creation date.
    ///
    /// * Status - Sets the search criteria to MLModel status.
    ///
    /// * Name - Sets the search criteria to the contents of MLModelName.
    ///
    /// * IAMUser - Sets the search criteria to the user account that invoked the MLModel creation.
    ///
    /// * TrainingDataSourceId - Sets the search criteria to the DataSource used to train one or more MLModel.
    ///
    /// * RealtimeEndpointStatus - Sets the search criteria to the MLModel real-time endpoint status.
    ///
    /// * MLModelType - Sets the search criteria to MLModel type: binary, regression, or multi-class.
    ///
    /// * Algorithm - Sets the search criteria to the algorithm that the MLModel uses.
    ///
    /// * TrainingDataURI - Sets the search criteria to the data file(s) used in training a MLModel. The URL can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.
    public var filterVariable: MachineLearningClientTypes.MLModelFilterVariable?
    /// The greater than or equal to operator. The MLModel results will have FilterVariable values that are greater than or equal to the value specified with GE.
    public var ge: Swift.String?
    /// The greater than operator. The MLModel results will have FilterVariable values that are greater than the value specified with GT.
    public var gt: Swift.String?
    /// The less than or equal to operator. The MLModel results will have FilterVariable values that are less than or equal to the value specified with LE.
    public var le: Swift.String?
    /// The number of pages of information to include in the result. The range of acceptable values is 1 through 100. The default value is 100.
    public var limit: Swift.Int?
    /// The less than operator. The MLModel results will have FilterVariable values that are less than the value specified with LT.
    public var lt: Swift.String?
    /// The not equal to operator. The MLModel results will have FilterVariable values not equal to the value specified with NE.
    public var ne: Swift.String?
    /// The ID of the page in the paginated results.
    public var nextToken: Swift.String?
    /// A string that is found at the beginning of a variable, such as Name or Id. For example, an MLModel could have the Name2014-09-09-HolidayGiftMailer. To search for this MLModel, select Name for the FilterVariable and any of the following strings for the Prefix:
    ///
    /// * 2014-09
    ///
    /// * 2014-09-09
    ///
    /// * 2014-09-09-Holiday
    public var `prefix`: Swift.String?
    /// A two-value parameter that determines the sequence of the resulting list of MLModel.
    ///
    /// * asc - Arranges the list in ascending order (A-Z, 0-9).
    ///
    /// * dsc - Arranges the list in descending order (Z-A, 9-0).
    ///
    ///
    /// Results are sorted by FilterVariable.
    public var sortOrder: MachineLearningClientTypes.SortOrder?

    public init(
        eq: Swift.String? = nil,
        filterVariable: MachineLearningClientTypes.MLModelFilterVariable? = nil,
        ge: Swift.String? = nil,
        gt: Swift.String? = nil,
        le: Swift.String? = nil,
        limit: Swift.Int? = nil,
        lt: Swift.String? = nil,
        ne: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        `prefix`: Swift.String? = nil,
        sortOrder: MachineLearningClientTypes.SortOrder? = nil
    )
    {
        self.eq = eq
        self.filterVariable = filterVariable
        self.ge = ge
        self.gt = gt
        self.le = le
        self.limit = limit
        self.lt = lt
        self.ne = ne
        self.nextToken = nextToken
        self.`prefix` = `prefix`
        self.sortOrder = sortOrder
    }
}

extension MachineLearningClientTypes {

    /// Represents the output of a GetMLModel operation. The content consists of the detailed metadata and the current status of the MLModel.
    public struct MLModel: Swift.Sendable {
        /// The algorithm used to train the MLModel. The following algorithm is supported:
        ///
        /// * SGD -- Stochastic gradient descent. The goal of SGD is to minimize the gradient of the loss function.
        public var algorithm: MachineLearningClientTypes.Algorithm?
        /// Long integer type that is a 64-bit signed number.
        public var computeTime: Swift.Int?
        /// The time that the MLModel was created. The time is expressed in epoch time.
        public var createdAt: Foundation.Date?
        /// The AWS user account from which the MLModel was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
        public var createdByIamUser: Swift.String?
        /// The current endpoint of the MLModel.
        public var endpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo?
        /// A timestamp represented in epoch time.
        public var finishedAt: Foundation.Date?
        /// The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
        public var inputDataLocationS3: Swift.String?
        /// The time of the most recent edit to the MLModel. The time is expressed in epoch time.
        public var lastUpdatedAt: Foundation.Date?
        /// A description of the most recent details about accessing the MLModel.
        public var message: Swift.String?
        /// The ID assigned to the MLModel at creation.
        public var mlModelId: Swift.String?
        /// Identifies the MLModel category. The following are the available types:
        ///
        /// * REGRESSION - Produces a numeric result. For example, "What price should a house be listed at?"
        ///
        /// * BINARY - Produces one of two possible results. For example, "Is this a child-friendly web site?".
        ///
        /// * MULTICLASS - Produces one of several possible results. For example, "Is this a HIGH-, LOW-, or MEDIUM-risk trade?".
        public var mlModelType: MachineLearningClientTypes.MLModelType?
        /// A user-supplied name or description of the MLModel.
        public var name: Swift.String?
        public var scoreThreshold: Swift.Float?
        /// The time of the most recent edit to the ScoreThreshold. The time is expressed in epoch time.
        public var scoreThresholdLastUpdatedAt: Foundation.Date?
        /// Long integer type that is a 64-bit signed number.
        public var sizeInBytes: Swift.Int?
        /// A timestamp represented in epoch time.
        public var startedAt: Foundation.Date?
        /// The current status of an MLModel. This element can have one of the following values:
        ///
        /// * PENDING - Amazon Machine Learning (Amazon ML) submitted a request to create an MLModel.
        ///
        /// * INPROGRESS - The creation process is underway.
        ///
        /// * FAILED - The request to create an MLModel didn't run to completion. The model isn't usable.
        ///
        /// * COMPLETED - The creation process completed successfully.
        ///
        /// * DELETED - The MLModel is marked as deleted. It isn't usable.
        public var status: MachineLearningClientTypes.EntityStatus?
        /// The ID of the training DataSource. The CreateMLModel operation uses the TrainingDataSourceId.
        public var trainingDataSourceId: Swift.String?
        /// A list of the training parameters in the MLModel. The list is implemented as a map of key-value pairs. The following is the current set of training parameters:
        ///
        /// * sgd.maxMLModelSizeInBytes - The maximum allowed size of the model. Depending on the input data, the size of the model might affect its performance. The value is an integer that ranges from 100000 to 2147483648. The default value is 33554432.
        ///
        /// * sgd.maxPasses - The number of times that the training process traverses the observations to build the MLModel. The value is an integer that ranges from 1 to 10000. The default value is 10.
        ///
        /// * sgd.shuffleType - Whether Amazon ML shuffles the training data. Shuffling the data improves a model's ability to find the optimal solution for a variety of data types. The valid values are auto and none. The default value is none.
        ///
        /// * sgd.l1RegularizationAmount - The coefficient regularization L1 norm, which controls overfitting the data by penalizing large coefficients. This parameter tends to drive coefficients to zero, resulting in sparse feature set. If you use this parameter, start by specifying a small value, such as 1.0E-08. The value is a double that ranges from 0 to MAX_DOUBLE. The default is to not use L1 normalization. This parameter can't be used when L2 is specified. Use this parameter sparingly.
        ///
        /// * sgd.l2RegularizationAmount - The coefficient regularization L2 norm, which controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to small, nonzero values. If you use this parameter, start by specifying a small value, such as 1.0E-08. The value is a double that ranges from 0 to MAX_DOUBLE. The default is to not use L2 normalization. This parameter can't be used when L1 is specified. Use this parameter sparingly.
        public var trainingParameters: [Swift.String: Swift.String]?

        public init(
            algorithm: MachineLearningClientTypes.Algorithm? = nil,
            computeTime: Swift.Int? = nil,
            createdAt: Foundation.Date? = nil,
            createdByIamUser: Swift.String? = nil,
            endpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo? = nil,
            finishedAt: Foundation.Date? = nil,
            inputDataLocationS3: Swift.String? = nil,
            lastUpdatedAt: Foundation.Date? = nil,
            message: Swift.String? = nil,
            mlModelId: Swift.String? = nil,
            mlModelType: MachineLearningClientTypes.MLModelType? = nil,
            name: Swift.String? = nil,
            scoreThreshold: Swift.Float? = nil,
            scoreThresholdLastUpdatedAt: Foundation.Date? = nil,
            sizeInBytes: Swift.Int? = nil,
            startedAt: Foundation.Date? = nil,
            status: MachineLearningClientTypes.EntityStatus? = nil,
            trainingDataSourceId: Swift.String? = nil,
            trainingParameters: [Swift.String: Swift.String]? = nil
        )
        {
            self.algorithm = algorithm
            self.computeTime = computeTime
            self.createdAt = createdAt
            self.createdByIamUser = createdByIamUser
            self.endpointInfo = endpointInfo
            self.finishedAt = finishedAt
            self.inputDataLocationS3 = inputDataLocationS3
            self.lastUpdatedAt = lastUpdatedAt
            self.message = message
            self.mlModelId = mlModelId
            self.mlModelType = mlModelType
            self.name = name
            self.scoreThreshold = scoreThreshold
            self.scoreThresholdLastUpdatedAt = scoreThresholdLastUpdatedAt
            self.sizeInBytes = sizeInBytes
            self.startedAt = startedAt
            self.status = status
            self.trainingDataSourceId = trainingDataSourceId
            self.trainingParameters = trainingParameters
        }
    }
}

/// Represents the output of a DescribeMLModels operation. The content is essentially a list of MLModel.
public struct DescribeMLModelsOutput: Swift.Sendable {
    /// The ID of the next page in the paginated results that indicates at least one more page follows.
    public var nextToken: Swift.String?
    /// A list of MLModel that meet the search criteria.
    public var results: [MachineLearningClientTypes.MLModel]?

    public init(
        nextToken: Swift.String? = nil,
        results: [MachineLearningClientTypes.MLModel]? = nil
    )
    {
        self.nextToken = nextToken
        self.results = results
    }
}

public struct DescribeTagsInput: Swift.Sendable {
    /// The ID of the ML object. For example, exampleModelId.
    /// This member is required.
    public var resourceId: Swift.String?
    /// The type of the ML object.
    /// This member is required.
    public var resourceType: MachineLearningClientTypes.TaggableResourceType?

    public init(
        resourceId: Swift.String? = nil,
        resourceType: MachineLearningClientTypes.TaggableResourceType? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

/// Amazon ML returns the following elements.
public struct DescribeTagsOutput: Swift.Sendable {
    /// The ID of the tagged ML object.
    public var resourceId: Swift.String?
    /// The type of the tagged ML object.
    public var resourceType: MachineLearningClientTypes.TaggableResourceType?
    /// A list of tags associated with the ML object.
    public var tags: [MachineLearningClientTypes.Tag]?

    public init(
        resourceId: Swift.String? = nil,
        resourceType: MachineLearningClientTypes.TaggableResourceType? = nil,
        tags: [MachineLearningClientTypes.Tag]? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
        self.tags = tags
    }
}

public struct GetBatchPredictionInput: Swift.Sendable {
    /// An ID assigned to the BatchPrediction at creation.
    /// This member is required.
    public var batchPredictionId: Swift.String?

    public init(
        batchPredictionId: Swift.String? = nil
    )
    {
        self.batchPredictionId = batchPredictionId
    }
}

/// Represents the output of a GetBatchPrediction operation and describes a BatchPrediction.
public struct GetBatchPredictionOutput: Swift.Sendable {
    /// The ID of the DataSource that was used to create the BatchPrediction.
    public var batchPredictionDataSourceId: Swift.String?
    /// An ID assigned to the BatchPrediction at creation. This value should be identical to the value of the BatchPredictionID in the request.
    public var batchPredictionId: Swift.String?
    /// The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the BatchPrediction, normalized and scaled on computation resources. ComputeTime is only available if the BatchPrediction is in the COMPLETED state.
    public var computeTime: Swift.Int?
    /// The time when the BatchPrediction was created. The time is expressed in epoch time.
    public var createdAt: Foundation.Date?
    /// The AWS user account that invoked the BatchPrediction. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
    public var createdByIamUser: Swift.String?
    /// The epoch time when Amazon Machine Learning marked the BatchPrediction as COMPLETED or FAILED. FinishedAt is only available when the BatchPrediction is in the COMPLETED or FAILED state.
    public var finishedAt: Foundation.Date?
    /// The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
    public var inputDataLocationS3: Swift.String?
    /// The number of invalid records that Amazon Machine Learning saw while processing the BatchPrediction.
    public var invalidRecordCount: Swift.Int?
    /// The time of the most recent edit to BatchPrediction. The time is expressed in epoch time.
    public var lastUpdatedAt: Foundation.Date?
    /// A link to the file that contains logs of the CreateBatchPrediction operation.
    public var logUri: Swift.String?
    /// A description of the most recent details about processing the batch prediction request.
    public var message: Swift.String?
    /// The ID of the MLModel that generated predictions for the BatchPrediction request.
    public var mlModelId: Swift.String?
    /// A user-supplied name or description of the BatchPrediction.
    public var name: Swift.String?
    /// The location of an Amazon S3 bucket or directory to receive the operation results.
    public var outputUri: Swift.String?
    /// The epoch time when Amazon Machine Learning marked the BatchPrediction as INPROGRESS. StartedAt isn't available if the BatchPrediction is in the PENDING state.
    public var startedAt: Foundation.Date?
    /// The status of the BatchPrediction, which can be one of the following values:
    ///
    /// * PENDING - Amazon Machine Learning (Amazon ML) submitted a request to generate batch predictions.
    ///
    /// * INPROGRESS - The batch predictions are in progress.
    ///
    /// * FAILED - The request to perform a batch prediction did not run to completion. It is not usable.
    ///
    /// * COMPLETED - The batch prediction process completed successfully.
    ///
    /// * DELETED - The BatchPrediction is marked as deleted. It is not usable.
    public var status: MachineLearningClientTypes.EntityStatus?
    /// The number of total records that Amazon Machine Learning saw while processing the BatchPrediction.
    public var totalRecordCount: Swift.Int?

    public init(
        batchPredictionDataSourceId: Swift.String? = nil,
        batchPredictionId: Swift.String? = nil,
        computeTime: Swift.Int? = nil,
        createdAt: Foundation.Date? = nil,
        createdByIamUser: Swift.String? = nil,
        finishedAt: Foundation.Date? = nil,
        inputDataLocationS3: Swift.String? = nil,
        invalidRecordCount: Swift.Int? = nil,
        lastUpdatedAt: Foundation.Date? = nil,
        logUri: Swift.String? = nil,
        message: Swift.String? = nil,
        mlModelId: Swift.String? = nil,
        name: Swift.String? = nil,
        outputUri: Swift.String? = nil,
        startedAt: Foundation.Date? = nil,
        status: MachineLearningClientTypes.EntityStatus? = nil,
        totalRecordCount: Swift.Int? = nil
    )
    {
        self.batchPredictionDataSourceId = batchPredictionDataSourceId
        self.batchPredictionId = batchPredictionId
        self.computeTime = computeTime
        self.createdAt = createdAt
        self.createdByIamUser = createdByIamUser
        self.finishedAt = finishedAt
        self.inputDataLocationS3 = inputDataLocationS3
        self.invalidRecordCount = invalidRecordCount
        self.lastUpdatedAt = lastUpdatedAt
        self.logUri = logUri
        self.message = message
        self.mlModelId = mlModelId
        self.name = name
        self.outputUri = outputUri
        self.startedAt = startedAt
        self.status = status
        self.totalRecordCount = totalRecordCount
    }
}

public struct GetDataSourceInput: Swift.Sendable {
    /// The ID assigned to the DataSource at creation.
    /// This member is required.
    public var dataSourceId: Swift.String?
    /// Specifies whether the GetDataSource operation should return DataSourceSchema. If true, DataSourceSchema is returned. If false, DataSourceSchema is not returned.
    public var verbose: Swift.Bool?

    public init(
        dataSourceId: Swift.String? = nil,
        verbose: Swift.Bool? = false
    )
    {
        self.dataSourceId = dataSourceId
        self.verbose = verbose
    }
}

/// Represents the output of a GetDataSource operation and describes a DataSource.
public struct GetDataSourceOutput: Swift.Sendable {
    /// The parameter is true if statistics need to be generated from the observation data.
    public var computeStatistics: Swift.Bool
    /// The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the DataSource, normalized and scaled on computation resources. ComputeTime is only available if the DataSource is in the COMPLETED state and the ComputeStatistics is set to true.
    public var computeTime: Swift.Int?
    /// The time that the DataSource was created. The time is expressed in epoch time.
    public var createdAt: Foundation.Date?
    /// The AWS user account from which the DataSource was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
    public var createdByIamUser: Swift.String?
    /// The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
    public var dataLocationS3: Swift.String?
    /// A JSON string that represents the splitting and rearrangement requirement used when this DataSource was created.
    public var dataRearrangement: Swift.String?
    /// The total size of observations in the data files.
    public var dataSizeInBytes: Swift.Int?
    /// The ID assigned to the DataSource at creation. This value should be identical to the value of the DataSourceId in the request.
    public var dataSourceId: Swift.String?
    /// The schema used by all of the data files of this DataSource. Note: This parameter is provided as part of the verbose format.
    public var dataSourceSchema: Swift.String?
    /// The epoch time when Amazon Machine Learning marked the DataSource as COMPLETED or FAILED. FinishedAt is only available when the DataSource is in the COMPLETED or FAILED state.
    public var finishedAt: Foundation.Date?
    /// The time of the most recent edit to the DataSource. The time is expressed in epoch time.
    public var lastUpdatedAt: Foundation.Date?
    /// A link to the file containing logs of CreateDataSourceFrom* operations.
    public var logUri: Swift.String?
    /// The user-supplied description of the most recent details about creating the DataSource.
    public var message: Swift.String?
    /// A user-supplied name or description of the DataSource.
    public var name: Swift.String?
    /// The number of data files referenced by the DataSource.
    public var numberOfFiles: Swift.Int?
    /// The datasource details that are specific to Amazon RDS.
    public var rdsMetadata: MachineLearningClientTypes.RDSMetadata?
    /// Describes the DataSource details specific to Amazon Redshift.
    public var redshiftMetadata: MachineLearningClientTypes.RedshiftMetadata?
    /// The Amazon Resource Name (ARN) of an [AWS IAM Role](https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html#roles-about-termsandconcepts), such as the following: arn:aws:iam::account:role/rolename.
    public var roleARN: Swift.String?
    /// The epoch time when Amazon Machine Learning marked the DataSource as INPROGRESS. StartedAt isn't available if the DataSource is in the PENDING state.
    public var startedAt: Foundation.Date?
    /// The current status of the DataSource. This element can have one of the following values:
    ///
    /// * PENDING - Amazon ML submitted a request to create a DataSource.
    ///
    /// * INPROGRESS - The creation process is underway.
    ///
    /// * FAILED - The request to create a DataSource did not run to completion. It is not usable.
    ///
    /// * COMPLETED - The creation process completed successfully.
    ///
    /// * DELETED - The DataSource is marked as deleted. It is not usable.
    public var status: MachineLearningClientTypes.EntityStatus?

    public init(
        computeStatistics: Swift.Bool = false,
        computeTime: Swift.Int? = nil,
        createdAt: Foundation.Date? = nil,
        createdByIamUser: Swift.String? = nil,
        dataLocationS3: Swift.String? = nil,
        dataRearrangement: Swift.String? = nil,
        dataSizeInBytes: Swift.Int? = nil,
        dataSourceId: Swift.String? = nil,
        dataSourceSchema: Swift.String? = nil,
        finishedAt: Foundation.Date? = nil,
        lastUpdatedAt: Foundation.Date? = nil,
        logUri: Swift.String? = nil,
        message: Swift.String? = nil,
        name: Swift.String? = nil,
        numberOfFiles: Swift.Int? = nil,
        rdsMetadata: MachineLearningClientTypes.RDSMetadata? = nil,
        redshiftMetadata: MachineLearningClientTypes.RedshiftMetadata? = nil,
        roleARN: Swift.String? = nil,
        startedAt: Foundation.Date? = nil,
        status: MachineLearningClientTypes.EntityStatus? = nil
    )
    {
        self.computeStatistics = computeStatistics
        self.computeTime = computeTime
        self.createdAt = createdAt
        self.createdByIamUser = createdByIamUser
        self.dataLocationS3 = dataLocationS3
        self.dataRearrangement = dataRearrangement
        self.dataSizeInBytes = dataSizeInBytes
        self.dataSourceId = dataSourceId
        self.dataSourceSchema = dataSourceSchema
        self.finishedAt = finishedAt
        self.lastUpdatedAt = lastUpdatedAt
        self.logUri = logUri
        self.message = message
        self.name = name
        self.numberOfFiles = numberOfFiles
        self.rdsMetadata = rdsMetadata
        self.redshiftMetadata = redshiftMetadata
        self.roleARN = roleARN
        self.startedAt = startedAt
        self.status = status
    }
}

public struct GetEvaluationInput: Swift.Sendable {
    /// The ID of the Evaluation to retrieve. The evaluation of each MLModel is recorded and cataloged. The ID provides the means to access the information.
    /// This member is required.
    public var evaluationId: Swift.String?

    public init(
        evaluationId: Swift.String? = nil
    )
    {
        self.evaluationId = evaluationId
    }
}

/// Represents the output of a GetEvaluation operation and describes an Evaluation.
public struct GetEvaluationOutput: Swift.Sendable {
    /// The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the Evaluation, normalized and scaled on computation resources. ComputeTime is only available if the Evaluation is in the COMPLETED state.
    public var computeTime: Swift.Int?
    /// The time that the Evaluation was created. The time is expressed in epoch time.
    public var createdAt: Foundation.Date?
    /// The AWS user account that invoked the evaluation. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
    public var createdByIamUser: Swift.String?
    /// The DataSource used for this evaluation.
    public var evaluationDataSourceId: Swift.String?
    /// The evaluation ID which is same as the EvaluationId in the request.
    public var evaluationId: Swift.String?
    /// The epoch time when Amazon Machine Learning marked the Evaluation as COMPLETED or FAILED. FinishedAt is only available when the Evaluation is in the COMPLETED or FAILED state.
    public var finishedAt: Foundation.Date?
    /// The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
    public var inputDataLocationS3: Swift.String?
    /// The time of the most recent edit to the Evaluation. The time is expressed in epoch time.
    public var lastUpdatedAt: Foundation.Date?
    /// A link to the file that contains logs of the CreateEvaluation operation.
    public var logUri: Swift.String?
    /// A description of the most recent details about evaluating the MLModel.
    public var message: Swift.String?
    /// The ID of the MLModel that was the focus of the evaluation.
    public var mlModelId: Swift.String?
    /// A user-supplied name or description of the Evaluation.
    public var name: Swift.String?
    /// Measurements of how well the MLModel performed using observations referenced by the DataSource. One of the following metric is returned based on the type of the MLModel:
    ///
    /// * BinaryAUC: A binary MLModel uses the Area Under the Curve (AUC) technique to measure performance.
    ///
    /// * RegressionRMSE: A regression MLModel uses the Root Mean Square Error (RMSE) technique to measure performance. RMSE measures the difference between predicted and actual values for a single variable.
    ///
    /// * MulticlassAvgFScore: A multiclass MLModel uses the F1 score technique to measure performance.
    ///
    ///
    /// For more information about performance metrics, please see the [Amazon Machine Learning Developer Guide](https://docs.aws.amazon.com/machine-learning/latest/dg).
    public var performanceMetrics: MachineLearningClientTypes.PerformanceMetrics?
    /// The epoch time when Amazon Machine Learning marked the Evaluation as INPROGRESS. StartedAt isn't available if the Evaluation is in the PENDING state.
    public var startedAt: Foundation.Date?
    /// The status of the evaluation. This element can have one of the following values:
    ///
    /// * PENDING - Amazon Machine Language (Amazon ML) submitted a request to evaluate an MLModel.
    ///
    /// * INPROGRESS - The evaluation is underway.
    ///
    /// * FAILED - The request to evaluate an MLModel did not run to completion. It is not usable.
    ///
    /// * COMPLETED - The evaluation process completed successfully.
    ///
    /// * DELETED - The Evaluation is marked as deleted. It is not usable.
    public var status: MachineLearningClientTypes.EntityStatus?

    public init(
        computeTime: Swift.Int? = nil,
        createdAt: Foundation.Date? = nil,
        createdByIamUser: Swift.String? = nil,
        evaluationDataSourceId: Swift.String? = nil,
        evaluationId: Swift.String? = nil,
        finishedAt: Foundation.Date? = nil,
        inputDataLocationS3: Swift.String? = nil,
        lastUpdatedAt: Foundation.Date? = nil,
        logUri: Swift.String? = nil,
        message: Swift.String? = nil,
        mlModelId: Swift.String? = nil,
        name: Swift.String? = nil,
        performanceMetrics: MachineLearningClientTypes.PerformanceMetrics? = nil,
        startedAt: Foundation.Date? = nil,
        status: MachineLearningClientTypes.EntityStatus? = nil
    )
    {
        self.computeTime = computeTime
        self.createdAt = createdAt
        self.createdByIamUser = createdByIamUser
        self.evaluationDataSourceId = evaluationDataSourceId
        self.evaluationId = evaluationId
        self.finishedAt = finishedAt
        self.inputDataLocationS3 = inputDataLocationS3
        self.lastUpdatedAt = lastUpdatedAt
        self.logUri = logUri
        self.message = message
        self.mlModelId = mlModelId
        self.name = name
        self.performanceMetrics = performanceMetrics
        self.startedAt = startedAt
        self.status = status
    }
}

public struct GetMLModelInput: Swift.Sendable {
    /// The ID assigned to the MLModel at creation.
    /// This member is required.
    public var mlModelId: Swift.String?
    /// Specifies whether the GetMLModel operation should return Recipe. If true, Recipe is returned. If false, Recipe is not returned.
    public var verbose: Swift.Bool?

    public init(
        mlModelId: Swift.String? = nil,
        verbose: Swift.Bool? = false
    )
    {
        self.mlModelId = mlModelId
        self.verbose = verbose
    }
}

/// Represents the output of a GetMLModel operation, and provides detailed information about a MLModel.
public struct GetMLModelOutput: Swift.Sendable {
    /// The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the MLModel, normalized and scaled on computation resources. ComputeTime is only available if the MLModel is in the COMPLETED state.
    public var computeTime: Swift.Int?
    /// The time that the MLModel was created. The time is expressed in epoch time.
    public var createdAt: Foundation.Date?
    /// The AWS user account from which the MLModel was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
    public var createdByIamUser: Swift.String?
    /// The current endpoint of the MLModel
    public var endpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo?
    /// The epoch time when Amazon Machine Learning marked the MLModel as COMPLETED or FAILED. FinishedAt is only available when the MLModel is in the COMPLETED or FAILED state.
    public var finishedAt: Foundation.Date?
    /// The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
    public var inputDataLocationS3: Swift.String?
    /// The time of the most recent edit to the MLModel. The time is expressed in epoch time.
    public var lastUpdatedAt: Foundation.Date?
    /// A link to the file that contains logs of the CreateMLModel operation.
    public var logUri: Swift.String?
    /// A description of the most recent details about accessing the MLModel.
    public var message: Swift.String?
    /// The MLModel ID, which is same as the MLModelId in the request.
    public var mlModelId: Swift.String?
    /// Identifies the MLModel category. The following are the available types:
    ///
    /// * REGRESSION -- Produces a numeric result. For example, "What price should a house be listed at?"
    ///
    /// * BINARY -- Produces one of two possible results. For example, "Is this an e-commerce website?"
    ///
    /// * MULTICLASS -- Produces one of several possible results. For example, "Is this a HIGH, LOW or MEDIUM risk trade?"
    public var mlModelType: MachineLearningClientTypes.MLModelType?
    /// A user-supplied name or description of the MLModel.
    public var name: Swift.String?
    /// The recipe to use when training the MLModel. The Recipe provides detailed information about the observation data to use during training, and manipulations to perform on the observation data during training. Note: This parameter is provided as part of the verbose format.
    public var recipe: Swift.String?
    /// The schema used by all of the data files referenced by the DataSource. Note: This parameter is provided as part of the verbose format.
    public var schema: Swift.String?
    /// The scoring threshold is used in binary classification MLModel models. It marks the boundary between a positive prediction and a negative prediction. Output values greater than or equal to the threshold receive a positive result from the MLModel, such as true. Output values less than the threshold receive a negative response from the MLModel, such as false.
    public var scoreThreshold: Swift.Float?
    /// The time of the most recent edit to the ScoreThreshold. The time is expressed in epoch time.
    public var scoreThresholdLastUpdatedAt: Foundation.Date?
    /// Long integer type that is a 64-bit signed number.
    public var sizeInBytes: Swift.Int?
    /// The epoch time when Amazon Machine Learning marked the MLModel as INPROGRESS. StartedAt isn't available if the MLModel is in the PENDING state.
    public var startedAt: Foundation.Date?
    /// The current status of the MLModel. This element can have one of the following values:
    ///
    /// * PENDING - Amazon Machine Learning (Amazon ML) submitted a request to describe a MLModel.
    ///
    /// * INPROGRESS - The request is processing.
    ///
    /// * FAILED - The request did not run to completion. The ML model isn't usable.
    ///
    /// * COMPLETED - The request completed successfully.
    ///
    /// * DELETED - The MLModel is marked as deleted. It isn't usable.
    public var status: MachineLearningClientTypes.EntityStatus?
    /// The ID of the training DataSource.
    public var trainingDataSourceId: Swift.String?
    /// A list of the training parameters in the MLModel. The list is implemented as a map of key-value pairs. The following is the current set of training parameters:
    ///
    /// * sgd.maxMLModelSizeInBytes - The maximum allowed size of the model. Depending on the input data, the size of the model might affect its performance. The value is an integer that ranges from 100000 to 2147483648. The default value is 33554432.
    ///
    /// * sgd.maxPasses - The number of times that the training process traverses the observations to build the MLModel. The value is an integer that ranges from 1 to 10000. The default value is 10.
    ///
    /// * sgd.shuffleType - Whether Amazon ML shuffles the training data. Shuffling data improves a model's ability to find the optimal solution for a variety of data types. The valid values are auto and none. The default value is none. We strongly recommend that you shuffle your data.
    ///
    /// * sgd.l1RegularizationAmount - The coefficient regularization L1 norm. It controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to zero, resulting in a sparse feature set. If you use this parameter, start by specifying a small value, such as 1.0E-08. The value is a double that ranges from 0 to MAX_DOUBLE. The default is to not use L1 normalization. This parameter can't be used when L2 is specified. Use this parameter sparingly.
    ///
    /// * sgd.l2RegularizationAmount - The coefficient regularization L2 norm. It controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to small, nonzero values. If you use this parameter, start by specifying a small value, such as 1.0E-08. The value is a double that ranges from 0 to MAX_DOUBLE. The default is to not use L2 normalization. This parameter can't be used when L1 is specified. Use this parameter sparingly.
    public var trainingParameters: [Swift.String: Swift.String]?

    public init(
        computeTime: Swift.Int? = nil,
        createdAt: Foundation.Date? = nil,
        createdByIamUser: Swift.String? = nil,
        endpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo? = nil,
        finishedAt: Foundation.Date? = nil,
        inputDataLocationS3: Swift.String? = nil,
        lastUpdatedAt: Foundation.Date? = nil,
        logUri: Swift.String? = nil,
        message: Swift.String? = nil,
        mlModelId: Swift.String? = nil,
        mlModelType: MachineLearningClientTypes.MLModelType? = nil,
        name: Swift.String? = nil,
        recipe: Swift.String? = nil,
        schema: Swift.String? = nil,
        scoreThreshold: Swift.Float? = nil,
        scoreThresholdLastUpdatedAt: Foundation.Date? = nil,
        sizeInBytes: Swift.Int? = nil,
        startedAt: Foundation.Date? = nil,
        status: MachineLearningClientTypes.EntityStatus? = nil,
        trainingDataSourceId: Swift.String? = nil,
        trainingParameters: [Swift.String: Swift.String]? = nil
    )
    {
        self.computeTime = computeTime
        self.createdAt = createdAt
        self.createdByIamUser = createdByIamUser
        self.endpointInfo = endpointInfo
        self.finishedAt = finishedAt
        self.inputDataLocationS3 = inputDataLocationS3
        self.lastUpdatedAt = lastUpdatedAt
        self.logUri = logUri
        self.message = message
        self.mlModelId = mlModelId
        self.mlModelType = mlModelType
        self.name = name
        self.recipe = recipe
        self.schema = schema
        self.scoreThreshold = scoreThreshold
        self.scoreThresholdLastUpdatedAt = scoreThresholdLastUpdatedAt
        self.sizeInBytes = sizeInBytes
        self.startedAt = startedAt
        self.status = status
        self.trainingDataSourceId = trainingDataSourceId
        self.trainingParameters = trainingParameters
    }
}

/// The subscriber exceeded the maximum number of operations. This exception can occur when listing objects such as DataSource.
public struct LimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var code: Swift.Int = 0
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "LimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.properties.code = code
        self.properties.message = message
    }
}

/// The exception is thrown when a predict request is made to an unmounted MLModel.
public struct PredictorNotMountedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "PredictorNotMountedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct PredictInput: Swift.Sendable {
    /// A unique identifier of the MLModel.
    /// This member is required.
    public var mlModelId: Swift.String?
    /// This member is required.
    public var predictEndpoint: Swift.String?
    /// A map of variable name-value pairs that represent an observation.
    /// This member is required.
    public var record: [Swift.String: Swift.String]?

    public init(
        mlModelId: Swift.String? = nil,
        predictEndpoint: Swift.String? = nil,
        record: [Swift.String: Swift.String]? = nil
    )
    {
        self.mlModelId = mlModelId
        self.predictEndpoint = predictEndpoint
        self.record = record
    }
}

extension MachineLearningClientTypes {

    /// Contains the key values of DetailsMap:
    ///
    /// * PredictiveModelType - Indicates the type of the MLModel.
    ///
    /// * Algorithm - Indicates the algorithm that was used for the MLModel.
    public enum DetailsAttributes: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case algorithm
        case predictiveModelType
        case sdkUnknown(Swift.String)

        public static var allCases: [DetailsAttributes] {
            return [
                .algorithm,
                .predictiveModelType
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .algorithm: return "Algorithm"
            case .predictiveModelType: return "PredictiveModelType"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension MachineLearningClientTypes {

    /// The output from a Predict operation:
    ///
    /// * Details - Contains the following attributes: DetailsAttributes.PREDICTIVE_MODEL_TYPE - REGRESSION | BINARY | MULTICLASSDetailsAttributes.ALGORITHM - SGD
    ///
    /// * PredictedLabel - Present for either a BINARY or MULTICLASSMLModel request.
    ///
    /// * PredictedScores - Contains the raw classification score corresponding to each label.
    ///
    /// * PredictedValue - Present for a REGRESSIONMLModel request.
    public struct Prediction: Swift.Sendable {
        /// Provides any additional details regarding the prediction.
        public var details: [Swift.String: Swift.String]?
        /// The prediction label for either a BINARY or MULTICLASSMLModel.
        public var predictedLabel: Swift.String?
        /// Provides the raw classification score corresponding to each label.
        public var predictedScores: [Swift.String: Swift.Float]?
        /// The prediction value for REGRESSIONMLModel.
        public var predictedValue: Swift.Float?

        public init(
            details: [Swift.String: Swift.String]? = nil,
            predictedLabel: Swift.String? = nil,
            predictedScores: [Swift.String: Swift.Float]? = nil,
            predictedValue: Swift.Float? = nil
        )
        {
            self.details = details
            self.predictedLabel = predictedLabel
            self.predictedScores = predictedScores
            self.predictedValue = predictedValue
        }
    }
}

public struct PredictOutput: Swift.Sendable {
    /// The output from a Predict operation:
    ///
    /// * Details - Contains the following attributes: DetailsAttributes.PREDICTIVE_MODEL_TYPE - REGRESSION | BINARY | MULTICLASSDetailsAttributes.ALGORITHM - SGD
    ///
    /// * PredictedLabel - Present for either a BINARY or MULTICLASSMLModel request.
    ///
    /// * PredictedScores - Contains the raw classification score corresponding to each label.
    ///
    /// * PredictedValue - Present for a REGRESSIONMLModel request.
    public var prediction: MachineLearningClientTypes.Prediction?

    public init(
        prediction: MachineLearningClientTypes.Prediction? = nil
    )
    {
        self.prediction = prediction
    }
}

public struct UpdateBatchPredictionInput: Swift.Sendable {
    /// The ID assigned to the BatchPrediction during creation.
    /// This member is required.
    public var batchPredictionId: Swift.String?
    /// A new user-supplied name or description of the BatchPrediction.
    /// This member is required.
    public var batchPredictionName: Swift.String?

    public init(
        batchPredictionId: Swift.String? = nil,
        batchPredictionName: Swift.String? = nil
    )
    {
        self.batchPredictionId = batchPredictionId
        self.batchPredictionName = batchPredictionName
    }
}

/// Represents the output of an UpdateBatchPrediction operation. You can see the updated content by using the GetBatchPrediction operation.
public struct UpdateBatchPredictionOutput: Swift.Sendable {
    /// The ID assigned to the BatchPrediction during creation. This value should be identical to the value of the BatchPredictionId in the request.
    public var batchPredictionId: Swift.String?

    public init(
        batchPredictionId: Swift.String? = nil
    )
    {
        self.batchPredictionId = batchPredictionId
    }
}

public struct UpdateDataSourceInput: Swift.Sendable {
    /// The ID assigned to the DataSource during creation.
    /// This member is required.
    public var dataSourceId: Swift.String?
    /// A new user-supplied name or description of the DataSource that will replace the current description.
    /// This member is required.
    public var dataSourceName: Swift.String?

    public init(
        dataSourceId: Swift.String? = nil,
        dataSourceName: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
        self.dataSourceName = dataSourceName
    }
}

/// Represents the output of an UpdateDataSource operation. You can see the updated content by using the GetBatchPrediction operation.
public struct UpdateDataSourceOutput: Swift.Sendable {
    /// The ID assigned to the DataSource during creation. This value should be identical to the value of the DataSourceID in the request.
    public var dataSourceId: Swift.String?

    public init(
        dataSourceId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
    }
}

public struct UpdateEvaluationInput: Swift.Sendable {
    /// The ID assigned to the Evaluation during creation.
    /// This member is required.
    public var evaluationId: Swift.String?
    /// A new user-supplied name or description of the Evaluation that will replace the current content.
    /// This member is required.
    public var evaluationName: Swift.String?

    public init(
        evaluationId: Swift.String? = nil,
        evaluationName: Swift.String? = nil
    )
    {
        self.evaluationId = evaluationId
        self.evaluationName = evaluationName
    }
}

/// Represents the output of an UpdateEvaluation operation. You can see the updated content by using the GetEvaluation operation.
public struct UpdateEvaluationOutput: Swift.Sendable {
    /// The ID assigned to the Evaluation during creation. This value should be identical to the value of the Evaluation in the request.
    public var evaluationId: Swift.String?

    public init(
        evaluationId: Swift.String? = nil
    )
    {
        self.evaluationId = evaluationId
    }
}

public struct UpdateMLModelInput: Swift.Sendable {
    /// The ID assigned to the MLModel during creation.
    /// This member is required.
    public var mlModelId: Swift.String?
    /// A user-supplied name or description of the MLModel.
    public var mlModelName: Swift.String?
    /// The ScoreThreshold used in binary classification MLModel that marks the boundary between a positive prediction and a negative prediction. Output values greater than or equal to the ScoreThreshold receive a positive result from the MLModel, such as true. Output values less than the ScoreThreshold receive a negative response from the MLModel, such as false.
    public var scoreThreshold: Swift.Float?

    public init(
        mlModelId: Swift.String? = nil,
        mlModelName: Swift.String? = nil,
        scoreThreshold: Swift.Float? = nil
    )
    {
        self.mlModelId = mlModelId
        self.mlModelName = mlModelName
        self.scoreThreshold = scoreThreshold
    }
}

/// Represents the output of an UpdateMLModel operation. You can see the updated content by using the GetMLModel operation.
public struct UpdateMLModelOutput: Swift.Sendable {
    /// The ID assigned to the MLModel during creation. This value should be identical to the value of the MLModelID in the request.
    public var mlModelId: Swift.String?

    public init(
        mlModelId: Swift.String? = nil
    )
    {
        self.mlModelId = mlModelId
    }
}

extension AddTagsInput {

    static func urlPathProvider(_ value: AddTagsInput) -> Swift.String? {
        return "/"
    }
}

extension CreateBatchPredictionInput {

    static func urlPathProvider(_ value: CreateBatchPredictionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDataSourceFromRDSInput {

    static func urlPathProvider(_ value: CreateDataSourceFromRDSInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDataSourceFromRedshiftInput {

    static func urlPathProvider(_ value: CreateDataSourceFromRedshiftInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDataSourceFromS3Input {

    static func urlPathProvider(_ value: CreateDataSourceFromS3Input) -> Swift.String? {
        return "/"
    }
}

extension CreateEvaluationInput {

    static func urlPathProvider(_ value: CreateEvaluationInput) -> Swift.String? {
        return "/"
    }
}

extension CreateMLModelInput {

    static func urlPathProvider(_ value: CreateMLModelInput) -> Swift.String? {
        return "/"
    }
}

extension CreateRealtimeEndpointInput {

    static func urlPathProvider(_ value: CreateRealtimeEndpointInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteBatchPredictionInput {

    static func urlPathProvider(_ value: DeleteBatchPredictionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDataSourceInput {

    static func urlPathProvider(_ value: DeleteDataSourceInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteEvaluationInput {

    static func urlPathProvider(_ value: DeleteEvaluationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteMLModelInput {

    static func urlPathProvider(_ value: DeleteMLModelInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteRealtimeEndpointInput {

    static func urlPathProvider(_ value: DeleteRealtimeEndpointInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteTagsInput {

    static func urlPathProvider(_ value: DeleteTagsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeBatchPredictionsInput {

    static func urlPathProvider(_ value: DescribeBatchPredictionsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDataSourcesInput {

    static func urlPathProvider(_ value: DescribeDataSourcesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEvaluationsInput {

    static func urlPathProvider(_ value: DescribeEvaluationsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeMLModelsInput {

    static func urlPathProvider(_ value: DescribeMLModelsInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTagsInput {

    static func urlPathProvider(_ value: DescribeTagsInput) -> Swift.String? {
        return "/"
    }
}

extension GetBatchPredictionInput {

    static func urlPathProvider(_ value: GetBatchPredictionInput) -> Swift.String? {
        return "/"
    }
}

extension GetDataSourceInput {

    static func urlPathProvider(_ value: GetDataSourceInput) -> Swift.String? {
        return "/"
    }
}

extension GetEvaluationInput {

    static func urlPathProvider(_ value: GetEvaluationInput) -> Swift.String? {
        return "/"
    }
}

extension GetMLModelInput {

    static func urlPathProvider(_ value: GetMLModelInput) -> Swift.String? {
        return "/"
    }
}

extension PredictInput {

    static func urlPathProvider(_ value: PredictInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateBatchPredictionInput {

    static func urlPathProvider(_ value: UpdateBatchPredictionInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateDataSourceInput {

    static func urlPathProvider(_ value: UpdateDataSourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateEvaluationInput {

    static func urlPathProvider(_ value: UpdateEvaluationInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateMLModelInput {

    static func urlPathProvider(_ value: UpdateMLModelInput) -> Swift.String? {
        return "/"
    }
}

extension AddTagsInput {

    static func write(value: AddTagsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceId"].write(value.resourceId)
        try writer["ResourceType"].write(value.resourceType)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: MachineLearningClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateBatchPredictionInput {

    static func write(value: CreateBatchPredictionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BatchPredictionDataSourceId"].write(value.batchPredictionDataSourceId)
        try writer["BatchPredictionId"].write(value.batchPredictionId)
        try writer["BatchPredictionName"].write(value.batchPredictionName)
        try writer["MLModelId"].write(value.mlModelId)
        try writer["OutputUri"].write(value.outputUri)
    }
}

extension CreateDataSourceFromRDSInput {

    static func write(value: CreateDataSourceFromRDSInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ComputeStatistics"].write(value.computeStatistics)
        try writer["DataSourceId"].write(value.dataSourceId)
        try writer["DataSourceName"].write(value.dataSourceName)
        try writer["RDSData"].write(value.rdsData, with: MachineLearningClientTypes.RDSDataSpec.write(value:to:))
        try writer["RoleARN"].write(value.roleARN)
    }
}

extension CreateDataSourceFromRedshiftInput {

    static func write(value: CreateDataSourceFromRedshiftInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ComputeStatistics"].write(value.computeStatistics)
        try writer["DataSourceId"].write(value.dataSourceId)
        try writer["DataSourceName"].write(value.dataSourceName)
        try writer["DataSpec"].write(value.dataSpec, with: MachineLearningClientTypes.RedshiftDataSpec.write(value:to:))
        try writer["RoleARN"].write(value.roleARN)
    }
}

extension CreateDataSourceFromS3Input {

    static func write(value: CreateDataSourceFromS3Input?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ComputeStatistics"].write(value.computeStatistics)
        try writer["DataSourceId"].write(value.dataSourceId)
        try writer["DataSourceName"].write(value.dataSourceName)
        try writer["DataSpec"].write(value.dataSpec, with: MachineLearningClientTypes.S3DataSpec.write(value:to:))
    }
}

extension CreateEvaluationInput {

    static func write(value: CreateEvaluationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EvaluationDataSourceId"].write(value.evaluationDataSourceId)
        try writer["EvaluationId"].write(value.evaluationId)
        try writer["EvaluationName"].write(value.evaluationName)
        try writer["MLModelId"].write(value.mlModelId)
    }
}

extension CreateMLModelInput {

    static func write(value: CreateMLModelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MLModelId"].write(value.mlModelId)
        try writer["MLModelName"].write(value.mlModelName)
        try writer["MLModelType"].write(value.mlModelType)
        try writer["Parameters"].writeMap(value.parameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Recipe"].write(value.recipe)
        try writer["RecipeUri"].write(value.recipeUri)
        try writer["TrainingDataSourceId"].write(value.trainingDataSourceId)
    }
}

extension CreateRealtimeEndpointInput {

    static func write(value: CreateRealtimeEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MLModelId"].write(value.mlModelId)
    }
}

extension DeleteBatchPredictionInput {

    static func write(value: DeleteBatchPredictionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BatchPredictionId"].write(value.batchPredictionId)
    }
}

extension DeleteDataSourceInput {

    static func write(value: DeleteDataSourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceId"].write(value.dataSourceId)
    }
}

extension DeleteEvaluationInput {

    static func write(value: DeleteEvaluationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EvaluationId"].write(value.evaluationId)
    }
}

extension DeleteMLModelInput {

    static func write(value: DeleteMLModelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MLModelId"].write(value.mlModelId)
    }
}

extension DeleteRealtimeEndpointInput {

    static func write(value: DeleteRealtimeEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MLModelId"].write(value.mlModelId)
    }
}

extension DeleteTagsInput {

    static func write(value: DeleteTagsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceId"].write(value.resourceId)
        try writer["ResourceType"].write(value.resourceType)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeBatchPredictionsInput {

    static func write(value: DescribeBatchPredictionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EQ"].write(value.eq)
        try writer["FilterVariable"].write(value.filterVariable)
        try writer["GE"].write(value.ge)
        try writer["GT"].write(value.gt)
        try writer["LE"].write(value.le)
        try writer["LT"].write(value.lt)
        try writer["Limit"].write(value.limit)
        try writer["NE"].write(value.ne)
        try writer["NextToken"].write(value.nextToken)
        try writer["Prefix"].write(value.`prefix`)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension DescribeDataSourcesInput {

    static func write(value: DescribeDataSourcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EQ"].write(value.eq)
        try writer["FilterVariable"].write(value.filterVariable)
        try writer["GE"].write(value.ge)
        try writer["GT"].write(value.gt)
        try writer["LE"].write(value.le)
        try writer["LT"].write(value.lt)
        try writer["Limit"].write(value.limit)
        try writer["NE"].write(value.ne)
        try writer["NextToken"].write(value.nextToken)
        try writer["Prefix"].write(value.`prefix`)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension DescribeEvaluationsInput {

    static func write(value: DescribeEvaluationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EQ"].write(value.eq)
        try writer["FilterVariable"].write(value.filterVariable)
        try writer["GE"].write(value.ge)
        try writer["GT"].write(value.gt)
        try writer["LE"].write(value.le)
        try writer["LT"].write(value.lt)
        try writer["Limit"].write(value.limit)
        try writer["NE"].write(value.ne)
        try writer["NextToken"].write(value.nextToken)
        try writer["Prefix"].write(value.`prefix`)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension DescribeMLModelsInput {

    static func write(value: DescribeMLModelsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EQ"].write(value.eq)
        try writer["FilterVariable"].write(value.filterVariable)
        try writer["GE"].write(value.ge)
        try writer["GT"].write(value.gt)
        try writer["LE"].write(value.le)
        try writer["LT"].write(value.lt)
        try writer["Limit"].write(value.limit)
        try writer["NE"].write(value.ne)
        try writer["NextToken"].write(value.nextToken)
        try writer["Prefix"].write(value.`prefix`)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension DescribeTagsInput {

    static func write(value: DescribeTagsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceId"].write(value.resourceId)
        try writer["ResourceType"].write(value.resourceType)
    }
}

extension GetBatchPredictionInput {

    static func write(value: GetBatchPredictionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BatchPredictionId"].write(value.batchPredictionId)
    }
}

extension GetDataSourceInput {

    static func write(value: GetDataSourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceId"].write(value.dataSourceId)
        try writer["Verbose"].write(value.verbose)
    }
}

extension GetEvaluationInput {

    static func write(value: GetEvaluationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EvaluationId"].write(value.evaluationId)
    }
}

extension GetMLModelInput {

    static func write(value: GetMLModelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MLModelId"].write(value.mlModelId)
        try writer["Verbose"].write(value.verbose)
    }
}

extension PredictInput {

    static func write(value: PredictInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MLModelId"].write(value.mlModelId)
        try writer["PredictEndpoint"].write(value.predictEndpoint)
        try writer["Record"].writeMap(value.record, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateBatchPredictionInput {

    static func write(value: UpdateBatchPredictionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BatchPredictionId"].write(value.batchPredictionId)
        try writer["BatchPredictionName"].write(value.batchPredictionName)
    }
}

extension UpdateDataSourceInput {

    static func write(value: UpdateDataSourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceId"].write(value.dataSourceId)
        try writer["DataSourceName"].write(value.dataSourceName)
    }
}

extension UpdateEvaluationInput {

    static func write(value: UpdateEvaluationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EvaluationId"].write(value.evaluationId)
        try writer["EvaluationName"].write(value.evaluationName)
    }
}

extension UpdateMLModelInput {

    static func write(value: UpdateMLModelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MLModelId"].write(value.mlModelId)
        try writer["MLModelName"].write(value.mlModelName)
        try writer["ScoreThreshold"].write(value.scoreThreshold)
    }
}

extension AddTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddTagsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AddTagsOutput()
        value.resourceId = try reader["ResourceId"].readIfPresent()
        value.resourceType = try reader["ResourceType"].readIfPresent()
        return value
    }
}

extension CreateBatchPredictionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateBatchPredictionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateBatchPredictionOutput()
        value.batchPredictionId = try reader["BatchPredictionId"].readIfPresent()
        return value
    }
}

extension CreateDataSourceFromRDSOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDataSourceFromRDSOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDataSourceFromRDSOutput()
        value.dataSourceId = try reader["DataSourceId"].readIfPresent()
        return value
    }
}

extension CreateDataSourceFromRedshiftOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDataSourceFromRedshiftOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDataSourceFromRedshiftOutput()
        value.dataSourceId = try reader["DataSourceId"].readIfPresent()
        return value
    }
}

extension CreateDataSourceFromS3Output {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDataSourceFromS3Output {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDataSourceFromS3Output()
        value.dataSourceId = try reader["DataSourceId"].readIfPresent()
        return value
    }
}

extension CreateEvaluationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEvaluationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEvaluationOutput()
        value.evaluationId = try reader["EvaluationId"].readIfPresent()
        return value
    }
}

extension CreateMLModelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateMLModelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateMLModelOutput()
        value.mlModelId = try reader["MLModelId"].readIfPresent()
        return value
    }
}

extension CreateRealtimeEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateRealtimeEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateRealtimeEndpointOutput()
        value.mlModelId = try reader["MLModelId"].readIfPresent()
        value.realtimeEndpointInfo = try reader["RealtimeEndpointInfo"].readIfPresent(with: MachineLearningClientTypes.RealtimeEndpointInfo.read(from:))
        return value
    }
}

extension DeleteBatchPredictionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteBatchPredictionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteBatchPredictionOutput()
        value.batchPredictionId = try reader["BatchPredictionId"].readIfPresent()
        return value
    }
}

extension DeleteDataSourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDataSourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteDataSourceOutput()
        value.dataSourceId = try reader["DataSourceId"].readIfPresent()
        return value
    }
}

extension DeleteEvaluationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEvaluationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteEvaluationOutput()
        value.evaluationId = try reader["EvaluationId"].readIfPresent()
        return value
    }
}

extension DeleteMLModelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteMLModelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteMLModelOutput()
        value.mlModelId = try reader["MLModelId"].readIfPresent()
        return value
    }
}

extension DeleteRealtimeEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteRealtimeEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteRealtimeEndpointOutput()
        value.mlModelId = try reader["MLModelId"].readIfPresent()
        value.realtimeEndpointInfo = try reader["RealtimeEndpointInfo"].readIfPresent(with: MachineLearningClientTypes.RealtimeEndpointInfo.read(from:))
        return value
    }
}

extension DeleteTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTagsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteTagsOutput()
        value.resourceId = try reader["ResourceId"].readIfPresent()
        value.resourceType = try reader["ResourceType"].readIfPresent()
        return value
    }
}

extension DescribeBatchPredictionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeBatchPredictionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeBatchPredictionsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.results = try reader["Results"].readListIfPresent(memberReadingClosure: MachineLearningClientTypes.BatchPrediction.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeDataSourcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDataSourcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDataSourcesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.results = try reader["Results"].readListIfPresent(memberReadingClosure: MachineLearningClientTypes.DataSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeEvaluationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEvaluationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEvaluationsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.results = try reader["Results"].readListIfPresent(memberReadingClosure: MachineLearningClientTypes.Evaluation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeMLModelsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeMLModelsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeMLModelsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.results = try reader["Results"].readListIfPresent(memberReadingClosure: MachineLearningClientTypes.MLModel.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTagsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTagsOutput()
        value.resourceId = try reader["ResourceId"].readIfPresent()
        value.resourceType = try reader["ResourceType"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: MachineLearningClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension GetBatchPredictionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetBatchPredictionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetBatchPredictionOutput()
        value.batchPredictionDataSourceId = try reader["BatchPredictionDataSourceId"].readIfPresent()
        value.batchPredictionId = try reader["BatchPredictionId"].readIfPresent()
        value.computeTime = try reader["ComputeTime"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdByIamUser = try reader["CreatedByIamUser"].readIfPresent()
        value.finishedAt = try reader["FinishedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.inputDataLocationS3 = try reader["InputDataLocationS3"].readIfPresent()
        value.invalidRecordCount = try reader["InvalidRecordCount"].readIfPresent()
        value.lastUpdatedAt = try reader["LastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.logUri = try reader["LogUri"].readIfPresent()
        value.mlModelId = try reader["MLModelId"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.outputUri = try reader["OutputUri"].readIfPresent()
        value.startedAt = try reader["StartedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["Status"].readIfPresent()
        value.totalRecordCount = try reader["TotalRecordCount"].readIfPresent()
        return value
    }
}

extension GetDataSourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDataSourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDataSourceOutput()
        value.computeStatistics = try reader["ComputeStatistics"].readIfPresent() ?? false
        value.computeTime = try reader["ComputeTime"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdByIamUser = try reader["CreatedByIamUser"].readIfPresent()
        value.dataLocationS3 = try reader["DataLocationS3"].readIfPresent()
        value.dataRearrangement = try reader["DataRearrangement"].readIfPresent()
        value.dataSizeInBytes = try reader["DataSizeInBytes"].readIfPresent()
        value.dataSourceId = try reader["DataSourceId"].readIfPresent()
        value.dataSourceSchema = try reader["DataSourceSchema"].readIfPresent()
        value.finishedAt = try reader["FinishedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedAt = try reader["LastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.logUri = try reader["LogUri"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.numberOfFiles = try reader["NumberOfFiles"].readIfPresent()
        value.rdsMetadata = try reader["RDSMetadata"].readIfPresent(with: MachineLearningClientTypes.RDSMetadata.read(from:))
        value.redshiftMetadata = try reader["RedshiftMetadata"].readIfPresent(with: MachineLearningClientTypes.RedshiftMetadata.read(from:))
        value.roleARN = try reader["RoleARN"].readIfPresent()
        value.startedAt = try reader["StartedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension GetEvaluationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetEvaluationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetEvaluationOutput()
        value.computeTime = try reader["ComputeTime"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdByIamUser = try reader["CreatedByIamUser"].readIfPresent()
        value.evaluationDataSourceId = try reader["EvaluationDataSourceId"].readIfPresent()
        value.evaluationId = try reader["EvaluationId"].readIfPresent()
        value.finishedAt = try reader["FinishedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.inputDataLocationS3 = try reader["InputDataLocationS3"].readIfPresent()
        value.lastUpdatedAt = try reader["LastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.logUri = try reader["LogUri"].readIfPresent()
        value.mlModelId = try reader["MLModelId"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.performanceMetrics = try reader["PerformanceMetrics"].readIfPresent(with: MachineLearningClientTypes.PerformanceMetrics.read(from:))
        value.startedAt = try reader["StartedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension GetMLModelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetMLModelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetMLModelOutput()
        value.computeTime = try reader["ComputeTime"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdByIamUser = try reader["CreatedByIamUser"].readIfPresent()
        value.endpointInfo = try reader["EndpointInfo"].readIfPresent(with: MachineLearningClientTypes.RealtimeEndpointInfo.read(from:))
        value.finishedAt = try reader["FinishedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.inputDataLocationS3 = try reader["InputDataLocationS3"].readIfPresent()
        value.lastUpdatedAt = try reader["LastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.logUri = try reader["LogUri"].readIfPresent()
        value.mlModelId = try reader["MLModelId"].readIfPresent()
        value.mlModelType = try reader["MLModelType"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.recipe = try reader["Recipe"].readIfPresent()
        value.schema = try reader["Schema"].readIfPresent()
        value.scoreThreshold = try reader["ScoreThreshold"].readIfPresent()
        value.scoreThresholdLastUpdatedAt = try reader["ScoreThresholdLastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.sizeInBytes = try reader["SizeInBytes"].readIfPresent()
        value.startedAt = try reader["StartedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["Status"].readIfPresent()
        value.trainingDataSourceId = try reader["TrainingDataSourceId"].readIfPresent()
        value.trainingParameters = try reader["TrainingParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension PredictOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PredictOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PredictOutput()
        value.prediction = try reader["Prediction"].readIfPresent(with: MachineLearningClientTypes.Prediction.read(from:))
        return value
    }
}

extension UpdateBatchPredictionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateBatchPredictionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateBatchPredictionOutput()
        value.batchPredictionId = try reader["BatchPredictionId"].readIfPresent()
        return value
    }
}

extension UpdateDataSourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDataSourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateDataSourceOutput()
        value.dataSourceId = try reader["DataSourceId"].readIfPresent()
        return value
    }
}

extension UpdateEvaluationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEvaluationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateEvaluationOutput()
        value.evaluationId = try reader["EvaluationId"].readIfPresent()
        return value
    }
}

extension UpdateMLModelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateMLModelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateMLModelOutput()
        value.mlModelId = try reader["MLModelId"].readIfPresent()
        return value
    }
}

enum AddTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "InvalidTagException": return try InvalidTagException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TagLimitExceededException": return try TagLimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateBatchPredictionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDataSourceFromRDSOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDataSourceFromRedshiftOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDataSourceFromS3OutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEvaluationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateMLModelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "IdempotentParameterMismatchException": return try IdempotentParameterMismatchException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateRealtimeEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteBatchPredictionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDataSourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEvaluationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteMLModelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteRealtimeEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "InvalidTagException": return try InvalidTagException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeBatchPredictionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDataSourcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEvaluationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeMLModelsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetBatchPredictionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDataSourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetEvaluationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetMLModelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PredictOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "LimitExceededException": return try LimitExceededException.makeError(baseError: baseError)
            case "PredictorNotMountedException": return try PredictorNotMountedException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateBatchPredictionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDataSourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEvaluationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateMLModelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidInputException": return try InvalidInputException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.code = try reader["code"].readIfPresent() ?? 0
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.code = try reader["code"].readIfPresent() ?? 0
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TagLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TagLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = TagLimitExceededException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidTagException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidTagException {
        let reader = baseError.errorBodyReader
        var value = InvalidTagException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidInputException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidInputException {
        let reader = baseError.errorBodyReader
        var value = InvalidInputException()
        value.properties.code = try reader["code"].readIfPresent() ?? 0
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension IdempotentParameterMismatchException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> IdempotentParameterMismatchException {
        let reader = baseError.errorBodyReader
        var value = IdempotentParameterMismatchException()
        value.properties.code = try reader["code"].readIfPresent() ?? 0
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension LimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> LimitExceededException {
        let reader = baseError.errorBodyReader
        var value = LimitExceededException()
        value.properties.code = try reader["code"].readIfPresent() ?? 0
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PredictorNotMountedException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> PredictorNotMountedException {
        let reader = baseError.errorBodyReader
        var value = PredictorNotMountedException()
        value.properties.message = try reader["message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension MachineLearningClientTypes.RealtimeEndpointInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> MachineLearningClientTypes.RealtimeEndpointInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MachineLearningClientTypes.RealtimeEndpointInfo()
        value.peakRequestsPerSecond = try reader["PeakRequestsPerSecond"].readIfPresent() ?? 0
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endpointUrl = try reader["EndpointUrl"].readIfPresent()
        value.endpointStatus = try reader["EndpointStatus"].readIfPresent()
        return value
    }
}

extension MachineLearningClientTypes.BatchPrediction {

    static func read(from reader: SmithyJSON.Reader) throws -> MachineLearningClientTypes.BatchPrediction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MachineLearningClientTypes.BatchPrediction()
        value.batchPredictionId = try reader["BatchPredictionId"].readIfPresent()
        value.mlModelId = try reader["MLModelId"].readIfPresent()
        value.batchPredictionDataSourceId = try reader["BatchPredictionDataSourceId"].readIfPresent()
        value.inputDataLocationS3 = try reader["InputDataLocationS3"].readIfPresent()
        value.createdByIamUser = try reader["CreatedByIamUser"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedAt = try reader["LastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.outputUri = try reader["OutputUri"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.computeTime = try reader["ComputeTime"].readIfPresent()
        value.finishedAt = try reader["FinishedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.startedAt = try reader["StartedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.totalRecordCount = try reader["TotalRecordCount"].readIfPresent()
        value.invalidRecordCount = try reader["InvalidRecordCount"].readIfPresent()
        return value
    }
}

extension MachineLearningClientTypes.DataSource {

    static func read(from reader: SmithyJSON.Reader) throws -> MachineLearningClientTypes.DataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MachineLearningClientTypes.DataSource()
        value.dataSourceId = try reader["DataSourceId"].readIfPresent()
        value.dataLocationS3 = try reader["DataLocationS3"].readIfPresent()
        value.dataRearrangement = try reader["DataRearrangement"].readIfPresent()
        value.createdByIamUser = try reader["CreatedByIamUser"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedAt = try reader["LastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.dataSizeInBytes = try reader["DataSizeInBytes"].readIfPresent()
        value.numberOfFiles = try reader["NumberOfFiles"].readIfPresent()
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.redshiftMetadata = try reader["RedshiftMetadata"].readIfPresent(with: MachineLearningClientTypes.RedshiftMetadata.read(from:))
        value.rdsMetadata = try reader["RDSMetadata"].readIfPresent(with: MachineLearningClientTypes.RDSMetadata.read(from:))
        value.roleARN = try reader["RoleARN"].readIfPresent()
        value.computeStatistics = try reader["ComputeStatistics"].readIfPresent() ?? false
        value.computeTime = try reader["ComputeTime"].readIfPresent()
        value.finishedAt = try reader["FinishedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.startedAt = try reader["StartedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension MachineLearningClientTypes.RDSMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> MachineLearningClientTypes.RDSMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MachineLearningClientTypes.RDSMetadata()
        value.database = try reader["Database"].readIfPresent(with: MachineLearningClientTypes.RDSDatabase.read(from:))
        value.databaseUserName = try reader["DatabaseUserName"].readIfPresent()
        value.selectSqlQuery = try reader["SelectSqlQuery"].readIfPresent()
        value.resourceRole = try reader["ResourceRole"].readIfPresent()
        value.serviceRole = try reader["ServiceRole"].readIfPresent()
        value.dataPipelineId = try reader["DataPipelineId"].readIfPresent()
        return value
    }
}

extension MachineLearningClientTypes.RDSDatabase {

    static func write(value: MachineLearningClientTypes.RDSDatabase?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DatabaseName"].write(value.databaseName)
        try writer["InstanceIdentifier"].write(value.instanceIdentifier)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MachineLearningClientTypes.RDSDatabase {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MachineLearningClientTypes.RDSDatabase()
        value.instanceIdentifier = try reader["InstanceIdentifier"].readIfPresent() ?? ""
        value.databaseName = try reader["DatabaseName"].readIfPresent() ?? ""
        return value
    }
}

extension MachineLearningClientTypes.RedshiftMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> MachineLearningClientTypes.RedshiftMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MachineLearningClientTypes.RedshiftMetadata()
        value.redshiftDatabase = try reader["RedshiftDatabase"].readIfPresent(with: MachineLearningClientTypes.RedshiftDatabase.read(from:))
        value.databaseUserName = try reader["DatabaseUserName"].readIfPresent()
        value.selectSqlQuery = try reader["SelectSqlQuery"].readIfPresent()
        return value
    }
}

extension MachineLearningClientTypes.RedshiftDatabase {

    static func write(value: MachineLearningClientTypes.RedshiftDatabase?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterIdentifier"].write(value.clusterIdentifier)
        try writer["DatabaseName"].write(value.databaseName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MachineLearningClientTypes.RedshiftDatabase {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MachineLearningClientTypes.RedshiftDatabase()
        value.databaseName = try reader["DatabaseName"].readIfPresent() ?? ""
        value.clusterIdentifier = try reader["ClusterIdentifier"].readIfPresent() ?? ""
        return value
    }
}

extension MachineLearningClientTypes.Evaluation {

    static func read(from reader: SmithyJSON.Reader) throws -> MachineLearningClientTypes.Evaluation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MachineLearningClientTypes.Evaluation()
        value.evaluationId = try reader["EvaluationId"].readIfPresent()
        value.mlModelId = try reader["MLModelId"].readIfPresent()
        value.evaluationDataSourceId = try reader["EvaluationDataSourceId"].readIfPresent()
        value.inputDataLocationS3 = try reader["InputDataLocationS3"].readIfPresent()
        value.createdByIamUser = try reader["CreatedByIamUser"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedAt = try reader["LastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.performanceMetrics = try reader["PerformanceMetrics"].readIfPresent(with: MachineLearningClientTypes.PerformanceMetrics.read(from:))
        value.message = try reader["Message"].readIfPresent()
        value.computeTime = try reader["ComputeTime"].readIfPresent()
        value.finishedAt = try reader["FinishedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.startedAt = try reader["StartedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension MachineLearningClientTypes.PerformanceMetrics {

    static func read(from reader: SmithyJSON.Reader) throws -> MachineLearningClientTypes.PerformanceMetrics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MachineLearningClientTypes.PerformanceMetrics()
        value.properties = try reader["Properties"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension MachineLearningClientTypes.MLModel {

    static func read(from reader: SmithyJSON.Reader) throws -> MachineLearningClientTypes.MLModel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MachineLearningClientTypes.MLModel()
        value.mlModelId = try reader["MLModelId"].readIfPresent()
        value.trainingDataSourceId = try reader["TrainingDataSourceId"].readIfPresent()
        value.createdByIamUser = try reader["CreatedByIamUser"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedAt = try reader["LastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.name = try reader["Name"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.sizeInBytes = try reader["SizeInBytes"].readIfPresent()
        value.endpointInfo = try reader["EndpointInfo"].readIfPresent(with: MachineLearningClientTypes.RealtimeEndpointInfo.read(from:))
        value.trainingParameters = try reader["TrainingParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.inputDataLocationS3 = try reader["InputDataLocationS3"].readIfPresent()
        value.algorithm = try reader["Algorithm"].readIfPresent()
        value.mlModelType = try reader["MLModelType"].readIfPresent()
        value.scoreThreshold = try reader["ScoreThreshold"].readIfPresent()
        value.scoreThresholdLastUpdatedAt = try reader["ScoreThresholdLastUpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.message = try reader["Message"].readIfPresent()
        value.computeTime = try reader["ComputeTime"].readIfPresent()
        value.finishedAt = try reader["FinishedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.startedAt = try reader["StartedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension MachineLearningClientTypes.Tag {

    static func write(value: MachineLearningClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> MachineLearningClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MachineLearningClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension MachineLearningClientTypes.Prediction {

    static func read(from reader: SmithyJSON.Reader) throws -> MachineLearningClientTypes.Prediction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = MachineLearningClientTypes.Prediction()
        value.predictedLabel = try reader["predictedLabel"].readIfPresent()
        value.predictedValue = try reader["predictedValue"].readIfPresent()
        value.predictedScores = try reader["predictedScores"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readFloat(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.details = try reader["details"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension MachineLearningClientTypes.RDSDataSpec {

    static func write(value: MachineLearningClientTypes.RDSDataSpec?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataRearrangement"].write(value.dataRearrangement)
        try writer["DataSchema"].write(value.dataSchema)
        try writer["DataSchemaUri"].write(value.dataSchemaUri)
        try writer["DatabaseCredentials"].write(value.databaseCredentials, with: MachineLearningClientTypes.RDSDatabaseCredentials.write(value:to:))
        try writer["DatabaseInformation"].write(value.databaseInformation, with: MachineLearningClientTypes.RDSDatabase.write(value:to:))
        try writer["ResourceRole"].write(value.resourceRole)
        try writer["S3StagingLocation"].write(value.s3StagingLocation)
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SelectSqlQuery"].write(value.selectSqlQuery)
        try writer["ServiceRole"].write(value.serviceRole)
        try writer["SubnetId"].write(value.subnetId)
    }
}

extension MachineLearningClientTypes.RDSDatabaseCredentials {

    static func write(value: MachineLearningClientTypes.RDSDatabaseCredentials?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Password"].write(value.password)
        try writer["Username"].write(value.username)
    }
}

extension MachineLearningClientTypes.RedshiftDataSpec {

    static func write(value: MachineLearningClientTypes.RedshiftDataSpec?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataRearrangement"].write(value.dataRearrangement)
        try writer["DataSchema"].write(value.dataSchema)
        try writer["DataSchemaUri"].write(value.dataSchemaUri)
        try writer["DatabaseCredentials"].write(value.databaseCredentials, with: MachineLearningClientTypes.RedshiftDatabaseCredentials.write(value:to:))
        try writer["DatabaseInformation"].write(value.databaseInformation, with: MachineLearningClientTypes.RedshiftDatabase.write(value:to:))
        try writer["S3StagingLocation"].write(value.s3StagingLocation)
        try writer["SelectSqlQuery"].write(value.selectSqlQuery)
    }
}

extension MachineLearningClientTypes.RedshiftDatabaseCredentials {

    static func write(value: MachineLearningClientTypes.RedshiftDatabaseCredentials?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Password"].write(value.password)
        try writer["Username"].write(value.username)
    }
}

extension MachineLearningClientTypes.S3DataSpec {

    static func write(value: MachineLearningClientTypes.S3DataSpec?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataLocationS3"].write(value.dataLocationS3)
        try writer["DataRearrangement"].write(value.dataRearrangement)
        try writer["DataSchema"].write(value.dataSchema)
        try writer["DataSchemaLocationS3"].write(value.dataSchemaLocationS3)
    }
}

public struct PredictInputEndpointURLHostMiddleware {
    public let id: Swift.String = "PredictInputEndpointURLHostMiddleware"

    public init() { }
}
extension PredictInputEndpointURLHostMiddleware: ClientRuntime.Interceptor {
    public typealias InputType = PredictInput
    public typealias OutputType = PredictOutput
    public typealias RequestType = SmithyHTTPAPI.HTTPRequest
    public typealias ResponseType = SmithyHTTPAPI.HTTPResponse

    public func modifyBeforeSerialization(context: some ClientRuntime.MutableInput<InputType>) async throws {
        if let endpoint = context.getInput().predictEndpoint, let url = Foundation.URL(string: endpoint), let host = url.host {
            context.getAttributes().host = host
        }
    }
}

public enum MachineLearningClientTypes {}
