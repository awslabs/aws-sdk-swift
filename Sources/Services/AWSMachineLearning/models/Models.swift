// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AddTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for tag0 in tags {
                try tagsContainer.encode(tag0)
            }
        }
    }
}

extension AddTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct AddTagsInput: Swift.Equatable {
    /// The ID of the ML object to tag. For example, exampleModelId.
    /// This member is required.
    public var resourceId: Swift.String?
    /// The type of the ML object to tag.
    /// This member is required.
    public var resourceType: MachineLearningClientTypes.TaggableResourceType?
    /// The key-value pairs to use to create tags. If you specify a key without specifying a value, Amazon ML creates a tag with the specified key and a value of null.
    /// This member is required.
    public var tags: [MachineLearningClientTypes.Tag]?

    public init (
        resourceId: Swift.String? = nil,
        resourceType: MachineLearningClientTypes.TaggableResourceType? = nil,
        tags: [MachineLearningClientTypes.Tag]? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
        self.tags = tags
    }
}

struct AddTagsInputBody: Swift.Equatable {
    let tags: [MachineLearningClientTypes.Tag]?
    let resourceId: Swift.String?
    let resourceType: MachineLearningClientTypes.TaggableResourceType?
}

extension AddTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([MachineLearningClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[MachineLearningClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [MachineLearningClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.TaggableResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension AddTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AddTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagException" : self = .invalidTagException(try InvalidTagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "TagLimitExceededException" : self = .tagLimitExceededException(try TagLimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum AddTagsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case invalidTagException(InvalidTagException)
    case resourceNotFoundException(ResourceNotFoundException)
    case tagLimitExceededException(TagLimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AddTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: AddTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceId = output.resourceId
            self.resourceType = output.resourceType
        } else {
            self.resourceId = nil
            self.resourceType = nil
        }
    }
}

/// Amazon ML returns the following elements.
public struct AddTagsOutputResponse: Swift.Equatable {
    /// The ID of the ML object that was tagged.
    public var resourceId: Swift.String?
    /// The type of the ML object that was tagged.
    public var resourceType: MachineLearningClientTypes.TaggableResourceType?

    public init (
        resourceId: Swift.String? = nil,
        resourceType: MachineLearningClientTypes.TaggableResourceType? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct AddTagsOutputResponseBody: Swift.Equatable {
    let resourceId: Swift.String?
    let resourceType: MachineLearningClientTypes.TaggableResourceType?
}

extension AddTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.TaggableResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension MachineLearningClientTypes {
    /// The function used to train an MLModel. Training choices supported by Amazon ML include the following:
    ///
    /// * SGD - Stochastic Gradient Descent.
    ///
    /// * RandomForest - Random forest of decision trees.
    public enum Algorithm: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case sgd
        case sdkUnknown(Swift.String)

        public static var allCases: [Algorithm] {
            return [
                .sgd,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .sgd: return "sgd"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Algorithm(rawValue: rawValue) ?? Algorithm.sdkUnknown(rawValue)
        }
    }
}

extension MachineLearningClientTypes.BatchPrediction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionDataSourceId = "BatchPredictionDataSourceId"
        case batchPredictionId = "BatchPredictionId"
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case finishedAt = "FinishedAt"
        case inputDataLocationS3 = "InputDataLocationS3"
        case invalidRecordCount = "InvalidRecordCount"
        case lastUpdatedAt = "LastUpdatedAt"
        case mlModelId = "MLModelId"
        case message = "Message"
        case name = "Name"
        case outputUri = "OutputUri"
        case startedAt = "StartedAt"
        case status = "Status"
        case totalRecordCount = "TotalRecordCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchPredictionDataSourceId = self.batchPredictionDataSourceId {
            try encodeContainer.encode(batchPredictionDataSourceId, forKey: .batchPredictionDataSourceId)
        }
        if let batchPredictionId = self.batchPredictionId {
            try encodeContainer.encode(batchPredictionId, forKey: .batchPredictionId)
        }
        if let computeTime = self.computeTime {
            try encodeContainer.encode(computeTime, forKey: .computeTime)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let createdByIamUser = self.createdByIamUser {
            try encodeContainer.encode(createdByIamUser, forKey: .createdByIamUser)
        }
        if let finishedAt = self.finishedAt {
            try encodeContainer.encodeTimestamp(finishedAt, format: .epochSeconds, forKey: .finishedAt)
        }
        if let inputDataLocationS3 = self.inputDataLocationS3 {
            try encodeContainer.encode(inputDataLocationS3, forKey: .inputDataLocationS3)
        }
        if let invalidRecordCount = self.invalidRecordCount {
            try encodeContainer.encode(invalidRecordCount, forKey: .invalidRecordCount)
        }
        if let lastUpdatedAt = self.lastUpdatedAt {
            try encodeContainer.encodeTimestamp(lastUpdatedAt, format: .epochSeconds, forKey: .lastUpdatedAt)
        }
        if let mlModelId = self.mlModelId {
            try encodeContainer.encode(mlModelId, forKey: .mlModelId)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let outputUri = self.outputUri {
            try encodeContainer.encode(outputUri, forKey: .outputUri)
        }
        if let startedAt = self.startedAt {
            try encodeContainer.encodeTimestamp(startedAt, format: .epochSeconds, forKey: .startedAt)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let totalRecordCount = self.totalRecordCount {
            try encodeContainer.encode(totalRecordCount, forKey: .totalRecordCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPredictionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionId)
        batchPredictionId = batchPredictionIdDecoded
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
        let batchPredictionDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionDataSourceId)
        batchPredictionDataSourceId = batchPredictionDataSourceIdDecoded
        let inputDataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputDataLocationS3)
        inputDataLocationS3 = inputDataLocationS3Decoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let outputUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputUri)
        outputUri = outputUriDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startedAt)
        startedAt = startedAtDecoded
        let totalRecordCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalRecordCount)
        totalRecordCount = totalRecordCountDecoded
        let invalidRecordCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .invalidRecordCount)
        invalidRecordCount = invalidRecordCountDecoded
    }
}

extension MachineLearningClientTypes {
    /// Represents the output of a GetBatchPrediction operation. The content consists of the detailed metadata, the status, and the data file information of a Batch Prediction.
    public struct BatchPrediction: Swift.Equatable {
        /// The ID of the DataSource that points to the group of observations to predict.
        public var batchPredictionDataSourceId: Swift.String?
        /// The ID assigned to the BatchPrediction at creation. This value should be identical to the value of the BatchPredictionID in the request.
        public var batchPredictionId: Swift.String?
        /// Long integer type that is a 64-bit signed number.
        public var computeTime: Swift.Int?
        /// The time that the BatchPrediction was created. The time is expressed in epoch time.
        public var createdAt: ClientRuntime.Date?
        /// The AWS user account that invoked the BatchPrediction. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
        public var createdByIamUser: Swift.String?
        /// A timestamp represented in epoch time.
        public var finishedAt: ClientRuntime.Date?
        /// The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
        public var inputDataLocationS3: Swift.String?
        /// Long integer type that is a 64-bit signed number.
        public var invalidRecordCount: Swift.Int?
        /// The time of the most recent edit to the BatchPrediction. The time is expressed in epoch time.
        public var lastUpdatedAt: ClientRuntime.Date?
        /// A description of the most recent details about processing the batch prediction request.
        public var message: Swift.String?
        /// The ID of the MLModel that generated predictions for the BatchPrediction request.
        public var mlModelId: Swift.String?
        /// A user-supplied name or description of the BatchPrediction.
        public var name: Swift.String?
        /// The location of an Amazon S3 bucket or directory to receive the operation results. The following substrings are not allowed in the s3 key portion of the outputURI field: ':', '//', '/./', '/../'.
        public var outputUri: Swift.String?
        /// A timestamp represented in epoch time.
        public var startedAt: ClientRuntime.Date?
        /// The status of the BatchPrediction. This element can have one of the following values:
        ///
        /// * PENDING - Amazon Machine Learning (Amazon ML) submitted a request to generate predictions for a batch of observations.
        ///
        /// * INPROGRESS - The process is underway.
        ///
        /// * FAILED - The request to perform a batch prediction did not run to completion. It is not usable.
        ///
        /// * COMPLETED - The batch prediction process completed successfully.
        ///
        /// * DELETED - The BatchPrediction is marked as deleted. It is not usable.
        public var status: MachineLearningClientTypes.EntityStatus?
        /// Long integer type that is a 64-bit signed number.
        public var totalRecordCount: Swift.Int?

        public init (
            batchPredictionDataSourceId: Swift.String? = nil,
            batchPredictionId: Swift.String? = nil,
            computeTime: Swift.Int? = nil,
            createdAt: ClientRuntime.Date? = nil,
            createdByIamUser: Swift.String? = nil,
            finishedAt: ClientRuntime.Date? = nil,
            inputDataLocationS3: Swift.String? = nil,
            invalidRecordCount: Swift.Int? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            message: Swift.String? = nil,
            mlModelId: Swift.String? = nil,
            name: Swift.String? = nil,
            outputUri: Swift.String? = nil,
            startedAt: ClientRuntime.Date? = nil,
            status: MachineLearningClientTypes.EntityStatus? = nil,
            totalRecordCount: Swift.Int? = nil
        )
        {
            self.batchPredictionDataSourceId = batchPredictionDataSourceId
            self.batchPredictionId = batchPredictionId
            self.computeTime = computeTime
            self.createdAt = createdAt
            self.createdByIamUser = createdByIamUser
            self.finishedAt = finishedAt
            self.inputDataLocationS3 = inputDataLocationS3
            self.invalidRecordCount = invalidRecordCount
            self.lastUpdatedAt = lastUpdatedAt
            self.message = message
            self.mlModelId = mlModelId
            self.name = name
            self.outputUri = outputUri
            self.startedAt = startedAt
            self.status = status
            self.totalRecordCount = totalRecordCount
        }
    }

}

extension MachineLearningClientTypes {
    /// A list of the variables to use in searching or filtering BatchPrediction.
    ///
    /// * CreatedAt - Sets the search criteria to BatchPrediction creation date.
    ///
    /// * Status - Sets the search criteria to BatchPrediction status.
    ///
    /// * Name - Sets the search criteria to the contents of BatchPredictionName.
    ///
    /// * IAMUser - Sets the search criteria to the user account that invoked the BatchPrediction creation.
    ///
    /// * MLModelId - Sets the search criteria to the MLModel used in the BatchPrediction.
    ///
    /// * DataSourceId - Sets the search criteria to the DataSource used in the BatchPrediction.
    ///
    /// * DataURI - Sets the search criteria to the data file(s) used in the BatchPrediction. The URL can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.
    public enum BatchPredictionFilterVariable: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createdAt
        case datasourceId
        case dataUri
        case iamUser
        case lastUpdatedAt
        case mlModelId
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [BatchPredictionFilterVariable] {
            return [
                .createdAt,
                .datasourceId,
                .dataUri,
                .iamUser,
                .lastUpdatedAt,
                .mlModelId,
                .name,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createdAt: return "CreatedAt"
            case .datasourceId: return "DataSourceId"
            case .dataUri: return "DataURI"
            case .iamUser: return "IAMUser"
            case .lastUpdatedAt: return "LastUpdatedAt"
            case .mlModelId: return "MLModelId"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BatchPredictionFilterVariable(rawValue: rawValue) ?? BatchPredictionFilterVariable.sdkUnknown(rawValue)
        }
    }
}

extension CreateBatchPredictionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionDataSourceId = "BatchPredictionDataSourceId"
        case batchPredictionId = "BatchPredictionId"
        case batchPredictionName = "BatchPredictionName"
        case mlModelId = "MLModelId"
        case outputUri = "OutputUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchPredictionDataSourceId = self.batchPredictionDataSourceId {
            try encodeContainer.encode(batchPredictionDataSourceId, forKey: .batchPredictionDataSourceId)
        }
        if let batchPredictionId = self.batchPredictionId {
            try encodeContainer.encode(batchPredictionId, forKey: .batchPredictionId)
        }
        if let batchPredictionName = self.batchPredictionName {
            try encodeContainer.encode(batchPredictionName, forKey: .batchPredictionName)
        }
        if let mlModelId = self.mlModelId {
            try encodeContainer.encode(mlModelId, forKey: .mlModelId)
        }
        if let outputUri = self.outputUri {
            try encodeContainer.encode(outputUri, forKey: .outputUri)
        }
    }
}

extension CreateBatchPredictionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateBatchPredictionInput: Swift.Equatable {
    /// The ID of the DataSource that points to the group of observations to predict.
    /// This member is required.
    public var batchPredictionDataSourceId: Swift.String?
    /// A user-supplied ID that uniquely identifies the BatchPrediction.
    /// This member is required.
    public var batchPredictionId: Swift.String?
    /// A user-supplied name or description of the BatchPrediction. BatchPredictionName can only use the UTF-8 character set.
    public var batchPredictionName: Swift.String?
    /// The ID of the MLModel that will generate predictions for the group of observations.
    /// This member is required.
    public var mlModelId: Swift.String?
    /// The location of an Amazon Simple Storage Service (Amazon S3) bucket or directory to store the batch prediction results. The following substrings are not allowed in the s3 key portion of the outputURI field: ':', '//', '/./', '/../'. Amazon ML needs permissions to store and retrieve the logs on your behalf. For information about how to set permissions, see the [Amazon Machine Learning Developer Guide](https://docs.aws.amazon.com/machine-learning/latest/dg).
    /// This member is required.
    public var outputUri: Swift.String?

    public init (
        batchPredictionDataSourceId: Swift.String? = nil,
        batchPredictionId: Swift.String? = nil,
        batchPredictionName: Swift.String? = nil,
        mlModelId: Swift.String? = nil,
        outputUri: Swift.String? = nil
    )
    {
        self.batchPredictionDataSourceId = batchPredictionDataSourceId
        self.batchPredictionId = batchPredictionId
        self.batchPredictionName = batchPredictionName
        self.mlModelId = mlModelId
        self.outputUri = outputUri
    }
}

struct CreateBatchPredictionInputBody: Swift.Equatable {
    let batchPredictionId: Swift.String?
    let batchPredictionName: Swift.String?
    let mlModelId: Swift.String?
    let batchPredictionDataSourceId: Swift.String?
    let outputUri: Swift.String?
}

extension CreateBatchPredictionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionDataSourceId = "BatchPredictionDataSourceId"
        case batchPredictionId = "BatchPredictionId"
        case batchPredictionName = "BatchPredictionName"
        case mlModelId = "MLModelId"
        case outputUri = "OutputUri"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPredictionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionId)
        batchPredictionId = batchPredictionIdDecoded
        let batchPredictionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionName)
        batchPredictionName = batchPredictionNameDecoded
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
        let batchPredictionDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionDataSourceId)
        batchPredictionDataSourceId = batchPredictionDataSourceIdDecoded
        let outputUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputUri)
        outputUri = outputUriDecoded
    }
}

extension CreateBatchPredictionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateBatchPredictionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateBatchPredictionOutputError: Swift.Error, Swift.Equatable {
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateBatchPredictionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateBatchPredictionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.batchPredictionId = output.batchPredictionId
        } else {
            self.batchPredictionId = nil
        }
    }
}

/// Represents the output of a CreateBatchPrediction operation, and is an acknowledgement that Amazon ML received the request. The CreateBatchPrediction operation is asynchronous. You can poll for status updates by using the >GetBatchPrediction operation and checking the Status parameter of the result.
public struct CreateBatchPredictionOutputResponse: Swift.Equatable {
    /// A user-supplied ID that uniquely identifies the BatchPrediction. This value is identical to the value of the BatchPredictionId in the request.
    public var batchPredictionId: Swift.String?

    public init (
        batchPredictionId: Swift.String? = nil
    )
    {
        self.batchPredictionId = batchPredictionId
    }
}

struct CreateBatchPredictionOutputResponseBody: Swift.Equatable {
    let batchPredictionId: Swift.String?
}

extension CreateBatchPredictionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionId = "BatchPredictionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPredictionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionId)
        batchPredictionId = batchPredictionIdDecoded
    }
}

extension CreateDataSourceFromRDSInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeStatistics = "ComputeStatistics"
        case dataSourceId = "DataSourceId"
        case dataSourceName = "DataSourceName"
        case rdsData = "RDSData"
        case roleARN = "RoleARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if computeStatistics != false {
            try encodeContainer.encode(computeStatistics, forKey: .computeStatistics)
        }
        if let dataSourceId = self.dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let dataSourceName = self.dataSourceName {
            try encodeContainer.encode(dataSourceName, forKey: .dataSourceName)
        }
        if let rdsData = self.rdsData {
            try encodeContainer.encode(rdsData, forKey: .rdsData)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
    }
}

extension CreateDataSourceFromRDSInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDataSourceFromRDSInput: Swift.Equatable {
    /// The compute statistics for a DataSource. The statistics are generated from the observation data referenced by a DataSource. Amazon ML uses the statistics internally during MLModel training. This parameter must be set to true if the DataSource needs to be used for MLModel training.
    public var computeStatistics: Swift.Bool
    /// A user-supplied ID that uniquely identifies the DataSource. Typically, an Amazon Resource Number (ARN) becomes the ID for a DataSource.
    /// This member is required.
    public var dataSourceId: Swift.String?
    /// A user-supplied name or description of the DataSource.
    public var dataSourceName: Swift.String?
    /// The data specification of an Amazon RDS DataSource:
    ///
    /// * DatabaseInformation -
    ///
    /// * DatabaseName - The name of the Amazon RDS database.
    ///
    /// * InstanceIdentifier  - A unique identifier for the Amazon RDS database instance.
    ///
    ///
    ///
    ///
    /// * DatabaseCredentials - AWS Identity and Access Management (IAM) credentials that are used to connect to the Amazon RDS database.
    ///
    /// * ResourceRole - A role (DataPipelineDefaultResourceRole) assumed by an EC2 instance to carry out the copy task from Amazon RDS to Amazon Simple Storage Service (Amazon S3). For more information, see [Role templates](https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html) for data pipelines.
    ///
    /// * ServiceRole - A role (DataPipelineDefaultRole) assumed by the AWS Data Pipeline service to monitor the progress of the copy task from Amazon RDS to Amazon S3. For more information, see [Role templates](https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html) for data pipelines.
    ///
    /// * SecurityInfo - The security information to use to access an RDS DB instance. You need to set up appropriate ingress rules for the security entity IDs provided to allow access to the Amazon RDS instance. Specify a [SubnetId, SecurityGroupIds] pair for a VPC-based RDS DB instance.
    ///
    /// * SelectSqlQuery - A query that is used to retrieve the observation data for the Datasource.
    ///
    /// * S3StagingLocation - The Amazon S3 location for staging Amazon RDS data. The data retrieved from Amazon RDS using SelectSqlQuery is stored in this location.
    ///
    /// * DataSchemaUri - The Amazon S3 location of the DataSchema.
    ///
    /// * DataSchema - A JSON string representing the schema. This is not required if DataSchemaUri is specified.
    ///
    /// * DataRearrangement - A JSON string that represents the splitting and rearrangement requirements for the Datasource. Sample -  "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"
    /// This member is required.
    public var rdsData: MachineLearningClientTypes.RDSDataSpec?
    /// The role that Amazon ML assumes on behalf of the user to create and activate a data pipeline in the user's account and copy data using the SelectSqlQuery query from Amazon RDS to Amazon S3.
    /// This member is required.
    public var roleARN: Swift.String?

    public init (
        computeStatistics: Swift.Bool = false,
        dataSourceId: Swift.String? = nil,
        dataSourceName: Swift.String? = nil,
        rdsData: MachineLearningClientTypes.RDSDataSpec? = nil,
        roleARN: Swift.String? = nil
    )
    {
        self.computeStatistics = computeStatistics
        self.dataSourceId = dataSourceId
        self.dataSourceName = dataSourceName
        self.rdsData = rdsData
        self.roleARN = roleARN
    }
}

struct CreateDataSourceFromRDSInputBody: Swift.Equatable {
    let dataSourceId: Swift.String?
    let dataSourceName: Swift.String?
    let rdsData: MachineLearningClientTypes.RDSDataSpec?
    let roleARN: Swift.String?
    let computeStatistics: Swift.Bool
}

extension CreateDataSourceFromRDSInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeStatistics = "ComputeStatistics"
        case dataSourceId = "DataSourceId"
        case dataSourceName = "DataSourceName"
        case rdsData = "RDSData"
        case roleARN = "RoleARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let dataSourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceName)
        dataSourceName = dataSourceNameDecoded
        let rdsDataDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RDSDataSpec.self, forKey: .rdsData)
        rdsData = rdsDataDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let computeStatisticsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .computeStatistics) ?? false
        computeStatistics = computeStatisticsDecoded
    }
}

extension CreateDataSourceFromRDSOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDataSourceFromRDSOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDataSourceFromRDSOutputError: Swift.Error, Swift.Equatable {
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDataSourceFromRDSOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDataSourceFromRDSOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dataSourceId = output.dataSourceId
        } else {
            self.dataSourceId = nil
        }
    }
}

/// Represents the output of a CreateDataSourceFromRDS operation, and is an acknowledgement that Amazon ML received the request. The CreateDataSourceFromRDS> operation is asynchronous. You can poll for updates by using the GetBatchPrediction operation and checking the Status parameter. You can inspect the Message when Status shows up as FAILED. You can also check the progress of the copy operation by going to the DataPipeline console and looking up the pipeline using the pipelineId  from the describe call.
public struct CreateDataSourceFromRDSOutputResponse: Swift.Equatable {
    /// A user-supplied ID that uniquely identifies the datasource. This value should be identical to the value of the DataSourceID in the request.
    public var dataSourceId: Swift.String?

    public init (
        dataSourceId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
    }
}

struct CreateDataSourceFromRDSOutputResponseBody: Swift.Equatable {
    let dataSourceId: Swift.String?
}

extension CreateDataSourceFromRDSOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
    }
}

extension CreateDataSourceFromRedshiftInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeStatistics = "ComputeStatistics"
        case dataSourceId = "DataSourceId"
        case dataSourceName = "DataSourceName"
        case dataSpec = "DataSpec"
        case roleARN = "RoleARN"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if computeStatistics != false {
            try encodeContainer.encode(computeStatistics, forKey: .computeStatistics)
        }
        if let dataSourceId = self.dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let dataSourceName = self.dataSourceName {
            try encodeContainer.encode(dataSourceName, forKey: .dataSourceName)
        }
        if let dataSpec = self.dataSpec {
            try encodeContainer.encode(dataSpec, forKey: .dataSpec)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
    }
}

extension CreateDataSourceFromRedshiftInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDataSourceFromRedshiftInput: Swift.Equatable {
    /// The compute statistics for a DataSource. The statistics are generated from the observation data referenced by a DataSource. Amazon ML uses the statistics internally during MLModel training. This parameter must be set to true if the DataSource needs to be used for MLModel training.
    public var computeStatistics: Swift.Bool
    /// A user-supplied ID that uniquely identifies the DataSource.
    /// This member is required.
    public var dataSourceId: Swift.String?
    /// A user-supplied name or description of the DataSource.
    public var dataSourceName: Swift.String?
    /// The data specification of an Amazon Redshift DataSource:
    ///
    /// * DatabaseInformation -
    ///
    /// * DatabaseName - The name of the Amazon Redshift database.
    ///
    /// * ClusterIdentifier - The unique ID for the Amazon Redshift cluster.
    ///
    ///
    ///
    ///
    /// * DatabaseCredentials - The AWS Identity and Access Management (IAM) credentials that are used to connect to the Amazon Redshift database.
    ///
    /// * SelectSqlQuery - The query that is used to retrieve the observation data for the Datasource.
    ///
    /// * S3StagingLocation - The Amazon Simple Storage Service (Amazon S3) location for staging Amazon Redshift data. The data retrieved from Amazon Redshift using the SelectSqlQuery query is stored in this location.
    ///
    /// * DataSchemaUri - The Amazon S3 location of the DataSchema.
    ///
    /// * DataSchema - A JSON string representing the schema. This is not required if DataSchemaUri is specified.
    ///
    /// * DataRearrangement - A JSON string that represents the splitting and rearrangement requirements for the DataSource. Sample -  "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"
    /// This member is required.
    public var dataSpec: MachineLearningClientTypes.RedshiftDataSpec?
    /// A fully specified role Amazon Resource Name (ARN). Amazon ML assumes the role on behalf of the user to create the following:
    ///
    /// * A security group to allow Amazon ML to execute the SelectSqlQuery query on an Amazon Redshift cluster
    ///
    /// * An Amazon S3 bucket policy to grant Amazon ML read/write permissions on the S3StagingLocation
    /// This member is required.
    public var roleARN: Swift.String?

    public init (
        computeStatistics: Swift.Bool = false,
        dataSourceId: Swift.String? = nil,
        dataSourceName: Swift.String? = nil,
        dataSpec: MachineLearningClientTypes.RedshiftDataSpec? = nil,
        roleARN: Swift.String? = nil
    )
    {
        self.computeStatistics = computeStatistics
        self.dataSourceId = dataSourceId
        self.dataSourceName = dataSourceName
        self.dataSpec = dataSpec
        self.roleARN = roleARN
    }
}

struct CreateDataSourceFromRedshiftInputBody: Swift.Equatable {
    let dataSourceId: Swift.String?
    let dataSourceName: Swift.String?
    let dataSpec: MachineLearningClientTypes.RedshiftDataSpec?
    let roleARN: Swift.String?
    let computeStatistics: Swift.Bool
}

extension CreateDataSourceFromRedshiftInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeStatistics = "ComputeStatistics"
        case dataSourceId = "DataSourceId"
        case dataSourceName = "DataSourceName"
        case dataSpec = "DataSpec"
        case roleARN = "RoleARN"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let dataSourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceName)
        dataSourceName = dataSourceNameDecoded
        let dataSpecDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RedshiftDataSpec.self, forKey: .dataSpec)
        dataSpec = dataSpecDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let computeStatisticsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .computeStatistics) ?? false
        computeStatistics = computeStatisticsDecoded
    }
}

extension CreateDataSourceFromRedshiftOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDataSourceFromRedshiftOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDataSourceFromRedshiftOutputError: Swift.Error, Swift.Equatable {
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDataSourceFromRedshiftOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDataSourceFromRedshiftOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dataSourceId = output.dataSourceId
        } else {
            self.dataSourceId = nil
        }
    }
}

/// Represents the output of a CreateDataSourceFromRedshift operation, and is an acknowledgement that Amazon ML received the request. The CreateDataSourceFromRedshift operation is asynchronous. You can poll for updates by using the GetBatchPrediction operation and checking the Status parameter.
public struct CreateDataSourceFromRedshiftOutputResponse: Swift.Equatable {
    /// A user-supplied ID that uniquely identifies the datasource. This value should be identical to the value of the DataSourceID in the request.
    public var dataSourceId: Swift.String?

    public init (
        dataSourceId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
    }
}

struct CreateDataSourceFromRedshiftOutputResponseBody: Swift.Equatable {
    let dataSourceId: Swift.String?
}

extension CreateDataSourceFromRedshiftOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
    }
}

extension CreateDataSourceFromS3Input: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeStatistics = "ComputeStatistics"
        case dataSourceId = "DataSourceId"
        case dataSourceName = "DataSourceName"
        case dataSpec = "DataSpec"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if computeStatistics != false {
            try encodeContainer.encode(computeStatistics, forKey: .computeStatistics)
        }
        if let dataSourceId = self.dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let dataSourceName = self.dataSourceName {
            try encodeContainer.encode(dataSourceName, forKey: .dataSourceName)
        }
        if let dataSpec = self.dataSpec {
            try encodeContainer.encode(dataSpec, forKey: .dataSpec)
        }
    }
}

extension CreateDataSourceFromS3Input: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateDataSourceFromS3Input: Swift.Equatable {
    /// The compute statistics for a DataSource. The statistics are generated from the observation data referenced by a DataSource. Amazon ML uses the statistics internally during MLModel training. This parameter must be set to true if the DataSource needs to be used for MLModel training.
    public var computeStatistics: Swift.Bool
    /// A user-supplied identifier that uniquely identifies the DataSource.
    /// This member is required.
    public var dataSourceId: Swift.String?
    /// A user-supplied name or description of the DataSource.
    public var dataSourceName: Swift.String?
    /// The data specification of a DataSource:
    ///
    /// * DataLocationS3 - The Amazon S3 location of the observation data.
    ///
    /// * DataSchemaLocationS3 - The Amazon S3 location of the DataSchema.
    ///
    /// * DataSchema - A JSON string representing the schema. This is not required if DataSchemaUri is specified.
    ///
    /// * DataRearrangement - A JSON string that represents the splitting and rearrangement requirements for the Datasource. Sample -  "{\"splitting\":{\"percentBegin\":10,\"percentEnd\":60}}"
    /// This member is required.
    public var dataSpec: MachineLearningClientTypes.S3DataSpec?

    public init (
        computeStatistics: Swift.Bool = false,
        dataSourceId: Swift.String? = nil,
        dataSourceName: Swift.String? = nil,
        dataSpec: MachineLearningClientTypes.S3DataSpec? = nil
    )
    {
        self.computeStatistics = computeStatistics
        self.dataSourceId = dataSourceId
        self.dataSourceName = dataSourceName
        self.dataSpec = dataSpec
    }
}

struct CreateDataSourceFromS3InputBody: Swift.Equatable {
    let dataSourceId: Swift.String?
    let dataSourceName: Swift.String?
    let dataSpec: MachineLearningClientTypes.S3DataSpec?
    let computeStatistics: Swift.Bool
}

extension CreateDataSourceFromS3InputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeStatistics = "ComputeStatistics"
        case dataSourceId = "DataSourceId"
        case dataSourceName = "DataSourceName"
        case dataSpec = "DataSpec"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let dataSourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceName)
        dataSourceName = dataSourceNameDecoded
        let dataSpecDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.S3DataSpec.self, forKey: .dataSpec)
        dataSpec = dataSpecDecoded
        let computeStatisticsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .computeStatistics) ?? false
        computeStatistics = computeStatisticsDecoded
    }
}

extension CreateDataSourceFromS3OutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateDataSourceFromS3OutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateDataSourceFromS3OutputError: Swift.Error, Swift.Equatable {
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateDataSourceFromS3OutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateDataSourceFromS3OutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dataSourceId = output.dataSourceId
        } else {
            self.dataSourceId = nil
        }
    }
}

/// Represents the output of a CreateDataSourceFromS3 operation, and is an acknowledgement that Amazon ML received the request. The CreateDataSourceFromS3 operation is asynchronous. You can poll for updates by using the GetBatchPrediction operation and checking the Status parameter.
public struct CreateDataSourceFromS3OutputResponse: Swift.Equatable {
    /// A user-supplied ID that uniquely identifies the DataSource. This value should be identical to the value of the DataSourceID in the request.
    public var dataSourceId: Swift.String?

    public init (
        dataSourceId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
    }
}

struct CreateDataSourceFromS3OutputResponseBody: Swift.Equatable {
    let dataSourceId: Swift.String?
}

extension CreateDataSourceFromS3OutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
    }
}

extension CreateEvaluationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationDataSourceId = "EvaluationDataSourceId"
        case evaluationId = "EvaluationId"
        case evaluationName = "EvaluationName"
        case mlModelId = "MLModelId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let evaluationDataSourceId = self.evaluationDataSourceId {
            try encodeContainer.encode(evaluationDataSourceId, forKey: .evaluationDataSourceId)
        }
        if let evaluationId = self.evaluationId {
            try encodeContainer.encode(evaluationId, forKey: .evaluationId)
        }
        if let evaluationName = self.evaluationName {
            try encodeContainer.encode(evaluationName, forKey: .evaluationName)
        }
        if let mlModelId = self.mlModelId {
            try encodeContainer.encode(mlModelId, forKey: .mlModelId)
        }
    }
}

extension CreateEvaluationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateEvaluationInput: Swift.Equatable {
    /// The ID of the DataSource for the evaluation. The schema of the DataSource must match the schema used to create the MLModel.
    /// This member is required.
    public var evaluationDataSourceId: Swift.String?
    /// A user-supplied ID that uniquely identifies the Evaluation.
    /// This member is required.
    public var evaluationId: Swift.String?
    /// A user-supplied name or description of the Evaluation.
    public var evaluationName: Swift.String?
    /// The ID of the MLModel to evaluate. The schema used in creating the MLModel must match the schema of the DataSource used in the Evaluation.
    /// This member is required.
    public var mlModelId: Swift.String?

    public init (
        evaluationDataSourceId: Swift.String? = nil,
        evaluationId: Swift.String? = nil,
        evaluationName: Swift.String? = nil,
        mlModelId: Swift.String? = nil
    )
    {
        self.evaluationDataSourceId = evaluationDataSourceId
        self.evaluationId = evaluationId
        self.evaluationName = evaluationName
        self.mlModelId = mlModelId
    }
}

struct CreateEvaluationInputBody: Swift.Equatable {
    let evaluationId: Swift.String?
    let evaluationName: Swift.String?
    let mlModelId: Swift.String?
    let evaluationDataSourceId: Swift.String?
}

extension CreateEvaluationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationDataSourceId = "EvaluationDataSourceId"
        case evaluationId = "EvaluationId"
        case evaluationName = "EvaluationName"
        case mlModelId = "MLModelId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationId)
        evaluationId = evaluationIdDecoded
        let evaluationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationName)
        evaluationName = evaluationNameDecoded
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
        let evaluationDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationDataSourceId)
        evaluationDataSourceId = evaluationDataSourceIdDecoded
    }
}

extension CreateEvaluationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateEvaluationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateEvaluationOutputError: Swift.Error, Swift.Equatable {
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateEvaluationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateEvaluationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.evaluationId = output.evaluationId
        } else {
            self.evaluationId = nil
        }
    }
}

/// Represents the output of a CreateEvaluation operation, and is an acknowledgement that Amazon ML received the request. CreateEvaluation operation is asynchronous. You can poll for status updates by using the GetEvcaluation operation and checking the Status parameter.
public struct CreateEvaluationOutputResponse: Swift.Equatable {
    /// The user-supplied ID that uniquely identifies the Evaluation. This value should be identical to the value of the EvaluationId in the request.
    public var evaluationId: Swift.String?

    public init (
        evaluationId: Swift.String? = nil
    )
    {
        self.evaluationId = evaluationId
    }
}

struct CreateEvaluationOutputResponseBody: Swift.Equatable {
    let evaluationId: Swift.String?
}

extension CreateEvaluationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationId = "EvaluationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationId)
        evaluationId = evaluationIdDecoded
    }
}

extension CreateMLModelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlModelId = "MLModelId"
        case mlModelName = "MLModelName"
        case mlModelType = "MLModelType"
        case parameters = "Parameters"
        case recipe = "Recipe"
        case recipeUri = "RecipeUri"
        case trainingDataSourceId = "TrainingDataSourceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mlModelId = self.mlModelId {
            try encodeContainer.encode(mlModelId, forKey: .mlModelId)
        }
        if let mlModelName = self.mlModelName {
            try encodeContainer.encode(mlModelName, forKey: .mlModelName)
        }
        if let mlModelType = self.mlModelType {
            try encodeContainer.encode(mlModelType.rawValue, forKey: .mlModelType)
        }
        if let parameters = parameters {
            var parametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .parameters)
            for (dictKey0, trainingParameters0) in parameters {
                try parametersContainer.encode(trainingParameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let recipe = self.recipe {
            try encodeContainer.encode(recipe, forKey: .recipe)
        }
        if let recipeUri = self.recipeUri {
            try encodeContainer.encode(recipeUri, forKey: .recipeUri)
        }
        if let trainingDataSourceId = self.trainingDataSourceId {
            try encodeContainer.encode(trainingDataSourceId, forKey: .trainingDataSourceId)
        }
    }
}

extension CreateMLModelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateMLModelInput: Swift.Equatable {
    /// A user-supplied ID that uniquely identifies the MLModel.
    /// This member is required.
    public var mlModelId: Swift.String?
    /// A user-supplied name or description of the MLModel.
    public var mlModelName: Swift.String?
    /// The category of supervised learning that this MLModel will address. Choose from the following types:
    ///
    /// * Choose REGRESSION if the MLModel will be used to predict a numeric value.
    ///
    /// * Choose BINARY if the MLModel result has two possible values.
    ///
    /// * Choose MULTICLASS if the MLModel result has a limited number of values.
    ///
    ///
    /// For more information, see the [Amazon Machine Learning Developer Guide](https://docs.aws.amazon.com/machine-learning/latest/dg).
    /// This member is required.
    public var mlModelType: MachineLearningClientTypes.MLModelType?
    /// A list of the training parameters in the MLModel. The list is implemented as a map of key-value pairs. The following is the current set of training parameters:
    ///
    /// * sgd.maxMLModelSizeInBytes - The maximum allowed size of the model. Depending on the input data, the size of the model might affect its performance. The value is an integer that ranges from 100000 to 2147483648. The default value is 33554432.
    ///
    /// * sgd.maxPasses - The number of times that the training process traverses the observations to build the MLModel. The value is an integer that ranges from 1 to 10000. The default value is 10.
    ///
    /// * sgd.shuffleType - Whether Amazon ML shuffles the training data. Shuffling the data improves a model's ability to find the optimal solution for a variety of data types. The valid values are auto and none. The default value is none. We strongly recommend that you shuffle your data.
    ///
    /// * sgd.l1RegularizationAmount - The coefficient regularization L1 norm. It controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to zero, resulting in a sparse feature set. If you use this parameter, start by specifying a small value, such as 1.0E-08. The value is a double that ranges from 0 to MAX_DOUBLE. The default is to not use L1 normalization. This parameter can't be used when L2 is specified. Use this parameter sparingly.
    ///
    /// * sgd.l2RegularizationAmount - The coefficient regularization L2 norm. It controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to small, nonzero values. If you use this parameter, start by specifying a small value, such as 1.0E-08. The value is a double that ranges from 0 to MAX_DOUBLE. The default is to not use L2 normalization. This parameter can't be used when L1 is specified. Use this parameter sparingly.
    public var parameters: [Swift.String:Swift.String]?
    /// The data recipe for creating the MLModel. You must specify either the recipe or its URI. If you don't specify a recipe or its URI, Amazon ML creates a default.
    public var recipe: Swift.String?
    /// The Amazon Simple Storage Service (Amazon S3) location and file name that contains the MLModel recipe. You must specify either the recipe or its URI. If you don't specify a recipe or its URI, Amazon ML creates a default.
    public var recipeUri: Swift.String?
    /// The DataSource that points to the training data.
    /// This member is required.
    public var trainingDataSourceId: Swift.String?

    public init (
        mlModelId: Swift.String? = nil,
        mlModelName: Swift.String? = nil,
        mlModelType: MachineLearningClientTypes.MLModelType? = nil,
        parameters: [Swift.String:Swift.String]? = nil,
        recipe: Swift.String? = nil,
        recipeUri: Swift.String? = nil,
        trainingDataSourceId: Swift.String? = nil
    )
    {
        self.mlModelId = mlModelId
        self.mlModelName = mlModelName
        self.mlModelType = mlModelType
        self.parameters = parameters
        self.recipe = recipe
        self.recipeUri = recipeUri
        self.trainingDataSourceId = trainingDataSourceId
    }
}

struct CreateMLModelInputBody: Swift.Equatable {
    let mlModelId: Swift.String?
    let mlModelName: Swift.String?
    let mlModelType: MachineLearningClientTypes.MLModelType?
    let parameters: [Swift.String:Swift.String]?
    let trainingDataSourceId: Swift.String?
    let recipe: Swift.String?
    let recipeUri: Swift.String?
}

extension CreateMLModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlModelId = "MLModelId"
        case mlModelName = "MLModelName"
        case mlModelType = "MLModelType"
        case parameters = "Parameters"
        case recipe = "Recipe"
        case recipeUri = "RecipeUri"
        case trainingDataSourceId = "TrainingDataSourceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
        let mlModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelName)
        mlModelName = mlModelNameDecoded
        let mlModelTypeDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.MLModelType.self, forKey: .mlModelType)
        mlModelType = mlModelTypeDecoded
        let parametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .parameters)
        var parametersDecoded0: [Swift.String:Swift.String]? = nil
        if let parametersContainer = parametersContainer {
            parametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in parametersContainer {
                if let stringtype0 = stringtype0 {
                    parametersDecoded0?[key0] = stringtype0
                }
            }
        }
        parameters = parametersDecoded0
        let trainingDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingDataSourceId)
        trainingDataSourceId = trainingDataSourceIdDecoded
        let recipeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recipe)
        recipe = recipeDecoded
        let recipeUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recipeUri)
        recipeUri = recipeUriDecoded
    }
}

extension CreateMLModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMLModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "IdempotentParameterMismatchException" : self = .idempotentParameterMismatchException(try IdempotentParameterMismatchException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateMLModelOutputError: Swift.Error, Swift.Equatable {
    case idempotentParameterMismatchException(IdempotentParameterMismatchException)
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMLModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateMLModelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.mlModelId = output.mlModelId
        } else {
            self.mlModelId = nil
        }
    }
}

/// Represents the output of a CreateMLModel operation, and is an acknowledgement that Amazon ML received the request. The CreateMLModel operation is asynchronous. You can poll for status updates by using the GetMLModel operation and checking the Status parameter.
public struct CreateMLModelOutputResponse: Swift.Equatable {
    /// A user-supplied ID that uniquely identifies the MLModel. This value should be identical to the value of the MLModelId in the request.
    public var mlModelId: Swift.String?

    public init (
        mlModelId: Swift.String? = nil
    )
    {
        self.mlModelId = mlModelId
    }
}

struct CreateMLModelOutputResponseBody: Swift.Equatable {
    let mlModelId: Swift.String?
}

extension CreateMLModelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlModelId = "MLModelId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
    }
}

extension CreateRealtimeEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlModelId = "MLModelId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mlModelId = self.mlModelId {
            try encodeContainer.encode(mlModelId, forKey: .mlModelId)
        }
    }
}

extension CreateRealtimeEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct CreateRealtimeEndpointInput: Swift.Equatable {
    /// The ID assigned to the MLModel during creation.
    /// This member is required.
    public var mlModelId: Swift.String?

    public init (
        mlModelId: Swift.String? = nil
    )
    {
        self.mlModelId = mlModelId
    }
}

struct CreateRealtimeEndpointInputBody: Swift.Equatable {
    let mlModelId: Swift.String?
}

extension CreateRealtimeEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlModelId = "MLModelId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
    }
}

extension CreateRealtimeEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateRealtimeEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum CreateRealtimeEndpointOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateRealtimeEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: CreateRealtimeEndpointOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.mlModelId = output.mlModelId
            self.realtimeEndpointInfo = output.realtimeEndpointInfo
        } else {
            self.mlModelId = nil
            self.realtimeEndpointInfo = nil
        }
    }
}

/// Represents the output of an CreateRealtimeEndpoint operation. The result contains the MLModelId and the endpoint information for the MLModel. Note: The endpoint information includes the URI of the MLModel; that is, the location to send online prediction requests for the specified MLModel.
public struct CreateRealtimeEndpointOutputResponse: Swift.Equatable {
    /// A user-supplied ID that uniquely identifies the MLModel. This value should be identical to the value of the MLModelId in the request.
    public var mlModelId: Swift.String?
    /// The endpoint information of the MLModel
    public var realtimeEndpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo?

    public init (
        mlModelId: Swift.String? = nil,
        realtimeEndpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo? = nil
    )
    {
        self.mlModelId = mlModelId
        self.realtimeEndpointInfo = realtimeEndpointInfo
    }
}

struct CreateRealtimeEndpointOutputResponseBody: Swift.Equatable {
    let mlModelId: Swift.String?
    let realtimeEndpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo?
}

extension CreateRealtimeEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlModelId = "MLModelId"
        case realtimeEndpointInfo = "RealtimeEndpointInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
        let realtimeEndpointInfoDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RealtimeEndpointInfo.self, forKey: .realtimeEndpointInfo)
        realtimeEndpointInfo = realtimeEndpointInfoDecoded
    }
}

extension MachineLearningClientTypes.DataSource: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeStatistics = "ComputeStatistics"
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case dataLocationS3 = "DataLocationS3"
        case dataRearrangement = "DataRearrangement"
        case dataSizeInBytes = "DataSizeInBytes"
        case dataSourceId = "DataSourceId"
        case finishedAt = "FinishedAt"
        case lastUpdatedAt = "LastUpdatedAt"
        case message = "Message"
        case name = "Name"
        case numberOfFiles = "NumberOfFiles"
        case rdsMetadata = "RDSMetadata"
        case redshiftMetadata = "RedshiftMetadata"
        case roleARN = "RoleARN"
        case startedAt = "StartedAt"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if computeStatistics != false {
            try encodeContainer.encode(computeStatistics, forKey: .computeStatistics)
        }
        if let computeTime = self.computeTime {
            try encodeContainer.encode(computeTime, forKey: .computeTime)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let createdByIamUser = self.createdByIamUser {
            try encodeContainer.encode(createdByIamUser, forKey: .createdByIamUser)
        }
        if let dataLocationS3 = self.dataLocationS3 {
            try encodeContainer.encode(dataLocationS3, forKey: .dataLocationS3)
        }
        if let dataRearrangement = self.dataRearrangement {
            try encodeContainer.encode(dataRearrangement, forKey: .dataRearrangement)
        }
        if let dataSizeInBytes = self.dataSizeInBytes {
            try encodeContainer.encode(dataSizeInBytes, forKey: .dataSizeInBytes)
        }
        if let dataSourceId = self.dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let finishedAt = self.finishedAt {
            try encodeContainer.encodeTimestamp(finishedAt, format: .epochSeconds, forKey: .finishedAt)
        }
        if let lastUpdatedAt = self.lastUpdatedAt {
            try encodeContainer.encodeTimestamp(lastUpdatedAt, format: .epochSeconds, forKey: .lastUpdatedAt)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let numberOfFiles = self.numberOfFiles {
            try encodeContainer.encode(numberOfFiles, forKey: .numberOfFiles)
        }
        if let rdsMetadata = self.rdsMetadata {
            try encodeContainer.encode(rdsMetadata, forKey: .rdsMetadata)
        }
        if let redshiftMetadata = self.redshiftMetadata {
            try encodeContainer.encode(redshiftMetadata, forKey: .redshiftMetadata)
        }
        if let roleARN = self.roleARN {
            try encodeContainer.encode(roleARN, forKey: .roleARN)
        }
        if let startedAt = self.startedAt {
            try encodeContainer.encodeTimestamp(startedAt, format: .epochSeconds, forKey: .startedAt)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let dataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataLocationS3)
        dataLocationS3 = dataLocationS3Decoded
        let dataRearrangementDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataRearrangement)
        dataRearrangement = dataRearrangementDecoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let dataSizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataSizeInBytes)
        dataSizeInBytes = dataSizeInBytesDecoded
        let numberOfFilesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfFiles)
        numberOfFiles = numberOfFilesDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let redshiftMetadataDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RedshiftMetadata.self, forKey: .redshiftMetadata)
        redshiftMetadata = redshiftMetadataDecoded
        let rdsMetadataDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RDSMetadata.self, forKey: .rdsMetadata)
        rdsMetadata = rdsMetadataDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let computeStatisticsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .computeStatistics) ?? false
        computeStatistics = computeStatisticsDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startedAt)
        startedAt = startedAtDecoded
    }
}

extension MachineLearningClientTypes {
    /// Represents the output of the GetDataSource operation. The content consists of the detailed metadata and data file information and the current status of the DataSource.
    public struct DataSource: Swift.Equatable {
        /// The parameter is true if statistics need to be generated from the observation data.
        public var computeStatistics: Swift.Bool
        /// Long integer type that is a 64-bit signed number.
        public var computeTime: Swift.Int?
        /// The time that the DataSource was created. The time is expressed in epoch time.
        public var createdAt: ClientRuntime.Date?
        /// The AWS user account from which the DataSource was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
        public var createdByIamUser: Swift.String?
        /// The location and name of the data in Amazon Simple Storage Service (Amazon S3) that is used by a DataSource.
        public var dataLocationS3: Swift.String?
        /// A JSON string that represents the splitting and rearrangement requirement used when this DataSource was created.
        public var dataRearrangement: Swift.String?
        /// The total number of observations contained in the data files that the DataSource references.
        public var dataSizeInBytes: Swift.Int?
        /// The ID that is assigned to the DataSource during creation.
        public var dataSourceId: Swift.String?
        /// A timestamp represented in epoch time.
        public var finishedAt: ClientRuntime.Date?
        /// The time of the most recent edit to the BatchPrediction. The time is expressed in epoch time.
        public var lastUpdatedAt: ClientRuntime.Date?
        /// A description of the most recent details about creating the DataSource.
        public var message: Swift.String?
        /// A user-supplied name or description of the DataSource.
        public var name: Swift.String?
        /// The number of data files referenced by the DataSource.
        public var numberOfFiles: Swift.Int?
        /// The datasource details that are specific to Amazon RDS.
        public var rdsMetadata: MachineLearningClientTypes.RDSMetadata?
        /// Describes the DataSource details specific to Amazon Redshift.
        public var redshiftMetadata: MachineLearningClientTypes.RedshiftMetadata?
        /// The Amazon Resource Name (ARN) of an [AWS IAM Role](https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html#roles-about-termsandconcepts), such as the following: arn:aws:iam::account:role/rolename.
        public var roleARN: Swift.String?
        /// A timestamp represented in epoch time.
        public var startedAt: ClientRuntime.Date?
        /// The current status of the DataSource. This element can have one of the following values:
        ///
        /// * PENDING - Amazon Machine Learning (Amazon ML) submitted a request to create a DataSource.
        ///
        /// * INPROGRESS - The creation process is underway.
        ///
        /// * FAILED - The request to create a DataSource did not run to completion. It is not usable.
        ///
        /// * COMPLETED - The creation process completed successfully.
        ///
        /// * DELETED - The DataSource is marked as deleted. It is not usable.
        public var status: MachineLearningClientTypes.EntityStatus?

        public init (
            computeStatistics: Swift.Bool = false,
            computeTime: Swift.Int? = nil,
            createdAt: ClientRuntime.Date? = nil,
            createdByIamUser: Swift.String? = nil,
            dataLocationS3: Swift.String? = nil,
            dataRearrangement: Swift.String? = nil,
            dataSizeInBytes: Swift.Int? = nil,
            dataSourceId: Swift.String? = nil,
            finishedAt: ClientRuntime.Date? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            message: Swift.String? = nil,
            name: Swift.String? = nil,
            numberOfFiles: Swift.Int? = nil,
            rdsMetadata: MachineLearningClientTypes.RDSMetadata? = nil,
            redshiftMetadata: MachineLearningClientTypes.RedshiftMetadata? = nil,
            roleARN: Swift.String? = nil,
            startedAt: ClientRuntime.Date? = nil,
            status: MachineLearningClientTypes.EntityStatus? = nil
        )
        {
            self.computeStatistics = computeStatistics
            self.computeTime = computeTime
            self.createdAt = createdAt
            self.createdByIamUser = createdByIamUser
            self.dataLocationS3 = dataLocationS3
            self.dataRearrangement = dataRearrangement
            self.dataSizeInBytes = dataSizeInBytes
            self.dataSourceId = dataSourceId
            self.finishedAt = finishedAt
            self.lastUpdatedAt = lastUpdatedAt
            self.message = message
            self.name = name
            self.numberOfFiles = numberOfFiles
            self.rdsMetadata = rdsMetadata
            self.redshiftMetadata = redshiftMetadata
            self.roleARN = roleARN
            self.startedAt = startedAt
            self.status = status
        }
    }

}

extension MachineLearningClientTypes {
    /// A list of the variables to use in searching or filtering DataSource.
    ///
    /// * CreatedAt - Sets the search criteria to DataSource creation date.
    ///
    /// * Status - Sets the search criteria to DataSource status.
    ///
    /// * Name - Sets the search criteria to the contents of DataSourceName.
    ///
    /// * DataUri - Sets the search criteria to the URI of data files used to create the DataSource. The URI can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.
    ///
    /// * IAMUser - Sets the search criteria to the user account that invoked the DataSource creation.
    ///
    ///
    /// Note: The variable names should match the variable names in the DataSource.
    public enum DataSourceFilterVariable: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createdAt
        case dataUri
        case iamUser
        case lastUpdatedAt
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [DataSourceFilterVariable] {
            return [
                .createdAt,
                .dataUri,
                .iamUser,
                .lastUpdatedAt,
                .name,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createdAt: return "CreatedAt"
            case .dataUri: return "DataLocationS3"
            case .iamUser: return "IAMUser"
            case .lastUpdatedAt: return "LastUpdatedAt"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DataSourceFilterVariable(rawValue: rawValue) ?? DataSourceFilterVariable.sdkUnknown(rawValue)
        }
    }
}

extension DeleteBatchPredictionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionId = "BatchPredictionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchPredictionId = self.batchPredictionId {
            try encodeContainer.encode(batchPredictionId, forKey: .batchPredictionId)
        }
    }
}

extension DeleteBatchPredictionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteBatchPredictionInput: Swift.Equatable {
    /// A user-supplied ID that uniquely identifies the BatchPrediction.
    /// This member is required.
    public var batchPredictionId: Swift.String?

    public init (
        batchPredictionId: Swift.String? = nil
    )
    {
        self.batchPredictionId = batchPredictionId
    }
}

struct DeleteBatchPredictionInputBody: Swift.Equatable {
    let batchPredictionId: Swift.String?
}

extension DeleteBatchPredictionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionId = "BatchPredictionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPredictionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionId)
        batchPredictionId = batchPredictionIdDecoded
    }
}

extension DeleteBatchPredictionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteBatchPredictionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteBatchPredictionOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteBatchPredictionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteBatchPredictionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.batchPredictionId = output.batchPredictionId
        } else {
            self.batchPredictionId = nil
        }
    }
}

/// Represents the output of a DeleteBatchPrediction operation. You can use the GetBatchPrediction operation and check the value of the Status parameter to see whether a BatchPrediction is marked as DELETED.
public struct DeleteBatchPredictionOutputResponse: Swift.Equatable {
    /// A user-supplied ID that uniquely identifies the BatchPrediction. This value should be identical to the value of the BatchPredictionID in the request.
    public var batchPredictionId: Swift.String?

    public init (
        batchPredictionId: Swift.String? = nil
    )
    {
        self.batchPredictionId = batchPredictionId
    }
}

struct DeleteBatchPredictionOutputResponseBody: Swift.Equatable {
    let batchPredictionId: Swift.String?
}

extension DeleteBatchPredictionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionId = "BatchPredictionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPredictionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionId)
        batchPredictionId = batchPredictionIdDecoded
    }
}

extension DeleteDataSourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceId = self.dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
    }
}

extension DeleteDataSourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteDataSourceInput: Swift.Equatable {
    /// A user-supplied ID that uniquely identifies the DataSource.
    /// This member is required.
    public var dataSourceId: Swift.String?

    public init (
        dataSourceId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
    }
}

struct DeleteDataSourceInputBody: Swift.Equatable {
    let dataSourceId: Swift.String?
}

extension DeleteDataSourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
    }
}

extension DeleteDataSourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteDataSourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteDataSourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteDataSourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteDataSourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dataSourceId = output.dataSourceId
        } else {
            self.dataSourceId = nil
        }
    }
}

/// Represents the output of a DeleteDataSource operation.
public struct DeleteDataSourceOutputResponse: Swift.Equatable {
    /// A user-supplied ID that uniquely identifies the DataSource. This value should be identical to the value of the DataSourceID in the request.
    public var dataSourceId: Swift.String?

    public init (
        dataSourceId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
    }
}

struct DeleteDataSourceOutputResponseBody: Swift.Equatable {
    let dataSourceId: Swift.String?
}

extension DeleteDataSourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
    }
}

extension DeleteEvaluationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationId = "EvaluationId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let evaluationId = self.evaluationId {
            try encodeContainer.encode(evaluationId, forKey: .evaluationId)
        }
    }
}

extension DeleteEvaluationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteEvaluationInput: Swift.Equatable {
    /// A user-supplied ID that uniquely identifies the Evaluation to delete.
    /// This member is required.
    public var evaluationId: Swift.String?

    public init (
        evaluationId: Swift.String? = nil
    )
    {
        self.evaluationId = evaluationId
    }
}

struct DeleteEvaluationInputBody: Swift.Equatable {
    let evaluationId: Swift.String?
}

extension DeleteEvaluationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationId = "EvaluationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationId)
        evaluationId = evaluationIdDecoded
    }
}

extension DeleteEvaluationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteEvaluationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteEvaluationOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteEvaluationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteEvaluationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.evaluationId = output.evaluationId
        } else {
            self.evaluationId = nil
        }
    }
}

/// Represents the output of a DeleteEvaluation operation. The output indicates that Amazon Machine Learning (Amazon ML) received the request. You can use the GetEvaluation operation and check the value of the Status parameter to see whether an Evaluation is marked as DELETED.
public struct DeleteEvaluationOutputResponse: Swift.Equatable {
    /// A user-supplied ID that uniquely identifies the Evaluation. This value should be identical to the value of the EvaluationId in the request.
    public var evaluationId: Swift.String?

    public init (
        evaluationId: Swift.String? = nil
    )
    {
        self.evaluationId = evaluationId
    }
}

struct DeleteEvaluationOutputResponseBody: Swift.Equatable {
    let evaluationId: Swift.String?
}

extension DeleteEvaluationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationId = "EvaluationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationId)
        evaluationId = evaluationIdDecoded
    }
}

extension DeleteMLModelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlModelId = "MLModelId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mlModelId = self.mlModelId {
            try encodeContainer.encode(mlModelId, forKey: .mlModelId)
        }
    }
}

extension DeleteMLModelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteMLModelInput: Swift.Equatable {
    /// A user-supplied ID that uniquely identifies the MLModel.
    /// This member is required.
    public var mlModelId: Swift.String?

    public init (
        mlModelId: Swift.String? = nil
    )
    {
        self.mlModelId = mlModelId
    }
}

struct DeleteMLModelInputBody: Swift.Equatable {
    let mlModelId: Swift.String?
}

extension DeleteMLModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlModelId = "MLModelId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
    }
}

extension DeleteMLModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMLModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteMLModelOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMLModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteMLModelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.mlModelId = output.mlModelId
        } else {
            self.mlModelId = nil
        }
    }
}

/// Represents the output of a DeleteMLModel operation. You can use the GetMLModel operation and check the value of the Status parameter to see whether an MLModel is marked as DELETED.
public struct DeleteMLModelOutputResponse: Swift.Equatable {
    /// A user-supplied ID that uniquely identifies the MLModel. This value should be identical to the value of the MLModelID in the request.
    public var mlModelId: Swift.String?

    public init (
        mlModelId: Swift.String? = nil
    )
    {
        self.mlModelId = mlModelId
    }
}

struct DeleteMLModelOutputResponseBody: Swift.Equatable {
    let mlModelId: Swift.String?
}

extension DeleteMLModelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlModelId = "MLModelId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
    }
}

extension DeleteRealtimeEndpointInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlModelId = "MLModelId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mlModelId = self.mlModelId {
            try encodeContainer.encode(mlModelId, forKey: .mlModelId)
        }
    }
}

extension DeleteRealtimeEndpointInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteRealtimeEndpointInput: Swift.Equatable {
    /// The ID assigned to the MLModel during creation.
    /// This member is required.
    public var mlModelId: Swift.String?

    public init (
        mlModelId: Swift.String? = nil
    )
    {
        self.mlModelId = mlModelId
    }
}

struct DeleteRealtimeEndpointInputBody: Swift.Equatable {
    let mlModelId: Swift.String?
}

extension DeleteRealtimeEndpointInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlModelId = "MLModelId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
    }
}

extension DeleteRealtimeEndpointOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteRealtimeEndpointOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteRealtimeEndpointOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteRealtimeEndpointOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteRealtimeEndpointOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.mlModelId = output.mlModelId
            self.realtimeEndpointInfo = output.realtimeEndpointInfo
        } else {
            self.mlModelId = nil
            self.realtimeEndpointInfo = nil
        }
    }
}

/// Represents the output of an DeleteRealtimeEndpoint operation. The result contains the MLModelId and the endpoint information for the MLModel.
public struct DeleteRealtimeEndpointOutputResponse: Swift.Equatable {
    /// A user-supplied ID that uniquely identifies the MLModel. This value should be identical to the value of the MLModelId in the request.
    public var mlModelId: Swift.String?
    /// The endpoint information of the MLModel
    public var realtimeEndpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo?

    public init (
        mlModelId: Swift.String? = nil,
        realtimeEndpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo? = nil
    )
    {
        self.mlModelId = mlModelId
        self.realtimeEndpointInfo = realtimeEndpointInfo
    }
}

struct DeleteRealtimeEndpointOutputResponseBody: Swift.Equatable {
    let mlModelId: Swift.String?
    let realtimeEndpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo?
}

extension DeleteRealtimeEndpointOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlModelId = "MLModelId"
        case realtimeEndpointInfo = "RealtimeEndpointInfo"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
        let realtimeEndpointInfoDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RealtimeEndpointInfo.self, forKey: .realtimeEndpointInfo)
        realtimeEndpointInfo = realtimeEndpointInfoDecoded
    }
}

extension DeleteTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkey0 in tagKeys {
                try tagKeysContainer.encode(tagkey0)
            }
        }
    }
}

extension DeleteTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DeleteTagsInput: Swift.Equatable {
    /// The ID of the tagged ML object. For example, exampleModelId.
    /// This member is required.
    public var resourceId: Swift.String?
    /// The type of the tagged ML object.
    /// This member is required.
    public var resourceType: MachineLearningClientTypes.TaggableResourceType?
    /// One or more tags to delete.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceId: Swift.String? = nil,
        resourceType: MachineLearningClientTypes.TaggableResourceType? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
        self.tagKeys = tagKeys
    }
}

struct DeleteTagsInputBody: Swift.Equatable {
    let tagKeys: [Swift.String]?
    let resourceId: Swift.String?
    let resourceType: MachineLearningClientTypes.TaggableResourceType?
}

extension DeleteTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.TaggableResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension DeleteTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidTagException" : self = .invalidTagException(try InvalidTagException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DeleteTagsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case invalidTagException(InvalidTagException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DeleteTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceId = output.resourceId
            self.resourceType = output.resourceType
        } else {
            self.resourceId = nil
            self.resourceType = nil
        }
    }
}

/// Amazon ML returns the following elements.
public struct DeleteTagsOutputResponse: Swift.Equatable {
    /// The ID of the ML object from which tags were deleted.
    public var resourceId: Swift.String?
    /// The type of the ML object from which tags were deleted.
    public var resourceType: MachineLearningClientTypes.TaggableResourceType?

    public init (
        resourceId: Swift.String? = nil,
        resourceType: MachineLearningClientTypes.TaggableResourceType? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct DeleteTagsOutputResponseBody: Swift.Equatable {
    let resourceId: Swift.String?
    let resourceType: MachineLearningClientTypes.TaggableResourceType?
}

extension DeleteTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.TaggableResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension DescribeBatchPredictionsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eq = "EQ"
        case filterVariable = "FilterVariable"
        case ge = "GE"
        case gt = "GT"
        case le = "LE"
        case lt = "LT"
        case limit = "Limit"
        case ne = "NE"
        case nextToken = "NextToken"
        case `prefix` = "Prefix"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eq = self.eq {
            try encodeContainer.encode(eq, forKey: .eq)
        }
        if let filterVariable = self.filterVariable {
            try encodeContainer.encode(filterVariable.rawValue, forKey: .filterVariable)
        }
        if let ge = self.ge {
            try encodeContainer.encode(ge, forKey: .ge)
        }
        if let gt = self.gt {
            try encodeContainer.encode(gt, forKey: .gt)
        }
        if let le = self.le {
            try encodeContainer.encode(le, forKey: .le)
        }
        if let lt = self.lt {
            try encodeContainer.encode(lt, forKey: .lt)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let ne = self.ne {
            try encodeContainer.encode(ne, forKey: .ne)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
        if let sortOrder = self.sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension DescribeBatchPredictionsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeBatchPredictionsInput: Swift.Equatable {
    /// The equal to operator. The BatchPrediction results will have FilterVariable values that exactly match the value specified with EQ.
    public var eq: Swift.String?
    /// Use one of the following variables to filter a list of BatchPrediction:
    ///
    /// * CreatedAt - Sets the search criteria to the BatchPrediction creation date.
    ///
    /// * Status - Sets the search criteria to the BatchPrediction status.
    ///
    /// * Name - Sets the search criteria to the contents of the BatchPredictionName.
    ///
    /// * IAMUser - Sets the search criteria to the user account that invoked the BatchPrediction creation.
    ///
    /// * MLModelId - Sets the search criteria to the MLModel used in the BatchPrediction.
    ///
    /// * DataSourceId - Sets the search criteria to the DataSource used in the BatchPrediction.
    ///
    /// * DataURI - Sets the search criteria to the data file(s) used in the BatchPrediction. The URL can identify either a file or an Amazon Simple Storage Solution (Amazon S3) bucket or directory.
    public var filterVariable: MachineLearningClientTypes.BatchPredictionFilterVariable?
    /// The greater than or equal to operator. The BatchPrediction results will have FilterVariable values that are greater than or equal to the value specified with GE.
    public var ge: Swift.String?
    /// The greater than operator. The BatchPrediction results will have FilterVariable values that are greater than the value specified with GT.
    public var gt: Swift.String?
    /// The less than or equal to operator. The BatchPrediction results will have FilterVariable values that are less than or equal to the value specified with LE.
    public var le: Swift.String?
    /// The number of pages of information to include in the result. The range of acceptable values is 1 through 100. The default value is 100.
    public var limit: Swift.Int?
    /// The less than operator. The BatchPrediction results will have FilterVariable values that are less than the value specified with LT.
    public var lt: Swift.String?
    /// The not equal to operator. The BatchPrediction results will have FilterVariable values not equal to the value specified with NE.
    public var ne: Swift.String?
    /// An ID of the page in the paginated results.
    public var nextToken: Swift.String?
    /// A string that is found at the beginning of a variable, such as Name or Id. For example, a Batch Prediction operation could have the Name2014-09-09-HolidayGiftMailer. To search for this BatchPrediction, select Name for the FilterVariable and any of the following strings for the Prefix:
    ///
    /// * 2014-09
    ///
    /// * 2014-09-09
    ///
    /// * 2014-09-09-Holiday
    public var `prefix`: Swift.String?
    /// A two-value parameter that determines the sequence of the resulting list of MLModels.
    ///
    /// * asc - Arranges the list in ascending order (A-Z, 0-9).
    ///
    /// * dsc - Arranges the list in descending order (Z-A, 9-0).
    ///
    ///
    /// Results are sorted by FilterVariable.
    public var sortOrder: MachineLearningClientTypes.SortOrder?

    public init (
        eq: Swift.String? = nil,
        filterVariable: MachineLearningClientTypes.BatchPredictionFilterVariable? = nil,
        ge: Swift.String? = nil,
        gt: Swift.String? = nil,
        le: Swift.String? = nil,
        limit: Swift.Int? = nil,
        lt: Swift.String? = nil,
        ne: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        `prefix`: Swift.String? = nil,
        sortOrder: MachineLearningClientTypes.SortOrder? = nil
    )
    {
        self.eq = eq
        self.filterVariable = filterVariable
        self.ge = ge
        self.gt = gt
        self.le = le
        self.limit = limit
        self.lt = lt
        self.ne = ne
        self.nextToken = nextToken
        self.`prefix` = `prefix`
        self.sortOrder = sortOrder
    }
}

struct DescribeBatchPredictionsInputBody: Swift.Equatable {
    let filterVariable: MachineLearningClientTypes.BatchPredictionFilterVariable?
    let eq: Swift.String?
    let gt: Swift.String?
    let lt: Swift.String?
    let ge: Swift.String?
    let le: Swift.String?
    let ne: Swift.String?
    let `prefix`: Swift.String?
    let sortOrder: MachineLearningClientTypes.SortOrder?
    let nextToken: Swift.String?
    let limit: Swift.Int?
}

extension DescribeBatchPredictionsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eq = "EQ"
        case filterVariable = "FilterVariable"
        case ge = "GE"
        case gt = "GT"
        case le = "LE"
        case lt = "LT"
        case limit = "Limit"
        case ne = "NE"
        case nextToken = "NextToken"
        case `prefix` = "Prefix"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterVariableDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.BatchPredictionFilterVariable.self, forKey: .filterVariable)
        filterVariable = filterVariableDecoded
        let eqDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eq)
        eq = eqDecoded
        let gtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gt)
        gt = gtDecoded
        let ltDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lt)
        lt = ltDecoded
        let geDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ge)
        ge = geDecoded
        let leDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .le)
        le = leDecoded
        let neDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ne)
        ne = neDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeBatchPredictionsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeBatchPredictionsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeBatchPredictionsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeBatchPredictionsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeBatchPredictionsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.results = output.results
        } else {
            self.nextToken = nil
            self.results = nil
        }
    }
}

/// Represents the output of a DescribeBatchPredictions operation. The content is essentially a list of BatchPredictions.
public struct DescribeBatchPredictionsOutputResponse: Swift.Equatable {
    /// The ID of the next page in the paginated results that indicates at least one more page follows.
    public var nextToken: Swift.String?
    /// A list of BatchPrediction objects that meet the search criteria.
    public var results: [MachineLearningClientTypes.BatchPrediction]?

    public init (
        nextToken: Swift.String? = nil,
        results: [MachineLearningClientTypes.BatchPrediction]? = nil
    )
    {
        self.nextToken = nextToken
        self.results = results
    }
}

struct DescribeBatchPredictionsOutputResponseBody: Swift.Equatable {
    let results: [MachineLearningClientTypes.BatchPrediction]?
    let nextToken: Swift.String?
}

extension DescribeBatchPredictionsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case results = "Results"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultsContainer = try containerValues.decodeIfPresent([MachineLearningClientTypes.BatchPrediction?].self, forKey: .results)
        var resultsDecoded0:[MachineLearningClientTypes.BatchPrediction]? = nil
        if let resultsContainer = resultsContainer {
            resultsDecoded0 = [MachineLearningClientTypes.BatchPrediction]()
            for structure0 in resultsContainer {
                if let structure0 = structure0 {
                    resultsDecoded0?.append(structure0)
                }
            }
        }
        results = resultsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeDataSourcesInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eq = "EQ"
        case filterVariable = "FilterVariable"
        case ge = "GE"
        case gt = "GT"
        case le = "LE"
        case lt = "LT"
        case limit = "Limit"
        case ne = "NE"
        case nextToken = "NextToken"
        case `prefix` = "Prefix"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eq = self.eq {
            try encodeContainer.encode(eq, forKey: .eq)
        }
        if let filterVariable = self.filterVariable {
            try encodeContainer.encode(filterVariable.rawValue, forKey: .filterVariable)
        }
        if let ge = self.ge {
            try encodeContainer.encode(ge, forKey: .ge)
        }
        if let gt = self.gt {
            try encodeContainer.encode(gt, forKey: .gt)
        }
        if let le = self.le {
            try encodeContainer.encode(le, forKey: .le)
        }
        if let lt = self.lt {
            try encodeContainer.encode(lt, forKey: .lt)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let ne = self.ne {
            try encodeContainer.encode(ne, forKey: .ne)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
        if let sortOrder = self.sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension DescribeDataSourcesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeDataSourcesInput: Swift.Equatable {
    /// The equal to operator. The DataSource results will have FilterVariable values that exactly match the value specified with EQ.
    public var eq: Swift.String?
    /// Use one of the following variables to filter a list of DataSource:
    ///
    /// * CreatedAt - Sets the search criteria to DataSource creation dates.
    ///
    /// * Status - Sets the search criteria to DataSource statuses.
    ///
    /// * Name - Sets the search criteria to the contents of DataSourceName.
    ///
    /// * DataUri - Sets the search criteria to the URI of data files used to create the DataSource. The URI can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.
    ///
    /// * IAMUser - Sets the search criteria to the user account that invoked the DataSource creation.
    public var filterVariable: MachineLearningClientTypes.DataSourceFilterVariable?
    /// The greater than or equal to operator. The DataSource results will have FilterVariable values that are greater than or equal to the value specified with GE.
    public var ge: Swift.String?
    /// The greater than operator. The DataSource results will have FilterVariable values that are greater than the value specified with GT.
    public var gt: Swift.String?
    /// The less than or equal to operator. The DataSource results will have FilterVariable values that are less than or equal to the value specified with LE.
    public var le: Swift.String?
    /// The maximum number of DataSource to include in the result.
    public var limit: Swift.Int?
    /// The less than operator. The DataSource results will have FilterVariable values that are less than the value specified with LT.
    public var lt: Swift.String?
    /// The not equal to operator. The DataSource results will have FilterVariable values not equal to the value specified with NE.
    public var ne: Swift.String?
    /// The ID of the page in the paginated results.
    public var nextToken: Swift.String?
    /// A string that is found at the beginning of a variable, such as Name or Id. For example, a DataSource could have the Name2014-09-09-HolidayGiftMailer. To search for this DataSource, select Name for the FilterVariable and any of the following strings for the Prefix:
    ///
    /// * 2014-09
    ///
    /// * 2014-09-09
    ///
    /// * 2014-09-09-Holiday
    public var `prefix`: Swift.String?
    /// A two-value parameter that determines the sequence of the resulting list of DataSource.
    ///
    /// * asc - Arranges the list in ascending order (A-Z, 0-9).
    ///
    /// * dsc - Arranges the list in descending order (Z-A, 9-0).
    ///
    ///
    /// Results are sorted by FilterVariable.
    public var sortOrder: MachineLearningClientTypes.SortOrder?

    public init (
        eq: Swift.String? = nil,
        filterVariable: MachineLearningClientTypes.DataSourceFilterVariable? = nil,
        ge: Swift.String? = nil,
        gt: Swift.String? = nil,
        le: Swift.String? = nil,
        limit: Swift.Int? = nil,
        lt: Swift.String? = nil,
        ne: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        `prefix`: Swift.String? = nil,
        sortOrder: MachineLearningClientTypes.SortOrder? = nil
    )
    {
        self.eq = eq
        self.filterVariable = filterVariable
        self.ge = ge
        self.gt = gt
        self.le = le
        self.limit = limit
        self.lt = lt
        self.ne = ne
        self.nextToken = nextToken
        self.`prefix` = `prefix`
        self.sortOrder = sortOrder
    }
}

struct DescribeDataSourcesInputBody: Swift.Equatable {
    let filterVariable: MachineLearningClientTypes.DataSourceFilterVariable?
    let eq: Swift.String?
    let gt: Swift.String?
    let lt: Swift.String?
    let ge: Swift.String?
    let le: Swift.String?
    let ne: Swift.String?
    let `prefix`: Swift.String?
    let sortOrder: MachineLearningClientTypes.SortOrder?
    let nextToken: Swift.String?
    let limit: Swift.Int?
}

extension DescribeDataSourcesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eq = "EQ"
        case filterVariable = "FilterVariable"
        case ge = "GE"
        case gt = "GT"
        case le = "LE"
        case lt = "LT"
        case limit = "Limit"
        case ne = "NE"
        case nextToken = "NextToken"
        case `prefix` = "Prefix"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterVariableDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.DataSourceFilterVariable.self, forKey: .filterVariable)
        filterVariable = filterVariableDecoded
        let eqDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eq)
        eq = eqDecoded
        let gtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gt)
        gt = gtDecoded
        let ltDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lt)
        lt = ltDecoded
        let geDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ge)
        ge = geDecoded
        let leDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .le)
        le = leDecoded
        let neDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ne)
        ne = neDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeDataSourcesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeDataSourcesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeDataSourcesOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeDataSourcesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeDataSourcesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.results = output.results
        } else {
            self.nextToken = nil
            self.results = nil
        }
    }
}

/// Represents the query results from a [DescribeDataSources] operation. The content is essentially a list of DataSource.
public struct DescribeDataSourcesOutputResponse: Swift.Equatable {
    /// An ID of the next page in the paginated results that indicates at least one more page follows.
    public var nextToken: Swift.String?
    /// A list of DataSource that meet the search criteria.
    public var results: [MachineLearningClientTypes.DataSource]?

    public init (
        nextToken: Swift.String? = nil,
        results: [MachineLearningClientTypes.DataSource]? = nil
    )
    {
        self.nextToken = nextToken
        self.results = results
    }
}

struct DescribeDataSourcesOutputResponseBody: Swift.Equatable {
    let results: [MachineLearningClientTypes.DataSource]?
    let nextToken: Swift.String?
}

extension DescribeDataSourcesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case results = "Results"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultsContainer = try containerValues.decodeIfPresent([MachineLearningClientTypes.DataSource?].self, forKey: .results)
        var resultsDecoded0:[MachineLearningClientTypes.DataSource]? = nil
        if let resultsContainer = resultsContainer {
            resultsDecoded0 = [MachineLearningClientTypes.DataSource]()
            for structure0 in resultsContainer {
                if let structure0 = structure0 {
                    resultsDecoded0?.append(structure0)
                }
            }
        }
        results = resultsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeEvaluationsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eq = "EQ"
        case filterVariable = "FilterVariable"
        case ge = "GE"
        case gt = "GT"
        case le = "LE"
        case lt = "LT"
        case limit = "Limit"
        case ne = "NE"
        case nextToken = "NextToken"
        case `prefix` = "Prefix"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eq = self.eq {
            try encodeContainer.encode(eq, forKey: .eq)
        }
        if let filterVariable = self.filterVariable {
            try encodeContainer.encode(filterVariable.rawValue, forKey: .filterVariable)
        }
        if let ge = self.ge {
            try encodeContainer.encode(ge, forKey: .ge)
        }
        if let gt = self.gt {
            try encodeContainer.encode(gt, forKey: .gt)
        }
        if let le = self.le {
            try encodeContainer.encode(le, forKey: .le)
        }
        if let lt = self.lt {
            try encodeContainer.encode(lt, forKey: .lt)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let ne = self.ne {
            try encodeContainer.encode(ne, forKey: .ne)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
        if let sortOrder = self.sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension DescribeEvaluationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeEvaluationsInput: Swift.Equatable {
    /// The equal to operator. The Evaluation results will have FilterVariable values that exactly match the value specified with EQ.
    public var eq: Swift.String?
    /// Use one of the following variable to filter a list of Evaluation objects:
    ///
    /// * CreatedAt - Sets the search criteria to the Evaluation creation date.
    ///
    /// * Status - Sets the search criteria to the Evaluation status.
    ///
    /// * Name - Sets the search criteria to the contents of EvaluationName.
    ///
    /// * IAMUser - Sets the search criteria to the user account that invoked an Evaluation.
    ///
    /// * MLModelId - Sets the search criteria to the MLModel that was evaluated.
    ///
    /// * DataSourceId - Sets the search criteria to the DataSource used in Evaluation.
    ///
    /// * DataUri - Sets the search criteria to the data file(s) used in Evaluation. The URL can identify either a file or an Amazon Simple Storage Solution (Amazon S3) bucket or directory.
    public var filterVariable: MachineLearningClientTypes.EvaluationFilterVariable?
    /// The greater than or equal to operator. The Evaluation results will have FilterVariable values that are greater than or equal to the value specified with GE.
    public var ge: Swift.String?
    /// The greater than operator. The Evaluation results will have FilterVariable values that are greater than the value specified with GT.
    public var gt: Swift.String?
    /// The less than or equal to operator. The Evaluation results will have FilterVariable values that are less than or equal to the value specified with LE.
    public var le: Swift.String?
    /// The maximum number of Evaluation to include in the result.
    public var limit: Swift.Int?
    /// The less than operator. The Evaluation results will have FilterVariable values that are less than the value specified with LT.
    public var lt: Swift.String?
    /// The not equal to operator. The Evaluation results will have FilterVariable values not equal to the value specified with NE.
    public var ne: Swift.String?
    /// The ID of the page in the paginated results.
    public var nextToken: Swift.String?
    /// A string that is found at the beginning of a variable, such as Name or Id. For example, an Evaluation could have the Name2014-09-09-HolidayGiftMailer. To search for this Evaluation, select Name for the FilterVariable and any of the following strings for the Prefix:
    ///
    /// * 2014-09
    ///
    /// * 2014-09-09
    ///
    /// * 2014-09-09-Holiday
    public var `prefix`: Swift.String?
    /// A two-value parameter that determines the sequence of the resulting list of Evaluation.
    ///
    /// * asc - Arranges the list in ascending order (A-Z, 0-9).
    ///
    /// * dsc - Arranges the list in descending order (Z-A, 9-0).
    ///
    ///
    /// Results are sorted by FilterVariable.
    public var sortOrder: MachineLearningClientTypes.SortOrder?

    public init (
        eq: Swift.String? = nil,
        filterVariable: MachineLearningClientTypes.EvaluationFilterVariable? = nil,
        ge: Swift.String? = nil,
        gt: Swift.String? = nil,
        le: Swift.String? = nil,
        limit: Swift.Int? = nil,
        lt: Swift.String? = nil,
        ne: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        `prefix`: Swift.String? = nil,
        sortOrder: MachineLearningClientTypes.SortOrder? = nil
    )
    {
        self.eq = eq
        self.filterVariable = filterVariable
        self.ge = ge
        self.gt = gt
        self.le = le
        self.limit = limit
        self.lt = lt
        self.ne = ne
        self.nextToken = nextToken
        self.`prefix` = `prefix`
        self.sortOrder = sortOrder
    }
}

struct DescribeEvaluationsInputBody: Swift.Equatable {
    let filterVariable: MachineLearningClientTypes.EvaluationFilterVariable?
    let eq: Swift.String?
    let gt: Swift.String?
    let lt: Swift.String?
    let ge: Swift.String?
    let le: Swift.String?
    let ne: Swift.String?
    let `prefix`: Swift.String?
    let sortOrder: MachineLearningClientTypes.SortOrder?
    let nextToken: Swift.String?
    let limit: Swift.Int?
}

extension DescribeEvaluationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eq = "EQ"
        case filterVariable = "FilterVariable"
        case ge = "GE"
        case gt = "GT"
        case le = "LE"
        case lt = "LT"
        case limit = "Limit"
        case ne = "NE"
        case nextToken = "NextToken"
        case `prefix` = "Prefix"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterVariableDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EvaluationFilterVariable.self, forKey: .filterVariable)
        filterVariable = filterVariableDecoded
        let eqDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eq)
        eq = eqDecoded
        let gtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gt)
        gt = gtDecoded
        let ltDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lt)
        lt = ltDecoded
        let geDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ge)
        ge = geDecoded
        let leDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .le)
        le = leDecoded
        let neDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ne)
        ne = neDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeEvaluationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeEvaluationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeEvaluationsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeEvaluationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeEvaluationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.results = output.results
        } else {
            self.nextToken = nil
            self.results = nil
        }
    }
}

/// Represents the query results from a DescribeEvaluations operation. The content is essentially a list of Evaluation.
public struct DescribeEvaluationsOutputResponse: Swift.Equatable {
    /// The ID of the next page in the paginated results that indicates at least one more page follows.
    public var nextToken: Swift.String?
    /// A list of Evaluation that meet the search criteria.
    public var results: [MachineLearningClientTypes.Evaluation]?

    public init (
        nextToken: Swift.String? = nil,
        results: [MachineLearningClientTypes.Evaluation]? = nil
    )
    {
        self.nextToken = nextToken
        self.results = results
    }
}

struct DescribeEvaluationsOutputResponseBody: Swift.Equatable {
    let results: [MachineLearningClientTypes.Evaluation]?
    let nextToken: Swift.String?
}

extension DescribeEvaluationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case results = "Results"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultsContainer = try containerValues.decodeIfPresent([MachineLearningClientTypes.Evaluation?].self, forKey: .results)
        var resultsDecoded0:[MachineLearningClientTypes.Evaluation]? = nil
        if let resultsContainer = resultsContainer {
            resultsDecoded0 = [MachineLearningClientTypes.Evaluation]()
            for structure0 in resultsContainer {
                if let structure0 = structure0 {
                    resultsDecoded0?.append(structure0)
                }
            }
        }
        results = resultsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeMLModelsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eq = "EQ"
        case filterVariable = "FilterVariable"
        case ge = "GE"
        case gt = "GT"
        case le = "LE"
        case lt = "LT"
        case limit = "Limit"
        case ne = "NE"
        case nextToken = "NextToken"
        case `prefix` = "Prefix"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let eq = self.eq {
            try encodeContainer.encode(eq, forKey: .eq)
        }
        if let filterVariable = self.filterVariable {
            try encodeContainer.encode(filterVariable.rawValue, forKey: .filterVariable)
        }
        if let ge = self.ge {
            try encodeContainer.encode(ge, forKey: .ge)
        }
        if let gt = self.gt {
            try encodeContainer.encode(gt, forKey: .gt)
        }
        if let le = self.le {
            try encodeContainer.encode(le, forKey: .le)
        }
        if let lt = self.lt {
            try encodeContainer.encode(lt, forKey: .lt)
        }
        if let limit = self.limit {
            try encodeContainer.encode(limit, forKey: .limit)
        }
        if let ne = self.ne {
            try encodeContainer.encode(ne, forKey: .ne)
        }
        if let nextToken = self.nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let `prefix` = self.`prefix` {
            try encodeContainer.encode(`prefix`, forKey: .`prefix`)
        }
        if let sortOrder = self.sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }
}

extension DescribeMLModelsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeMLModelsInput: Swift.Equatable {
    /// The equal to operator. The MLModel results will have FilterVariable values that exactly match the value specified with EQ.
    public var eq: Swift.String?
    /// Use one of the following variables to filter a list of MLModel:
    ///
    /// * CreatedAt - Sets the search criteria to MLModel creation date.
    ///
    /// * Status - Sets the search criteria to MLModel status.
    ///
    /// * Name - Sets the search criteria to the contents of MLModelName.
    ///
    /// * IAMUser - Sets the search criteria to the user account that invoked the MLModel creation.
    ///
    /// * TrainingDataSourceId - Sets the search criteria to the DataSource used to train one or more MLModel.
    ///
    /// * RealtimeEndpointStatus - Sets the search criteria to the MLModel real-time endpoint status.
    ///
    /// * MLModelType - Sets the search criteria to MLModel type: binary, regression, or multi-class.
    ///
    /// * Algorithm - Sets the search criteria to the algorithm that the MLModel uses.
    ///
    /// * TrainingDataURI - Sets the search criteria to the data file(s) used in training a MLModel. The URL can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.
    public var filterVariable: MachineLearningClientTypes.MLModelFilterVariable?
    /// The greater than or equal to operator. The MLModel results will have FilterVariable values that are greater than or equal to the value specified with GE.
    public var ge: Swift.String?
    /// The greater than operator. The MLModel results will have FilterVariable values that are greater than the value specified with GT.
    public var gt: Swift.String?
    /// The less than or equal to operator. The MLModel results will have FilterVariable values that are less than or equal to the value specified with LE.
    public var le: Swift.String?
    /// The number of pages of information to include in the result. The range of acceptable values is 1 through 100. The default value is 100.
    public var limit: Swift.Int?
    /// The less than operator. The MLModel results will have FilterVariable values that are less than the value specified with LT.
    public var lt: Swift.String?
    /// The not equal to operator. The MLModel results will have FilterVariable values not equal to the value specified with NE.
    public var ne: Swift.String?
    /// The ID of the page in the paginated results.
    public var nextToken: Swift.String?
    /// A string that is found at the beginning of a variable, such as Name or Id. For example, an MLModel could have the Name2014-09-09-HolidayGiftMailer. To search for this MLModel, select Name for the FilterVariable and any of the following strings for the Prefix:
    ///
    /// * 2014-09
    ///
    /// * 2014-09-09
    ///
    /// * 2014-09-09-Holiday
    public var `prefix`: Swift.String?
    /// A two-value parameter that determines the sequence of the resulting list of MLModel.
    ///
    /// * asc - Arranges the list in ascending order (A-Z, 0-9).
    ///
    /// * dsc - Arranges the list in descending order (Z-A, 9-0).
    ///
    ///
    /// Results are sorted by FilterVariable.
    public var sortOrder: MachineLearningClientTypes.SortOrder?

    public init (
        eq: Swift.String? = nil,
        filterVariable: MachineLearningClientTypes.MLModelFilterVariable? = nil,
        ge: Swift.String? = nil,
        gt: Swift.String? = nil,
        le: Swift.String? = nil,
        limit: Swift.Int? = nil,
        lt: Swift.String? = nil,
        ne: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        `prefix`: Swift.String? = nil,
        sortOrder: MachineLearningClientTypes.SortOrder? = nil
    )
    {
        self.eq = eq
        self.filterVariable = filterVariable
        self.ge = ge
        self.gt = gt
        self.le = le
        self.limit = limit
        self.lt = lt
        self.ne = ne
        self.nextToken = nextToken
        self.`prefix` = `prefix`
        self.sortOrder = sortOrder
    }
}

struct DescribeMLModelsInputBody: Swift.Equatable {
    let filterVariable: MachineLearningClientTypes.MLModelFilterVariable?
    let eq: Swift.String?
    let gt: Swift.String?
    let lt: Swift.String?
    let ge: Swift.String?
    let le: Swift.String?
    let ne: Swift.String?
    let `prefix`: Swift.String?
    let sortOrder: MachineLearningClientTypes.SortOrder?
    let nextToken: Swift.String?
    let limit: Swift.Int?
}

extension DescribeMLModelsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eq = "EQ"
        case filterVariable = "FilterVariable"
        case ge = "GE"
        case gt = "GT"
        case le = "LE"
        case lt = "LT"
        case limit = "Limit"
        case ne = "NE"
        case nextToken = "NextToken"
        case `prefix` = "Prefix"
        case sortOrder = "SortOrder"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filterVariableDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.MLModelFilterVariable.self, forKey: .filterVariable)
        filterVariable = filterVariableDecoded
        let eqDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eq)
        eq = eqDecoded
        let gtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .gt)
        gt = gtDecoded
        let ltDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lt)
        lt = ltDecoded
        let geDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ge)
        ge = geDecoded
        let leDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .le)
        le = leDecoded
        let neDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ne)
        ne = neDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        `prefix` = prefixDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let limitDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .limit)
        limit = limitDecoded
    }
}

extension DescribeMLModelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeMLModelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeMLModelsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeMLModelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeMLModelsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.results = output.results
        } else {
            self.nextToken = nil
            self.results = nil
        }
    }
}

/// Represents the output of a DescribeMLModels operation. The content is essentially a list of MLModel.
public struct DescribeMLModelsOutputResponse: Swift.Equatable {
    /// The ID of the next page in the paginated results that indicates at least one more page follows.
    public var nextToken: Swift.String?
    /// A list of MLModel that meet the search criteria.
    public var results: [MachineLearningClientTypes.MLModel]?

    public init (
        nextToken: Swift.String? = nil,
        results: [MachineLearningClientTypes.MLModel]? = nil
    )
    {
        self.nextToken = nextToken
        self.results = results
    }
}

struct DescribeMLModelsOutputResponseBody: Swift.Equatable {
    let results: [MachineLearningClientTypes.MLModel]?
    let nextToken: Swift.String?
}

extension DescribeMLModelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case results = "Results"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resultsContainer = try containerValues.decodeIfPresent([MachineLearningClientTypes.MLModel?].self, forKey: .results)
        var resultsDecoded0:[MachineLearningClientTypes.MLModel]? = nil
        if let resultsContainer = resultsContainer {
            resultsDecoded0 = [MachineLearningClientTypes.MLModel]()
            for structure0 in resultsContainer {
                if let structure0 = structure0 {
                    resultsDecoded0?.append(structure0)
                }
            }
        }
        results = resultsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeTagsInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let resourceId = self.resourceId {
            try encodeContainer.encode(resourceId, forKey: .resourceId)
        }
        if let resourceType = self.resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
    }
}

extension DescribeTagsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct DescribeTagsInput: Swift.Equatable {
    /// The ID of the ML object. For example, exampleModelId.
    /// This member is required.
    public var resourceId: Swift.String?
    /// The type of the ML object.
    /// This member is required.
    public var resourceType: MachineLearningClientTypes.TaggableResourceType?

    public init (
        resourceId: Swift.String? = nil,
        resourceType: MachineLearningClientTypes.TaggableResourceType? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
    }
}

struct DescribeTagsInputBody: Swift.Equatable {
    let resourceId: Swift.String?
    let resourceType: MachineLearningClientTypes.TaggableResourceType?
}

extension DescribeTagsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.TaggableResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension DescribeTagsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeTagsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum DescribeTagsOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeTagsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: DescribeTagsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceId = output.resourceId
            self.resourceType = output.resourceType
            self.tags = output.tags
        } else {
            self.resourceId = nil
            self.resourceType = nil
            self.tags = nil
        }
    }
}

/// Amazon ML returns the following elements.
public struct DescribeTagsOutputResponse: Swift.Equatable {
    /// The ID of the tagged ML object.
    public var resourceId: Swift.String?
    /// The type of the tagged ML object.
    public var resourceType: MachineLearningClientTypes.TaggableResourceType?
    /// A list of tags associated with the ML object.
    public var tags: [MachineLearningClientTypes.Tag]?

    public init (
        resourceId: Swift.String? = nil,
        resourceType: MachineLearningClientTypes.TaggableResourceType? = nil,
        tags: [MachineLearningClientTypes.Tag]? = nil
    )
    {
        self.resourceId = resourceId
        self.resourceType = resourceType
        self.tags = tags
    }
}

struct DescribeTagsOutputResponseBody: Swift.Equatable {
    let resourceId: Swift.String?
    let resourceType: MachineLearningClientTypes.TaggableResourceType?
    let tags: [MachineLearningClientTypes.Tag]?
}

extension DescribeTagsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.TaggableResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([MachineLearningClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[MachineLearningClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [MachineLearningClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension MachineLearningClientTypes {
    /// Contains the key values of DetailsMap:
    ///
    /// * PredictiveModelType - Indicates the type of the MLModel.
    ///
    /// * Algorithm - Indicates the algorithm that was used for the MLModel.
    public enum DetailsAttributes: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case algorithm
        case predictiveModelType
        case sdkUnknown(Swift.String)

        public static var allCases: [DetailsAttributes] {
            return [
                .algorithm,
                .predictiveModelType,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .algorithm: return "Algorithm"
            case .predictiveModelType: return "PredictiveModelType"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DetailsAttributes(rawValue: rawValue) ?? DetailsAttributes.sdkUnknown(rawValue)
        }
    }
}

extension MachineLearningClientTypes {
    /// Object status with the following possible values:
    ///
    /// * PENDING
    ///
    /// * INPROGRESS
    ///
    /// * FAILED
    ///
    /// * COMPLETED
    ///
    /// * DELETED
    public enum EntityStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case deleted
        case failed
        case inprogress
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [EntityStatus] {
            return [
                .completed,
                .deleted,
                .failed,
                .inprogress,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .deleted: return "DELETED"
            case .failed: return "FAILED"
            case .inprogress: return "INPROGRESS"
            case .pending: return "PENDING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EntityStatus(rawValue: rawValue) ?? EntityStatus.sdkUnknown(rawValue)
        }
    }
}

extension MachineLearningClientTypes.Evaluation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case evaluationDataSourceId = "EvaluationDataSourceId"
        case evaluationId = "EvaluationId"
        case finishedAt = "FinishedAt"
        case inputDataLocationS3 = "InputDataLocationS3"
        case lastUpdatedAt = "LastUpdatedAt"
        case mlModelId = "MLModelId"
        case message = "Message"
        case name = "Name"
        case performanceMetrics = "PerformanceMetrics"
        case startedAt = "StartedAt"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let computeTime = self.computeTime {
            try encodeContainer.encode(computeTime, forKey: .computeTime)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let createdByIamUser = self.createdByIamUser {
            try encodeContainer.encode(createdByIamUser, forKey: .createdByIamUser)
        }
        if let evaluationDataSourceId = self.evaluationDataSourceId {
            try encodeContainer.encode(evaluationDataSourceId, forKey: .evaluationDataSourceId)
        }
        if let evaluationId = self.evaluationId {
            try encodeContainer.encode(evaluationId, forKey: .evaluationId)
        }
        if let finishedAt = self.finishedAt {
            try encodeContainer.encodeTimestamp(finishedAt, format: .epochSeconds, forKey: .finishedAt)
        }
        if let inputDataLocationS3 = self.inputDataLocationS3 {
            try encodeContainer.encode(inputDataLocationS3, forKey: .inputDataLocationS3)
        }
        if let lastUpdatedAt = self.lastUpdatedAt {
            try encodeContainer.encodeTimestamp(lastUpdatedAt, format: .epochSeconds, forKey: .lastUpdatedAt)
        }
        if let mlModelId = self.mlModelId {
            try encodeContainer.encode(mlModelId, forKey: .mlModelId)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let performanceMetrics = self.performanceMetrics {
            try encodeContainer.encode(performanceMetrics, forKey: .performanceMetrics)
        }
        if let startedAt = self.startedAt {
            try encodeContainer.encodeTimestamp(startedAt, format: .epochSeconds, forKey: .startedAt)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationId)
        evaluationId = evaluationIdDecoded
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
        let evaluationDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationDataSourceId)
        evaluationDataSourceId = evaluationDataSourceIdDecoded
        let inputDataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputDataLocationS3)
        inputDataLocationS3 = inputDataLocationS3Decoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let performanceMetricsDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.PerformanceMetrics.self, forKey: .performanceMetrics)
        performanceMetrics = performanceMetricsDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startedAt)
        startedAt = startedAtDecoded
    }
}

extension MachineLearningClientTypes {
    /// Represents the output of GetEvaluation operation. The content consists of the detailed metadata and data file information and the current status of the Evaluation.
    public struct Evaluation: Swift.Equatable {
        /// Long integer type that is a 64-bit signed number.
        public var computeTime: Swift.Int?
        /// The time that the Evaluation was created. The time is expressed in epoch time.
        public var createdAt: ClientRuntime.Date?
        /// The AWS user account that invoked the evaluation. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
        public var createdByIamUser: Swift.String?
        /// The ID of the DataSource that is used to evaluate the MLModel.
        public var evaluationDataSourceId: Swift.String?
        /// The ID that is assigned to the Evaluation at creation.
        public var evaluationId: Swift.String?
        /// A timestamp represented in epoch time.
        public var finishedAt: ClientRuntime.Date?
        /// The location and name of the data in Amazon Simple Storage Server (Amazon S3) that is used in the evaluation.
        public var inputDataLocationS3: Swift.String?
        /// The time of the most recent edit to the Evaluation. The time is expressed in epoch time.
        public var lastUpdatedAt: ClientRuntime.Date?
        /// A description of the most recent details about evaluating the MLModel.
        public var message: Swift.String?
        /// The ID of the MLModel that is the focus of the evaluation.
        public var mlModelId: Swift.String?
        /// A user-supplied name or description of the Evaluation.
        public var name: Swift.String?
        /// Measurements of how well the MLModel performed, using observations referenced by the DataSource. One of the following metrics is returned, based on the type of the MLModel:
        ///
        /// * BinaryAUC: A binary MLModel uses the Area Under the Curve (AUC) technique to measure performance.
        ///
        /// * RegressionRMSE: A regression MLModel uses the Root Mean Square Error (RMSE) technique to measure performance. RMSE measures the difference between predicted and actual values for a single variable.
        ///
        /// * MulticlassAvgFScore: A multiclass MLModel uses the F1 score technique to measure performance.
        ///
        ///
        /// For more information about performance metrics, please see the [Amazon Machine Learning Developer Guide](https://docs.aws.amazon.com/machine-learning/latest/dg).
        public var performanceMetrics: MachineLearningClientTypes.PerformanceMetrics?
        /// A timestamp represented in epoch time.
        public var startedAt: ClientRuntime.Date?
        /// The status of the evaluation. This element can have one of the following values:
        ///
        /// * PENDING - Amazon Machine Learning (Amazon ML) submitted a request to evaluate an MLModel.
        ///
        /// * INPROGRESS - The evaluation is underway.
        ///
        /// * FAILED - The request to evaluate an MLModel did not run to completion. It is not usable.
        ///
        /// * COMPLETED - The evaluation process completed successfully.
        ///
        /// * DELETED - The Evaluation is marked as deleted. It is not usable.
        public var status: MachineLearningClientTypes.EntityStatus?

        public init (
            computeTime: Swift.Int? = nil,
            createdAt: ClientRuntime.Date? = nil,
            createdByIamUser: Swift.String? = nil,
            evaluationDataSourceId: Swift.String? = nil,
            evaluationId: Swift.String? = nil,
            finishedAt: ClientRuntime.Date? = nil,
            inputDataLocationS3: Swift.String? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            message: Swift.String? = nil,
            mlModelId: Swift.String? = nil,
            name: Swift.String? = nil,
            performanceMetrics: MachineLearningClientTypes.PerformanceMetrics? = nil,
            startedAt: ClientRuntime.Date? = nil,
            status: MachineLearningClientTypes.EntityStatus? = nil
        )
        {
            self.computeTime = computeTime
            self.createdAt = createdAt
            self.createdByIamUser = createdByIamUser
            self.evaluationDataSourceId = evaluationDataSourceId
            self.evaluationId = evaluationId
            self.finishedAt = finishedAt
            self.inputDataLocationS3 = inputDataLocationS3
            self.lastUpdatedAt = lastUpdatedAt
            self.message = message
            self.mlModelId = mlModelId
            self.name = name
            self.performanceMetrics = performanceMetrics
            self.startedAt = startedAt
            self.status = status
        }
    }

}

extension MachineLearningClientTypes {
    /// A list of the variables to use in searching or filtering Evaluation.
    ///
    /// * CreatedAt - Sets the search criteria to Evaluation creation date.
    ///
    /// * Status - Sets the search criteria to Evaluation status.
    ///
    /// * Name - Sets the search criteria to the contents of EvaluationName.
    ///
    /// * IAMUser - Sets the search criteria to the user account that invoked an evaluation.
    ///
    /// * MLModelId - Sets the search criteria to the Predictor that was evaluated.
    ///
    /// * DataSourceId - Sets the search criteria to the DataSource used in evaluation.
    ///
    /// * DataUri - Sets the search criteria to the data file(s) used in evaluation. The URL can identify either a file or an Amazon Simple Storage Service (Amazon S3) bucket or directory.
    public enum EvaluationFilterVariable: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case createdAt
        case datasourceId
        case dataUri
        case iamUser
        case lastUpdatedAt
        case mlModelId
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [EvaluationFilterVariable] {
            return [
                .createdAt,
                .datasourceId,
                .dataUri,
                .iamUser,
                .lastUpdatedAt,
                .mlModelId,
                .name,
                .status,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .createdAt: return "CreatedAt"
            case .datasourceId: return "DataSourceId"
            case .dataUri: return "DataURI"
            case .iamUser: return "IAMUser"
            case .lastUpdatedAt: return "LastUpdatedAt"
            case .mlModelId: return "MLModelId"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EvaluationFilterVariable(rawValue: rawValue) ?? EvaluationFilterVariable.sdkUnknown(rawValue)
        }
    }
}

extension GetBatchPredictionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionId = "BatchPredictionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchPredictionId = self.batchPredictionId {
            try encodeContainer.encode(batchPredictionId, forKey: .batchPredictionId)
        }
    }
}

extension GetBatchPredictionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetBatchPredictionInput: Swift.Equatable {
    /// An ID assigned to the BatchPrediction at creation.
    /// This member is required.
    public var batchPredictionId: Swift.String?

    public init (
        batchPredictionId: Swift.String? = nil
    )
    {
        self.batchPredictionId = batchPredictionId
    }
}

struct GetBatchPredictionInputBody: Swift.Equatable {
    let batchPredictionId: Swift.String?
}

extension GetBatchPredictionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionId = "BatchPredictionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPredictionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionId)
        batchPredictionId = batchPredictionIdDecoded
    }
}

extension GetBatchPredictionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetBatchPredictionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetBatchPredictionOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetBatchPredictionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetBatchPredictionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.batchPredictionDataSourceId = output.batchPredictionDataSourceId
            self.batchPredictionId = output.batchPredictionId
            self.computeTime = output.computeTime
            self.createdAt = output.createdAt
            self.createdByIamUser = output.createdByIamUser
            self.finishedAt = output.finishedAt
            self.inputDataLocationS3 = output.inputDataLocationS3
            self.invalidRecordCount = output.invalidRecordCount
            self.lastUpdatedAt = output.lastUpdatedAt
            self.logUri = output.logUri
            self.message = output.message
            self.mlModelId = output.mlModelId
            self.name = output.name
            self.outputUri = output.outputUri
            self.startedAt = output.startedAt
            self.status = output.status
            self.totalRecordCount = output.totalRecordCount
        } else {
            self.batchPredictionDataSourceId = nil
            self.batchPredictionId = nil
            self.computeTime = nil
            self.createdAt = nil
            self.createdByIamUser = nil
            self.finishedAt = nil
            self.inputDataLocationS3 = nil
            self.invalidRecordCount = nil
            self.lastUpdatedAt = nil
            self.logUri = nil
            self.mlModelId = nil
            self.message = nil
            self.name = nil
            self.outputUri = nil
            self.startedAt = nil
            self.status = nil
            self.totalRecordCount = nil
        }
    }
}

/// Represents the output of a GetBatchPrediction operation and describes a BatchPrediction.
public struct GetBatchPredictionOutputResponse: Swift.Equatable {
    /// The ID of the DataSource that was used to create the BatchPrediction.
    public var batchPredictionDataSourceId: Swift.String?
    /// An ID assigned to the BatchPrediction at creation. This value should be identical to the value of the BatchPredictionID in the request.
    public var batchPredictionId: Swift.String?
    /// The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the BatchPrediction, normalized and scaled on computation resources. ComputeTime is only available if the BatchPrediction is in the COMPLETED state.
    public var computeTime: Swift.Int?
    /// The time when the BatchPrediction was created. The time is expressed in epoch time.
    public var createdAt: ClientRuntime.Date?
    /// The AWS user account that invoked the BatchPrediction. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
    public var createdByIamUser: Swift.String?
    /// The epoch time when Amazon Machine Learning marked the BatchPrediction as COMPLETED or FAILED. FinishedAt is only available when the BatchPrediction is in the COMPLETED or FAILED state.
    public var finishedAt: ClientRuntime.Date?
    /// The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
    public var inputDataLocationS3: Swift.String?
    /// The number of invalid records that Amazon Machine Learning saw while processing the BatchPrediction.
    public var invalidRecordCount: Swift.Int?
    /// The time of the most recent edit to BatchPrediction. The time is expressed in epoch time.
    public var lastUpdatedAt: ClientRuntime.Date?
    /// A link to the file that contains logs of the CreateBatchPrediction operation.
    public var logUri: Swift.String?
    /// A description of the most recent details about processing the batch prediction request.
    public var message: Swift.String?
    /// The ID of the MLModel that generated predictions for the BatchPrediction request.
    public var mlModelId: Swift.String?
    /// A user-supplied name or description of the BatchPrediction.
    public var name: Swift.String?
    /// The location of an Amazon S3 bucket or directory to receive the operation results.
    public var outputUri: Swift.String?
    /// The epoch time when Amazon Machine Learning marked the BatchPrediction as INPROGRESS. StartedAt isn't available if the BatchPrediction is in the PENDING state.
    public var startedAt: ClientRuntime.Date?
    /// The status of the BatchPrediction, which can be one of the following values:
    ///
    /// * PENDING - Amazon Machine Learning (Amazon ML) submitted a request to generate batch predictions.
    ///
    /// * INPROGRESS - The batch predictions are in progress.
    ///
    /// * FAILED - The request to perform a batch prediction did not run to completion. It is not usable.
    ///
    /// * COMPLETED - The batch prediction process completed successfully.
    ///
    /// * DELETED - The BatchPrediction is marked as deleted. It is not usable.
    public var status: MachineLearningClientTypes.EntityStatus?
    /// The number of total records that Amazon Machine Learning saw while processing the BatchPrediction.
    public var totalRecordCount: Swift.Int?

    public init (
        batchPredictionDataSourceId: Swift.String? = nil,
        batchPredictionId: Swift.String? = nil,
        computeTime: Swift.Int? = nil,
        createdAt: ClientRuntime.Date? = nil,
        createdByIamUser: Swift.String? = nil,
        finishedAt: ClientRuntime.Date? = nil,
        inputDataLocationS3: Swift.String? = nil,
        invalidRecordCount: Swift.Int? = nil,
        lastUpdatedAt: ClientRuntime.Date? = nil,
        logUri: Swift.String? = nil,
        message: Swift.String? = nil,
        mlModelId: Swift.String? = nil,
        name: Swift.String? = nil,
        outputUri: Swift.String? = nil,
        startedAt: ClientRuntime.Date? = nil,
        status: MachineLearningClientTypes.EntityStatus? = nil,
        totalRecordCount: Swift.Int? = nil
    )
    {
        self.batchPredictionDataSourceId = batchPredictionDataSourceId
        self.batchPredictionId = batchPredictionId
        self.computeTime = computeTime
        self.createdAt = createdAt
        self.createdByIamUser = createdByIamUser
        self.finishedAt = finishedAt
        self.inputDataLocationS3 = inputDataLocationS3
        self.invalidRecordCount = invalidRecordCount
        self.lastUpdatedAt = lastUpdatedAt
        self.logUri = logUri
        self.message = message
        self.mlModelId = mlModelId
        self.name = name
        self.outputUri = outputUri
        self.startedAt = startedAt
        self.status = status
        self.totalRecordCount = totalRecordCount
    }
}

struct GetBatchPredictionOutputResponseBody: Swift.Equatable {
    let batchPredictionId: Swift.String?
    let mlModelId: Swift.String?
    let batchPredictionDataSourceId: Swift.String?
    let inputDataLocationS3: Swift.String?
    let createdByIamUser: Swift.String?
    let createdAt: ClientRuntime.Date?
    let lastUpdatedAt: ClientRuntime.Date?
    let name: Swift.String?
    let status: MachineLearningClientTypes.EntityStatus?
    let outputUri: Swift.String?
    let logUri: Swift.String?
    let message: Swift.String?
    let computeTime: Swift.Int?
    let finishedAt: ClientRuntime.Date?
    let startedAt: ClientRuntime.Date?
    let totalRecordCount: Swift.Int?
    let invalidRecordCount: Swift.Int?
}

extension GetBatchPredictionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionDataSourceId = "BatchPredictionDataSourceId"
        case batchPredictionId = "BatchPredictionId"
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case finishedAt = "FinishedAt"
        case inputDataLocationS3 = "InputDataLocationS3"
        case invalidRecordCount = "InvalidRecordCount"
        case lastUpdatedAt = "LastUpdatedAt"
        case logUri = "LogUri"
        case mlModelId = "MLModelId"
        case message = "Message"
        case name = "Name"
        case outputUri = "OutputUri"
        case startedAt = "StartedAt"
        case status = "Status"
        case totalRecordCount = "TotalRecordCount"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPredictionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionId)
        batchPredictionId = batchPredictionIdDecoded
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
        let batchPredictionDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionDataSourceId)
        batchPredictionDataSourceId = batchPredictionDataSourceIdDecoded
        let inputDataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputDataLocationS3)
        inputDataLocationS3 = inputDataLocationS3Decoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let outputUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputUri)
        outputUri = outputUriDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startedAt)
        startedAt = startedAtDecoded
        let totalRecordCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .totalRecordCount)
        totalRecordCount = totalRecordCountDecoded
        let invalidRecordCountDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .invalidRecordCount)
        invalidRecordCount = invalidRecordCountDecoded
    }
}

extension GetDataSourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case verbose = "Verbose"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceId = self.dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if verbose != false {
            try encodeContainer.encode(verbose, forKey: .verbose)
        }
    }
}

extension GetDataSourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetDataSourceInput: Swift.Equatable {
    /// The ID assigned to the DataSource at creation.
    /// This member is required.
    public var dataSourceId: Swift.String?
    /// Specifies whether the GetDataSource operation should return DataSourceSchema. If true, DataSourceSchema is returned. If false, DataSourceSchema is not returned.
    public var verbose: Swift.Bool

    public init (
        dataSourceId: Swift.String? = nil,
        verbose: Swift.Bool = false
    )
    {
        self.dataSourceId = dataSourceId
        self.verbose = verbose
    }
}

struct GetDataSourceInputBody: Swift.Equatable {
    let dataSourceId: Swift.String?
    let verbose: Swift.Bool
}

extension GetDataSourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case verbose = "Verbose"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let verboseDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .verbose) ?? false
        verbose = verboseDecoded
    }
}

extension GetDataSourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetDataSourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetDataSourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetDataSourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetDataSourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.computeStatistics = output.computeStatistics
            self.computeTime = output.computeTime
            self.createdAt = output.createdAt
            self.createdByIamUser = output.createdByIamUser
            self.dataLocationS3 = output.dataLocationS3
            self.dataRearrangement = output.dataRearrangement
            self.dataSizeInBytes = output.dataSizeInBytes
            self.dataSourceId = output.dataSourceId
            self.dataSourceSchema = output.dataSourceSchema
            self.finishedAt = output.finishedAt
            self.lastUpdatedAt = output.lastUpdatedAt
            self.logUri = output.logUri
            self.message = output.message
            self.name = output.name
            self.numberOfFiles = output.numberOfFiles
            self.rdsMetadata = output.rdsMetadata
            self.redshiftMetadata = output.redshiftMetadata
            self.roleARN = output.roleARN
            self.startedAt = output.startedAt
            self.status = output.status
        } else {
            self.computeStatistics = false
            self.computeTime = nil
            self.createdAt = nil
            self.createdByIamUser = nil
            self.dataLocationS3 = nil
            self.dataRearrangement = nil
            self.dataSizeInBytes = nil
            self.dataSourceId = nil
            self.dataSourceSchema = nil
            self.finishedAt = nil
            self.lastUpdatedAt = nil
            self.logUri = nil
            self.message = nil
            self.name = nil
            self.numberOfFiles = nil
            self.rdsMetadata = nil
            self.redshiftMetadata = nil
            self.roleARN = nil
            self.startedAt = nil
            self.status = nil
        }
    }
}

/// Represents the output of a GetDataSource operation and describes a DataSource.
public struct GetDataSourceOutputResponse: Swift.Equatable {
    /// The parameter is true if statistics need to be generated from the observation data.
    public var computeStatistics: Swift.Bool
    /// The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the DataSource, normalized and scaled on computation resources. ComputeTime is only available if the DataSource is in the COMPLETED state and the ComputeStatistics is set to true.
    public var computeTime: Swift.Int?
    /// The time that the DataSource was created. The time is expressed in epoch time.
    public var createdAt: ClientRuntime.Date?
    /// The AWS user account from which the DataSource was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
    public var createdByIamUser: Swift.String?
    /// The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
    public var dataLocationS3: Swift.String?
    /// A JSON string that represents the splitting and rearrangement requirement used when this DataSource was created.
    public var dataRearrangement: Swift.String?
    /// The total size of observations in the data files.
    public var dataSizeInBytes: Swift.Int?
    /// The ID assigned to the DataSource at creation. This value should be identical to the value of the DataSourceId in the request.
    public var dataSourceId: Swift.String?
    /// The schema used by all of the data files of this DataSource. Note: This parameter is provided as part of the verbose format.
    public var dataSourceSchema: Swift.String?
    /// The epoch time when Amazon Machine Learning marked the DataSource as COMPLETED or FAILED. FinishedAt is only available when the DataSource is in the COMPLETED or FAILED state.
    public var finishedAt: ClientRuntime.Date?
    /// The time of the most recent edit to the DataSource. The time is expressed in epoch time.
    public var lastUpdatedAt: ClientRuntime.Date?
    /// A link to the file containing logs of CreateDataSourceFrom* operations.
    public var logUri: Swift.String?
    /// The user-supplied description of the most recent details about creating the DataSource.
    public var message: Swift.String?
    /// A user-supplied name or description of the DataSource.
    public var name: Swift.String?
    /// The number of data files referenced by the DataSource.
    public var numberOfFiles: Swift.Int?
    /// The datasource details that are specific to Amazon RDS.
    public var rdsMetadata: MachineLearningClientTypes.RDSMetadata?
    /// Describes the DataSource details specific to Amazon Redshift.
    public var redshiftMetadata: MachineLearningClientTypes.RedshiftMetadata?
    /// The Amazon Resource Name (ARN) of an [AWS IAM Role](https://docs.aws.amazon.com/IAM/latest/UserGuide/roles-toplevel.html#roles-about-termsandconcepts), such as the following: arn:aws:iam::account:role/rolename.
    public var roleARN: Swift.String?
    /// The epoch time when Amazon Machine Learning marked the DataSource as INPROGRESS. StartedAt isn't available if the DataSource is in the PENDING state.
    public var startedAt: ClientRuntime.Date?
    /// The current status of the DataSource. This element can have one of the following values:
    ///
    /// * PENDING - Amazon ML submitted a request to create a DataSource.
    ///
    /// * INPROGRESS - The creation process is underway.
    ///
    /// * FAILED - The request to create a DataSource did not run to completion. It is not usable.
    ///
    /// * COMPLETED - The creation process completed successfully.
    ///
    /// * DELETED - The DataSource is marked as deleted. It is not usable.
    public var status: MachineLearningClientTypes.EntityStatus?

    public init (
        computeStatistics: Swift.Bool = false,
        computeTime: Swift.Int? = nil,
        createdAt: ClientRuntime.Date? = nil,
        createdByIamUser: Swift.String? = nil,
        dataLocationS3: Swift.String? = nil,
        dataRearrangement: Swift.String? = nil,
        dataSizeInBytes: Swift.Int? = nil,
        dataSourceId: Swift.String? = nil,
        dataSourceSchema: Swift.String? = nil,
        finishedAt: ClientRuntime.Date? = nil,
        lastUpdatedAt: ClientRuntime.Date? = nil,
        logUri: Swift.String? = nil,
        message: Swift.String? = nil,
        name: Swift.String? = nil,
        numberOfFiles: Swift.Int? = nil,
        rdsMetadata: MachineLearningClientTypes.RDSMetadata? = nil,
        redshiftMetadata: MachineLearningClientTypes.RedshiftMetadata? = nil,
        roleARN: Swift.String? = nil,
        startedAt: ClientRuntime.Date? = nil,
        status: MachineLearningClientTypes.EntityStatus? = nil
    )
    {
        self.computeStatistics = computeStatistics
        self.computeTime = computeTime
        self.createdAt = createdAt
        self.createdByIamUser = createdByIamUser
        self.dataLocationS3 = dataLocationS3
        self.dataRearrangement = dataRearrangement
        self.dataSizeInBytes = dataSizeInBytes
        self.dataSourceId = dataSourceId
        self.dataSourceSchema = dataSourceSchema
        self.finishedAt = finishedAt
        self.lastUpdatedAt = lastUpdatedAt
        self.logUri = logUri
        self.message = message
        self.name = name
        self.numberOfFiles = numberOfFiles
        self.rdsMetadata = rdsMetadata
        self.redshiftMetadata = redshiftMetadata
        self.roleARN = roleARN
        self.startedAt = startedAt
        self.status = status
    }
}

struct GetDataSourceOutputResponseBody: Swift.Equatable {
    let dataSourceId: Swift.String?
    let dataLocationS3: Swift.String?
    let dataRearrangement: Swift.String?
    let createdByIamUser: Swift.String?
    let createdAt: ClientRuntime.Date?
    let lastUpdatedAt: ClientRuntime.Date?
    let dataSizeInBytes: Swift.Int?
    let numberOfFiles: Swift.Int?
    let name: Swift.String?
    let status: MachineLearningClientTypes.EntityStatus?
    let logUri: Swift.String?
    let message: Swift.String?
    let redshiftMetadata: MachineLearningClientTypes.RedshiftMetadata?
    let rdsMetadata: MachineLearningClientTypes.RDSMetadata?
    let roleARN: Swift.String?
    let computeStatistics: Swift.Bool
    let computeTime: Swift.Int?
    let finishedAt: ClientRuntime.Date?
    let startedAt: ClientRuntime.Date?
    let dataSourceSchema: Swift.String?
}

extension GetDataSourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeStatistics = "ComputeStatistics"
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case dataLocationS3 = "DataLocationS3"
        case dataRearrangement = "DataRearrangement"
        case dataSizeInBytes = "DataSizeInBytes"
        case dataSourceId = "DataSourceId"
        case dataSourceSchema = "DataSourceSchema"
        case finishedAt = "FinishedAt"
        case lastUpdatedAt = "LastUpdatedAt"
        case logUri = "LogUri"
        case message = "Message"
        case name = "Name"
        case numberOfFiles = "NumberOfFiles"
        case rdsMetadata = "RDSMetadata"
        case redshiftMetadata = "RedshiftMetadata"
        case roleARN = "RoleARN"
        case startedAt = "StartedAt"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let dataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataLocationS3)
        dataLocationS3 = dataLocationS3Decoded
        let dataRearrangementDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataRearrangement)
        dataRearrangement = dataRearrangementDecoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let dataSizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .dataSizeInBytes)
        dataSizeInBytes = dataSizeInBytesDecoded
        let numberOfFilesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .numberOfFiles)
        numberOfFiles = numberOfFilesDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let redshiftMetadataDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RedshiftMetadata.self, forKey: .redshiftMetadata)
        redshiftMetadata = redshiftMetadataDecoded
        let rdsMetadataDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RDSMetadata.self, forKey: .rdsMetadata)
        rdsMetadata = rdsMetadataDecoded
        let roleARNDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleARN)
        roleARN = roleARNDecoded
        let computeStatisticsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .computeStatistics) ?? false
        computeStatistics = computeStatisticsDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startedAt)
        startedAt = startedAtDecoded
        let dataSourceSchemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceSchema)
        dataSourceSchema = dataSourceSchemaDecoded
    }
}

extension GetEvaluationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationId = "EvaluationId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let evaluationId = self.evaluationId {
            try encodeContainer.encode(evaluationId, forKey: .evaluationId)
        }
    }
}

extension GetEvaluationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetEvaluationInput: Swift.Equatable {
    /// The ID of the Evaluation to retrieve. The evaluation of each MLModel is recorded and cataloged. The ID provides the means to access the information.
    /// This member is required.
    public var evaluationId: Swift.String?

    public init (
        evaluationId: Swift.String? = nil
    )
    {
        self.evaluationId = evaluationId
    }
}

struct GetEvaluationInputBody: Swift.Equatable {
    let evaluationId: Swift.String?
}

extension GetEvaluationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationId = "EvaluationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationId)
        evaluationId = evaluationIdDecoded
    }
}

extension GetEvaluationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEvaluationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetEvaluationOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEvaluationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetEvaluationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.computeTime = output.computeTime
            self.createdAt = output.createdAt
            self.createdByIamUser = output.createdByIamUser
            self.evaluationDataSourceId = output.evaluationDataSourceId
            self.evaluationId = output.evaluationId
            self.finishedAt = output.finishedAt
            self.inputDataLocationS3 = output.inputDataLocationS3
            self.lastUpdatedAt = output.lastUpdatedAt
            self.logUri = output.logUri
            self.message = output.message
            self.mlModelId = output.mlModelId
            self.name = output.name
            self.performanceMetrics = output.performanceMetrics
            self.startedAt = output.startedAt
            self.status = output.status
        } else {
            self.computeTime = nil
            self.createdAt = nil
            self.createdByIamUser = nil
            self.evaluationDataSourceId = nil
            self.evaluationId = nil
            self.finishedAt = nil
            self.inputDataLocationS3 = nil
            self.lastUpdatedAt = nil
            self.logUri = nil
            self.mlModelId = nil
            self.message = nil
            self.name = nil
            self.performanceMetrics = nil
            self.startedAt = nil
            self.status = nil
        }
    }
}

/// Represents the output of a GetEvaluation operation and describes an Evaluation.
public struct GetEvaluationOutputResponse: Swift.Equatable {
    /// The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the Evaluation, normalized and scaled on computation resources. ComputeTime is only available if the Evaluation is in the COMPLETED state.
    public var computeTime: Swift.Int?
    /// The time that the Evaluation was created. The time is expressed in epoch time.
    public var createdAt: ClientRuntime.Date?
    /// The AWS user account that invoked the evaluation. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
    public var createdByIamUser: Swift.String?
    /// The DataSource used for this evaluation.
    public var evaluationDataSourceId: Swift.String?
    /// The evaluation ID which is same as the EvaluationId in the request.
    public var evaluationId: Swift.String?
    /// The epoch time when Amazon Machine Learning marked the Evaluation as COMPLETED or FAILED. FinishedAt is only available when the Evaluation is in the COMPLETED or FAILED state.
    public var finishedAt: ClientRuntime.Date?
    /// The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
    public var inputDataLocationS3: Swift.String?
    /// The time of the most recent edit to the Evaluation. The time is expressed in epoch time.
    public var lastUpdatedAt: ClientRuntime.Date?
    /// A link to the file that contains logs of the CreateEvaluation operation.
    public var logUri: Swift.String?
    /// A description of the most recent details about evaluating the MLModel.
    public var message: Swift.String?
    /// The ID of the MLModel that was the focus of the evaluation.
    public var mlModelId: Swift.String?
    /// A user-supplied name or description of the Evaluation.
    public var name: Swift.String?
    /// Measurements of how well the MLModel performed using observations referenced by the DataSource. One of the following metric is returned based on the type of the MLModel:
    ///
    /// * BinaryAUC: A binary MLModel uses the Area Under the Curve (AUC) technique to measure performance.
    ///
    /// * RegressionRMSE: A regression MLModel uses the Root Mean Square Error (RMSE) technique to measure performance. RMSE measures the difference between predicted and actual values for a single variable.
    ///
    /// * MulticlassAvgFScore: A multiclass MLModel uses the F1 score technique to measure performance.
    ///
    ///
    /// For more information about performance metrics, please see the [Amazon Machine Learning Developer Guide](https://docs.aws.amazon.com/machine-learning/latest/dg).
    public var performanceMetrics: MachineLearningClientTypes.PerformanceMetrics?
    /// The epoch time when Amazon Machine Learning marked the Evaluation as INPROGRESS. StartedAt isn't available if the Evaluation is in the PENDING state.
    public var startedAt: ClientRuntime.Date?
    /// The status of the evaluation. This element can have one of the following values:
    ///
    /// * PENDING - Amazon Machine Language (Amazon ML) submitted a request to evaluate an MLModel.
    ///
    /// * INPROGRESS - The evaluation is underway.
    ///
    /// * FAILED - The request to evaluate an MLModel did not run to completion. It is not usable.
    ///
    /// * COMPLETED - The evaluation process completed successfully.
    ///
    /// * DELETED - The Evaluation is marked as deleted. It is not usable.
    public var status: MachineLearningClientTypes.EntityStatus?

    public init (
        computeTime: Swift.Int? = nil,
        createdAt: ClientRuntime.Date? = nil,
        createdByIamUser: Swift.String? = nil,
        evaluationDataSourceId: Swift.String? = nil,
        evaluationId: Swift.String? = nil,
        finishedAt: ClientRuntime.Date? = nil,
        inputDataLocationS3: Swift.String? = nil,
        lastUpdatedAt: ClientRuntime.Date? = nil,
        logUri: Swift.String? = nil,
        message: Swift.String? = nil,
        mlModelId: Swift.String? = nil,
        name: Swift.String? = nil,
        performanceMetrics: MachineLearningClientTypes.PerformanceMetrics? = nil,
        startedAt: ClientRuntime.Date? = nil,
        status: MachineLearningClientTypes.EntityStatus? = nil
    )
    {
        self.computeTime = computeTime
        self.createdAt = createdAt
        self.createdByIamUser = createdByIamUser
        self.evaluationDataSourceId = evaluationDataSourceId
        self.evaluationId = evaluationId
        self.finishedAt = finishedAt
        self.inputDataLocationS3 = inputDataLocationS3
        self.lastUpdatedAt = lastUpdatedAt
        self.logUri = logUri
        self.message = message
        self.mlModelId = mlModelId
        self.name = name
        self.performanceMetrics = performanceMetrics
        self.startedAt = startedAt
        self.status = status
    }
}

struct GetEvaluationOutputResponseBody: Swift.Equatable {
    let evaluationId: Swift.String?
    let mlModelId: Swift.String?
    let evaluationDataSourceId: Swift.String?
    let inputDataLocationS3: Swift.String?
    let createdByIamUser: Swift.String?
    let createdAt: ClientRuntime.Date?
    let lastUpdatedAt: ClientRuntime.Date?
    let name: Swift.String?
    let status: MachineLearningClientTypes.EntityStatus?
    let performanceMetrics: MachineLearningClientTypes.PerformanceMetrics?
    let logUri: Swift.String?
    let message: Swift.String?
    let computeTime: Swift.Int?
    let finishedAt: ClientRuntime.Date?
    let startedAt: ClientRuntime.Date?
}

extension GetEvaluationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case evaluationDataSourceId = "EvaluationDataSourceId"
        case evaluationId = "EvaluationId"
        case finishedAt = "FinishedAt"
        case inputDataLocationS3 = "InputDataLocationS3"
        case lastUpdatedAt = "LastUpdatedAt"
        case logUri = "LogUri"
        case mlModelId = "MLModelId"
        case message = "Message"
        case name = "Name"
        case performanceMetrics = "PerformanceMetrics"
        case startedAt = "StartedAt"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationId)
        evaluationId = evaluationIdDecoded
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
        let evaluationDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationDataSourceId)
        evaluationDataSourceId = evaluationDataSourceIdDecoded
        let inputDataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputDataLocationS3)
        inputDataLocationS3 = inputDataLocationS3Decoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let performanceMetricsDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.PerformanceMetrics.self, forKey: .performanceMetrics)
        performanceMetrics = performanceMetricsDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startedAt)
        startedAt = startedAtDecoded
    }
}

extension GetMLModelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlModelId = "MLModelId"
        case verbose = "Verbose"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mlModelId = self.mlModelId {
            try encodeContainer.encode(mlModelId, forKey: .mlModelId)
        }
        if verbose != false {
            try encodeContainer.encode(verbose, forKey: .verbose)
        }
    }
}

extension GetMLModelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct GetMLModelInput: Swift.Equatable {
    /// The ID assigned to the MLModel at creation.
    /// This member is required.
    public var mlModelId: Swift.String?
    /// Specifies whether the GetMLModel operation should return Recipe. If true, Recipe is returned. If false, Recipe is not returned.
    public var verbose: Swift.Bool

    public init (
        mlModelId: Swift.String? = nil,
        verbose: Swift.Bool = false
    )
    {
        self.mlModelId = mlModelId
        self.verbose = verbose
    }
}

struct GetMLModelInputBody: Swift.Equatable {
    let mlModelId: Swift.String?
    let verbose: Swift.Bool
}

extension GetMLModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlModelId = "MLModelId"
        case verbose = "Verbose"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
        let verboseDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .verbose) ?? false
        verbose = verboseDecoded
    }
}

extension GetMLModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMLModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum GetMLModelOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMLModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: GetMLModelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.computeTime = output.computeTime
            self.createdAt = output.createdAt
            self.createdByIamUser = output.createdByIamUser
            self.endpointInfo = output.endpointInfo
            self.finishedAt = output.finishedAt
            self.inputDataLocationS3 = output.inputDataLocationS3
            self.lastUpdatedAt = output.lastUpdatedAt
            self.logUri = output.logUri
            self.message = output.message
            self.mlModelId = output.mlModelId
            self.mlModelType = output.mlModelType
            self.name = output.name
            self.recipe = output.recipe
            self.schema = output.schema
            self.scoreThreshold = output.scoreThreshold
            self.scoreThresholdLastUpdatedAt = output.scoreThresholdLastUpdatedAt
            self.sizeInBytes = output.sizeInBytes
            self.startedAt = output.startedAt
            self.status = output.status
            self.trainingDataSourceId = output.trainingDataSourceId
            self.trainingParameters = output.trainingParameters
        } else {
            self.computeTime = nil
            self.createdAt = nil
            self.createdByIamUser = nil
            self.endpointInfo = nil
            self.finishedAt = nil
            self.inputDataLocationS3 = nil
            self.lastUpdatedAt = nil
            self.logUri = nil
            self.mlModelId = nil
            self.mlModelType = nil
            self.message = nil
            self.name = nil
            self.recipe = nil
            self.schema = nil
            self.scoreThreshold = nil
            self.scoreThresholdLastUpdatedAt = nil
            self.sizeInBytes = nil
            self.startedAt = nil
            self.status = nil
            self.trainingDataSourceId = nil
            self.trainingParameters = nil
        }
    }
}

/// Represents the output of a GetMLModel operation, and provides detailed information about a MLModel.
public struct GetMLModelOutputResponse: Swift.Equatable {
    /// The approximate CPU time in milliseconds that Amazon Machine Learning spent processing the MLModel, normalized and scaled on computation resources. ComputeTime is only available if the MLModel is in the COMPLETED state.
    public var computeTime: Swift.Int?
    /// The time that the MLModel was created. The time is expressed in epoch time.
    public var createdAt: ClientRuntime.Date?
    /// The AWS user account from which the MLModel was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
    public var createdByIamUser: Swift.String?
    /// The current endpoint of the MLModel
    public var endpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo?
    /// The epoch time when Amazon Machine Learning marked the MLModel as COMPLETED or FAILED. FinishedAt is only available when the MLModel is in the COMPLETED or FAILED state.
    public var finishedAt: ClientRuntime.Date?
    /// The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
    public var inputDataLocationS3: Swift.String?
    /// The time of the most recent edit to the MLModel. The time is expressed in epoch time.
    public var lastUpdatedAt: ClientRuntime.Date?
    /// A link to the file that contains logs of the CreateMLModel operation.
    public var logUri: Swift.String?
    /// A description of the most recent details about accessing the MLModel.
    public var message: Swift.String?
    /// The MLModel ID, which is same as the MLModelId in the request.
    public var mlModelId: Swift.String?
    /// Identifies the MLModel category. The following are the available types:
    ///
    /// * REGRESSION -- Produces a numeric result. For example, "What price should a house be listed at?"
    ///
    /// * BINARY -- Produces one of two possible results. For example, "Is this an e-commerce website?"
    ///
    /// * MULTICLASS -- Produces one of several possible results. For example, "Is this a HIGH, LOW or MEDIUM risk trade?"
    public var mlModelType: MachineLearningClientTypes.MLModelType?
    /// A user-supplied name or description of the MLModel.
    public var name: Swift.String?
    /// The recipe to use when training the MLModel. The Recipe provides detailed information about the observation data to use during training, and manipulations to perform on the observation data during training. Note: This parameter is provided as part of the verbose format.
    public var recipe: Swift.String?
    /// The schema used by all of the data files referenced by the DataSource. Note: This parameter is provided as part of the verbose format.
    public var schema: Swift.String?
    /// The scoring threshold is used in binary classification MLModel models. It marks the boundary between a positive prediction and a negative prediction. Output values greater than or equal to the threshold receive a positive result from the MLModel, such as true. Output values less than the threshold receive a negative response from the MLModel, such as false.
    public var scoreThreshold: Swift.Float?
    /// The time of the most recent edit to the ScoreThreshold. The time is expressed in epoch time.
    public var scoreThresholdLastUpdatedAt: ClientRuntime.Date?
    /// Long integer type that is a 64-bit signed number.
    public var sizeInBytes: Swift.Int?
    /// The epoch time when Amazon Machine Learning marked the MLModel as INPROGRESS. StartedAt isn't available if the MLModel is in the PENDING state.
    public var startedAt: ClientRuntime.Date?
    /// The current status of the MLModel. This element can have one of the following values:
    ///
    /// * PENDING - Amazon Machine Learning (Amazon ML) submitted a request to describe a MLModel.
    ///
    /// * INPROGRESS - The request is processing.
    ///
    /// * FAILED - The request did not run to completion. The ML model isn't usable.
    ///
    /// * COMPLETED - The request completed successfully.
    ///
    /// * DELETED - The MLModel is marked as deleted. It isn't usable.
    public var status: MachineLearningClientTypes.EntityStatus?
    /// The ID of the training DataSource.
    public var trainingDataSourceId: Swift.String?
    /// A list of the training parameters in the MLModel. The list is implemented as a map of key-value pairs. The following is the current set of training parameters:
    ///
    /// * sgd.maxMLModelSizeInBytes - The maximum allowed size of the model. Depending on the input data, the size of the model might affect its performance. The value is an integer that ranges from 100000 to 2147483648. The default value is 33554432.
    ///
    /// * sgd.maxPasses - The number of times that the training process traverses the observations to build the MLModel. The value is an integer that ranges from 1 to 10000. The default value is 10.
    ///
    /// * sgd.shuffleType - Whether Amazon ML shuffles the training data. Shuffling data improves a model's ability to find the optimal solution for a variety of data types. The valid values are auto and none. The default value is none. We strongly recommend that you shuffle your data.
    ///
    /// * sgd.l1RegularizationAmount - The coefficient regularization L1 norm. It controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to zero, resulting in a sparse feature set. If you use this parameter, start by specifying a small value, such as 1.0E-08. The value is a double that ranges from 0 to MAX_DOUBLE. The default is to not use L1 normalization. This parameter can't be used when L2 is specified. Use this parameter sparingly.
    ///
    /// * sgd.l2RegularizationAmount - The coefficient regularization L2 norm. It controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to small, nonzero values. If you use this parameter, start by specifying a small value, such as 1.0E-08. The value is a double that ranges from 0 to MAX_DOUBLE. The default is to not use L2 normalization. This parameter can't be used when L1 is specified. Use this parameter sparingly.
    public var trainingParameters: [Swift.String:Swift.String]?

    public init (
        computeTime: Swift.Int? = nil,
        createdAt: ClientRuntime.Date? = nil,
        createdByIamUser: Swift.String? = nil,
        endpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo? = nil,
        finishedAt: ClientRuntime.Date? = nil,
        inputDataLocationS3: Swift.String? = nil,
        lastUpdatedAt: ClientRuntime.Date? = nil,
        logUri: Swift.String? = nil,
        message: Swift.String? = nil,
        mlModelId: Swift.String? = nil,
        mlModelType: MachineLearningClientTypes.MLModelType? = nil,
        name: Swift.String? = nil,
        recipe: Swift.String? = nil,
        schema: Swift.String? = nil,
        scoreThreshold: Swift.Float? = nil,
        scoreThresholdLastUpdatedAt: ClientRuntime.Date? = nil,
        sizeInBytes: Swift.Int? = nil,
        startedAt: ClientRuntime.Date? = nil,
        status: MachineLearningClientTypes.EntityStatus? = nil,
        trainingDataSourceId: Swift.String? = nil,
        trainingParameters: [Swift.String:Swift.String]? = nil
    )
    {
        self.computeTime = computeTime
        self.createdAt = createdAt
        self.createdByIamUser = createdByIamUser
        self.endpointInfo = endpointInfo
        self.finishedAt = finishedAt
        self.inputDataLocationS3 = inputDataLocationS3
        self.lastUpdatedAt = lastUpdatedAt
        self.logUri = logUri
        self.message = message
        self.mlModelId = mlModelId
        self.mlModelType = mlModelType
        self.name = name
        self.recipe = recipe
        self.schema = schema
        self.scoreThreshold = scoreThreshold
        self.scoreThresholdLastUpdatedAt = scoreThresholdLastUpdatedAt
        self.sizeInBytes = sizeInBytes
        self.startedAt = startedAt
        self.status = status
        self.trainingDataSourceId = trainingDataSourceId
        self.trainingParameters = trainingParameters
    }
}

struct GetMLModelOutputResponseBody: Swift.Equatable {
    let mlModelId: Swift.String?
    let trainingDataSourceId: Swift.String?
    let createdByIamUser: Swift.String?
    let createdAt: ClientRuntime.Date?
    let lastUpdatedAt: ClientRuntime.Date?
    let name: Swift.String?
    let status: MachineLearningClientTypes.EntityStatus?
    let sizeInBytes: Swift.Int?
    let endpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo?
    let trainingParameters: [Swift.String:Swift.String]?
    let inputDataLocationS3: Swift.String?
    let mlModelType: MachineLearningClientTypes.MLModelType?
    let scoreThreshold: Swift.Float?
    let scoreThresholdLastUpdatedAt: ClientRuntime.Date?
    let logUri: Swift.String?
    let message: Swift.String?
    let computeTime: Swift.Int?
    let finishedAt: ClientRuntime.Date?
    let startedAt: ClientRuntime.Date?
    let recipe: Swift.String?
    let schema: Swift.String?
}

extension GetMLModelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case endpointInfo = "EndpointInfo"
        case finishedAt = "FinishedAt"
        case inputDataLocationS3 = "InputDataLocationS3"
        case lastUpdatedAt = "LastUpdatedAt"
        case logUri = "LogUri"
        case mlModelId = "MLModelId"
        case mlModelType = "MLModelType"
        case message = "Message"
        case name = "Name"
        case recipe = "Recipe"
        case schema = "Schema"
        case scoreThreshold = "ScoreThreshold"
        case scoreThresholdLastUpdatedAt = "ScoreThresholdLastUpdatedAt"
        case sizeInBytes = "SizeInBytes"
        case startedAt = "StartedAt"
        case status = "Status"
        case trainingDataSourceId = "TrainingDataSourceId"
        case trainingParameters = "TrainingParameters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
        let trainingDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingDataSourceId)
        trainingDataSourceId = trainingDataSourceIdDecoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let sizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInBytes)
        sizeInBytes = sizeInBytesDecoded
        let endpointInfoDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RealtimeEndpointInfo.self, forKey: .endpointInfo)
        endpointInfo = endpointInfoDecoded
        let trainingParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .trainingParameters)
        var trainingParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let trainingParametersContainer = trainingParametersContainer {
            trainingParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in trainingParametersContainer {
                if let stringtype0 = stringtype0 {
                    trainingParametersDecoded0?[key0] = stringtype0
                }
            }
        }
        trainingParameters = trainingParametersDecoded0
        let inputDataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputDataLocationS3)
        inputDataLocationS3 = inputDataLocationS3Decoded
        let mlModelTypeDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.MLModelType.self, forKey: .mlModelType)
        mlModelType = mlModelTypeDecoded
        let scoreThresholdDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .scoreThreshold)
        scoreThreshold = scoreThresholdDecoded
        let scoreThresholdLastUpdatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .scoreThresholdLastUpdatedAt)
        scoreThresholdLastUpdatedAt = scoreThresholdLastUpdatedAtDecoded
        let logUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .logUri)
        logUri = logUriDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startedAt)
        startedAt = startedAtDecoded
        let recipeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recipe)
        recipe = recipeDecoded
        let schemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schema)
        schema = schemaDecoded
    }
}

extension IdempotentParameterMismatchException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: IdempotentParameterMismatchExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = 0
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A second request to use or change an object was not allowed. This can result from retrying a request using a parameter that was not present in the original request.
public struct IdempotentParameterMismatchException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.Int
    public var message: Swift.String?

    public init (
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct IdempotentParameterMismatchExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.Int
}

extension IdempotentParameterMismatchExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .code) ?? 0
        code = codeDecoded
    }
}

extension InternalServerException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = 0
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An error on the server occurred when trying to process a request.
public struct InternalServerException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var code: Swift.Int
    public var message: Swift.String?

    public init (
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct InternalServerExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.Int
}

extension InternalServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .code) ?? 0
        code = codeDecoded
    }
}

extension InvalidInputException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidInputExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = 0
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// An error on the client occurred. Typically, the cause is an invalid input value.
public struct InvalidInputException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.Int
    public var message: Swift.String?

    public init (
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct InvalidInputExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.Int
}

extension InvalidInputExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .code) ?? 0
        code = codeDecoded
    }
}

extension InvalidTagException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: InvalidTagExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

public struct InvalidTagException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidTagExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InvalidTagExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = 0
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The subscriber exceeded the maximum number of operations. This exception can occur when listing objects such as DataSource.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.Int
    public var message: Swift.String?

    public init (
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.Int
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .code) ?? 0
        code = codeDecoded
    }
}

extension MachineLearningClientTypes.MLModel: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithm = "Algorithm"
        case computeTime = "ComputeTime"
        case createdAt = "CreatedAt"
        case createdByIamUser = "CreatedByIamUser"
        case endpointInfo = "EndpointInfo"
        case finishedAt = "FinishedAt"
        case inputDataLocationS3 = "InputDataLocationS3"
        case lastUpdatedAt = "LastUpdatedAt"
        case mlModelId = "MLModelId"
        case mlModelType = "MLModelType"
        case message = "Message"
        case name = "Name"
        case scoreThreshold = "ScoreThreshold"
        case scoreThresholdLastUpdatedAt = "ScoreThresholdLastUpdatedAt"
        case sizeInBytes = "SizeInBytes"
        case startedAt = "StartedAt"
        case status = "Status"
        case trainingDataSourceId = "TrainingDataSourceId"
        case trainingParameters = "TrainingParameters"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithm = self.algorithm {
            try encodeContainer.encode(algorithm.rawValue, forKey: .algorithm)
        }
        if let computeTime = self.computeTime {
            try encodeContainer.encode(computeTime, forKey: .computeTime)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let createdByIamUser = self.createdByIamUser {
            try encodeContainer.encode(createdByIamUser, forKey: .createdByIamUser)
        }
        if let endpointInfo = self.endpointInfo {
            try encodeContainer.encode(endpointInfo, forKey: .endpointInfo)
        }
        if let finishedAt = self.finishedAt {
            try encodeContainer.encodeTimestamp(finishedAt, format: .epochSeconds, forKey: .finishedAt)
        }
        if let inputDataLocationS3 = self.inputDataLocationS3 {
            try encodeContainer.encode(inputDataLocationS3, forKey: .inputDataLocationS3)
        }
        if let lastUpdatedAt = self.lastUpdatedAt {
            try encodeContainer.encodeTimestamp(lastUpdatedAt, format: .epochSeconds, forKey: .lastUpdatedAt)
        }
        if let mlModelId = self.mlModelId {
            try encodeContainer.encode(mlModelId, forKey: .mlModelId)
        }
        if let mlModelType = self.mlModelType {
            try encodeContainer.encode(mlModelType.rawValue, forKey: .mlModelType)
        }
        if let message = self.message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let scoreThreshold = self.scoreThreshold {
            try encodeContainer.encode(scoreThreshold, forKey: .scoreThreshold)
        }
        if let scoreThresholdLastUpdatedAt = self.scoreThresholdLastUpdatedAt {
            try encodeContainer.encodeTimestamp(scoreThresholdLastUpdatedAt, format: .epochSeconds, forKey: .scoreThresholdLastUpdatedAt)
        }
        if let sizeInBytes = self.sizeInBytes {
            try encodeContainer.encode(sizeInBytes, forKey: .sizeInBytes)
        }
        if let startedAt = self.startedAt {
            try encodeContainer.encodeTimestamp(startedAt, format: .epochSeconds, forKey: .startedAt)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let trainingDataSourceId = self.trainingDataSourceId {
            try encodeContainer.encode(trainingDataSourceId, forKey: .trainingDataSourceId)
        }
        if let trainingParameters = trainingParameters {
            var trainingParametersContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .trainingParameters)
            for (dictKey0, trainingParameters0) in trainingParameters {
                try trainingParametersContainer.encode(trainingParameters0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
        let trainingDataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trainingDataSourceId)
        trainingDataSourceId = trainingDataSourceIdDecoded
        let createdByIamUserDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdByIamUser)
        createdByIamUser = createdByIamUserDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let lastUpdatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .lastUpdatedAt)
        lastUpdatedAt = lastUpdatedAtDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.EntityStatus.self, forKey: .status)
        status = statusDecoded
        let sizeInBytesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .sizeInBytes)
        sizeInBytes = sizeInBytesDecoded
        let endpointInfoDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RealtimeEndpointInfo.self, forKey: .endpointInfo)
        endpointInfo = endpointInfoDecoded
        let trainingParametersContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .trainingParameters)
        var trainingParametersDecoded0: [Swift.String:Swift.String]? = nil
        if let trainingParametersContainer = trainingParametersContainer {
            trainingParametersDecoded0 = [Swift.String:Swift.String]()
            for (key0, stringtype0) in trainingParametersContainer {
                if let stringtype0 = stringtype0 {
                    trainingParametersDecoded0?[key0] = stringtype0
                }
            }
        }
        trainingParameters = trainingParametersDecoded0
        let inputDataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inputDataLocationS3)
        inputDataLocationS3 = inputDataLocationS3Decoded
        let algorithmDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.Algorithm.self, forKey: .algorithm)
        algorithm = algorithmDecoded
        let mlModelTypeDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.MLModelType.self, forKey: .mlModelType)
        mlModelType = mlModelTypeDecoded
        let scoreThresholdDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .scoreThreshold)
        scoreThreshold = scoreThresholdDecoded
        let scoreThresholdLastUpdatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .scoreThresholdLastUpdatedAt)
        scoreThresholdLastUpdatedAt = scoreThresholdLastUpdatedAtDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let computeTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .computeTime)
        computeTime = computeTimeDecoded
        let finishedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .finishedAt)
        finishedAt = finishedAtDecoded
        let startedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .startedAt)
        startedAt = startedAtDecoded
    }
}

extension MachineLearningClientTypes {
    /// Represents the output of a GetMLModel operation. The content consists of the detailed metadata and the current status of the MLModel.
    public struct MLModel: Swift.Equatable {
        /// The algorithm used to train the MLModel. The following algorithm is supported:
        ///
        /// * SGD -- Stochastic gradient descent. The goal of SGD is to minimize the gradient of the loss function.
        public var algorithm: MachineLearningClientTypes.Algorithm?
        /// Long integer type that is a 64-bit signed number.
        public var computeTime: Swift.Int?
        /// The time that the MLModel was created. The time is expressed in epoch time.
        public var createdAt: ClientRuntime.Date?
        /// The AWS user account from which the MLModel was created. The account type can be either an AWS root account or an AWS Identity and Access Management (IAM) user account.
        public var createdByIamUser: Swift.String?
        /// The current endpoint of the MLModel.
        public var endpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo?
        /// A timestamp represented in epoch time.
        public var finishedAt: ClientRuntime.Date?
        /// The location of the data file or directory in Amazon Simple Storage Service (Amazon S3).
        public var inputDataLocationS3: Swift.String?
        /// The time of the most recent edit to the MLModel. The time is expressed in epoch time.
        public var lastUpdatedAt: ClientRuntime.Date?
        /// A description of the most recent details about accessing the MLModel.
        public var message: Swift.String?
        /// The ID assigned to the MLModel at creation.
        public var mlModelId: Swift.String?
        /// Identifies the MLModel category. The following are the available types:
        ///
        /// * REGRESSION - Produces a numeric result. For example, "What price should a house be listed at?"
        ///
        /// * BINARY - Produces one of two possible results. For example, "Is this a child-friendly web site?".
        ///
        /// * MULTICLASS - Produces one of several possible results. For example, "Is this a HIGH-, LOW-, or MEDIUM-risk trade?".
        public var mlModelType: MachineLearningClientTypes.MLModelType?
        /// A user-supplied name or description of the MLModel.
        public var name: Swift.String?
        public var scoreThreshold: Swift.Float?
        /// The time of the most recent edit to the ScoreThreshold. The time is expressed in epoch time.
        public var scoreThresholdLastUpdatedAt: ClientRuntime.Date?
        /// Long integer type that is a 64-bit signed number.
        public var sizeInBytes: Swift.Int?
        /// A timestamp represented in epoch time.
        public var startedAt: ClientRuntime.Date?
        /// The current status of an MLModel. This element can have one of the following values:
        ///
        /// * PENDING - Amazon Machine Learning (Amazon ML) submitted a request to create an MLModel.
        ///
        /// * INPROGRESS - The creation process is underway.
        ///
        /// * FAILED - The request to create an MLModel didn't run to completion. The model isn't usable.
        ///
        /// * COMPLETED - The creation process completed successfully.
        ///
        /// * DELETED - The MLModel is marked as deleted. It isn't usable.
        public var status: MachineLearningClientTypes.EntityStatus?
        /// The ID of the training DataSource. The CreateMLModel operation uses the TrainingDataSourceId.
        public var trainingDataSourceId: Swift.String?
        /// A list of the training parameters in the MLModel. The list is implemented as a map of key-value pairs. The following is the current set of training parameters:
        ///
        /// * sgd.maxMLModelSizeInBytes - The maximum allowed size of the model. Depending on the input data, the size of the model might affect its performance. The value is an integer that ranges from 100000 to 2147483648. The default value is 33554432.
        ///
        /// * sgd.maxPasses - The number of times that the training process traverses the observations to build the MLModel. The value is an integer that ranges from 1 to 10000. The default value is 10.
        ///
        /// * sgd.shuffleType - Whether Amazon ML shuffles the training data. Shuffling the data improves a model's ability to find the optimal solution for a variety of data types. The valid values are auto and none. The default value is none.
        ///
        /// * sgd.l1RegularizationAmount - The coefficient regularization L1 norm, which controls overfitting the data by penalizing large coefficients. This parameter tends to drive coefficients to zero, resulting in sparse feature set. If you use this parameter, start by specifying a small value, such as 1.0E-08. The value is a double that ranges from 0 to MAX_DOUBLE. The default is to not use L1 normalization. This parameter can't be used when L2 is specified. Use this parameter sparingly.
        ///
        /// * sgd.l2RegularizationAmount - The coefficient regularization L2 norm, which controls overfitting the data by penalizing large coefficients. This tends to drive coefficients to small, nonzero values. If you use this parameter, start by specifying a small value, such as 1.0E-08. The value is a double that ranges from 0 to MAX_DOUBLE. The default is to not use L2 normalization. This parameter can't be used when L1 is specified. Use this parameter sparingly.
        public var trainingParameters: [Swift.String:Swift.String]?

        public init (
            algorithm: MachineLearningClientTypes.Algorithm? = nil,
            computeTime: Swift.Int? = nil,
            createdAt: ClientRuntime.Date? = nil,
            createdByIamUser: Swift.String? = nil,
            endpointInfo: MachineLearningClientTypes.RealtimeEndpointInfo? = nil,
            finishedAt: ClientRuntime.Date? = nil,
            inputDataLocationS3: Swift.String? = nil,
            lastUpdatedAt: ClientRuntime.Date? = nil,
            message: Swift.String? = nil,
            mlModelId: Swift.String? = nil,
            mlModelType: MachineLearningClientTypes.MLModelType? = nil,
            name: Swift.String? = nil,
            scoreThreshold: Swift.Float? = nil,
            scoreThresholdLastUpdatedAt: ClientRuntime.Date? = nil,
            sizeInBytes: Swift.Int? = nil,
            startedAt: ClientRuntime.Date? = nil,
            status: MachineLearningClientTypes.EntityStatus? = nil,
            trainingDataSourceId: Swift.String? = nil,
            trainingParameters: [Swift.String:Swift.String]? = nil
        )
        {
            self.algorithm = algorithm
            self.computeTime = computeTime
            self.createdAt = createdAt
            self.createdByIamUser = createdByIamUser
            self.endpointInfo = endpointInfo
            self.finishedAt = finishedAt
            self.inputDataLocationS3 = inputDataLocationS3
            self.lastUpdatedAt = lastUpdatedAt
            self.message = message
            self.mlModelId = mlModelId
            self.mlModelType = mlModelType
            self.name = name
            self.scoreThreshold = scoreThreshold
            self.scoreThresholdLastUpdatedAt = scoreThresholdLastUpdatedAt
            self.sizeInBytes = sizeInBytes
            self.startedAt = startedAt
            self.status = status
            self.trainingDataSourceId = trainingDataSourceId
            self.trainingParameters = trainingParameters
        }
    }

}

extension MachineLearningClientTypes {
    public enum MLModelFilterVariable: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case algorithm
        case createdAt
        case iamUser
        case lastUpdatedAt
        case mlModelType
        case name
        case realTimeEndpointStatus
        case status
        case trainingDatasourceId
        case trainingDataUri
        case sdkUnknown(Swift.String)

        public static var allCases: [MLModelFilterVariable] {
            return [
                .algorithm,
                .createdAt,
                .iamUser,
                .lastUpdatedAt,
                .mlModelType,
                .name,
                .realTimeEndpointStatus,
                .status,
                .trainingDatasourceId,
                .trainingDataUri,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .algorithm: return "Algorithm"
            case .createdAt: return "CreatedAt"
            case .iamUser: return "IAMUser"
            case .lastUpdatedAt: return "LastUpdatedAt"
            case .mlModelType: return "MLModelType"
            case .name: return "Name"
            case .realTimeEndpointStatus: return "RealtimeEndpointStatus"
            case .status: return "Status"
            case .trainingDatasourceId: return "TrainingDataSourceId"
            case .trainingDataUri: return "TrainingDataURI"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MLModelFilterVariable(rawValue: rawValue) ?? MLModelFilterVariable.sdkUnknown(rawValue)
        }
    }
}

extension MachineLearningClientTypes {
    public enum MLModelType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case binary
        case multiclass
        case regression
        case sdkUnknown(Swift.String)

        public static var allCases: [MLModelType] {
            return [
                .binary,
                .multiclass,
                .regression,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .binary: return "BINARY"
            case .multiclass: return "MULTICLASS"
            case .regression: return "REGRESSION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MLModelType(rawValue: rawValue) ?? MLModelType.sdkUnknown(rawValue)
        }
    }
}

extension MachineLearningClientTypes.PerformanceMetrics: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case properties = "Properties"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let properties = properties {
            var propertiesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .properties)
            for (dictKey0, performanceMetricsProperties0) in properties {
                try propertiesContainer.encode(performanceMetricsProperties0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let propertiesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .properties)
        var propertiesDecoded0: [Swift.String:Swift.String]? = nil
        if let propertiesContainer = propertiesContainer {
            propertiesDecoded0 = [Swift.String:Swift.String]()
            for (key0, performancemetricspropertyvalue0) in propertiesContainer {
                if let performancemetricspropertyvalue0 = performancemetricspropertyvalue0 {
                    propertiesDecoded0?[key0] = performancemetricspropertyvalue0
                }
            }
        }
        properties = propertiesDecoded0
    }
}

extension MachineLearningClientTypes {
    /// Measurements of how well the MLModel performed on known observations. One of the following metrics is returned, based on the type of the MLModel:
    ///
    /// * BinaryAUC: The binary MLModel uses the Area Under the Curve (AUC) technique to measure performance.
    ///
    /// * RegressionRMSE: The regression MLModel uses the Root Mean Square Error (RMSE) technique to measure performance. RMSE measures the difference between predicted and actual values for a single variable.
    ///
    /// * MulticlassAvgFScore: The multiclass MLModel uses the F1 score technique to measure performance.
    ///
    ///
    /// For more information about performance metrics, please see the [Amazon Machine Learning Developer Guide](https://docs.aws.amazon.com/machine-learning/latest/dg).
    public struct PerformanceMetrics: Swift.Equatable {
        public var properties: [Swift.String:Swift.String]?

        public init (
            properties: [Swift.String:Swift.String]? = nil
        )
        {
            self.properties = properties
        }
    }

}

extension PredictInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlModelId = "MLModelId"
        case predictEndpoint = "PredictEndpoint"
        case record = "Record"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mlModelId = self.mlModelId {
            try encodeContainer.encode(mlModelId, forKey: .mlModelId)
        }
        if let predictEndpoint = self.predictEndpoint {
            try encodeContainer.encode(predictEndpoint, forKey: .predictEndpoint)
        }
        if let record = record {
            var recordContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .record)
            for (dictKey0, record0) in record {
                try recordContainer.encode(record0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension PredictInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct PredictInput: Swift.Equatable {
    /// A unique identifier of the MLModel.
    /// This member is required.
    public var mlModelId: Swift.String?
    /// This member is required.
    public var predictEndpoint: Swift.String?
    /// A map of variable name-value pairs that represent an observation.
    /// This member is required.
    public var record: [Swift.String:Swift.String]?

    public init (
        mlModelId: Swift.String? = nil,
        predictEndpoint: Swift.String? = nil,
        record: [Swift.String:Swift.String]? = nil
    )
    {
        self.mlModelId = mlModelId
        self.predictEndpoint = predictEndpoint
        self.record = record
    }
}

struct PredictInputBody: Swift.Equatable {
    let mlModelId: Swift.String?
    let record: [Swift.String:Swift.String]?
    let predictEndpoint: Swift.String?
}

extension PredictInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlModelId = "MLModelId"
        case predictEndpoint = "PredictEndpoint"
        case record = "Record"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
        let recordContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .record)
        var recordDecoded0: [Swift.String:Swift.String]? = nil
        if let recordContainer = recordContainer {
            recordDecoded0 = [Swift.String:Swift.String]()
            for (key0, variablevalue0) in recordContainer {
                if let variablevalue0 = variablevalue0 {
                    recordDecoded0?[key0] = variablevalue0
                }
            }
        }
        record = recordDecoded0
        let predictEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .predictEndpoint)
        predictEndpoint = predictEndpointDecoded
    }
}

extension PredictOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension PredictOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "PredictorNotMountedException" : self = .predictorNotMountedException(try PredictorNotMountedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum PredictOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case predictorNotMountedException(PredictorNotMountedException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension PredictOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PredictOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.prediction = output.prediction
        } else {
            self.prediction = nil
        }
    }
}

public struct PredictOutputResponse: Swift.Equatable {
    /// The output from a Predict operation:
    ///
    /// * Details - Contains the following attributes: DetailsAttributes.PREDICTIVE_MODEL_TYPE - REGRESSION | BINARY | MULTICLASSDetailsAttributes.ALGORITHM - SGD
    ///
    /// * PredictedLabel - Present for either a BINARY or MULTICLASSMLModel request.
    ///
    /// * PredictedScores - Contains the raw classification score corresponding to each label.
    ///
    /// * PredictedValue - Present for a REGRESSIONMLModel request.
    public var prediction: MachineLearningClientTypes.Prediction?

    public init (
        prediction: MachineLearningClientTypes.Prediction? = nil
    )
    {
        self.prediction = prediction
    }
}

struct PredictOutputResponseBody: Swift.Equatable {
    let prediction: MachineLearningClientTypes.Prediction?
}

extension PredictOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case prediction = "Prediction"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predictionDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.Prediction.self, forKey: .prediction)
        prediction = predictionDecoded
    }
}

extension MachineLearningClientTypes.Prediction: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case details
        case predictedLabel
        case predictedScores
        case predictedValue
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let details = details {
            var detailsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .details)
            for (dictKey0, detailsMap0) in details {
                try detailsContainer.encode(detailsMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let predictedLabel = self.predictedLabel {
            try encodeContainer.encode(predictedLabel, forKey: .predictedLabel)
        }
        if let predictedScores = predictedScores {
            var predictedScoresContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .predictedScores)
            for (dictKey0, scoreValuePerLabelMap0) in predictedScores {
                try predictedScoresContainer.encode(scoreValuePerLabelMap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let predictedValue = self.predictedValue {
            try encodeContainer.encode(predictedValue, forKey: .predictedValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let predictedLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .predictedLabel)
        predictedLabel = predictedLabelDecoded
        let predictedValueDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .predictedValue)
        predictedValue = predictedValueDecoded
        let predictedScoresContainer = try containerValues.decodeIfPresent([Swift.String: Swift.Float?].self, forKey: .predictedScores)
        var predictedScoresDecoded0: [Swift.String:Swift.Float]? = nil
        if let predictedScoresContainer = predictedScoresContainer {
            predictedScoresDecoded0 = [Swift.String:Swift.Float]()
            for (key0, scorevalue0) in predictedScoresContainer {
                if let scorevalue0 = scorevalue0 {
                    predictedScoresDecoded0?[key0] = scorevalue0
                }
            }
        }
        predictedScores = predictedScoresDecoded0
        let detailsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .details)
        var detailsDecoded0: [Swift.String:Swift.String]? = nil
        if let detailsContainer = detailsContainer {
            detailsDecoded0 = [Swift.String:Swift.String]()
            for (key0, detailsvalue0) in detailsContainer {
                if let detailsvalue0 = detailsvalue0 {
                    detailsDecoded0?[key0] = detailsvalue0
                }
            }
        }
        details = detailsDecoded0
    }
}

extension MachineLearningClientTypes {
    /// The output from a Predict operation:
    ///
    /// * Details - Contains the following attributes: DetailsAttributes.PREDICTIVE_MODEL_TYPE - REGRESSION | BINARY | MULTICLASSDetailsAttributes.ALGORITHM - SGD
    ///
    /// * PredictedLabel - Present for either a BINARY or MULTICLASSMLModel request.
    ///
    /// * PredictedScores - Contains the raw classification score corresponding to each label.
    ///
    /// * PredictedValue - Present for a REGRESSIONMLModel request.
    public struct Prediction: Swift.Equatable {
        /// Provides any additional details regarding the prediction.
        public var details: [Swift.String:Swift.String]?
        /// The prediction label for either a BINARY or MULTICLASSMLModel.
        public var predictedLabel: Swift.String?
        /// Provides the raw classification score corresponding to each label.
        public var predictedScores: [Swift.String:Swift.Float]?
        /// The prediction value for REGRESSIONMLModel.
        public var predictedValue: Swift.Float?

        public init (
            details: [Swift.String:Swift.String]? = nil,
            predictedLabel: Swift.String? = nil,
            predictedScores: [Swift.String:Swift.Float]? = nil,
            predictedValue: Swift.Float? = nil
        )
        {
            self.details = details
            self.predictedLabel = predictedLabel
            self.predictedScores = predictedScores
            self.predictedValue = predictedValue
        }
    }

}

extension PredictorNotMountedException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: PredictorNotMountedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// The exception is thrown when a predict request is made to an unmounted MLModel.
public struct PredictorNotMountedException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct PredictorNotMountedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension PredictorNotMountedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MachineLearningClientTypes.RDSDataSpec: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataRearrangement = "DataRearrangement"
        case dataSchema = "DataSchema"
        case dataSchemaUri = "DataSchemaUri"
        case databaseCredentials = "DatabaseCredentials"
        case databaseInformation = "DatabaseInformation"
        case resourceRole = "ResourceRole"
        case s3StagingLocation = "S3StagingLocation"
        case securityGroupIds = "SecurityGroupIds"
        case selectSqlQuery = "SelectSqlQuery"
        case serviceRole = "ServiceRole"
        case subnetId = "SubnetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataRearrangement = self.dataRearrangement {
            try encodeContainer.encode(dataRearrangement, forKey: .dataRearrangement)
        }
        if let dataSchema = self.dataSchema {
            try encodeContainer.encode(dataSchema, forKey: .dataSchema)
        }
        if let dataSchemaUri = self.dataSchemaUri {
            try encodeContainer.encode(dataSchemaUri, forKey: .dataSchemaUri)
        }
        if let databaseCredentials = self.databaseCredentials {
            try encodeContainer.encode(databaseCredentials, forKey: .databaseCredentials)
        }
        if let databaseInformation = self.databaseInformation {
            try encodeContainer.encode(databaseInformation, forKey: .databaseInformation)
        }
        if let resourceRole = self.resourceRole {
            try encodeContainer.encode(resourceRole, forKey: .resourceRole)
        }
        if let s3StagingLocation = self.s3StagingLocation {
            try encodeContainer.encode(s3StagingLocation, forKey: .s3StagingLocation)
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for edpsecuritygroupid0 in securityGroupIds {
                try securityGroupIdsContainer.encode(edpsecuritygroupid0)
            }
        }
        if let selectSqlQuery = self.selectSqlQuery {
            try encodeContainer.encode(selectSqlQuery, forKey: .selectSqlQuery)
        }
        if let serviceRole = self.serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let subnetId = self.subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseInformationDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RDSDatabase.self, forKey: .databaseInformation)
        databaseInformation = databaseInformationDecoded
        let selectSqlQueryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .selectSqlQuery)
        selectSqlQuery = selectSqlQueryDecoded
        let databaseCredentialsDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RDSDatabaseCredentials.self, forKey: .databaseCredentials)
        databaseCredentials = databaseCredentialsDecoded
        let s3StagingLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3StagingLocation)
        s3StagingLocation = s3StagingLocationDecoded
        let dataRearrangementDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataRearrangement)
        dataRearrangement = dataRearrangementDecoded
        let dataSchemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSchema)
        dataSchema = dataSchemaDecoded
        let dataSchemaUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSchemaUri)
        dataSchemaUri = dataSchemaUriDecoded
        let resourceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceRole)
        resourceRole = resourceRoleDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
    }
}

extension MachineLearningClientTypes {
    /// The data specification of an Amazon Relational Database Service (Amazon RDS) DataSource.
    public struct RDSDataSpec: Swift.Equatable {
        /// A JSON string that represents the splitting and rearrangement processing to be applied to a DataSource. If the DataRearrangement parameter is not provided, all of the input data is used to create the Datasource. There are multiple parameters that control what data is used to create a datasource:
        ///
        /// * percentBegin Use percentBegin to indicate the beginning of the range of the data used to create the Datasource. If you do not include percentBegin and percentEnd, Amazon ML includes all of the data when creating the datasource.
        ///
        /// * percentEnd Use percentEnd to indicate the end of the range of the data used to create the Datasource. If you do not include percentBegin and percentEnd, Amazon ML includes all of the data when creating the datasource.
        ///
        /// * complement The complement parameter instructs Amazon ML to use the data that is not included in the range of percentBegin to percentEnd to create a datasource. The complement parameter is useful if you need to create complementary datasources for training and evaluation. To create a complementary datasource, use the same values for percentBegin and percentEnd, along with the complement parameter. For example, the following two datasources do not share any data, and can be used to train and evaluate a model. The first datasource has 25 percent of the data, and the second one has 75 percent of the data. Datasource for evaluation: {"splitting":{"percentBegin":0, "percentEnd":25}} Datasource for training: {"splitting":{"percentBegin":0, "percentEnd":25, "complement":"true"}}
        ///
        /// * strategy To change how Amazon ML splits the data for a datasource, use the strategy parameter. The default value for the strategy parameter is sequential, meaning that Amazon ML takes all of the data records between the percentBegin and percentEnd parameters for the datasource, in the order that the records appear in the input data. The following two DataRearrangement lines are examples of sequentially ordered training and evaluation datasources: Datasource for evaluation: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential"}} Datasource for training: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential", "complement":"true"}} To randomly split the input data into the proportions indicated by the percentBegin and percentEnd parameters, set the strategy parameter to random and provide a string that is used as the seed value for the random data splitting (for example, you can use the S3 path to your data as the random seed string). If you choose the random split strategy, Amazon ML assigns each row of data a pseudo-random number between 0 and 100, and then selects the rows that have an assigned number between percentBegin and percentEnd. Pseudo-random numbers are assigned using both the input seed string value and the byte offset as a seed, so changing the data results in a different split. Any existing ordering is preserved. The random splitting strategy ensures that variables in the training and evaluation data are distributed similarly. It is useful in the cases where the input data may have an implicit sort order, which would otherwise result in training and evaluation datasources containing non-similar data records. The following two DataRearrangement lines are examples of non-sequentially ordered training and evaluation datasources: Datasource for evaluation: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv"}} Datasource for training: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv", "complement":"true"}}
        public var dataRearrangement: Swift.String?
        /// A JSON string that represents the schema for an Amazon RDS DataSource. The DataSchema defines the structure of the observation data in the data file(s) referenced in the DataSource. A DataSchema is not required if you specify a DataSchemaUri Define your DataSchema as a series of key-value pairs. attributes and excludedVariableNames have an array of key-value pairs for their value. Use the following format to define your DataSchema. { "version": "1.0", "recordAnnotationFieldName": "F1", "recordWeightFieldName": "F2", "targetFieldName": "F3", "dataFormat": "CSV", "dataFileContainsHeader": true, "attributes": [ { "fieldName": "F1", "fieldType": "TEXT" }, { "fieldName": "F2", "fieldType": "NUMERIC" }, { "fieldName": "F3", "fieldType": "CATEGORICAL" }, { "fieldName": "F4", "fieldType": "NUMERIC" }, { "fieldName": "F5", "fieldType": "CATEGORICAL" }, { "fieldName": "F6", "fieldType": "TEXT" }, { "fieldName": "F7", "fieldType": "WEIGHTED_INT_SEQUENCE" }, { "fieldName": "F8", "fieldType": "WEIGHTED_STRING_SEQUENCE" } ], "excludedVariableNames": [ "F6" ] }
        public var dataSchema: Swift.String?
        /// The Amazon S3 location of the DataSchema.
        public var dataSchemaUri: Swift.String?
        /// The AWS Identity and Access Management (IAM) credentials that are used connect to the Amazon RDS database.
        /// This member is required.
        public var databaseCredentials: MachineLearningClientTypes.RDSDatabaseCredentials?
        /// Describes the DatabaseName and InstanceIdentifier of an Amazon RDS database.
        /// This member is required.
        public var databaseInformation: MachineLearningClientTypes.RDSDatabase?
        /// The role (DataPipelineDefaultResourceRole) assumed by an Amazon Elastic Compute Cloud (Amazon EC2) instance to carry out the copy operation from Amazon RDS to an Amazon S3 task. For more information, see [Role templates](https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html) for data pipelines.
        /// This member is required.
        public var resourceRole: Swift.String?
        /// The Amazon S3 location for staging Amazon RDS data. The data retrieved from Amazon RDS using SelectSqlQuery is stored in this location.
        /// This member is required.
        public var s3StagingLocation: Swift.String?
        /// The security group IDs to be used to access a VPC-based RDS DB instance. Ensure that there are appropriate ingress rules set up to allow access to the RDS DB instance. This attribute is used by Data Pipeline to carry out the copy operation from Amazon RDS to an Amazon S3 task.
        /// This member is required.
        public var securityGroupIds: [Swift.String]?
        /// The query that is used to retrieve the observation data for the DataSource.
        /// This member is required.
        public var selectSqlQuery: Swift.String?
        /// The role (DataPipelineDefaultRole) assumed by AWS Data Pipeline service to monitor the progress of the copy task from Amazon RDS to Amazon S3. For more information, see [Role templates](https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html) for data pipelines.
        /// This member is required.
        public var serviceRole: Swift.String?
        /// The subnet ID to be used to access a VPC-based RDS DB instance. This attribute is used by Data Pipeline to carry out the copy task from Amazon RDS to Amazon S3.
        /// This member is required.
        public var subnetId: Swift.String?

        public init (
            dataRearrangement: Swift.String? = nil,
            dataSchema: Swift.String? = nil,
            dataSchemaUri: Swift.String? = nil,
            databaseCredentials: MachineLearningClientTypes.RDSDatabaseCredentials? = nil,
            databaseInformation: MachineLearningClientTypes.RDSDatabase? = nil,
            resourceRole: Swift.String? = nil,
            s3StagingLocation: Swift.String? = nil,
            securityGroupIds: [Swift.String]? = nil,
            selectSqlQuery: Swift.String? = nil,
            serviceRole: Swift.String? = nil,
            subnetId: Swift.String? = nil
        )
        {
            self.dataRearrangement = dataRearrangement
            self.dataSchema = dataSchema
            self.dataSchemaUri = dataSchemaUri
            self.databaseCredentials = databaseCredentials
            self.databaseInformation = databaseInformation
            self.resourceRole = resourceRole
            self.s3StagingLocation = s3StagingLocation
            self.securityGroupIds = securityGroupIds
            self.selectSqlQuery = selectSqlQuery
            self.serviceRole = serviceRole
            self.subnetId = subnetId
        }
    }

}

extension MachineLearningClientTypes.RDSDatabase: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseName = "DatabaseName"
        case instanceIdentifier = "InstanceIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let databaseName = self.databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let instanceIdentifier = self.instanceIdentifier {
            try encodeContainer.encode(instanceIdentifier, forKey: .instanceIdentifier)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceIdentifier)
        instanceIdentifier = instanceIdentifierDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
    }
}

extension MachineLearningClientTypes {
    /// The database details of an Amazon RDS database.
    public struct RDSDatabase: Swift.Equatable {
        /// The name of a database hosted on an RDS DB instance.
        /// This member is required.
        public var databaseName: Swift.String?
        /// The ID of an RDS DB instance.
        /// This member is required.
        public var instanceIdentifier: Swift.String?

        public init (
            databaseName: Swift.String? = nil,
            instanceIdentifier: Swift.String? = nil
        )
        {
            self.databaseName = databaseName
            self.instanceIdentifier = instanceIdentifier
        }
    }

}

extension MachineLearningClientTypes.RDSDatabaseCredentials: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case password = "Password"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let password = self.password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
    }
}

extension MachineLearningClientTypes {
    /// The database credentials to connect to a database on an RDS DB instance.
    public struct RDSDatabaseCredentials: Swift.Equatable {
        /// The password to be used by Amazon ML to connect to a database on an RDS DB instance. The password should have sufficient permissions to execute the RDSSelectQuery query.
        /// This member is required.
        public var password: Swift.String?
        /// The username to be used by Amazon ML to connect to database on an Amazon RDS instance. The username should have sufficient permissions to execute an RDSSelectSqlQuery query.
        /// This member is required.
        public var username: Swift.String?

        public init (
            password: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.password = password
            self.username = username
        }
    }

}

extension MachineLearningClientTypes.RDSMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataPipelineId = "DataPipelineId"
        case database = "Database"
        case databaseUserName = "DatabaseUserName"
        case resourceRole = "ResourceRole"
        case selectSqlQuery = "SelectSqlQuery"
        case serviceRole = "ServiceRole"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataPipelineId = self.dataPipelineId {
            try encodeContainer.encode(dataPipelineId, forKey: .dataPipelineId)
        }
        if let database = self.database {
            try encodeContainer.encode(database, forKey: .database)
        }
        if let databaseUserName = self.databaseUserName {
            try encodeContainer.encode(databaseUserName, forKey: .databaseUserName)
        }
        if let resourceRole = self.resourceRole {
            try encodeContainer.encode(resourceRole, forKey: .resourceRole)
        }
        if let selectSqlQuery = self.selectSqlQuery {
            try encodeContainer.encode(selectSqlQuery, forKey: .selectSqlQuery)
        }
        if let serviceRole = self.serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RDSDatabase.self, forKey: .database)
        database = databaseDecoded
        let databaseUserNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseUserName)
        databaseUserName = databaseUserNameDecoded
        let selectSqlQueryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .selectSqlQuery)
        selectSqlQuery = selectSqlQueryDecoded
        let resourceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceRole)
        resourceRole = resourceRoleDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let dataPipelineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataPipelineId)
        dataPipelineId = dataPipelineIdDecoded
    }
}

extension MachineLearningClientTypes {
    /// The datasource details that are specific to Amazon RDS.
    public struct RDSMetadata: Swift.Equatable {
        /// The ID of the Data Pipeline instance that is used to carry to copy data from Amazon RDS to Amazon S3. You can use the ID to find details about the instance in the Data Pipeline console.
        public var dataPipelineId: Swift.String?
        /// The database details required to connect to an Amazon RDS.
        public var database: MachineLearningClientTypes.RDSDatabase?
        /// The username to be used by Amazon ML to connect to database on an Amazon RDS instance. The username should have sufficient permissions to execute an RDSSelectSqlQuery query.
        public var databaseUserName: Swift.String?
        /// The role (DataPipelineDefaultResourceRole) assumed by an Amazon EC2 instance to carry out the copy task from Amazon RDS to Amazon S3. For more information, see [Role templates](https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html) for data pipelines.
        public var resourceRole: Swift.String?
        /// The SQL query that is supplied during [CreateDataSourceFromRDS]. Returns only if Verbose is true in GetDataSourceInput.
        public var selectSqlQuery: Swift.String?
        /// The role (DataPipelineDefaultRole) assumed by the Data Pipeline service to monitor the progress of the copy task from Amazon RDS to Amazon S3. For more information, see [Role templates](https://docs.aws.amazon.com/datapipeline/latest/DeveloperGuide/dp-iam-roles.html) for data pipelines.
        public var serviceRole: Swift.String?

        public init (
            dataPipelineId: Swift.String? = nil,
            database: MachineLearningClientTypes.RDSDatabase? = nil,
            databaseUserName: Swift.String? = nil,
            resourceRole: Swift.String? = nil,
            selectSqlQuery: Swift.String? = nil,
            serviceRole: Swift.String? = nil
        )
        {
            self.dataPipelineId = dataPipelineId
            self.database = database
            self.databaseUserName = databaseUserName
            self.resourceRole = resourceRole
            self.selectSqlQuery = selectSqlQuery
            self.serviceRole = serviceRole
        }
    }

}

extension MachineLearningClientTypes.RealtimeEndpointInfo: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case endpointStatus = "EndpointStatus"
        case endpointUrl = "EndpointUrl"
        case peakRequestsPerSecond = "PeakRequestsPerSecond"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let endpointStatus = self.endpointStatus {
            try encodeContainer.encode(endpointStatus.rawValue, forKey: .endpointStatus)
        }
        if let endpointUrl = self.endpointUrl {
            try encodeContainer.encode(endpointUrl, forKey: .endpointUrl)
        }
        if peakRequestsPerSecond != 0 {
            try encodeContainer.encode(peakRequestsPerSecond, forKey: .peakRequestsPerSecond)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let peakRequestsPerSecondDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .peakRequestsPerSecond) ?? 0
        peakRequestsPerSecond = peakRequestsPerSecondDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let endpointUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointUrl)
        endpointUrl = endpointUrlDecoded
        let endpointStatusDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RealtimeEndpointStatus.self, forKey: .endpointStatus)
        endpointStatus = endpointStatusDecoded
    }
}

extension MachineLearningClientTypes {
    /// Describes the real-time endpoint information for an MLModel.
    public struct RealtimeEndpointInfo: Swift.Equatable {
        /// The time that the request to create the real-time endpoint for the MLModel was received. The time is expressed in epoch time.
        public var createdAt: ClientRuntime.Date?
        /// The current status of the real-time endpoint for the MLModel. This element can have one of the following values:
        ///
        /// * NONE - Endpoint does not exist or was previously deleted.
        ///
        /// * READY - Endpoint is ready to be used for real-time predictions.
        ///
        /// * UPDATING - Updating/creating the endpoint.
        public var endpointStatus: MachineLearningClientTypes.RealtimeEndpointStatus?
        /// The URI that specifies where to send real-time prediction requests for the MLModel. Note: The application must wait until the real-time endpoint is ready before using this URI.
        public var endpointUrl: Swift.String?
        /// The maximum processing rate for the real-time endpoint for MLModel, measured in incoming requests per second.
        public var peakRequestsPerSecond: Swift.Int

        public init (
            createdAt: ClientRuntime.Date? = nil,
            endpointStatus: MachineLearningClientTypes.RealtimeEndpointStatus? = nil,
            endpointUrl: Swift.String? = nil,
            peakRequestsPerSecond: Swift.Int = 0
        )
        {
            self.createdAt = createdAt
            self.endpointStatus = endpointStatus
            self.endpointUrl = endpointUrl
            self.peakRequestsPerSecond = peakRequestsPerSecond
        }
    }

}

extension MachineLearningClientTypes {
    public enum RealtimeEndpointStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case `none`
        case ready
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [RealtimeEndpointStatus] {
            return [
                .failed,
                .none,
                .ready,
                .updating,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .none: return "NONE"
            case .ready: return "READY"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RealtimeEndpointStatus(rawValue: rawValue) ?? RealtimeEndpointStatus.sdkUnknown(rawValue)
        }
    }
}

extension MachineLearningClientTypes.RedshiftDataSpec: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataRearrangement = "DataRearrangement"
        case dataSchema = "DataSchema"
        case dataSchemaUri = "DataSchemaUri"
        case databaseCredentials = "DatabaseCredentials"
        case databaseInformation = "DatabaseInformation"
        case s3StagingLocation = "S3StagingLocation"
        case selectSqlQuery = "SelectSqlQuery"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataRearrangement = self.dataRearrangement {
            try encodeContainer.encode(dataRearrangement, forKey: .dataRearrangement)
        }
        if let dataSchema = self.dataSchema {
            try encodeContainer.encode(dataSchema, forKey: .dataSchema)
        }
        if let dataSchemaUri = self.dataSchemaUri {
            try encodeContainer.encode(dataSchemaUri, forKey: .dataSchemaUri)
        }
        if let databaseCredentials = self.databaseCredentials {
            try encodeContainer.encode(databaseCredentials, forKey: .databaseCredentials)
        }
        if let databaseInformation = self.databaseInformation {
            try encodeContainer.encode(databaseInformation, forKey: .databaseInformation)
        }
        if let s3StagingLocation = self.s3StagingLocation {
            try encodeContainer.encode(s3StagingLocation, forKey: .s3StagingLocation)
        }
        if let selectSqlQuery = self.selectSqlQuery {
            try encodeContainer.encode(selectSqlQuery, forKey: .selectSqlQuery)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseInformationDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RedshiftDatabase.self, forKey: .databaseInformation)
        databaseInformation = databaseInformationDecoded
        let selectSqlQueryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .selectSqlQuery)
        selectSqlQuery = selectSqlQueryDecoded
        let databaseCredentialsDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RedshiftDatabaseCredentials.self, forKey: .databaseCredentials)
        databaseCredentials = databaseCredentialsDecoded
        let s3StagingLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3StagingLocation)
        s3StagingLocation = s3StagingLocationDecoded
        let dataRearrangementDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataRearrangement)
        dataRearrangement = dataRearrangementDecoded
        let dataSchemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSchema)
        dataSchema = dataSchemaDecoded
        let dataSchemaUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSchemaUri)
        dataSchemaUri = dataSchemaUriDecoded
    }
}

extension MachineLearningClientTypes {
    /// Describes the data specification of an Amazon Redshift DataSource.
    public struct RedshiftDataSpec: Swift.Equatable {
        /// A JSON string that represents the splitting and rearrangement processing to be applied to a DataSource. If the DataRearrangement parameter is not provided, all of the input data is used to create the Datasource. There are multiple parameters that control what data is used to create a datasource:
        ///
        /// * percentBegin Use percentBegin to indicate the beginning of the range of the data used to create the Datasource. If you do not include percentBegin and percentEnd, Amazon ML includes all of the data when creating the datasource.
        ///
        /// * percentEnd Use percentEnd to indicate the end of the range of the data used to create the Datasource. If you do not include percentBegin and percentEnd, Amazon ML includes all of the data when creating the datasource.
        ///
        /// * complement The complement parameter instructs Amazon ML to use the data that is not included in the range of percentBegin to percentEnd to create a datasource. The complement parameter is useful if you need to create complementary datasources for training and evaluation. To create a complementary datasource, use the same values for percentBegin and percentEnd, along with the complement parameter. For example, the following two datasources do not share any data, and can be used to train and evaluate a model. The first datasource has 25 percent of the data, and the second one has 75 percent of the data. Datasource for evaluation: {"splitting":{"percentBegin":0, "percentEnd":25}} Datasource for training: {"splitting":{"percentBegin":0, "percentEnd":25, "complement":"true"}}
        ///
        /// * strategy To change how Amazon ML splits the data for a datasource, use the strategy parameter. The default value for the strategy parameter is sequential, meaning that Amazon ML takes all of the data records between the percentBegin and percentEnd parameters for the datasource, in the order that the records appear in the input data. The following two DataRearrangement lines are examples of sequentially ordered training and evaluation datasources: Datasource for evaluation: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential"}} Datasource for training: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential", "complement":"true"}} To randomly split the input data into the proportions indicated by the percentBegin and percentEnd parameters, set the strategy parameter to random and provide a string that is used as the seed value for the random data splitting (for example, you can use the S3 path to your data as the random seed string). If you choose the random split strategy, Amazon ML assigns each row of data a pseudo-random number between 0 and 100, and then selects the rows that have an assigned number between percentBegin and percentEnd. Pseudo-random numbers are assigned using both the input seed string value and the byte offset as a seed, so changing the data results in a different split. Any existing ordering is preserved. The random splitting strategy ensures that variables in the training and evaluation data are distributed similarly. It is useful in the cases where the input data may have an implicit sort order, which would otherwise result in training and evaluation datasources containing non-similar data records. The following two DataRearrangement lines are examples of non-sequentially ordered training and evaluation datasources: Datasource for evaluation: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv"}} Datasource for training: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv", "complement":"true"}}
        public var dataRearrangement: Swift.String?
        /// A JSON string that represents the schema for an Amazon Redshift DataSource. The DataSchema defines the structure of the observation data in the data file(s) referenced in the DataSource. A DataSchema is not required if you specify a DataSchemaUri. Define your DataSchema as a series of key-value pairs. attributes and excludedVariableNames have an array of key-value pairs for their value. Use the following format to define your DataSchema. { "version": "1.0", "recordAnnotationFieldName": "F1", "recordWeightFieldName": "F2", "targetFieldName": "F3", "dataFormat": "CSV", "dataFileContainsHeader": true, "attributes": [ { "fieldName": "F1", "fieldType": "TEXT" }, { "fieldName": "F2", "fieldType": "NUMERIC" }, { "fieldName": "F3", "fieldType": "CATEGORICAL" }, { "fieldName": "F4", "fieldType": "NUMERIC" }, { "fieldName": "F5", "fieldType": "CATEGORICAL" }, { "fieldName": "F6", "fieldType": "TEXT" }, { "fieldName": "F7", "fieldType": "WEIGHTED_INT_SEQUENCE" }, { "fieldName": "F8", "fieldType": "WEIGHTED_STRING_SEQUENCE" } ], "excludedVariableNames": [ "F6" ] }
        public var dataSchema: Swift.String?
        /// Describes the schema location for an Amazon Redshift DataSource.
        public var dataSchemaUri: Swift.String?
        /// Describes AWS Identity and Access Management (IAM) credentials that are used connect to the Amazon Redshift database.
        /// This member is required.
        public var databaseCredentials: MachineLearningClientTypes.RedshiftDatabaseCredentials?
        /// Describes the DatabaseName and ClusterIdentifier for an Amazon Redshift DataSource.
        /// This member is required.
        public var databaseInformation: MachineLearningClientTypes.RedshiftDatabase?
        /// Describes an Amazon S3 location to store the result set of the SelectSqlQuery query.
        /// This member is required.
        public var s3StagingLocation: Swift.String?
        /// Describes the SQL Query to execute on an Amazon Redshift database for an Amazon Redshift DataSource.
        /// This member is required.
        public var selectSqlQuery: Swift.String?

        public init (
            dataRearrangement: Swift.String? = nil,
            dataSchema: Swift.String? = nil,
            dataSchemaUri: Swift.String? = nil,
            databaseCredentials: MachineLearningClientTypes.RedshiftDatabaseCredentials? = nil,
            databaseInformation: MachineLearningClientTypes.RedshiftDatabase? = nil,
            s3StagingLocation: Swift.String? = nil,
            selectSqlQuery: Swift.String? = nil
        )
        {
            self.dataRearrangement = dataRearrangement
            self.dataSchema = dataSchema
            self.dataSchemaUri = dataSchemaUri
            self.databaseCredentials = databaseCredentials
            self.databaseInformation = databaseInformation
            self.s3StagingLocation = s3StagingLocation
            self.selectSqlQuery = selectSqlQuery
        }
    }

}

extension MachineLearningClientTypes.RedshiftDatabase: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterIdentifier = "ClusterIdentifier"
        case databaseName = "DatabaseName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterIdentifier = self.clusterIdentifier {
            try encodeContainer.encode(clusterIdentifier, forKey: .clusterIdentifier)
        }
        if let databaseName = self.databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
    }
}

extension MachineLearningClientTypes {
    /// Describes the database details required to connect to an Amazon Redshift database.
    public struct RedshiftDatabase: Swift.Equatable {
        /// The ID of an Amazon Redshift cluster.
        /// This member is required.
        public var clusterIdentifier: Swift.String?
        /// The name of a database hosted on an Amazon Redshift cluster.
        /// This member is required.
        public var databaseName: Swift.String?

        public init (
            clusterIdentifier: Swift.String? = nil,
            databaseName: Swift.String? = nil
        )
        {
            self.clusterIdentifier = clusterIdentifier
            self.databaseName = databaseName
        }
    }

}

extension MachineLearningClientTypes.RedshiftDatabaseCredentials: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case password = "Password"
        case username = "Username"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let password = self.password {
            try encodeContainer.encode(password, forKey: .password)
        }
        if let username = self.username {
            try encodeContainer.encode(username, forKey: .username)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let usernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .username)
        username = usernameDecoded
        let passwordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .password)
        password = passwordDecoded
    }
}

extension MachineLearningClientTypes {
    /// Describes the database credentials for connecting to a database on an Amazon Redshift cluster.
    public struct RedshiftDatabaseCredentials: Swift.Equatable {
        /// A password to be used by Amazon ML to connect to a database on an Amazon Redshift cluster. The password should have sufficient permissions to execute a RedshiftSelectSqlQuery query. The password should be valid for an Amazon Redshift [USER](https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html).
        /// This member is required.
        public var password: Swift.String?
        /// A username to be used by Amazon Machine Learning (Amazon ML)to connect to a database on an Amazon Redshift cluster. The username should have sufficient permissions to execute the RedshiftSelectSqlQuery query. The username should be valid for an Amazon Redshift [USER](https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html).
        /// This member is required.
        public var username: Swift.String?

        public init (
            password: Swift.String? = nil,
            username: Swift.String? = nil
        )
        {
            self.password = password
            self.username = username
        }
    }

}

extension MachineLearningClientTypes.RedshiftMetadata: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case databaseUserName = "DatabaseUserName"
        case redshiftDatabase = "RedshiftDatabase"
        case selectSqlQuery = "SelectSqlQuery"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let databaseUserName = self.databaseUserName {
            try encodeContainer.encode(databaseUserName, forKey: .databaseUserName)
        }
        if let redshiftDatabase = self.redshiftDatabase {
            try encodeContainer.encode(redshiftDatabase, forKey: .redshiftDatabase)
        }
        if let selectSqlQuery = self.selectSqlQuery {
            try encodeContainer.encode(selectSqlQuery, forKey: .selectSqlQuery)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let redshiftDatabaseDecoded = try containerValues.decodeIfPresent(MachineLearningClientTypes.RedshiftDatabase.self, forKey: .redshiftDatabase)
        redshiftDatabase = redshiftDatabaseDecoded
        let databaseUserNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseUserName)
        databaseUserName = databaseUserNameDecoded
        let selectSqlQueryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .selectSqlQuery)
        selectSqlQuery = selectSqlQueryDecoded
    }
}

extension MachineLearningClientTypes {
    /// Describes the DataSource details specific to Amazon Redshift.
    public struct RedshiftMetadata: Swift.Equatable {
        /// A username to be used by Amazon Machine Learning (Amazon ML)to connect to a database on an Amazon Redshift cluster. The username should have sufficient permissions to execute the RedshiftSelectSqlQuery query. The username should be valid for an Amazon Redshift [USER](https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_USER.html).
        public var databaseUserName: Swift.String?
        /// Describes the database details required to connect to an Amazon Redshift database.
        public var redshiftDatabase: MachineLearningClientTypes.RedshiftDatabase?
        /// The SQL query that is specified during [CreateDataSourceFromRedshift]. Returns only if Verbose is true in GetDataSourceInput.
        public var selectSqlQuery: Swift.String?

        public init (
            databaseUserName: Swift.String? = nil,
            redshiftDatabase: MachineLearningClientTypes.RedshiftDatabase? = nil,
            selectSqlQuery: Swift.String? = nil
        )
        {
            self.databaseUserName = databaseUserName
            self.redshiftDatabase = redshiftDatabase
            self.selectSqlQuery = selectSqlQuery
        }
    }

}

extension ResourceNotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = 0
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// A specified resource cannot be located.
public struct ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.Int
    public var message: Swift.String?

    public init (
        code: Swift.Int = 0,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let code: Swift.Int
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .code) ?? 0
        code = codeDecoded
    }
}

extension MachineLearningClientTypes.S3DataSpec: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataLocationS3 = "DataLocationS3"
        case dataRearrangement = "DataRearrangement"
        case dataSchema = "DataSchema"
        case dataSchemaLocationS3 = "DataSchemaLocationS3"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataLocationS3 = self.dataLocationS3 {
            try encodeContainer.encode(dataLocationS3, forKey: .dataLocationS3)
        }
        if let dataRearrangement = self.dataRearrangement {
            try encodeContainer.encode(dataRearrangement, forKey: .dataRearrangement)
        }
        if let dataSchema = self.dataSchema {
            try encodeContainer.encode(dataSchema, forKey: .dataSchema)
        }
        if let dataSchemaLocationS3 = self.dataSchemaLocationS3 {
            try encodeContainer.encode(dataSchemaLocationS3, forKey: .dataSchemaLocationS3)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataLocationS3)
        dataLocationS3 = dataLocationS3Decoded
        let dataRearrangementDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataRearrangement)
        dataRearrangement = dataRearrangementDecoded
        let dataSchemaDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSchema)
        dataSchema = dataSchemaDecoded
        let dataSchemaLocationS3Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSchemaLocationS3)
        dataSchemaLocationS3 = dataSchemaLocationS3Decoded
    }
}

extension MachineLearningClientTypes {
    /// Describes the data specification of a DataSource.
    public struct S3DataSpec: Swift.Equatable {
        /// The location of the data file(s) used by a DataSource. The URI specifies a data file or an Amazon Simple Storage Service (Amazon S3) directory or bucket containing data files.
        /// This member is required.
        public var dataLocationS3: Swift.String?
        /// A JSON string that represents the splitting and rearrangement processing to be applied to a DataSource. If the DataRearrangement parameter is not provided, all of the input data is used to create the Datasource. There are multiple parameters that control what data is used to create a datasource:
        ///
        /// * percentBegin Use percentBegin to indicate the beginning of the range of the data used to create the Datasource. If you do not include percentBegin and percentEnd, Amazon ML includes all of the data when creating the datasource.
        ///
        /// * percentEnd Use percentEnd to indicate the end of the range of the data used to create the Datasource. If you do not include percentBegin and percentEnd, Amazon ML includes all of the data when creating the datasource.
        ///
        /// * complement The complement parameter instructs Amazon ML to use the data that is not included in the range of percentBegin to percentEnd to create a datasource. The complement parameter is useful if you need to create complementary datasources for training and evaluation. To create a complementary datasource, use the same values for percentBegin and percentEnd, along with the complement parameter. For example, the following two datasources do not share any data, and can be used to train and evaluate a model. The first datasource has 25 percent of the data, and the second one has 75 percent of the data. Datasource for evaluation: {"splitting":{"percentBegin":0, "percentEnd":25}} Datasource for training: {"splitting":{"percentBegin":0, "percentEnd":25, "complement":"true"}}
        ///
        /// * strategy To change how Amazon ML splits the data for a datasource, use the strategy parameter. The default value for the strategy parameter is sequential, meaning that Amazon ML takes all of the data records between the percentBegin and percentEnd parameters for the datasource, in the order that the records appear in the input data. The following two DataRearrangement lines are examples of sequentially ordered training and evaluation datasources: Datasource for evaluation: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential"}} Datasource for training: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"sequential", "complement":"true"}} To randomly split the input data into the proportions indicated by the percentBegin and percentEnd parameters, set the strategy parameter to random and provide a string that is used as the seed value for the random data splitting (for example, you can use the S3 path to your data as the random seed string). If you choose the random split strategy, Amazon ML assigns each row of data a pseudo-random number between 0 and 100, and then selects the rows that have an assigned number between percentBegin and percentEnd. Pseudo-random numbers are assigned using both the input seed string value and the byte offset as a seed, so changing the data results in a different split. Any existing ordering is preserved. The random splitting strategy ensures that variables in the training and evaluation data are distributed similarly. It is useful in the cases where the input data may have an implicit sort order, which would otherwise result in training and evaluation datasources containing non-similar data records. The following two DataRearrangement lines are examples of non-sequentially ordered training and evaluation datasources: Datasource for evaluation: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv"}} Datasource for training: {"splitting":{"percentBegin":70, "percentEnd":100, "strategy":"random", "randomSeed"="s3://my_s3_path/bucket/file.csv", "complement":"true"}}
        public var dataRearrangement: Swift.String?
        /// A JSON string that represents the schema for an Amazon S3 DataSource. The DataSchema defines the structure of the observation data in the data file(s) referenced in the DataSource. You must provide either the DataSchema or the DataSchemaLocationS3. Define your DataSchema as a series of key-value pairs. attributes and excludedVariableNames have an array of key-value pairs for their value. Use the following format to define your DataSchema. { "version": "1.0", "recordAnnotationFieldName": "F1", "recordWeightFieldName": "F2", "targetFieldName": "F3", "dataFormat": "CSV", "dataFileContainsHeader": true, "attributes": [ { "fieldName": "F1", "fieldType": "TEXT" }, { "fieldName": "F2", "fieldType": "NUMERIC" }, { "fieldName": "F3", "fieldType": "CATEGORICAL" }, { "fieldName": "F4", "fieldType": "NUMERIC" }, { "fieldName": "F5", "fieldType": "CATEGORICAL" }, { "fieldName": "F6", "fieldType": "TEXT" }, { "fieldName": "F7", "fieldType": "WEIGHTED_INT_SEQUENCE" }, { "fieldName": "F8", "fieldType": "WEIGHTED_STRING_SEQUENCE" } ], "excludedVariableNames": [ "F6" ] }
        public var dataSchema: Swift.String?
        /// Describes the schema location in Amazon S3. You must provide either the DataSchema or the DataSchemaLocationS3.
        public var dataSchemaLocationS3: Swift.String?

        public init (
            dataLocationS3: Swift.String? = nil,
            dataRearrangement: Swift.String? = nil,
            dataSchema: Swift.String? = nil,
            dataSchemaLocationS3: Swift.String? = nil
        )
        {
            self.dataLocationS3 = dataLocationS3
            self.dataRearrangement = dataRearrangement
            self.dataSchema = dataSchema
            self.dataSchemaLocationS3 = dataSchemaLocationS3
        }
    }

}

extension MachineLearningClientTypes {
    /// The sort order specified in a listing condition. Possible values include the following:
    ///
    /// * asc - Present the information in ascending order (from A-Z).
    ///
    /// * dsc - Present the information in descending order (from Z-A).
    public enum SortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case asc
        case dsc
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .asc,
                .dsc,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .asc: return "asc"
            case .dsc: return "dsc"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortOrder(rawValue: rawValue) ?? SortOrder.sdkUnknown(rawValue)
        }
    }
}

extension MachineLearningClientTypes.Tag: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = self.key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = self.value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension MachineLearningClientTypes {
    /// A custom key-value pair associated with an ML object, such as an ML model.
    public struct Tag: Swift.Equatable {
        /// A unique identifier for the tag. Valid characters include Unicode letters, digits, white space, _, ., /, =, +, -, %, and @.
        public var key: Swift.String?
        /// An optional string, typically used to describe or define the tag. Valid characters include Unicode letters, digits, white space, _, ., /, =, +, -, %, and @.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension TagLimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: TagLimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

public struct TagLimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct TagLimitExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension TagLimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension MachineLearningClientTypes {
    public enum TaggableResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case batchPrediction
        case datasource
        case evaluation
        case mlModel
        case sdkUnknown(Swift.String)

        public static var allCases: [TaggableResourceType] {
            return [
                .batchPrediction,
                .datasource,
                .evaluation,
                .mlModel,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .batchPrediction: return "BatchPrediction"
            case .datasource: return "DataSource"
            case .evaluation: return "Evaluation"
            case .mlModel: return "MLModel"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TaggableResourceType(rawValue: rawValue) ?? TaggableResourceType.sdkUnknown(rawValue)
        }
    }
}

extension UpdateBatchPredictionInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionId = "BatchPredictionId"
        case batchPredictionName = "BatchPredictionName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchPredictionId = self.batchPredictionId {
            try encodeContainer.encode(batchPredictionId, forKey: .batchPredictionId)
        }
        if let batchPredictionName = self.batchPredictionName {
            try encodeContainer.encode(batchPredictionName, forKey: .batchPredictionName)
        }
    }
}

extension UpdateBatchPredictionInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateBatchPredictionInput: Swift.Equatable {
    /// The ID assigned to the BatchPrediction during creation.
    /// This member is required.
    public var batchPredictionId: Swift.String?
    /// A new user-supplied name or description of the BatchPrediction.
    /// This member is required.
    public var batchPredictionName: Swift.String?

    public init (
        batchPredictionId: Swift.String? = nil,
        batchPredictionName: Swift.String? = nil
    )
    {
        self.batchPredictionId = batchPredictionId
        self.batchPredictionName = batchPredictionName
    }
}

struct UpdateBatchPredictionInputBody: Swift.Equatable {
    let batchPredictionId: Swift.String?
    let batchPredictionName: Swift.String?
}

extension UpdateBatchPredictionInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionId = "BatchPredictionId"
        case batchPredictionName = "BatchPredictionName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPredictionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionId)
        batchPredictionId = batchPredictionIdDecoded
        let batchPredictionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionName)
        batchPredictionName = batchPredictionNameDecoded
    }
}

extension UpdateBatchPredictionOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateBatchPredictionOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateBatchPredictionOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateBatchPredictionOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateBatchPredictionOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.batchPredictionId = output.batchPredictionId
        } else {
            self.batchPredictionId = nil
        }
    }
}

/// Represents the output of an UpdateBatchPrediction operation. You can see the updated content by using the GetBatchPrediction operation.
public struct UpdateBatchPredictionOutputResponse: Swift.Equatable {
    /// The ID assigned to the BatchPrediction during creation. This value should be identical to the value of the BatchPredictionId in the request.
    public var batchPredictionId: Swift.String?

    public init (
        batchPredictionId: Swift.String? = nil
    )
    {
        self.batchPredictionId = batchPredictionId
    }
}

struct UpdateBatchPredictionOutputResponseBody: Swift.Equatable {
    let batchPredictionId: Swift.String?
}

extension UpdateBatchPredictionOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case batchPredictionId = "BatchPredictionId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let batchPredictionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .batchPredictionId)
        batchPredictionId = batchPredictionIdDecoded
    }
}

extension UpdateDataSourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case dataSourceName = "DataSourceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataSourceId = self.dataSourceId {
            try encodeContainer.encode(dataSourceId, forKey: .dataSourceId)
        }
        if let dataSourceName = self.dataSourceName {
            try encodeContainer.encode(dataSourceName, forKey: .dataSourceName)
        }
    }
}

extension UpdateDataSourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateDataSourceInput: Swift.Equatable {
    /// The ID assigned to the DataSource during creation.
    /// This member is required.
    public var dataSourceId: Swift.String?
    /// A new user-supplied name or description of the DataSource that will replace the current description.
    /// This member is required.
    public var dataSourceName: Swift.String?

    public init (
        dataSourceId: Swift.String? = nil,
        dataSourceName: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
        self.dataSourceName = dataSourceName
    }
}

struct UpdateDataSourceInputBody: Swift.Equatable {
    let dataSourceId: Swift.String?
    let dataSourceName: Swift.String?
}

extension UpdateDataSourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
        case dataSourceName = "DataSourceName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
        let dataSourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceName)
        dataSourceName = dataSourceNameDecoded
    }
}

extension UpdateDataSourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateDataSourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateDataSourceOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateDataSourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateDataSourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.dataSourceId = output.dataSourceId
        } else {
            self.dataSourceId = nil
        }
    }
}

/// Represents the output of an UpdateDataSource operation. You can see the updated content by using the GetBatchPrediction operation.
public struct UpdateDataSourceOutputResponse: Swift.Equatable {
    /// The ID assigned to the DataSource during creation. This value should be identical to the value of the DataSourceID in the request.
    public var dataSourceId: Swift.String?

    public init (
        dataSourceId: Swift.String? = nil
    )
    {
        self.dataSourceId = dataSourceId
    }
}

struct UpdateDataSourceOutputResponseBody: Swift.Equatable {
    let dataSourceId: Swift.String?
}

extension UpdateDataSourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataSourceId = "DataSourceId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dataSourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataSourceId)
        dataSourceId = dataSourceIdDecoded
    }
}

extension UpdateEvaluationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationId = "EvaluationId"
        case evaluationName = "EvaluationName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let evaluationId = self.evaluationId {
            try encodeContainer.encode(evaluationId, forKey: .evaluationId)
        }
        if let evaluationName = self.evaluationName {
            try encodeContainer.encode(evaluationName, forKey: .evaluationName)
        }
    }
}

extension UpdateEvaluationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateEvaluationInput: Swift.Equatable {
    /// The ID assigned to the Evaluation during creation.
    /// This member is required.
    public var evaluationId: Swift.String?
    /// A new user-supplied name or description of the Evaluation that will replace the current content.
    /// This member is required.
    public var evaluationName: Swift.String?

    public init (
        evaluationId: Swift.String? = nil,
        evaluationName: Swift.String? = nil
    )
    {
        self.evaluationId = evaluationId
        self.evaluationName = evaluationName
    }
}

struct UpdateEvaluationInputBody: Swift.Equatable {
    let evaluationId: Swift.String?
    let evaluationName: Swift.String?
}

extension UpdateEvaluationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationId = "EvaluationId"
        case evaluationName = "EvaluationName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationId)
        evaluationId = evaluationIdDecoded
        let evaluationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationName)
        evaluationName = evaluationNameDecoded
    }
}

extension UpdateEvaluationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateEvaluationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateEvaluationOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateEvaluationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateEvaluationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.evaluationId = output.evaluationId
        } else {
            self.evaluationId = nil
        }
    }
}

/// Represents the output of an UpdateEvaluation operation. You can see the updated content by using the GetEvaluation operation.
public struct UpdateEvaluationOutputResponse: Swift.Equatable {
    /// The ID assigned to the Evaluation during creation. This value should be identical to the value of the Evaluation in the request.
    public var evaluationId: Swift.String?

    public init (
        evaluationId: Swift.String? = nil
    )
    {
        self.evaluationId = evaluationId
    }
}

struct UpdateEvaluationOutputResponseBody: Swift.Equatable {
    let evaluationId: Swift.String?
}

extension UpdateEvaluationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case evaluationId = "EvaluationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let evaluationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .evaluationId)
        evaluationId = evaluationIdDecoded
    }
}

extension UpdateMLModelInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlModelId = "MLModelId"
        case mlModelName = "MLModelName"
        case scoreThreshold = "ScoreThreshold"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mlModelId = self.mlModelId {
            try encodeContainer.encode(mlModelId, forKey: .mlModelId)
        }
        if let mlModelName = self.mlModelName {
            try encodeContainer.encode(mlModelName, forKey: .mlModelName)
        }
        if let scoreThreshold = self.scoreThreshold {
            try encodeContainer.encode(scoreThreshold, forKey: .scoreThreshold)
        }
    }
}

extension UpdateMLModelInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/"
    }
}

public struct UpdateMLModelInput: Swift.Equatable {
    /// The ID assigned to the MLModel during creation.
    /// This member is required.
    public var mlModelId: Swift.String?
    /// A user-supplied name or description of the MLModel.
    public var mlModelName: Swift.String?
    /// The ScoreThreshold used in binary classification MLModel that marks the boundary between a positive prediction and a negative prediction. Output values greater than or equal to the ScoreThreshold receive a positive result from the MLModel, such as true. Output values less than the ScoreThreshold receive a negative response from the MLModel, such as false.
    public var scoreThreshold: Swift.Float?

    public init (
        mlModelId: Swift.String? = nil,
        mlModelName: Swift.String? = nil,
        scoreThreshold: Swift.Float? = nil
    )
    {
        self.mlModelId = mlModelId
        self.mlModelName = mlModelName
        self.scoreThreshold = scoreThreshold
    }
}

struct UpdateMLModelInputBody: Swift.Equatable {
    let mlModelId: Swift.String?
    let mlModelName: Swift.String?
    let scoreThreshold: Swift.Float?
}

extension UpdateMLModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlModelId = "MLModelId"
        case mlModelName = "MLModelName"
        case scoreThreshold = "ScoreThreshold"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
        let mlModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelName)
        mlModelName = mlModelNameDecoded
        let scoreThresholdDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .scoreThreshold)
        scoreThreshold = scoreThresholdDecoded
    }
}

extension UpdateMLModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateMLModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID, errorType: errorType))
        }
    }
}

public enum UpdateMLModelOutputError: Swift.Error, Swift.Equatable {
    case internalServerException(InternalServerException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateMLModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().getData()
            let output: UpdateMLModelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.mlModelId = output.mlModelId
        } else {
            self.mlModelId = nil
        }
    }
}

/// Represents the output of an UpdateMLModel operation. You can see the updated content by using the GetMLModel operation.
public struct UpdateMLModelOutputResponse: Swift.Equatable {
    /// The ID assigned to the MLModel during creation. This value should be identical to the value of the MLModelID in the request.
    public var mlModelId: Swift.String?

    public init (
        mlModelId: Swift.String? = nil
    )
    {
        self.mlModelId = mlModelId
    }
}

struct UpdateMLModelOutputResponseBody: Swift.Equatable {
    let mlModelId: Swift.String?
}

extension UpdateMLModelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mlModelId = "MLModelId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mlModelIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mlModelId)
        mlModelId = mlModelIdDecoded
    }
}

public struct PredictInputEndpointURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "PredictInputEndpointURLHostMiddleware"

    public init() { }

    public func handle<H>(context: Context,
                  input: PredictInput,
                  next: H) async throws -> ClientRuntime.OperationOutput<PredictOutputResponse>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        if let endpoint = input.predictEndpoint, let url = ClientRuntime.URL(string: endpoint), let host = url.host {
            var copiedContext = context
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
            return try await next.handle(context: copiedContext, input: input)
        }
        return try await next.handle(context: context, input: input)
    }

    public typealias MInput = PredictInput
    public typealias MOutput = ClientRuntime.OperationOutput<PredictOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
}
