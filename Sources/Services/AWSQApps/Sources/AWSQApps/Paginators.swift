//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

import protocol ClientRuntime.PaginateToken
import struct ClientRuntime.PaginatorSequence

extension QAppsClient {
    /// Paginate over `[ListLibraryItemsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListLibraryItemsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListLibraryItemsOutput`
    public func listLibraryItemsPaginated(input: ListLibraryItemsInput) -> ClientRuntime.PaginatorSequence<ListLibraryItemsInput, ListLibraryItemsOutput> {
        return ClientRuntime.PaginatorSequence<ListLibraryItemsInput, ListLibraryItemsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listLibraryItems(input:))
    }
}

extension ListLibraryItemsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListLibraryItemsInput {
        return ListLibraryItemsInput(
            categoryId: self.categoryId,
            instanceId: self.instanceId,
            limit: self.limit,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListLibraryItemsInput, OperationStackOutput == ListLibraryItemsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listLibraryItemsPaginated`
    /// to access the nested member `[QAppsClientTypes.LibraryItemMember]`
    /// - Returns: `[QAppsClientTypes.LibraryItemMember]`
    public func libraryItems() async throws -> [QAppsClientTypes.LibraryItemMember] {
        return try await self.asyncCompactMap { item in item.libraryItems }
    }
}
extension QAppsClient {
    /// Paginate over `[ListQAppsOutput]` results.
    ///
    /// When this operation is called, an `AsyncSequence` is created. AsyncSequences are lazy so no service
    /// calls are made until the sequence is iterated over. This also means there is no guarantee that the request is valid
    /// until then. If there are errors in your request, you will see the failures only after you start iterating.
    /// - Parameters:
    ///     - input: A `[ListQAppsInput]` to start pagination
    /// - Returns: An `AsyncSequence` that can iterate over `ListQAppsOutput`
    public func listQAppsPaginated(input: ListQAppsInput) -> ClientRuntime.PaginatorSequence<ListQAppsInput, ListQAppsOutput> {
        return ClientRuntime.PaginatorSequence<ListQAppsInput, ListQAppsOutput>(input: input, inputKey: \.nextToken, outputKey: \.nextToken, paginationFunction: self.listQApps(input:))
    }
}

extension ListQAppsInput: ClientRuntime.PaginateToken {
    public func usingPaginationToken(_ token: Swift.String) -> ListQAppsInput {
        return ListQAppsInput(
            instanceId: self.instanceId,
            limit: self.limit,
            nextToken: token
        )}
}

extension PaginatorSequence where OperationStackInput == ListQAppsInput, OperationStackOutput == ListQAppsOutput {
    /// This paginator transforms the `AsyncSequence` returned by `listQAppsPaginated`
    /// to access the nested member `[QAppsClientTypes.UserAppItem]`
    /// - Returns: `[QAppsClientTypes.UserAppItem]`
    public func apps() async throws -> [QAppsClientTypes.UserAppItem] {
        return try await self.asyncCompactMap { item in item.apps }
    }
}
