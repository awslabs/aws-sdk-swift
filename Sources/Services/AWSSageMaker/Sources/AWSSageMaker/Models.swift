//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
@_spi(SmithyReadWrite) import func SmithyReadWrite.listReadingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.mapReadingClosure
@_spi(SmithyReadWrite) import func SmithyReadWrite.mapWritingClosure
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox
@_spi(SmithyTimestamps) import struct SmithyTimestamps.TimestampFormatter

public struct CreateDeviceFleetOutput {

    public init() { }
}

public struct CreateEdgeDeploymentStageOutput {

    public init() { }
}

public struct CreateEdgePackagingJobOutput {

    public init() { }
}

public struct DeleteAlgorithmOutput {

    public init() { }
}

public struct DeleteAppImageConfigOutput {

    public init() { }
}

public struct DeleteAppOutput {

    public init() { }
}

public struct DeleteCodeRepositoryOutput {

    public init() { }
}

public struct DeleteCompilationJobOutput {

    public init() { }
}

public struct DeleteDataQualityJobDefinitionOutput {

    public init() { }
}

public struct DeleteDeviceFleetOutput {

    public init() { }
}

public struct DeleteDomainOutput {

    public init() { }
}

public struct DeleteEdgeDeploymentPlanOutput {

    public init() { }
}

public struct DeleteEdgeDeploymentStageOutput {

    public init() { }
}

public struct DeleteEndpointConfigOutput {

    public init() { }
}

public struct DeleteEndpointOutput {

    public init() { }
}

public struct DeleteFeatureGroupOutput {

    public init() { }
}

public struct DeleteHubContentOutput {

    public init() { }
}

public struct DeleteHubContentReferenceOutput {

    public init() { }
}

public struct DeleteHubOutput {

    public init() { }
}

public struct DeleteHyperParameterTuningJobOutput {

    public init() { }
}

public struct DeleteInferenceComponentOutput {

    public init() { }
}

public struct DeleteModelBiasJobDefinitionOutput {

    public init() { }
}

public struct DeleteModelCardOutput {

    public init() { }
}

public struct DeleteModelExplainabilityJobDefinitionOutput {

    public init() { }
}

public struct DeleteModelOutput {

    public init() { }
}

public struct DeleteModelPackageGroupOutput {

    public init() { }
}

public struct DeleteModelPackageGroupPolicyOutput {

    public init() { }
}

public struct DeleteModelPackageOutput {

    public init() { }
}

public struct DeleteModelQualityJobDefinitionOutput {

    public init() { }
}

public struct DeleteMonitoringScheduleOutput {

    public init() { }
}

public struct DeleteNotebookInstanceLifecycleConfigOutput {

    public init() { }
}

public struct DeleteNotebookInstanceOutput {

    public init() { }
}

public struct DeleteOptimizationJobOutput {

    public init() { }
}

public struct DeleteProjectOutput {

    public init() { }
}

public struct DeleteSpaceOutput {

    public init() { }
}

public struct DeleteStudioLifecycleConfigOutput {

    public init() { }
}

public struct DeleteUserProfileOutput {

    public init() { }
}

public struct DeregisterDevicesOutput {

    public init() { }
}

public struct RegisterDevicesOutput {

    public init() { }
}

public struct StartEdgeDeploymentStageOutput {

    public init() { }
}

public struct StartMonitoringScheduleOutput {

    public init() { }
}

public struct StartNotebookInstanceOutput {

    public init() { }
}

public struct StopAutoMLJobOutput {

    public init() { }
}

public struct StopCompilationJobOutput {

    public init() { }
}

public struct StopEdgeDeploymentStageOutput {

    public init() { }
}

public struct StopEdgePackagingJobOutput {

    public init() { }
}

public struct StopHyperParameterTuningJobOutput {

    public init() { }
}

public struct StopInferenceRecommendationsJobOutput {

    public init() { }
}

public struct StopLabelingJobOutput {

    public init() { }
}

public struct StopMonitoringScheduleOutput {

    public init() { }
}

public struct StopNotebookInstanceOutput {

    public init() { }
}

public struct StopOptimizationJobOutput {

    public init() { }
}

public struct StopProcessingJobOutput {

    public init() { }
}

public struct StopTrainingJobOutput {

    public init() { }
}

public struct StopTransformJobOutput {

    public init() { }
}

public struct UpdateDeviceFleetOutput {

    public init() { }
}

public struct UpdateDevicesOutput {

    public init() { }
}

public struct UpdateFeatureMetadataOutput {

    public init() { }
}

extension SageMakerClientTypes {
    /// A structure describing the source of an action.
    public struct ActionSource {
        /// The ID of the source.
        public var sourceId: Swift.String?
        /// The type of the source.
        public var sourceType: Swift.String?
        /// The URI of the source.
        /// This member is required.
        public var sourceUri: Swift.String?

        public init(
            sourceId: Swift.String? = nil,
            sourceType: Swift.String? = nil,
            sourceUri: Swift.String? = nil
        )
        {
            self.sourceId = sourceId
            self.sourceType = sourceType
            self.sourceUri = sourceUri
        }
    }

}

extension SageMakerClientTypes {

    public enum ActionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case stopped
        case stopping
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [ActionStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .stopped,
                .stopping,
                .unknown
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .unknown: return "Unknown"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Lists the properties of an action. An action represents an action or activity. Some examples are a workflow step and a model deployment. Generally, an action involves at least one input artifact or output artifact.
    public struct ActionSummary {
        /// The Amazon Resource Name (ARN) of the action.
        public var actionArn: Swift.String?
        /// The name of the action.
        public var actionName: Swift.String?
        /// The type of the action.
        public var actionType: Swift.String?
        /// When the action was created.
        public var creationTime: Foundation.Date?
        /// When the action was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The source of the action.
        public var source: SageMakerClientTypes.ActionSource?
        /// The status of the action.
        public var status: SageMakerClientTypes.ActionStatus?

        public init(
            actionArn: Swift.String? = nil,
            actionName: Swift.String? = nil,
            actionType: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            source: SageMakerClientTypes.ActionSource? = nil,
            status: SageMakerClientTypes.ActionStatus? = nil
        )
        {
            self.actionArn = actionArn
            self.actionName = actionName
            self.actionType = actionType
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
            self.source = source
            self.status = status
        }
    }

}

/// You have exceeded an SageMaker resource limit. For example, you might have too many training jobs created.
public struct ResourceLimitExceeded: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceLimitExceeded" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// Resource being access is not found.
public struct ResourceNotFound: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFound" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SageMakerClientTypes {

    public enum AssociationEdgeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case associatedWith
        case contributedTo
        case derivedFrom
        case produced
        case sameAs
        case sdkUnknown(Swift.String)

        public static var allCases: [AssociationEdgeType] {
            return [
                .associatedWith,
                .contributedTo,
                .derivedFrom,
                .produced,
                .sameAs
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .associatedWith: return "AssociatedWith"
            case .contributedTo: return "ContributedTo"
            case .derivedFrom: return "DerivedFrom"
            case .produced: return "Produced"
            case .sameAs: return "SameAs"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct AddAssociationInput {
    /// The type of association. The following are suggested uses for each type. Amazon SageMaker places no restrictions on their use.
    ///
    /// * ContributedTo - The source contributed to the destination or had a part in enabling the destination. For example, the training data contributed to the training job.
    ///
    /// * AssociatedWith - The source is connected to the destination. For example, an approval workflow is associated with a model deployment.
    ///
    /// * DerivedFrom - The destination is a modification of the source. For example, a digest output of a channel input for a processing job is derived from the original inputs.
    ///
    /// * Produced - The source generated the destination. For example, a training job produced a model artifact.
    public var associationType: SageMakerClientTypes.AssociationEdgeType?
    /// The Amazon Resource Name (ARN) of the destination.
    /// This member is required.
    public var destinationArn: Swift.String?
    /// The ARN of the source.
    /// This member is required.
    public var sourceArn: Swift.String?

    public init(
        associationType: SageMakerClientTypes.AssociationEdgeType? = nil,
        destinationArn: Swift.String? = nil,
        sourceArn: Swift.String? = nil
    )
    {
        self.associationType = associationType
        self.destinationArn = destinationArn
        self.sourceArn = sourceArn
    }
}

public struct AddAssociationOutput {
    /// The Amazon Resource Name (ARN) of the destination.
    public var destinationArn: Swift.String?
    /// The ARN of the source.
    public var sourceArn: Swift.String?

    public init(
        destinationArn: Swift.String? = nil,
        sourceArn: Swift.String? = nil
    )
    {
        self.destinationArn = destinationArn
        self.sourceArn = sourceArn
    }
}

extension SageMakerClientTypes {

    public enum CompressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case gzip
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [CompressionType] {
            return [
                .gzip,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "Gzip"
            case .none: return "None"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum AdditionalS3DataSourceDataType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case s3object
        case s3prefix
        case sdkUnknown(Swift.String)

        public static var allCases: [AdditionalS3DataSourceDataType] {
            return [
                .s3object,
                .s3prefix
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .s3object: return "S3Object"
            case .s3prefix: return "S3Prefix"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A data source used for training or inference that is in addition to the input dataset or model data.
    public struct AdditionalS3DataSource {
        /// The type of compression used for an additional data source used in inference or training. Specify None if your additional data source is not compressed.
        public var compressionType: SageMakerClientTypes.CompressionType?
        /// The data type of the additional data source that you specify for use in inference or training.
        /// This member is required.
        public var s3DataType: SageMakerClientTypes.AdditionalS3DataSourceDataType?
        /// The uniform resource identifier (URI) used to identify an additional data source used in inference or training.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            compressionType: SageMakerClientTypes.CompressionType? = nil,
            s3DataType: SageMakerClientTypes.AdditionalS3DataSourceDataType? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.compressionType = compressionType
            self.s3DataType = s3DataType
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {

    public enum ModelCompressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case gzip
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelCompressionType] {
            return [
                .gzip,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "Gzip"
            case .none: return "None"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Configuration information specifying which hub contents have accessible deployment options.
    public struct InferenceHubAccessConfig {
        /// The ARN of the hub content for which deployment access is allowed.
        /// This member is required.
        public var hubContentArn: Swift.String?

        public init(
            hubContentArn: Swift.String? = nil
        )
        {
            self.hubContentArn = hubContentArn
        }
    }

}

extension SageMakerClientTypes {
    /// The access configuration file to control access to the ML model. You can explicitly accept the model end-user license agreement (EULA) within the ModelAccessConfig.
    ///
    /// * If you are a Jumpstart user, see the [End-user license agreements](https://docs.aws.amazon.com/sagemaker/latest/dg/jumpstart-foundation-models-choose.html#jumpstart-foundation-models-choose-eula) section for more details on accepting the EULA.
    ///
    /// * If you are an AutoML user, see the Optional Parameters section of Create an AutoML job to fine-tune text generation models using the API for details on [How to set the EULA acceptance when fine-tuning a model using the AutoML API](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-create-experiment-finetune-llms.html#autopilot-llms-finetuning-api-optional-params).
    public struct ModelAccessConfig {
        /// Specifies agreement to the model end-user license agreement (EULA). The AcceptEula value must be explicitly defined as True in order to accept the EULA that this model requires. You are responsible for reviewing and complying with any applicable license terms and making sure they are acceptable for your use case before downloading or using a model.
        /// This member is required.
        public var acceptEula: Swift.Bool?

        public init(
            acceptEula: Swift.Bool? = nil
        )
        {
            self.acceptEula = acceptEula
        }
    }

}

extension SageMakerClientTypes {

    public enum S3ModelDataType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case s3object
        case s3prefix
        case sdkUnknown(Swift.String)

        public static var allCases: [S3ModelDataType] {
            return [
                .s3object,
                .s3prefix
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .s3object: return "S3Object"
            case .s3prefix: return "S3Prefix"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies the S3 location of ML model data to deploy.
    public struct S3ModelDataSource {
        /// Specifies how the ML model data is prepared. If you choose Gzip and choose S3Object as the value of S3DataType, S3Uri identifies an object that is a gzip-compressed TAR archive. SageMaker will attempt to decompress and untar the object during model deployment. If you choose None and chooose S3Object as the value of S3DataType, S3Uri identifies an object that represents an uncompressed ML model to deploy. If you choose None and choose S3Prefix as the value of S3DataType, S3Uri identifies a key name prefix, under which all objects represents the uncompressed ML model to deploy. If you choose None, then SageMaker will follow rules below when creating model data files under /opt/ml/model directory for use by your inference code:
        ///
        /// * If you choose S3Object as the value of S3DataType, then SageMaker will split the key of the S3 object referenced by S3Uri by slash (/), and use the last part as the filename of the file holding the content of the S3 object.
        ///
        /// * If you choose S3Prefix as the value of S3DataType, then for each S3 object under the key name pefix referenced by S3Uri, SageMaker will trim its key by the prefix, and use the remainder as the path (relative to /opt/ml/model) of the file holding the content of the S3 object. SageMaker will split the remainder by slash (/), using intermediate parts as directory names and the last part as filename of the file holding the content of the S3 object.
        ///
        /// * Do not use any of the following as file names or directory names:
        ///
        /// * An empty or blank string
        ///
        /// * A string which contains null bytes
        ///
        /// * A string longer than 255 bytes
        ///
        /// * A single dot (.)
        ///
        /// * A double dot (..)
        ///
        ///
        ///
        ///
        /// * Ambiguous file names will result in model deployment failure. For example, if your uncompressed ML model consists of two S3 objects s3://mybucket/model/weights and s3://mybucket/model/weights/part1 and you specify s3://mybucket/model/ as the value of S3Uri and S3Prefix as the value of S3DataType, then it will result in name clash between /opt/ml/model/weights (a regular file) and /opt/ml/model/weights/ (a directory).
        ///
        /// * Do not organize the model artifacts in [S3 console using folders](https://docs.aws.amazon.com/AmazonS3/latest/userguide/using-folders.html). When you create a folder in S3 console, S3 creates a 0-byte object with a key set to the folder name you provide. They key of the 0-byte object ends with a slash (/) which violates SageMaker restrictions on model artifact file names, leading to model deployment failure.
        /// This member is required.
        public var compressionType: SageMakerClientTypes.ModelCompressionType?
        /// Configuration information for hub access.
        public var hubAccessConfig: SageMakerClientTypes.InferenceHubAccessConfig?
        /// The Amazon S3 URI of the manifest file. The manifest file is a CSV file that stores the artifact locations.
        public var manifestS3Uri: Swift.String?
        /// Specifies the access configuration file for the ML model. You can explicitly accept the model end-user license agreement (EULA) within the ModelAccessConfig. You are responsible for reviewing and complying with any applicable license terms and making sure they are acceptable for your use case before downloading or using a model.
        public var modelAccessConfig: SageMakerClientTypes.ModelAccessConfig?
        /// Specifies the type of ML model data to deploy. If you choose S3Prefix, S3Uri identifies a key name prefix. SageMaker uses all objects that match the specified key name prefix as part of the ML model data to deploy. A valid key name prefix identified by S3Uri always ends with a forward slash (/). If you choose S3Object, S3Uri identifies an object that is the ML model data to deploy.
        /// This member is required.
        public var s3DataType: SageMakerClientTypes.S3ModelDataType?
        /// Specifies the S3 path of ML model data to deploy.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            compressionType: SageMakerClientTypes.ModelCompressionType? = nil,
            hubAccessConfig: SageMakerClientTypes.InferenceHubAccessConfig? = nil,
            manifestS3Uri: Swift.String? = nil,
            modelAccessConfig: SageMakerClientTypes.ModelAccessConfig? = nil,
            s3DataType: SageMakerClientTypes.S3ModelDataType? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.compressionType = compressionType
            self.hubAccessConfig = hubAccessConfig
            self.manifestS3Uri = manifestS3Uri
            self.modelAccessConfig = modelAccessConfig
            self.s3DataType = s3DataType
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies the location of ML model data to deploy. If specified, you must specify one and only one of the available data sources.
    public struct ModelDataSource {
        /// Specifies the S3 location of ML model data to deploy.
        public var s3DataSource: SageMakerClientTypes.S3ModelDataSource?

        public init(
            s3DataSource: SageMakerClientTypes.S3ModelDataSource? = nil
        )
        {
            self.s3DataSource = s3DataSource
        }
    }

}

extension SageMakerClientTypes {
    /// Input object for the model.
    public struct ModelInput {
        /// The input configuration object for the model.
        /// This member is required.
        public var dataInputConfig: Swift.String?

        public init(
            dataInputConfig: Swift.String? = nil
        )
        {
            self.dataInputConfig = dataInputConfig
        }
    }

}

extension SageMakerClientTypes {
    /// Describes the Docker container for the model package.
    public struct ModelPackageContainerDefinition {
        /// The additional data source that is used during inference in the Docker container for your model package.
        public var additionalS3DataSource: SageMakerClientTypes.AdditionalS3DataSource?
        /// The DNS host name for the Docker container.
        public var containerHostname: Swift.String?
        /// The environment variables to set in the Docker container. Each key and value in the Environment string to string map can have length of up to 1024. We support up to 16 entries in the map.
        public var environment: [Swift.String: Swift.String]?
        /// The machine learning framework of the model package container image.
        public var framework: Swift.String?
        /// The framework version of the Model Package Container Image.
        public var frameworkVersion: Swift.String?
        /// The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored. If you are using your own custom algorithm instead of an algorithm provided by SageMaker, the inference code must meet SageMaker requirements. SageMaker supports both registry/repository[:tag] and registry/repository[@digest] image path formats. For more information, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html).
        /// This member is required.
        public var image: Swift.String?
        /// An MD5 hash of the training algorithm that identifies the Docker image used for training.
        public var imageDigest: Swift.String?
        /// Specifies the location of ML model data to deploy during endpoint creation.
        public var modelDataSource: SageMakerClientTypes.ModelDataSource?
        /// The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix). The model artifacts must be in an S3 bucket that is in the same region as the model package.
        public var modelDataUrl: Swift.String?
        /// A structure with Model Input details.
        public var modelInput: SageMakerClientTypes.ModelInput?
        /// The name of a pre-trained machine learning benchmarked by Amazon SageMaker Inference Recommender model that matches your model. You can find a list of benchmarked models by calling ListModelMetadata.
        public var nearestModelName: Swift.String?
        /// The Amazon Web Services Marketplace product ID of the model package.
        public var productId: Swift.String?

        public init(
            additionalS3DataSource: SageMakerClientTypes.AdditionalS3DataSource? = nil,
            containerHostname: Swift.String? = nil,
            environment: [Swift.String: Swift.String]? = nil,
            framework: Swift.String? = nil,
            frameworkVersion: Swift.String? = nil,
            image: Swift.String? = nil,
            imageDigest: Swift.String? = nil,
            modelDataSource: SageMakerClientTypes.ModelDataSource? = nil,
            modelDataUrl: Swift.String? = nil,
            modelInput: SageMakerClientTypes.ModelInput? = nil,
            nearestModelName: Swift.String? = nil,
            productId: Swift.String? = nil
        )
        {
            self.additionalS3DataSource = additionalS3DataSource
            self.containerHostname = containerHostname
            self.environment = environment
            self.framework = framework
            self.frameworkVersion = frameworkVersion
            self.image = image
            self.imageDigest = imageDigest
            self.modelDataSource = modelDataSource
            self.modelDataUrl = modelDataUrl
            self.modelInput = modelInput
            self.nearestModelName = nearestModelName
            self.productId = productId
        }
    }

}

extension SageMakerClientTypes {

    public enum ProductionVariantInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mlC42xlarge
        case mlC44xlarge
        case mlC48xlarge
        case mlC4Large
        case mlC4Xlarge
        case mlC5d18xlarge
        case mlC5d2xlarge
        case mlC5d4xlarge
        case mlC5d9xlarge
        case mlC5dLarge
        case mlC5dXlarge
        case mlC518xlarge
        case mlC52xlarge
        case mlC54xlarge
        case mlC59xlarge
        case mlC5Large
        case mlC5Xlarge
        case mlC6gd12xlarge
        case mlC6gd16xlarge
        case mlC6gd2xlarge
        case mlC6gd4xlarge
        case mlC6gd8xlarge
        case mlC6gdLarge
        case mlC6gdXlarge
        case mlC6gn12xlarge
        case mlC6gn16xlarge
        case mlC6gn2xlarge
        case mlC6gn4xlarge
        case mlC6gn8xlarge
        case mlC6gnLarge
        case mlC6gnXlarge
        case mlC6g12xlarge
        case mlC6g16xlarge
        case mlC6g2xlarge
        case mlC6g4xlarge
        case mlC6g8xlarge
        case mlC6gLarge
        case mlC6gXlarge
        case mlC6i12xlarge
        case mlC6i16xlarge
        case mlC6i24xlarge
        case mlC6i2xlarge
        case mlC6i32xlarge
        case mlC6i4xlarge
        case mlC6i8xlarge
        case mlC6iLarge
        case mlC6iXlarge
        case mlC7g12xlarge
        case mlC7g16xlarge
        case mlC7g2xlarge
        case mlC7g4xlarge
        case mlC7g8xlarge
        case mlC7gLarge
        case mlC7gXlarge
        case mlC7i12xlarge
        case mlC7i16xlarge
        case mlC7i24xlarge
        case mlC7i2xlarge
        case mlC7i48xlarge
        case mlC7i4xlarge
        case mlC7i8xlarge
        case mlC7iLarge
        case mlC7iXlarge
        case mlDl124xlarge
        case mlG4dn12xlarge
        case mlG4dn16xlarge
        case mlG4dn2xlarge
        case mlG4dn4xlarge
        case mlG4dn8xlarge
        case mlG4dnXlarge
        case mlG512xlarge
        case mlG516xlarge
        case mlG524xlarge
        case mlG52xlarge
        case mlG548xlarge
        case mlG54xlarge
        case mlG58xlarge
        case mlG5Xlarge
        case mlG612xlarge
        case mlG616xlarge
        case mlG624xlarge
        case mlG62xlarge
        case mlG648xlarge
        case mlG64xlarge
        case mlG68xlarge
        case mlG6Xlarge
        case mlInf124xlarge
        case mlInf12xlarge
        case mlInf16xlarge
        case mlInf1Xlarge
        case mlInf224xlarge
        case mlInf248xlarge
        case mlInf28xlarge
        case mlInf2Xlarge
        case mlM410xlarge
        case mlM416xlarge
        case mlM42xlarge
        case mlM44xlarge
        case mlM4Xlarge
        case mlM5d12xlarge
        case mlM5d24xlarge
        case mlM5d2xlarge
        case mlM5d4xlarge
        case mlM5dLarge
        case mlM5dXlarge
        case mlM512xlarge
        case mlM524xlarge
        case mlM52xlarge
        case mlM54xlarge
        case mlM5Large
        case mlM5Xlarge
        case mlM6gd12xlarge
        case mlM6gd16xlarge
        case mlM6gd2xlarge
        case mlM6gd4xlarge
        case mlM6gd8xlarge
        case mlM6gdLarge
        case mlM6gdXlarge
        case mlM6g12xlarge
        case mlM6g16xlarge
        case mlM6g2xlarge
        case mlM6g4xlarge
        case mlM6g8xlarge
        case mlM6gLarge
        case mlM6gXlarge
        case mlM7i12xlarge
        case mlM7i16xlarge
        case mlM7i24xlarge
        case mlM7i2xlarge
        case mlM7i48xlarge
        case mlM7i4xlarge
        case mlM7i8xlarge
        case mlM7iLarge
        case mlM7iXlarge
        case mlP216xlarge
        case mlP28xlarge
        case mlP2Xlarge
        case mlP316xlarge
        case mlP32xlarge
        case mlP38xlarge
        case mlP4de24xlarge
        case mlP4d24xlarge
        case mlP548xlarge
        case mlR5d12xlarge
        case mlR5d24xlarge
        case mlR5d2xlarge
        case mlR5d4xlarge
        case mlR5dLarge
        case mlR5dXlarge
        case mlR512xlarge
        case mlR524xlarge
        case mlR52xlarge
        case mlR54xlarge
        case mlR5Large
        case mlR5Xlarge
        case mlR6gd12xlarge
        case mlR6gd16xlarge
        case mlR6gd2xlarge
        case mlR6gd4xlarge
        case mlR6gd8xlarge
        case mlR6gdLarge
        case mlR6gdXlarge
        case mlR6g12xlarge
        case mlR6g16xlarge
        case mlR6g2xlarge
        case mlR6g4xlarge
        case mlR6g8xlarge
        case mlR6gLarge
        case mlR6gXlarge
        case mlR7i12xlarge
        case mlR7i16xlarge
        case mlR7i24xlarge
        case mlR7i2xlarge
        case mlR7i48xlarge
        case mlR7i4xlarge
        case mlR7i8xlarge
        case mlR7iLarge
        case mlR7iXlarge
        case mlT22xlarge
        case mlT2Large
        case mlT2Medium
        case mlT2Xlarge
        case mlTrn1n32xlarge
        case mlTrn12xlarge
        case mlTrn132xlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [ProductionVariantInstanceType] {
            return [
                .mlC42xlarge,
                .mlC44xlarge,
                .mlC48xlarge,
                .mlC4Large,
                .mlC4Xlarge,
                .mlC5d18xlarge,
                .mlC5d2xlarge,
                .mlC5d4xlarge,
                .mlC5d9xlarge,
                .mlC5dLarge,
                .mlC5dXlarge,
                .mlC518xlarge,
                .mlC52xlarge,
                .mlC54xlarge,
                .mlC59xlarge,
                .mlC5Large,
                .mlC5Xlarge,
                .mlC6gd12xlarge,
                .mlC6gd16xlarge,
                .mlC6gd2xlarge,
                .mlC6gd4xlarge,
                .mlC6gd8xlarge,
                .mlC6gdLarge,
                .mlC6gdXlarge,
                .mlC6gn12xlarge,
                .mlC6gn16xlarge,
                .mlC6gn2xlarge,
                .mlC6gn4xlarge,
                .mlC6gn8xlarge,
                .mlC6gnLarge,
                .mlC6gnXlarge,
                .mlC6g12xlarge,
                .mlC6g16xlarge,
                .mlC6g2xlarge,
                .mlC6g4xlarge,
                .mlC6g8xlarge,
                .mlC6gLarge,
                .mlC6gXlarge,
                .mlC6i12xlarge,
                .mlC6i16xlarge,
                .mlC6i24xlarge,
                .mlC6i2xlarge,
                .mlC6i32xlarge,
                .mlC6i4xlarge,
                .mlC6i8xlarge,
                .mlC6iLarge,
                .mlC6iXlarge,
                .mlC7g12xlarge,
                .mlC7g16xlarge,
                .mlC7g2xlarge,
                .mlC7g4xlarge,
                .mlC7g8xlarge,
                .mlC7gLarge,
                .mlC7gXlarge,
                .mlC7i12xlarge,
                .mlC7i16xlarge,
                .mlC7i24xlarge,
                .mlC7i2xlarge,
                .mlC7i48xlarge,
                .mlC7i4xlarge,
                .mlC7i8xlarge,
                .mlC7iLarge,
                .mlC7iXlarge,
                .mlDl124xlarge,
                .mlG4dn12xlarge,
                .mlG4dn16xlarge,
                .mlG4dn2xlarge,
                .mlG4dn4xlarge,
                .mlG4dn8xlarge,
                .mlG4dnXlarge,
                .mlG512xlarge,
                .mlG516xlarge,
                .mlG524xlarge,
                .mlG52xlarge,
                .mlG548xlarge,
                .mlG54xlarge,
                .mlG58xlarge,
                .mlG5Xlarge,
                .mlG612xlarge,
                .mlG616xlarge,
                .mlG624xlarge,
                .mlG62xlarge,
                .mlG648xlarge,
                .mlG64xlarge,
                .mlG68xlarge,
                .mlG6Xlarge,
                .mlInf124xlarge,
                .mlInf12xlarge,
                .mlInf16xlarge,
                .mlInf1Xlarge,
                .mlInf224xlarge,
                .mlInf248xlarge,
                .mlInf28xlarge,
                .mlInf2Xlarge,
                .mlM410xlarge,
                .mlM416xlarge,
                .mlM42xlarge,
                .mlM44xlarge,
                .mlM4Xlarge,
                .mlM5d12xlarge,
                .mlM5d24xlarge,
                .mlM5d2xlarge,
                .mlM5d4xlarge,
                .mlM5dLarge,
                .mlM5dXlarge,
                .mlM512xlarge,
                .mlM524xlarge,
                .mlM52xlarge,
                .mlM54xlarge,
                .mlM5Large,
                .mlM5Xlarge,
                .mlM6gd12xlarge,
                .mlM6gd16xlarge,
                .mlM6gd2xlarge,
                .mlM6gd4xlarge,
                .mlM6gd8xlarge,
                .mlM6gdLarge,
                .mlM6gdXlarge,
                .mlM6g12xlarge,
                .mlM6g16xlarge,
                .mlM6g2xlarge,
                .mlM6g4xlarge,
                .mlM6g8xlarge,
                .mlM6gLarge,
                .mlM6gXlarge,
                .mlM7i12xlarge,
                .mlM7i16xlarge,
                .mlM7i24xlarge,
                .mlM7i2xlarge,
                .mlM7i48xlarge,
                .mlM7i4xlarge,
                .mlM7i8xlarge,
                .mlM7iLarge,
                .mlM7iXlarge,
                .mlP216xlarge,
                .mlP28xlarge,
                .mlP2Xlarge,
                .mlP316xlarge,
                .mlP32xlarge,
                .mlP38xlarge,
                .mlP4de24xlarge,
                .mlP4d24xlarge,
                .mlP548xlarge,
                .mlR5d12xlarge,
                .mlR5d24xlarge,
                .mlR5d2xlarge,
                .mlR5d4xlarge,
                .mlR5dLarge,
                .mlR5dXlarge,
                .mlR512xlarge,
                .mlR524xlarge,
                .mlR52xlarge,
                .mlR54xlarge,
                .mlR5Large,
                .mlR5Xlarge,
                .mlR6gd12xlarge,
                .mlR6gd16xlarge,
                .mlR6gd2xlarge,
                .mlR6gd4xlarge,
                .mlR6gd8xlarge,
                .mlR6gdLarge,
                .mlR6gdXlarge,
                .mlR6g12xlarge,
                .mlR6g16xlarge,
                .mlR6g2xlarge,
                .mlR6g4xlarge,
                .mlR6g8xlarge,
                .mlR6gLarge,
                .mlR6gXlarge,
                .mlR7i12xlarge,
                .mlR7i16xlarge,
                .mlR7i24xlarge,
                .mlR7i2xlarge,
                .mlR7i48xlarge,
                .mlR7i4xlarge,
                .mlR7i8xlarge,
                .mlR7iLarge,
                .mlR7iXlarge,
                .mlT22xlarge,
                .mlT2Large,
                .mlT2Medium,
                .mlT2Xlarge,
                .mlTrn1n32xlarge,
                .mlTrn12xlarge,
                .mlTrn132xlarge
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mlC42xlarge: return "ml.c4.2xlarge"
            case .mlC44xlarge: return "ml.c4.4xlarge"
            case .mlC48xlarge: return "ml.c4.8xlarge"
            case .mlC4Large: return "ml.c4.large"
            case .mlC4Xlarge: return "ml.c4.xlarge"
            case .mlC5d18xlarge: return "ml.c5d.18xlarge"
            case .mlC5d2xlarge: return "ml.c5d.2xlarge"
            case .mlC5d4xlarge: return "ml.c5d.4xlarge"
            case .mlC5d9xlarge: return "ml.c5d.9xlarge"
            case .mlC5dLarge: return "ml.c5d.large"
            case .mlC5dXlarge: return "ml.c5d.xlarge"
            case .mlC518xlarge: return "ml.c5.18xlarge"
            case .mlC52xlarge: return "ml.c5.2xlarge"
            case .mlC54xlarge: return "ml.c5.4xlarge"
            case .mlC59xlarge: return "ml.c5.9xlarge"
            case .mlC5Large: return "ml.c5.large"
            case .mlC5Xlarge: return "ml.c5.xlarge"
            case .mlC6gd12xlarge: return "ml.c6gd.12xlarge"
            case .mlC6gd16xlarge: return "ml.c6gd.16xlarge"
            case .mlC6gd2xlarge: return "ml.c6gd.2xlarge"
            case .mlC6gd4xlarge: return "ml.c6gd.4xlarge"
            case .mlC6gd8xlarge: return "ml.c6gd.8xlarge"
            case .mlC6gdLarge: return "ml.c6gd.large"
            case .mlC6gdXlarge: return "ml.c6gd.xlarge"
            case .mlC6gn12xlarge: return "ml.c6gn.12xlarge"
            case .mlC6gn16xlarge: return "ml.c6gn.16xlarge"
            case .mlC6gn2xlarge: return "ml.c6gn.2xlarge"
            case .mlC6gn4xlarge: return "ml.c6gn.4xlarge"
            case .mlC6gn8xlarge: return "ml.c6gn.8xlarge"
            case .mlC6gnLarge: return "ml.c6gn.large"
            case .mlC6gnXlarge: return "ml.c6gn.xlarge"
            case .mlC6g12xlarge: return "ml.c6g.12xlarge"
            case .mlC6g16xlarge: return "ml.c6g.16xlarge"
            case .mlC6g2xlarge: return "ml.c6g.2xlarge"
            case .mlC6g4xlarge: return "ml.c6g.4xlarge"
            case .mlC6g8xlarge: return "ml.c6g.8xlarge"
            case .mlC6gLarge: return "ml.c6g.large"
            case .mlC6gXlarge: return "ml.c6g.xlarge"
            case .mlC6i12xlarge: return "ml.c6i.12xlarge"
            case .mlC6i16xlarge: return "ml.c6i.16xlarge"
            case .mlC6i24xlarge: return "ml.c6i.24xlarge"
            case .mlC6i2xlarge: return "ml.c6i.2xlarge"
            case .mlC6i32xlarge: return "ml.c6i.32xlarge"
            case .mlC6i4xlarge: return "ml.c6i.4xlarge"
            case .mlC6i8xlarge: return "ml.c6i.8xlarge"
            case .mlC6iLarge: return "ml.c6i.large"
            case .mlC6iXlarge: return "ml.c6i.xlarge"
            case .mlC7g12xlarge: return "ml.c7g.12xlarge"
            case .mlC7g16xlarge: return "ml.c7g.16xlarge"
            case .mlC7g2xlarge: return "ml.c7g.2xlarge"
            case .mlC7g4xlarge: return "ml.c7g.4xlarge"
            case .mlC7g8xlarge: return "ml.c7g.8xlarge"
            case .mlC7gLarge: return "ml.c7g.large"
            case .mlC7gXlarge: return "ml.c7g.xlarge"
            case .mlC7i12xlarge: return "ml.c7i.12xlarge"
            case .mlC7i16xlarge: return "ml.c7i.16xlarge"
            case .mlC7i24xlarge: return "ml.c7i.24xlarge"
            case .mlC7i2xlarge: return "ml.c7i.2xlarge"
            case .mlC7i48xlarge: return "ml.c7i.48xlarge"
            case .mlC7i4xlarge: return "ml.c7i.4xlarge"
            case .mlC7i8xlarge: return "ml.c7i.8xlarge"
            case .mlC7iLarge: return "ml.c7i.large"
            case .mlC7iXlarge: return "ml.c7i.xlarge"
            case .mlDl124xlarge: return "ml.dl1.24xlarge"
            case .mlG4dn12xlarge: return "ml.g4dn.12xlarge"
            case .mlG4dn16xlarge: return "ml.g4dn.16xlarge"
            case .mlG4dn2xlarge: return "ml.g4dn.2xlarge"
            case .mlG4dn4xlarge: return "ml.g4dn.4xlarge"
            case .mlG4dn8xlarge: return "ml.g4dn.8xlarge"
            case .mlG4dnXlarge: return "ml.g4dn.xlarge"
            case .mlG512xlarge: return "ml.g5.12xlarge"
            case .mlG516xlarge: return "ml.g5.16xlarge"
            case .mlG524xlarge: return "ml.g5.24xlarge"
            case .mlG52xlarge: return "ml.g5.2xlarge"
            case .mlG548xlarge: return "ml.g5.48xlarge"
            case .mlG54xlarge: return "ml.g5.4xlarge"
            case .mlG58xlarge: return "ml.g5.8xlarge"
            case .mlG5Xlarge: return "ml.g5.xlarge"
            case .mlG612xlarge: return "ml.g6.12xlarge"
            case .mlG616xlarge: return "ml.g6.16xlarge"
            case .mlG624xlarge: return "ml.g6.24xlarge"
            case .mlG62xlarge: return "ml.g6.2xlarge"
            case .mlG648xlarge: return "ml.g6.48xlarge"
            case .mlG64xlarge: return "ml.g6.4xlarge"
            case .mlG68xlarge: return "ml.g6.8xlarge"
            case .mlG6Xlarge: return "ml.g6.xlarge"
            case .mlInf124xlarge: return "ml.inf1.24xlarge"
            case .mlInf12xlarge: return "ml.inf1.2xlarge"
            case .mlInf16xlarge: return "ml.inf1.6xlarge"
            case .mlInf1Xlarge: return "ml.inf1.xlarge"
            case .mlInf224xlarge: return "ml.inf2.24xlarge"
            case .mlInf248xlarge: return "ml.inf2.48xlarge"
            case .mlInf28xlarge: return "ml.inf2.8xlarge"
            case .mlInf2Xlarge: return "ml.inf2.xlarge"
            case .mlM410xlarge: return "ml.m4.10xlarge"
            case .mlM416xlarge: return "ml.m4.16xlarge"
            case .mlM42xlarge: return "ml.m4.2xlarge"
            case .mlM44xlarge: return "ml.m4.4xlarge"
            case .mlM4Xlarge: return "ml.m4.xlarge"
            case .mlM5d12xlarge: return "ml.m5d.12xlarge"
            case .mlM5d24xlarge: return "ml.m5d.24xlarge"
            case .mlM5d2xlarge: return "ml.m5d.2xlarge"
            case .mlM5d4xlarge: return "ml.m5d.4xlarge"
            case .mlM5dLarge: return "ml.m5d.large"
            case .mlM5dXlarge: return "ml.m5d.xlarge"
            case .mlM512xlarge: return "ml.m5.12xlarge"
            case .mlM524xlarge: return "ml.m5.24xlarge"
            case .mlM52xlarge: return "ml.m5.2xlarge"
            case .mlM54xlarge: return "ml.m5.4xlarge"
            case .mlM5Large: return "ml.m5.large"
            case .mlM5Xlarge: return "ml.m5.xlarge"
            case .mlM6gd12xlarge: return "ml.m6gd.12xlarge"
            case .mlM6gd16xlarge: return "ml.m6gd.16xlarge"
            case .mlM6gd2xlarge: return "ml.m6gd.2xlarge"
            case .mlM6gd4xlarge: return "ml.m6gd.4xlarge"
            case .mlM6gd8xlarge: return "ml.m6gd.8xlarge"
            case .mlM6gdLarge: return "ml.m6gd.large"
            case .mlM6gdXlarge: return "ml.m6gd.xlarge"
            case .mlM6g12xlarge: return "ml.m6g.12xlarge"
            case .mlM6g16xlarge: return "ml.m6g.16xlarge"
            case .mlM6g2xlarge: return "ml.m6g.2xlarge"
            case .mlM6g4xlarge: return "ml.m6g.4xlarge"
            case .mlM6g8xlarge: return "ml.m6g.8xlarge"
            case .mlM6gLarge: return "ml.m6g.large"
            case .mlM6gXlarge: return "ml.m6g.xlarge"
            case .mlM7i12xlarge: return "ml.m7i.12xlarge"
            case .mlM7i16xlarge: return "ml.m7i.16xlarge"
            case .mlM7i24xlarge: return "ml.m7i.24xlarge"
            case .mlM7i2xlarge: return "ml.m7i.2xlarge"
            case .mlM7i48xlarge: return "ml.m7i.48xlarge"
            case .mlM7i4xlarge: return "ml.m7i.4xlarge"
            case .mlM7i8xlarge: return "ml.m7i.8xlarge"
            case .mlM7iLarge: return "ml.m7i.large"
            case .mlM7iXlarge: return "ml.m7i.xlarge"
            case .mlP216xlarge: return "ml.p2.16xlarge"
            case .mlP28xlarge: return "ml.p2.8xlarge"
            case .mlP2Xlarge: return "ml.p2.xlarge"
            case .mlP316xlarge: return "ml.p3.16xlarge"
            case .mlP32xlarge: return "ml.p3.2xlarge"
            case .mlP38xlarge: return "ml.p3.8xlarge"
            case .mlP4de24xlarge: return "ml.p4de.24xlarge"
            case .mlP4d24xlarge: return "ml.p4d.24xlarge"
            case .mlP548xlarge: return "ml.p5.48xlarge"
            case .mlR5d12xlarge: return "ml.r5d.12xlarge"
            case .mlR5d24xlarge: return "ml.r5d.24xlarge"
            case .mlR5d2xlarge: return "ml.r5d.2xlarge"
            case .mlR5d4xlarge: return "ml.r5d.4xlarge"
            case .mlR5dLarge: return "ml.r5d.large"
            case .mlR5dXlarge: return "ml.r5d.xlarge"
            case .mlR512xlarge: return "ml.r5.12xlarge"
            case .mlR524xlarge: return "ml.r5.24xlarge"
            case .mlR52xlarge: return "ml.r5.2xlarge"
            case .mlR54xlarge: return "ml.r5.4xlarge"
            case .mlR5Large: return "ml.r5.large"
            case .mlR5Xlarge: return "ml.r5.xlarge"
            case .mlR6gd12xlarge: return "ml.r6gd.12xlarge"
            case .mlR6gd16xlarge: return "ml.r6gd.16xlarge"
            case .mlR6gd2xlarge: return "ml.r6gd.2xlarge"
            case .mlR6gd4xlarge: return "ml.r6gd.4xlarge"
            case .mlR6gd8xlarge: return "ml.r6gd.8xlarge"
            case .mlR6gdLarge: return "ml.r6gd.large"
            case .mlR6gdXlarge: return "ml.r6gd.xlarge"
            case .mlR6g12xlarge: return "ml.r6g.12xlarge"
            case .mlR6g16xlarge: return "ml.r6g.16xlarge"
            case .mlR6g2xlarge: return "ml.r6g.2xlarge"
            case .mlR6g4xlarge: return "ml.r6g.4xlarge"
            case .mlR6g8xlarge: return "ml.r6g.8xlarge"
            case .mlR6gLarge: return "ml.r6g.large"
            case .mlR6gXlarge: return "ml.r6g.xlarge"
            case .mlR7i12xlarge: return "ml.r7i.12xlarge"
            case .mlR7i16xlarge: return "ml.r7i.16xlarge"
            case .mlR7i24xlarge: return "ml.r7i.24xlarge"
            case .mlR7i2xlarge: return "ml.r7i.2xlarge"
            case .mlR7i48xlarge: return "ml.r7i.48xlarge"
            case .mlR7i4xlarge: return "ml.r7i.4xlarge"
            case .mlR7i8xlarge: return "ml.r7i.8xlarge"
            case .mlR7iLarge: return "ml.r7i.large"
            case .mlR7iXlarge: return "ml.r7i.xlarge"
            case .mlT22xlarge: return "ml.t2.2xlarge"
            case .mlT2Large: return "ml.t2.large"
            case .mlT2Medium: return "ml.t2.medium"
            case .mlT2Xlarge: return "ml.t2.xlarge"
            case .mlTrn1n32xlarge: return "ml.trn1n.32xlarge"
            case .mlTrn12xlarge: return "ml.trn1.2xlarge"
            case .mlTrn132xlarge: return "ml.trn1.32xlarge"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum TransformInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mlC42xlarge
        case mlC44xlarge
        case mlC48xlarge
        case mlC4Xlarge
        case mlC518xlarge
        case mlC52xlarge
        case mlC54xlarge
        case mlC59xlarge
        case mlC5Xlarge
        case mlC6i12xlarge
        case mlC6i16xlarge
        case mlC6i24xlarge
        case mlC6i2xlarge
        case mlC6i32xlarge
        case mlC6i4xlarge
        case mlC6i8xlarge
        case mlC6iLarge
        case mlC6iXlarge
        case mlC7i12xlarge
        case mlC7i16xlarge
        case mlC7i24xlarge
        case mlC7i2xlarge
        case mlC7i48xlarge
        case mlC7i4xlarge
        case mlC7i8xlarge
        case mlC7iLarge
        case mlC7iXlarge
        case mlG4dn12xlarge
        case mlG4dn16xlarge
        case mlG4dn2xlarge
        case mlG4dn4xlarge
        case mlG4dn8xlarge
        case mlG4dnXlarge
        case mlG512xlarge
        case mlG516xlarge
        case mlG524xlarge
        case mlG52xlarge
        case mlG548xlarge
        case mlG54xlarge
        case mlG58xlarge
        case mlG5Xlarge
        case mlM410xlarge
        case mlM416xlarge
        case mlM42xlarge
        case mlM44xlarge
        case mlM4Xlarge
        case mlM512xlarge
        case mlM524xlarge
        case mlM52xlarge
        case mlM54xlarge
        case mlM5Large
        case mlM5Xlarge
        case mlM6i12xlarge
        case mlM6i16xlarge
        case mlM6i24xlarge
        case mlM6i2xlarge
        case mlM6i32xlarge
        case mlM6i4xlarge
        case mlM6i8xlarge
        case mlM6iLarge
        case mlM6iXlarge
        case mlM7i12xlarge
        case mlM7i16xlarge
        case mlM7i24xlarge
        case mlM7i2xlarge
        case mlM7i48xlarge
        case mlM7i4xlarge
        case mlM7i8xlarge
        case mlM7iLarge
        case mlM7iXlarge
        case mlP216xlarge
        case mlP28xlarge
        case mlP2Xlarge
        case mlP316xlarge
        case mlP32xlarge
        case mlP38xlarge
        case mlR6i12xlarge
        case mlR6i16xlarge
        case mlR6i24xlarge
        case mlR6i2xlarge
        case mlR6i32xlarge
        case mlR6i4xlarge
        case mlR6i8xlarge
        case mlR6iLarge
        case mlR6iXlarge
        case mlR7i12xlarge
        case mlR7i16xlarge
        case mlR7i24xlarge
        case mlR7i2xlarge
        case mlR7i48xlarge
        case mlR7i4xlarge
        case mlR7i8xlarge
        case mlR7iLarge
        case mlR7iXlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [TransformInstanceType] {
            return [
                .mlC42xlarge,
                .mlC44xlarge,
                .mlC48xlarge,
                .mlC4Xlarge,
                .mlC518xlarge,
                .mlC52xlarge,
                .mlC54xlarge,
                .mlC59xlarge,
                .mlC5Xlarge,
                .mlC6i12xlarge,
                .mlC6i16xlarge,
                .mlC6i24xlarge,
                .mlC6i2xlarge,
                .mlC6i32xlarge,
                .mlC6i4xlarge,
                .mlC6i8xlarge,
                .mlC6iLarge,
                .mlC6iXlarge,
                .mlC7i12xlarge,
                .mlC7i16xlarge,
                .mlC7i24xlarge,
                .mlC7i2xlarge,
                .mlC7i48xlarge,
                .mlC7i4xlarge,
                .mlC7i8xlarge,
                .mlC7iLarge,
                .mlC7iXlarge,
                .mlG4dn12xlarge,
                .mlG4dn16xlarge,
                .mlG4dn2xlarge,
                .mlG4dn4xlarge,
                .mlG4dn8xlarge,
                .mlG4dnXlarge,
                .mlG512xlarge,
                .mlG516xlarge,
                .mlG524xlarge,
                .mlG52xlarge,
                .mlG548xlarge,
                .mlG54xlarge,
                .mlG58xlarge,
                .mlG5Xlarge,
                .mlM410xlarge,
                .mlM416xlarge,
                .mlM42xlarge,
                .mlM44xlarge,
                .mlM4Xlarge,
                .mlM512xlarge,
                .mlM524xlarge,
                .mlM52xlarge,
                .mlM54xlarge,
                .mlM5Large,
                .mlM5Xlarge,
                .mlM6i12xlarge,
                .mlM6i16xlarge,
                .mlM6i24xlarge,
                .mlM6i2xlarge,
                .mlM6i32xlarge,
                .mlM6i4xlarge,
                .mlM6i8xlarge,
                .mlM6iLarge,
                .mlM6iXlarge,
                .mlM7i12xlarge,
                .mlM7i16xlarge,
                .mlM7i24xlarge,
                .mlM7i2xlarge,
                .mlM7i48xlarge,
                .mlM7i4xlarge,
                .mlM7i8xlarge,
                .mlM7iLarge,
                .mlM7iXlarge,
                .mlP216xlarge,
                .mlP28xlarge,
                .mlP2Xlarge,
                .mlP316xlarge,
                .mlP32xlarge,
                .mlP38xlarge,
                .mlR6i12xlarge,
                .mlR6i16xlarge,
                .mlR6i24xlarge,
                .mlR6i2xlarge,
                .mlR6i32xlarge,
                .mlR6i4xlarge,
                .mlR6i8xlarge,
                .mlR6iLarge,
                .mlR6iXlarge,
                .mlR7i12xlarge,
                .mlR7i16xlarge,
                .mlR7i24xlarge,
                .mlR7i2xlarge,
                .mlR7i48xlarge,
                .mlR7i4xlarge,
                .mlR7i8xlarge,
                .mlR7iLarge,
                .mlR7iXlarge
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mlC42xlarge: return "ml.c4.2xlarge"
            case .mlC44xlarge: return "ml.c4.4xlarge"
            case .mlC48xlarge: return "ml.c4.8xlarge"
            case .mlC4Xlarge: return "ml.c4.xlarge"
            case .mlC518xlarge: return "ml.c5.18xlarge"
            case .mlC52xlarge: return "ml.c5.2xlarge"
            case .mlC54xlarge: return "ml.c5.4xlarge"
            case .mlC59xlarge: return "ml.c5.9xlarge"
            case .mlC5Xlarge: return "ml.c5.xlarge"
            case .mlC6i12xlarge: return "ml.c6i.12xlarge"
            case .mlC6i16xlarge: return "ml.c6i.16xlarge"
            case .mlC6i24xlarge: return "ml.c6i.24xlarge"
            case .mlC6i2xlarge: return "ml.c6i.2xlarge"
            case .mlC6i32xlarge: return "ml.c6i.32xlarge"
            case .mlC6i4xlarge: return "ml.c6i.4xlarge"
            case .mlC6i8xlarge: return "ml.c6i.8xlarge"
            case .mlC6iLarge: return "ml.c6i.large"
            case .mlC6iXlarge: return "ml.c6i.xlarge"
            case .mlC7i12xlarge: return "ml.c7i.12xlarge"
            case .mlC7i16xlarge: return "ml.c7i.16xlarge"
            case .mlC7i24xlarge: return "ml.c7i.24xlarge"
            case .mlC7i2xlarge: return "ml.c7i.2xlarge"
            case .mlC7i48xlarge: return "ml.c7i.48xlarge"
            case .mlC7i4xlarge: return "ml.c7i.4xlarge"
            case .mlC7i8xlarge: return "ml.c7i.8xlarge"
            case .mlC7iLarge: return "ml.c7i.large"
            case .mlC7iXlarge: return "ml.c7i.xlarge"
            case .mlG4dn12xlarge: return "ml.g4dn.12xlarge"
            case .mlG4dn16xlarge: return "ml.g4dn.16xlarge"
            case .mlG4dn2xlarge: return "ml.g4dn.2xlarge"
            case .mlG4dn4xlarge: return "ml.g4dn.4xlarge"
            case .mlG4dn8xlarge: return "ml.g4dn.8xlarge"
            case .mlG4dnXlarge: return "ml.g4dn.xlarge"
            case .mlG512xlarge: return "ml.g5.12xlarge"
            case .mlG516xlarge: return "ml.g5.16xlarge"
            case .mlG524xlarge: return "ml.g5.24xlarge"
            case .mlG52xlarge: return "ml.g5.2xlarge"
            case .mlG548xlarge: return "ml.g5.48xlarge"
            case .mlG54xlarge: return "ml.g5.4xlarge"
            case .mlG58xlarge: return "ml.g5.8xlarge"
            case .mlG5Xlarge: return "ml.g5.xlarge"
            case .mlM410xlarge: return "ml.m4.10xlarge"
            case .mlM416xlarge: return "ml.m4.16xlarge"
            case .mlM42xlarge: return "ml.m4.2xlarge"
            case .mlM44xlarge: return "ml.m4.4xlarge"
            case .mlM4Xlarge: return "ml.m4.xlarge"
            case .mlM512xlarge: return "ml.m5.12xlarge"
            case .mlM524xlarge: return "ml.m5.24xlarge"
            case .mlM52xlarge: return "ml.m5.2xlarge"
            case .mlM54xlarge: return "ml.m5.4xlarge"
            case .mlM5Large: return "ml.m5.large"
            case .mlM5Xlarge: return "ml.m5.xlarge"
            case .mlM6i12xlarge: return "ml.m6i.12xlarge"
            case .mlM6i16xlarge: return "ml.m6i.16xlarge"
            case .mlM6i24xlarge: return "ml.m6i.24xlarge"
            case .mlM6i2xlarge: return "ml.m6i.2xlarge"
            case .mlM6i32xlarge: return "ml.m6i.32xlarge"
            case .mlM6i4xlarge: return "ml.m6i.4xlarge"
            case .mlM6i8xlarge: return "ml.m6i.8xlarge"
            case .mlM6iLarge: return "ml.m6i.large"
            case .mlM6iXlarge: return "ml.m6i.xlarge"
            case .mlM7i12xlarge: return "ml.m7i.12xlarge"
            case .mlM7i16xlarge: return "ml.m7i.16xlarge"
            case .mlM7i24xlarge: return "ml.m7i.24xlarge"
            case .mlM7i2xlarge: return "ml.m7i.2xlarge"
            case .mlM7i48xlarge: return "ml.m7i.48xlarge"
            case .mlM7i4xlarge: return "ml.m7i.4xlarge"
            case .mlM7i8xlarge: return "ml.m7i.8xlarge"
            case .mlM7iLarge: return "ml.m7i.large"
            case .mlM7iXlarge: return "ml.m7i.xlarge"
            case .mlP216xlarge: return "ml.p2.16xlarge"
            case .mlP28xlarge: return "ml.p2.8xlarge"
            case .mlP2Xlarge: return "ml.p2.xlarge"
            case .mlP316xlarge: return "ml.p3.16xlarge"
            case .mlP32xlarge: return "ml.p3.2xlarge"
            case .mlP38xlarge: return "ml.p3.8xlarge"
            case .mlR6i12xlarge: return "ml.r6i.12xlarge"
            case .mlR6i16xlarge: return "ml.r6i.16xlarge"
            case .mlR6i24xlarge: return "ml.r6i.24xlarge"
            case .mlR6i2xlarge: return "ml.r6i.2xlarge"
            case .mlR6i32xlarge: return "ml.r6i.32xlarge"
            case .mlR6i4xlarge: return "ml.r6i.4xlarge"
            case .mlR6i8xlarge: return "ml.r6i.8xlarge"
            case .mlR6iLarge: return "ml.r6i.large"
            case .mlR6iXlarge: return "ml.r6i.xlarge"
            case .mlR7i12xlarge: return "ml.r7i.12xlarge"
            case .mlR7i16xlarge: return "ml.r7i.16xlarge"
            case .mlR7i24xlarge: return "ml.r7i.24xlarge"
            case .mlR7i2xlarge: return "ml.r7i.2xlarge"
            case .mlR7i48xlarge: return "ml.r7i.48xlarge"
            case .mlR7i4xlarge: return "ml.r7i.4xlarge"
            case .mlR7i8xlarge: return "ml.r7i.8xlarge"
            case .mlR7iLarge: return "ml.r7i.large"
            case .mlR7iXlarge: return "ml.r7i.xlarge"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A structure of additional Inference Specification. Additional Inference Specification specifies details about inference jobs that can be run with models based on this model package
    public struct AdditionalInferenceSpecificationDefinition {
        /// The Amazon ECR registry path of the Docker image that contains the inference code.
        /// This member is required.
        public var containers: [SageMakerClientTypes.ModelPackageContainerDefinition]?
        /// A description of the additional Inference specification
        public var description: Swift.String?
        /// A unique name to identify the additional inference specification. The name must be unique within the list of your additional inference specifications for a particular model package.
        /// This member is required.
        public var name: Swift.String?
        /// The supported MIME types for the input data.
        public var supportedContentTypes: [Swift.String]?
        /// A list of the instance types that are used to generate inferences in real-time.
        public var supportedRealtimeInferenceInstanceTypes: [SageMakerClientTypes.ProductionVariantInstanceType]?
        /// The supported MIME types for the output data.
        public var supportedResponseMIMETypes: [Swift.String]?
        /// A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed.
        public var supportedTransformInstanceTypes: [SageMakerClientTypes.TransformInstanceType]?

        public init(
            containers: [SageMakerClientTypes.ModelPackageContainerDefinition]? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            supportedContentTypes: [Swift.String]? = nil,
            supportedRealtimeInferenceInstanceTypes: [SageMakerClientTypes.ProductionVariantInstanceType]? = nil,
            supportedResponseMIMETypes: [Swift.String]? = nil,
            supportedTransformInstanceTypes: [SageMakerClientTypes.TransformInstanceType]? = nil
        )
        {
            self.containers = containers
            self.description = description
            self.name = name
            self.supportedContentTypes = supportedContentTypes
            self.supportedRealtimeInferenceInstanceTypes = supportedRealtimeInferenceInstanceTypes
            self.supportedResponseMIMETypes = supportedResponseMIMETypes
            self.supportedTransformInstanceTypes = supportedTransformInstanceTypes
        }
    }

}

extension SageMakerClientTypes {
    /// Data sources that are available to your model in addition to the one that you specify for ModelDataSource when you use the CreateModel action.
    public struct AdditionalModelDataSource {
        /// A custom name for this AdditionalModelDataSource object.
        /// This member is required.
        public var channelName: Swift.String?
        /// Specifies the S3 location of ML model data to deploy.
        /// This member is required.
        public var s3DataSource: SageMakerClientTypes.S3ModelDataSource?

        public init(
            channelName: Swift.String? = nil,
            s3DataSource: SageMakerClientTypes.S3ModelDataSource? = nil
        )
        {
            self.channelName = channelName
            self.s3DataSource = s3DataSource
        }
    }

}

extension SageMakerClientTypes {
    /// A tag object that consists of a key and an optional value, used to manage metadata for SageMaker Amazon Web Services resources. You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints. For more information on adding tags to SageMaker resources, see [AddTags](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AddTags.html). For more information on adding metadata to your Amazon Web Services resources with tagging, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html). For advice on best practices for managing Amazon Web Services resources with tagging, see [Tagging Best Practices: Implement an Effective Amazon Web Services Resource Tagging Strategy](https://d1.awsstatic.com/whitepapers/aws-tagging-best-practices.pdf).
    public struct Tag {
        /// The tag key. Tag keys must be unique per resource.
        /// This member is required.
        public var key: Swift.String?
        /// The tag value.
        /// This member is required.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct AddTagsInput {
    /// The Amazon Resource Name (ARN) of the resource that you want to tag.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    /// This member is required.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct AddTagsOutput {
    /// A list of tags associated with the SageMaker resource.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.tags = tags
    }
}

extension SageMakerClientTypes {
    /// Edge Manager agent version.
    public struct AgentVersion {
        /// The number of Edge Manager agents.
        /// This member is required.
        public var agentCount: Swift.Int?
        /// Version of the agent.
        /// This member is required.
        public var version: Swift.String?

        public init(
            agentCount: Swift.Int? = nil,
            version: Swift.String? = nil
        )
        {
            self.agentCount = agentCount
            self.version = version
        }
    }

}

extension SageMakerClientTypes {

    public enum AggregationTransformationValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case avg
        case first
        case max
        case min
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [AggregationTransformationValue] {
            return [
                .avg,
                .first,
                .max,
                .min,
                .sum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .avg: return "avg"
            case .first: return "first"
            case .max: return "max"
            case .min: return "min"
            case .sum: return "sum"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// An Amazon CloudWatch alarm configured to monitor metrics on an endpoint.
    public struct Alarm {
        /// The name of a CloudWatch alarm in your account.
        public var alarmName: Swift.String?

        public init(
            alarmName: Swift.String? = nil
        )
        {
            self.alarmName = alarmName
        }
    }

}

extension SageMakerClientTypes {

    public enum AlgorithmSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [AlgorithmSortBy] {
            return [
                .creationTime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies a metric that the training algorithm writes to stderr or stdout. You can view these logs to understand how your training job performs and check for any errors encountered during training. SageMaker hyperparameter tuning captures all defined metrics. Specify one of the defined metrics to use as an objective metric using the [TuningObjective](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-TuningObjective) parameter in the HyperParameterTrainingJobDefinition API to evaluate job performance during hyperparameter tuning.
    public struct MetricDefinition {
        /// The name of the metric.
        /// This member is required.
        public var name: Swift.String?
        /// A regular expression that searches the output of a training job and gets the value of the metric. For more information about using regular expressions to define metrics, see [Defining metrics and environment variables](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics-variables.html).
        /// This member is required.
        public var regex: Swift.String?

        public init(
            name: Swift.String? = nil,
            regex: Swift.String? = nil
        )
        {
            self.name = name
            self.regex = regex
        }
    }

}

extension SageMakerClientTypes {

    public enum TrainingRepositoryAccessMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case platform
        case vpc
        case sdkUnknown(Swift.String)

        public static var allCases: [TrainingRepositoryAccessMode] {
            return [
                .platform,
                .vpc
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .platform: return "Platform"
            case .vpc: return "Vpc"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// An object containing authentication information for a private Docker registry.
    public struct TrainingRepositoryAuthConfig {
        /// The Amazon Resource Name (ARN) of an Amazon Web Services Lambda function used to give SageMaker access credentials to your private Docker registry.
        /// This member is required.
        public var trainingRepositoryCredentialsProviderArn: Swift.String?

        public init(
            trainingRepositoryCredentialsProviderArn: Swift.String? = nil
        )
        {
            self.trainingRepositoryCredentialsProviderArn = trainingRepositoryCredentialsProviderArn
        }
    }

}

extension SageMakerClientTypes {
    /// The configuration to use an image from a private Docker registry for a training job.
    public struct TrainingImageConfig {
        /// The method that your training job will use to gain access to the images in your private Docker registry. For access to an image in a private Docker registry, set to Vpc.
        /// This member is required.
        public var trainingRepositoryAccessMode: SageMakerClientTypes.TrainingRepositoryAccessMode?
        /// An object containing authentication information for a private Docker registry containing your training images.
        public var trainingRepositoryAuthConfig: SageMakerClientTypes.TrainingRepositoryAuthConfig?

        public init(
            trainingRepositoryAccessMode: SageMakerClientTypes.TrainingRepositoryAccessMode? = nil,
            trainingRepositoryAuthConfig: SageMakerClientTypes.TrainingRepositoryAuthConfig? = nil
        )
        {
            self.trainingRepositoryAccessMode = trainingRepositoryAccessMode
            self.trainingRepositoryAuthConfig = trainingRepositoryAuthConfig
        }
    }

}

extension SageMakerClientTypes {

    /// The training input mode that the algorithm supports. For more information about input modes, see [Algorithms](https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). Pipe mode If an algorithm supports Pipe mode, Amazon SageMaker streams data directly from Amazon S3 to the container. File mode If an algorithm supports File mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container. You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any. For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training. FastFile mode If an algorithm supports FastFile mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk. FastFile mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.
    public enum TrainingInputMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fastfile
        case file
        case pipe
        case sdkUnknown(Swift.String)

        public static var allCases: [TrainingInputMode] {
            return [
                .fastfile,
                .file,
                .pipe
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fastfile: return "FastFile"
            case .file: return "File"
            case .pipe: return "Pipe"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies the training algorithm to use in a [CreateTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html) request. For more information about algorithms provided by SageMaker, see [Algorithms](https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). For information about using your own algorithms, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html).
    public struct AlgorithmSpecification {
        /// The name of the algorithm resource to use for the training job. This must be an algorithm resource that you created or subscribe to on Amazon Web Services Marketplace. You must specify either the algorithm name to the AlgorithmName parameter or the image URI of the algorithm container to the TrainingImage parameter. Note that the AlgorithmName parameter is mutually exclusive with the TrainingImage parameter. If you specify a value for the AlgorithmName parameter, you can't specify a value for TrainingImage, and vice versa. If you specify values for both parameters, the training job might break; if you don't specify any value for both parameters, the training job might raise a null error.
        public var algorithmName: Swift.String?
        /// The arguments for a container used to run a training job. See [How Amazon SageMaker Runs Your Training Image](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo-dockerfile.html) for additional information.
        public var containerArguments: [Swift.String]?
        /// The [entrypoint script for a Docker container](https://docs.docker.com/engine/reference/builder/) used to run a training job. This script takes precedence over the default train processing instructions. See [How Amazon SageMaker Runs Your Training Image](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-training-algo-dockerfile.html) for more information.
        public var containerEntrypoint: [Swift.String]?
        /// To generate and save time-series metrics during training, set to true. The default is false and time-series metrics aren't generated except in the following cases:
        ///
        /// * You use one of the SageMaker built-in algorithms
        ///
        /// * You use one of the following [Prebuilt SageMaker Docker Images](https://docs.aws.amazon.com/sagemaker/latest/dg/pre-built-containers-frameworks-deep-learning.html):
        ///
        /// * Tensorflow (version >= 1.15)
        ///
        /// * MXNet (version >= 1.6)
        ///
        /// * PyTorch (version >= 1.3)
        ///
        ///
        ///
        ///
        /// * You specify at least one [MetricDefinition](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_MetricDefinition.html)
        public var enableSageMakerMetricsTimeSeries: Swift.Bool?
        /// A list of metric definition objects. Each object specifies the metric name and regular expressions used to parse algorithm logs. SageMaker publishes each metric to Amazon CloudWatch.
        public var metricDefinitions: [SageMakerClientTypes.MetricDefinition]?
        /// The registry path of the Docker image that contains the training algorithm. For information about docker registry paths for SageMaker built-in algorithms, see [Docker Registry Paths and Example Code](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html) in the Amazon SageMaker developer guide. SageMaker supports both registry/repository[:tag] and registry/repository[@digest] image path formats. For more information about using your custom training container, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html). You must specify either the algorithm name to the AlgorithmName parameter or the image URI of the algorithm container to the TrainingImage parameter. For more information, see the note in the AlgorithmName parameter description.
        public var trainingImage: Swift.String?
        /// The configuration to use an image from a private Docker registry for a training job.
        public var trainingImageConfig: SageMakerClientTypes.TrainingImageConfig?
        /// The training input mode that the algorithm supports. For more information about input modes, see [Algorithms](https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). Pipe mode If an algorithm supports Pipe mode, Amazon SageMaker streams data directly from Amazon S3 to the container. File mode If an algorithm supports File mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container. You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any. For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training. FastFile mode If an algorithm supports FastFile mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk. FastFile mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.
        /// This member is required.
        public var trainingInputMode: SageMakerClientTypes.TrainingInputMode?

        public init(
            algorithmName: Swift.String? = nil,
            containerArguments: [Swift.String]? = nil,
            containerEntrypoint: [Swift.String]? = nil,
            enableSageMakerMetricsTimeSeries: Swift.Bool? = nil,
            metricDefinitions: [SageMakerClientTypes.MetricDefinition]? = nil,
            trainingImage: Swift.String? = nil,
            trainingImageConfig: SageMakerClientTypes.TrainingImageConfig? = nil,
            trainingInputMode: SageMakerClientTypes.TrainingInputMode? = nil
        )
        {
            self.algorithmName = algorithmName
            self.containerArguments = containerArguments
            self.containerEntrypoint = containerEntrypoint
            self.enableSageMakerMetricsTimeSeries = enableSageMakerMetricsTimeSeries
            self.metricDefinitions = metricDefinitions
            self.trainingImage = trainingImage
            self.trainingImageConfig = trainingImageConfig
            self.trainingInputMode = trainingInputMode
        }
    }

}

extension SageMakerClientTypes {

    public enum AlgorithmStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case deleting
        case failed
        case inProgress
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [AlgorithmStatus] {
            return [
                .completed,
                .deleting,
                .failed,
                .inProgress,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .pending: return "Pending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum DetailedAlgorithmStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case notStarted
        case sdkUnknown(Swift.String)

        public static var allCases: [DetailedAlgorithmStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .notStarted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .notStarted: return "NotStarted"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Represents the overall status of an algorithm.
    public struct AlgorithmStatusItem {
        /// if the overall status is Failed, the reason for the failure.
        public var failureReason: Swift.String?
        /// The name of the algorithm for which the overall status is being reported.
        /// This member is required.
        public var name: Swift.String?
        /// The current status.
        /// This member is required.
        public var status: SageMakerClientTypes.DetailedAlgorithmStatus?

        public init(
            failureReason: Swift.String? = nil,
            name: Swift.String? = nil,
            status: SageMakerClientTypes.DetailedAlgorithmStatus? = nil
        )
        {
            self.failureReason = failureReason
            self.name = name
            self.status = status
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies the validation and image scan statuses of the algorithm.
    public struct AlgorithmStatusDetails {
        /// The status of the scan of the algorithm's Docker image container.
        public var imageScanStatuses: [SageMakerClientTypes.AlgorithmStatusItem]?
        /// The status of algorithm validation.
        public var validationStatuses: [SageMakerClientTypes.AlgorithmStatusItem]?

        public init(
            imageScanStatuses: [SageMakerClientTypes.AlgorithmStatusItem]? = nil,
            validationStatuses: [SageMakerClientTypes.AlgorithmStatusItem]? = nil
        )
        {
            self.imageScanStatuses = imageScanStatuses
            self.validationStatuses = validationStatuses
        }
    }

}

extension SageMakerClientTypes {
    /// Provides summary information about an algorithm.
    public struct AlgorithmSummary {
        /// The Amazon Resource Name (ARN) of the algorithm.
        /// This member is required.
        public var algorithmArn: Swift.String?
        /// A brief description of the algorithm.
        public var algorithmDescription: Swift.String?
        /// The name of the algorithm that is described by the summary.
        /// This member is required.
        public var algorithmName: Swift.String?
        /// The overall status of the algorithm.
        /// This member is required.
        public var algorithmStatus: SageMakerClientTypes.AlgorithmStatus?
        /// A timestamp that shows when the algorithm was created.
        /// This member is required.
        public var creationTime: Foundation.Date?

        public init(
            algorithmArn: Swift.String? = nil,
            algorithmDescription: Swift.String? = nil,
            algorithmName: Swift.String? = nil,
            algorithmStatus: SageMakerClientTypes.AlgorithmStatus? = nil,
            creationTime: Foundation.Date? = nil
        )
        {
            self.algorithmArn = algorithmArn
            self.algorithmDescription = algorithmDescription
            self.algorithmName = algorithmName
            self.algorithmStatus = algorithmStatus
            self.creationTime = creationTime
        }
    }

}

extension SageMakerClientTypes {

    public enum FileSystemAccessMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ro
        case rw
        case sdkUnknown(Swift.String)

        public static var allCases: [FileSystemAccessMode] {
            return [
                .ro,
                .rw
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ro: return "ro"
            case .rw: return "rw"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum FileSystemType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case efs
        case fsxlustre
        case sdkUnknown(Swift.String)

        public static var allCases: [FileSystemType] {
            return [
                .efs,
                .fsxlustre
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .efs: return "EFS"
            case .fsxlustre: return "FSxLustre"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies a file system data source for a channel.
    public struct FileSystemDataSource {
        /// The full path to the directory to associate with the channel.
        /// This member is required.
        public var directoryPath: Swift.String?
        /// The access mode of the mount of the directory associated with the channel. A directory can be mounted either in ro (read-only) or rw (read-write) mode.
        /// This member is required.
        public var fileSystemAccessMode: SageMakerClientTypes.FileSystemAccessMode?
        /// The file system id.
        /// This member is required.
        public var fileSystemId: Swift.String?
        /// The file system type.
        /// This member is required.
        public var fileSystemType: SageMakerClientTypes.FileSystemType?

        public init(
            directoryPath: Swift.String? = nil,
            fileSystemAccessMode: SageMakerClientTypes.FileSystemAccessMode? = nil,
            fileSystemId: Swift.String? = nil,
            fileSystemType: SageMakerClientTypes.FileSystemType? = nil
        )
        {
            self.directoryPath = directoryPath
            self.fileSystemAccessMode = fileSystemAccessMode
            self.fileSystemId = fileSystemId
            self.fileSystemType = fileSystemType
        }
    }

}

extension SageMakerClientTypes {

    public enum S3DataDistribution: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fullyReplicated
        case shardedByS3Key
        case sdkUnknown(Swift.String)

        public static var allCases: [S3DataDistribution] {
            return [
                .fullyReplicated,
                .shardedByS3Key
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fullyReplicated: return "FullyReplicated"
            case .shardedByS3Key: return "ShardedByS3Key"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum S3DataType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case augmentedManifestFile
        case manifestFile
        case s3Prefix
        case sdkUnknown(Swift.String)

        public static var allCases: [S3DataType] {
            return [
                .augmentedManifestFile,
                .manifestFile,
                .s3Prefix
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .augmentedManifestFile: return "AugmentedManifestFile"
            case .manifestFile: return "ManifestFile"
            case .s3Prefix: return "S3Prefix"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Describes the S3 data source. Your input bucket must be in the same Amazon Web Services region as your training job.
    public struct S3DataSource {
        /// A list of one or more attribute names to use that are found in a specified augmented manifest file.
        public var attributeNames: [Swift.String]?
        /// A list of names of instance groups that get data from the S3 data source.
        public var instanceGroupNames: [Swift.String]?
        /// If you want SageMaker to replicate the entire dataset on each ML compute instance that is launched for model training, specify FullyReplicated. If you want SageMaker to replicate a subset of data on each ML compute instance that is launched for model training, specify ShardedByS3Key. If there are n ML compute instances launched for a training job, each instance gets approximately 1/n of the number of S3 objects. In this case, model training on each machine uses only the subset of training data. Don't choose more ML compute instances for training than available S3 objects. If you do, some nodes won't get any data and you will pay for nodes that aren't getting any training data. This applies in both File and Pipe modes. Keep this in mind when developing algorithms. In distributed training, where you use multiple ML compute EC2 instances, you might choose ShardedByS3Key. If the algorithm requires copying training data to the ML storage volume (when TrainingInputMode is set to File), this copies 1/n of the number of objects.
        public var s3DataDistributionType: SageMakerClientTypes.S3DataDistribution?
        /// If you choose S3Prefix, S3Uri identifies a key name prefix. SageMaker uses all objects that match the specified key name prefix for model training. If you choose ManifestFile, S3Uri identifies an object that is a manifest file containing a list of object keys that you want SageMaker to use for model training. If you choose AugmentedManifestFile, S3Uri identifies an object that is an augmented manifest file in JSON lines format. This file contains the data you want to use for model training. AugmentedManifestFile can only be used if the Channel's input mode is Pipe.
        /// This member is required.
        public var s3DataType: SageMakerClientTypes.S3DataType?
        /// Depending on the value specified for the S3DataType, identifies either a key name prefix or a manifest. For example:
        ///
        /// * A key name prefix might look like this: s3://bucketname/exampleprefix/
        ///
        /// * A manifest might look like this: s3://bucketname/example.manifest A manifest is an S3 object which is a JSON file consisting of an array of elements. The first element is a prefix which is followed by one or more suffixes. SageMaker appends the suffix elements to the prefix to get a full set of S3Uri. Note that the prefix must be a valid non-empty S3Uri that precludes users from specifying a manifest whose individual S3Uri is sourced from different S3 buckets. The following code example shows a valid manifest format: [ {"prefix": "s3://customer_bucket/some/prefix/"}, "relative/path/to/custdata-1", "relative/path/custdata-2", ... "relative/path/custdata-N"] This JSON is equivalent to the following S3Uri list: s3://customer_bucket/some/prefix/relative/path/to/custdata-1s3://customer_bucket/some/prefix/relative/path/custdata-2...s3://customer_bucket/some/prefix/relative/path/custdata-N The complete set of S3Uri in this manifest is the input data for the channel for this data source. The object that each S3Uri points to must be readable by the IAM role that SageMaker uses to perform tasks on your behalf.
        ///
        ///
        /// Your input bucket must be located in same Amazon Web Services region as your training job.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            attributeNames: [Swift.String]? = nil,
            instanceGroupNames: [Swift.String]? = nil,
            s3DataDistributionType: SageMakerClientTypes.S3DataDistribution? = nil,
            s3DataType: SageMakerClientTypes.S3DataType? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.attributeNames = attributeNames
            self.instanceGroupNames = instanceGroupNames
            self.s3DataDistributionType = s3DataDistributionType
            self.s3DataType = s3DataType
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    /// Describes the location of the channel data.
    public struct DataSource {
        /// The file system that is associated with a channel.
        public var fileSystemDataSource: SageMakerClientTypes.FileSystemDataSource?
        /// The S3 location of the data source that is associated with a channel.
        public var s3DataSource: SageMakerClientTypes.S3DataSource?

        public init(
            fileSystemDataSource: SageMakerClientTypes.FileSystemDataSource? = nil,
            s3DataSource: SageMakerClientTypes.S3DataSource? = nil
        )
        {
            self.fileSystemDataSource = fileSystemDataSource
            self.s3DataSource = s3DataSource
        }
    }

}

extension SageMakerClientTypes {

    public enum RecordWrapper: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `none`
        case recordio
        case sdkUnknown(Swift.String)

        public static var allCases: [RecordWrapper] {
            return [
                .none,
                .recordio
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .none: return "None"
            case .recordio: return "RecordIO"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A configuration for a shuffle option for input data in a channel. If you use S3Prefix for S3DataType, the results of the S3 key prefix matches are shuffled. If you use ManifestFile, the order of the S3 object references in the ManifestFile is shuffled. If you use AugmentedManifestFile, the order of the JSON lines in the AugmentedManifestFile is shuffled. The shuffling order is determined using the Seed value. For Pipe input mode, when ShuffleConfig is specified shuffling is done at the start of every epoch. With large datasets, this ensures that the order of the training data is different for each epoch, and it helps reduce bias and possible overfitting. In a multi-node training job when ShuffleConfig is combined with S3DataDistributionType of ShardedByS3Key, the data is shuffled across nodes so that the content sent to a particular node on the first epoch might be sent to a different node on the second epoch.
    public struct ShuffleConfig {
        /// Determines the shuffling order in ShuffleConfig value.
        /// This member is required.
        public var seed: Swift.Int?

        public init(
            seed: Swift.Int? = nil
        )
        {
            self.seed = seed
        }
    }

}

extension SageMakerClientTypes {
    /// A channel is a named input source that training algorithms can consume.
    public struct Channel {
        /// The name of the channel.
        /// This member is required.
        public var channelName: Swift.String?
        /// If training data is compressed, the compression type. The default value is None. CompressionType is used only in Pipe input mode. In File mode, leave this field unset or set it to None.
        public var compressionType: SageMakerClientTypes.CompressionType?
        /// The MIME type of the data.
        public var contentType: Swift.String?
        /// The location of the channel data.
        /// This member is required.
        public var dataSource: SageMakerClientTypes.DataSource?
        /// (Optional) The input mode to use for the data channel in a training job. If you don't set a value for InputMode, SageMaker uses the value set for TrainingInputMode. Use this parameter to override the TrainingInputMode setting in a [AlgorithmSpecification](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AlgorithmSpecification.html) request when you have a channel that needs a different input mode from the training job's general setting. To download the data from Amazon Simple Storage Service (Amazon S3) to the provisioned ML storage volume, and mount the directory to a Docker volume, use File input mode. To stream data directly from Amazon S3 to the container, choose Pipe input mode. To use a model for incremental training, choose File input model.
        public var inputMode: SageMakerClientTypes.TrainingInputMode?
        /// Specify RecordIO as the value when input data is in raw format but the training algorithm requires the RecordIO format. In this case, SageMaker wraps each individual S3 object in a RecordIO record. If the input data is already in RecordIO format, you don't need to set this attribute. For more information, see [Create a Dataset Using RecordIO](https://mxnet.apache.org/api/architecture/note_data_loading#data-format). In File mode, leave this field unset or set it to None.
        public var recordWrapperType: SageMakerClientTypes.RecordWrapper?
        /// A configuration for a shuffle option for input data in a channel. If you use S3Prefix for S3DataType, this shuffles the results of the S3 key prefix matches. If you use ManifestFile, the order of the S3 object references in the ManifestFile is shuffled. If you use AugmentedManifestFile, the order of the JSON lines in the AugmentedManifestFile is shuffled. The shuffling order is determined using the Seed value. For Pipe input mode, shuffling is done at the start of every epoch. With large datasets this ensures that the order of the training data is different for each epoch, it helps reduce bias and possible overfitting. In a multi-node training job when ShuffleConfig is combined with S3DataDistributionType of ShardedByS3Key, the data is shuffled across nodes so that the content sent to a particular node on the first epoch might be sent to a different node on the second epoch.
        public var shuffleConfig: SageMakerClientTypes.ShuffleConfig?

        public init(
            channelName: Swift.String? = nil,
            compressionType: SageMakerClientTypes.CompressionType? = nil,
            contentType: Swift.String? = nil,
            dataSource: SageMakerClientTypes.DataSource? = nil,
            inputMode: SageMakerClientTypes.TrainingInputMode? = nil,
            recordWrapperType: SageMakerClientTypes.RecordWrapper? = nil,
            shuffleConfig: SageMakerClientTypes.ShuffleConfig? = nil
        )
        {
            self.channelName = channelName
            self.compressionType = compressionType
            self.contentType = contentType
            self.dataSource = dataSource
            self.inputMode = inputMode
            self.recordWrapperType = recordWrapperType
            self.shuffleConfig = shuffleConfig
        }
    }

}

extension SageMakerClientTypes {

    public enum OutputCompressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case gzip
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [OutputCompressionType] {
            return [
                .gzip,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "GZIP"
            case .none: return "NONE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Provides information about how to store model training results (model artifacts).
    public struct OutputDataConfig {
        /// The model output compression type. Select None to output an uncompressed model, recommended for large model outputs. Defaults to gzip.
        public var compressionType: SageMakerClientTypes.OutputCompressionType?
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption. The KmsKeyId can be any of the following formats:
        ///
        /// * // KMS Key ID "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * // Amazon Resource Name (ARN) of a KMS Key "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * // KMS Key Alias "alias/ExampleAlias"
        ///
        /// * // Amazon Resource Name (ARN) of a KMS Key Alias "arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"
        ///
        ///
        /// If you use a KMS key ID or an alias of your KMS key, the SageMaker execution role must include permissions to call kms:Encrypt. If you don't provide a KMS key ID, SageMaker uses the default KMS key for Amazon S3 for your role's account. For more information, see [KMS-Managed Encryption Keys](https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html) in the Amazon Simple Storage Service Developer Guide. If the output data is stored in Amazon S3 Express One Zone, it is encrypted with server-side encryption with Amazon S3 managed keys (SSE-S3). KMS key is not supported for Amazon S3 Express One Zone The KMS key policy must grant permission to the IAM role that you specify in your CreateTrainingJob, CreateTransformJob, or CreateHyperParameterTuningJob requests. For more information, see [Using Key Policies in Amazon Web Services KMS](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html) in the Amazon Web Services Key Management Service Developer Guide.
        public var kmsKeyId: Swift.String?
        /// Identifies the S3 path where you want SageMaker to store the model artifacts. For example, s3://bucket-name/key-name-prefix.
        /// This member is required.
        public var s3OutputPath: Swift.String?

        public init(
            compressionType: SageMakerClientTypes.OutputCompressionType? = nil,
            kmsKeyId: Swift.String? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.compressionType = compressionType
            self.kmsKeyId = kmsKeyId
            self.s3OutputPath = s3OutputPath
        }
    }

}

extension SageMakerClientTypes {

    public enum TrainingInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mlC42xlarge
        case mlC44xlarge
        case mlC48xlarge
        case mlC4Xlarge
        case mlC5n18xlarge
        case mlC5n2xlarge
        case mlC5n4xlarge
        case mlC5n9xlarge
        case mlC5nXlarge
        case mlC518xlarge
        case mlC52xlarge
        case mlC54xlarge
        case mlC59xlarge
        case mlC5Xlarge
        case mlC6i12xlarge
        case mlC6i16xlarge
        case mlC6i24xlarge
        case mlC6i2xlarge
        case mlC6i32xlarge
        case mlC6i4xlarge
        case mlC6i8xlarge
        case mlC6iXlarge
        case mlG4dn12xlarge
        case mlG4dn16xlarge
        case mlG4dn2xlarge
        case mlG4dn4xlarge
        case mlG4dn8xlarge
        case mlG4dnXlarge
        case mlG512xlarge
        case mlG516xlarge
        case mlG524xlarge
        case mlG52xlarge
        case mlG548xlarge
        case mlG54xlarge
        case mlG58xlarge
        case mlG5Xlarge
        case mlM410xlarge
        case mlM416xlarge
        case mlM42xlarge
        case mlM44xlarge
        case mlM4Xlarge
        case mlM512xlarge
        case mlM524xlarge
        case mlM52xlarge
        case mlM54xlarge
        case mlM5Large
        case mlM5Xlarge
        case mlM6i12xlarge
        case mlM6i16xlarge
        case mlM6i24xlarge
        case mlM6i2xlarge
        case mlM6i32xlarge
        case mlM6i4xlarge
        case mlM6i8xlarge
        case mlM6iLarge
        case mlM6iXlarge
        case mlP216xlarge
        case mlP28xlarge
        case mlP2Xlarge
        case mlP3dn24xlarge
        case mlP316xlarge
        case mlP32xlarge
        case mlP38xlarge
        case mlP4de24xlarge
        case mlP4d24xlarge
        case mlP548xlarge
        case mlR5d12xlarge
        case mlR5d16xlarge
        case mlR5d24xlarge
        case mlR5d2xlarge
        case mlR5d4xlarge
        case mlR5d8xlarge
        case mlR5dLarge
        case mlR5dXlarge
        case mlR512xlarge
        case mlR516xlarge
        case mlR524xlarge
        case mlR52xlarge
        case mlR54xlarge
        case mlR58xlarge
        case mlR5Large
        case mlR5Xlarge
        case mlT32xlarge
        case mlT3Large
        case mlT3Medium
        case mlT3Xlarge
        case mlTrn1n32xlarge
        case mlTrn12xlarge
        case mlTrn132xlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [TrainingInstanceType] {
            return [
                .mlC42xlarge,
                .mlC44xlarge,
                .mlC48xlarge,
                .mlC4Xlarge,
                .mlC5n18xlarge,
                .mlC5n2xlarge,
                .mlC5n4xlarge,
                .mlC5n9xlarge,
                .mlC5nXlarge,
                .mlC518xlarge,
                .mlC52xlarge,
                .mlC54xlarge,
                .mlC59xlarge,
                .mlC5Xlarge,
                .mlC6i12xlarge,
                .mlC6i16xlarge,
                .mlC6i24xlarge,
                .mlC6i2xlarge,
                .mlC6i32xlarge,
                .mlC6i4xlarge,
                .mlC6i8xlarge,
                .mlC6iXlarge,
                .mlG4dn12xlarge,
                .mlG4dn16xlarge,
                .mlG4dn2xlarge,
                .mlG4dn4xlarge,
                .mlG4dn8xlarge,
                .mlG4dnXlarge,
                .mlG512xlarge,
                .mlG516xlarge,
                .mlG524xlarge,
                .mlG52xlarge,
                .mlG548xlarge,
                .mlG54xlarge,
                .mlG58xlarge,
                .mlG5Xlarge,
                .mlM410xlarge,
                .mlM416xlarge,
                .mlM42xlarge,
                .mlM44xlarge,
                .mlM4Xlarge,
                .mlM512xlarge,
                .mlM524xlarge,
                .mlM52xlarge,
                .mlM54xlarge,
                .mlM5Large,
                .mlM5Xlarge,
                .mlM6i12xlarge,
                .mlM6i16xlarge,
                .mlM6i24xlarge,
                .mlM6i2xlarge,
                .mlM6i32xlarge,
                .mlM6i4xlarge,
                .mlM6i8xlarge,
                .mlM6iLarge,
                .mlM6iXlarge,
                .mlP216xlarge,
                .mlP28xlarge,
                .mlP2Xlarge,
                .mlP3dn24xlarge,
                .mlP316xlarge,
                .mlP32xlarge,
                .mlP38xlarge,
                .mlP4de24xlarge,
                .mlP4d24xlarge,
                .mlP548xlarge,
                .mlR5d12xlarge,
                .mlR5d16xlarge,
                .mlR5d24xlarge,
                .mlR5d2xlarge,
                .mlR5d4xlarge,
                .mlR5d8xlarge,
                .mlR5dLarge,
                .mlR5dXlarge,
                .mlR512xlarge,
                .mlR516xlarge,
                .mlR524xlarge,
                .mlR52xlarge,
                .mlR54xlarge,
                .mlR58xlarge,
                .mlR5Large,
                .mlR5Xlarge,
                .mlT32xlarge,
                .mlT3Large,
                .mlT3Medium,
                .mlT3Xlarge,
                .mlTrn1n32xlarge,
                .mlTrn12xlarge,
                .mlTrn132xlarge
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mlC42xlarge: return "ml.c4.2xlarge"
            case .mlC44xlarge: return "ml.c4.4xlarge"
            case .mlC48xlarge: return "ml.c4.8xlarge"
            case .mlC4Xlarge: return "ml.c4.xlarge"
            case .mlC5n18xlarge: return "ml.c5n.18xlarge"
            case .mlC5n2xlarge: return "ml.c5n.2xlarge"
            case .mlC5n4xlarge: return "ml.c5n.4xlarge"
            case .mlC5n9xlarge: return "ml.c5n.9xlarge"
            case .mlC5nXlarge: return "ml.c5n.xlarge"
            case .mlC518xlarge: return "ml.c5.18xlarge"
            case .mlC52xlarge: return "ml.c5.2xlarge"
            case .mlC54xlarge: return "ml.c5.4xlarge"
            case .mlC59xlarge: return "ml.c5.9xlarge"
            case .mlC5Xlarge: return "ml.c5.xlarge"
            case .mlC6i12xlarge: return "ml.c6i.12xlarge"
            case .mlC6i16xlarge: return "ml.c6i.16xlarge"
            case .mlC6i24xlarge: return "ml.c6i.24xlarge"
            case .mlC6i2xlarge: return "ml.c6i.2xlarge"
            case .mlC6i32xlarge: return "ml.c6i.32xlarge"
            case .mlC6i4xlarge: return "ml.c6i.4xlarge"
            case .mlC6i8xlarge: return "ml.c6i.8xlarge"
            case .mlC6iXlarge: return "ml.c6i.xlarge"
            case .mlG4dn12xlarge: return "ml.g4dn.12xlarge"
            case .mlG4dn16xlarge: return "ml.g4dn.16xlarge"
            case .mlG4dn2xlarge: return "ml.g4dn.2xlarge"
            case .mlG4dn4xlarge: return "ml.g4dn.4xlarge"
            case .mlG4dn8xlarge: return "ml.g4dn.8xlarge"
            case .mlG4dnXlarge: return "ml.g4dn.xlarge"
            case .mlG512xlarge: return "ml.g5.12xlarge"
            case .mlG516xlarge: return "ml.g5.16xlarge"
            case .mlG524xlarge: return "ml.g5.24xlarge"
            case .mlG52xlarge: return "ml.g5.2xlarge"
            case .mlG548xlarge: return "ml.g5.48xlarge"
            case .mlG54xlarge: return "ml.g5.4xlarge"
            case .mlG58xlarge: return "ml.g5.8xlarge"
            case .mlG5Xlarge: return "ml.g5.xlarge"
            case .mlM410xlarge: return "ml.m4.10xlarge"
            case .mlM416xlarge: return "ml.m4.16xlarge"
            case .mlM42xlarge: return "ml.m4.2xlarge"
            case .mlM44xlarge: return "ml.m4.4xlarge"
            case .mlM4Xlarge: return "ml.m4.xlarge"
            case .mlM512xlarge: return "ml.m5.12xlarge"
            case .mlM524xlarge: return "ml.m5.24xlarge"
            case .mlM52xlarge: return "ml.m5.2xlarge"
            case .mlM54xlarge: return "ml.m5.4xlarge"
            case .mlM5Large: return "ml.m5.large"
            case .mlM5Xlarge: return "ml.m5.xlarge"
            case .mlM6i12xlarge: return "ml.m6i.12xlarge"
            case .mlM6i16xlarge: return "ml.m6i.16xlarge"
            case .mlM6i24xlarge: return "ml.m6i.24xlarge"
            case .mlM6i2xlarge: return "ml.m6i.2xlarge"
            case .mlM6i32xlarge: return "ml.m6i.32xlarge"
            case .mlM6i4xlarge: return "ml.m6i.4xlarge"
            case .mlM6i8xlarge: return "ml.m6i.8xlarge"
            case .mlM6iLarge: return "ml.m6i.large"
            case .mlM6iXlarge: return "ml.m6i.xlarge"
            case .mlP216xlarge: return "ml.p2.16xlarge"
            case .mlP28xlarge: return "ml.p2.8xlarge"
            case .mlP2Xlarge: return "ml.p2.xlarge"
            case .mlP3dn24xlarge: return "ml.p3dn.24xlarge"
            case .mlP316xlarge: return "ml.p3.16xlarge"
            case .mlP32xlarge: return "ml.p3.2xlarge"
            case .mlP38xlarge: return "ml.p3.8xlarge"
            case .mlP4de24xlarge: return "ml.p4de.24xlarge"
            case .mlP4d24xlarge: return "ml.p4d.24xlarge"
            case .mlP548xlarge: return "ml.p5.48xlarge"
            case .mlR5d12xlarge: return "ml.r5d.12xlarge"
            case .mlR5d16xlarge: return "ml.r5d.16xlarge"
            case .mlR5d24xlarge: return "ml.r5d.24xlarge"
            case .mlR5d2xlarge: return "ml.r5d.2xlarge"
            case .mlR5d4xlarge: return "ml.r5d.4xlarge"
            case .mlR5d8xlarge: return "ml.r5d.8xlarge"
            case .mlR5dLarge: return "ml.r5d.large"
            case .mlR5dXlarge: return "ml.r5d.xlarge"
            case .mlR512xlarge: return "ml.r5.12xlarge"
            case .mlR516xlarge: return "ml.r5.16xlarge"
            case .mlR524xlarge: return "ml.r5.24xlarge"
            case .mlR52xlarge: return "ml.r5.2xlarge"
            case .mlR54xlarge: return "ml.r5.4xlarge"
            case .mlR58xlarge: return "ml.r5.8xlarge"
            case .mlR5Large: return "ml.r5.large"
            case .mlR5Xlarge: return "ml.r5.xlarge"
            case .mlT32xlarge: return "ml.t3.2xlarge"
            case .mlT3Large: return "ml.t3.large"
            case .mlT3Medium: return "ml.t3.medium"
            case .mlT3Xlarge: return "ml.t3.xlarge"
            case .mlTrn1n32xlarge: return "ml.trn1n.32xlarge"
            case .mlTrn12xlarge: return "ml.trn1.2xlarge"
            case .mlTrn132xlarge: return "ml.trn1.32xlarge"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Defines an instance group for heterogeneous cluster training. When requesting a training job using the [CreateTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html) API, you can configure multiple instance groups .
    public struct InstanceGroup {
        /// Specifies the number of instances of the instance group.
        /// This member is required.
        public var instanceCount: Swift.Int?
        /// Specifies the name of the instance group.
        /// This member is required.
        public var instanceGroupName: Swift.String?
        /// Specifies the instance type of the instance group.
        /// This member is required.
        public var instanceType: SageMakerClientTypes.TrainingInstanceType?

        public init(
            instanceCount: Swift.Int? = nil,
            instanceGroupName: Swift.String? = nil,
            instanceType: SageMakerClientTypes.TrainingInstanceType? = nil
        )
        {
            self.instanceCount = instanceCount
            self.instanceGroupName = instanceGroupName
            self.instanceType = instanceType
        }
    }

}

extension SageMakerClientTypes {
    /// Describes the resources, including machine learning (ML) compute instances and ML storage volumes, to use for model training.
    public struct ResourceConfig {
        /// The number of ML compute instances to use. For distributed training, provide a value greater than 1.
        public var instanceCount: Swift.Int?
        /// The configuration of a heterogeneous cluster in JSON format.
        public var instanceGroups: [SageMakerClientTypes.InstanceGroup]?
        /// The ML compute instance type. SageMaker Training on Amazon Elastic Compute Cloud (EC2) P4de instances is in preview release starting December 9th, 2022. [Amazon EC2 P4de instances](http://aws.amazon.com/ec2/instance-types/p4/) (currently in preview) are powered by 8 NVIDIA A100 GPUs with 80GB high-performance HBM2e GPU memory, which accelerate the speed of training ML models that need to be trained on large datasets of high-resolution data. In this preview release, Amazon SageMaker supports ML training jobs on P4de instances (ml.p4de.24xlarge) to reduce model training time. The ml.p4de.24xlarge instances are available in the following Amazon Web Services Regions.
        ///
        /// * US East (N. Virginia) (us-east-1)
        ///
        /// * US West (Oregon) (us-west-2)
        ///
        ///
        /// To request quota limit increase and start using P4de instances, contact the SageMaker Training service team through your account team.
        public var instanceType: SageMakerClientTypes.TrainingInstanceType?
        /// The duration of time in seconds to retain configured resources in a warm pool for subsequent training jobs.
        public var keepAlivePeriodInSeconds: Swift.Int?
        /// The Amazon Web Services KMS key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the training job. Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a VolumeKmsKeyId when using an instance type with local storage. For a list of instance types that support local instance storage, see [Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes). For more information about local instance storage encryption, see [SSD Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html). The VolumeKmsKeyId can be in any of the following formats:
        ///
        /// * // KMS Key ID "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * // Amazon Resource Name (ARN) of a KMS Key "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// The size of the ML storage volume that you want to provision. ML storage volumes store model artifacts and incremental states. Training algorithms might also use the ML storage volume for scratch space. If you want to store the training data in the ML storage volume, choose File as the TrainingInputMode in the algorithm specification. When using an ML instance with [NVMe SSD volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html#nvme-ssd-volumes), SageMaker doesn't provision Amazon EBS General Purpose SSD (gp2) storage. Available storage is fixed to the NVMe-type instance's storage capacity. SageMaker configures storage paths for training datasets, checkpoints, model artifacts, and outputs to use the entire capacity of the instance storage. For example, ML instance families with the NVMe-type instance storage include ml.p4d, ml.g4dn, and ml.g5. When using an ML instance with the EBS-only storage option and without instance storage, you must define the size of EBS volume through VolumeSizeInGB in the ResourceConfig API. For example, ML instance families that use EBS volumes include ml.c5 and ml.p2. To look up instance types and their instance storage types and volumes, see [Amazon EC2 Instance Types](http://aws.amazon.com/ec2/instance-types/). To find the default local paths defined by the SageMaker training platform, see [Amazon SageMaker Training Storage Folders for Training Datasets, Checkpoints, Model Artifacts, and Outputs](https://docs.aws.amazon.com/sagemaker/latest/dg/model-train-storage.html).
        /// This member is required.
        public var volumeSizeInGB: Swift.Int?

        public init(
            instanceCount: Swift.Int? = nil,
            instanceGroups: [SageMakerClientTypes.InstanceGroup]? = nil,
            instanceType: SageMakerClientTypes.TrainingInstanceType? = nil,
            keepAlivePeriodInSeconds: Swift.Int? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            volumeSizeInGB: Swift.Int? = nil
        )
        {
            self.instanceCount = instanceCount
            self.instanceGroups = instanceGroups
            self.instanceType = instanceType
            self.keepAlivePeriodInSeconds = keepAlivePeriodInSeconds
            self.volumeKmsKeyId = volumeKmsKeyId
            self.volumeSizeInGB = volumeSizeInGB
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies a limit to how long a job can run. When the job reaches the time limit, SageMaker ends the job. Use this API to cap costs. To stop a training job, SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost. The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with CreateModel. The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.
    public struct StoppingCondition {
        /// The maximum length of time, in seconds, that a training or compilation job can be pending before it is stopped.
        public var maxPendingTimeInSeconds: Swift.Int?
        /// The maximum length of time, in seconds, that a training or compilation job can run before it is stopped. For compilation jobs, if the job does not complete during this time, a TimeOut error is generated. We recommend starting with 900 seconds and increasing as necessary based on your model. For all other jobs, if the job does not complete during this time, SageMaker ends the job. When RetryStrategy is specified in the job request, MaxRuntimeInSeconds specifies the maximum time for all of the attempts in total, not each individual attempt. The default value is 1 day. The maximum value is 28 days. The maximum time that a TrainingJob can run in total, including any time spent publishing metrics or archiving and uploading models after it has been stopped, is 30 days.
        public var maxRuntimeInSeconds: Swift.Int?
        /// The maximum length of time, in seconds, that a managed Spot training job has to complete. It is the amount of time spent waiting for Spot capacity plus the amount of time the job can run. It must be equal to or greater than MaxRuntimeInSeconds. If the job does not complete during this time, SageMaker ends the job. When RetryStrategy is specified in the job request, MaxWaitTimeInSeconds specifies the maximum time for all of the attempts in total, not each individual attempt.
        public var maxWaitTimeInSeconds: Swift.Int?

        public init(
            maxPendingTimeInSeconds: Swift.Int? = nil,
            maxRuntimeInSeconds: Swift.Int? = nil,
            maxWaitTimeInSeconds: Swift.Int? = nil
        )
        {
            self.maxPendingTimeInSeconds = maxPendingTimeInSeconds
            self.maxRuntimeInSeconds = maxRuntimeInSeconds
            self.maxWaitTimeInSeconds = maxWaitTimeInSeconds
        }
    }

}

extension SageMakerClientTypes {
    /// Defines the input needed to run a training job using the algorithm.
    public struct TrainingJobDefinition {
        /// The hyperparameters used for the training job.
        public var hyperParameters: [Swift.String: Swift.String]?
        /// An array of Channel objects, each of which specifies an input source.
        /// This member is required.
        public var inputDataConfig: [SageMakerClientTypes.Channel]?
        /// the path to the S3 bucket where you want to store model artifacts. SageMaker creates subfolders for the artifacts.
        /// This member is required.
        public var outputDataConfig: SageMakerClientTypes.OutputDataConfig?
        /// The resources, including the ML compute instances and ML storage volumes, to use for model training.
        /// This member is required.
        public var resourceConfig: SageMakerClientTypes.ResourceConfig?
        /// Specifies a limit to how long a model training job can run. It also specifies how long a managed Spot training job has to complete. When the job reaches the time limit, SageMaker ends the training job. Use this API to cap model training costs. To stop a job, SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts.
        /// This member is required.
        public var stoppingCondition: SageMakerClientTypes.StoppingCondition?
        /// The training input mode that the algorithm supports. For more information about input modes, see [Algorithms](https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). Pipe mode If an algorithm supports Pipe mode, Amazon SageMaker streams data directly from Amazon S3 to the container. File mode If an algorithm supports File mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container. You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any. For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training. FastFile mode If an algorithm supports FastFile mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk. FastFile mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.
        /// This member is required.
        public var trainingInputMode: SageMakerClientTypes.TrainingInputMode?

        public init(
            hyperParameters: [Swift.String: Swift.String]? = nil,
            inputDataConfig: [SageMakerClientTypes.Channel]? = nil,
            outputDataConfig: SageMakerClientTypes.OutputDataConfig? = nil,
            resourceConfig: SageMakerClientTypes.ResourceConfig? = nil,
            stoppingCondition: SageMakerClientTypes.StoppingCondition? = nil,
            trainingInputMode: SageMakerClientTypes.TrainingInputMode? = nil
        )
        {
            self.hyperParameters = hyperParameters
            self.inputDataConfig = inputDataConfig
            self.outputDataConfig = outputDataConfig
            self.resourceConfig = resourceConfig
            self.stoppingCondition = stoppingCondition
            self.trainingInputMode = trainingInputMode
        }
    }

}

extension SageMakerClientTypes {

    public enum BatchStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case multiRecord
        case singleRecord
        case sdkUnknown(Swift.String)

        public static var allCases: [BatchStrategy] {
            return [
                .multiRecord,
                .singleRecord
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .multiRecord: return "MultiRecord"
            case .singleRecord: return "SingleRecord"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Describes the S3 data source.
    public struct TransformS3DataSource {
        /// If you choose S3Prefix, S3Uri identifies a key name prefix. Amazon SageMaker uses all objects with the specified key name prefix for batch transform. If you choose ManifestFile, S3Uri identifies an object that is a manifest file containing a list of object keys that you want Amazon SageMaker to use for batch transform. The following values are compatible: ManifestFile, S3Prefix The following value is not compatible: AugmentedManifestFile
        /// This member is required.
        public var s3DataType: SageMakerClientTypes.S3DataType?
        /// Depending on the value specified for the S3DataType, identifies either a key name prefix or a manifest. For example:
        ///
        /// * A key name prefix might look like this: s3://bucketname/exampleprefix/.
        ///
        /// * A manifest might look like this: s3://bucketname/example.manifest The manifest is an S3 object which is a JSON file with the following format: [ {"prefix": "s3://customer_bucket/some/prefix/"},"relative/path/to/custdata-1","relative/path/custdata-2",..."relative/path/custdata-N"] The preceding JSON matches the following S3Uris: s3://customer_bucket/some/prefix/relative/path/to/custdata-1s3://customer_bucket/some/prefix/relative/path/custdata-2...s3://customer_bucket/some/prefix/relative/path/custdata-N The complete set of S3Uris in this manifest constitutes the input data for the channel for this datasource. The object that each S3Uris points to must be readable by the IAM role that Amazon SageMaker uses to perform tasks on your behalf.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            s3DataType: SageMakerClientTypes.S3DataType? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.s3DataType = s3DataType
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    /// Describes the location of the channel data.
    public struct TransformDataSource {
        /// The S3 location of the data source that is associated with a channel.
        /// This member is required.
        public var s3DataSource: SageMakerClientTypes.TransformS3DataSource?

        public init(
            s3DataSource: SageMakerClientTypes.TransformS3DataSource? = nil
        )
        {
            self.s3DataSource = s3DataSource
        }
    }

}

extension SageMakerClientTypes {

    public enum SplitType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case line
        case `none`
        case recordio
        case tfrecord
        case sdkUnknown(Swift.String)

        public static var allCases: [SplitType] {
            return [
                .line,
                .none,
                .recordio,
                .tfrecord
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .line: return "Line"
            case .none: return "None"
            case .recordio: return "RecordIO"
            case .tfrecord: return "TFRecord"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Describes the input source of a transform job and the way the transform job consumes it.
    public struct TransformInput {
        /// If your transform data is compressed, specify the compression type. Amazon SageMaker automatically decompresses the data for the transform job accordingly. The default value is None.
        public var compressionType: SageMakerClientTypes.CompressionType?
        /// The multipurpose internet mail extension (MIME) type of the data. Amazon SageMaker uses the MIME type with each http call to transfer data to the transform job.
        public var contentType: Swift.String?
        /// Describes the location of the channel data, which is, the S3 location of the input data that the model can consume.
        /// This member is required.
        public var dataSource: SageMakerClientTypes.TransformDataSource?
        /// The method to use to split the transform job's data files into smaller batches. Splitting is necessary when the total size of each object is too large to fit in a single request. You can also use data splitting to improve performance by processing multiple concurrent mini-batches. The default value for SplitType is None, which indicates that input data files are not split, and request payloads contain the entire contents of an input object. Set the value of this parameter to Line to split records on a newline character boundary. SplitType also supports a number of record-oriented binary data formats. Currently, the supported record formats are:
        ///
        /// * RecordIO
        ///
        /// * TFRecord
        ///
        ///
        /// When splitting is enabled, the size of a mini-batch depends on the values of the BatchStrategy and MaxPayloadInMB parameters. When the value of BatchStrategy is MultiRecord, Amazon SageMaker sends the maximum number of records in each request, up to the MaxPayloadInMB limit. If the value of BatchStrategy is SingleRecord, Amazon SageMaker sends individual records in each request. Some data formats represent a record as a binary payload wrapped with extra padding bytes. When splitting is applied to a binary data format, padding is removed if the value of BatchStrategy is set to SingleRecord. Padding is not removed if the value of BatchStrategy is set to MultiRecord. For more information about RecordIO, see [Create a Dataset Using RecordIO](https://mxnet.apache.org/api/faq/recordio) in the MXNet documentation. For more information about TFRecord, see [Consuming TFRecord data](https://www.tensorflow.org/guide/data#consuming_tfrecord_data) in the TensorFlow documentation.
        public var splitType: SageMakerClientTypes.SplitType?

        public init(
            compressionType: SageMakerClientTypes.CompressionType? = nil,
            contentType: Swift.String? = nil,
            dataSource: SageMakerClientTypes.TransformDataSource? = nil,
            splitType: SageMakerClientTypes.SplitType? = nil
        )
        {
            self.compressionType = compressionType
            self.contentType = contentType
            self.dataSource = dataSource
            self.splitType = splitType
        }
    }

}

extension SageMakerClientTypes {

    public enum AssemblyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case line
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [AssemblyType] {
            return [
                .line,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .line: return "Line"
            case .none: return "None"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Describes the results of a transform job.
    public struct TransformOutput {
        /// The MIME type used to specify the output data. Amazon SageMaker uses the MIME type with each http call to transfer data from the transform job.
        public var accept: Swift.String?
        /// Defines how to assemble the results of the transform job as a single S3 object. Choose a format that is most convenient to you. To concatenate the results in binary format, specify None. To add a newline character at the end of every transformed record, specify Line.
        public var assembleWith: SageMakerClientTypes.AssemblyType?
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption. The KmsKeyId can be any of the following formats:
        ///
        /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Key ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Alias name: alias/ExampleAlias
        ///
        /// * Alias name ARN: arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias
        ///
        ///
        /// If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account. For more information, see [KMS-Managed Encryption Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html) in the Amazon Simple Storage Service Developer Guide. The KMS key policy must grant permission to the IAM role that you specify in your [CreateModel](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html) request. For more information, see [Using Key Policies in Amazon Web Services KMS](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html) in the Amazon Web Services Key Management Service Developer Guide.
        public var kmsKeyId: Swift.String?
        /// The Amazon S3 path where you want Amazon SageMaker to store the results of the transform job. For example, s3://bucket-name/key-name-prefix. For every S3 object used as input for the transform job, batch transform stores the transformed data with an .out suffix in a corresponding subfolder in the location in the output prefix. For example, for the input data stored at s3://bucket-name/input-name-prefix/dataset01/data.csv, batch transform stores the transformed data at s3://bucket-name/output-name-prefix/input-name-prefix/data.csv.out. Batch transform doesn't upload partially processed objects. For an input S3 object that contains multiple records, it creates an .out file only if the transform job succeeds on the entire file. When the input contains multiple S3 objects, the batch transform job processes the listed S3 objects and uploads only the output for successfully processed objects. If any object fails in the transform job batch transform marks the job as failed to prompt investigation.
        /// This member is required.
        public var s3OutputPath: Swift.String?

        public init(
            accept: Swift.String? = nil,
            assembleWith: SageMakerClientTypes.AssemblyType? = nil,
            kmsKeyId: Swift.String? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.accept = accept
            self.assembleWith = assembleWith
            self.kmsKeyId = kmsKeyId
            self.s3OutputPath = s3OutputPath
        }
    }

}

extension SageMakerClientTypes {
    /// Describes the resources, including ML instance types and ML instance count, to use for transform job.
    public struct TransformResources {
        /// The number of ML compute instances to use in the transform job. The default value is 1, and the maximum is 100. For distributed transform jobs, specify a value greater than 1.
        /// This member is required.
        public var instanceCount: Swift.Int?
        /// The ML compute instance type for the transform job. If you are using built-in algorithms to transform moderately sized datasets, we recommend using ml.m4.xlarge or ml.m5.largeinstance types.
        /// This member is required.
        public var instanceType: SageMakerClientTypes.TransformInstanceType?
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt model data on the storage volume attached to the ML compute instance(s) that run the batch transform job. Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a VolumeKmsKeyId when using an instance type with local storage. For a list of instance types that support local instance storage, see [Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes). For more information about local instance storage encryption, see [SSD Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html). The VolumeKmsKeyId can be any of the following formats:
        ///
        /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Key ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Alias name: alias/ExampleAlias
        ///
        /// * Alias name ARN: arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias
        public var volumeKmsKeyId: Swift.String?

        public init(
            instanceCount: Swift.Int? = nil,
            instanceType: SageMakerClientTypes.TransformInstanceType? = nil,
            volumeKmsKeyId: Swift.String? = nil
        )
        {
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.volumeKmsKeyId = volumeKmsKeyId
        }
    }

}

extension SageMakerClientTypes {
    /// Defines the input needed to run a transform job using the inference specification specified in the algorithm.
    public struct TransformJobDefinition {
        /// A string that determines the number of records included in a single mini-batch. SingleRecord means only one record is used per mini-batch. MultiRecord means a mini-batch is set to contain as many records that can fit within the MaxPayloadInMB limit.
        public var batchStrategy: SageMakerClientTypes.BatchStrategy?
        /// The environment variables to set in the Docker container. We support up to 16 key and values entries in the map.
        public var environment: [Swift.String: Swift.String]?
        /// The maximum number of parallel requests that can be sent to each instance in a transform job. The default value is 1.
        public var maxConcurrentTransforms: Swift.Int?
        /// The maximum payload size allowed, in MB. A payload is the data portion of a record (without metadata).
        public var maxPayloadInMB: Swift.Int?
        /// A description of the input source and the way the transform job consumes it.
        /// This member is required.
        public var transformInput: SageMakerClientTypes.TransformInput?
        /// Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job.
        /// This member is required.
        public var transformOutput: SageMakerClientTypes.TransformOutput?
        /// Identifies the ML compute instances for the transform job.
        /// This member is required.
        public var transformResources: SageMakerClientTypes.TransformResources?

        public init(
            batchStrategy: SageMakerClientTypes.BatchStrategy? = nil,
            environment: [Swift.String: Swift.String]? = nil,
            maxConcurrentTransforms: Swift.Int? = nil,
            maxPayloadInMB: Swift.Int? = nil,
            transformInput: SageMakerClientTypes.TransformInput? = nil,
            transformOutput: SageMakerClientTypes.TransformOutput? = nil,
            transformResources: SageMakerClientTypes.TransformResources? = nil
        )
        {
            self.batchStrategy = batchStrategy
            self.environment = environment
            self.maxConcurrentTransforms = maxConcurrentTransforms
            self.maxPayloadInMB = maxPayloadInMB
            self.transformInput = transformInput
            self.transformOutput = transformOutput
            self.transformResources = transformResources
        }
    }

}

extension SageMakerClientTypes {
    /// Defines a training job and a batch transform job that SageMaker runs to validate your algorithm. The data provided in the validation profile is made available to your buyers on Amazon Web Services Marketplace.
    public struct AlgorithmValidationProfile {
        /// The name of the profile for the algorithm. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).
        /// This member is required.
        public var profileName: Swift.String?
        /// The TrainingJobDefinition object that describes the training job that SageMaker runs to validate your algorithm.
        /// This member is required.
        public var trainingJobDefinition: SageMakerClientTypes.TrainingJobDefinition?
        /// The TransformJobDefinition object that describes the transform job that SageMaker runs to validate your algorithm.
        public var transformJobDefinition: SageMakerClientTypes.TransformJobDefinition?

        public init(
            profileName: Swift.String? = nil,
            trainingJobDefinition: SageMakerClientTypes.TrainingJobDefinition? = nil,
            transformJobDefinition: SageMakerClientTypes.TransformJobDefinition? = nil
        )
        {
            self.profileName = profileName
            self.trainingJobDefinition = trainingJobDefinition
            self.transformJobDefinition = transformJobDefinition
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies configurations for one or more training jobs that SageMaker runs to test the algorithm.
    public struct AlgorithmValidationSpecification {
        /// An array of AlgorithmValidationProfile objects, each of which specifies a training job and batch transform job that SageMaker runs to validate your algorithm.
        /// This member is required.
        public var validationProfiles: [SageMakerClientTypes.AlgorithmValidationProfile]?
        /// The IAM roles that SageMaker uses to run the training jobs.
        /// This member is required.
        public var validationRole: Swift.String?

        public init(
            validationProfiles: [SageMakerClientTypes.AlgorithmValidationProfile]? = nil,
            validationRole: Swift.String? = nil
        )
        {
            self.validationProfiles = validationProfiles
            self.validationRole = validationRole
        }
    }

}

extension SageMakerClientTypes {

    public enum FeatureStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [FeatureStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A collection of settings that configure the Amazon Q experience within the domain.
    public struct AmazonQSettings {
        /// The ARN of the Amazon Q profile used within the domain.
        public var qProfileArn: Swift.String?
        /// Whether Amazon Q has been enabled within the domain.
        public var status: SageMakerClientTypes.FeatureStatus?

        public init(
            qProfileArn: Swift.String? = nil,
            status: SageMakerClientTypes.FeatureStatus? = nil
        )
        {
            self.qProfileArn = qProfileArn
            self.status = status
        }
    }

}

extension SageMakerClientTypes {
    /// Configures how labels are consolidated across human workers and processes output data.
    public struct AnnotationConsolidationConfig {
        /// The Amazon Resource Name (ARN) of a Lambda function implements the logic for [annotation consolidation](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-annotation-consolidation.html) and to process output data. This parameter is required for all labeling jobs. For [built-in task types](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html), use one of the following Amazon SageMaker Ground Truth Lambda function ARNs for AnnotationConsolidationLambdaArn. For custom labeling workflows, see [Post-annotation Lambda](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates-step3.html#sms-custom-templates-step3-postlambda). Bounding box - Finds the most similar boxes from different workers based on the Jaccard index of the boxes.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-BoundingBox
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-BoundingBox
        ///
        ///
        /// Image classification - Uses a variant of the Expectation Maximization approach to estimate the true class of an image based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-ImageMultiClass
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-ImageMultiClass
        ///
        ///
        /// Multi-label image classification - Uses a variant of the Expectation Maximization approach to estimate the true classes of an image based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-ImageMultiClassMultiLabel
        ///
        ///
        /// Semantic segmentation - Treats each pixel in an image as a multi-class classification and treats pixel annotations from workers as "votes" for the correct label.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-SemanticSegmentation
        ///
        ///
        /// Text classification - Uses a variant of the Expectation Maximization approach to estimate the true class of text based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-TextMultiClass
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-TextMultiClass
        ///
        ///
        /// Multi-label text classification - Uses a variant of the Expectation Maximization approach to estimate the true classes of text based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-TextMultiClassMultiLabel
        ///
        ///
        /// Named entity recognition - Groups similar selections and calculates aggregate boundaries, resolving to most-assigned label.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-NamedEntityRecognition
        ///
        ///
        /// Video Classification - Use this task type when you need workers to classify videos using predefined labels that you specify. Workers are shown videos and are asked to choose one label for each video.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoMultiClass
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoMultiClass
        ///
        ///
        /// Video Frame Object Detection - Use this task type to have workers identify and locate objects in a sequence of video frames (images extracted from a video) using bounding boxes. For example, you can use this task to ask workers to identify and localize various objects in a series of video frames, such as cars, bikes, and pedestrians.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoObjectDetection
        ///
        ///
        /// Video Frame Object Tracking - Use this task type to have workers track the movement of objects in a sequence of video frames (images extracted from a video) using bounding boxes. For example, you can use this task to ask workers to track the movement of objects, such as cars, bikes, and pedestrians.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-VideoObjectTracking
        ///
        ///
        /// 3D Point Cloud Object Detection - Use this task type when you want workers to classify objects in a 3D point cloud by drawing 3D cuboids around objects. For example, you can use this task type to ask workers to identify different types of objects in a point cloud, such as cars, bikes, and pedestrians.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudObjectDetection
        ///
        ///
        /// 3D Point Cloud Object Tracking - Use this task type when you want workers to draw 3D cuboids around objects that appear in a sequence of 3D point cloud frames. For example, you can use this task type to ask workers to track the movement of vehicles across multiple point cloud frames.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudObjectTracking
        ///
        ///
        /// 3D Point Cloud Semantic Segmentation - Use this task type when you want workers to create a point-level semantic segmentation masks by painting objects in a 3D point cloud using different colors where each color is assigned to one of the classes you specify.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-3DPointCloudSemanticSegmentation
        ///
        ///
        /// Use the following ARNs for Label Verification and Adjustment Jobs Use label verification and adjustment jobs to review and adjust labels. To learn more, see [Verify and Adjust Labels ](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html). Semantic Segmentation Adjustment - Treats each pixel in an image as a multi-class classification and treats pixel adjusted annotations from workers as "votes" for the correct label.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentSemanticSegmentation
        ///
        ///
        /// Semantic Segmentation Verification - Uses a variant of the Expectation Maximization approach to estimate the true class of verification judgment for semantic segmentation labels based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-VerificationSemanticSegmentation
        ///
        ///
        /// Bounding Box Adjustment - Finds the most similar boxes from different workers based on the Jaccard index of the adjusted annotations.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentBoundingBox
        ///
        ///
        /// Bounding Box Verification - Uses a variant of the Expectation Maximization approach to estimate the true class of verification judgement for bounding box labels based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-VerificationBoundingBox
        ///
        ///
        /// Video Frame Object Detection Adjustment - Use this task type when you want workers to adjust bounding boxes that workers have added to video frames to classify and localize objects in a sequence of video frames.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentVideoObjectDetection
        ///
        ///
        /// Video Frame Object Tracking Adjustment - Use this task type when you want workers to adjust bounding boxes that workers have added to video frames to track object movement across a sequence of video frames.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-AdjustmentVideoObjectTracking
        ///
        ///
        /// 3D Point Cloud Object Detection Adjustment - Use this task type when you want workers to adjust 3D cuboids around objects in a 3D point cloud.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudObjectDetection
        ///
        ///
        /// 3D Point Cloud Object Tracking Adjustment - Use this task type when you want workers to adjust 3D cuboids around objects that appear in a sequence of 3D point cloud frames.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudObjectTracking
        ///
        ///
        /// 3D Point Cloud Semantic Segmentation Adjustment - Use this task type when you want workers to adjust a point-level semantic segmentation masks using a paint tool.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:ACS-Adjustment3DPointCloudSemanticSegmentation
        /// This member is required.
        public var annotationConsolidationLambdaArn: Swift.String?

        public init(
            annotationConsolidationLambdaArn: Swift.String? = nil
        )
        {
            self.annotationConsolidationLambdaArn = annotationConsolidationLambdaArn
        }
    }

}

extension SageMakerClientTypes {

    public enum AppType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case canvas
        case codeeditor
        case detailedprofiler
        case jupyterlab
        case jupyterserver
        case kernelgateway
        case rsessiongateway
        case rstudioserverpro
        case tensorboard
        case sdkUnknown(Swift.String)

        public static var allCases: [AppType] {
            return [
                .canvas,
                .codeeditor,
                .detailedprofiler,
                .jupyterlab,
                .jupyterserver,
                .kernelgateway,
                .rsessiongateway,
                .rstudioserverpro,
                .tensorboard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .canvas: return "Canvas"
            case .codeeditor: return "CodeEditor"
            case .detailedprofiler: return "DetailedProfiler"
            case .jupyterlab: return "JupyterLab"
            case .jupyterserver: return "JupyterServer"
            case .kernelgateway: return "KernelGateway"
            case .rsessiongateway: return "RSessionGateway"
            case .rstudioserverpro: return "RStudioServerPro"
            case .tensorboard: return "TensorBoard"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum AppInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mlC512xlarge
        case mlC518xlarge
        case mlC524xlarge
        case mlC52xlarge
        case mlC54xlarge
        case mlC59xlarge
        case mlC5Large
        case mlC5Xlarge
        case mlC6id12xlarge
        case mlC6id16xlarge
        case mlC6id24xlarge
        case mlC6id2xlarge
        case mlC6id32xlarge
        case mlC6id4xlarge
        case mlC6id8xlarge
        case mlC6idLarge
        case mlC6idXlarge
        case mlC6i12xlarge
        case mlC6i16xlarge
        case mlC6i24xlarge
        case mlC6i2xlarge
        case mlC6i32xlarge
        case mlC6i4xlarge
        case mlC6i8xlarge
        case mlC6iLarge
        case mlC6iXlarge
        case mlC7i12xlarge
        case mlC7i16xlarge
        case mlC7i24xlarge
        case mlC7i2xlarge
        case mlC7i48xlarge
        case mlC7i4xlarge
        case mlC7i8xlarge
        case mlC7iLarge
        case mlC7iXlarge
        case mlG4dn12xlarge
        case mlG4dn16xlarge
        case mlG4dn2xlarge
        case mlG4dn4xlarge
        case mlG4dn8xlarge
        case mlG4dnXlarge
        case mlG512xlarge
        case mlG516xlarge
        case mlG524xlarge
        case mlG52xlarge
        case mlG548xlarge
        case mlG54xlarge
        case mlG58xlarge
        case mlG5Xlarge
        case mlG6e12xlarge
        case mlG6e16xlarge
        case mlG6e24xlarge
        case mlG6e2xlarge
        case mlG6e48xlarge
        case mlG6e4xlarge
        case mlG6e8xlarge
        case mlG6eXlarge
        case mlG612xlarge
        case mlG616xlarge
        case mlG624xlarge
        case mlG62xlarge
        case mlG648xlarge
        case mlG64xlarge
        case mlG68xlarge
        case mlG6Xlarge
        case mlGeospatialInteractive
        case mlM5d12xlarge
        case mlM5d16xlarge
        case mlM5d24xlarge
        case mlM5d2xlarge
        case mlM5d4xlarge
        case mlM5d8xlarge
        case mlM5dLarge
        case mlM5dXlarge
        case mlM512xlarge
        case mlM516xlarge
        case mlM524xlarge
        case mlM52xlarge
        case mlM54xlarge
        case mlM58xlarge
        case mlM5Large
        case mlM5Xlarge
        case mlM6id12xlarge
        case mlM6id16xlarge
        case mlM6id24xlarge
        case mlM6id2xlarge
        case mlM6id32xlarge
        case mlM6id4xlarge
        case mlM6id8xlarge
        case mlM6idLarge
        case mlM6idXlarge
        case mlM6i12xlarge
        case mlM6i16xlarge
        case mlM6i24xlarge
        case mlM6i2xlarge
        case mlM6i32xlarge
        case mlM6i4xlarge
        case mlM6i8xlarge
        case mlM6iLarge
        case mlM6iXlarge
        case mlM7i12xlarge
        case mlM7i16xlarge
        case mlM7i24xlarge
        case mlM7i2xlarge
        case mlM7i48xlarge
        case mlM7i4xlarge
        case mlM7i8xlarge
        case mlM7iLarge
        case mlM7iXlarge
        case mlP3dn24xlarge
        case mlP316xlarge
        case mlP32xlarge
        case mlP38xlarge
        case mlP4de24xlarge
        case mlP4d24xlarge
        case mlP548xlarge
        case mlR512xlarge
        case mlR516xlarge
        case mlR524xlarge
        case mlR52xlarge
        case mlR54xlarge
        case mlR58xlarge
        case mlR5Large
        case mlR5Xlarge
        case mlR6id12xlarge
        case mlR6id16xlarge
        case mlR6id24xlarge
        case mlR6id2xlarge
        case mlR6id32xlarge
        case mlR6id4xlarge
        case mlR6id8xlarge
        case mlR6idLarge
        case mlR6idXlarge
        case mlR6i12xlarge
        case mlR6i16xlarge
        case mlR6i24xlarge
        case mlR6i2xlarge
        case mlR6i32xlarge
        case mlR6i4xlarge
        case mlR6i8xlarge
        case mlR6iLarge
        case mlR6iXlarge
        case mlR7i12xlarge
        case mlR7i16xlarge
        case mlR7i24xlarge
        case mlR7i2xlarge
        case mlR7i48xlarge
        case mlR7i4xlarge
        case mlR7i8xlarge
        case mlR7iLarge
        case mlR7iXlarge
        case mlT32xlarge
        case mlT3Large
        case mlT3Medium
        case mlT3Micro
        case mlT3Small
        case mlT3Xlarge
        case mlTrn1n32xlarge
        case mlTrn12xlarge
        case mlTrn132xlarge
        case system
        case sdkUnknown(Swift.String)

        public static var allCases: [AppInstanceType] {
            return [
                .mlC512xlarge,
                .mlC518xlarge,
                .mlC524xlarge,
                .mlC52xlarge,
                .mlC54xlarge,
                .mlC59xlarge,
                .mlC5Large,
                .mlC5Xlarge,
                .mlC6id12xlarge,
                .mlC6id16xlarge,
                .mlC6id24xlarge,
                .mlC6id2xlarge,
                .mlC6id32xlarge,
                .mlC6id4xlarge,
                .mlC6id8xlarge,
                .mlC6idLarge,
                .mlC6idXlarge,
                .mlC6i12xlarge,
                .mlC6i16xlarge,
                .mlC6i24xlarge,
                .mlC6i2xlarge,
                .mlC6i32xlarge,
                .mlC6i4xlarge,
                .mlC6i8xlarge,
                .mlC6iLarge,
                .mlC6iXlarge,
                .mlC7i12xlarge,
                .mlC7i16xlarge,
                .mlC7i24xlarge,
                .mlC7i2xlarge,
                .mlC7i48xlarge,
                .mlC7i4xlarge,
                .mlC7i8xlarge,
                .mlC7iLarge,
                .mlC7iXlarge,
                .mlG4dn12xlarge,
                .mlG4dn16xlarge,
                .mlG4dn2xlarge,
                .mlG4dn4xlarge,
                .mlG4dn8xlarge,
                .mlG4dnXlarge,
                .mlG512xlarge,
                .mlG516xlarge,
                .mlG524xlarge,
                .mlG52xlarge,
                .mlG548xlarge,
                .mlG54xlarge,
                .mlG58xlarge,
                .mlG5Xlarge,
                .mlG6e12xlarge,
                .mlG6e16xlarge,
                .mlG6e24xlarge,
                .mlG6e2xlarge,
                .mlG6e48xlarge,
                .mlG6e4xlarge,
                .mlG6e8xlarge,
                .mlG6eXlarge,
                .mlG612xlarge,
                .mlG616xlarge,
                .mlG624xlarge,
                .mlG62xlarge,
                .mlG648xlarge,
                .mlG64xlarge,
                .mlG68xlarge,
                .mlG6Xlarge,
                .mlGeospatialInteractive,
                .mlM5d12xlarge,
                .mlM5d16xlarge,
                .mlM5d24xlarge,
                .mlM5d2xlarge,
                .mlM5d4xlarge,
                .mlM5d8xlarge,
                .mlM5dLarge,
                .mlM5dXlarge,
                .mlM512xlarge,
                .mlM516xlarge,
                .mlM524xlarge,
                .mlM52xlarge,
                .mlM54xlarge,
                .mlM58xlarge,
                .mlM5Large,
                .mlM5Xlarge,
                .mlM6id12xlarge,
                .mlM6id16xlarge,
                .mlM6id24xlarge,
                .mlM6id2xlarge,
                .mlM6id32xlarge,
                .mlM6id4xlarge,
                .mlM6id8xlarge,
                .mlM6idLarge,
                .mlM6idXlarge,
                .mlM6i12xlarge,
                .mlM6i16xlarge,
                .mlM6i24xlarge,
                .mlM6i2xlarge,
                .mlM6i32xlarge,
                .mlM6i4xlarge,
                .mlM6i8xlarge,
                .mlM6iLarge,
                .mlM6iXlarge,
                .mlM7i12xlarge,
                .mlM7i16xlarge,
                .mlM7i24xlarge,
                .mlM7i2xlarge,
                .mlM7i48xlarge,
                .mlM7i4xlarge,
                .mlM7i8xlarge,
                .mlM7iLarge,
                .mlM7iXlarge,
                .mlP3dn24xlarge,
                .mlP316xlarge,
                .mlP32xlarge,
                .mlP38xlarge,
                .mlP4de24xlarge,
                .mlP4d24xlarge,
                .mlP548xlarge,
                .mlR512xlarge,
                .mlR516xlarge,
                .mlR524xlarge,
                .mlR52xlarge,
                .mlR54xlarge,
                .mlR58xlarge,
                .mlR5Large,
                .mlR5Xlarge,
                .mlR6id12xlarge,
                .mlR6id16xlarge,
                .mlR6id24xlarge,
                .mlR6id2xlarge,
                .mlR6id32xlarge,
                .mlR6id4xlarge,
                .mlR6id8xlarge,
                .mlR6idLarge,
                .mlR6idXlarge,
                .mlR6i12xlarge,
                .mlR6i16xlarge,
                .mlR6i24xlarge,
                .mlR6i2xlarge,
                .mlR6i32xlarge,
                .mlR6i4xlarge,
                .mlR6i8xlarge,
                .mlR6iLarge,
                .mlR6iXlarge,
                .mlR7i12xlarge,
                .mlR7i16xlarge,
                .mlR7i24xlarge,
                .mlR7i2xlarge,
                .mlR7i48xlarge,
                .mlR7i4xlarge,
                .mlR7i8xlarge,
                .mlR7iLarge,
                .mlR7iXlarge,
                .mlT32xlarge,
                .mlT3Large,
                .mlT3Medium,
                .mlT3Micro,
                .mlT3Small,
                .mlT3Xlarge,
                .mlTrn1n32xlarge,
                .mlTrn12xlarge,
                .mlTrn132xlarge,
                .system
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mlC512xlarge: return "ml.c5.12xlarge"
            case .mlC518xlarge: return "ml.c5.18xlarge"
            case .mlC524xlarge: return "ml.c5.24xlarge"
            case .mlC52xlarge: return "ml.c5.2xlarge"
            case .mlC54xlarge: return "ml.c5.4xlarge"
            case .mlC59xlarge: return "ml.c5.9xlarge"
            case .mlC5Large: return "ml.c5.large"
            case .mlC5Xlarge: return "ml.c5.xlarge"
            case .mlC6id12xlarge: return "ml.c6id.12xlarge"
            case .mlC6id16xlarge: return "ml.c6id.16xlarge"
            case .mlC6id24xlarge: return "ml.c6id.24xlarge"
            case .mlC6id2xlarge: return "ml.c6id.2xlarge"
            case .mlC6id32xlarge: return "ml.c6id.32xlarge"
            case .mlC6id4xlarge: return "ml.c6id.4xlarge"
            case .mlC6id8xlarge: return "ml.c6id.8xlarge"
            case .mlC6idLarge: return "ml.c6id.large"
            case .mlC6idXlarge: return "ml.c6id.xlarge"
            case .mlC6i12xlarge: return "ml.c6i.12xlarge"
            case .mlC6i16xlarge: return "ml.c6i.16xlarge"
            case .mlC6i24xlarge: return "ml.c6i.24xlarge"
            case .mlC6i2xlarge: return "ml.c6i.2xlarge"
            case .mlC6i32xlarge: return "ml.c6i.32xlarge"
            case .mlC6i4xlarge: return "ml.c6i.4xlarge"
            case .mlC6i8xlarge: return "ml.c6i.8xlarge"
            case .mlC6iLarge: return "ml.c6i.large"
            case .mlC6iXlarge: return "ml.c6i.xlarge"
            case .mlC7i12xlarge: return "ml.c7i.12xlarge"
            case .mlC7i16xlarge: return "ml.c7i.16xlarge"
            case .mlC7i24xlarge: return "ml.c7i.24xlarge"
            case .mlC7i2xlarge: return "ml.c7i.2xlarge"
            case .mlC7i48xlarge: return "ml.c7i.48xlarge"
            case .mlC7i4xlarge: return "ml.c7i.4xlarge"
            case .mlC7i8xlarge: return "ml.c7i.8xlarge"
            case .mlC7iLarge: return "ml.c7i.large"
            case .mlC7iXlarge: return "ml.c7i.xlarge"
            case .mlG4dn12xlarge: return "ml.g4dn.12xlarge"
            case .mlG4dn16xlarge: return "ml.g4dn.16xlarge"
            case .mlG4dn2xlarge: return "ml.g4dn.2xlarge"
            case .mlG4dn4xlarge: return "ml.g4dn.4xlarge"
            case .mlG4dn8xlarge: return "ml.g4dn.8xlarge"
            case .mlG4dnXlarge: return "ml.g4dn.xlarge"
            case .mlG512xlarge: return "ml.g5.12xlarge"
            case .mlG516xlarge: return "ml.g5.16xlarge"
            case .mlG524xlarge: return "ml.g5.24xlarge"
            case .mlG52xlarge: return "ml.g5.2xlarge"
            case .mlG548xlarge: return "ml.g5.48xlarge"
            case .mlG54xlarge: return "ml.g5.4xlarge"
            case .mlG58xlarge: return "ml.g5.8xlarge"
            case .mlG5Xlarge: return "ml.g5.xlarge"
            case .mlG6e12xlarge: return "ml.g6e.12xlarge"
            case .mlG6e16xlarge: return "ml.g6e.16xlarge"
            case .mlG6e24xlarge: return "ml.g6e.24xlarge"
            case .mlG6e2xlarge: return "ml.g6e.2xlarge"
            case .mlG6e48xlarge: return "ml.g6e.48xlarge"
            case .mlG6e4xlarge: return "ml.g6e.4xlarge"
            case .mlG6e8xlarge: return "ml.g6e.8xlarge"
            case .mlG6eXlarge: return "ml.g6e.xlarge"
            case .mlG612xlarge: return "ml.g6.12xlarge"
            case .mlG616xlarge: return "ml.g6.16xlarge"
            case .mlG624xlarge: return "ml.g6.24xlarge"
            case .mlG62xlarge: return "ml.g6.2xlarge"
            case .mlG648xlarge: return "ml.g6.48xlarge"
            case .mlG64xlarge: return "ml.g6.4xlarge"
            case .mlG68xlarge: return "ml.g6.8xlarge"
            case .mlG6Xlarge: return "ml.g6.xlarge"
            case .mlGeospatialInteractive: return "ml.geospatial.interactive"
            case .mlM5d12xlarge: return "ml.m5d.12xlarge"
            case .mlM5d16xlarge: return "ml.m5d.16xlarge"
            case .mlM5d24xlarge: return "ml.m5d.24xlarge"
            case .mlM5d2xlarge: return "ml.m5d.2xlarge"
            case .mlM5d4xlarge: return "ml.m5d.4xlarge"
            case .mlM5d8xlarge: return "ml.m5d.8xlarge"
            case .mlM5dLarge: return "ml.m5d.large"
            case .mlM5dXlarge: return "ml.m5d.xlarge"
            case .mlM512xlarge: return "ml.m5.12xlarge"
            case .mlM516xlarge: return "ml.m5.16xlarge"
            case .mlM524xlarge: return "ml.m5.24xlarge"
            case .mlM52xlarge: return "ml.m5.2xlarge"
            case .mlM54xlarge: return "ml.m5.4xlarge"
            case .mlM58xlarge: return "ml.m5.8xlarge"
            case .mlM5Large: return "ml.m5.large"
            case .mlM5Xlarge: return "ml.m5.xlarge"
            case .mlM6id12xlarge: return "ml.m6id.12xlarge"
            case .mlM6id16xlarge: return "ml.m6id.16xlarge"
            case .mlM6id24xlarge: return "ml.m6id.24xlarge"
            case .mlM6id2xlarge: return "ml.m6id.2xlarge"
            case .mlM6id32xlarge: return "ml.m6id.32xlarge"
            case .mlM6id4xlarge: return "ml.m6id.4xlarge"
            case .mlM6id8xlarge: return "ml.m6id.8xlarge"
            case .mlM6idLarge: return "ml.m6id.large"
            case .mlM6idXlarge: return "ml.m6id.xlarge"
            case .mlM6i12xlarge: return "ml.m6i.12xlarge"
            case .mlM6i16xlarge: return "ml.m6i.16xlarge"
            case .mlM6i24xlarge: return "ml.m6i.24xlarge"
            case .mlM6i2xlarge: return "ml.m6i.2xlarge"
            case .mlM6i32xlarge: return "ml.m6i.32xlarge"
            case .mlM6i4xlarge: return "ml.m6i.4xlarge"
            case .mlM6i8xlarge: return "ml.m6i.8xlarge"
            case .mlM6iLarge: return "ml.m6i.large"
            case .mlM6iXlarge: return "ml.m6i.xlarge"
            case .mlM7i12xlarge: return "ml.m7i.12xlarge"
            case .mlM7i16xlarge: return "ml.m7i.16xlarge"
            case .mlM7i24xlarge: return "ml.m7i.24xlarge"
            case .mlM7i2xlarge: return "ml.m7i.2xlarge"
            case .mlM7i48xlarge: return "ml.m7i.48xlarge"
            case .mlM7i4xlarge: return "ml.m7i.4xlarge"
            case .mlM7i8xlarge: return "ml.m7i.8xlarge"
            case .mlM7iLarge: return "ml.m7i.large"
            case .mlM7iXlarge: return "ml.m7i.xlarge"
            case .mlP3dn24xlarge: return "ml.p3dn.24xlarge"
            case .mlP316xlarge: return "ml.p3.16xlarge"
            case .mlP32xlarge: return "ml.p3.2xlarge"
            case .mlP38xlarge: return "ml.p3.8xlarge"
            case .mlP4de24xlarge: return "ml.p4de.24xlarge"
            case .mlP4d24xlarge: return "ml.p4d.24xlarge"
            case .mlP548xlarge: return "ml.p5.48xlarge"
            case .mlR512xlarge: return "ml.r5.12xlarge"
            case .mlR516xlarge: return "ml.r5.16xlarge"
            case .mlR524xlarge: return "ml.r5.24xlarge"
            case .mlR52xlarge: return "ml.r5.2xlarge"
            case .mlR54xlarge: return "ml.r5.4xlarge"
            case .mlR58xlarge: return "ml.r5.8xlarge"
            case .mlR5Large: return "ml.r5.large"
            case .mlR5Xlarge: return "ml.r5.xlarge"
            case .mlR6id12xlarge: return "ml.r6id.12xlarge"
            case .mlR6id16xlarge: return "ml.r6id.16xlarge"
            case .mlR6id24xlarge: return "ml.r6id.24xlarge"
            case .mlR6id2xlarge: return "ml.r6id.2xlarge"
            case .mlR6id32xlarge: return "ml.r6id.32xlarge"
            case .mlR6id4xlarge: return "ml.r6id.4xlarge"
            case .mlR6id8xlarge: return "ml.r6id.8xlarge"
            case .mlR6idLarge: return "ml.r6id.large"
            case .mlR6idXlarge: return "ml.r6id.xlarge"
            case .mlR6i12xlarge: return "ml.r6i.12xlarge"
            case .mlR6i16xlarge: return "ml.r6i.16xlarge"
            case .mlR6i24xlarge: return "ml.r6i.24xlarge"
            case .mlR6i2xlarge: return "ml.r6i.2xlarge"
            case .mlR6i32xlarge: return "ml.r6i.32xlarge"
            case .mlR6i4xlarge: return "ml.r6i.4xlarge"
            case .mlR6i8xlarge: return "ml.r6i.8xlarge"
            case .mlR6iLarge: return "ml.r6i.large"
            case .mlR6iXlarge: return "ml.r6i.xlarge"
            case .mlR7i12xlarge: return "ml.r7i.12xlarge"
            case .mlR7i16xlarge: return "ml.r7i.16xlarge"
            case .mlR7i24xlarge: return "ml.r7i.24xlarge"
            case .mlR7i2xlarge: return "ml.r7i.2xlarge"
            case .mlR7i48xlarge: return "ml.r7i.48xlarge"
            case .mlR7i4xlarge: return "ml.r7i.4xlarge"
            case .mlR7i8xlarge: return "ml.r7i.8xlarge"
            case .mlR7iLarge: return "ml.r7i.large"
            case .mlR7iXlarge: return "ml.r7i.xlarge"
            case .mlT32xlarge: return "ml.t3.2xlarge"
            case .mlT3Large: return "ml.t3.large"
            case .mlT3Medium: return "ml.t3.medium"
            case .mlT3Micro: return "ml.t3.micro"
            case .mlT3Small: return "ml.t3.small"
            case .mlT3Xlarge: return "ml.t3.xlarge"
            case .mlTrn1n32xlarge: return "ml.trn1n.32xlarge"
            case .mlTrn12xlarge: return "ml.trn1.2xlarge"
            case .mlTrn132xlarge: return "ml.trn1.32xlarge"
            case .system: return "system"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
    public struct ResourceSpec {
        /// The instance type that the image version runs on. JupyterServer apps only support the system value. For KernelGateway apps, the system value is translated to ml.t3.medium. KernelGateway apps also support all other values for available instance types.
        public var instanceType: SageMakerClientTypes.AppInstanceType?
        /// The Amazon Resource Name (ARN) of the Lifecycle Configuration attached to the Resource.
        public var lifecycleConfigArn: Swift.String?
        /// The ARN of the SageMaker image that the image version belongs to.
        public var sageMakerImageArn: Swift.String?
        /// The SageMakerImageVersionAlias of the image to launch with. This value is in SemVer 2.0.0 versioning format.
        public var sageMakerImageVersionAlias: Swift.String?
        /// The ARN of the image version created on the instance.
        public var sageMakerImageVersionArn: Swift.String?

        public init(
            instanceType: SageMakerClientTypes.AppInstanceType? = nil,
            lifecycleConfigArn: Swift.String? = nil,
            sageMakerImageArn: Swift.String? = nil,
            sageMakerImageVersionAlias: Swift.String? = nil,
            sageMakerImageVersionArn: Swift.String? = nil
        )
        {
            self.instanceType = instanceType
            self.lifecycleConfigArn = lifecycleConfigArn
            self.sageMakerImageArn = sageMakerImageArn
            self.sageMakerImageVersionAlias = sageMakerImageVersionAlias
            self.sageMakerImageVersionArn = sageMakerImageVersionArn
        }
    }

}

extension SageMakerClientTypes {

    public enum AppStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleted
        case deleting
        case failed
        case inservice
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [AppStatus] {
            return [
                .deleted,
                .deleting,
                .failed,
                .inservice,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleted: return "Deleted"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inservice: return "InService"
            case .pending: return "Pending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Details about an Amazon SageMaker app.
    public struct AppDetails {
        /// The name of the app.
        public var appName: Swift.String?
        /// The type of app.
        public var appType: SageMakerClientTypes.AppType?
        /// The creation time.
        public var creationTime: Foundation.Date?
        /// The domain ID.
        public var domainId: Swift.String?
        /// Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
        public var resourceSpec: SageMakerClientTypes.ResourceSpec?
        /// The name of the space.
        public var spaceName: Swift.String?
        /// The status.
        public var status: SageMakerClientTypes.AppStatus?
        /// The user profile name.
        public var userProfileName: Swift.String?

        public init(
            appName: Swift.String? = nil,
            appType: SageMakerClientTypes.AppType? = nil,
            creationTime: Foundation.Date? = nil,
            domainId: Swift.String? = nil,
            resourceSpec: SageMakerClientTypes.ResourceSpec? = nil,
            spaceName: Swift.String? = nil,
            status: SageMakerClientTypes.AppStatus? = nil,
            userProfileName: Swift.String? = nil
        )
        {
            self.appName = appName
            self.appType = appType
            self.creationTime = creationTime
            self.domainId = domainId
            self.resourceSpec = resourceSpec
            self.spaceName = spaceName
            self.status = status
            self.userProfileName = userProfileName
        }
    }

}

extension SageMakerClientTypes {
    /// The configuration used to run the application image container.
    public struct ContainerConfig {
        /// The arguments for the container when you're running the application.
        public var containerArguments: [Swift.String]?
        /// The entrypoint used to run the application in the container.
        public var containerEntrypoint: [Swift.String]?
        /// The environment variables to set in the container
        public var containerEnvironmentVariables: [Swift.String: Swift.String]?

        public init(
            containerArguments: [Swift.String]? = nil,
            containerEntrypoint: [Swift.String]? = nil,
            containerEnvironmentVariables: [Swift.String: Swift.String]? = nil
        )
        {
            self.containerArguments = containerArguments
            self.containerEntrypoint = containerEntrypoint
            self.containerEnvironmentVariables = containerEnvironmentVariables
        }
    }

}

extension SageMakerClientTypes {
    /// The Amazon Elastic File System storage configuration for a SageMaker image.
    public struct FileSystemConfig {
        /// The default POSIX group ID (GID). If not specified, defaults to 100.
        public var defaultGid: Swift.Int?
        /// The default POSIX user ID (UID). If not specified, defaults to 1000.
        public var defaultUid: Swift.Int?
        /// The path within the image to mount the user's EFS home directory. The directory should be empty. If not specified, defaults to /home/sagemaker-user.
        public var mountPath: Swift.String?

        public init(
            defaultGid: Swift.Int? = nil,
            defaultUid: Swift.Int? = nil,
            mountPath: Swift.String? = nil
        )
        {
            self.defaultGid = defaultGid
            self.defaultUid = defaultUid
            self.mountPath = mountPath
        }
    }

}

extension SageMakerClientTypes {
    /// The configuration for the file system and kernels in a SageMaker image running as a Code Editor app. The FileSystemConfig object is not supported.
    public struct CodeEditorAppImageConfig {
        /// The configuration used to run the application image container.
        public var containerConfig: SageMakerClientTypes.ContainerConfig?
        /// The Amazon Elastic File System storage configuration for a SageMaker image.
        public var fileSystemConfig: SageMakerClientTypes.FileSystemConfig?

        public init(
            containerConfig: SageMakerClientTypes.ContainerConfig? = nil,
            fileSystemConfig: SageMakerClientTypes.FileSystemConfig? = nil
        )
        {
            self.containerConfig = containerConfig
            self.fileSystemConfig = fileSystemConfig
        }
    }

}

extension SageMakerClientTypes {
    /// The configuration for the file system and kernels in a SageMaker image running as a JupyterLab app. The FileSystemConfig object is not supported.
    public struct JupyterLabAppImageConfig {
        /// The configuration used to run the application image container.
        public var containerConfig: SageMakerClientTypes.ContainerConfig?
        /// The Amazon Elastic File System storage configuration for a SageMaker image.
        public var fileSystemConfig: SageMakerClientTypes.FileSystemConfig?

        public init(
            containerConfig: SageMakerClientTypes.ContainerConfig? = nil,
            fileSystemConfig: SageMakerClientTypes.FileSystemConfig? = nil
        )
        {
            self.containerConfig = containerConfig
            self.fileSystemConfig = fileSystemConfig
        }
    }

}

extension SageMakerClientTypes {
    /// The specification of a Jupyter kernel.
    public struct KernelSpec {
        /// The display name of the kernel.
        public var displayName: Swift.String?
        /// The name of the Jupyter kernel in the image. This value is case sensitive.
        /// This member is required.
        public var name: Swift.String?

        public init(
            displayName: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.displayName = displayName
            self.name = name
        }
    }

}

extension SageMakerClientTypes {
    /// The configuration for the file system and kernels in a SageMaker image running as a KernelGateway app.
    public struct KernelGatewayImageConfig {
        /// The Amazon Elastic File System storage configuration for a SageMaker image.
        public var fileSystemConfig: SageMakerClientTypes.FileSystemConfig?
        /// The specification of the Jupyter kernels in the image.
        /// This member is required.
        public var kernelSpecs: [SageMakerClientTypes.KernelSpec]?

        public init(
            fileSystemConfig: SageMakerClientTypes.FileSystemConfig? = nil,
            kernelSpecs: [SageMakerClientTypes.KernelSpec]? = nil
        )
        {
            self.fileSystemConfig = fileSystemConfig
            self.kernelSpecs = kernelSpecs
        }
    }

}

extension SageMakerClientTypes {
    /// The configuration for running a SageMaker image as a KernelGateway app.
    public struct AppImageConfigDetails {
        /// The ARN of the AppImageConfig.
        public var appImageConfigArn: Swift.String?
        /// The name of the AppImageConfig. Must be unique to your account.
        public var appImageConfigName: Swift.String?
        /// The configuration for the file system and the runtime, such as the environment variables and entry point.
        public var codeEditorAppImageConfig: SageMakerClientTypes.CodeEditorAppImageConfig?
        /// When the AppImageConfig was created.
        public var creationTime: Foundation.Date?
        /// The configuration for the file system and the runtime, such as the environment variables and entry point.
        public var jupyterLabAppImageConfig: SageMakerClientTypes.JupyterLabAppImageConfig?
        /// The configuration for the file system and kernels in the SageMaker image.
        public var kernelGatewayImageConfig: SageMakerClientTypes.KernelGatewayImageConfig?
        /// When the AppImageConfig was last modified.
        public var lastModifiedTime: Foundation.Date?

        public init(
            appImageConfigArn: Swift.String? = nil,
            appImageConfigName: Swift.String? = nil,
            codeEditorAppImageConfig: SageMakerClientTypes.CodeEditorAppImageConfig? = nil,
            creationTime: Foundation.Date? = nil,
            jupyterLabAppImageConfig: SageMakerClientTypes.JupyterLabAppImageConfig? = nil,
            kernelGatewayImageConfig: SageMakerClientTypes.KernelGatewayImageConfig? = nil,
            lastModifiedTime: Foundation.Date? = nil
        )
        {
            self.appImageConfigArn = appImageConfigArn
            self.appImageConfigName = appImageConfigName
            self.codeEditorAppImageConfig = codeEditorAppImageConfig
            self.creationTime = creationTime
            self.jupyterLabAppImageConfig = jupyterLabAppImageConfig
            self.kernelGatewayImageConfig = kernelGatewayImageConfig
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension SageMakerClientTypes {

    public enum AppImageConfigSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationtime
        case lastmodifiedtime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [AppImageConfigSortKey] {
            return [
                .creationtime,
                .lastmodifiedtime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .lastmodifiedtime: return "LastModifiedTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum LifecycleManagement: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [LifecycleManagement] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Settings related to idle shutdown of Studio applications.
    public struct IdleSettings {
        /// The time that SageMaker waits after the application becomes idle before shutting it down.
        public var idleTimeoutInMinutes: Swift.Int?
        /// Indicates whether idle shutdown is activated for the application type.
        public var lifecycleManagement: SageMakerClientTypes.LifecycleManagement?
        /// The maximum value in minutes that custom idle shutdown can be set to by the user.
        public var maxIdleTimeoutInMinutes: Swift.Int?
        /// The minimum value in minutes that custom idle shutdown can be set to by the user.
        public var minIdleTimeoutInMinutes: Swift.Int?

        public init(
            idleTimeoutInMinutes: Swift.Int? = nil,
            lifecycleManagement: SageMakerClientTypes.LifecycleManagement? = nil,
            maxIdleTimeoutInMinutes: Swift.Int? = nil,
            minIdleTimeoutInMinutes: Swift.Int? = nil
        )
        {
            self.idleTimeoutInMinutes = idleTimeoutInMinutes
            self.lifecycleManagement = lifecycleManagement
            self.maxIdleTimeoutInMinutes = maxIdleTimeoutInMinutes
            self.minIdleTimeoutInMinutes = minIdleTimeoutInMinutes
        }
    }

}

extension SageMakerClientTypes {
    /// Settings that are used to configure and manage the lifecycle of Amazon SageMaker Studio applications.
    public struct AppLifecycleManagement {
        /// Settings related to idle shutdown of Studio applications.
        public var idleSettings: SageMakerClientTypes.IdleSettings?

        public init(
            idleSettings: SageMakerClientTypes.IdleSettings? = nil
        )
        {
            self.idleSettings = idleSettings
        }
    }

}

extension SageMakerClientTypes {

    public enum AppNetworkAccessType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case publicinternetonly
        case vpconly
        case sdkUnknown(Swift.String)

        public static var allCases: [AppNetworkAccessType] {
            return [
                .publicinternetonly,
                .vpconly
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .publicinternetonly: return "PublicInternetOnly"
            case .vpconly: return "VpcOnly"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum AppSecurityGroupManagement: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case customer
        case service
        case sdkUnknown(Swift.String)

        public static var allCases: [AppSecurityGroupManagement] {
            return [
                .customer,
                .service
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .customer: return "Customer"
            case .service: return "Service"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum AppSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationtime
        case sdkUnknown(Swift.String)

        public static var allCases: [AppSortKey] {
            return [
                .creationtime
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Configuration to run a processing job in a specified container image.
    public struct AppSpecification {
        /// The arguments for a container used to run a processing job.
        public var containerArguments: [Swift.String]?
        /// The entrypoint for a container used to run a processing job.
        public var containerEntrypoint: [Swift.String]?
        /// The container image to be run by the processing job.
        /// This member is required.
        public var imageUri: Swift.String?

        public init(
            containerArguments: [Swift.String]? = nil,
            containerEntrypoint: [Swift.String]? = nil,
            imageUri: Swift.String? = nil
        )
        {
            self.containerArguments = containerArguments
            self.containerEntrypoint = containerEntrypoint
            self.imageUri = imageUri
        }
    }

}

extension SageMakerClientTypes {

    public enum ArtifactSourceIdType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case custom
        case md5Hash
        case s3Etag
        case s3Version
        case sdkUnknown(Swift.String)

        public static var allCases: [ArtifactSourceIdType] {
            return [
                .custom,
                .md5Hash,
                .s3Etag,
                .s3Version
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .custom: return "Custom"
            case .md5Hash: return "MD5Hash"
            case .s3Etag: return "S3ETag"
            case .s3Version: return "S3Version"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The ID and ID type of an artifact source.
    public struct ArtifactSourceType {
        /// The type of ID.
        /// This member is required.
        public var sourceIdType: SageMakerClientTypes.ArtifactSourceIdType?
        /// The ID.
        /// This member is required.
        public var value: Swift.String?

        public init(
            sourceIdType: SageMakerClientTypes.ArtifactSourceIdType? = nil,
            value: Swift.String? = nil
        )
        {
            self.sourceIdType = sourceIdType
            self.value = value
        }
    }

}

extension SageMakerClientTypes {
    /// A structure describing the source of an artifact.
    public struct ArtifactSource {
        /// A list of source types.
        public var sourceTypes: [SageMakerClientTypes.ArtifactSourceType]?
        /// The URI of the source.
        /// This member is required.
        public var sourceUri: Swift.String?

        public init(
            sourceTypes: [SageMakerClientTypes.ArtifactSourceType]? = nil,
            sourceUri: Swift.String? = nil
        )
        {
            self.sourceTypes = sourceTypes
            self.sourceUri = sourceUri
        }
    }

}

extension SageMakerClientTypes {
    /// Lists a summary of the properties of an artifact. An artifact represents a URI addressable object or data. Some examples are a dataset and a model.
    public struct ArtifactSummary {
        /// The Amazon Resource Name (ARN) of the artifact.
        public var artifactArn: Swift.String?
        /// The name of the artifact.
        public var artifactName: Swift.String?
        /// The type of the artifact.
        public var artifactType: Swift.String?
        /// When the artifact was created.
        public var creationTime: Foundation.Date?
        /// When the artifact was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The source of the artifact.
        public var source: SageMakerClientTypes.ArtifactSource?

        public init(
            artifactArn: Swift.String? = nil,
            artifactName: Swift.String? = nil,
            artifactType: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            source: SageMakerClientTypes.ArtifactSource? = nil
        )
        {
            self.artifactArn = artifactArn
            self.artifactName = artifactName
            self.artifactType = artifactType
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
            self.source = source
        }
    }

}

public struct AssociateTrialComponentInput {
    /// The name of the component to associated with the trial.
    /// This member is required.
    public var trialComponentName: Swift.String?
    /// The name of the trial to associate with.
    /// This member is required.
    public var trialName: Swift.String?

    public init(
        trialComponentName: Swift.String? = nil,
        trialName: Swift.String? = nil
    )
    {
        self.trialComponentName = trialComponentName
        self.trialName = trialName
    }
}

public struct AssociateTrialComponentOutput {
    /// The Amazon Resource Name (ARN) of the trial.
    public var trialArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the trial component.
    public var trialComponentArn: Swift.String?

    public init(
        trialArn: Swift.String? = nil,
        trialComponentArn: Swift.String? = nil
    )
    {
        self.trialArn = trialArn
        self.trialComponentArn = trialComponentArn
    }
}

extension SageMakerClientTypes {
    /// The IAM Identity details associated with the user. These details are associated with model package groups, model packages and project entities only.
    public struct IamIdentity {
        /// The Amazon Resource Name (ARN) of the IAM identity.
        public var arn: Swift.String?
        /// The ID of the principal that assumes the IAM identity.
        public var principalId: Swift.String?
        /// The person or application which assumes the IAM identity.
        public var sourceIdentity: Swift.String?

        public init(
            arn: Swift.String? = nil,
            principalId: Swift.String? = nil,
            sourceIdentity: Swift.String? = nil
        )
        {
            self.arn = arn
            self.principalId = principalId
            self.sourceIdentity = sourceIdentity
        }
    }

}

extension SageMakerClientTypes {
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public struct UserContext {
        /// The domain associated with the user.
        public var domainId: Swift.String?
        /// The IAM Identity details associated with the user. These details are associated with model package groups, model packages, and project entities only.
        public var iamIdentity: SageMakerClientTypes.IamIdentity?
        /// The Amazon Resource Name (ARN) of the user's profile.
        public var userProfileArn: Swift.String?
        /// The name of the user's profile.
        public var userProfileName: Swift.String?

        public init(
            domainId: Swift.String? = nil,
            iamIdentity: SageMakerClientTypes.IamIdentity? = nil,
            userProfileArn: Swift.String? = nil,
            userProfileName: Swift.String? = nil
        )
        {
            self.domainId = domainId
            self.iamIdentity = iamIdentity
            self.userProfileArn = userProfileArn
            self.userProfileName = userProfileName
        }
    }

}

extension SageMakerClientTypes {
    /// Lists a summary of the properties of an association. An association is an entity that links other lineage or experiment entities. An example would be an association between a training job and a model.
    public struct AssociationSummary {
        /// The type of the association.
        public var associationType: SageMakerClientTypes.AssociationEdgeType?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// When the association was created.
        public var creationTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the destination.
        public var destinationArn: Swift.String?
        /// The name of the destination.
        public var destinationName: Swift.String?
        /// The destination type.
        public var destinationType: Swift.String?
        /// The ARN of the source.
        public var sourceArn: Swift.String?
        /// The name of the source.
        public var sourceName: Swift.String?
        /// The source type.
        public var sourceType: Swift.String?

        public init(
            associationType: SageMakerClientTypes.AssociationEdgeType? = nil,
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: Foundation.Date? = nil,
            destinationArn: Swift.String? = nil,
            destinationName: Swift.String? = nil,
            destinationType: Swift.String? = nil,
            sourceArn: Swift.String? = nil,
            sourceName: Swift.String? = nil,
            sourceType: Swift.String? = nil
        )
        {
            self.associationType = associationType
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.destinationArn = destinationArn
            self.destinationName = destinationName
            self.destinationType = destinationType
            self.sourceArn = sourceArn
            self.sourceName = sourceName
            self.sourceType = sourceType
        }
    }

}

extension SageMakerClientTypes {
    /// Configures the behavior of the client used by SageMaker to interact with the model container during asynchronous inference.
    public struct AsyncInferenceClientConfig {
        /// The maximum number of concurrent requests sent by the SageMaker client to the model container. If no value is provided, SageMaker chooses an optimal value.
        public var maxConcurrentInvocationsPerInstance: Swift.Int?

        public init(
            maxConcurrentInvocationsPerInstance: Swift.Int? = nil
        )
        {
            self.maxConcurrentInvocationsPerInstance = maxConcurrentInvocationsPerInstance
        }
    }

}

extension SageMakerClientTypes {

    public enum AsyncNotificationTopicTypes: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case errorNotificationTopic
        case successNotificationTopic
        case sdkUnknown(Swift.String)

        public static var allCases: [AsyncNotificationTopicTypes] {
            return [
                .errorNotificationTopic,
                .successNotificationTopic
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .errorNotificationTopic: return "ERROR_NOTIFICATION_TOPIC"
            case .successNotificationTopic: return "SUCCESS_NOTIFICATION_TOPIC"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies the configuration for notifications of inference results for asynchronous inference.
    public struct AsyncInferenceNotificationConfig {
        /// Amazon SNS topic to post a notification to when inference fails. If no topic is provided, no notification is sent on failure.
        public var errorTopic: Swift.String?
        /// The Amazon SNS topics where you want the inference response to be included. The inference response is included only if the response size is less than or equal to 128 KB.
        public var includeInferenceResponseIn: [SageMakerClientTypes.AsyncNotificationTopicTypes]?
        /// Amazon SNS topic to post a notification to when inference completes successfully. If no topic is provided, no notification is sent on success.
        public var successTopic: Swift.String?

        public init(
            errorTopic: Swift.String? = nil,
            includeInferenceResponseIn: [SageMakerClientTypes.AsyncNotificationTopicTypes]? = nil,
            successTopic: Swift.String? = nil
        )
        {
            self.errorTopic = errorTopic
            self.includeInferenceResponseIn = includeInferenceResponseIn
            self.successTopic = successTopic
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies the configuration for asynchronous inference invocation outputs.
    public struct AsyncInferenceOutputConfig {
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that SageMaker uses to encrypt the asynchronous inference output in Amazon S3.
        public var kmsKeyId: Swift.String?
        /// Specifies the configuration for notifications of inference results for asynchronous inference.
        public var notificationConfig: SageMakerClientTypes.AsyncInferenceNotificationConfig?
        /// The Amazon S3 location to upload failure inference responses to.
        public var s3FailurePath: Swift.String?
        /// The Amazon S3 location to upload inference responses to.
        public var s3OutputPath: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil,
            notificationConfig: SageMakerClientTypes.AsyncInferenceNotificationConfig? = nil,
            s3FailurePath: Swift.String? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.notificationConfig = notificationConfig
            self.s3FailurePath = s3FailurePath
            self.s3OutputPath = s3OutputPath
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies configuration for how an endpoint performs asynchronous inference.
    public struct AsyncInferenceConfig {
        /// Configures the behavior of the client used by SageMaker to interact with the model container during asynchronous inference.
        public var clientConfig: SageMakerClientTypes.AsyncInferenceClientConfig?
        /// Specifies the configuration for asynchronous inference invocation outputs.
        /// This member is required.
        public var outputConfig: SageMakerClientTypes.AsyncInferenceOutputConfig?

        public init(
            clientConfig: SageMakerClientTypes.AsyncInferenceClientConfig? = nil,
            outputConfig: SageMakerClientTypes.AsyncInferenceOutputConfig? = nil
        )
        {
            self.clientConfig = clientConfig
            self.outputConfig = outputConfig
        }
    }

}

extension SageMakerClientTypes {

    /// The compression used for Athena query results.
    public enum AthenaResultCompressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case gzip
        case snappy
        case zlib
        case sdkUnknown(Swift.String)

        public static var allCases: [AthenaResultCompressionType] {
            return [
                .gzip,
                .snappy,
                .zlib
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "GZIP"
            case .snappy: return "SNAPPY"
            case .zlib: return "ZLIB"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    /// The data storage format for Athena query results.
    public enum AthenaResultFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case avro
        case json
        case orc
        case parquet
        case textfile
        case sdkUnknown(Swift.String)

        public static var allCases: [AthenaResultFormat] {
            return [
                .avro,
                .json,
                .orc,
                .parquet,
                .textfile
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .avro: return "AVRO"
            case .json: return "JSON"
            case .orc: return "ORC"
            case .parquet: return "PARQUET"
            case .textfile: return "TEXTFILE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Configuration for Athena Dataset Definition input.
    public struct AthenaDatasetDefinition {
        /// The name of the data catalog used in Athena query execution.
        /// This member is required.
        public var catalog: Swift.String?
        /// The name of the database used in the Athena query execution.
        /// This member is required.
        public var database: Swift.String?
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data generated from an Athena query execution.
        public var kmsKeyId: Swift.String?
        /// The compression used for Athena query results.
        public var outputCompression: SageMakerClientTypes.AthenaResultCompressionType?
        /// The data storage format for Athena query results.
        /// This member is required.
        public var outputFormat: SageMakerClientTypes.AthenaResultFormat?
        /// The location in Amazon S3 where Athena query results are stored.
        /// This member is required.
        public var outputS3Uri: Swift.String?
        /// The SQL query statements, to be executed.
        /// This member is required.
        public var queryString: Swift.String?
        /// The name of the workgroup in which the Athena query is being started.
        public var workGroup: Swift.String?

        public init(
            catalog: Swift.String? = nil,
            database: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            outputCompression: SageMakerClientTypes.AthenaResultCompressionType? = nil,
            outputFormat: SageMakerClientTypes.AthenaResultFormat? = nil,
            outputS3Uri: Swift.String? = nil,
            queryString: Swift.String? = nil,
            workGroup: Swift.String? = nil
        )
        {
            self.catalog = catalog
            self.database = database
            self.kmsKeyId = kmsKeyId
            self.outputCompression = outputCompression
            self.outputFormat = outputFormat
            self.outputS3Uri = outputS3Uri
            self.queryString = queryString
            self.workGroup = workGroup
        }
    }

}

extension SageMakerClientTypes {

    public enum AuthMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case iam
        case sso
        case sdkUnknown(Swift.String)

        public static var allCases: [AuthMode] {
            return [
                .iam,
                .sso
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .iam: return "IAM"
            case .sso: return "SSO"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum AutoMLAlgorithm: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case arima
        case catboost
        case cnnQr
        case deepar
        case ets
        case extraTrees
        case fastai
        case lightgbm
        case linearLearner
        case mlp
        case nnTorch
        case npts
        case prophet
        case randomforest
        case xgboost
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLAlgorithm] {
            return [
                .arima,
                .catboost,
                .cnnQr,
                .deepar,
                .ets,
                .extraTrees,
                .fastai,
                .lightgbm,
                .linearLearner,
                .mlp,
                .nnTorch,
                .npts,
                .prophet,
                .randomforest,
                .xgboost
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .arima: return "arima"
            case .catboost: return "catboost"
            case .cnnQr: return "cnn-qr"
            case .deepar: return "deepar"
            case .ets: return "ets"
            case .extraTrees: return "extra-trees"
            case .fastai: return "fastai"
            case .lightgbm: return "lightgbm"
            case .linearLearner: return "linear-learner"
            case .mlp: return "mlp"
            case .nnTorch: return "nn-torch"
            case .npts: return "npts"
            case .prophet: return "prophet"
            case .randomforest: return "randomforest"
            case .xgboost: return "xgboost"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The selection of algorithms trained on your dataset to generate the model candidates for an Autopilot job.
    public struct AutoMLAlgorithmConfig {
        /// The selection of algorithms trained on your dataset to generate the model candidates for an Autopilot job.
        ///
        /// * For the tabular problem type TabularJobConfig: Selected algorithms must belong to the list corresponding to the training mode set in [AutoMLJobConfig.Mode](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLJobConfig.html#sagemaker-Type-AutoMLJobConfig-Mode) (ENSEMBLING or HYPERPARAMETER_TUNING). Choose a minimum of 1 algorithm.
        ///
        /// * In ENSEMBLING mode:
        ///
        /// * "catboost"
        ///
        /// * "extra-trees"
        ///
        /// * "fastai"
        ///
        /// * "lightgbm"
        ///
        /// * "linear-learner"
        ///
        /// * "nn-torch"
        ///
        /// * "randomforest"
        ///
        /// * "xgboost"
        ///
        ///
        ///
        ///
        /// * In HYPERPARAMETER_TUNING mode:
        ///
        /// * "linear-learner"
        ///
        /// * "mlp"
        ///
        /// * "xgboost"
        ///
        ///
        ///
        ///
        ///
        ///
        ///
        /// * For the time-series forecasting problem type TimeSeriesForecastingJobConfig:
        ///
        /// * Choose your algorithms from this list.
        ///
        /// * "cnn-qr"
        ///
        /// * "deepar"
        ///
        /// * "prophet"
        ///
        /// * "arima"
        ///
        /// * "npts"
        ///
        /// * "ets"
        /// This member is required.
        public var autoMLAlgorithms: [SageMakerClientTypes.AutoMLAlgorithm]?

        public init(
            autoMLAlgorithms: [SageMakerClientTypes.AutoMLAlgorithm]? = nil
        )
        {
            self.autoMLAlgorithms = autoMLAlgorithms
        }
    }

}

extension SageMakerClientTypes {
    /// The location of artifacts for an AutoML candidate job.
    public struct CandidateArtifactLocations {
        /// The Amazon S3 prefix to the accuracy metrics and the inference results observed over the testing window. Available only for the time-series forecasting problem type.
        public var backtestResults: Swift.String?
        /// The Amazon S3 prefix to the explainability artifacts generated for the AutoML candidate.
        /// This member is required.
        public var explainability: Swift.String?
        /// The Amazon S3 prefix to the model insight artifacts generated for the AutoML candidate.
        public var modelInsights: Swift.String?

        public init(
            backtestResults: Swift.String? = nil,
            explainability: Swift.String? = nil,
            modelInsights: Swift.String? = nil
        )
        {
            self.backtestResults = backtestResults
            self.explainability = explainability
            self.modelInsights = modelInsights
        }
    }

}

extension SageMakerClientTypes {

    public enum AutoMLMetricEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accuracy
        case auc
        case averageWeightedQuantileLoss
        case balancedAccuracy
        case f1
        case f1Macro
        case mae
        case mape
        case mase
        case mse
        case precision
        case precisionMacro
        case r2
        case recall
        case recallMacro
        case rmse
        case wape
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLMetricEnum] {
            return [
                .accuracy,
                .auc,
                .averageWeightedQuantileLoss,
                .balancedAccuracy,
                .f1,
                .f1Macro,
                .mae,
                .mape,
                .mase,
                .mse,
                .precision,
                .precisionMacro,
                .r2,
                .recall,
                .recallMacro,
                .rmse,
                .wape
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accuracy: return "Accuracy"
            case .auc: return "AUC"
            case .averageWeightedQuantileLoss: return "AverageWeightedQuantileLoss"
            case .balancedAccuracy: return "BalancedAccuracy"
            case .f1: return "F1"
            case .f1Macro: return "F1macro"
            case .mae: return "MAE"
            case .mape: return "MAPE"
            case .mase: return "MASE"
            case .mse: return "MSE"
            case .precision: return "Precision"
            case .precisionMacro: return "PrecisionMacro"
            case .r2: return "R2"
            case .recall: return "Recall"
            case .recallMacro: return "RecallMacro"
            case .rmse: return "RMSE"
            case .wape: return "WAPE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum MetricSetSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case test
        case train
        case validation
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricSetSource] {
            return [
                .test,
                .train,
                .validation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .test: return "Test"
            case .train: return "Train"
            case .validation: return "Validation"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum AutoMLMetricExtendedEnum: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accuracy
        case auc
        case averageWeightedQuantileLoss
        case balancedAccuracy
        case f1
        case f1Macro
        case inferenceLatency
        case logloss
        case mae
        case mape
        case mase
        case mse
        case perplexity
        case precision
        case precisionMacro
        case r2
        case recall
        case recallMacro
        case rmse
        case rouge1
        case rouge2
        case rougel
        case rougelSum
        case trainingLoss
        case validationLoss
        case wape
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLMetricExtendedEnum] {
            return [
                .accuracy,
                .auc,
                .averageWeightedQuantileLoss,
                .balancedAccuracy,
                .f1,
                .f1Macro,
                .inferenceLatency,
                .logloss,
                .mae,
                .mape,
                .mase,
                .mse,
                .perplexity,
                .precision,
                .precisionMacro,
                .r2,
                .recall,
                .recallMacro,
                .rmse,
                .rouge1,
                .rouge2,
                .rougel,
                .rougelSum,
                .trainingLoss,
                .validationLoss,
                .wape
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accuracy: return "Accuracy"
            case .auc: return "AUC"
            case .averageWeightedQuantileLoss: return "AverageWeightedQuantileLoss"
            case .balancedAccuracy: return "BalancedAccuracy"
            case .f1: return "F1"
            case .f1Macro: return "F1macro"
            case .inferenceLatency: return "InferenceLatency"
            case .logloss: return "LogLoss"
            case .mae: return "MAE"
            case .mape: return "MAPE"
            case .mase: return "MASE"
            case .mse: return "MSE"
            case .perplexity: return "Perplexity"
            case .precision: return "Precision"
            case .precisionMacro: return "PrecisionMacro"
            case .r2: return "R2"
            case .recall: return "Recall"
            case .recallMacro: return "RecallMacro"
            case .rmse: return "RMSE"
            case .rouge1: return "Rouge1"
            case .rouge2: return "Rouge2"
            case .rougel: return "RougeL"
            case .rougelSum: return "RougeLSum"
            case .trainingLoss: return "TrainingLoss"
            case .validationLoss: return "ValidationLoss"
            case .wape: return "WAPE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Information about the metric for a candidate produced by an AutoML job.
    public struct MetricDatum {
        /// The name of the metric.
        public var metricName: SageMakerClientTypes.AutoMLMetricEnum?
        /// The dataset split from which the AutoML job produced the metric.
        public var `set`: SageMakerClientTypes.MetricSetSource?
        /// The name of the standard metric. For definitions of the standard metrics, see [Autopilot candidate metrics](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-model-support-validation.html#autopilot-metrics).
        public var standardMetricName: SageMakerClientTypes.AutoMLMetricExtendedEnum?
        /// The value of the metric.
        public var value: Swift.Float?

        public init(
            metricName: SageMakerClientTypes.AutoMLMetricEnum? = nil,
            `set`: SageMakerClientTypes.MetricSetSource? = nil,
            standardMetricName: SageMakerClientTypes.AutoMLMetricExtendedEnum? = nil,
            value: Swift.Float? = nil
        )
        {
            self.metricName = metricName
            self.`set` = `set`
            self.standardMetricName = standardMetricName
            self.value = value
        }
    }

}

extension SageMakerClientTypes {
    /// The properties of an AutoML candidate job.
    public struct CandidateProperties {
        /// The Amazon S3 prefix to the artifacts generated for an AutoML candidate.
        public var candidateArtifactLocations: SageMakerClientTypes.CandidateArtifactLocations?
        /// Information about the candidate metrics for an AutoML job.
        public var candidateMetrics: [SageMakerClientTypes.MetricDatum]?

        public init(
            candidateArtifactLocations: SageMakerClientTypes.CandidateArtifactLocations? = nil,
            candidateMetrics: [SageMakerClientTypes.MetricDatum]? = nil
        )
        {
            self.candidateArtifactLocations = candidateArtifactLocations
            self.candidateMetrics = candidateMetrics
        }
    }

}

extension SageMakerClientTypes {

    public enum CandidateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [CandidateStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum CandidateStepType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case processing
        case training
        case transform
        case sdkUnknown(Swift.String)

        public static var allCases: [CandidateStepType] {
            return [
                .processing,
                .training,
                .transform
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .processing: return "AWS::SageMaker::ProcessingJob"
            case .training: return "AWS::SageMaker::TrainingJob"
            case .transform: return "AWS::SageMaker::TransformJob"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Information about the steps for a candidate and what step it is working on.
    public struct AutoMLCandidateStep {
        /// The ARN for the candidate's step.
        /// This member is required.
        public var candidateStepArn: Swift.String?
        /// The name for the candidate's step.
        /// This member is required.
        public var candidateStepName: Swift.String?
        /// Whether the candidate is at the transform, training, or processing step.
        /// This member is required.
        public var candidateStepType: SageMakerClientTypes.CandidateStepType?

        public init(
            candidateStepArn: Swift.String? = nil,
            candidateStepName: Swift.String? = nil,
            candidateStepType: SageMakerClientTypes.CandidateStepType? = nil
        )
        {
            self.candidateStepArn = candidateStepArn
            self.candidateStepName = candidateStepName
            self.candidateStepType = candidateStepType
        }
    }

}

extension SageMakerClientTypes {

    public enum AutoMLJobObjectiveType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case maximize
        case minimize
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLJobObjectiveType] {
            return [
                .maximize,
                .minimize
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .maximize: return "Maximize"
            case .minimize: return "Minimize"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The best candidate result from an AutoML training job.
    public struct FinalAutoMLJobObjectiveMetric {
        /// The name of the metric with the best result. For a description of the possible objective metrics, see [AutoMLJobObjective$MetricName](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLJobObjective.html).
        /// This member is required.
        public var metricName: SageMakerClientTypes.AutoMLMetricEnum?
        /// The name of the standard metric. For a description of the standard metrics, see [Autopilot candidate metrics](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-metrics-validation.html#autopilot-metrics).
        public var standardMetricName: SageMakerClientTypes.AutoMLMetricEnum?
        /// The type of metric with the best result.
        public var type: SageMakerClientTypes.AutoMLJobObjectiveType?
        /// The value of the metric with the best result.
        /// This member is required.
        public var value: Swift.Float?

        public init(
            metricName: SageMakerClientTypes.AutoMLMetricEnum? = nil,
            standardMetricName: SageMakerClientTypes.AutoMLMetricEnum? = nil,
            type: SageMakerClientTypes.AutoMLJobObjectiveType? = nil,
            value: Swift.Float? = nil
        )
        {
            self.metricName = metricName
            self.standardMetricName = standardMetricName
            self.type = type
            self.value = value
        }
    }

}

extension SageMakerClientTypes {

    public enum AutoMLProcessingUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cpu
        case gpu
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLProcessingUnit] {
            return [
                .cpu,
                .gpu
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cpu: return "CPU"
            case .gpu: return "GPU"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A list of container definitions that describe the different containers that make up an AutoML candidate. For more information, see [ ContainerDefinition](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ContainerDefinition.html).
    public struct AutoMLContainerDefinition {
        /// The environment variables to set in the container. For more information, see [ ContainerDefinition](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ContainerDefinition.html).
        public var environment: [Swift.String: Swift.String]?
        /// The Amazon Elastic Container Registry (Amazon ECR) path of the container. For more information, see [ ContainerDefinition](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ContainerDefinition.html).
        /// This member is required.
        public var image: Swift.String?
        /// The location of the model artifacts. For more information, see [ ContainerDefinition](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ContainerDefinition.html).
        /// This member is required.
        public var modelDataUrl: Swift.String?

        public init(
            environment: [Swift.String: Swift.String]? = nil,
            image: Swift.String? = nil,
            modelDataUrl: Swift.String? = nil
        )
        {
            self.environment = environment
            self.image = image
            self.modelDataUrl = modelDataUrl
        }
    }

}

extension SageMakerClientTypes {

    public enum ObjectiveStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case pending
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [ObjectiveStatus] {
            return [
                .failed,
                .pending,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .pending: return "Pending"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Information about a candidate produced by an AutoML training job, including its status, steps, and other properties.
    public struct AutoMLCandidate {
        /// The name of the candidate.
        /// This member is required.
        public var candidateName: Swift.String?
        /// The properties of an AutoML candidate job.
        public var candidateProperties: SageMakerClientTypes.CandidateProperties?
        /// The candidate's status.
        /// This member is required.
        public var candidateStatus: SageMakerClientTypes.CandidateStatus?
        /// Information about the candidate's steps.
        /// This member is required.
        public var candidateSteps: [SageMakerClientTypes.AutoMLCandidateStep]?
        /// The creation time.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The end time.
        public var endTime: Foundation.Date?
        /// The failure reason.
        public var failureReason: Swift.String?
        /// The best candidate result from an AutoML training job.
        public var finalAutoMLJobObjectiveMetric: SageMakerClientTypes.FinalAutoMLJobObjectiveMetric?
        /// The mapping of all supported processing unit (CPU, GPU, etc...) to inference container definitions for the candidate. This field is populated for the AutoML jobs V2 (for example, for jobs created by calling CreateAutoMLJobV2) related to image or text classification problem types only.
        public var inferenceContainerDefinitions: [Swift.String: [SageMakerClientTypes.AutoMLContainerDefinition]]?
        /// Information about the recommended inference container definitions.
        public var inferenceContainers: [SageMakerClientTypes.AutoMLContainerDefinition]?
        /// The last modified time.
        /// This member is required.
        public var lastModifiedTime: Foundation.Date?
        /// The objective's status.
        /// This member is required.
        public var objectiveStatus: SageMakerClientTypes.ObjectiveStatus?

        public init(
            candidateName: Swift.String? = nil,
            candidateProperties: SageMakerClientTypes.CandidateProperties? = nil,
            candidateStatus: SageMakerClientTypes.CandidateStatus? = nil,
            candidateSteps: [SageMakerClientTypes.AutoMLCandidateStep]? = nil,
            creationTime: Foundation.Date? = nil,
            endTime: Foundation.Date? = nil,
            failureReason: Swift.String? = nil,
            finalAutoMLJobObjectiveMetric: SageMakerClientTypes.FinalAutoMLJobObjectiveMetric? = nil,
            inferenceContainerDefinitions: [Swift.String: [SageMakerClientTypes.AutoMLContainerDefinition]]? = nil,
            inferenceContainers: [SageMakerClientTypes.AutoMLContainerDefinition]? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            objectiveStatus: SageMakerClientTypes.ObjectiveStatus? = nil
        )
        {
            self.candidateName = candidateName
            self.candidateProperties = candidateProperties
            self.candidateStatus = candidateStatus
            self.candidateSteps = candidateSteps
            self.creationTime = creationTime
            self.endTime = endTime
            self.failureReason = failureReason
            self.finalAutoMLJobObjectiveMetric = finalAutoMLJobObjectiveMetric
            self.inferenceContainerDefinitions = inferenceContainerDefinitions
            self.inferenceContainers = inferenceContainers
            self.lastModifiedTime = lastModifiedTime
            self.objectiveStatus = objectiveStatus
        }
    }

}

extension SageMakerClientTypes {
    /// Stores the configuration information for how a candidate is generated (optional).
    public struct AutoMLCandidateGenerationConfig {
        /// Stores the configuration information for the selection of algorithms trained on tabular data. The list of available algorithms to choose from depends on the training mode set in [TabularJobConfig.Mode](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TabularJobConfig.html).
        ///
        /// * AlgorithmsConfig should not be set if the training mode is set on AUTO.
        ///
        /// * When AlgorithmsConfig is provided, one AutoMLAlgorithms attribute must be set and one only. If the list of algorithms provided as values for AutoMLAlgorithms is empty, CandidateGenerationConfig uses the full set of algorithms for the given training mode.
        ///
        /// * When AlgorithmsConfig is not provided, CandidateGenerationConfig uses the full set of algorithms for the given training mode.
        ///
        ///
        /// For the list of all algorithms per problem type and training mode, see [ AutoMLAlgorithmConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLAlgorithmConfig.html). For more information on each algorithm, see the [Algorithm support](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-model-support-validation.html#autopilot-algorithm-support) section in Autopilot developer guide.
        public var algorithmsConfig: [SageMakerClientTypes.AutoMLAlgorithmConfig]?
        /// A URL to the Amazon S3 data source containing selected features from the input data source to run an Autopilot job. You can input FeatureAttributeNames (optional) in JSON format as shown below: { "FeatureAttributeNames":["col1", "col2", ...] }. You can also specify the data type of the feature (optional) in the format shown below: { "FeatureDataTypes":{"col1":"numeric", "col2":"categorical" ... } } These column keys may not include the target column. In ensembling mode, Autopilot only supports the following data types: numeric, categorical, text, and datetime. In HPO mode, Autopilot can support numeric, categorical, text, datetime, and sequence. If only FeatureDataTypes is provided, the column keys (col1, col2,..) should be a subset of the column names in the input data. If both FeatureDataTypes and FeatureAttributeNames are provided, then the column keys should be a subset of the column names provided in FeatureAttributeNames. The key name FeatureAttributeNames is fixed. The values listed in ["col1", "col2", ...] are case sensitive and should be a list of strings containing unique values that are a subset of the column names in the input data. The list of columns provided must not include the target column.
        public var featureSpecificationS3Uri: Swift.String?

        public init(
            algorithmsConfig: [SageMakerClientTypes.AutoMLAlgorithmConfig]? = nil,
            featureSpecificationS3Uri: Swift.String? = nil
        )
        {
            self.algorithmsConfig = algorithmsConfig
            self.featureSpecificationS3Uri = featureSpecificationS3Uri
        }
    }

}

extension SageMakerClientTypes {

    public enum AutoMLChannelType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case training
        case validation
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLChannelType] {
            return [
                .training,
                .validation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .training: return "training"
            case .validation: return "validation"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum AutoMLS3DataType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case augmentedManifestFile
        case manifestFile
        case s3Prefix
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLS3DataType] {
            return [
                .augmentedManifestFile,
                .manifestFile,
                .s3Prefix
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .augmentedManifestFile: return "AugmentedManifestFile"
            case .manifestFile: return "ManifestFile"
            case .s3Prefix: return "S3Prefix"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Describes the Amazon S3 data source.
    public struct AutoMLS3DataSource {
        /// The data type.
        ///
        /// * If you choose S3Prefix, S3Uri identifies a key name prefix. SageMaker uses all objects that match the specified key name prefix for model training. The S3Prefix should have the following format: s3://DOC-EXAMPLE-BUCKET/DOC-EXAMPLE-FOLDER-OR-FILE
        ///
        /// * If you choose ManifestFile, S3Uri identifies an object that is a manifest file containing a list of object keys that you want SageMaker to use for model training. A ManifestFile should have the format shown below: [ {"prefix": "s3://DOC-EXAMPLE-BUCKET/DOC-EXAMPLE-FOLDER/DOC-EXAMPLE-PREFIX/"}, "DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-1","DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-2",... "DOC-EXAMPLE-RELATIVE-PATH/DOC-EXAMPLE-FOLDER/DATA-N" ]
        ///
        /// * If you choose AugmentedManifestFile, S3Uri identifies an object that is an augmented manifest file in JSON lines format. This file contains the data you want to use for model training. AugmentedManifestFile is available for V2 API jobs only (for example, for jobs created by calling CreateAutoMLJobV2). Here is a minimal, single-record example of an AugmentedManifestFile: {"source-ref": "s3://DOC-EXAMPLE-BUCKET/DOC-EXAMPLE-FOLDER/cats/cat.jpg","label-metadata": {"class-name": "cat" } For more information on AugmentedManifestFile, see [Provide Dataset Metadata to Training Jobs with an Augmented Manifest File](https://docs.aws.amazon.com/sagemaker/latest/dg/augmented-manifest.html).
        /// This member is required.
        public var s3DataType: SageMakerClientTypes.AutoMLS3DataType?
        /// The URL to the Amazon S3 data source. The Uri refers to the Amazon S3 prefix or ManifestFile depending on the data type.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            s3DataType: SageMakerClientTypes.AutoMLS3DataType? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.s3DataType = s3DataType
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    /// The data source for the Autopilot job.
    public struct AutoMLDataSource {
        /// The Amazon S3 location of the input data.
        /// This member is required.
        public var s3DataSource: SageMakerClientTypes.AutoMLS3DataSource?

        public init(
            s3DataSource: SageMakerClientTypes.AutoMLS3DataSource? = nil
        )
        {
            self.s3DataSource = s3DataSource
        }
    }

}

extension SageMakerClientTypes {
    /// A channel is a named input source that training algorithms can consume. The validation dataset size is limited to less than 2 GB. The training dataset size must be less than 100 GB. For more information, see [ Channel](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Channel.html). A validation dataset must contain the same headers as the training dataset.
    public struct AutoMLChannel {
        /// The channel type (optional) is an enum string. The default value is training. Channels for training and validation must share the same ContentType and TargetAttributeName. For information on specifying training and validation channel types, see [How to specify training and validation datasets](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-datasets-problem-types.html#autopilot-data-sources-training-or-validation).
        public var channelType: SageMakerClientTypes.AutoMLChannelType?
        /// You can use Gzip or None. The default value is None.
        public var compressionType: SageMakerClientTypes.CompressionType?
        /// The content type of the data from the input source. You can use text/csv;header=present or x-application/vnd.amazon+parquet. The default value is text/csv;header=present.
        public var contentType: Swift.String?
        /// The data source for an AutoML channel.
        public var dataSource: SageMakerClientTypes.AutoMLDataSource?
        /// If specified, this column name indicates which column of the dataset should be treated as sample weights for use by the objective metric during the training, evaluation, and the selection of the best model. This column is not considered as a predictive feature. For more information on Autopilot metrics, see [Metrics and validation](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-metrics-validation.html). Sample weights should be numeric, non-negative, with larger values indicating which rows are more important than others. Data points that have invalid or no weight value are excluded. Support for sample weights is available in [Ensembling](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLAlgorithmConfig.html) mode only.
        public var sampleWeightAttributeName: Swift.String?
        /// The name of the target variable in supervised learning, usually represented by 'y'.
        /// This member is required.
        public var targetAttributeName: Swift.String?

        public init(
            channelType: SageMakerClientTypes.AutoMLChannelType? = nil,
            compressionType: SageMakerClientTypes.CompressionType? = nil,
            contentType: Swift.String? = nil,
            dataSource: SageMakerClientTypes.AutoMLDataSource? = nil,
            sampleWeightAttributeName: Swift.String? = nil,
            targetAttributeName: Swift.String? = nil
        )
        {
            self.channelType = channelType
            self.compressionType = compressionType
            self.contentType = contentType
            self.dataSource = dataSource
            self.sampleWeightAttributeName = sampleWeightAttributeName
            self.targetAttributeName = targetAttributeName
        }
    }

}

extension SageMakerClientTypes {
    /// This data type is intended for use exclusively by SageMaker Canvas and cannot be used in other contexts at the moment. Specifies the compute configuration for the EMR Serverless job.
    public struct EmrServerlessComputeConfig {
        /// The ARN of the IAM role granting the AutoML job V2 the necessary permissions access policies to list, connect to, or manage EMR Serverless jobs. For detailed information about the required permissions of this role, see "How to configure AutoML to initiate a remote job on EMR Serverless for large datasets" in [Create a regression or classification job for tabular data using the AutoML API](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development-create-experiment.html) or [Create an AutoML job for time-series forecasting using the API](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-create-experiment-timeseries-forecasting.html#timeseries-forecasting-api-optional-params).
        /// This member is required.
        public var executionRoleARN: Swift.String?

        public init(
            executionRoleARN: Swift.String? = nil
        )
        {
            self.executionRoleARN = executionRoleARN
        }
    }

}

extension SageMakerClientTypes {
    /// This data type is intended for use exclusively by SageMaker Canvas and cannot be used in other contexts at the moment. Specifies the compute configuration for an AutoML job V2.
    public struct AutoMLComputeConfig {
        /// The configuration for using [ EMR Serverless](https://docs.aws.amazon.com/emr/latest/EMR-Serverless-UserGuide/emr-serverless.html) to run the AutoML job V2. To allow your AutoML job V2 to automatically initiate a remote job on EMR Serverless when additional compute resources are needed to process large datasets, you need to provide an EmrServerlessComputeConfig object, which includes an ExecutionRoleARN attribute, to the AutoMLComputeConfig of the AutoML job V2 input request. By seamlessly transitioning to EMR Serverless when required, the AutoML job can handle datasets that would otherwise exceed the initially provisioned resources, without any manual intervention from you. EMR Serverless is available for the tabular and time series problem types. We recommend setting up this option for tabular datasets larger than 5 GB and time series datasets larger than 30 GB.
        public var emrServerlessComputeConfig: SageMakerClientTypes.EmrServerlessComputeConfig?

        public init(
            emrServerlessComputeConfig: SageMakerClientTypes.EmrServerlessComputeConfig? = nil
        )
        {
            self.emrServerlessComputeConfig = emrServerlessComputeConfig
        }
    }

}

extension SageMakerClientTypes {
    /// This structure specifies how to split the data into train and validation datasets. The validation and training datasets must contain the same headers. For jobs created by calling CreateAutoMLJob, the validation dataset must be less than 2 GB in size.
    public struct AutoMLDataSplitConfig {
        /// The validation fraction (optional) is a float that specifies the portion of the training dataset to be used for validation. The default value is 0.2, and values must be greater than 0 and less than 1. We recommend setting this value to be less than 0.5.
        public var validationFraction: Swift.Float?

        public init(
            validationFraction: Swift.Float? = nil
        )
        {
            self.validationFraction = validationFraction
        }
    }

}

extension SageMakerClientTypes {
    /// The artifacts that are generated during an AutoML job.
    public struct AutoMLJobArtifacts {
        /// The URL of the notebook location.
        public var candidateDefinitionNotebookLocation: Swift.String?
        /// The URL of the notebook location.
        public var dataExplorationNotebookLocation: Swift.String?

        public init(
            candidateDefinitionNotebookLocation: Swift.String? = nil,
            dataExplorationNotebookLocation: Swift.String? = nil
        )
        {
            self.candidateDefinitionNotebookLocation = candidateDefinitionNotebookLocation
            self.dataExplorationNotebookLocation = dataExplorationNotebookLocation
        }
    }

}

extension SageMakerClientTypes {
    /// A channel is a named input source that training algorithms can consume. This channel is used for AutoML jobs V2 (jobs created by calling [CreateAutoMLJobV2](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html)).
    public struct AutoMLJobChannel {
        /// The type of channel. Defines whether the data are used for training or validation. The default value is training. Channels for training and validation must share the same ContentType The type of channel defaults to training for the time-series forecasting problem type.
        public var channelType: SageMakerClientTypes.AutoMLChannelType?
        /// The allowed compression types depend on the input format and problem type. We allow the compression type Gzip for S3Prefix inputs on tabular data only. For all other inputs, the compression type should be None. If no compression type is provided, we default to None.
        public var compressionType: SageMakerClientTypes.CompressionType?
        /// The content type of the data from the input source. The following are the allowed content types for different problems:
        ///
        /// * For tabular problem types: text/csv;header=present or x-application/vnd.amazon+parquet. The default value is text/csv;header=present.
        ///
        /// * For image classification: image/png, image/jpeg, or image/*. The default value is image/*.
        ///
        /// * For text classification: text/csv;header=present or x-application/vnd.amazon+parquet. The default value is text/csv;header=present.
        ///
        /// * For time-series forecasting: text/csv;header=present or x-application/vnd.amazon+parquet. The default value is text/csv;header=present.
        ///
        /// * For text generation (LLMs fine-tuning): text/csv;header=present or x-application/vnd.amazon+parquet. The default value is text/csv;header=present.
        public var contentType: Swift.String?
        /// The data source for an AutoML channel (Required).
        public var dataSource: SageMakerClientTypes.AutoMLDataSource?

        public init(
            channelType: SageMakerClientTypes.AutoMLChannelType? = nil,
            compressionType: SageMakerClientTypes.CompressionType? = nil,
            contentType: Swift.String? = nil,
            dataSource: SageMakerClientTypes.AutoMLDataSource? = nil
        )
        {
            self.channelType = channelType
            self.compressionType = compressionType
            self.contentType = contentType
            self.dataSource = dataSource
        }
    }

}

extension SageMakerClientTypes {
    /// How long a job is allowed to run, or how many candidates a job is allowed to generate.
    public struct AutoMLJobCompletionCriteria {
        /// The maximum runtime, in seconds, an AutoML job has to complete. If an AutoML job exceeds the maximum runtime, the job is stopped automatically and its processing is ended gracefully. The AutoML job identifies the best model whose training was completed and marks it as the best-performing model. Any unfinished steps of the job, such as automatic one-click Autopilot model deployment, are not completed.
        public var maxAutoMLJobRuntimeInSeconds: Swift.Int?
        /// The maximum number of times a training job is allowed to run. For text and image classification, time-series forecasting, as well as text generation (LLMs fine-tuning) problem types, the supported value is 1. For tabular problem types, the maximum value is 750.
        public var maxCandidates: Swift.Int?
        /// The maximum time, in seconds, that each training job executed inside hyperparameter tuning is allowed to run as part of a hyperparameter tuning job. For more information, see the [StoppingCondition](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StoppingCondition.html) used by the [CreateHyperParameterTuningJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateHyperParameterTuningJob.html) action. For job V2s (jobs created by calling CreateAutoMLJobV2), this field controls the runtime of the job candidate. For [TextGenerationJobConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TextClassificationJobConfig.html) problem types, the maximum time defaults to 72 hours (259200 seconds).
        public var maxRuntimePerTrainingJobInSeconds: Swift.Int?

        public init(
            maxAutoMLJobRuntimeInSeconds: Swift.Int? = nil,
            maxCandidates: Swift.Int? = nil,
            maxRuntimePerTrainingJobInSeconds: Swift.Int? = nil
        )
        {
            self.maxAutoMLJobRuntimeInSeconds = maxAutoMLJobRuntimeInSeconds
            self.maxCandidates = maxCandidates
            self.maxRuntimePerTrainingJobInSeconds = maxRuntimePerTrainingJobInSeconds
        }
    }

}

extension SageMakerClientTypes {

    public enum AutoMLMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case ensembling
        case hyperparameterTuning
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLMode] {
            return [
                .auto,
                .ensembling,
                .hyperparameterTuning
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "AUTO"
            case .ensembling: return "ENSEMBLING"
            case .hyperparameterTuning: return "HYPERPARAMETER_TUNING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to. You can control access to and from your resources by configuring a VPC. For more information, see [Give SageMaker Access to Resources in your Amazon VPC](https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html).
    public struct VpcConfig {
        /// The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        /// This member is required.
        public var securityGroupIds: [Swift.String]?
        /// The ID of the subnets in the VPC to which you want to connect your training job or model. For information about the availability of specific instance types, see [Supported Instance Types and Availability Zones](https://docs.aws.amazon.com/sagemaker/latest/dg/instance-types-az.html).
        /// This member is required.
        public var subnets: [Swift.String]?

        public init(
            securityGroupIds: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
        }
    }

}

extension SageMakerClientTypes {
    /// Security options.
    public struct AutoMLSecurityConfig {
        /// Whether to use traffic encryption between the container layers.
        public var enableInterContainerTrafficEncryption: Swift.Bool?
        /// The key used to encrypt stored data.
        public var volumeKmsKeyId: Swift.String?
        /// The VPC configuration.
        public var vpcConfig: SageMakerClientTypes.VpcConfig?

        public init(
            enableInterContainerTrafficEncryption: Swift.Bool? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: SageMakerClientTypes.VpcConfig? = nil
        )
        {
            self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }

}

extension SageMakerClientTypes {
    /// A collection of settings used for an AutoML job.
    public struct AutoMLJobConfig {
        /// The configuration for generating a candidate for an AutoML job (optional).
        public var candidateGenerationConfig: SageMakerClientTypes.AutoMLCandidateGenerationConfig?
        /// How long an AutoML job is allowed to run, or how many candidates a job is allowed to generate.
        public var completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria?
        /// The configuration for splitting the input training dataset. Type: AutoMLDataSplitConfig
        public var dataSplitConfig: SageMakerClientTypes.AutoMLDataSplitConfig?
        /// The method that Autopilot uses to train the data. You can either specify the mode manually or let Autopilot choose for you based on the dataset size by selecting AUTO. In AUTO mode, Autopilot chooses ENSEMBLING for datasets smaller than 100 MB, and HYPERPARAMETER_TUNING for larger ones. The ENSEMBLING mode uses a multi-stack ensemble model to predict classification and regression tasks directly from your dataset. This machine learning mode combines several base models to produce an optimal predictive model. It then uses a stacking ensemble method to combine predictions from contributing members. A multi-stack ensemble model can provide better performance over a single model by combining the predictive capabilities of multiple models. See [Autopilot algorithm support](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-model-support-validation.html#autopilot-algorithm-support) for a list of algorithms supported by ENSEMBLING mode. The HYPERPARAMETER_TUNING (HPO) mode uses the best hyperparameters to train the best version of a model. HPO automatically selects an algorithm for the type of problem you want to solve. Then HPO finds the best hyperparameters according to your objective metric. See [Autopilot algorithm support](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-model-support-validation.html#autopilot-algorithm-support) for a list of algorithms supported by HYPERPARAMETER_TUNING mode.
        public var mode: SageMakerClientTypes.AutoMLMode?
        /// The security configuration for traffic encryption or Amazon VPC settings.
        public var securityConfig: SageMakerClientTypes.AutoMLSecurityConfig?

        public init(
            candidateGenerationConfig: SageMakerClientTypes.AutoMLCandidateGenerationConfig? = nil,
            completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria? = nil,
            dataSplitConfig: SageMakerClientTypes.AutoMLDataSplitConfig? = nil,
            mode: SageMakerClientTypes.AutoMLMode? = nil,
            securityConfig: SageMakerClientTypes.AutoMLSecurityConfig? = nil
        )
        {
            self.candidateGenerationConfig = candidateGenerationConfig
            self.completionCriteria = completionCriteria
            self.dataSplitConfig = dataSplitConfig
            self.mode = mode
            self.securityConfig = securityConfig
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies a metric to minimize or maximize as the objective of an AutoML job.
    public struct AutoMLJobObjective {
        /// The name of the objective metric used to measure the predictive quality of a machine learning system. During training, the model's parameters are updated iteratively to optimize its performance based on the feedback provided by the objective metric when evaluating the model on the validation dataset. The list of available metrics supported by Autopilot and the default metric applied when you do not specify a metric name explicitly depend on the problem type.
        ///
        /// * For tabular problem types:
        ///
        /// * List of available metrics:
        ///
        /// * Regression: MAE, MSE, R2, RMSE
        ///
        /// * Binary classification: Accuracy, AUC, BalancedAccuracy, F1, Precision, Recall
        ///
        /// * Multiclass classification: Accuracy, BalancedAccuracy, F1macro, PrecisionMacro, RecallMacro
        ///
        ///
        /// For a description of each metric, see [Autopilot metrics for classification and regression](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-metrics-validation.html#autopilot-metrics).
        ///
        /// * Default objective metrics:
        ///
        /// * Regression: MSE.
        ///
        /// * Binary classification: F1.
        ///
        /// * Multiclass classification: Accuracy.
        ///
        ///
        ///
        ///
        ///
        ///
        ///
        /// * For image or text classification problem types:
        ///
        /// * List of available metrics: Accuracy For a description of each metric, see [Autopilot metrics for text and image classification](https://docs.aws.amazon.com/sagemaker/latest/dg/text-classification-data-format-and-metric.html).
        ///
        /// * Default objective metrics: Accuracy
        ///
        ///
        ///
        ///
        /// * For time-series forecasting problem types:
        ///
        /// * List of available metrics: RMSE, wQL, Average wQL, MASE, MAPE, WAPE For a description of each metric, see [Autopilot metrics for time-series forecasting](https://docs.aws.amazon.com/sagemaker/latest/dg/timeseries-objective-metric.html).
        ///
        /// * Default objective metrics: AverageWeightedQuantileLoss
        ///
        ///
        ///
        ///
        /// * For text generation problem types (LLMs fine-tuning): Fine-tuning language models in Autopilot does not require setting the AutoMLJobObjective field. Autopilot fine-tunes LLMs without requiring multiple candidates to be trained and evaluated. Instead, using your dataset, Autopilot directly fine-tunes your target model to enhance a default objective metric, the cross-entropy loss. After fine-tuning a language model, you can evaluate the quality of its generated text using different metrics. For a list of the available metrics, see [Metrics for fine-tuning LLMs in Autopilot](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-llms-finetuning-metrics.html).
        /// This member is required.
        public var metricName: SageMakerClientTypes.AutoMLMetricEnum?

        public init(
            metricName: SageMakerClientTypes.AutoMLMetricEnum? = nil
        )
        {
            self.metricName = metricName
        }
    }

}

extension SageMakerClientTypes {

    public enum AutoMLJobSecondaryStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case analyzingData
        case candidateDefinitionsGenerated
        case completed
        case deployingModel
        case explainabilityError
        case failed
        case featureEngineering
        case generatingExplainabilityReport
        case generatingModelInsightsReport
        case maxAutoMlJobRuntimeReached
        case maxCandidatesReached
        case modelDeploymentError
        case modelInsightsError
        case modelTuning
        case preTraining
        case starting
        case stopped
        case stopping
        case trainingModels
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLJobSecondaryStatus] {
            return [
                .analyzingData,
                .candidateDefinitionsGenerated,
                .completed,
                .deployingModel,
                .explainabilityError,
                .failed,
                .featureEngineering,
                .generatingExplainabilityReport,
                .generatingModelInsightsReport,
                .maxAutoMlJobRuntimeReached,
                .maxCandidatesReached,
                .modelDeploymentError,
                .modelInsightsError,
                .modelTuning,
                .preTraining,
                .starting,
                .stopped,
                .stopping,
                .trainingModels
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .analyzingData: return "AnalyzingData"
            case .candidateDefinitionsGenerated: return "CandidateDefinitionsGenerated"
            case .completed: return "Completed"
            case .deployingModel: return "DeployingModel"
            case .explainabilityError: return "ExplainabilityError"
            case .failed: return "Failed"
            case .featureEngineering: return "FeatureEngineering"
            case .generatingExplainabilityReport: return "GeneratingExplainabilityReport"
            case .generatingModelInsightsReport: return "GeneratingModelInsightsReport"
            case .maxAutoMlJobRuntimeReached: return "MaxAutoMLJobRuntimeReached"
            case .maxCandidatesReached: return "MaxCandidatesReached"
            case .modelDeploymentError: return "ModelDeploymentError"
            case .modelInsightsError: return "ModelInsightsError"
            case .modelTuning: return "ModelTuning"
            case .preTraining: return "PreTraining"
            case .starting: return "Starting"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .trainingModels: return "TrainingModels"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum AutoMLJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLJobStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Metadata for an AutoML job step.
    public struct AutoMLJobStepMetadata {
        /// The Amazon Resource Name (ARN) of the AutoML job.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension SageMakerClientTypes {
    /// The reason for a partial failure of an AutoML job.
    public struct AutoMLPartialFailureReason {
        /// The message containing the reason for a partial failure of an AutoML job.
        public var partialFailureMessage: Swift.String?

        public init(
            partialFailureMessage: Swift.String? = nil
        )
        {
            self.partialFailureMessage = partialFailureMessage
        }
    }

}

extension SageMakerClientTypes {
    /// Provides a summary about an AutoML job.
    public struct AutoMLJobSummary {
        /// The ARN of the AutoML job.
        /// This member is required.
        public var autoMLJobArn: Swift.String?
        /// The name of the AutoML job you are requesting.
        /// This member is required.
        public var autoMLJobName: Swift.String?
        /// The secondary status of the AutoML job.
        /// This member is required.
        public var autoMLJobSecondaryStatus: SageMakerClientTypes.AutoMLJobSecondaryStatus?
        /// The status of the AutoML job.
        /// This member is required.
        public var autoMLJobStatus: SageMakerClientTypes.AutoMLJobStatus?
        /// When the AutoML job was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The end time of an AutoML job.
        public var endTime: Foundation.Date?
        /// The failure reason of an AutoML job.
        public var failureReason: Swift.String?
        /// When the AutoML job was last modified.
        /// This member is required.
        public var lastModifiedTime: Foundation.Date?
        /// The list of reasons for partial failures within an AutoML job.
        public var partialFailureReasons: [SageMakerClientTypes.AutoMLPartialFailureReason]?

        public init(
            autoMLJobArn: Swift.String? = nil,
            autoMLJobName: Swift.String? = nil,
            autoMLJobSecondaryStatus: SageMakerClientTypes.AutoMLJobSecondaryStatus? = nil,
            autoMLJobStatus: SageMakerClientTypes.AutoMLJobStatus? = nil,
            creationTime: Foundation.Date? = nil,
            endTime: Foundation.Date? = nil,
            failureReason: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            partialFailureReasons: [SageMakerClientTypes.AutoMLPartialFailureReason]? = nil
        )
        {
            self.autoMLJobArn = autoMLJobArn
            self.autoMLJobName = autoMLJobName
            self.autoMLJobSecondaryStatus = autoMLJobSecondaryStatus
            self.autoMLJobStatus = autoMLJobStatus
            self.creationTime = creationTime
            self.endTime = endTime
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.partialFailureReasons = partialFailureReasons
        }
    }

}

extension SageMakerClientTypes {
    /// The output data configuration.
    public struct AutoMLOutputDataConfig {
        /// The Key Management Service encryption key ID.
        public var kmsKeyId: Swift.String?
        /// The Amazon S3 output path. Must be 512 characters or less.
        /// This member is required.
        public var s3OutputPath: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3OutputPath = s3OutputPath
        }
    }

}

extension SageMakerClientTypes {
    /// The collection of settings used by an AutoML job V2 for the image classification problem type.
    public struct ImageClassificationJobConfig {
        /// How long a job is allowed to run, or how many candidates a job is allowed to generate.
        public var completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria?

        public init(
            completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria? = nil
        )
        {
            self.completionCriteria = completionCriteria
        }
    }

}

extension SageMakerClientTypes {
    /// Stores the configuration information for how model candidates are generated using an AutoML job V2.
    public struct CandidateGenerationConfig {
        /// Your Autopilot job trains a default set of algorithms on your dataset. For tabular and time-series data, you can customize the algorithm list by selecting a subset of algorithms for your problem type. AlgorithmsConfig stores the customized selection of algorithms to train on your data.
        ///
        /// * For the tabular problem type TabularJobConfig, the list of available algorithms to choose from depends on the training mode set in [AutoMLJobConfig.Mode](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLJobConfig.html).
        ///
        /// * AlgorithmsConfig should not be set when the training mode AutoMLJobConfig.Mode is set to AUTO.
        ///
        /// * When AlgorithmsConfig is provided, one AutoMLAlgorithms attribute must be set and one only. If the list of algorithms provided as values for AutoMLAlgorithms is empty, CandidateGenerationConfig uses the full set of algorithms for the given training mode.
        ///
        /// * When AlgorithmsConfig is not provided, CandidateGenerationConfig uses the full set of algorithms for the given training mode.
        ///
        ///
        /// For the list of all algorithms per training mode, see [ AlgorithmConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLAlgorithmConfig.html). For more information on each algorithm, see the [Algorithm support](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-model-support-validation.html#autopilot-algorithm-support) section in the Autopilot developer guide.
        ///
        /// * For the time-series forecasting problem type TimeSeriesForecastingJobConfig, choose your algorithms from the list provided in [ AlgorithmConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLAlgorithmConfig.html). For more information on each algorithm, see the [Algorithms support for time-series forecasting](https://docs.aws.amazon.com/sagemaker/latest/dg/timeseries-forecasting-algorithms.html) section in the Autopilot developer guide.
        ///
        /// * When AlgorithmsConfig is provided, one AutoMLAlgorithms attribute must be set and one only. If the list of algorithms provided as values for AutoMLAlgorithms is empty, CandidateGenerationConfig uses the full set of algorithms for time-series forecasting.
        ///
        /// * When AlgorithmsConfig is not provided, CandidateGenerationConfig uses the full set of algorithms for time-series forecasting.
        public var algorithmsConfig: [SageMakerClientTypes.AutoMLAlgorithmConfig]?

        public init(
            algorithmsConfig: [SageMakerClientTypes.AutoMLAlgorithmConfig]? = nil
        )
        {
            self.algorithmsConfig = algorithmsConfig
        }
    }

}

extension SageMakerClientTypes {

    public enum ProblemType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case binaryClassification
        case multiclassClassification
        case regression
        case sdkUnknown(Swift.String)

        public static var allCases: [ProblemType] {
            return [
                .binaryClassification,
                .multiclassClassification,
                .regression
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .binaryClassification: return "BinaryClassification"
            case .multiclassClassification: return "MulticlassClassification"
            case .regression: return "Regression"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The collection of settings used by an AutoML job V2 for the tabular problem type.
    public struct TabularJobConfig {
        /// The configuration information of how model candidates are generated.
        public var candidateGenerationConfig: SageMakerClientTypes.CandidateGenerationConfig?
        /// How long a job is allowed to run, or how many candidates a job is allowed to generate.
        public var completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria?
        /// A URL to the Amazon S3 data source containing selected features from the input data source to run an Autopilot job V2. You can input FeatureAttributeNames (optional) in JSON format as shown below: { "FeatureAttributeNames":["col1", "col2", ...] }. You can also specify the data type of the feature (optional) in the format shown below: { "FeatureDataTypes":{"col1":"numeric", "col2":"categorical" ... } } These column keys may not include the target column. In ensembling mode, Autopilot only supports the following data types: numeric, categorical, text, and datetime. In HPO mode, Autopilot can support numeric, categorical, text, datetime, and sequence. If only FeatureDataTypes is provided, the column keys (col1, col2,..) should be a subset of the column names in the input data. If both FeatureDataTypes and FeatureAttributeNames are provided, then the column keys should be a subset of the column names provided in FeatureAttributeNames. The key name FeatureAttributeNames is fixed. The values listed in ["col1", "col2", ...] are case sensitive and should be a list of strings containing unique values that are a subset of the column names in the input data. The list of columns provided must not include the target column.
        public var featureSpecificationS3Uri: Swift.String?
        /// Generates possible candidates without training the models. A model candidate is a combination of data preprocessors, algorithms, and algorithm parameter settings.
        public var generateCandidateDefinitionsOnly: Swift.Bool?
        /// The method that Autopilot uses to train the data. You can either specify the mode manually or let Autopilot choose for you based on the dataset size by selecting AUTO. In AUTO mode, Autopilot chooses ENSEMBLING for datasets smaller than 100 MB, and HYPERPARAMETER_TUNING for larger ones. The ENSEMBLING mode uses a multi-stack ensemble model to predict classification and regression tasks directly from your dataset. This machine learning mode combines several base models to produce an optimal predictive model. It then uses a stacking ensemble method to combine predictions from contributing members. A multi-stack ensemble model can provide better performance over a single model by combining the predictive capabilities of multiple models. See [Autopilot algorithm support](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-model-support-validation.html#autopilot-algorithm-support) for a list of algorithms supported by ENSEMBLING mode. The HYPERPARAMETER_TUNING (HPO) mode uses the best hyperparameters to train the best version of a model. HPO automatically selects an algorithm for the type of problem you want to solve. Then HPO finds the best hyperparameters according to your objective metric. See [Autopilot algorithm support](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-model-support-validation.html#autopilot-algorithm-support) for a list of algorithms supported by HYPERPARAMETER_TUNING mode.
        public var mode: SageMakerClientTypes.AutoMLMode?
        /// The type of supervised learning problem available for the model candidates of the AutoML job V2. For more information, see [ SageMaker Autopilot problem types](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-datasets-problem-types.html#autopilot-problem-types). You must either specify the type of supervised learning problem in ProblemType and provide the [AutoMLJobObjective](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJobV2.html#sagemaker-CreateAutoMLJobV2-request-AutoMLJobObjective) metric, or none at all.
        public var problemType: SageMakerClientTypes.ProblemType?
        /// If specified, this column name indicates which column of the dataset should be treated as sample weights for use by the objective metric during the training, evaluation, and the selection of the best model. This column is not considered as a predictive feature. For more information on Autopilot metrics, see [Metrics and validation](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-metrics-validation.html). Sample weights should be numeric, non-negative, with larger values indicating which rows are more important than others. Data points that have invalid or no weight value are excluded. Support for sample weights is available in [Ensembling](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLAlgorithmConfig.html) mode only.
        public var sampleWeightAttributeName: Swift.String?
        /// The name of the target variable in supervised learning, usually represented by 'y'.
        /// This member is required.
        public var targetAttributeName: Swift.String?

        public init(
            candidateGenerationConfig: SageMakerClientTypes.CandidateGenerationConfig? = nil,
            completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria? = nil,
            featureSpecificationS3Uri: Swift.String? = nil,
            generateCandidateDefinitionsOnly: Swift.Bool? = nil,
            mode: SageMakerClientTypes.AutoMLMode? = nil,
            problemType: SageMakerClientTypes.ProblemType? = nil,
            sampleWeightAttributeName: Swift.String? = nil,
            targetAttributeName: Swift.String? = nil
        )
        {
            self.candidateGenerationConfig = candidateGenerationConfig
            self.completionCriteria = completionCriteria
            self.featureSpecificationS3Uri = featureSpecificationS3Uri
            self.generateCandidateDefinitionsOnly = generateCandidateDefinitionsOnly
            self.mode = mode
            self.problemType = problemType
            self.sampleWeightAttributeName = sampleWeightAttributeName
            self.targetAttributeName = targetAttributeName
        }
    }

}

extension SageMakerClientTypes {
    /// The collection of settings used by an AutoML job V2 for the text classification problem type.
    public struct TextClassificationJobConfig {
        /// How long a job is allowed to run, or how many candidates a job is allowed to generate.
        public var completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria?
        /// The name of the column used to provide the sentences to be classified. It should not be the same as the target column.
        /// This member is required.
        public var contentColumn: Swift.String?
        /// The name of the column used to provide the class labels. It should not be same as the content column.
        /// This member is required.
        public var targetLabelColumn: Swift.String?

        public init(
            completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria? = nil,
            contentColumn: Swift.String? = nil,
            targetLabelColumn: Swift.String? = nil
        )
        {
            self.completionCriteria = completionCriteria
            self.contentColumn = contentColumn
            self.targetLabelColumn = targetLabelColumn
        }
    }

}

extension SageMakerClientTypes {
    /// The collection of settings used by an AutoML job V2 for the text generation problem type. The text generation models that support fine-tuning in Autopilot are currently accessible exclusively in regions supported by Canvas. Refer to the documentation of Canvas for the [full list of its supported Regions](https://docs.aws.amazon.com/sagemaker/latest/dg/canvas.html).
    public struct TextGenerationJobConfig {
        /// The name of the base model to fine-tune. Autopilot supports fine-tuning a variety of large language models. For information on the list of supported models, see [Text generation models supporting fine-tuning in Autopilot](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-llms-finetuning-models.html#autopilot-llms-finetuning-supported-llms). If no BaseModelName is provided, the default model used is Falcon7BInstruct.
        public var baseModelName: Swift.String?
        /// How long a fine-tuning job is allowed to run. For TextGenerationJobConfig problem types, the MaxRuntimePerTrainingJobInSeconds attribute of AutoMLJobCompletionCriteria defaults to 72h (259200s).
        public var completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria?
        /// The access configuration file to control access to the ML model. You can explicitly accept the model end-user license agreement (EULA) within the ModelAccessConfig.
        ///
        /// * If you are a Jumpstart user, see the [End-user license agreements](https://docs.aws.amazon.com/sagemaker/latest/dg/jumpstart-foundation-models-choose.html#jumpstart-foundation-models-choose-eula) section for more details on accepting the EULA.
        ///
        /// * If you are an AutoML user, see the Optional Parameters section of Create an AutoML job to fine-tune text generation models using the API for details on [How to set the EULA acceptance when fine-tuning a model using the AutoML API](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-create-experiment-finetune-llms.html#autopilot-llms-finetuning-api-optional-params).
        public var modelAccessConfig: SageMakerClientTypes.ModelAccessConfig?
        /// The hyperparameters used to configure and optimize the learning process of the base model. You can set any combination of the following hyperparameters for all base models. For more information on each supported hyperparameter, see [Optimize the learning process of your text generation models with hyperparameters](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-llms-finetuning-set-hyperparameters.html).
        ///
        /// * "epochCount": The number of times the model goes through the entire training dataset. Its value should be a string containing an integer value within the range of "1" to "10".
        ///
        /// * "batchSize": The number of data samples used in each iteration of training. Its value should be a string containing an integer value within the range of "1" to "64".
        ///
        /// * "learningRate": The step size at which a model's parameters are updated during training. Its value should be a string containing a floating-point value within the range of "0" to "1".
        ///
        /// * "learningRateWarmupSteps": The number of training steps during which the learning rate gradually increases before reaching its target or maximum value. Its value should be a string containing an integer value within the range of "0" to "250".
        ///
        ///
        /// Here is an example where all four hyperparameters are configured. { "epochCount":"5", "learningRate":"0.5", "batchSize": "32", "learningRateWarmupSteps": "10" }
        public var textGenerationHyperParameters: [Swift.String: Swift.String]?

        public init(
            baseModelName: Swift.String? = nil,
            completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria? = nil,
            modelAccessConfig: SageMakerClientTypes.ModelAccessConfig? = nil,
            textGenerationHyperParameters: [Swift.String: Swift.String]? = nil
        )
        {
            self.baseModelName = baseModelName
            self.completionCriteria = completionCriteria
            self.modelAccessConfig = modelAccessConfig
            self.textGenerationHyperParameters = textGenerationHyperParameters
        }
    }

}

extension SageMakerClientTypes {
    /// Stores the holiday featurization attributes applicable to each item of time-series datasets during the training of a forecasting model. This allows the model to identify patterns associated with specific holidays.
    public struct HolidayConfigAttributes {
        /// The country code for the holiday calendar. For the list of public holiday calendars supported by AutoML job V2, see [Country Codes](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-timeseries-forecasting-holiday-calendars.html#holiday-country-codes). Use the country code corresponding to the country of your choice.
        public var countryCode: Swift.String?

        public init(
            countryCode: Swift.String? = nil
        )
        {
            self.countryCode = countryCode
        }
    }

}

extension SageMakerClientTypes {
    /// The collection of components that defines the time-series.
    public struct TimeSeriesConfig {
        /// A set of columns names that can be grouped with the item identifier column to create a composite key for which a target value is predicted.
        public var groupingAttributeNames: [Swift.String]?
        /// The name of the column that represents the set of item identifiers for which you want to predict the target value.
        /// This member is required.
        public var itemIdentifierAttributeName: Swift.String?
        /// The name of the column representing the target variable that you want to predict for each item in your dataset. The data type of the target variable must be numerical.
        /// This member is required.
        public var targetAttributeName: Swift.String?
        /// The name of the column indicating a point in time at which the target value of a given item is recorded.
        /// This member is required.
        public var timestampAttributeName: Swift.String?

        public init(
            groupingAttributeNames: [Swift.String]? = nil,
            itemIdentifierAttributeName: Swift.String? = nil,
            targetAttributeName: Swift.String? = nil,
            timestampAttributeName: Swift.String? = nil
        )
        {
            self.groupingAttributeNames = groupingAttributeNames
            self.itemIdentifierAttributeName = itemIdentifierAttributeName
            self.targetAttributeName = targetAttributeName
            self.timestampAttributeName = timestampAttributeName
        }
    }

}

extension SageMakerClientTypes {

    public enum FillingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case backfill
        case backfillvalue
        case frontfill
        case frontfillvalue
        case futurefill
        case futurefillvalue
        case middlefill
        case middlefillvalue
        case sdkUnknown(Swift.String)

        public static var allCases: [FillingType] {
            return [
                .backfill,
                .backfillvalue,
                .frontfill,
                .frontfillvalue,
                .futurefill,
                .futurefillvalue,
                .middlefill,
                .middlefillvalue
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .backfill: return "backfill"
            case .backfillvalue: return "backfill_value"
            case .frontfill: return "frontfill"
            case .frontfillvalue: return "frontfill_value"
            case .futurefill: return "futurefill"
            case .futurefillvalue: return "futurefill_value"
            case .middlefill: return "middlefill"
            case .middlefillvalue: return "middlefill_value"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Transformations allowed on the dataset. Supported transformations are Filling and Aggregation. Filling specifies how to add values to missing values in the dataset. Aggregation defines how to aggregate data that does not align with forecast frequency.
    public struct TimeSeriesTransformations {
        /// A key value pair defining the aggregation method for a column, where the key is the column name and the value is the aggregation method. The supported aggregation methods are sum (default), avg, first, min, max. Aggregation is only supported for the target column.
        public var aggregation: [Swift.String: SageMakerClientTypes.AggregationTransformationValue]?
        /// A key value pair defining the filling method for a column, where the key is the column name and the value is an object which defines the filling logic. You can specify multiple filling methods for a single column. The supported filling methods and their corresponding options are:
        ///
        /// * frontfill: none (Supported only for target column)
        ///
        /// * middlefill: zero, value, median, mean, min, max
        ///
        /// * backfill: zero, value, median, mean, min, max
        ///
        /// * futurefill: zero, value, median, mean, min, max
        ///
        ///
        /// To set a filling method to a specific value, set the fill parameter to the chosen filling method value (for example "backfill" : "value"), and define the filling value in an additional parameter prefixed with "_value". For example, to set backfill to a value of 2, you must include two parameters: "backfill": "value" and "backfill_value":"2".
        public var filling: [Swift.String: [Swift.String: Swift.String]]?

        public init(
            aggregation: [Swift.String: SageMakerClientTypes.AggregationTransformationValue]? = nil,
            filling: [Swift.String: [Swift.String: Swift.String]]? = nil
        )
        {
            self.aggregation = aggregation
            self.filling = filling
        }
    }

}

extension SageMakerClientTypes {
    /// The collection of settings used by an AutoML job V2 for the time-series forecasting problem type.
    public struct TimeSeriesForecastingJobConfig {
        /// Stores the configuration information for how model candidates are generated using an AutoML job V2.
        public var candidateGenerationConfig: SageMakerClientTypes.CandidateGenerationConfig?
        /// How long a job is allowed to run, or how many candidates a job is allowed to generate.
        public var completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria?
        /// A URL to the Amazon S3 data source containing additional selected features that complement the target, itemID, timestamp, and grouped columns set in TimeSeriesConfig. When not provided, the AutoML job V2 includes all the columns from the original dataset that are not already declared in TimeSeriesConfig. If provided, the AutoML job V2 only considers these additional columns as a complement to the ones declared in TimeSeriesConfig. You can input FeatureAttributeNames (optional) in JSON format as shown below: { "FeatureAttributeNames":["col1", "col2", ...] }. You can also specify the data type of the feature (optional) in the format shown below: { "FeatureDataTypes":{"col1":"numeric", "col2":"categorical" ... } } Autopilot supports the following data types: numeric, categorical, text, and datetime. These column keys must not include any column set in TimeSeriesConfig.
        public var featureSpecificationS3Uri: Swift.String?
        /// The frequency of predictions in a forecast. Valid intervals are an integer followed by Y (Year), M (Month), W (Week), D (Day), H (Hour), and min (Minute). For example, 1D indicates every day and 15min indicates every 15 minutes. The value of a frequency must not overlap with the next larger frequency. For example, you must use a frequency of 1H instead of 60min. The valid values for each frequency are the following:
        ///
        /// * Minute - 1-59
        ///
        /// * Hour - 1-23
        ///
        /// * Day - 1-6
        ///
        /// * Week - 1-4
        ///
        /// * Month - 1-11
        ///
        /// * Year - 1
        /// This member is required.
        public var forecastFrequency: Swift.String?
        /// The number of time-steps that the model predicts. The forecast horizon is also called the prediction length. The maximum forecast horizon is the lesser of 500 time-steps or 1/4 of the time-steps in the dataset.
        /// This member is required.
        public var forecastHorizon: Swift.Int?
        /// The quantiles used to train the model for forecasts at a specified quantile. You can specify quantiles from 0.01 (p1) to 0.99 (p99), by increments of 0.01 or higher. Up to five forecast quantiles can be specified. When ForecastQuantiles is not provided, the AutoML job uses the quantiles p10, p50, and p90 as default.
        public var forecastQuantiles: [Swift.String]?
        /// The collection of holiday featurization attributes used to incorporate national holiday information into your forecasting model.
        public var holidayConfig: [SageMakerClientTypes.HolidayConfigAttributes]?
        /// The collection of components that defines the time-series.
        /// This member is required.
        public var timeSeriesConfig: SageMakerClientTypes.TimeSeriesConfig?
        /// The transformations modifying specific attributes of the time-series, such as filling strategies for missing values.
        public var transformations: SageMakerClientTypes.TimeSeriesTransformations?

        public init(
            candidateGenerationConfig: SageMakerClientTypes.CandidateGenerationConfig? = nil,
            completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria? = nil,
            featureSpecificationS3Uri: Swift.String? = nil,
            forecastFrequency: Swift.String? = nil,
            forecastHorizon: Swift.Int? = nil,
            forecastQuantiles: [Swift.String]? = nil,
            holidayConfig: [SageMakerClientTypes.HolidayConfigAttributes]? = nil,
            timeSeriesConfig: SageMakerClientTypes.TimeSeriesConfig? = nil,
            transformations: SageMakerClientTypes.TimeSeriesTransformations? = nil
        )
        {
            self.candidateGenerationConfig = candidateGenerationConfig
            self.completionCriteria = completionCriteria
            self.featureSpecificationS3Uri = featureSpecificationS3Uri
            self.forecastFrequency = forecastFrequency
            self.forecastHorizon = forecastHorizon
            self.forecastQuantiles = forecastQuantiles
            self.holidayConfig = holidayConfig
            self.timeSeriesConfig = timeSeriesConfig
            self.transformations = transformations
        }
    }

}

extension SageMakerClientTypes {
    /// A collection of settings specific to the problem type used to configure an AutoML job V2. There must be one and only one config of the following type.
    public enum AutoMLProblemTypeConfig {
        /// Settings used to configure an AutoML job V2 for the image classification problem type.
        case imageclassificationjobconfig(SageMakerClientTypes.ImageClassificationJobConfig)
        /// Settings used to configure an AutoML job V2 for the text classification problem type.
        case textclassificationjobconfig(SageMakerClientTypes.TextClassificationJobConfig)
        /// Settings used to configure an AutoML job V2 for the time-series forecasting problem type.
        case timeseriesforecastingjobconfig(SageMakerClientTypes.TimeSeriesForecastingJobConfig)
        /// Settings used to configure an AutoML job V2 for the tabular problem type (regression, classification).
        case tabularjobconfig(SageMakerClientTypes.TabularJobConfig)
        /// Settings used to configure an AutoML job V2 for the text generation (LLMs fine-tuning) problem type. The text generation models that support fine-tuning in Autopilot are currently accessible exclusively in regions supported by Canvas. Refer to the documentation of Canvas for the [full list of its supported Regions](https://docs.aws.amazon.com/sagemaker/latest/dg/canvas.html).
        case textgenerationjobconfig(SageMakerClientTypes.TextGenerationJobConfig)
        case sdkUnknown(Swift.String)
    }

}

extension SageMakerClientTypes {

    public enum AutoMLProblemTypeConfigName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case imageClassification
        case tabular
        case textClassification
        case textGeneration
        case timeseriesForecasting
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLProblemTypeConfigName] {
            return [
                .imageClassification,
                .tabular,
                .textClassification,
                .textGeneration,
                .timeseriesForecasting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .imageClassification: return "ImageClassification"
            case .tabular: return "Tabular"
            case .textClassification: return "TextClassification"
            case .textGeneration: return "TextGeneration"
            case .timeseriesForecasting: return "TimeSeriesForecasting"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The resolved attributes specific to the tabular problem type.
    public struct TabularResolvedAttributes {
        /// The type of supervised learning problem available for the model candidates of the AutoML job V2 (Binary Classification, Multiclass Classification, Regression). For more information, see [ SageMaker Autopilot problem types](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-datasets-problem-types.html#autopilot-problem-types).
        public var problemType: SageMakerClientTypes.ProblemType?

        public init(
            problemType: SageMakerClientTypes.ProblemType? = nil
        )
        {
            self.problemType = problemType
        }
    }

}

extension SageMakerClientTypes {
    /// The resolved attributes specific to the text generation problem type.
    public struct TextGenerationResolvedAttributes {
        /// The name of the base model to fine-tune.
        public var baseModelName: Swift.String?

        public init(
            baseModelName: Swift.String? = nil
        )
        {
            self.baseModelName = baseModelName
        }
    }

}

extension SageMakerClientTypes {
    /// Stores resolved attributes specific to the problem type of an AutoML job V2.
    public enum AutoMLProblemTypeResolvedAttributes {
        /// The resolved attributes for the tabular problem type.
        case tabularresolvedattributes(SageMakerClientTypes.TabularResolvedAttributes)
        /// The resolved attributes for the text generation problem type.
        case textgenerationresolvedattributes(SageMakerClientTypes.TextGenerationResolvedAttributes)
        case sdkUnknown(Swift.String)
    }

}

extension SageMakerClientTypes {
    /// The resolved attributes used to configure an AutoML job V2.
    public struct AutoMLResolvedAttributes {
        /// Specifies a metric to minimize or maximize as the objective of an AutoML job.
        public var autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective?
        /// Defines the resolved attributes specific to a problem type.
        public var autoMLProblemTypeResolvedAttributes: SageMakerClientTypes.AutoMLProblemTypeResolvedAttributes?
        /// How long a job is allowed to run, or how many candidates a job is allowed to generate.
        public var completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria?

        public init(
            autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective? = nil,
            autoMLProblemTypeResolvedAttributes: SageMakerClientTypes.AutoMLProblemTypeResolvedAttributes? = nil,
            completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria? = nil
        )
        {
            self.autoMLJobObjective = autoMLJobObjective
            self.autoMLProblemTypeResolvedAttributes = autoMLProblemTypeResolvedAttributes
            self.completionCriteria = completionCriteria
        }
    }

}

extension SageMakerClientTypes {

    public enum AutoMLSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLSortBy] {
            return [
                .creationTime,
                .name,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum AutoMLSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMLSortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum AutoMountHomeEFS: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case defaultAsDomain
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AutoMountHomeEFS] {
            return [
                .defaultAsDomain,
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .defaultAsDomain: return "DefaultAsDomain"
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The name and an example value of the hyperparameter that you want to use in Autotune. If Automatic model tuning (AMT) determines that your hyperparameter is eligible for Autotune, an optimal hyperparameter range is selected for you.
    public struct AutoParameter {
        /// The name of the hyperparameter to optimize using Autotune.
        /// This member is required.
        public var name: Swift.String?
        /// An example value of the hyperparameter to optimize using Autotune.
        /// This member is required.
        public var valueHint: Swift.String?

        public init(
            name: Swift.String? = nil,
            valueHint: Swift.String? = nil
        )
        {
            self.name = name
            self.valueHint = valueHint
        }
    }

}

extension SageMakerClientTypes {
    /// Automatic rollback configuration for handling endpoint deployment failures and recovery.
    public struct AutoRollbackConfig {
        /// List of CloudWatch alarms in your account that are configured to monitor metrics on an endpoint. If any alarms are tripped during a deployment, SageMaker rolls back the deployment.
        public var alarms: [SageMakerClientTypes.Alarm]?

        public init(
            alarms: [SageMakerClientTypes.Alarm]? = nil
        )
        {
            self.alarms = alarms
        }
    }

}

extension SageMakerClientTypes {

    public enum AutotuneMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AutotuneMode] {
            return [
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A flag to indicate if you want to use Autotune to automatically find optimal values for the following fields:
    ///
    /// * [ParameterRanges](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html#sagemaker-Type-HyperParameterTuningJobConfig-ParameterRanges): The names and ranges of parameters that a hyperparameter tuning job can optimize.
    ///
    /// * [ResourceLimits](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ResourceLimits.html): The maximum resources that can be used for a training job. These resources include the maximum number of training jobs, the maximum runtime of a tuning job, and the maximum number of training jobs to run at the same time.
    ///
    /// * [TrainingJobEarlyStoppingType](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html#sagemaker-Type-HyperParameterTuningJobConfig-TrainingJobEarlyStoppingType): A flag that specifies whether or not to use early stopping for training jobs launched by a hyperparameter tuning job.
    ///
    /// * [RetryStrategy](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-RetryStrategy): The number of times to retry a training job.
    ///
    /// * [Strategy](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html): Specifies how hyperparameter tuning chooses the combinations of hyperparameter values to use for the training jobs that it launches.
    ///
    /// * [ConvergenceDetected](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ConvergenceDetected.html): A flag to indicate that Automatic model tuning (AMT) has detected model convergence.
    public struct Autotune {
        /// Set Mode to Enabled if you want to use Autotune.
        /// This member is required.
        public var mode: SageMakerClientTypes.AutotuneMode?

        public init(
            mode: SageMakerClientTypes.AutotuneMode? = nil
        )
        {
            self.mode = mode
        }
    }

}

extension SageMakerClientTypes {

    public enum AwsManagedHumanLoopRequestSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case rekognitionDetectModerationLabelsImageV3
        case textractAnalyzeDocumentFormsV1
        case sdkUnknown(Swift.String)

        public static var allCases: [AwsManagedHumanLoopRequestSource] {
            return [
                .rekognitionDetectModerationLabelsImageV3,
                .textractAnalyzeDocumentFormsV1
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .rekognitionDetectModerationLabelsImageV3: return "AWS/Rekognition/DetectModerationLabels/Image/V3"
            case .textractAnalyzeDocumentFormsV1: return "AWS/Textract/AnalyzeDocument/Forms/V1"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Configuration to control how SageMaker captures inference data for batch transform jobs.
    public struct BatchDataCaptureConfig {
        /// The Amazon S3 location being used to capture the data.
        /// This member is required.
        public var destinationS3Uri: Swift.String?
        /// Flag that indicates whether to append inference id to the output.
        public var generateInferenceId: Swift.Bool?
        /// The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the batch transform job. The KmsKeyId can be any of the following formats:
        ///
        /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Key ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Alias name: alias/ExampleAlias
        ///
        /// * Alias name ARN: arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias
        public var kmsKeyId: Swift.String?

        public init(
            destinationS3Uri: Swift.String? = nil,
            generateInferenceId: Swift.Bool? = nil,
            kmsKeyId: Swift.String? = nil
        )
        {
            self.destinationS3Uri = destinationS3Uri
            self.generateInferenceId = generateInferenceId
            self.kmsKeyId = kmsKeyId
        }
    }

}

public struct BatchDescribeModelPackageInput {
    /// The list of Amazon Resource Name (ARN) of the model package groups.
    /// This member is required.
    public var modelPackageArnList: [Swift.String]?

    public init(
        modelPackageArnList: [Swift.String]? = nil
    )
    {
        self.modelPackageArnList = modelPackageArnList
    }
}

extension SageMakerClientTypes {
    /// The error code and error description associated with the resource.
    public struct BatchDescribeModelPackageError {
        ///
        /// This member is required.
        public var errorCode: Swift.String?
        ///
        /// This member is required.
        public var errorResponse: Swift.String?

        public init(
            errorCode: Swift.String? = nil,
            errorResponse: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorResponse = errorResponse
        }
    }

}

extension SageMakerClientTypes {
    /// Defines how to perform inference generation after a training job is run.
    public struct InferenceSpecification {
        /// The Amazon ECR registry path of the Docker image that contains the inference code.
        /// This member is required.
        public var containers: [SageMakerClientTypes.ModelPackageContainerDefinition]?
        /// The supported MIME types for the input data.
        public var supportedContentTypes: [Swift.String]?
        /// A list of the instance types that are used to generate inferences in real-time. This parameter is required for unversioned models, and optional for versioned models.
        public var supportedRealtimeInferenceInstanceTypes: [SageMakerClientTypes.ProductionVariantInstanceType]?
        /// The supported MIME types for the output data.
        public var supportedResponseMIMETypes: [Swift.String]?
        /// A list of the instance types on which a transformation job can be run or on which an endpoint can be deployed. This parameter is required for unversioned models, and optional for versioned models.
        public var supportedTransformInstanceTypes: [SageMakerClientTypes.TransformInstanceType]?

        public init(
            containers: [SageMakerClientTypes.ModelPackageContainerDefinition]? = nil,
            supportedContentTypes: [Swift.String]? = nil,
            supportedRealtimeInferenceInstanceTypes: [SageMakerClientTypes.ProductionVariantInstanceType]? = nil,
            supportedResponseMIMETypes: [Swift.String]? = nil,
            supportedTransformInstanceTypes: [SageMakerClientTypes.TransformInstanceType]? = nil
        )
        {
            self.containers = containers
            self.supportedContentTypes = supportedContentTypes
            self.supportedRealtimeInferenceInstanceTypes = supportedRealtimeInferenceInstanceTypes
            self.supportedResponseMIMETypes = supportedResponseMIMETypes
            self.supportedTransformInstanceTypes = supportedTransformInstanceTypes
        }
    }

}

extension SageMakerClientTypes {

    public enum ModelApprovalStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case approved
        case pendingManualApproval
        case rejected
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelApprovalStatus] {
            return [
                .approved,
                .pendingManualApproval,
                .rejected
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .approved: return "Approved"
            case .pendingManualApproval: return "PendingManualApproval"
            case .rejected: return "Rejected"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum ModelPackageStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case deleting
        case failed
        case inProgress
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelPackageStatus] {
            return [
                .completed,
                .deleting,
                .failed,
                .inProgress,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .pending: return "Pending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Provides summary information about the model package.
    public struct BatchDescribeModelPackageSummary {
        /// The creation time of the mortgage package summary.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// Defines how to perform inference generation after a training job is run.
        /// This member is required.
        public var inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
        /// The approval status of the model.
        public var modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
        /// The Amazon Resource Name (ARN) of the model package.
        /// This member is required.
        public var modelPackageArn: Swift.String?
        /// The description of the model package.
        public var modelPackageDescription: Swift.String?
        /// The group name for the model package
        /// This member is required.
        public var modelPackageGroupName: Swift.String?
        /// The status of the mortgage package.
        /// This member is required.
        public var modelPackageStatus: SageMakerClientTypes.ModelPackageStatus?
        /// The version number of a versioned model.
        public var modelPackageVersion: Swift.Int?

        public init(
            creationTime: Foundation.Date? = nil,
            inferenceSpecification: SageMakerClientTypes.InferenceSpecification? = nil,
            modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus? = nil,
            modelPackageArn: Swift.String? = nil,
            modelPackageDescription: Swift.String? = nil,
            modelPackageGroupName: Swift.String? = nil,
            modelPackageStatus: SageMakerClientTypes.ModelPackageStatus? = nil,
            modelPackageVersion: Swift.Int? = nil
        )
        {
            self.creationTime = creationTime
            self.inferenceSpecification = inferenceSpecification
            self.modelApprovalStatus = modelApprovalStatus
            self.modelPackageArn = modelPackageArn
            self.modelPackageDescription = modelPackageDescription
            self.modelPackageGroupName = modelPackageGroupName
            self.modelPackageStatus = modelPackageStatus
            self.modelPackageVersion = modelPackageVersion
        }
    }

}

public struct BatchDescribeModelPackageOutput {
    /// A map of the resource and BatchDescribeModelPackageError objects reporting the error associated with describing the model package.
    public var batchDescribeModelPackageErrorMap: [Swift.String: SageMakerClientTypes.BatchDescribeModelPackageError]?
    /// The summaries for the model package versions
    public var modelPackageSummaries: [Swift.String: SageMakerClientTypes.BatchDescribeModelPackageSummary]?

    public init(
        batchDescribeModelPackageErrorMap: [Swift.String: SageMakerClientTypes.BatchDescribeModelPackageError]? = nil,
        modelPackageSummaries: [Swift.String: SageMakerClientTypes.BatchDescribeModelPackageSummary]? = nil
    )
    {
        self.batchDescribeModelPackageErrorMap = batchDescribeModelPackageErrorMap
        self.modelPackageSummaries = modelPackageSummaries
    }
}

extension SageMakerClientTypes {
    /// Represents the CSV dataset format used when running a monitoring job.
    public struct MonitoringCsvDatasetFormat {
        /// Indicates if the CSV data has a header.
        public var header: Swift.Bool?

        public init(
            header: Swift.Bool? = nil
        )
        {
            self.header = header
        }
    }

}

extension SageMakerClientTypes {
    /// Represents the JSON dataset format used when running a monitoring job.
    public struct MonitoringJsonDatasetFormat {
        /// Indicates if the file should be read as a JSON object per line.
        public var line: Swift.Bool?

        public init(
            line: Swift.Bool? = nil
        )
        {
            self.line = line
        }
    }

}

extension SageMakerClientTypes {
    /// Represents the Parquet dataset format used when running a monitoring job.
    public struct MonitoringParquetDatasetFormat {

        public init() { }
    }

}

extension SageMakerClientTypes {
    /// Represents the dataset format used when running a monitoring job.
    public struct MonitoringDatasetFormat {
        /// The CSV dataset used in the monitoring job.
        public var csv: SageMakerClientTypes.MonitoringCsvDatasetFormat?
        /// The JSON dataset used in the monitoring job
        public var json: SageMakerClientTypes.MonitoringJsonDatasetFormat?
        /// The Parquet dataset used in the monitoring job
        public var parquet: SageMakerClientTypes.MonitoringParquetDatasetFormat?

        public init(
            csv: SageMakerClientTypes.MonitoringCsvDatasetFormat? = nil,
            json: SageMakerClientTypes.MonitoringJsonDatasetFormat? = nil,
            parquet: SageMakerClientTypes.MonitoringParquetDatasetFormat? = nil
        )
        {
            self.csv = csv
            self.json = json
            self.parquet = parquet
        }
    }

}

extension SageMakerClientTypes {

    public enum ProcessingS3DataDistributionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fullyreplicated
        case shardedbys3key
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessingS3DataDistributionType] {
            return [
                .fullyreplicated,
                .shardedbys3key
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fullyreplicated: return "FullyReplicated"
            case .shardedbys3key: return "ShardedByS3Key"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum ProcessingS3InputMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case file
        case pipe
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessingS3InputMode] {
            return [
                .file,
                .pipe
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .file: return "File"
            case .pipe: return "Pipe"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Input object for the batch transform job.
    public struct BatchTransformInput {
        /// The Amazon S3 location being used to capture the data.
        /// This member is required.
        public var dataCapturedDestinationS3Uri: Swift.String?
        /// The dataset format for your batch transform job.
        /// This member is required.
        public var datasetFormat: SageMakerClientTypes.MonitoringDatasetFormat?
        /// If specified, monitoring jobs subtract this time from the end time. For information about using offsets for scheduling monitoring jobs, see [Schedule Model Quality Monitoring Jobs](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html).
        public var endTimeOffset: Swift.String?
        /// The attributes of the input data to exclude from the analysis.
        public var excludeFeaturesAttribute: Swift.String?
        /// The attributes of the input data that are the input features.
        public var featuresAttribute: Swift.String?
        /// The attribute of the input data that represents the ground truth label.
        public var inferenceAttribute: Swift.String?
        /// Path to the filesystem where the batch transform data is available to the container.
        /// This member is required.
        public var localPath: Swift.String?
        /// In a classification problem, the attribute that represents the class probability.
        public var probabilityAttribute: Swift.String?
        /// The threshold for the class probability to be evaluated as a positive result.
        public var probabilityThresholdAttribute: Swift.Double?
        /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an S3 key. Defaults to FullyReplicated
        public var s3DataDistributionType: SageMakerClientTypes.ProcessingS3DataDistributionType?
        /// Whether the Pipe or File is used as the input mode for transferring data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        public var s3InputMode: SageMakerClientTypes.ProcessingS3InputMode?
        /// If specified, monitoring jobs substract this time from the start time. For information about using offsets for scheduling monitoring jobs, see [Schedule Model Quality Monitoring Jobs](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html).
        public var startTimeOffset: Swift.String?

        public init(
            dataCapturedDestinationS3Uri: Swift.String? = nil,
            datasetFormat: SageMakerClientTypes.MonitoringDatasetFormat? = nil,
            endTimeOffset: Swift.String? = nil,
            excludeFeaturesAttribute: Swift.String? = nil,
            featuresAttribute: Swift.String? = nil,
            inferenceAttribute: Swift.String? = nil,
            localPath: Swift.String? = nil,
            probabilityAttribute: Swift.String? = nil,
            probabilityThresholdAttribute: Swift.Double? = nil,
            s3DataDistributionType: SageMakerClientTypes.ProcessingS3DataDistributionType? = nil,
            s3InputMode: SageMakerClientTypes.ProcessingS3InputMode? = nil,
            startTimeOffset: Swift.String? = nil
        )
        {
            self.dataCapturedDestinationS3Uri = dataCapturedDestinationS3Uri
            self.datasetFormat = datasetFormat
            self.endTimeOffset = endTimeOffset
            self.excludeFeaturesAttribute = excludeFeaturesAttribute
            self.featuresAttribute = featuresAttribute
            self.inferenceAttribute = inferenceAttribute
            self.localPath = localPath
            self.probabilityAttribute = probabilityAttribute
            self.probabilityThresholdAttribute = probabilityThresholdAttribute
            self.s3DataDistributionType = s3DataDistributionType
            self.s3InputMode = s3InputMode
            self.startTimeOffset = startTimeOffset
        }
    }

}

extension SageMakerClientTypes {
    /// A structure that keeps track of which training jobs launched by your hyperparameter tuning job are not improving model performance as evaluated against an objective function.
    public struct BestObjectiveNotImproving {
        /// The number of training jobs that have failed to improve model performance by 1% or greater over prior training jobs as evaluated against an objective function.
        public var maxNumberOfTrainingJobsNotImproving: Swift.Int?

        public init(
            maxNumberOfTrainingJobsNotImproving: Swift.Int? = nil
        )
        {
            self.maxNumberOfTrainingJobsNotImproving = maxNumberOfTrainingJobsNotImproving
        }
    }

}

extension SageMakerClientTypes {
    /// Details about the metrics source.
    public struct MetricsSource {
        /// The hash key used for the metrics source.
        public var contentDigest: Swift.String?
        /// The metric source content type.
        /// This member is required.
        public var contentType: Swift.String?
        /// The S3 URI for the metrics source.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            contentDigest: Swift.String? = nil,
            contentType: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.contentDigest = contentDigest
            self.contentType = contentType
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    /// Contains bias metrics for a model.
    public struct Bias {
        /// The post-training bias report for a model.
        public var postTrainingReport: SageMakerClientTypes.MetricsSource?
        /// The pre-training bias report for a model.
        public var preTrainingReport: SageMakerClientTypes.MetricsSource?
        /// The bias report for a model
        public var report: SageMakerClientTypes.MetricsSource?

        public init(
            postTrainingReport: SageMakerClientTypes.MetricsSource? = nil,
            preTrainingReport: SageMakerClientTypes.MetricsSource? = nil,
            report: SageMakerClientTypes.MetricsSource? = nil
        )
        {
            self.postTrainingReport = postTrainingReport
            self.preTrainingReport = preTrainingReport
            self.report = report
        }
    }

}

extension SageMakerClientTypes {

    public enum CapacitySizeType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case capacityPercent
        case instanceCount
        case sdkUnknown(Swift.String)

        public static var allCases: [CapacitySizeType] {
            return [
                .capacityPercent,
                .instanceCount
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .capacityPercent: return "CAPACITY_PERCENT"
            case .instanceCount: return "INSTANCE_COUNT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies the type and size of the endpoint capacity to activate for a blue/green deployment, a rolling deployment, or a rollback strategy. You can specify your batches as either instance count or the overall percentage or your fleet. For a rollback strategy, if you don't specify the fields in this object, or if you set the Value to 100%, then SageMaker uses a blue/green rollback strategy and rolls all traffic back to the blue fleet.
    public struct CapacitySize {
        /// Specifies the endpoint capacity type.
        ///
        /// * INSTANCE_COUNT: The endpoint activates based on the number of instances.
        ///
        /// * CAPACITY_PERCENT: The endpoint activates based on the specified percentage of capacity.
        /// This member is required.
        public var type: SageMakerClientTypes.CapacitySizeType?
        /// Defines the capacity size, either as a number of instances or a capacity percentage.
        /// This member is required.
        public var value: Swift.Int?

        public init(
            type: SageMakerClientTypes.CapacitySizeType? = nil,
            value: Swift.Int? = nil
        )
        {
            self.type = type
            self.value = value
        }
    }

}

extension SageMakerClientTypes {

    public enum TrafficRoutingConfigType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allAtOnce
        case canary
        case linear
        case sdkUnknown(Swift.String)

        public static var allCases: [TrafficRoutingConfigType] {
            return [
                .allAtOnce,
                .canary,
                .linear
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allAtOnce: return "ALL_AT_ONCE"
            case .canary: return "CANARY"
            case .linear: return "LINEAR"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Defines the traffic routing strategy during an endpoint deployment to shift traffic from the old fleet to the new fleet.
    public struct TrafficRoutingConfig {
        /// Batch size for the first step to turn on traffic on the new endpoint fleet. Value must be less than or equal to 50% of the variant's total instance count.
        public var canarySize: SageMakerClientTypes.CapacitySize?
        /// Batch size for each step to turn on traffic on the new endpoint fleet. Value must be 10-50% of the variant's total instance count.
        public var linearStepSize: SageMakerClientTypes.CapacitySize?
        /// Traffic routing strategy type.
        ///
        /// * ALL_AT_ONCE: Endpoint traffic shifts to the new fleet in a single step.
        ///
        /// * CANARY: Endpoint traffic shifts to the new fleet in two steps. The first step is the canary, which is a small portion of the traffic. The second step is the remainder of the traffic.
        ///
        /// * LINEAR: Endpoint traffic shifts to the new fleet in n steps of a configurable size.
        /// This member is required.
        public var type: SageMakerClientTypes.TrafficRoutingConfigType?
        /// The waiting time (in seconds) between incremental steps to turn on traffic on the new endpoint fleet.
        /// This member is required.
        public var waitIntervalInSeconds: Swift.Int?

        public init(
            canarySize: SageMakerClientTypes.CapacitySize? = nil,
            linearStepSize: SageMakerClientTypes.CapacitySize? = nil,
            type: SageMakerClientTypes.TrafficRoutingConfigType? = nil,
            waitIntervalInSeconds: Swift.Int? = nil
        )
        {
            self.canarySize = canarySize
            self.linearStepSize = linearStepSize
            self.type = type
            self.waitIntervalInSeconds = waitIntervalInSeconds
        }
    }

}

extension SageMakerClientTypes {
    /// Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default.
    public struct BlueGreenUpdatePolicy {
        /// Maximum execution timeout for the deployment. Note that the timeout value should be larger than the total waiting time specified in TerminationWaitInSeconds and WaitIntervalInSeconds.
        public var maximumExecutionTimeoutInSeconds: Swift.Int?
        /// Additional waiting time in seconds after the completion of an endpoint deployment before terminating the old endpoint fleet. Default is 0.
        public var terminationWaitInSeconds: Swift.Int?
        /// Defines the traffic routing strategy to shift traffic from the old fleet to the new fleet during an endpoint deployment.
        /// This member is required.
        public var trafficRoutingConfiguration: SageMakerClientTypes.TrafficRoutingConfig?

        public init(
            maximumExecutionTimeoutInSeconds: Swift.Int? = nil,
            terminationWaitInSeconds: Swift.Int? = nil,
            trafficRoutingConfiguration: SageMakerClientTypes.TrafficRoutingConfig? = nil
        )
        {
            self.maximumExecutionTimeoutInSeconds = maximumExecutionTimeoutInSeconds
            self.terminationWaitInSeconds = terminationWaitInSeconds
            self.trafficRoutingConfiguration = trafficRoutingConfiguration
        }
    }

}

extension SageMakerClientTypes {

    public enum BooleanOperator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case and
        case or
        case sdkUnknown(Swift.String)

        public static var allCases: [BooleanOperator] {
            return [
                .and,
                .or
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .and: return "And"
            case .or: return "Or"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Details on the cache hit of a pipeline execution step.
    public struct CacheHitResult {
        /// The Amazon Resource Name (ARN) of the pipeline execution.
        public var sourcePipelineExecutionArn: Swift.String?

        public init(
            sourcePipelineExecutionArn: Swift.String? = nil
        )
        {
            self.sourcePipelineExecutionArn = sourcePipelineExecutionArn
        }
    }

}

extension SageMakerClientTypes {
    /// An output parameter of a pipeline step.
    public struct OutputParameter {
        /// The name of the output parameter.
        /// This member is required.
        public var name: Swift.String?
        /// The value of the output parameter.
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension SageMakerClientTypes {
    /// Metadata about a callback step.
    public struct CallbackStepMetadata {
        /// The pipeline generated token from the Amazon SQS queue.
        public var callbackToken: Swift.String?
        /// A list of the output parameters of the callback step.
        public var outputParameters: [SageMakerClientTypes.OutputParameter]?
        /// The URL of the Amazon Simple Queue Service (Amazon SQS) queue used by the callback step.
        public var sqsQueueUrl: Swift.String?

        public init(
            callbackToken: Swift.String? = nil,
            outputParameters: [SageMakerClientTypes.OutputParameter]? = nil,
            sqsQueueUrl: Swift.String? = nil
        )
        {
            self.callbackToken = callbackToken
            self.outputParameters = outputParameters
            self.sqsQueueUrl = sqsQueueUrl
        }
    }

}

extension SageMakerClientTypes {

    public enum CandidateSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationtime
        case finalobjectivemetricvalue
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [CandidateSortBy] {
            return [
                .creationtime,
                .finalobjectivemetricvalue,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .finalobjectivemetricvalue: return "FinalObjectiveMetricValue"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The model deployment settings for the SageMaker Canvas application. In order to enable model deployment for Canvas, the SageMaker Domain's or user profile's Amazon Web Services IAM execution role must have the AmazonSageMakerCanvasDirectDeployAccess policy attached. You can also turn on model deployment permissions through the SageMaker Domain's or user profile's settings in the SageMaker console.
    public struct DirectDeploySettings {
        /// Describes whether model deployment permissions are enabled or disabled in the Canvas application.
        public var status: SageMakerClientTypes.FeatureStatus?

        public init(
            status: SageMakerClientTypes.FeatureStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension SageMakerClientTypes {
    /// The settings for running Amazon EMR Serverless jobs in SageMaker Canvas.
    public struct EmrServerlessSettings {
        /// The Amazon Resource Name (ARN) of the Amazon Web Services IAM role that is assumed for running Amazon EMR Serverless jobs in SageMaker Canvas. This role should have the necessary permissions to read and write data attached and a trust relationship with EMR Serverless.
        public var executionRoleArn: Swift.String?
        /// Describes whether Amazon EMR Serverless job capabilities are enabled or disabled in the SageMaker Canvas application.
        public var status: SageMakerClientTypes.FeatureStatus?

        public init(
            executionRoleArn: Swift.String? = nil,
            status: SageMakerClientTypes.FeatureStatus? = nil
        )
        {
            self.executionRoleArn = executionRoleArn
            self.status = status
        }
    }

}

extension SageMakerClientTypes {
    /// The generative AI settings for the SageMaker Canvas application. Configure these settings for Canvas users starting chats with generative AI foundation models. For more information, see [ Use generative AI with foundation models](https://docs.aws.amazon.com/sagemaker/latest/dg/canvas-fm-chat.html).
    public struct GenerativeAiSettings {
        /// The ARN of an Amazon Web Services IAM role that allows fine-tuning of large language models (LLMs) in Amazon Bedrock. The IAM role should have Amazon S3 read and write permissions, as well as a trust relationship that establishes bedrock.amazonaws.com as a service principal.
        public var amazonBedrockRoleArn: Swift.String?

        public init(
            amazonBedrockRoleArn: Swift.String? = nil
        )
        {
            self.amazonBedrockRoleArn = amazonBedrockRoleArn
        }
    }

}

extension SageMakerClientTypes {

    public enum DataSourceName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case salesforcegenie
        case snowflake
        case sdkUnknown(Swift.String)

        public static var allCases: [DataSourceName] {
            return [
                .salesforcegenie,
                .snowflake
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .salesforcegenie: return "SalesforceGenie"
            case .snowflake: return "Snowflake"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The Amazon SageMaker Canvas application setting where you configure OAuth for connecting to an external data source, such as Snowflake.
    public struct IdentityProviderOAuthSetting {
        /// The name of the data source that you're connecting to. Canvas currently supports OAuth for Snowflake and Salesforce Data Cloud.
        public var dataSourceName: SageMakerClientTypes.DataSourceName?
        /// The ARN of an Amazon Web Services Secrets Manager secret that stores the credentials from your identity provider, such as the client ID and secret, authorization URL, and token URL.
        public var secretArn: Swift.String?
        /// Describes whether OAuth for a data source is enabled or disabled in the Canvas application.
        public var status: SageMakerClientTypes.FeatureStatus?

        public init(
            dataSourceName: SageMakerClientTypes.DataSourceName? = nil,
            secretArn: Swift.String? = nil,
            status: SageMakerClientTypes.FeatureStatus? = nil
        )
        {
            self.dataSourceName = dataSourceName
            self.secretArn = secretArn
            self.status = status
        }
    }

}

extension SageMakerClientTypes {
    /// The Amazon SageMaker Canvas application setting where you configure document querying.
    public struct KendraSettings {
        /// Describes whether the document querying feature is enabled or disabled in the Canvas application.
        public var status: SageMakerClientTypes.FeatureStatus?

        public init(
            status: SageMakerClientTypes.FeatureStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension SageMakerClientTypes {
    /// The model registry settings for the SageMaker Canvas application.
    public struct ModelRegisterSettings {
        /// The Amazon Resource Name (ARN) of the SageMaker model registry account. Required only to register model versions created by a different SageMaker Canvas Amazon Web Services account than the Amazon Web Services account in which SageMaker model registry is set up.
        public var crossAccountModelRegisterRoleArn: Swift.String?
        /// Describes whether the integration to the model registry is enabled or disabled in the Canvas application.
        public var status: SageMakerClientTypes.FeatureStatus?

        public init(
            crossAccountModelRegisterRoleArn: Swift.String? = nil,
            status: SageMakerClientTypes.FeatureStatus? = nil
        )
        {
            self.crossAccountModelRegisterRoleArn = crossAccountModelRegisterRoleArn
            self.status = status
        }
    }

}

extension SageMakerClientTypes {
    /// Time series forecast settings for the SageMaker Canvas application.
    public struct TimeSeriesForecastingSettings {
        /// The IAM role that Canvas passes to Amazon Forecast for time series forecasting. By default, Canvas uses the execution role specified in the UserProfile that launches the Canvas application. If an execution role is not specified in the UserProfile, Canvas uses the execution role specified in the Domain that owns the UserProfile. To allow time series forecasting, this IAM role should have the [ AmazonSageMakerCanvasForecastAccess](https://docs.aws.amazon.com/sagemaker/latest/dg/security-iam-awsmanpol-canvas.html#security-iam-awsmanpol-AmazonSageMakerCanvasForecastAccess) policy attached and forecast.amazonaws.com added in the trust relationship as a service principal.
        public var amazonForecastRoleArn: Swift.String?
        /// Describes whether time series forecasting is enabled or disabled in the Canvas application.
        public var status: SageMakerClientTypes.FeatureStatus?

        public init(
            amazonForecastRoleArn: Swift.String? = nil,
            status: SageMakerClientTypes.FeatureStatus? = nil
        )
        {
            self.amazonForecastRoleArn = amazonForecastRoleArn
            self.status = status
        }
    }

}

extension SageMakerClientTypes {
    /// The workspace settings for the SageMaker Canvas application.
    public struct WorkspaceSettings {
        /// The Amazon S3 bucket used to store artifacts generated by Canvas. Updating the Amazon S3 location impacts existing configuration settings, and Canvas users no longer have access to their artifacts. Canvas users must log out and log back in to apply the new location.
        public var s3ArtifactPath: Swift.String?
        /// The Amazon Web Services Key Management Service (KMS) encryption key ID that is used to encrypt artifacts generated by Canvas in the Amazon S3 bucket.
        public var s3KmsKeyId: Swift.String?

        public init(
            s3ArtifactPath: Swift.String? = nil,
            s3KmsKeyId: Swift.String? = nil
        )
        {
            self.s3ArtifactPath = s3ArtifactPath
            self.s3KmsKeyId = s3KmsKeyId
        }
    }

}

extension SageMakerClientTypes {
    /// The SageMaker Canvas application settings.
    public struct CanvasAppSettings {
        /// The model deployment settings for the SageMaker Canvas application.
        public var directDeploySettings: SageMakerClientTypes.DirectDeploySettings?
        /// The settings for running Amazon EMR Serverless data processing jobs in SageMaker Canvas.
        public var emrServerlessSettings: SageMakerClientTypes.EmrServerlessSettings?
        /// The generative AI settings for the SageMaker Canvas application.
        public var generativeAiSettings: SageMakerClientTypes.GenerativeAiSettings?
        /// The settings for connecting to an external data source with OAuth.
        public var identityProviderOAuthSettings: [SageMakerClientTypes.IdentityProviderOAuthSetting]?
        /// The settings for document querying.
        public var kendraSettings: SageMakerClientTypes.KendraSettings?
        /// The model registry settings for the SageMaker Canvas application.
        public var modelRegisterSettings: SageMakerClientTypes.ModelRegisterSettings?
        /// Time series forecast settings for the SageMaker Canvas application.
        public var timeSeriesForecastingSettings: SageMakerClientTypes.TimeSeriesForecastingSettings?
        /// The workspace settings for the SageMaker Canvas application.
        public var workspaceSettings: SageMakerClientTypes.WorkspaceSettings?

        public init(
            directDeploySettings: SageMakerClientTypes.DirectDeploySettings? = nil,
            emrServerlessSettings: SageMakerClientTypes.EmrServerlessSettings? = nil,
            generativeAiSettings: SageMakerClientTypes.GenerativeAiSettings? = nil,
            identityProviderOAuthSettings: [SageMakerClientTypes.IdentityProviderOAuthSetting]? = nil,
            kendraSettings: SageMakerClientTypes.KendraSettings? = nil,
            modelRegisterSettings: SageMakerClientTypes.ModelRegisterSettings? = nil,
            timeSeriesForecastingSettings: SageMakerClientTypes.TimeSeriesForecastingSettings? = nil,
            workspaceSettings: SageMakerClientTypes.WorkspaceSettings? = nil
        )
        {
            self.directDeploySettings = directDeploySettings
            self.emrServerlessSettings = emrServerlessSettings
            self.generativeAiSettings = generativeAiSettings
            self.identityProviderOAuthSettings = identityProviderOAuthSettings
            self.kendraSettings = kendraSettings
            self.modelRegisterSettings = modelRegisterSettings
            self.timeSeriesForecastingSettings = timeSeriesForecastingSettings
            self.workspaceSettings = workspaceSettings
        }
    }

}

extension SageMakerClientTypes {
    /// Configuration specifying how to treat different headers. If no headers are specified Amazon SageMaker will by default base64 encode when capturing the data.
    public struct CaptureContentTypeHeader {
        /// The list of all content type headers that Amazon SageMaker will treat as CSV and capture accordingly.
        public var csvContentTypes: [Swift.String]?
        /// The list of all content type headers that SageMaker will treat as JSON and capture accordingly.
        public var jsonContentTypes: [Swift.String]?

        public init(
            csvContentTypes: [Swift.String]? = nil,
            jsonContentTypes: [Swift.String]? = nil
        )
        {
            self.csvContentTypes = csvContentTypes
            self.jsonContentTypes = jsonContentTypes
        }
    }

}

extension SageMakerClientTypes {

    public enum CaptureMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case input
        case inputAndOutput
        case output
        case sdkUnknown(Swift.String)

        public static var allCases: [CaptureMode] {
            return [
                .input,
                .inputAndOutput,
                .output
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .input: return "Input"
            case .inputAndOutput: return "InputAndOutput"
            case .output: return "Output"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies data Model Monitor will capture.
    public struct CaptureOption {
        /// Specify the boundary of data to capture.
        /// This member is required.
        public var captureMode: SageMakerClientTypes.CaptureMode?

        public init(
            captureMode: SageMakerClientTypes.CaptureMode? = nil
        )
        {
            self.captureMode = captureMode
        }
    }

}

extension SageMakerClientTypes {

    public enum CaptureStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case started
        case stopped
        case sdkUnknown(Swift.String)

        public static var allCases: [CaptureStatus] {
            return [
                .started,
                .stopped
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .started: return "Started"
            case .stopped: return "Stopped"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Environment parameters you want to benchmark your load test against.
    public struct CategoricalParameter {
        /// The Name of the environment variable.
        /// This member is required.
        public var name: Swift.String?
        /// The list of values you can pass.
        /// This member is required.
        public var value: [Swift.String]?

        public init(
            name: Swift.String? = nil,
            value: [Swift.String]? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension SageMakerClientTypes {
    /// A list of categorical hyperparameters to tune.
    public struct CategoricalParameterRange {
        /// The name of the categorical hyperparameter to tune.
        /// This member is required.
        public var name: Swift.String?
        /// A list of the categories for the hyperparameter.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            name: Swift.String? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension SageMakerClientTypes {
    /// Defines the possible values for a categorical hyperparameter.
    public struct CategoricalParameterRangeSpecification {
        /// The allowed categories for the hyperparameter.
        /// This member is required.
        public var values: [Swift.String]?

        public init(
            values: [Swift.String]? = nil
        )
        {
            self.values = values
        }
    }

}

extension SageMakerClientTypes {
    /// Defines a named input source, called a channel, to be used by an algorithm.
    public struct ChannelSpecification {
        /// A brief description of the channel.
        public var description: Swift.String?
        /// Indicates whether the channel is required by the algorithm.
        public var isRequired: Swift.Bool?
        /// The name of the channel.
        /// This member is required.
        public var name: Swift.String?
        /// The allowed compression types, if data compression is used.
        public var supportedCompressionTypes: [SageMakerClientTypes.CompressionType]?
        /// The supported MIME types for the data.
        /// This member is required.
        public var supportedContentTypes: [Swift.String]?
        /// The allowed input mode, either FILE or PIPE. In FILE mode, Amazon SageMaker copies the data from the input source onto the local Amazon Elastic Block Store (Amazon EBS) volumes before starting your training algorithm. This is the most commonly used input mode. In PIPE mode, Amazon SageMaker streams input data from the source directly to your algorithm without using the EBS volume.
        /// This member is required.
        public var supportedInputModes: [SageMakerClientTypes.TrainingInputMode]?

        public init(
            description: Swift.String? = nil,
            isRequired: Swift.Bool? = nil,
            name: Swift.String? = nil,
            supportedCompressionTypes: [SageMakerClientTypes.CompressionType]? = nil,
            supportedContentTypes: [Swift.String]? = nil,
            supportedInputModes: [SageMakerClientTypes.TrainingInputMode]? = nil
        )
        {
            self.description = description
            self.isRequired = isRequired
            self.name = name
            self.supportedCompressionTypes = supportedCompressionTypes
            self.supportedContentTypes = supportedContentTypes
            self.supportedInputModes = supportedInputModes
        }
    }

}

extension SageMakerClientTypes {
    /// Contains information about the output location for managed spot training checkpoint data.
    public struct CheckpointConfig {
        /// (Optional) The local directory where checkpoints are written. The default directory is /opt/ml/checkpoints/.
        public var localPath: Swift.String?
        /// Identifies the S3 path where you want SageMaker to store checkpoints. For example, s3://bucket-name/key-name-prefix.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            localPath: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.localPath = localPath
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    /// The container for the metadata for the ClarifyCheck step. For more information, see the topic on [ClarifyCheck step](https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-clarify-check) in the Amazon SageMaker Developer Guide.
    public struct ClarifyCheckStepMetadata {
        /// The Amazon S3 URI of baseline constraints file to be used for the drift check.
        public var baselineUsedForDriftCheckConstraints: Swift.String?
        /// The Amazon S3 URI of the newly calculated baseline constraints file.
        public var calculatedBaselineConstraints: Swift.String?
        /// The Amazon Resource Name (ARN) of the check processing job that was run by this step's execution.
        public var checkJobArn: Swift.String?
        /// The type of the Clarify Check step
        public var checkType: Swift.String?
        /// The model package group name.
        public var modelPackageGroupName: Swift.String?
        /// This flag indicates if a newly calculated baseline can be accessed through step properties BaselineUsedForDriftCheckConstraints and BaselineUsedForDriftCheckStatistics. If it is set to False, the previous baseline of the configured check type must also be available. These can be accessed through the BaselineUsedForDriftCheckConstraints property.
        public var registerNewBaseline: Swift.Bool?
        /// This flag indicates if the drift check against the previous baseline will be skipped or not. If it is set to False, the previous baseline of the configured check type must be available.
        public var skipCheck: Swift.Bool?
        /// The Amazon S3 URI of the violation report if violations are detected.
        public var violationReport: Swift.String?

        public init(
            baselineUsedForDriftCheckConstraints: Swift.String? = nil,
            calculatedBaselineConstraints: Swift.String? = nil,
            checkJobArn: Swift.String? = nil,
            checkType: Swift.String? = nil,
            modelPackageGroupName: Swift.String? = nil,
            registerNewBaseline: Swift.Bool? = nil,
            skipCheck: Swift.Bool? = nil,
            violationReport: Swift.String? = nil
        )
        {
            self.baselineUsedForDriftCheckConstraints = baselineUsedForDriftCheckConstraints
            self.calculatedBaselineConstraints = calculatedBaselineConstraints
            self.checkJobArn = checkJobArn
            self.checkType = checkType
            self.modelPackageGroupName = modelPackageGroupName
            self.registerNewBaseline = registerNewBaseline
            self.skipCheck = skipCheck
            self.violationReport = violationReport
        }
    }

}

extension SageMakerClientTypes {

    public enum ClarifyFeatureType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case categorical
        case numerical
        case text
        case sdkUnknown(Swift.String)

        public static var allCases: [ClarifyFeatureType] {
            return [
                .categorical,
                .numerical,
                .text
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .categorical: return "categorical"
            case .numerical: return "numerical"
            case .text: return "text"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The inference configuration parameter for the model container.
    public struct ClarifyInferenceConfig {
        /// A template string used to format a JSON record into an acceptable model container input. For example, a ContentTemplate string '{"myfeatures":$features}' will format a list of features [1,2,3] into the record string '{"myfeatures":[1,2,3]}'. Required only when the model container input is in JSON Lines format.
        public var contentTemplate: Swift.String?
        /// The names of the features. If provided, these are included in the endpoint response payload to help readability of the InvokeEndpoint output. See the [Response](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-invoke-endpoint.html#clarify-online-explainability-response) section under Invoke the endpoint in the Developer Guide for more information.
        public var featureHeaders: [Swift.String]?
        /// A list of data types of the features (optional). Applicable only to NLP explainability. If provided, FeatureTypes must have at least one 'text' string (for example, ['text']). If FeatureTypes is not provided, the explainer infers the feature types based on the baseline data. The feature types are included in the endpoint response payload. For additional information see the [response](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-invoke-endpoint.html#clarify-online-explainability-response) section under Invoke the endpoint in the Developer Guide for more information.
        public var featureTypes: [SageMakerClientTypes.ClarifyFeatureType]?
        /// Provides the JMESPath expression to extract the features from a model container input in JSON Lines format. For example, if FeaturesAttribute is the JMESPath expression 'myfeatures', it extracts a list of features [1,2,3] from request data '{"myfeatures":[1,2,3]}'.
        public var featuresAttribute: Swift.String?
        /// A JMESPath expression used to locate the list of label headers in the model container output. Example: If the model container output of a batch request is '{"labels":["cat","dog","fish"],"probability":[0.6,0.3,0.1]}', then set LabelAttribute to 'labels' to extract the list of label headers ["cat","dog","fish"]
        public var labelAttribute: Swift.String?
        /// For multiclass classification problems, the label headers are the names of the classes. Otherwise, the label header is the name of the predicted label. These are used to help readability for the output of the InvokeEndpoint API. See the [response](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-invoke-endpoint.html#clarify-online-explainability-response) section under Invoke the endpoint in the Developer Guide for more information. If there are no label headers in the model container output, provide them manually using this parameter.
        public var labelHeaders: [Swift.String]?
        /// A zero-based index used to extract a label header or list of label headers from model container output in CSV format. Example for a multiclass model: If the model container output consists of label headers followed by probabilities: '"[\'cat\',\'dog\',\'fish\']","[0.1,0.6,0.3]"', set LabelIndex to 0 to select the label headers ['cat','dog','fish'].
        public var labelIndex: Swift.Int?
        /// The maximum payload size (MB) allowed of a request from the explainer to the model container. Defaults to 6 MB.
        public var maxPayloadInMB: Swift.Int?
        /// The maximum number of records in a request that the model container can process when querying the model container for the predictions of a [synthetic dataset](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html#clarify-online-explainability-create-endpoint-synthetic). A record is a unit of input data that inference can be made on, for example, a single line in CSV data. If MaxRecordCount is 1, the model container expects one record per request. A value of 2 or greater means that the model expects batch requests, which can reduce overhead and speed up the inferencing process. If this parameter is not provided, the explainer will tune the record count per request according to the model container's capacity at runtime.
        public var maxRecordCount: Swift.Int?
        /// A JMESPath expression used to extract the probability (or score) from the model container output if the model container is in JSON Lines format. Example: If the model container output of a single request is '{"predicted_label":1,"probability":0.6}', then set ProbabilityAttribute to 'probability'.
        public var probabilityAttribute: Swift.String?
        /// A zero-based index used to extract a probability value (score) or list from model container output in CSV format. If this value is not provided, the entire model container output will be treated as a probability value (score) or list. Example for a single class model: If the model container output consists of a string-formatted prediction label followed by its probability: '1,0.6', set ProbabilityIndex to 1 to select the probability value 0.6. Example for a multiclass model: If the model container output consists of a string-formatted prediction label followed by its probability: '"[\'cat\',\'dog\',\'fish\']","[0.1,0.6,0.3]"', set ProbabilityIndex to 1 to select the probability values [0.1,0.6,0.3].
        public var probabilityIndex: Swift.Int?

        public init(
            contentTemplate: Swift.String? = nil,
            featureHeaders: [Swift.String]? = nil,
            featureTypes: [SageMakerClientTypes.ClarifyFeatureType]? = nil,
            featuresAttribute: Swift.String? = nil,
            labelAttribute: Swift.String? = nil,
            labelHeaders: [Swift.String]? = nil,
            labelIndex: Swift.Int? = nil,
            maxPayloadInMB: Swift.Int? = nil,
            maxRecordCount: Swift.Int? = nil,
            probabilityAttribute: Swift.String? = nil,
            probabilityIndex: Swift.Int? = nil
        )
        {
            self.contentTemplate = contentTemplate
            self.featureHeaders = featureHeaders
            self.featureTypes = featureTypes
            self.featuresAttribute = featuresAttribute
            self.labelAttribute = labelAttribute
            self.labelHeaders = labelHeaders
            self.labelIndex = labelIndex
            self.maxPayloadInMB = maxPayloadInMB
            self.maxRecordCount = maxRecordCount
            self.probabilityAttribute = probabilityAttribute
            self.probabilityIndex = probabilityIndex
        }
    }

}

extension SageMakerClientTypes {
    /// The configuration for the [SHAP baseline](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-feature-attribute-shap-baselines.html) (also called the background or reference dataset) of the Kernal SHAP algorithm.
    ///
    /// * The number of records in the baseline data determines the size of the synthetic dataset, which has an impact on latency of explainability requests. For more information, see the Synthetic data of [Configure and create an endpoint](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html).
    ///
    /// * ShapBaseline and ShapBaselineUri are mutually exclusive parameters. One or the either is required to configure a SHAP baseline.
    public struct ClarifyShapBaselineConfig {
        /// The MIME type of the baseline data. Choose from 'text/csv' or 'application/jsonlines'. Defaults to 'text/csv'.
        public var mimeType: Swift.String?
        /// The inline SHAP baseline data in string format. ShapBaseline can have one or multiple records to be used as the baseline dataset. The format of the SHAP baseline file should be the same format as the training dataset. For example, if the training dataset is in CSV format and each record contains four features, and all features are numerical, then the format of the baseline data should also share these characteristics. For natural language processing (NLP) of text columns, the baseline value should be the value used to replace the unit of text specified by the Granularity of the TextConfig parameter. The size limit for ShapBasline is 4 KB. Use the ShapBaselineUri parameter if you want to provide more than 4 KB of baseline data.
        public var shapBaseline: Swift.String?
        /// The uniform resource identifier (URI) of the S3 bucket where the SHAP baseline file is stored. The format of the SHAP baseline file should be the same format as the format of the training dataset. For example, if the training dataset is in CSV format, and each record in the training dataset has four features, and all features are numerical, then the baseline file should also have this same format. Each record should contain only the features. If you are using a virtual private cloud (VPC), the ShapBaselineUri should be accessible to the VPC. For more information about setting up endpoints with Amazon Virtual Private Cloud, see [Give SageMaker access to Resources in your Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html).
        public var shapBaselineUri: Swift.String?

        public init(
            mimeType: Swift.String? = nil,
            shapBaseline: Swift.String? = nil,
            shapBaselineUri: Swift.String? = nil
        )
        {
            self.mimeType = mimeType
            self.shapBaseline = shapBaseline
            self.shapBaselineUri = shapBaselineUri
        }
    }

}

extension SageMakerClientTypes {

    public enum ClarifyTextGranularity: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case paragraph
        case sentence
        case token
        case sdkUnknown(Swift.String)

        public static var allCases: [ClarifyTextGranularity] {
            return [
                .paragraph,
                .sentence,
                .token
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .paragraph: return "paragraph"
            case .sentence: return "sentence"
            case .token: return "token"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum ClarifyTextLanguage: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case afrikaans
        case albanian
        case arabic
        case armenian
        case basque
        case bengali
        case bulgarian
        case catalan
        case chinese
        case croatian
        case czech
        case danish
        case dutch
        case english
        case estonian
        case finnish
        case french
        case german
        case greek
        case gujarati
        case hebrew
        case hindi
        case hungarian
        case icelandic
        case indonesian
        case irish
        case italian
        case kannada
        case kyrgyz
        case latvian
        case ligurian
        case lithuanian
        case luxembourgish
        case macedonian
        case malayalam
        case marathi
        case multiLanguage
        case nepali
        case norwegianBokmal
        case persian
        case polish
        case portuguese
        case romanian
        case russian
        case sanskrit
        case serbian
        case setswana
        case sinhala
        case slovak
        case slovenian
        case spanish
        case swedish
        case tagalog
        case tamil
        case tatar
        case telugu
        case turkish
        case ukrainian
        case urdu
        case yoruba
        case sdkUnknown(Swift.String)

        public static var allCases: [ClarifyTextLanguage] {
            return [
                .afrikaans,
                .albanian,
                .arabic,
                .armenian,
                .basque,
                .bengali,
                .bulgarian,
                .catalan,
                .chinese,
                .croatian,
                .czech,
                .danish,
                .dutch,
                .english,
                .estonian,
                .finnish,
                .french,
                .german,
                .greek,
                .gujarati,
                .hebrew,
                .hindi,
                .hungarian,
                .icelandic,
                .indonesian,
                .irish,
                .italian,
                .kannada,
                .kyrgyz,
                .latvian,
                .ligurian,
                .lithuanian,
                .luxembourgish,
                .macedonian,
                .malayalam,
                .marathi,
                .multiLanguage,
                .nepali,
                .norwegianBokmal,
                .persian,
                .polish,
                .portuguese,
                .romanian,
                .russian,
                .sanskrit,
                .serbian,
                .setswana,
                .sinhala,
                .slovak,
                .slovenian,
                .spanish,
                .swedish,
                .tagalog,
                .tamil,
                .tatar,
                .telugu,
                .turkish,
                .ukrainian,
                .urdu,
                .yoruba
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .afrikaans: return "af"
            case .albanian: return "sq"
            case .arabic: return "ar"
            case .armenian: return "hy"
            case .basque: return "eu"
            case .bengali: return "bn"
            case .bulgarian: return "bg"
            case .catalan: return "ca"
            case .chinese: return "zh"
            case .croatian: return "hr"
            case .czech: return "cs"
            case .danish: return "da"
            case .dutch: return "nl"
            case .english: return "en"
            case .estonian: return "et"
            case .finnish: return "fi"
            case .french: return "fr"
            case .german: return "de"
            case .greek: return "el"
            case .gujarati: return "gu"
            case .hebrew: return "he"
            case .hindi: return "hi"
            case .hungarian: return "hu"
            case .icelandic: return "is"
            case .indonesian: return "id"
            case .irish: return "ga"
            case .italian: return "it"
            case .kannada: return "kn"
            case .kyrgyz: return "ky"
            case .latvian: return "lv"
            case .ligurian: return "lij"
            case .lithuanian: return "lt"
            case .luxembourgish: return "lb"
            case .macedonian: return "mk"
            case .malayalam: return "ml"
            case .marathi: return "mr"
            case .multiLanguage: return "xx"
            case .nepali: return "ne"
            case .norwegianBokmal: return "nb"
            case .persian: return "fa"
            case .polish: return "pl"
            case .portuguese: return "pt"
            case .romanian: return "ro"
            case .russian: return "ru"
            case .sanskrit: return "sa"
            case .serbian: return "sr"
            case .setswana: return "tn"
            case .sinhala: return "si"
            case .slovak: return "sk"
            case .slovenian: return "sl"
            case .spanish: return "es"
            case .swedish: return "sv"
            case .tagalog: return "tl"
            case .tamil: return "ta"
            case .tatar: return "tt"
            case .telugu: return "te"
            case .turkish: return "tr"
            case .ukrainian: return "uk"
            case .urdu: return "ur"
            case .yoruba: return "yo"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A parameter used to configure the SageMaker Clarify explainer to treat text features as text so that explanations are provided for individual units of text. Required only for natural language processing (NLP) explainability.
    public struct ClarifyTextConfig {
        /// The unit of granularity for the analysis of text features. For example, if the unit is 'token', then each token (like a word in English) of the text is treated as a feature. SHAP values are computed for each unit/feature.
        /// This member is required.
        public var granularity: SageMakerClientTypes.ClarifyTextGranularity?
        /// Specifies the language of the text features in [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) or [ISO 639-3](https://en.wikipedia.org/wiki/ISO_639-3) code of a supported language. For a mix of multiple languages, use code 'xx'.
        /// This member is required.
        public var language: SageMakerClientTypes.ClarifyTextLanguage?

        public init(
            granularity: SageMakerClientTypes.ClarifyTextGranularity? = nil,
            language: SageMakerClientTypes.ClarifyTextLanguage? = nil
        )
        {
            self.granularity = granularity
            self.language = language
        }
    }

}

extension SageMakerClientTypes {
    /// The configuration for SHAP analysis using SageMaker Clarify Explainer.
    public struct ClarifyShapConfig {
        /// The number of samples to be used for analysis by the Kernal SHAP algorithm. The number of samples determines the size of the synthetic dataset, which has an impact on latency of explainability requests. For more information, see the Synthetic data of [Configure and create an endpoint](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html).
        public var numberOfSamples: Swift.Int?
        /// The starting value used to initialize the random number generator in the explainer. Provide a value for this parameter to obtain a deterministic SHAP result.
        public var seed: Swift.Int?
        /// The configuration for the SHAP baseline of the Kernal SHAP algorithm.
        /// This member is required.
        public var shapBaselineConfig: SageMakerClientTypes.ClarifyShapBaselineConfig?
        /// A parameter that indicates if text features are treated as text and explanations are provided for individual units of text. Required for natural language processing (NLP) explainability only.
        public var textConfig: SageMakerClientTypes.ClarifyTextConfig?
        /// A Boolean toggle to indicate if you want to use the logit function (true) or log-odds units (false) for model predictions. Defaults to false.
        public var useLogit: Swift.Bool?

        public init(
            numberOfSamples: Swift.Int? = nil,
            seed: Swift.Int? = nil,
            shapBaselineConfig: SageMakerClientTypes.ClarifyShapBaselineConfig? = nil,
            textConfig: SageMakerClientTypes.ClarifyTextConfig? = nil,
            useLogit: Swift.Bool? = nil
        )
        {
            self.numberOfSamples = numberOfSamples
            self.seed = seed
            self.shapBaselineConfig = shapBaselineConfig
            self.textConfig = textConfig
            self.useLogit = useLogit
        }
    }

}

extension SageMakerClientTypes {
    /// The configuration parameters for the SageMaker Clarify explainer.
    public struct ClarifyExplainerConfig {
        /// A JMESPath boolean expression used to filter which records to explain. Explanations are activated by default. See [EnableExplanations](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-online-explainability-create-endpoint.html#clarify-online-explainability-create-endpoint-enable)for additional information.
        public var enableExplanations: Swift.String?
        /// The inference configuration parameter for the model container.
        public var inferenceConfig: SageMakerClientTypes.ClarifyInferenceConfig?
        /// The configuration for SHAP analysis.
        /// This member is required.
        public var shapConfig: SageMakerClientTypes.ClarifyShapConfig?

        public init(
            enableExplanations: Swift.String? = nil,
            inferenceConfig: SageMakerClientTypes.ClarifyInferenceConfig? = nil,
            shapConfig: SageMakerClientTypes.ClarifyShapConfig? = nil
        )
        {
            self.enableExplanations = enableExplanations
            self.inferenceConfig = inferenceConfig
            self.shapConfig = shapConfig
        }
    }

}

extension SageMakerClientTypes {
    /// Defines the configuration for attaching an additional Amazon Elastic Block Store (EBS) volume to each instance of the SageMaker HyperPod cluster instance group. To learn more, see [SageMaker HyperPod release notes: June 20, 2024](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-hyperpod-release-notes.html#sagemaker-hyperpod-release-notes-20240620).
    public struct ClusterEbsVolumeConfig {
        /// The size in gigabytes (GB) of the additional EBS volume to be attached to the instances in the SageMaker HyperPod cluster instance group. The additional EBS volume is attached to each instance within the SageMaker HyperPod cluster instance group and mounted to /opt/sagemaker.
        /// This member is required.
        public var volumeSizeInGB: Swift.Int?

        public init(
            volumeSizeInGB: Swift.Int? = nil
        )
        {
            self.volumeSizeInGB = volumeSizeInGB
        }
    }

}

extension SageMakerClientTypes {
    /// Defines the configuration for attaching additional storage to the instances in the SageMaker HyperPod cluster instance group. To learn more, see [SageMaker HyperPod release notes: June 20, 2024](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-hyperpod-release-notes.html#sagemaker-hyperpod-release-notes-20240620).
    public enum ClusterInstanceStorageConfig {
        /// Defines the configuration for attaching additional Amazon Elastic Block Store (EBS) volumes to the instances in the SageMaker HyperPod cluster instance group. The additional EBS volume is attached to each instance within the SageMaker HyperPod cluster instance group and mounted to /opt/sagemaker.
        case ebsvolumeconfig(SageMakerClientTypes.ClusterEbsVolumeConfig)
        case sdkUnknown(Swift.String)
    }

}

extension SageMakerClientTypes {

    public enum ClusterInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mlC5n18xlarge
        case mlC5n2xlarge
        case mlC5n4xlarge
        case mlC5n9xlarge
        case mlC5nLarge
        case mlC512xlarge
        case mlC518xlarge
        case mlC524xlarge
        case mlC52xlarge
        case mlC54xlarge
        case mlC59xlarge
        case mlC5Large
        case mlC5Xlarge
        case mlG512xlarge
        case mlG516xlarge
        case mlG524xlarge
        case mlG52xlarge
        case mlG548xlarge
        case mlG54xlarge
        case mlG58xlarge
        case mlG5Xlarge
        case mlM512xlarge
        case mlM516xlarge
        case mlM524xlarge
        case mlM52xlarge
        case mlM54xlarge
        case mlM58xlarge
        case mlM5Large
        case mlM5Xlarge
        case mlP4de24xlarge
        case mlP4d24xlarge
        case mlP548xlarge
        case mlT32xlarge
        case mlT3Large
        case mlT3Medium
        case mlT3Xlarge
        case mlTrn1n32xlarge
        case mlTrn132xlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [ClusterInstanceType] {
            return [
                .mlC5n18xlarge,
                .mlC5n2xlarge,
                .mlC5n4xlarge,
                .mlC5n9xlarge,
                .mlC5nLarge,
                .mlC512xlarge,
                .mlC518xlarge,
                .mlC524xlarge,
                .mlC52xlarge,
                .mlC54xlarge,
                .mlC59xlarge,
                .mlC5Large,
                .mlC5Xlarge,
                .mlG512xlarge,
                .mlG516xlarge,
                .mlG524xlarge,
                .mlG52xlarge,
                .mlG548xlarge,
                .mlG54xlarge,
                .mlG58xlarge,
                .mlG5Xlarge,
                .mlM512xlarge,
                .mlM516xlarge,
                .mlM524xlarge,
                .mlM52xlarge,
                .mlM54xlarge,
                .mlM58xlarge,
                .mlM5Large,
                .mlM5Xlarge,
                .mlP4de24xlarge,
                .mlP4d24xlarge,
                .mlP548xlarge,
                .mlT32xlarge,
                .mlT3Large,
                .mlT3Medium,
                .mlT3Xlarge,
                .mlTrn1n32xlarge,
                .mlTrn132xlarge
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mlC5n18xlarge: return "ml.c5n.18xlarge"
            case .mlC5n2xlarge: return "ml.c5n.2xlarge"
            case .mlC5n4xlarge: return "ml.c5n.4xlarge"
            case .mlC5n9xlarge: return "ml.c5n.9xlarge"
            case .mlC5nLarge: return "ml.c5n.large"
            case .mlC512xlarge: return "ml.c5.12xlarge"
            case .mlC518xlarge: return "ml.c5.18xlarge"
            case .mlC524xlarge: return "ml.c5.24xlarge"
            case .mlC52xlarge: return "ml.c5.2xlarge"
            case .mlC54xlarge: return "ml.c5.4xlarge"
            case .mlC59xlarge: return "ml.c5.9xlarge"
            case .mlC5Large: return "ml.c5.large"
            case .mlC5Xlarge: return "ml.c5.xlarge"
            case .mlG512xlarge: return "ml.g5.12xlarge"
            case .mlG516xlarge: return "ml.g5.16xlarge"
            case .mlG524xlarge: return "ml.g5.24xlarge"
            case .mlG52xlarge: return "ml.g5.2xlarge"
            case .mlG548xlarge: return "ml.g5.48xlarge"
            case .mlG54xlarge: return "ml.g5.4xlarge"
            case .mlG58xlarge: return "ml.g5.8xlarge"
            case .mlG5Xlarge: return "ml.g5.xlarge"
            case .mlM512xlarge: return "ml.m5.12xlarge"
            case .mlM516xlarge: return "ml.m5.16xlarge"
            case .mlM524xlarge: return "ml.m5.24xlarge"
            case .mlM52xlarge: return "ml.m5.2xlarge"
            case .mlM54xlarge: return "ml.m5.4xlarge"
            case .mlM58xlarge: return "ml.m5.8xlarge"
            case .mlM5Large: return "ml.m5.large"
            case .mlM5Xlarge: return "ml.m5.xlarge"
            case .mlP4de24xlarge: return "ml.p4de.24xlarge"
            case .mlP4d24xlarge: return "ml.p4d.24xlarge"
            case .mlP548xlarge: return "ml.p5.48xlarge"
            case .mlT32xlarge: return "ml.t3.2xlarge"
            case .mlT3Large: return "ml.t3.large"
            case .mlT3Medium: return "ml.t3.medium"
            case .mlT3Xlarge: return "ml.t3.xlarge"
            case .mlTrn1n32xlarge: return "ml.trn1n.32xlarge"
            case .mlTrn132xlarge: return "ml.trn1.32xlarge"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The lifecycle configuration for a SageMaker HyperPod cluster.
    public struct ClusterLifeCycleConfig {
        /// The file name of the entrypoint script of lifecycle scripts under SourceS3Uri. This entrypoint script runs during cluster creation.
        /// This member is required.
        public var onCreate: Swift.String?
        /// An Amazon S3 bucket path where your lifecycle scripts are stored. Make sure that the S3 bucket path starts with s3://sagemaker-. The [IAM role for SageMaker HyperPod](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-hyperpod-prerequisites.html#sagemaker-hyperpod-prerequisites-iam-role-for-hyperpod) has the managed [AmazonSageMakerClusterInstanceRolePolicy](https://docs.aws.amazon.com/sagemaker/latest/dg/security-iam-awsmanpol-cluster.html) attached, which allows access to S3 buckets with the specific prefix sagemaker-.
        /// This member is required.
        public var sourceS3Uri: Swift.String?

        public init(
            onCreate: Swift.String? = nil,
            sourceS3Uri: Swift.String? = nil
        )
        {
            self.onCreate = onCreate
            self.sourceS3Uri = sourceS3Uri
        }
    }

}

extension SageMakerClientTypes {

    public enum DeepHealthCheckType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case instanceConnectivity
        case instanceStress
        case sdkUnknown(Swift.String)

        public static var allCases: [DeepHealthCheckType] {
            return [
                .instanceConnectivity,
                .instanceStress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .instanceConnectivity: return "InstanceConnectivity"
            case .instanceStress: return "InstanceStress"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Details of an instance group in a SageMaker HyperPod cluster.
    public struct ClusterInstanceGroupDetails {
        /// The number of instances that are currently in the instance group of a SageMaker HyperPod cluster.
        public var currentCount: Swift.Int?
        /// The execution role for the instance group to assume.
        public var executionRole: Swift.String?
        /// The name of the instance group of a SageMaker HyperPod cluster.
        public var instanceGroupName: Swift.String?
        /// The additional storage configurations for the instances in the SageMaker HyperPod cluster instance group.
        public var instanceStorageConfigs: [SageMakerClientTypes.ClusterInstanceStorageConfig]?
        /// The instance type of the instance group of a SageMaker HyperPod cluster.
        public var instanceType: SageMakerClientTypes.ClusterInstanceType?
        /// Details of LifeCycle configuration for the instance group.
        public var lifeCycleConfig: SageMakerClientTypes.ClusterLifeCycleConfig?
        /// A flag indicating whether deep health checks should be performed when the cluster instance group is created or updated.
        public var onStartDeepHealthChecks: [SageMakerClientTypes.DeepHealthCheckType]?
        /// The number of instances you specified to add to the instance group of a SageMaker HyperPod cluster.
        public var targetCount: Swift.Int?
        /// The number you specified to TreadsPerCore in CreateCluster for enabling or disabling multithreading. For instance types that support multithreading, you can specify 1 for disabling multithreading and 2 for enabling multithreading. For more information, see the reference table of [CPU cores and threads per CPU core per instance type](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cpu-options-supported-instances-values.html) in the Amazon Elastic Compute Cloud User Guide.
        public var threadsPerCore: Swift.Int?

        public init(
            currentCount: Swift.Int? = nil,
            executionRole: Swift.String? = nil,
            instanceGroupName: Swift.String? = nil,
            instanceStorageConfigs: [SageMakerClientTypes.ClusterInstanceStorageConfig]? = nil,
            instanceType: SageMakerClientTypes.ClusterInstanceType? = nil,
            lifeCycleConfig: SageMakerClientTypes.ClusterLifeCycleConfig? = nil,
            onStartDeepHealthChecks: [SageMakerClientTypes.DeepHealthCheckType]? = nil,
            targetCount: Swift.Int? = nil,
            threadsPerCore: Swift.Int? = nil
        )
        {
            self.currentCount = currentCount
            self.executionRole = executionRole
            self.instanceGroupName = instanceGroupName
            self.instanceStorageConfigs = instanceStorageConfigs
            self.instanceType = instanceType
            self.lifeCycleConfig = lifeCycleConfig
            self.onStartDeepHealthChecks = onStartDeepHealthChecks
            self.targetCount = targetCount
            self.threadsPerCore = threadsPerCore
        }
    }

}

extension SageMakerClientTypes {
    /// The specifications of an instance group that you need to define.
    public struct ClusterInstanceGroupSpecification {
        /// Specifies an IAM execution role to be assumed by the instance group.
        /// This member is required.
        public var executionRole: Swift.String?
        /// Specifies the number of instances to add to the instance group of a SageMaker HyperPod cluster.
        /// This member is required.
        public var instanceCount: Swift.Int?
        /// Specifies the name of the instance group.
        /// This member is required.
        public var instanceGroupName: Swift.String?
        /// Specifies the additional storage configurations for the instances in the SageMaker HyperPod cluster instance group.
        public var instanceStorageConfigs: [SageMakerClientTypes.ClusterInstanceStorageConfig]?
        /// Specifies the instance type of the instance group.
        /// This member is required.
        public var instanceType: SageMakerClientTypes.ClusterInstanceType?
        /// Specifies the LifeCycle configuration for the instance group.
        /// This member is required.
        public var lifeCycleConfig: SageMakerClientTypes.ClusterLifeCycleConfig?
        /// A flag indicating whether deep health checks should be performed when the cluster instance group is created or updated.
        public var onStartDeepHealthChecks: [SageMakerClientTypes.DeepHealthCheckType]?
        /// Specifies the value for Threads per core. For instance types that support multithreading, you can specify 1 for disabling multithreading and 2 for enabling multithreading. For instance types that doesn't support multithreading, specify 1. For more information, see the reference table of [CPU cores and threads per CPU core per instance type](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cpu-options-supported-instances-values.html) in the Amazon Elastic Compute Cloud User Guide.
        public var threadsPerCore: Swift.Int?

        public init(
            executionRole: Swift.String? = nil,
            instanceCount: Swift.Int? = nil,
            instanceGroupName: Swift.String? = nil,
            instanceStorageConfigs: [SageMakerClientTypes.ClusterInstanceStorageConfig]? = nil,
            instanceType: SageMakerClientTypes.ClusterInstanceType? = nil,
            lifeCycleConfig: SageMakerClientTypes.ClusterLifeCycleConfig? = nil,
            onStartDeepHealthChecks: [SageMakerClientTypes.DeepHealthCheckType]? = nil,
            threadsPerCore: Swift.Int? = nil
        )
        {
            self.executionRole = executionRole
            self.instanceCount = instanceCount
            self.instanceGroupName = instanceGroupName
            self.instanceStorageConfigs = instanceStorageConfigs
            self.instanceType = instanceType
            self.lifeCycleConfig = lifeCycleConfig
            self.onStartDeepHealthChecks = onStartDeepHealthChecks
            self.threadsPerCore = threadsPerCore
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies the placement details for the node in the SageMaker HyperPod cluster, including the Availability Zone and the unique identifier (ID) of the Availability Zone.
    public struct ClusterInstancePlacement {
        /// The Availability Zone where the node in the SageMaker HyperPod cluster is launched.
        public var availabilityZone: Swift.String?
        /// The unique identifier (ID) of the Availability Zone where the node in the SageMaker HyperPod cluster is launched.
        public var availabilityZoneId: Swift.String?

        public init(
            availabilityZone: Swift.String? = nil,
            availabilityZoneId: Swift.String? = nil
        )
        {
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
        }
    }

}

extension SageMakerClientTypes {

    public enum ClusterInstanceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deepHealthCheckInProgress
        case failure
        case pending
        case running
        case shuttingDown
        case systemUpdating
        case sdkUnknown(Swift.String)

        public static var allCases: [ClusterInstanceStatus] {
            return [
                .deepHealthCheckInProgress,
                .failure,
                .pending,
                .running,
                .shuttingDown,
                .systemUpdating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deepHealthCheckInProgress: return "DeepHealthCheckInProgress"
            case .failure: return "Failure"
            case .pending: return "Pending"
            case .running: return "Running"
            case .shuttingDown: return "ShuttingDown"
            case .systemUpdating: return "SystemUpdating"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Details of an instance in a SageMaker HyperPod cluster.
    public struct ClusterInstanceStatusDetails {
        /// The message from an instance in a SageMaker HyperPod cluster.
        public var message: Swift.String?
        /// The status of an instance in a SageMaker HyperPod cluster.
        /// This member is required.
        public var status: SageMakerClientTypes.ClusterInstanceStatus?

        public init(
            message: Swift.String? = nil,
            status: SageMakerClientTypes.ClusterInstanceStatus? = nil
        )
        {
            self.message = message
            self.status = status
        }
    }

}

extension SageMakerClientTypes {
    /// Details of an instance (also called a node interchangeably) in a SageMaker HyperPod cluster.
    public struct ClusterNodeDetails {
        /// The instance group name in which the instance is.
        public var instanceGroupName: Swift.String?
        /// The ID of the instance.
        public var instanceId: Swift.String?
        /// The status of the instance.
        public var instanceStatus: SageMakerClientTypes.ClusterInstanceStatusDetails?
        /// The configurations of additional storage specified to the instance group where the instance (node) is launched.
        public var instanceStorageConfigs: [SageMakerClientTypes.ClusterInstanceStorageConfig]?
        /// The type of the instance.
        public var instanceType: SageMakerClientTypes.ClusterInstanceType?
        /// The time when the instance is launched.
        public var launchTime: Foundation.Date?
        /// The LifeCycle configuration applied to the instance.
        public var lifeCycleConfig: SageMakerClientTypes.ClusterLifeCycleConfig?
        /// The placement details of the SageMaker HyperPod cluster node.
        public var placement: SageMakerClientTypes.ClusterInstancePlacement?
        /// The private DNS hostname of the SageMaker HyperPod cluster node.
        public var privateDnsHostname: Swift.String?
        /// The private primary IP address of the SageMaker HyperPod cluster node.
        public var privatePrimaryIp: Swift.String?
        /// The number of threads per CPU core you specified under CreateCluster.
        public var threadsPerCore: Swift.Int?

        public init(
            instanceGroupName: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            instanceStatus: SageMakerClientTypes.ClusterInstanceStatusDetails? = nil,
            instanceStorageConfigs: [SageMakerClientTypes.ClusterInstanceStorageConfig]? = nil,
            instanceType: SageMakerClientTypes.ClusterInstanceType? = nil,
            launchTime: Foundation.Date? = nil,
            lifeCycleConfig: SageMakerClientTypes.ClusterLifeCycleConfig? = nil,
            placement: SageMakerClientTypes.ClusterInstancePlacement? = nil,
            privateDnsHostname: Swift.String? = nil,
            privatePrimaryIp: Swift.String? = nil,
            threadsPerCore: Swift.Int? = nil
        )
        {
            self.instanceGroupName = instanceGroupName
            self.instanceId = instanceId
            self.instanceStatus = instanceStatus
            self.instanceStorageConfigs = instanceStorageConfigs
            self.instanceType = instanceType
            self.launchTime = launchTime
            self.lifeCycleConfig = lifeCycleConfig
            self.placement = placement
            self.privateDnsHostname = privateDnsHostname
            self.privatePrimaryIp = privatePrimaryIp
            self.threadsPerCore = threadsPerCore
        }
    }

}

extension SageMakerClientTypes {

    public enum ClusterNodeRecovery: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case automatic
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ClusterNodeRecovery] {
            return [
                .automatic,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .automatic: return "Automatic"
            case .none: return "None"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Lists a summary of the properties of an instance (also called a node interchangeably) of a SageMaker HyperPod cluster.
    public struct ClusterNodeSummary {
        /// The name of the instance group in which the instance is.
        /// This member is required.
        public var instanceGroupName: Swift.String?
        /// The ID of the instance.
        /// This member is required.
        public var instanceId: Swift.String?
        /// The status of the instance.
        /// This member is required.
        public var instanceStatus: SageMakerClientTypes.ClusterInstanceStatusDetails?
        /// The type of the instance.
        /// This member is required.
        public var instanceType: SageMakerClientTypes.ClusterInstanceType?
        /// The time when the instance is launched.
        /// This member is required.
        public var launchTime: Foundation.Date?

        public init(
            instanceGroupName: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            instanceStatus: SageMakerClientTypes.ClusterInstanceStatusDetails? = nil,
            instanceType: SageMakerClientTypes.ClusterInstanceType? = nil,
            launchTime: Foundation.Date? = nil
        )
        {
            self.instanceGroupName = instanceGroupName
            self.instanceId = instanceId
            self.instanceStatus = instanceStatus
            self.instanceType = instanceType
            self.launchTime = launchTime
        }
    }

}

extension SageMakerClientTypes {
    /// The configuration settings for the Amazon EKS cluster used as the orchestrator for the SageMaker HyperPod cluster.
    public struct ClusterOrchestratorEksConfig {
        /// The Amazon Resource Name (ARN) of the Amazon EKS cluster associated with the SageMaker HyperPod cluster.
        /// This member is required.
        public var clusterArn: Swift.String?

        public init(
            clusterArn: Swift.String? = nil
        )
        {
            self.clusterArn = clusterArn
        }
    }

}

extension SageMakerClientTypes {
    /// The type of orchestrator used for the SageMaker HyperPod cluster.
    public struct ClusterOrchestrator {
        /// The Amazon EKS cluster used as the orchestrator for the SageMaker HyperPod cluster.
        /// This member is required.
        public var eks: SageMakerClientTypes.ClusterOrchestratorEksConfig?

        public init(
            eks: SageMakerClientTypes.ClusterOrchestratorEksConfig? = nil
        )
        {
            self.eks = eks
        }
    }

}

extension SageMakerClientTypes {

    public enum ClusterSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ClusterSortBy] {
            return [
                .creationTime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CREATION_TIME"
            case .name: return "NAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum ClusterStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creating
        case deleting
        case failed
        case inservice
        case rollingback
        case systemupdating
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ClusterStatus] {
            return [
                .creating,
                .deleting,
                .failed,
                .inservice,
                .rollingback,
                .systemupdating,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creating: return "Creating"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inservice: return "InService"
            case .rollingback: return "RollingBack"
            case .systemupdating: return "SystemUpdating"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Lists a summary of the properties of a SageMaker HyperPod cluster.
    public struct ClusterSummary {
        /// The Amazon Resource Name (ARN) of the SageMaker HyperPod cluster.
        /// This member is required.
        public var clusterArn: Swift.String?
        /// The name of the SageMaker HyperPod cluster.
        /// This member is required.
        public var clusterName: Swift.String?
        /// The status of the SageMaker HyperPod cluster.
        /// This member is required.
        public var clusterStatus: SageMakerClientTypes.ClusterStatus?
        /// The time when the SageMaker HyperPod cluster is created.
        /// This member is required.
        public var creationTime: Foundation.Date?

        public init(
            clusterArn: Swift.String? = nil,
            clusterName: Swift.String? = nil,
            clusterStatus: SageMakerClientTypes.ClusterStatus? = nil,
            creationTime: Foundation.Date? = nil
        )
        {
            self.clusterArn = clusterArn
            self.clusterName = clusterName
            self.clusterStatus = clusterStatus
            self.creationTime = creationTime
        }
    }

}

extension SageMakerClientTypes {
    /// A custom SageMaker image. For more information, see [Bring your own SageMaker image](https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html).
    public struct CustomImage {
        /// The name of the AppImageConfig.
        /// This member is required.
        public var appImageConfigName: Swift.String?
        /// The name of the CustomImage. Must be unique to your account.
        /// This member is required.
        public var imageName: Swift.String?
        /// The version number of the CustomImage.
        public var imageVersionNumber: Swift.Int?

        public init(
            appImageConfigName: Swift.String? = nil,
            imageName: Swift.String? = nil,
            imageVersionNumber: Swift.Int? = nil
        )
        {
            self.appImageConfigName = appImageConfigName
            self.imageName = imageName
            self.imageVersionNumber = imageVersionNumber
        }
    }

}

extension SageMakerClientTypes {
    /// The Code Editor application settings. For more information about Code Editor, see [Get started with Code Editor in Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/code-editor.html).
    public struct CodeEditorAppSettings {
        /// Settings that are used to configure and manage the lifecycle of CodeEditor applications.
        public var appLifecycleManagement: SageMakerClientTypes.AppLifecycleManagement?
        /// A list of custom SageMaker images that are configured to run as a Code Editor app.
        public var customImages: [SageMakerClientTypes.CustomImage]?
        /// Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
        public var defaultResourceSpec: SageMakerClientTypes.ResourceSpec?
        /// The Amazon Resource Name (ARN) of the Code Editor application lifecycle configuration.
        public var lifecycleConfigArns: [Swift.String]?

        public init(
            appLifecycleManagement: SageMakerClientTypes.AppLifecycleManagement? = nil,
            customImages: [SageMakerClientTypes.CustomImage]? = nil,
            defaultResourceSpec: SageMakerClientTypes.ResourceSpec? = nil,
            lifecycleConfigArns: [Swift.String]? = nil
        )
        {
            self.appLifecycleManagement = appLifecycleManagement
            self.customImages = customImages
            self.defaultResourceSpec = defaultResourceSpec
            self.lifecycleConfigArns = lifecycleConfigArns
        }
    }

}

extension SageMakerClientTypes {
    /// A Git repository that SageMaker automatically displays to users for cloning in the JupyterServer application.
    public struct CodeRepository {
        /// The URL of the Git repository.
        /// This member is required.
        public var repositoryUrl: Swift.String?

        public init(
            repositoryUrl: Swift.String? = nil
        )
        {
            self.repositoryUrl = repositoryUrl
        }
    }

}

extension SageMakerClientTypes {

    public enum CodeRepositorySortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case lastModifiedTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [CodeRepositorySortBy] {
            return [
                .creationTime,
                .lastModifiedTime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .lastModifiedTime: return "LastModifiedTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum CodeRepositorySortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [CodeRepositorySortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies configuration details for a Git repository in your Amazon Web Services account.
    public struct GitConfig {
        /// The default branch for the Git repository.
        public var branch: Swift.String?
        /// The URL where the Git repository is located.
        /// This member is required.
        public var repositoryUrl: Swift.String?
        /// The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that contains the credentials used to access the git repository. The secret must have a staging label of AWSCURRENT and must be in the following format: {"username": UserName, "password": Password}
        public var secretArn: Swift.String?

        public init(
            branch: Swift.String? = nil,
            repositoryUrl: Swift.String? = nil,
            secretArn: Swift.String? = nil
        )
        {
            self.branch = branch
            self.repositoryUrl = repositoryUrl
            self.secretArn = secretArn
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies summary information about a Git repository.
    public struct CodeRepositorySummary {
        /// The Amazon Resource Name (ARN) of the Git repository.
        /// This member is required.
        public var codeRepositoryArn: Swift.String?
        /// The name of the Git repository.
        /// This member is required.
        public var codeRepositoryName: Swift.String?
        /// The date and time that the Git repository was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// Configuration details for the Git repository, including the URL where it is located and the ARN of the Amazon Web Services Secrets Manager secret that contains the credentials used to access the repository.
        public var gitConfig: SageMakerClientTypes.GitConfig?
        /// The date and time that the Git repository was last modified.
        /// This member is required.
        public var lastModifiedTime: Foundation.Date?

        public init(
            codeRepositoryArn: Swift.String? = nil,
            codeRepositoryName: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            gitConfig: SageMakerClientTypes.GitConfig? = nil,
            lastModifiedTime: Foundation.Date? = nil
        )
        {
            self.codeRepositoryArn = codeRepositoryArn
            self.codeRepositoryName = codeRepositoryName
            self.creationTime = creationTime
            self.gitConfig = gitConfig
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension SageMakerClientTypes {
    /// Use this parameter to configure your Amazon Cognito workforce. A single Cognito workforce is created using and corresponds to a single [ Amazon Cognito user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html).
    public struct CognitoConfig {
        /// The client ID for your Amazon Cognito user pool.
        /// This member is required.
        public var clientId: Swift.String?
        /// A [ user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html) is a user directory in Amazon Cognito. With a user pool, your users can sign in to your web or mobile app through Amazon Cognito. Your users can also sign in through social identity providers like Google, Facebook, Amazon, or Apple, and through SAML identity providers.
        /// This member is required.
        public var userPool: Swift.String?

        public init(
            clientId: Swift.String? = nil,
            userPool: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.userPool = userPool
        }
    }

}

extension SageMakerClientTypes {
    /// Identifies a Amazon Cognito user group. A user group can be used in on or more work teams.
    public struct CognitoMemberDefinition {
        /// An identifier for an application client. You must create the app client ID using Amazon Cognito.
        /// This member is required.
        public var clientId: Swift.String?
        /// An identifier for a user group.
        /// This member is required.
        public var userGroup: Swift.String?
        /// An identifier for a user pool. The user pool must be in the same region as the service that you are calling.
        /// This member is required.
        public var userPool: Swift.String?

        public init(
            clientId: Swift.String? = nil,
            userGroup: Swift.String? = nil,
            userPool: Swift.String? = nil
        )
        {
            self.clientId = clientId
            self.userGroup = userGroup
            self.userPool = userPool
        }
    }

}

extension SageMakerClientTypes {
    /// Configuration for your vector collection type.
    public struct VectorConfig {
        /// The number of elements in your vector.
        /// This member is required.
        public var dimension: Swift.Int?

        public init(
            dimension: Swift.Int? = nil
        )
        {
            self.dimension = dimension
        }
    }

}

extension SageMakerClientTypes {
    /// Configuration for your collection.
    public enum CollectionConfig {
        /// Configuration for your vector collection type.
        ///
        /// * Dimension: The number of elements in your vector.
        case vectorconfig(SageMakerClientTypes.VectorConfig)
        case sdkUnknown(Swift.String)
    }

}

extension SageMakerClientTypes {
    /// Configuration information for the Amazon SageMaker Debugger output tensor collections.
    public struct CollectionConfiguration {
        /// The name of the tensor collection. The name must be unique relative to other rule configuration names.
        public var collectionName: Swift.String?
        /// Parameter values for the tensor collection. The allowed parameters are "name", "include_regex", "reduction_config", "save_config", "tensor_names", and "save_histogram".
        public var collectionParameters: [Swift.String: Swift.String]?

        public init(
            collectionName: Swift.String? = nil,
            collectionParameters: [Swift.String: Swift.String]? = nil
        )
        {
            self.collectionName = collectionName
            self.collectionParameters = collectionParameters
        }
    }

}

extension SageMakerClientTypes {

    public enum CollectionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case list
        case `set`
        case vector
        case sdkUnknown(Swift.String)

        public static var allCases: [CollectionType] {
            return [
                .list,
                .set,
                .vector
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .list: return "List"
            case .set: return "Set"
            case .vector: return "Vector"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum CompilationJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inprogress
        case starting
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [CompilationJobStatus] {
            return [
                .completed,
                .failed,
                .inprogress,
                .starting,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inprogress: return "INPROGRESS"
            case .starting: return "STARTING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum TargetDevice: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case aisage
        case ambaCv2
        case ambaCv22
        case ambaCv25
        case coreml
        case deeplens
        case imx8mplus
        case imx8qm
        case jacintoTda4vm
        case jetsonNano
        case jetsonTx1
        case jetsonTx2
        case jetsonXavier
        case lambda
        case mlC4
        case mlC5
        case mlC6g
        case mlEia2
        case mlG4dn
        case mlInf1
        case mlInf2
        case mlM4
        case mlM5
        case mlM6g
        case mlP2
        case mlP3
        case mlTrn1
        case qcs603
        case qcs605
        case rasp3b
        case rasp4b
        case rk3288
        case rk3399
        case sbeC
        case sitaraAm57x
        case x86Win32
        case x86Win64
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetDevice] {
            return [
                .aisage,
                .ambaCv2,
                .ambaCv22,
                .ambaCv25,
                .coreml,
                .deeplens,
                .imx8mplus,
                .imx8qm,
                .jacintoTda4vm,
                .jetsonNano,
                .jetsonTx1,
                .jetsonTx2,
                .jetsonXavier,
                .lambda,
                .mlC4,
                .mlC5,
                .mlC6g,
                .mlEia2,
                .mlG4dn,
                .mlInf1,
                .mlInf2,
                .mlM4,
                .mlM5,
                .mlM6g,
                .mlP2,
                .mlP3,
                .mlTrn1,
                .qcs603,
                .qcs605,
                .rasp3b,
                .rasp4b,
                .rk3288,
                .rk3399,
                .sbeC,
                .sitaraAm57x,
                .x86Win32,
                .x86Win64
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .aisage: return "aisage"
            case .ambaCv2: return "amba_cv2"
            case .ambaCv22: return "amba_cv22"
            case .ambaCv25: return "amba_cv25"
            case .coreml: return "coreml"
            case .deeplens: return "deeplens"
            case .imx8mplus: return "imx8mplus"
            case .imx8qm: return "imx8qm"
            case .jacintoTda4vm: return "jacinto_tda4vm"
            case .jetsonNano: return "jetson_nano"
            case .jetsonTx1: return "jetson_tx1"
            case .jetsonTx2: return "jetson_tx2"
            case .jetsonXavier: return "jetson_xavier"
            case .lambda: return "lambda"
            case .mlC4: return "ml_c4"
            case .mlC5: return "ml_c5"
            case .mlC6g: return "ml_c6g"
            case .mlEia2: return "ml_eia2"
            case .mlG4dn: return "ml_g4dn"
            case .mlInf1: return "ml_inf1"
            case .mlInf2: return "ml_inf2"
            case .mlM4: return "ml_m4"
            case .mlM5: return "ml_m5"
            case .mlM6g: return "ml_m6g"
            case .mlP2: return "ml_p2"
            case .mlP3: return "ml_p3"
            case .mlTrn1: return "ml_trn1"
            case .qcs603: return "qcs603"
            case .qcs605: return "qcs605"
            case .rasp3b: return "rasp3b"
            case .rasp4b: return "rasp4b"
            case .rk3288: return "rk3288"
            case .rk3399: return "rk3399"
            case .sbeC: return "sbe_c"
            case .sitaraAm57x: return "sitara_am57x"
            case .x86Win32: return "x86_win32"
            case .x86Win64: return "x86_win64"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum TargetPlatformAccelerator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case intelGraphics
        case mali
        case nna
        case nvidia
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetPlatformAccelerator] {
            return [
                .intelGraphics,
                .mali,
                .nna,
                .nvidia
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .intelGraphics: return "INTEL_GRAPHICS"
            case .mali: return "MALI"
            case .nna: return "NNA"
            case .nvidia: return "NVIDIA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum TargetPlatformArch: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case arm64
        case armEabi
        case armEabihf
        case x86
        case x8664
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetPlatformArch] {
            return [
                .arm64,
                .armEabi,
                .armEabihf,
                .x86,
                .x8664
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .arm64: return "ARM64"
            case .armEabi: return "ARM_EABI"
            case .armEabihf: return "ARM_EABIHF"
            case .x86: return "X86"
            case .x8664: return "X86_64"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum TargetPlatformOs: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case android
        case linux
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetPlatformOs] {
            return [
                .android,
                .linux
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .android: return "ANDROID"
            case .linux: return "LINUX"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A summary of a model compilation job.
    public struct CompilationJobSummary {
        /// The time when the model compilation job completed.
        public var compilationEndTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the model compilation job.
        /// This member is required.
        public var compilationJobArn: Swift.String?
        /// The name of the model compilation job that you want a summary for.
        /// This member is required.
        public var compilationJobName: Swift.String?
        /// The status of the model compilation job.
        /// This member is required.
        public var compilationJobStatus: SageMakerClientTypes.CompilationJobStatus?
        /// The time when the model compilation job started.
        public var compilationStartTime: Foundation.Date?
        /// The type of device that the model will run on after the compilation job has completed.
        public var compilationTargetDevice: SageMakerClientTypes.TargetDevice?
        /// The type of accelerator that the model will run on after the compilation job has completed.
        public var compilationTargetPlatformAccelerator: SageMakerClientTypes.TargetPlatformAccelerator?
        /// The type of architecture that the model will run on after the compilation job has completed.
        public var compilationTargetPlatformArch: SageMakerClientTypes.TargetPlatformArch?
        /// The type of OS that the model will run on after the compilation job has completed.
        public var compilationTargetPlatformOs: SageMakerClientTypes.TargetPlatformOs?
        /// The time when the model compilation job was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The time when the model compilation job was last modified.
        public var lastModifiedTime: Foundation.Date?

        public init(
            compilationEndTime: Foundation.Date? = nil,
            compilationJobArn: Swift.String? = nil,
            compilationJobName: Swift.String? = nil,
            compilationJobStatus: SageMakerClientTypes.CompilationJobStatus? = nil,
            compilationStartTime: Foundation.Date? = nil,
            compilationTargetDevice: SageMakerClientTypes.TargetDevice? = nil,
            compilationTargetPlatformAccelerator: SageMakerClientTypes.TargetPlatformAccelerator? = nil,
            compilationTargetPlatformArch: SageMakerClientTypes.TargetPlatformArch? = nil,
            compilationTargetPlatformOs: SageMakerClientTypes.TargetPlatformOs? = nil,
            creationTime: Foundation.Date? = nil,
            lastModifiedTime: Foundation.Date? = nil
        )
        {
            self.compilationEndTime = compilationEndTime
            self.compilationJobArn = compilationJobArn
            self.compilationJobName = compilationJobName
            self.compilationJobStatus = compilationJobStatus
            self.compilationStartTime = compilationStartTime
            self.compilationTargetDevice = compilationTargetDevice
            self.compilationTargetPlatformAccelerator = compilationTargetPlatformAccelerator
            self.compilationTargetPlatformArch = compilationTargetPlatformArch
            self.compilationTargetPlatformOs = compilationTargetPlatformOs
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension SageMakerClientTypes {

    public enum CompleteOnConvergence: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [CompleteOnConvergence] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum ConditionOutcome: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `false`
        case `true`
        case sdkUnknown(Swift.String)

        public static var allCases: [ConditionOutcome] {
            return [
                .false,
                .true
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .false: return "False"
            case .true: return "True"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Metadata for a Condition step.
    public struct ConditionStepMetadata {
        /// The outcome of the Condition step evaluation.
        public var outcome: SageMakerClientTypes.ConditionOutcome?

        public init(
            outcome: SageMakerClientTypes.ConditionOutcome? = nil
        )
        {
            self.outcome = outcome
        }
    }

}

/// There was a conflict when you attempted to modify a SageMaker entity such as an Experiment or Artifact.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension SageMakerClientTypes {

    public enum RepositoryAccessMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case platform
        case vpc
        case sdkUnknown(Swift.String)

        public static var allCases: [RepositoryAccessMode] {
            return [
                .platform,
                .vpc
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .platform: return "Platform"
            case .vpc: return "Vpc"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field of the ImageConfig object that you passed to a call to CreateModel and the private Docker registry where the model image is hosted requires authentication.
    public struct RepositoryAuthConfig {
        /// The Amazon Resource Name (ARN) of an Amazon Web Services Lambda function that provides credentials to authenticate to the private Docker registry where your model image is hosted. For information about how to create an Amazon Web Services Lambda function, see [Create a Lambda function with the console](https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html) in the Amazon Web Services Lambda Developer Guide.
        /// This member is required.
        public var repositoryCredentialsProviderArn: Swift.String?

        public init(
            repositoryCredentialsProviderArn: Swift.String? = nil
        )
        {
            self.repositoryCredentialsProviderArn = repositoryCredentialsProviderArn
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC).
    public struct ImageConfig {
        /// Set this to one of the following values:
        ///
        /// * Platform - The model image is hosted in Amazon ECR.
        ///
        /// * Vpc - The model image is hosted in a private Docker registry in your VPC.
        /// This member is required.
        public var repositoryAccessMode: SageMakerClientTypes.RepositoryAccessMode?
        /// (Optional) Specifies an authentication configuration for the private docker registry where your model image is hosted. Specify a value for this property only if you specified Vpc as the value for the RepositoryAccessMode field, and the private Docker registry where the model image is hosted requires authentication.
        public var repositoryAuthConfig: SageMakerClientTypes.RepositoryAuthConfig?

        public init(
            repositoryAccessMode: SageMakerClientTypes.RepositoryAccessMode? = nil,
            repositoryAuthConfig: SageMakerClientTypes.RepositoryAuthConfig? = nil
        )
        {
            self.repositoryAccessMode = repositoryAccessMode
            self.repositoryAuthConfig = repositoryAuthConfig
        }
    }

}

extension SageMakerClientTypes {

    public enum ContainerMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case multiModel
        case singleModel
        case sdkUnknown(Swift.String)

        public static var allCases: [ContainerMode] {
            return [
                .multiModel,
                .singleModel
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .multiModel: return "MultiModel"
            case .singleModel: return "SingleModel"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum ModelCacheSetting: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelCacheSetting] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies additional configuration for hosting multi-model endpoints.
    public struct MultiModelConfig {
        /// Whether to cache models for a multi-model endpoint. By default, multi-model endpoints cache models so that a model does not have to be loaded into memory each time it is invoked. Some use cases do not benefit from model caching. For example, if an endpoint hosts a large number of models that are each invoked infrequently, the endpoint might perform better if you disable model caching. To disable model caching, set the value of this parameter to Disabled.
        public var modelCacheSetting: SageMakerClientTypes.ModelCacheSetting?

        public init(
            modelCacheSetting: SageMakerClientTypes.ModelCacheSetting? = nil
        )
        {
            self.modelCacheSetting = modelCacheSetting
        }
    }

}

extension SageMakerClientTypes {
    /// Describes the container, as part of model definition.
    public struct ContainerDefinition {
        /// Data sources that are available to your model in addition to the one that you specify for ModelDataSource when you use the CreateModel action.
        public var additionalModelDataSources: [SageMakerClientTypes.AdditionalModelDataSource]?
        /// This parameter is ignored for models that contain only a PrimaryContainer. When a ContainerDefinition is part of an inference pipeline, the value of the parameter uniquely identifies the container for the purposes of logging and metrics. For information, see [Use Logs and Metrics to Monitor an Inference Pipeline](https://docs.aws.amazon.com/sagemaker/latest/dg/inference-pipeline-logs-metrics.html). If you don't specify a value for this parameter for a ContainerDefinition that is part of an inference pipeline, a unique name is automatically assigned based on the position of the ContainerDefinition in the pipeline. If you specify a value for the ContainerHostName for any ContainerDefinition that is part of an inference pipeline, you must specify a value for the ContainerHostName parameter of every ContainerDefinition in that pipeline.
        public var containerHostname: Swift.String?
        /// The environment variables to set in the Docker container. Don't include any sensitive data in your environment variables. The maximum length of each key and value in the Environment map is 1024 bytes. The maximum length of all keys and values in the map, combined, is 32 KB. If you pass multiple containers to a CreateModel request, then the maximum length of all of their maps, combined, is also 32 KB.
        public var environment: [Swift.String: Swift.String]?
        /// The path where inference code is stored. This can be either in Amazon EC2 Container Registry or in a Docker registry that is accessible from the same VPC that you configure for your endpoint. If you are using your own custom algorithm instead of an algorithm provided by SageMaker, the inference code must meet SageMaker requirements. SageMaker supports both registry/repository[:tag] and registry/repository[@digest] image path formats. For more information, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html). The model artifacts in an Amazon S3 bucket and the Docker image for inference container in Amazon EC2 Container Registry must be in the same region as the model or endpoint you are creating.
        public var image: Swift.String?
        /// Specifies whether the model container is in Amazon ECR or a private Docker registry accessible from your Amazon Virtual Private Cloud (VPC). For information about storing containers in a private Docker registry, see [Use a Private Docker Registry for Real-Time Inference Containers](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-containers-inference-private.html). The model artifacts in an Amazon S3 bucket and the Docker image for inference container in Amazon EC2 Container Registry must be in the same region as the model or endpoint you are creating.
        public var imageConfig: SageMakerClientTypes.ImageConfig?
        /// The inference specification name in the model package version.
        public var inferenceSpecificationName: Swift.String?
        /// Whether the container hosts a single model or multiple models.
        public var mode: SageMakerClientTypes.ContainerMode?
        /// Specifies the location of ML model data to deploy. Currently you cannot use ModelDataSource in conjunction with SageMaker batch transform, SageMaker serverless endpoints, SageMaker multi-model endpoints, and SageMaker Marketplace.
        public var modelDataSource: SageMakerClientTypes.ModelDataSource?
        /// The S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix). The S3 path is required for SageMaker built-in algorithms, but not if you use your own algorithms. For more information on built-in algorithms, see [Common Parameters](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html). The model artifacts must be in an S3 bucket that is in the same region as the model or endpoint you are creating. If you provide a value for this parameter, SageMaker uses Amazon Web Services Security Token Service to download model artifacts from the S3 path you provide. Amazon Web Services STS is activated in your Amazon Web Services account by default. If you previously deactivated Amazon Web Services STS for a region, you need to reactivate Amazon Web Services STS for that region. For more information, see [Activating and Deactivating Amazon Web Services STS in an Amazon Web Services Region](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html) in the Amazon Web Services Identity and Access Management User Guide. If you use a built-in algorithm to create a model, SageMaker requires that you provide a S3 path to the model artifacts in ModelDataUrl.
        public var modelDataUrl: Swift.String?
        /// The name or Amazon Resource Name (ARN) of the model package to use to create the model.
        public var modelPackageName: Swift.String?
        /// Specifies additional configuration for multi-model endpoints.
        public var multiModelConfig: SageMakerClientTypes.MultiModelConfig?

        public init(
            additionalModelDataSources: [SageMakerClientTypes.AdditionalModelDataSource]? = nil,
            containerHostname: Swift.String? = nil,
            environment: [Swift.String: Swift.String]? = nil,
            image: Swift.String? = nil,
            imageConfig: SageMakerClientTypes.ImageConfig? = nil,
            inferenceSpecificationName: Swift.String? = nil,
            mode: SageMakerClientTypes.ContainerMode? = nil,
            modelDataSource: SageMakerClientTypes.ModelDataSource? = nil,
            modelDataUrl: Swift.String? = nil,
            modelPackageName: Swift.String? = nil,
            multiModelConfig: SageMakerClientTypes.MultiModelConfig? = nil
        )
        {
            self.additionalModelDataSources = additionalModelDataSources
            self.containerHostname = containerHostname
            self.environment = environment
            self.image = image
            self.imageConfig = imageConfig
            self.inferenceSpecificationName = inferenceSpecificationName
            self.mode = mode
            self.modelDataSource = modelDataSource
            self.modelDataUrl = modelDataUrl
            self.modelPackageName = modelPackageName
            self.multiModelConfig = multiModelConfig
        }
    }

}

extension SageMakerClientTypes {

    public enum ContentClassifier: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case freeOfAdultContent
        case freeOfPersonallyIdentifiableInformation
        case sdkUnknown(Swift.String)

        public static var allCases: [ContentClassifier] {
            return [
                .freeOfAdultContent,
                .freeOfPersonallyIdentifiableInformation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .freeOfAdultContent: return "FreeOfAdultContent"
            case .freeOfPersonallyIdentifiableInformation: return "FreeOfPersonallyIdentifiableInformation"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A structure describing the source of a context.
    public struct ContextSource {
        /// The ID of the source.
        public var sourceId: Swift.String?
        /// The type of the source.
        public var sourceType: Swift.String?
        /// The URI of the source.
        /// This member is required.
        public var sourceUri: Swift.String?

        public init(
            sourceId: Swift.String? = nil,
            sourceType: Swift.String? = nil,
            sourceUri: Swift.String? = nil
        )
        {
            self.sourceId = sourceId
            self.sourceType = sourceType
            self.sourceUri = sourceUri
        }
    }

}

extension SageMakerClientTypes {
    /// Lists a summary of the properties of a context. A context provides a logical grouping of other entities.
    public struct ContextSummary {
        /// The Amazon Resource Name (ARN) of the context.
        public var contextArn: Swift.String?
        /// The name of the context.
        public var contextName: Swift.String?
        /// The type of the context.
        public var contextType: Swift.String?
        /// When the context was created.
        public var creationTime: Foundation.Date?
        /// When the context was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The source of the context.
        public var source: SageMakerClientTypes.ContextSource?

        public init(
            contextArn: Swift.String? = nil,
            contextName: Swift.String? = nil,
            contextType: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            source: SageMakerClientTypes.ContextSource? = nil
        )
        {
            self.contextArn = contextArn
            self.contextName = contextName
            self.contextType = contextType
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
            self.source = source
        }
    }

}

extension SageMakerClientTypes {

    public enum HyperParameterScalingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case linear
        case logarithmic
        case reverseLogarithmic
        case sdkUnknown(Swift.String)

        public static var allCases: [HyperParameterScalingType] {
            return [
                .auto,
                .linear,
                .logarithmic,
                .reverseLogarithmic
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "Auto"
            case .linear: return "Linear"
            case .logarithmic: return "Logarithmic"
            case .reverseLogarithmic: return "ReverseLogarithmic"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A list of continuous hyperparameters to tune.
    public struct ContinuousParameterRange {
        /// The maximum value for the hyperparameter. The tuning job uses floating-point values between MinValue value and this value for tuning.
        /// This member is required.
        public var maxValue: Swift.String?
        /// The minimum value for the hyperparameter. The tuning job uses floating-point values between this value and MaxValuefor tuning.
        /// This member is required.
        public var minValue: Swift.String?
        /// The name of the continuous hyperparameter to tune.
        /// This member is required.
        public var name: Swift.String?
        /// The scale that hyperparameter tuning uses to search the hyperparameter range. For information about choosing a hyperparameter scale, see [Hyperparameter Scaling](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type). One of the following values: Auto SageMaker hyperparameter tuning chooses the best scale for the hyperparameter. Linear Hyperparameter tuning searches the values in the hyperparameter range by using a linear scale. Logarithmic Hyperparameter tuning searches the values in the hyperparameter range by using a logarithmic scale. Logarithmic scaling works only for ranges that have only values greater than 0. ReverseLogarithmic Hyperparameter tuning searches the values in the hyperparameter range by using a reverse logarithmic scale. Reverse logarithmic scaling works only for ranges that are entirely within the range 0<=x<1.0.
        public var scalingType: SageMakerClientTypes.HyperParameterScalingType?

        public init(
            maxValue: Swift.String? = nil,
            minValue: Swift.String? = nil,
            name: Swift.String? = nil,
            scalingType: SageMakerClientTypes.HyperParameterScalingType? = nil
        )
        {
            self.maxValue = maxValue
            self.minValue = minValue
            self.name = name
            self.scalingType = scalingType
        }
    }

}

extension SageMakerClientTypes {
    /// Defines the possible values for a continuous hyperparameter.
    public struct ContinuousParameterRangeSpecification {
        /// The maximum floating-point value allowed.
        /// This member is required.
        public var maxValue: Swift.String?
        /// The minimum floating-point value allowed.
        /// This member is required.
        public var minValue: Swift.String?

        public init(
            maxValue: Swift.String? = nil,
            minValue: Swift.String? = nil
        )
        {
            self.maxValue = maxValue
            self.minValue = minValue
        }
    }

}

extension SageMakerClientTypes {
    /// A flag to indicating that automatic model tuning (AMT) has detected model convergence, defined as a lack of significant improvement (1% or less) against an objective metric.
    public struct ConvergenceDetected {
        /// A flag to stop a tuning job once AMT has detected that the job has converged.
        public var completeOnConvergence: SageMakerClientTypes.CompleteOnConvergence?

        public init(
            completeOnConvergence: SageMakerClientTypes.CompleteOnConvergence? = nil
        )
        {
            self.completeOnConvergence = completeOnConvergence
        }
    }

}

extension SageMakerClientTypes {
    /// Metadata properties of the tracking entity, trial, or trial component.
    public struct MetadataProperties {
        /// The commit ID.
        public var commitId: Swift.String?
        /// The entity this entity was generated by.
        public var generatedBy: Swift.String?
        /// The project ID.
        public var projectId: Swift.String?
        /// The repository.
        public var repository: Swift.String?

        public init(
            commitId: Swift.String? = nil,
            generatedBy: Swift.String? = nil,
            projectId: Swift.String? = nil,
            repository: Swift.String? = nil
        )
        {
            self.commitId = commitId
            self.generatedBy = generatedBy
            self.projectId = projectId
            self.repository = repository
        }
    }

}

public struct CreateActionInput {
    /// The name of the action. Must be unique to your account in an Amazon Web Services Region.
    /// This member is required.
    public var actionName: Swift.String?
    /// The action type.
    /// This member is required.
    public var actionType: Swift.String?
    /// The description of the action.
    public var description: Swift.String?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// A list of properties to add to the action.
    public var properties: [Swift.String: Swift.String]?
    /// The source type, ID, and URI.
    /// This member is required.
    public var source: SageMakerClientTypes.ActionSource?
    /// The status of the action.
    public var status: SageMakerClientTypes.ActionStatus?
    /// A list of tags to apply to the action.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        actionName: Swift.String? = nil,
        actionType: Swift.String? = nil,
        description: Swift.String? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        properties: [Swift.String: Swift.String]? = nil,
        source: SageMakerClientTypes.ActionSource? = nil,
        status: SageMakerClientTypes.ActionStatus? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.actionName = actionName
        self.actionType = actionType
        self.description = description
        self.metadataProperties = metadataProperties
        self.properties = properties
        self.source = source
        self.status = status
        self.tags = tags
    }
}

public struct CreateActionOutput {
    /// The Amazon Resource Name (ARN) of the action.
    public var actionArn: Swift.String?

    public init(
        actionArn: Swift.String? = nil
    )
    {
        self.actionArn = actionArn
    }
}

extension SageMakerClientTypes {
    /// Defines the possible values for an integer hyperparameter.
    public struct IntegerParameterRangeSpecification {
        /// The maximum integer value allowed.
        /// This member is required.
        public var maxValue: Swift.String?
        /// The minimum integer value allowed.
        /// This member is required.
        public var minValue: Swift.String?

        public init(
            maxValue: Swift.String? = nil,
            minValue: Swift.String? = nil
        )
        {
            self.maxValue = maxValue
            self.minValue = minValue
        }
    }

}

extension SageMakerClientTypes {
    /// Defines the possible values for categorical, continuous, and integer hyperparameters to be used by an algorithm.
    public struct ParameterRange {
        /// A CategoricalParameterRangeSpecification object that defines the possible values for a categorical hyperparameter.
        public var categoricalParameterRangeSpecification: SageMakerClientTypes.CategoricalParameterRangeSpecification?
        /// A ContinuousParameterRangeSpecification object that defines the possible values for a continuous hyperparameter.
        public var continuousParameterRangeSpecification: SageMakerClientTypes.ContinuousParameterRangeSpecification?
        /// A IntegerParameterRangeSpecification object that defines the possible values for an integer hyperparameter.
        public var integerParameterRangeSpecification: SageMakerClientTypes.IntegerParameterRangeSpecification?

        public init(
            categoricalParameterRangeSpecification: SageMakerClientTypes.CategoricalParameterRangeSpecification? = nil,
            continuousParameterRangeSpecification: SageMakerClientTypes.ContinuousParameterRangeSpecification? = nil,
            integerParameterRangeSpecification: SageMakerClientTypes.IntegerParameterRangeSpecification? = nil
        )
        {
            self.categoricalParameterRangeSpecification = categoricalParameterRangeSpecification
            self.continuousParameterRangeSpecification = continuousParameterRangeSpecification
            self.integerParameterRangeSpecification = integerParameterRangeSpecification
        }
    }

}

extension SageMakerClientTypes {

    public enum ParameterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case categorical
        case continuous
        case freeText
        case integer
        case sdkUnknown(Swift.String)

        public static var allCases: [ParameterType] {
            return [
                .categorical,
                .continuous,
                .freeText,
                .integer
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .categorical: return "Categorical"
            case .continuous: return "Continuous"
            case .freeText: return "FreeText"
            case .integer: return "Integer"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Defines a hyperparameter to be used by an algorithm.
    public struct HyperParameterSpecification {
        /// The default value for this hyperparameter. If a default value is specified, a hyperparameter cannot be required.
        public var defaultValue: Swift.String?
        /// A brief description of the hyperparameter.
        public var description: Swift.String?
        /// Indicates whether this hyperparameter is required.
        public var isRequired: Swift.Bool?
        /// Indicates whether this hyperparameter is tunable in a hyperparameter tuning job.
        public var isTunable: Swift.Bool?
        /// The name of this hyperparameter. The name must be unique.
        /// This member is required.
        public var name: Swift.String?
        /// The allowed range for this hyperparameter.
        public var range: SageMakerClientTypes.ParameterRange?
        /// The type of this hyperparameter. The valid types are Integer, Continuous, Categorical, and FreeText.
        /// This member is required.
        public var type: SageMakerClientTypes.ParameterType?

        public init(
            defaultValue: Swift.String? = nil,
            description: Swift.String? = nil,
            isRequired: Swift.Bool? = nil,
            isTunable: Swift.Bool? = nil,
            name: Swift.String? = nil,
            range: SageMakerClientTypes.ParameterRange? = nil,
            type: SageMakerClientTypes.ParameterType? = nil
        )
        {
            self.defaultValue = defaultValue
            self.description = description
            self.isRequired = isRequired
            self.isTunable = isTunable
            self.name = name
            self.range = range
            self.type = type
        }
    }

}

extension SageMakerClientTypes {

    public enum HyperParameterTuningJobObjectiveType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case maximize
        case minimize
        case sdkUnknown(Swift.String)

        public static var allCases: [HyperParameterTuningJobObjectiveType] {
            return [
                .maximize,
                .minimize
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .maximize: return "Maximize"
            case .minimize: return "Minimize"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Defines the objective metric for a hyperparameter tuning job. Hyperparameter tuning uses the value of this metric to evaluate the training jobs it launches, and returns the training job that results in either the highest or lowest value for this metric, depending on the value you specify for the Type parameter. If you want to define a custom objective metric, see [Define metrics and environment variables](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics-variables.html).
    public struct HyperParameterTuningJobObjective {
        /// The name of the metric to use for the objective metric.
        /// This member is required.
        public var metricName: Swift.String?
        /// Whether to minimize or maximize the objective metric.
        /// This member is required.
        public var type: SageMakerClientTypes.HyperParameterTuningJobObjectiveType?

        public init(
            metricName: Swift.String? = nil,
            type: SageMakerClientTypes.HyperParameterTuningJobObjectiveType? = nil
        )
        {
            self.metricName = metricName
            self.type = type
        }
    }

}

extension SageMakerClientTypes {
    /// Defines how the algorithm is used for a training job.
    public struct TrainingSpecification {
        /// The additional data source used during the training job.
        public var additionalS3DataSource: SageMakerClientTypes.AdditionalS3DataSource?
        /// A list of MetricDefinition objects, which are used for parsing metrics generated by the algorithm.
        public var metricDefinitions: [SageMakerClientTypes.MetricDefinition]?
        /// A list of the HyperParameterSpecification objects, that define the supported hyperparameters. This is required if the algorithm supports automatic model tuning.>
        public var supportedHyperParameters: [SageMakerClientTypes.HyperParameterSpecification]?
        /// A list of the instance types that this algorithm can use for training.
        /// This member is required.
        public var supportedTrainingInstanceTypes: [SageMakerClientTypes.TrainingInstanceType]?
        /// A list of the metrics that the algorithm emits that can be used as the objective metric in a hyperparameter tuning job.
        public var supportedTuningJobObjectiveMetrics: [SageMakerClientTypes.HyperParameterTuningJobObjective]?
        /// Indicates whether the algorithm supports distributed training. If set to false, buyers can't request more than one instance during training.
        public var supportsDistributedTraining: Swift.Bool?
        /// A list of ChannelSpecification objects, which specify the input sources to be used by the algorithm.
        /// This member is required.
        public var trainingChannels: [SageMakerClientTypes.ChannelSpecification]?
        /// The Amazon ECR registry path of the Docker image that contains the training algorithm.
        /// This member is required.
        public var trainingImage: Swift.String?
        /// An MD5 hash of the training algorithm that identifies the Docker image used for training.
        public var trainingImageDigest: Swift.String?

        public init(
            additionalS3DataSource: SageMakerClientTypes.AdditionalS3DataSource? = nil,
            metricDefinitions: [SageMakerClientTypes.MetricDefinition]? = nil,
            supportedHyperParameters: [SageMakerClientTypes.HyperParameterSpecification]? = nil,
            supportedTrainingInstanceTypes: [SageMakerClientTypes.TrainingInstanceType]? = nil,
            supportedTuningJobObjectiveMetrics: [SageMakerClientTypes.HyperParameterTuningJobObjective]? = nil,
            supportsDistributedTraining: Swift.Bool? = nil,
            trainingChannels: [SageMakerClientTypes.ChannelSpecification]? = nil,
            trainingImage: Swift.String? = nil,
            trainingImageDigest: Swift.String? = nil
        )
        {
            self.additionalS3DataSource = additionalS3DataSource
            self.metricDefinitions = metricDefinitions
            self.supportedHyperParameters = supportedHyperParameters
            self.supportedTrainingInstanceTypes = supportedTrainingInstanceTypes
            self.supportedTuningJobObjectiveMetrics = supportedTuningJobObjectiveMetrics
            self.supportsDistributedTraining = supportsDistributedTraining
            self.trainingChannels = trainingChannels
            self.trainingImage = trainingImage
            self.trainingImageDigest = trainingImageDigest
        }
    }

}

public struct CreateAlgorithmInput {
    /// A description of the algorithm.
    public var algorithmDescription: Swift.String?
    /// The name of the algorithm.
    /// This member is required.
    public var algorithmName: Swift.String?
    /// Whether to certify the algorithm so that it can be listed in Amazon Web Services Marketplace.
    public var certifyForMarketplace: Swift.Bool?
    /// Specifies details about inference jobs that the algorithm runs, including the following:
    ///
    /// * The Amazon ECR paths of containers that contain the inference code and model artifacts.
    ///
    /// * The instance types that the algorithm supports for transform jobs and real-time endpoints used for inference.
    ///
    /// * The input and output content formats that the algorithm supports for inference.
    public var inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?
    /// Specifies details about training jobs run by this algorithm, including the following:
    ///
    /// * The Amazon ECR path of the container and the version digest of the algorithm.
    ///
    /// * The hyperparameters that the algorithm supports.
    ///
    /// * The instance types that the algorithm supports for training.
    ///
    /// * Whether the algorithm supports distributed training.
    ///
    /// * The metrics that the algorithm emits to Amazon CloudWatch.
    ///
    /// * Which metrics that the algorithm emits can be used as the objective metric for hyperparameter tuning jobs.
    ///
    /// * The input channels that the algorithm supports for training data. For example, an algorithm might support train, validation, and test channels.
    /// This member is required.
    public var trainingSpecification: SageMakerClientTypes.TrainingSpecification?
    /// Specifies configurations for one or more training jobs and that SageMaker runs to test the algorithm's training code and, optionally, one or more batch transform jobs that SageMaker runs to test the algorithm's inference code.
    public var validationSpecification: SageMakerClientTypes.AlgorithmValidationSpecification?

    public init(
        algorithmDescription: Swift.String? = nil,
        algorithmName: Swift.String? = nil,
        certifyForMarketplace: Swift.Bool? = nil,
        inferenceSpecification: SageMakerClientTypes.InferenceSpecification? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        trainingSpecification: SageMakerClientTypes.TrainingSpecification? = nil,
        validationSpecification: SageMakerClientTypes.AlgorithmValidationSpecification? = nil
    )
    {
        self.algorithmDescription = algorithmDescription
        self.algorithmName = algorithmName
        self.certifyForMarketplace = certifyForMarketplace
        self.inferenceSpecification = inferenceSpecification
        self.tags = tags
        self.trainingSpecification = trainingSpecification
        self.validationSpecification = validationSpecification
    }
}

public struct CreateAlgorithmOutput {
    /// The Amazon Resource Name (ARN) of the new algorithm.
    /// This member is required.
    public var algorithmArn: Swift.String?

    public init(
        algorithmArn: Swift.String? = nil
    )
    {
        self.algorithmArn = algorithmArn
    }
}

/// Resource being accessed is in use.
public struct ResourceInUse: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceInUse" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct CreateAppInput {
    /// The name of the app.
    /// This member is required.
    public var appName: Swift.String?
    /// The type of app.
    /// This member is required.
    public var appType: SageMakerClientTypes.AppType?
    /// The domain ID.
    /// This member is required.
    public var domainId: Swift.String?
    /// The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance. The value of InstanceType passed as part of the ResourceSpec in the CreateApp call overrides the value passed as part of the ResourceSpec configured for the user profile or the domain. If InstanceType is not specified in any of those three ResourceSpec values for a KernelGateway app, the CreateApp call fails with a request validation error.
    public var resourceSpec: SageMakerClientTypes.ResourceSpec?
    /// The name of the space. If this value is not set, then UserProfileName must be set.
    public var spaceName: Swift.String?
    /// Each tag consists of a key and an optional value. Tag keys must be unique per resource.
    public var tags: [SageMakerClientTypes.Tag]?
    /// The user profile name. If this value is not set, then SpaceName must be set.
    public var userProfileName: Swift.String?

    public init(
        appName: Swift.String? = nil,
        appType: SageMakerClientTypes.AppType? = nil,
        domainId: Swift.String? = nil,
        resourceSpec: SageMakerClientTypes.ResourceSpec? = nil,
        spaceName: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        userProfileName: Swift.String? = nil
    )
    {
        self.appName = appName
        self.appType = appType
        self.domainId = domainId
        self.resourceSpec = resourceSpec
        self.spaceName = spaceName
        self.tags = tags
        self.userProfileName = userProfileName
    }
}

public struct CreateAppOutput {
    /// The Amazon Resource Name (ARN) of the app.
    public var appArn: Swift.String?

    public init(
        appArn: Swift.String? = nil
    )
    {
        self.appArn = appArn
    }
}

public struct CreateAppImageConfigInput {
    /// The name of the AppImageConfig. Must be unique to your account.
    /// This member is required.
    public var appImageConfigName: Swift.String?
    /// The CodeEditorAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in Code Editor.
    public var codeEditorAppImageConfig: SageMakerClientTypes.CodeEditorAppImageConfig?
    /// The JupyterLabAppImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel is shown to users before the image starts. After the image runs, all kernels are visible in JupyterLab.
    public var jupyterLabAppImageConfig: SageMakerClientTypes.JupyterLabAppImageConfig?
    /// The KernelGatewayImageConfig. You can only specify one image kernel in the AppImageConfig API. This kernel will be shown to users before the image starts. Once the image runs, all kernels are visible in JupyterLab.
    public var kernelGatewayImageConfig: SageMakerClientTypes.KernelGatewayImageConfig?
    /// A list of tags to apply to the AppImageConfig.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        appImageConfigName: Swift.String? = nil,
        codeEditorAppImageConfig: SageMakerClientTypes.CodeEditorAppImageConfig? = nil,
        jupyterLabAppImageConfig: SageMakerClientTypes.JupyterLabAppImageConfig? = nil,
        kernelGatewayImageConfig: SageMakerClientTypes.KernelGatewayImageConfig? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.appImageConfigName = appImageConfigName
        self.codeEditorAppImageConfig = codeEditorAppImageConfig
        self.jupyterLabAppImageConfig = jupyterLabAppImageConfig
        self.kernelGatewayImageConfig = kernelGatewayImageConfig
        self.tags = tags
    }
}

public struct CreateAppImageConfigOutput {
    /// The ARN of the AppImageConfig.
    public var appImageConfigArn: Swift.String?

    public init(
        appImageConfigArn: Swift.String? = nil
    )
    {
        self.appImageConfigArn = appImageConfigArn
    }
}

public struct CreateArtifactInput {
    /// The name of the artifact. Must be unique to your account in an Amazon Web Services Region.
    public var artifactName: Swift.String?
    /// The artifact type.
    /// This member is required.
    public var artifactType: Swift.String?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// A list of properties to add to the artifact.
    public var properties: [Swift.String: Swift.String]?
    /// The ID, ID type, and URI of the source.
    /// This member is required.
    public var source: SageMakerClientTypes.ArtifactSource?
    /// A list of tags to apply to the artifact.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        artifactName: Swift.String? = nil,
        artifactType: Swift.String? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        properties: [Swift.String: Swift.String]? = nil,
        source: SageMakerClientTypes.ArtifactSource? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.artifactName = artifactName
        self.artifactType = artifactType
        self.metadataProperties = metadataProperties
        self.properties = properties
        self.source = source
        self.tags = tags
    }
}

public struct CreateArtifactOutput {
    /// The Amazon Resource Name (ARN) of the artifact.
    public var artifactArn: Swift.String?

    public init(
        artifactArn: Swift.String? = nil
    )
    {
        self.artifactArn = artifactArn
    }
}

extension SageMakerClientTypes {
    /// Specifies how to generate the endpoint name for an automatic one-click Autopilot model deployment.
    public struct ModelDeployConfig {
        /// Set to True to automatically generate an endpoint name for a one-click Autopilot model deployment; set to False otherwise. The default value is False. If you set AutoGenerateEndpointName to True, do not specify the EndpointName; otherwise a 400 error is thrown.
        public var autoGenerateEndpointName: Swift.Bool?
        /// Specifies the endpoint name to use for a one-click Autopilot model deployment if the endpoint name is not generated automatically. Specify the EndpointName if and only if you set AutoGenerateEndpointName to False; otherwise a 400 error is thrown.
        public var endpointName: Swift.String?

        public init(
            autoGenerateEndpointName: Swift.Bool? = nil,
            endpointName: Swift.String? = nil
        )
        {
            self.autoGenerateEndpointName = autoGenerateEndpointName
            self.endpointName = endpointName
        }
    }

}

public struct CreateAutoMLJobInput {
    /// A collection of settings used to configure an AutoML job.
    public var autoMLJobConfig: SageMakerClientTypes.AutoMLJobConfig?
    /// Identifies an Autopilot job. The name must be unique to your account and is case insensitive.
    /// This member is required.
    public var autoMLJobName: Swift.String?
    /// Specifies a metric to minimize or maximize as the objective of a job. If not specified, the default objective metric depends on the problem type. See [AutoMLJobObjective](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLJobObjective.html) for the default values.
    public var autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective?
    /// Generates possible candidates without training the models. A candidate is a combination of data preprocessors, algorithms, and algorithm parameter settings.
    public var generateCandidateDefinitionsOnly: Swift.Bool?
    /// An array of channel objects that describes the input data and its location. Each channel is a named input source. Similar to InputDataConfig supported by [HyperParameterTrainingJobDefinition](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html). Format(s) supported: CSV, Parquet. A minimum of 500 rows is required for the training dataset. There is not a minimum number of rows required for the validation dataset.
    /// This member is required.
    public var inputDataConfig: [SageMakerClientTypes.AutoMLChannel]?
    /// Specifies how to generate the endpoint name for an automatic one-click Autopilot model deployment.
    public var modelDeployConfig: SageMakerClientTypes.ModelDeployConfig?
    /// Provides information about encryption and the Amazon S3 output path needed to store artifacts from an AutoML job. Format(s) supported: CSV.
    /// This member is required.
    public var outputDataConfig: SageMakerClientTypes.AutoMLOutputDataConfig?
    /// Defines the type of supervised learning problem available for the candidates. For more information, see [ SageMaker Autopilot problem types](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-datasets-problem-types.html#autopilot-problem-types).
    public var problemType: SageMakerClientTypes.ProblemType?
    /// The ARN of the role that is used to access the data.
    /// This member is required.
    public var roleArn: Swift.String?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web ServicesResources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html). Tag keys must be unique per resource.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        autoMLJobConfig: SageMakerClientTypes.AutoMLJobConfig? = nil,
        autoMLJobName: Swift.String? = nil,
        autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective? = nil,
        generateCandidateDefinitionsOnly: Swift.Bool? = nil,
        inputDataConfig: [SageMakerClientTypes.AutoMLChannel]? = nil,
        modelDeployConfig: SageMakerClientTypes.ModelDeployConfig? = nil,
        outputDataConfig: SageMakerClientTypes.AutoMLOutputDataConfig? = nil,
        problemType: SageMakerClientTypes.ProblemType? = nil,
        roleArn: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.autoMLJobConfig = autoMLJobConfig
        self.autoMLJobName = autoMLJobName
        self.autoMLJobObjective = autoMLJobObjective
        self.generateCandidateDefinitionsOnly = generateCandidateDefinitionsOnly
        self.inputDataConfig = inputDataConfig
        self.modelDeployConfig = modelDeployConfig
        self.outputDataConfig = outputDataConfig
        self.problemType = problemType
        self.roleArn = roleArn
        self.tags = tags
    }
}

public struct CreateAutoMLJobOutput {
    /// The unique ARN assigned to the AutoML job when it is created.
    /// This member is required.
    public var autoMLJobArn: Swift.String?

    public init(
        autoMLJobArn: Swift.String? = nil
    )
    {
        self.autoMLJobArn = autoMLJobArn
    }
}

public struct CreateAutoMLJobV2Input {
    /// Specifies the compute configuration for the AutoML job V2.
    public var autoMLComputeConfig: SageMakerClientTypes.AutoMLComputeConfig?
    /// An array of channel objects describing the input data and their location. Each channel is a named input source. Similar to the [InputDataConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateAutoMLJob.html#sagemaker-CreateAutoMLJob-request-InputDataConfig) attribute in the CreateAutoMLJob input parameters. The supported formats depend on the problem type:
    ///
    /// * For tabular problem types: S3Prefix, ManifestFile.
    ///
    /// * For image classification: S3Prefix, ManifestFile, AugmentedManifestFile.
    ///
    /// * For text classification: S3Prefix.
    ///
    /// * For time-series forecasting: S3Prefix.
    ///
    /// * For text generation (LLMs fine-tuning): S3Prefix.
    /// This member is required.
    public var autoMLJobInputDataConfig: [SageMakerClientTypes.AutoMLJobChannel]?
    /// Identifies an Autopilot job. The name must be unique to your account and is case insensitive.
    /// This member is required.
    public var autoMLJobName: Swift.String?
    /// Specifies a metric to minimize or maximize as the objective of a job. If not specified, the default objective metric depends on the problem type. For the list of default values per problem type, see [AutoMLJobObjective](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_AutoMLJobObjective.html).
    ///
    /// * For tabular problem types: You must either provide both the AutoMLJobObjective and indicate the type of supervised learning problem in AutoMLProblemTypeConfig (TabularJobConfig.ProblemType), or none at all.
    ///
    /// * For text generation problem types (LLMs fine-tuning): Fine-tuning language models in Autopilot does not require setting the AutoMLJobObjective field. Autopilot fine-tunes LLMs without requiring multiple candidates to be trained and evaluated. Instead, using your dataset, Autopilot directly fine-tunes your target model to enhance a default objective metric, the cross-entropy loss. After fine-tuning a language model, you can evaluate the quality of its generated text using different metrics. For a list of the available metrics, see [Metrics for fine-tuning LLMs in Autopilot](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-llms-finetuning-metrics.html).
    public var autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective?
    /// Defines the configuration settings of one of the supported problem types.
    /// This member is required.
    public var autoMLProblemTypeConfig: SageMakerClientTypes.AutoMLProblemTypeConfig?
    /// This structure specifies how to split the data into train and validation datasets. The validation and training datasets must contain the same headers. For jobs created by calling CreateAutoMLJob, the validation dataset must be less than 2 GB in size. This attribute must not be set for the time-series forecasting problem type, as Autopilot automatically splits the input dataset into training and validation sets.
    public var dataSplitConfig: SageMakerClientTypes.AutoMLDataSplitConfig?
    /// Specifies how to generate the endpoint name for an automatic one-click Autopilot model deployment.
    public var modelDeployConfig: SageMakerClientTypes.ModelDeployConfig?
    /// Provides information about encryption and the Amazon S3 output path needed to store artifacts from an AutoML job.
    /// This member is required.
    public var outputDataConfig: SageMakerClientTypes.AutoMLOutputDataConfig?
    /// The ARN of the role that is used to access the data.
    /// This member is required.
    public var roleArn: Swift.String?
    /// The security configuration for traffic encryption or Amazon VPC settings.
    public var securityConfig: SageMakerClientTypes.AutoMLSecurityConfig?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, such as by purpose, owner, or environment. For more information, see [Tagging Amazon Web ServicesResources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html). Tag keys must be unique per resource.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        autoMLComputeConfig: SageMakerClientTypes.AutoMLComputeConfig? = nil,
        autoMLJobInputDataConfig: [SageMakerClientTypes.AutoMLJobChannel]? = nil,
        autoMLJobName: Swift.String? = nil,
        autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective? = nil,
        autoMLProblemTypeConfig: SageMakerClientTypes.AutoMLProblemTypeConfig? = nil,
        dataSplitConfig: SageMakerClientTypes.AutoMLDataSplitConfig? = nil,
        modelDeployConfig: SageMakerClientTypes.ModelDeployConfig? = nil,
        outputDataConfig: SageMakerClientTypes.AutoMLOutputDataConfig? = nil,
        roleArn: Swift.String? = nil,
        securityConfig: SageMakerClientTypes.AutoMLSecurityConfig? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.autoMLComputeConfig = autoMLComputeConfig
        self.autoMLJobInputDataConfig = autoMLJobInputDataConfig
        self.autoMLJobName = autoMLJobName
        self.autoMLJobObjective = autoMLJobObjective
        self.autoMLProblemTypeConfig = autoMLProblemTypeConfig
        self.dataSplitConfig = dataSplitConfig
        self.modelDeployConfig = modelDeployConfig
        self.outputDataConfig = outputDataConfig
        self.roleArn = roleArn
        self.securityConfig = securityConfig
        self.tags = tags
    }
}

public struct CreateAutoMLJobV2Output {
    /// The unique ARN assigned to the AutoMLJob when it is created.
    /// This member is required.
    public var autoMLJobArn: Swift.String?

    public init(
        autoMLJobArn: Swift.String? = nil
    )
    {
        self.autoMLJobArn = autoMLJobArn
    }
}

public struct CreateClusterInput {
    /// The name for the new SageMaker HyperPod cluster.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The instance groups to be created in the SageMaker HyperPod cluster.
    /// This member is required.
    public var instanceGroups: [SageMakerClientTypes.ClusterInstanceGroupSpecification]?
    /// The node recovery mode for the SageMaker HyperPod cluster. When set to Automatic, SageMaker HyperPod will automatically reboot or replace faulty nodes when issues are detected. When set to None, cluster administrators will need to manually manage any faulty cluster instances.
    public var nodeRecovery: SageMakerClientTypes.ClusterNodeRecovery?
    /// The type of orchestrator to use for the SageMaker HyperPod cluster. Currently, the only supported value is "eks", which is to use an Amazon Elastic Kubernetes Service (EKS) cluster as the orchestrator.
    public var orchestrator: SageMakerClientTypes.ClusterOrchestrator?
    /// Custom tags for managing the SageMaker HyperPod cluster as an Amazon Web Services resource. You can add tags to your cluster in the same way you add them in other Amazon Web Services services that support tagging. To learn more about tagging Amazon Web Services resources in general, see [Tagging Amazon Web Services Resources User Guide](https://docs.aws.amazon.com/tag-editor/latest/userguide/tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?
    /// Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to. You can control access to and from your resources by configuring a VPC. For more information, see [Give SageMaker Access to Resources in your Amazon VPC](https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html).
    public var vpcConfig: SageMakerClientTypes.VpcConfig?

    public init(
        clusterName: Swift.String? = nil,
        instanceGroups: [SageMakerClientTypes.ClusterInstanceGroupSpecification]? = nil,
        nodeRecovery: SageMakerClientTypes.ClusterNodeRecovery? = nil,
        orchestrator: SageMakerClientTypes.ClusterOrchestrator? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        vpcConfig: SageMakerClientTypes.VpcConfig? = nil
    )
    {
        self.clusterName = clusterName
        self.instanceGroups = instanceGroups
        self.nodeRecovery = nodeRecovery
        self.orchestrator = orchestrator
        self.tags = tags
        self.vpcConfig = vpcConfig
    }
}

public struct CreateClusterOutput {
    /// The Amazon Resource Name (ARN) of the cluster.
    /// This member is required.
    public var clusterArn: Swift.String?

    public init(
        clusterArn: Swift.String? = nil
    )
    {
        self.clusterArn = clusterArn
    }
}

public struct CreateCodeRepositoryInput {
    /// The name of the Git repository. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).
    /// This member is required.
    public var codeRepositoryName: Swift.String?
    /// Specifies details about the repository, including the URL where the repository is located, the default branch, and credentials to use to access the repository.
    /// This member is required.
    public var gitConfig: SageMakerClientTypes.GitConfig?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        codeRepositoryName: Swift.String? = nil,
        gitConfig: SageMakerClientTypes.GitConfig? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.codeRepositoryName = codeRepositoryName
        self.gitConfig = gitConfig
        self.tags = tags
    }
}

public struct CreateCodeRepositoryOutput {
    /// The Amazon Resource Name (ARN) of the new repository.
    /// This member is required.
    public var codeRepositoryArn: Swift.String?

    public init(
        codeRepositoryArn: Swift.String? = nil
    )
    {
        self.codeRepositoryArn = codeRepositoryArn
    }
}

extension SageMakerClientTypes {

    public enum Framework: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case darknet
        case keras
        case mxnet
        case onnx
        case pytorch
        case sklearn
        case tensorflow
        case tflite
        case xgboost
        case sdkUnknown(Swift.String)

        public static var allCases: [Framework] {
            return [
                .darknet,
                .keras,
                .mxnet,
                .onnx,
                .pytorch,
                .sklearn,
                .tensorflow,
                .tflite,
                .xgboost
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .darknet: return "DARKNET"
            case .keras: return "KERAS"
            case .mxnet: return "MXNET"
            case .onnx: return "ONNX"
            case .pytorch: return "PYTORCH"
            case .sklearn: return "SKLEARN"
            case .tensorflow: return "TENSORFLOW"
            case .tflite: return "TFLITE"
            case .xgboost: return "XGBOOST"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Contains information about the location of input model artifacts, the name and shape of the expected data inputs, and the framework in which the model was trained.
    public struct InputConfig {
        /// Specifies the name and shape of the expected data inputs for your trained model with a JSON dictionary form. The data inputs are Framework specific.
        ///
        /// * TensorFlow: You must specify the name and shape (NHWC format) of the expected data inputs using a dictionary format for your trained model. The dictionary formats required for the console and CLI are different.
        ///
        /// * Examples for one input:
        ///
        /// * If using the console, {"input":[1,1024,1024,3]}
        ///
        /// * If using the CLI, {\"input\":[1,1024,1024,3]}
        ///
        ///
        ///
        ///
        /// * Examples for two inputs:
        ///
        /// * If using the console, {"data1": [1,28,28,1], "data2":[1,28,28,1]}
        ///
        /// * If using the CLI, {\"data1\": [1,28,28,1], \"data2\":[1,28,28,1]}
        ///
        ///
        ///
        ///
        ///
        ///
        ///
        /// * KERAS: You must specify the name and shape (NCHW format) of expected data inputs using a dictionary format for your trained model. Note that while Keras model artifacts should be uploaded in NHWC (channel-last) format, DataInputConfig should be specified in NCHW (channel-first) format. The dictionary formats required for the console and CLI are different.
        ///
        /// * Examples for one input:
        ///
        /// * If using the console, {"input_1":[1,3,224,224]}
        ///
        /// * If using the CLI, {\"input_1\":[1,3,224,224]}
        ///
        ///
        ///
        ///
        /// * Examples for two inputs:
        ///
        /// * If using the console, {"input_1": [1,3,224,224], "input_2":[1,3,224,224]}
        ///
        /// * If using the CLI, {\"input_1\": [1,3,224,224], \"input_2\":[1,3,224,224]}
        ///
        ///
        ///
        ///
        ///
        ///
        ///
        /// * MXNET/ONNX/DARKNET: You must specify the name and shape (NCHW format) of the expected data inputs in order using a dictionary format for your trained model. The dictionary formats required for the console and CLI are different.
        ///
        /// * Examples for one input:
        ///
        /// * If using the console, {"data":[1,3,1024,1024]}
        ///
        /// * If using the CLI, {\"data\":[1,3,1024,1024]}
        ///
        ///
        ///
        ///
        /// * Examples for two inputs:
        ///
        /// * If using the console, {"var1": [1,1,28,28], "var2":[1,1,28,28]}
        ///
        /// * If using the CLI, {\"var1\": [1,1,28,28], \"var2\":[1,1,28,28]}
        ///
        ///
        ///
        ///
        ///
        ///
        ///
        /// * PyTorch: You can either specify the name and shape (NCHW format) of expected data inputs in order using a dictionary format for your trained model or you can specify the shape only using a list format. The dictionary formats required for the console and CLI are different. The list formats for the console and CLI are the same.
        ///
        /// * Examples for one input in dictionary format:
        ///
        /// * If using the console, {"input0":[1,3,224,224]}
        ///
        /// * If using the CLI, {\"input0\":[1,3,224,224]}
        ///
        ///
        ///
        ///
        /// * Example for one input in list format: [[1,3,224,224]]
        ///
        /// * Examples for two inputs in dictionary format:
        ///
        /// * If using the console, {"input0":[1,3,224,224], "input1":[1,3,224,224]}
        ///
        /// * If using the CLI, {\"input0\":[1,3,224,224], \"input1\":[1,3,224,224]}
        ///
        ///
        ///
        ///
        /// * Example for two inputs in list format: [[1,3,224,224], [1,3,224,224]]
        ///
        ///
        ///
        ///
        /// * XGBOOST: input data name and shape are not needed.
        ///
        ///
        /// DataInputConfig supports the following parameters for CoreMLTargetDevice (ML Model format):
        ///
        /// * shape: Input shape, for example {"input_1": {"shape": [1,224,224,3]}}. In addition to static input shapes, CoreML converter supports Flexible input shapes:
        ///
        /// * Range Dimension. You can use the Range Dimension feature if you know the input shape will be within some specific interval in that dimension, for example: {"input_1": {"shape": ["1..10", 224, 224, 3]}}
        ///
        /// * Enumerated shapes. Sometimes, the models are trained to work only on a select set of inputs. You can enumerate all supported input shapes, for example: {"input_1": {"shape": [[1, 224, 224, 3], [1, 160, 160, 3]]}}
        ///
        ///
        ///
        ///
        /// * default_shape: Default input shape. You can set a default shape during conversion for both Range Dimension and Enumerated Shapes. For example {"input_1": {"shape": ["1..10", 224, 224, 3], "default_shape": [1, 224, 224, 3]}}
        ///
        /// * type: Input type. Allowed values: Image and Tensor. By default, the converter generates an ML Model with inputs of type Tensor (MultiArray). User can set input type to be Image. Image input type requires additional input parameters such as bias and scale.
        ///
        /// * bias: If the input type is an Image, you need to provide the bias vector.
        ///
        /// * scale: If the input type is an Image, you need to provide a scale factor.
        ///
        ///
        /// CoreML ClassifierConfig parameters can be specified using [OutputConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html)CompilerOptions. CoreML converter supports Tensorflow and PyTorch models. CoreML conversion examples:
        ///
        /// * Tensor type input:
        ///
        /// * "DataInputConfig": {"input_1": {"shape": [[1,224,224,3], [1,160,160,3]], "default_shape": [1,224,224,3]}}
        ///
        ///
        ///
        ///
        /// * Tensor type input without input name (PyTorch):
        ///
        /// * "DataInputConfig": [{"shape": [[1,3,224,224], [1,3,160,160]], "default_shape": [1,3,224,224]}]
        ///
        ///
        ///
        ///
        /// * Image type input:
        ///
        /// * "DataInputConfig": {"input_1": {"shape": [[1,224,224,3], [1,160,160,3]], "default_shape": [1,224,224,3], "type": "Image", "bias": [-1,-1,-1], "scale": 0.007843137255}}
        ///
        /// * "CompilerOptions": {"class_labels": "imagenet_labels_1000.txt"}
        ///
        ///
        ///
        ///
        /// * Image type input without input name (PyTorch):
        ///
        /// * "DataInputConfig": [{"shape": [[1,3,224,224], [1,3,160,160]], "default_shape": [1,3,224,224], "type": "Image", "bias": [-1,-1,-1], "scale": 0.007843137255}]
        ///
        /// * "CompilerOptions": {"class_labels": "imagenet_labels_1000.txt"}
        ///
        ///
        ///
        ///
        ///
        /// Depending on the model format, DataInputConfig requires the following parameters for ml_eia2[OutputConfig:TargetDevice](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker-Type-OutputConfig-TargetDevice).
        ///
        /// * For TensorFlow models saved in the SavedModel format, specify the input names from signature_def_key and the input model shapes for DataInputConfig. Specify the signature_def_key in [OutputConfig:CompilerOptions](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker-Type-OutputConfig-CompilerOptions) if the model does not use TensorFlow's default signature def key. For example:
        ///
        /// * "DataInputConfig": {"inputs": [1, 224, 224, 3]}
        ///
        /// * "CompilerOptions": {"signature_def_key": "serving_custom"}
        ///
        ///
        ///
        ///
        /// * For TensorFlow models saved as a frozen graph, specify the input tensor names and shapes in DataInputConfig and the output tensor names for output_names in [OutputConfig:CompilerOptions](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html#sagemaker-Type-OutputConfig-CompilerOptions). For example:
        ///
        /// * "DataInputConfig": {"input_tensor:0": [1, 224, 224, 3]}
        ///
        /// * "CompilerOptions": {"output_names": ["output_tensor:0"]}
        public var dataInputConfig: Swift.String?
        /// Identifies the framework in which the model was trained. For example: TENSORFLOW.
        /// This member is required.
        public var framework: SageMakerClientTypes.Framework?
        /// Specifies the framework version to use. This API field is only supported for the MXNet, PyTorch, TensorFlow and TensorFlow Lite frameworks. For information about framework versions supported for cloud targets and edge devices, see [Cloud Supported Instance Types and Frameworks](https://docs.aws.amazon.com/sagemaker/latest/dg/neo-supported-cloud.html) and [Edge Supported Frameworks](https://docs.aws.amazon.com/sagemaker/latest/dg/neo-supported-devices-edge-frameworks.html).
        public var frameworkVersion: Swift.String?
        /// The S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            dataInputConfig: Swift.String? = nil,
            framework: SageMakerClientTypes.Framework? = nil,
            frameworkVersion: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.dataInputConfig = dataInputConfig
            self.framework = framework
            self.frameworkVersion = frameworkVersion
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    /// Contains information about a target platform that you want your model to run on, such as OS, architecture, and accelerators. It is an alternative of TargetDevice.
    public struct TargetPlatform {
        /// Specifies a target platform accelerator (optional).
        ///
        /// * NVIDIA: Nvidia graphics processing unit. It also requires gpu-code, trt-ver, cuda-ver compiler options
        ///
        /// * MALI: ARM Mali graphics processor
        ///
        /// * INTEL_GRAPHICS: Integrated Intel graphics
        public var accelerator: SageMakerClientTypes.TargetPlatformAccelerator?
        /// Specifies a target platform architecture.
        ///
        /// * X86_64: 64-bit version of the x86 instruction set.
        ///
        /// * X86: 32-bit version of the x86 instruction set.
        ///
        /// * ARM64: ARMv8 64-bit CPU.
        ///
        /// * ARM_EABIHF: ARMv7 32-bit, Hard Float.
        ///
        /// * ARM_EABI: ARMv7 32-bit, Soft Float. Used by Android 32-bit ARM platform.
        /// This member is required.
        public var arch: SageMakerClientTypes.TargetPlatformArch?
        /// Specifies a target platform OS.
        ///
        /// * LINUX: Linux-based operating systems.
        ///
        /// * ANDROID: Android operating systems. Android API level can be specified using the ANDROID_PLATFORM compiler option. For example, "CompilerOptions": {'ANDROID_PLATFORM': 28}
        /// This member is required.
        public var os: SageMakerClientTypes.TargetPlatformOs?

        public init(
            accelerator: SageMakerClientTypes.TargetPlatformAccelerator? = nil,
            arch: SageMakerClientTypes.TargetPlatformArch? = nil,
            os: SageMakerClientTypes.TargetPlatformOs? = nil
        )
        {
            self.accelerator = accelerator
            self.arch = arch
            self.os = os
        }
    }

}

extension SageMakerClientTypes {
    /// Contains information about the output location for the compiled model and the target device that the model runs on. TargetDevice and TargetPlatform are mutually exclusive, so you need to choose one between the two to specify your target device or platform. If you cannot find your device you want to use from the TargetDevice list, use TargetPlatform to describe the platform of your edge device and CompilerOptions if there are specific settings that are required or recommended to use for particular TargetPlatform.
    public struct OutputConfig {
        /// Specifies additional parameters for compiler options in JSON format. The compiler options are TargetPlatform specific. It is required for NVIDIA accelerators and highly recommended for CPU compilations. For any other cases, it is optional to specify CompilerOptions.
        ///
        /// * DTYPE: Specifies the data type for the input. When compiling for ml_* (except for ml_inf) instances using PyTorch framework, provide the data type (dtype) of the model's input. "float32" is used if "DTYPE" is not specified. Options for data type are:
        ///
        /// * float32: Use either "float" or "float32".
        ///
        /// * int64: Use either "int64" or "long".
        ///
        ///
        /// For example, {"dtype" : "float32"}.
        ///
        /// * CPU: Compilation for CPU supports the following compiler options.
        ///
        /// * mcpu: CPU micro-architecture. For example, {'mcpu': 'skylake-avx512'}
        ///
        /// * mattr: CPU flags. For example, {'mattr': ['+neon', '+vfpv4']}
        ///
        ///
        ///
        ///
        /// * ARM: Details of ARM CPU compilations.
        ///
        /// * NEON: NEON is an implementation of the Advanced SIMD extension used in ARMv7 processors. For example, add {'mattr': ['+neon']} to the compiler options if compiling for ARM 32-bit platform with the NEON support.
        ///
        ///
        ///
        ///
        /// * NVIDIA: Compilation for NVIDIA GPU supports the following compiler options.
        ///
        /// * gpu_code: Specifies the targeted architecture.
        ///
        /// * trt-ver: Specifies the TensorRT versions in x.y.z. format.
        ///
        /// * cuda-ver: Specifies the CUDA version in x.y format.
        ///
        ///
        /// For example, {'gpu-code': 'sm_72', 'trt-ver': '6.0.1', 'cuda-ver': '10.1'}
        ///
        /// * ANDROID: Compilation for the Android OS supports the following compiler options:
        ///
        /// * ANDROID_PLATFORM: Specifies the Android API levels. Available levels range from 21 to 29. For example, {'ANDROID_PLATFORM': 28}.
        ///
        /// * mattr: Add {'mattr': ['+neon']} to compiler options if compiling for ARM 32-bit platform with NEON support.
        ///
        ///
        ///
        ///
        /// * INFERENTIA: Compilation for target ml_inf1 uses compiler options passed in as a JSON string. For example, "CompilerOptions": "\"--verbose 1 --num-neuroncores 2 -O2\"". For information about supported compiler options, see [ Neuron Compiler CLI Reference Guide](https://awsdocs-neuron.readthedocs-hosted.com/en/latest/compiler/neuronx-cc/api-reference-guide/neuron-compiler-cli-reference-guide.html).
        ///
        /// * CoreML: Compilation for the CoreML [OutputConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OutputConfig.html)TargetDevice supports the following compiler options:
        ///
        /// * class_labels: Specifies the classification labels file name inside input tar.gz file. For example, {"class_labels": "imagenet_labels_1000.txt"}. Labels inside the txt file should be separated by newlines.
        ///
        ///
        ///
        ///
        /// * EIA: Compilation for the Elastic Inference Accelerator supports the following compiler options:
        ///
        /// * precision_mode: Specifies the precision of compiled artifacts. Supported values are "FP16" and "FP32". Default is "FP32".
        ///
        /// * signature_def_key: Specifies the signature to use for models in SavedModel format. Defaults is TensorFlow's default signature def key.
        ///
        /// * output_names: Specifies a list of output tensor names for models in FrozenGraph format. Set at most one API field, either: signature_def_key or output_names.
        ///
        ///
        /// For example: {"precision_mode": "FP32", "output_names": ["output:0"]}
        public var compilerOptions: Swift.String?
        /// The Amazon Web Services Key Management Service key (Amazon Web Services KMS) that Amazon SageMaker uses to encrypt your output models with Amazon S3 server-side encryption after compilation job. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account. For more information, see [KMS-Managed Encryption Keys](https://docs.aws.amazon.com/AmazonS3/latest/userguide/UsingKMSEncryption.html) in the Amazon Simple Storage Service Developer Guide. The KmsKeyId can be any of the following formats:
        ///
        /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Key ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Alias name: alias/ExampleAlias
        ///
        /// * Alias name ARN: arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias
        public var kmsKeyId: Swift.String?
        /// Identifies the S3 bucket where you want Amazon SageMaker to store the model artifacts. For example, s3://bucket-name/key-name-prefix.
        /// This member is required.
        public var s3OutputLocation: Swift.String?
        /// Identifies the target device or the machine learning instance that you want to run your model on after the compilation has completed. Alternatively, you can specify OS, architecture, and accelerator using [TargetPlatform](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TargetPlatform.html) fields. It can be used instead of TargetPlatform. Currently ml_trn1 is available only in US East (N. Virginia) Region, and ml_inf2 is available only in US East (Ohio) Region.
        public var targetDevice: SageMakerClientTypes.TargetDevice?
        /// Contains information about a target platform that you want your model to run on, such as OS, architecture, and accelerators. It is an alternative of TargetDevice. The following examples show how to configure the TargetPlatform and CompilerOptions JSON strings for popular target platforms:
        ///
        /// * Raspberry Pi 3 Model B+ "TargetPlatform": {"Os": "LINUX", "Arch": "ARM_EABIHF"}, "CompilerOptions": {'mattr': ['+neon']}
        ///
        /// * Jetson TX2 "TargetPlatform": {"Os": "LINUX", "Arch": "ARM64", "Accelerator": "NVIDIA"}, "CompilerOptions": {'gpu-code': 'sm_62', 'trt-ver': '6.0.1', 'cuda-ver': '10.0'}
        ///
        /// * EC2 m5.2xlarge instance OS "TargetPlatform": {"Os": "LINUX", "Arch": "X86_64", "Accelerator": "NVIDIA"}, "CompilerOptions": {'mcpu': 'skylake-avx512'}
        ///
        /// * RK3399 "TargetPlatform": {"Os": "LINUX", "Arch": "ARM64", "Accelerator": "MALI"}
        ///
        /// * ARMv7 phone (CPU) "TargetPlatform": {"Os": "ANDROID", "Arch": "ARM_EABI"}, "CompilerOptions": {'ANDROID_PLATFORM': 25, 'mattr': ['+neon']}
        ///
        /// * ARMv8 phone (CPU) "TargetPlatform": {"Os": "ANDROID", "Arch": "ARM64"}, "CompilerOptions": {'ANDROID_PLATFORM': 29}
        public var targetPlatform: SageMakerClientTypes.TargetPlatform?

        public init(
            compilerOptions: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            s3OutputLocation: Swift.String? = nil,
            targetDevice: SageMakerClientTypes.TargetDevice? = nil,
            targetPlatform: SageMakerClientTypes.TargetPlatform? = nil
        )
        {
            self.compilerOptions = compilerOptions
            self.kmsKeyId = kmsKeyId
            self.s3OutputLocation = s3OutputLocation
            self.targetDevice = targetDevice
            self.targetPlatform = targetPlatform
        }
    }

}

extension SageMakerClientTypes {
    /// The [VpcConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html) configuration object that specifies the VPC that you want the compilation jobs to connect to. For more information on controlling access to your Amazon S3 buckets used for compilation job, see [Give Amazon SageMaker Compilation Jobs Access to Resources in Your Amazon VPC](https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html).
    public struct NeoVpcConfig {
        /// The VPC security group IDs. IDs have the form of sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        /// This member is required.
        public var securityGroupIds: [Swift.String]?
        /// The ID of the subnets in the VPC that you want to connect the compilation job to for accessing the model in Amazon S3.
        /// This member is required.
        public var subnets: [Swift.String]?

        public init(
            securityGroupIds: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
        }
    }

}

public struct CreateCompilationJobInput {
    /// A name for the model compilation job. The name must be unique within the Amazon Web Services Region and within your Amazon Web Services account.
    /// This member is required.
    public var compilationJobName: Swift.String?
    /// Provides information about the location of input model artifacts, the name and shape of the expected data inputs, and the framework in which the model was trained.
    public var inputConfig: SageMakerClientTypes.InputConfig?
    /// The Amazon Resource Name (ARN) of a versioned model package. Provide either a ModelPackageVersionArn or an InputConfig object in the request syntax. The presence of both objects in the CreateCompilationJob request will return an exception.
    public var modelPackageVersionArn: Swift.String?
    /// Provides information about the output location for the compiled model and the target device the model runs on.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.OutputConfig?
    /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf. During model compilation, Amazon SageMaker needs your permission to:
    ///
    /// * Read input data from an S3 bucket
    ///
    /// * Write model artifacts to an S3 bucket
    ///
    /// * Write logs to Amazon CloudWatch Logs
    ///
    /// * Publish metrics to Amazon CloudWatch
    ///
    ///
    /// You grant permissions for all of these tasks to an IAM role. To pass this role to Amazon SageMaker, the caller of this API must have the iam:PassRole permission. For more information, see [Amazon SageMaker Roles.](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html)
    /// This member is required.
    public var roleArn: Swift.String?
    /// Specifies a limit to how long a model compilation job can run. When the job reaches the time limit, Amazon SageMaker ends the compilation job. Use this API to cap model training costs.
    /// This member is required.
    public var stoppingCondition: SageMakerClientTypes.StoppingCondition?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?
    /// A [VpcConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html) object that specifies the VPC that you want your compilation job to connect to. Control access to your models by configuring the VPC. For more information, see [Protect Compilation Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html).
    public var vpcConfig: SageMakerClientTypes.NeoVpcConfig?

    public init(
        compilationJobName: Swift.String? = nil,
        inputConfig: SageMakerClientTypes.InputConfig? = nil,
        modelPackageVersionArn: Swift.String? = nil,
        outputConfig: SageMakerClientTypes.OutputConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.StoppingCondition? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        vpcConfig: SageMakerClientTypes.NeoVpcConfig? = nil
    )
    {
        self.compilationJobName = compilationJobName
        self.inputConfig = inputConfig
        self.modelPackageVersionArn = modelPackageVersionArn
        self.outputConfig = outputConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
        self.tags = tags
        self.vpcConfig = vpcConfig
    }
}

public struct CreateCompilationJobOutput {
    /// If the action is successful, the service sends back an HTTP 200 response. Amazon SageMaker returns the following data in JSON format:
    ///
    /// * CompilationJobArn: The Amazon Resource Name (ARN) of the compiled job.
    /// This member is required.
    public var compilationJobArn: Swift.String?

    public init(
        compilationJobArn: Swift.String? = nil
    )
    {
        self.compilationJobArn = compilationJobArn
    }
}

public struct CreateContextInput {
    /// The name of the context. Must be unique to your account in an Amazon Web Services Region.
    /// This member is required.
    public var contextName: Swift.String?
    /// The context type.
    /// This member is required.
    public var contextType: Swift.String?
    /// The description of the context.
    public var description: Swift.String?
    /// A list of properties to add to the context.
    public var properties: [Swift.String: Swift.String]?
    /// The source type, ID, and URI.
    /// This member is required.
    public var source: SageMakerClientTypes.ContextSource?
    /// A list of tags to apply to the context.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        contextName: Swift.String? = nil,
        contextType: Swift.String? = nil,
        description: Swift.String? = nil,
        properties: [Swift.String: Swift.String]? = nil,
        source: SageMakerClientTypes.ContextSource? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.contextName = contextName
        self.contextType = contextType
        self.description = description
        self.properties = properties
        self.source = source
        self.tags = tags
    }
}

public struct CreateContextOutput {
    /// The Amazon Resource Name (ARN) of the context.
    public var contextArn: Swift.String?

    public init(
        contextArn: Swift.String? = nil
    )
    {
        self.contextArn = contextArn
    }
}

extension SageMakerClientTypes {
    /// Information about the container that a data quality monitoring job runs.
    public struct DataQualityAppSpecification {
        /// The arguments to send to the container that the monitoring job runs.
        public var containerArguments: [Swift.String]?
        /// The entrypoint for a container used to run a monitoring job.
        public var containerEntrypoint: [Swift.String]?
        /// Sets the environment variables in the container that the monitoring job runs.
        public var environment: [Swift.String: Swift.String]?
        /// The container image that the data quality monitoring job runs.
        /// This member is required.
        public var imageUri: Swift.String?
        /// An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        public var postAnalyticsProcessorSourceUri: Swift.String?
        /// An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flattened JSON so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers.
        public var recordPreprocessorSourceUri: Swift.String?

        public init(
            containerArguments: [Swift.String]? = nil,
            containerEntrypoint: [Swift.String]? = nil,
            environment: [Swift.String: Swift.String]? = nil,
            imageUri: Swift.String? = nil,
            postAnalyticsProcessorSourceUri: Swift.String? = nil,
            recordPreprocessorSourceUri: Swift.String? = nil
        )
        {
            self.containerArguments = containerArguments
            self.containerEntrypoint = containerEntrypoint
            self.environment = environment
            self.imageUri = imageUri
            self.postAnalyticsProcessorSourceUri = postAnalyticsProcessorSourceUri
            self.recordPreprocessorSourceUri = recordPreprocessorSourceUri
        }
    }

}

extension SageMakerClientTypes {
    /// The constraints resource for a monitoring job.
    public struct MonitoringConstraintsResource {
        /// The Amazon S3 URI for the constraints resource.
        public var s3Uri: Swift.String?

        public init(
            s3Uri: Swift.String? = nil
        )
        {
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    /// The statistics resource for a monitoring job.
    public struct MonitoringStatisticsResource {
        /// The Amazon S3 URI for the statistics resource.
        public var s3Uri: Swift.String?

        public init(
            s3Uri: Swift.String? = nil
        )
        {
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    /// Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically.
    public struct DataQualityBaselineConfig {
        /// The name of the job that performs baselining for the data quality monitoring job.
        public var baseliningJobName: Swift.String?
        /// The constraints resource for a monitoring job.
        public var constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource?
        /// The statistics resource for a monitoring job.
        public var statisticsResource: SageMakerClientTypes.MonitoringStatisticsResource?

        public init(
            baseliningJobName: Swift.String? = nil,
            constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource? = nil,
            statisticsResource: SageMakerClientTypes.MonitoringStatisticsResource? = nil
        )
        {
            self.baseliningJobName = baseliningJobName
            self.constraintsResource = constraintsResource
            self.statisticsResource = statisticsResource
        }
    }

}

extension SageMakerClientTypes {
    /// Input object for the endpoint
    public struct EndpointInput {
        /// If specified, monitoring jobs substract this time from the end time. For information about using offsets for scheduling monitoring jobs, see [Schedule Model Quality Monitoring Jobs](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html).
        public var endTimeOffset: Swift.String?
        /// An endpoint in customer's account which has enabled DataCaptureConfig enabled.
        /// This member is required.
        public var endpointName: Swift.String?
        /// The attributes of the input data to exclude from the analysis.
        public var excludeFeaturesAttribute: Swift.String?
        /// The attributes of the input data that are the input features.
        public var featuresAttribute: Swift.String?
        /// The attribute of the input data that represents the ground truth label.
        public var inferenceAttribute: Swift.String?
        /// Path to the filesystem where the endpoint data is available to the container.
        /// This member is required.
        public var localPath: Swift.String?
        /// In a classification problem, the attribute that represents the class probability.
        public var probabilityAttribute: Swift.String?
        /// The threshold for the class probability to be evaluated as a positive result.
        public var probabilityThresholdAttribute: Swift.Double?
        /// Whether input data distributed in Amazon S3 is fully replicated or sharded by an Amazon S3 key. Defaults to FullyReplicated
        public var s3DataDistributionType: SageMakerClientTypes.ProcessingS3DataDistributionType?
        /// Whether the Pipe or File is used as the input mode for transferring data for the monitoring job. Pipe mode is recommended for large datasets. File mode is useful for small files that fit in memory. Defaults to File.
        public var s3InputMode: SageMakerClientTypes.ProcessingS3InputMode?
        /// If specified, monitoring jobs substract this time from the start time. For information about using offsets for scheduling monitoring jobs, see [Schedule Model Quality Monitoring Jobs](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-model-quality-schedule.html).
        public var startTimeOffset: Swift.String?

        public init(
            endTimeOffset: Swift.String? = nil,
            endpointName: Swift.String? = nil,
            excludeFeaturesAttribute: Swift.String? = nil,
            featuresAttribute: Swift.String? = nil,
            inferenceAttribute: Swift.String? = nil,
            localPath: Swift.String? = nil,
            probabilityAttribute: Swift.String? = nil,
            probabilityThresholdAttribute: Swift.Double? = nil,
            s3DataDistributionType: SageMakerClientTypes.ProcessingS3DataDistributionType? = nil,
            s3InputMode: SageMakerClientTypes.ProcessingS3InputMode? = nil,
            startTimeOffset: Swift.String? = nil
        )
        {
            self.endTimeOffset = endTimeOffset
            self.endpointName = endpointName
            self.excludeFeaturesAttribute = excludeFeaturesAttribute
            self.featuresAttribute = featuresAttribute
            self.inferenceAttribute = inferenceAttribute
            self.localPath = localPath
            self.probabilityAttribute = probabilityAttribute
            self.probabilityThresholdAttribute = probabilityThresholdAttribute
            self.s3DataDistributionType = s3DataDistributionType
            self.s3InputMode = s3InputMode
            self.startTimeOffset = startTimeOffset
        }
    }

}

extension SageMakerClientTypes {
    /// The input for the data quality monitoring job. Currently endpoints are supported for input.
    public struct DataQualityJobInput {
        /// Input object for the batch transform job.
        public var batchTransformInput: SageMakerClientTypes.BatchTransformInput?
        /// Input object for the endpoint
        public var endpointInput: SageMakerClientTypes.EndpointInput?

        public init(
            batchTransformInput: SageMakerClientTypes.BatchTransformInput? = nil,
            endpointInput: SageMakerClientTypes.EndpointInput? = nil
        )
        {
            self.batchTransformInput = batchTransformInput
            self.endpointInput = endpointInput
        }
    }

}

extension SageMakerClientTypes {

    public enum ProcessingS3UploadMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case continuous
        case endOfJob
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessingS3UploadMode] {
            return [
                .continuous,
                .endOfJob
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .continuous: return "Continuous"
            case .endOfJob: return "EndOfJob"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Information about where and how you want to store the results of a monitoring job.
    public struct MonitoringS3Output {
        /// The local path to the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job. LocalPath is an absolute path for the output data.
        /// This member is required.
        public var localPath: Swift.String?
        /// Whether to upload the results of the monitoring job continuously or after the job completes.
        public var s3UploadMode: SageMakerClientTypes.ProcessingS3UploadMode?
        /// A URI that identifies the Amazon S3 storage location where Amazon SageMaker saves the results of a monitoring job.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            localPath: Swift.String? = nil,
            s3UploadMode: SageMakerClientTypes.ProcessingS3UploadMode? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.localPath = localPath
            self.s3UploadMode = s3UploadMode
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    /// The output object for a monitoring job.
    public struct MonitoringOutput {
        /// The Amazon S3 storage location where the results of a monitoring job are saved.
        /// This member is required.
        public var s3Output: SageMakerClientTypes.MonitoringS3Output?

        public init(
            s3Output: SageMakerClientTypes.MonitoringS3Output? = nil
        )
        {
            self.s3Output = s3Output
        }
    }

}

extension SageMakerClientTypes {
    /// The output configuration for monitoring jobs.
    public struct MonitoringOutputConfig {
        /// The Key Management Service (KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.
        public var kmsKeyId: Swift.String?
        /// Monitoring outputs for monitoring jobs. This is where the output of the periodic monitoring jobs is uploaded.
        /// This member is required.
        public var monitoringOutputs: [SageMakerClientTypes.MonitoringOutput]?

        public init(
            kmsKeyId: Swift.String? = nil,
            monitoringOutputs: [SageMakerClientTypes.MonitoringOutput]? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.monitoringOutputs = monitoringOutputs
        }
    }

}

extension SageMakerClientTypes {

    public enum ProcessingInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mlC42xlarge
        case mlC44xlarge
        case mlC48xlarge
        case mlC4Xlarge
        case mlC518xlarge
        case mlC52xlarge
        case mlC54xlarge
        case mlC59xlarge
        case mlC5Xlarge
        case mlG4dn12xlarge
        case mlG4dn16xlarge
        case mlG4dn2xlarge
        case mlG4dn4xlarge
        case mlG4dn8xlarge
        case mlG4dnXlarge
        case mlG512xlarge
        case mlG516xlarge
        case mlG524xlarge
        case mlG52xlarge
        case mlG548xlarge
        case mlG54xlarge
        case mlG58xlarge
        case mlG5Xlarge
        case mlM410xlarge
        case mlM416xlarge
        case mlM42xlarge
        case mlM44xlarge
        case mlM4Xlarge
        case mlM512xlarge
        case mlM524xlarge
        case mlM52xlarge
        case mlM54xlarge
        case mlM5Large
        case mlM5Xlarge
        case mlP216xlarge
        case mlP28xlarge
        case mlP2Xlarge
        case mlP316xlarge
        case mlP32xlarge
        case mlP38xlarge
        case mlR5d12xlarge
        case mlR5d16xlarge
        case mlR5d24xlarge
        case mlR5d2xlarge
        case mlR5d4xlarge
        case mlR5d8xlarge
        case mlR5dLarge
        case mlR5dXlarge
        case mlR512xlarge
        case mlR516xlarge
        case mlR524xlarge
        case mlR52xlarge
        case mlR54xlarge
        case mlR58xlarge
        case mlR5Large
        case mlR5Xlarge
        case mlT32xlarge
        case mlT3Large
        case mlT3Medium
        case mlT3Xlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessingInstanceType] {
            return [
                .mlC42xlarge,
                .mlC44xlarge,
                .mlC48xlarge,
                .mlC4Xlarge,
                .mlC518xlarge,
                .mlC52xlarge,
                .mlC54xlarge,
                .mlC59xlarge,
                .mlC5Xlarge,
                .mlG4dn12xlarge,
                .mlG4dn16xlarge,
                .mlG4dn2xlarge,
                .mlG4dn4xlarge,
                .mlG4dn8xlarge,
                .mlG4dnXlarge,
                .mlG512xlarge,
                .mlG516xlarge,
                .mlG524xlarge,
                .mlG52xlarge,
                .mlG548xlarge,
                .mlG54xlarge,
                .mlG58xlarge,
                .mlG5Xlarge,
                .mlM410xlarge,
                .mlM416xlarge,
                .mlM42xlarge,
                .mlM44xlarge,
                .mlM4Xlarge,
                .mlM512xlarge,
                .mlM524xlarge,
                .mlM52xlarge,
                .mlM54xlarge,
                .mlM5Large,
                .mlM5Xlarge,
                .mlP216xlarge,
                .mlP28xlarge,
                .mlP2Xlarge,
                .mlP316xlarge,
                .mlP32xlarge,
                .mlP38xlarge,
                .mlR5d12xlarge,
                .mlR5d16xlarge,
                .mlR5d24xlarge,
                .mlR5d2xlarge,
                .mlR5d4xlarge,
                .mlR5d8xlarge,
                .mlR5dLarge,
                .mlR5dXlarge,
                .mlR512xlarge,
                .mlR516xlarge,
                .mlR524xlarge,
                .mlR52xlarge,
                .mlR54xlarge,
                .mlR58xlarge,
                .mlR5Large,
                .mlR5Xlarge,
                .mlT32xlarge,
                .mlT3Large,
                .mlT3Medium,
                .mlT3Xlarge
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mlC42xlarge: return "ml.c4.2xlarge"
            case .mlC44xlarge: return "ml.c4.4xlarge"
            case .mlC48xlarge: return "ml.c4.8xlarge"
            case .mlC4Xlarge: return "ml.c4.xlarge"
            case .mlC518xlarge: return "ml.c5.18xlarge"
            case .mlC52xlarge: return "ml.c5.2xlarge"
            case .mlC54xlarge: return "ml.c5.4xlarge"
            case .mlC59xlarge: return "ml.c5.9xlarge"
            case .mlC5Xlarge: return "ml.c5.xlarge"
            case .mlG4dn12xlarge: return "ml.g4dn.12xlarge"
            case .mlG4dn16xlarge: return "ml.g4dn.16xlarge"
            case .mlG4dn2xlarge: return "ml.g4dn.2xlarge"
            case .mlG4dn4xlarge: return "ml.g4dn.4xlarge"
            case .mlG4dn8xlarge: return "ml.g4dn.8xlarge"
            case .mlG4dnXlarge: return "ml.g4dn.xlarge"
            case .mlG512xlarge: return "ml.g5.12xlarge"
            case .mlG516xlarge: return "ml.g5.16xlarge"
            case .mlG524xlarge: return "ml.g5.24xlarge"
            case .mlG52xlarge: return "ml.g5.2xlarge"
            case .mlG548xlarge: return "ml.g5.48xlarge"
            case .mlG54xlarge: return "ml.g5.4xlarge"
            case .mlG58xlarge: return "ml.g5.8xlarge"
            case .mlG5Xlarge: return "ml.g5.xlarge"
            case .mlM410xlarge: return "ml.m4.10xlarge"
            case .mlM416xlarge: return "ml.m4.16xlarge"
            case .mlM42xlarge: return "ml.m4.2xlarge"
            case .mlM44xlarge: return "ml.m4.4xlarge"
            case .mlM4Xlarge: return "ml.m4.xlarge"
            case .mlM512xlarge: return "ml.m5.12xlarge"
            case .mlM524xlarge: return "ml.m5.24xlarge"
            case .mlM52xlarge: return "ml.m5.2xlarge"
            case .mlM54xlarge: return "ml.m5.4xlarge"
            case .mlM5Large: return "ml.m5.large"
            case .mlM5Xlarge: return "ml.m5.xlarge"
            case .mlP216xlarge: return "ml.p2.16xlarge"
            case .mlP28xlarge: return "ml.p2.8xlarge"
            case .mlP2Xlarge: return "ml.p2.xlarge"
            case .mlP316xlarge: return "ml.p3.16xlarge"
            case .mlP32xlarge: return "ml.p3.2xlarge"
            case .mlP38xlarge: return "ml.p3.8xlarge"
            case .mlR5d12xlarge: return "ml.r5d.12xlarge"
            case .mlR5d16xlarge: return "ml.r5d.16xlarge"
            case .mlR5d24xlarge: return "ml.r5d.24xlarge"
            case .mlR5d2xlarge: return "ml.r5d.2xlarge"
            case .mlR5d4xlarge: return "ml.r5d.4xlarge"
            case .mlR5d8xlarge: return "ml.r5d.8xlarge"
            case .mlR5dLarge: return "ml.r5d.large"
            case .mlR5dXlarge: return "ml.r5d.xlarge"
            case .mlR512xlarge: return "ml.r5.12xlarge"
            case .mlR516xlarge: return "ml.r5.16xlarge"
            case .mlR524xlarge: return "ml.r5.24xlarge"
            case .mlR52xlarge: return "ml.r5.2xlarge"
            case .mlR54xlarge: return "ml.r5.4xlarge"
            case .mlR58xlarge: return "ml.r5.8xlarge"
            case .mlR5Large: return "ml.r5.large"
            case .mlR5Xlarge: return "ml.r5.xlarge"
            case .mlT32xlarge: return "ml.t3.2xlarge"
            case .mlT3Large: return "ml.t3.large"
            case .mlT3Medium: return "ml.t3.medium"
            case .mlT3Xlarge: return "ml.t3.xlarge"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Configuration for the cluster used to run model monitoring jobs.
    public struct MonitoringClusterConfig {
        /// The number of ML compute instances to use in the model monitoring job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        /// This member is required.
        public var instanceCount: Swift.Int?
        /// The ML compute instance type for the processing job.
        /// This member is required.
        public var instanceType: SageMakerClientTypes.ProcessingInstanceType?
        /// The Key Management Service (KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the model monitoring job.
        public var volumeKmsKeyId: Swift.String?
        /// The size of the ML storage volume, in gigabytes, that you want to provision. You must specify sufficient ML storage for your scenario.
        /// This member is required.
        public var volumeSizeInGB: Swift.Int?

        public init(
            instanceCount: Swift.Int? = nil,
            instanceType: SageMakerClientTypes.ProcessingInstanceType? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            volumeSizeInGB: Swift.Int? = nil
        )
        {
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.volumeKmsKeyId = volumeKmsKeyId
            self.volumeSizeInGB = volumeSizeInGB
        }
    }

}

extension SageMakerClientTypes {
    /// Identifies the resources to deploy for a monitoring job.
    public struct MonitoringResources {
        /// The configuration for the cluster resources used to run the processing job.
        /// This member is required.
        public var clusterConfig: SageMakerClientTypes.MonitoringClusterConfig?

        public init(
            clusterConfig: SageMakerClientTypes.MonitoringClusterConfig? = nil
        )
        {
            self.clusterConfig = clusterConfig
        }
    }

}

extension SageMakerClientTypes {
    /// The networking configuration for the monitoring job.
    public struct MonitoringNetworkConfig {
        /// Whether to encrypt all communications between the instances used for the monitoring jobs. Choose True to encrypt communications. Encryption provides greater security for distributed jobs, but the processing might take longer.
        public var enableInterContainerTrafficEncryption: Swift.Bool?
        /// Whether to allow inbound and outbound network calls to and from the containers used for the monitoring job.
        public var enableNetworkIsolation: Swift.Bool?
        /// Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to. You can control access to and from your resources by configuring a VPC. For more information, see [Give SageMaker Access to Resources in your Amazon VPC](https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html).
        public var vpcConfig: SageMakerClientTypes.VpcConfig?

        public init(
            enableInterContainerTrafficEncryption: Swift.Bool? = nil,
            enableNetworkIsolation: Swift.Bool? = nil,
            vpcConfig: SageMakerClientTypes.VpcConfig? = nil
        )
        {
            self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
            self.enableNetworkIsolation = enableNetworkIsolation
            self.vpcConfig = vpcConfig
        }
    }

}

extension SageMakerClientTypes {
    /// A time limit for how long the monitoring job is allowed to run before stopping.
    public struct MonitoringStoppingCondition {
        /// The maximum runtime allowed in seconds. The MaxRuntimeInSeconds cannot exceed the frequency of the job. For data quality and model explainability, this can be up to 3600 seconds for an hourly schedule. For model bias and model quality hourly schedules, this can be up to 1800 seconds.
        /// This member is required.
        public var maxRuntimeInSeconds: Swift.Int?

        public init(
            maxRuntimeInSeconds: Swift.Int? = nil
        )
        {
            self.maxRuntimeInSeconds = maxRuntimeInSeconds
        }
    }

}

public struct CreateDataQualityJobDefinitionInput {
    /// Specifies the container that runs the monitoring job.
    /// This member is required.
    public var dataQualityAppSpecification: SageMakerClientTypes.DataQualityAppSpecification?
    /// Configures the constraints and baselines for the monitoring job.
    public var dataQualityBaselineConfig: SageMakerClientTypes.DataQualityBaselineConfig?
    /// A list of inputs for the monitoring job. Currently endpoints are supported as monitoring inputs.
    /// This member is required.
    public var dataQualityJobInput: SageMakerClientTypes.DataQualityJobInput?
    /// The output configuration for monitoring jobs.
    /// This member is required.
    public var dataQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    /// The name for the monitoring job definition.
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// Identifies the resources to deploy for a monitoring job.
    /// This member is required.
    public var jobResources: SageMakerClientTypes.MonitoringResources?
    /// Specifies networking configuration for the monitoring job.
    public var networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A time limit for how long the monitoring job is allowed to run before stopping.
    public var stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?
    /// (Optional) An array of key-value pairs. For more information, see [ Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the Amazon Web Services Billing and Cost Management User Guide.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        dataQualityAppSpecification: SageMakerClientTypes.DataQualityAppSpecification? = nil,
        dataQualityBaselineConfig: SageMakerClientTypes.DataQualityBaselineConfig? = nil,
        dataQualityJobInput: SageMakerClientTypes.DataQualityJobInput? = nil,
        dataQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig? = nil,
        jobDefinitionName: Swift.String? = nil,
        jobResources: SageMakerClientTypes.MonitoringResources? = nil,
        networkConfig: SageMakerClientTypes.MonitoringNetworkConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.dataQualityAppSpecification = dataQualityAppSpecification
        self.dataQualityBaselineConfig = dataQualityBaselineConfig
        self.dataQualityJobInput = dataQualityJobInput
        self.dataQualityJobOutputConfig = dataQualityJobOutputConfig
        self.jobDefinitionName = jobDefinitionName
        self.jobResources = jobResources
        self.networkConfig = networkConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
        self.tags = tags
    }
}

public struct CreateDataQualityJobDefinitionOutput {
    /// The Amazon Resource Name (ARN) of the job definition.
    /// This member is required.
    public var jobDefinitionArn: Swift.String?

    public init(
        jobDefinitionArn: Swift.String? = nil
    )
    {
        self.jobDefinitionArn = jobDefinitionArn
    }
}

extension SageMakerClientTypes {

    public enum EdgePresetDeploymentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case greengrassv2component
        case sdkUnknown(Swift.String)

        public static var allCases: [EdgePresetDeploymentType] {
            return [
                .greengrassv2component
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .greengrassv2component: return "GreengrassV2Component"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The output configuration.
    public struct EdgeOutputConfig {
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume after compilation job. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account.
        public var kmsKeyId: Swift.String?
        /// The configuration used to create deployment artifacts. Specify configuration options with a JSON string. The available configuration options for each type are:
        ///
        /// * ComponentName (optional) - Name of the GreenGrass V2 component. If not specified, the default name generated consists of "SagemakerEdgeManager" and the name of your SageMaker Edge Manager packaging job.
        ///
        /// * ComponentDescription (optional) - Description of the component.
        ///
        /// * ComponentVersion (optional) - The version of the component. Amazon Web Services IoT Greengrass uses semantic versions for components. Semantic versions follow a major.minor.patch number system. For example, version 1.0.0 represents the first major release for a component. For more information, see the [semantic version specification](https://semver.org/).
        ///
        /// * PlatformOS (optional) - The name of the operating system for the platform. Supported platforms include Windows and Linux.
        ///
        /// * PlatformArchitecture (optional) - The processor architecture for the platform. Supported architectures Windows include: Windows32_x86, Windows64_x64. Supported architectures for Linux include: Linux x86_64, Linux ARMV8.
        public var presetDeploymentConfig: Swift.String?
        /// The deployment type SageMaker Edge Manager will create. Currently only supports Amazon Web Services IoT Greengrass Version 2 components.
        public var presetDeploymentType: SageMakerClientTypes.EdgePresetDeploymentType?
        /// The Amazon Simple Storage (S3) bucker URI.
        /// This member is required.
        public var s3OutputLocation: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil,
            presetDeploymentConfig: Swift.String? = nil,
            presetDeploymentType: SageMakerClientTypes.EdgePresetDeploymentType? = nil,
            s3OutputLocation: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.presetDeploymentConfig = presetDeploymentConfig
            self.presetDeploymentType = presetDeploymentType
            self.s3OutputLocation = s3OutputLocation
        }
    }

}

public struct CreateDeviceFleetInput {
    /// A description of the fleet.
    public var description: Swift.String?
    /// The name of the fleet that the device belongs to.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}". For example, if your device fleet is called "demo-fleet", the name of the role alias will be "SageMakerEdge-demo-fleet".
    public var enableIotRoleAlias: Swift.Bool?
    /// The output configuration for storing sample data collected by the fleet.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.EdgeOutputConfig?
    /// The Amazon Resource Name (ARN) that has access to Amazon Web Services Internet of Things (IoT).
    public var roleArn: Swift.String?
    /// Creates tags for the specified fleet.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        description: Swift.String? = nil,
        deviceFleetName: Swift.String? = nil,
        enableIotRoleAlias: Swift.Bool? = nil,
        outputConfig: SageMakerClientTypes.EdgeOutputConfig? = nil,
        roleArn: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.deviceFleetName = deviceFleetName
        self.enableIotRoleAlias = enableIotRoleAlias
        self.outputConfig = outputConfig
        self.roleArn = roleArn
        self.tags = tags
    }
}

extension SageMakerClientTypes {
    /// The settings for assigning a custom Amazon EFS file system to a user profile or space for an Amazon SageMaker Domain.
    public struct EFSFileSystemConfig {
        /// The ID of your Amazon EFS file system.
        /// This member is required.
        public var fileSystemId: Swift.String?
        /// The path to the file system directory that is accessible in Amazon SageMaker Studio. Permitted users can access only this directory and below.
        public var fileSystemPath: Swift.String?

        public init(
            fileSystemId: Swift.String? = nil,
            fileSystemPath: Swift.String? = nil
        )
        {
            self.fileSystemId = fileSystemId
            self.fileSystemPath = fileSystemPath
        }
    }

}

extension SageMakerClientTypes {
    /// The settings for assigning a custom file system to a user profile or space for an Amazon SageMaker Domain. Permitted users can access this file system in Amazon SageMaker Studio.
    public enum CustomFileSystemConfig {
        /// The settings for a custom Amazon EFS file system.
        case efsfilesystemconfig(SageMakerClientTypes.EFSFileSystemConfig)
        case sdkUnknown(Swift.String)
    }

}

extension SageMakerClientTypes {
    /// Details about the POSIX identity that is used for file system operations.
    public struct CustomPosixUserConfig {
        /// The POSIX group ID.
        /// This member is required.
        public var gid: Swift.Int?
        /// The POSIX user ID.
        /// This member is required.
        public var uid: Swift.Int?

        public init(
            gid: Swift.Int? = nil,
            uid: Swift.Int? = nil
        )
        {
            self.gid = gid
            self.uid = uid
        }
    }

}

extension SageMakerClientTypes {
    /// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications.
    public struct EmrSettings {
        /// An array of Amazon Resource Names (ARNs) of the IAM roles that the execution role of SageMaker can assume for performing operations or tasks related to Amazon EMR clusters or Amazon EMR Serverless applications. These roles define the permissions and access policies required when performing Amazon EMR-related operations, such as listing, connecting to, or terminating Amazon EMR clusters or Amazon EMR Serverless applications. They are typically used in cross-account access scenarios, where the Amazon EMR resources (clusters or serverless applications) are located in a different Amazon Web Services account than the SageMaker domain.
        public var assumableRoleArns: [Swift.String]?
        /// An array of Amazon Resource Names (ARNs) of the IAM roles used by the Amazon EMR cluster instances or job execution environments to access other Amazon Web Services services and resources needed during the runtime of your Amazon EMR or Amazon EMR Serverless workloads, such as Amazon S3 for data access, Amazon CloudWatch for logging, or other Amazon Web Services services based on the particular workload requirements.
        public var executionRoleArns: [Swift.String]?

        public init(
            assumableRoleArns: [Swift.String]? = nil,
            executionRoleArns: [Swift.String]? = nil
        )
        {
            self.assumableRoleArns = assumableRoleArns
            self.executionRoleArns = executionRoleArns
        }
    }

}

extension SageMakerClientTypes {
    /// The settings for the JupyterLab application.
    public struct JupyterLabAppSettings {
        /// Indicates whether idle shutdown is activated for JupyterLab applications.
        public var appLifecycleManagement: SageMakerClientTypes.AppLifecycleManagement?
        /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterLab application.
        public var codeRepositories: [SageMakerClientTypes.CodeRepository]?
        /// A list of custom SageMaker images that are configured to run as a JupyterLab app.
        public var customImages: [SageMakerClientTypes.CustomImage]?
        /// Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
        public var defaultResourceSpec: SageMakerClientTypes.ResourceSpec?
        /// The configuration parameters that specify the IAM roles assumed by the execution role of SageMaker (assumable roles) and the cluster instances or job execution environments (execution roles or runtime roles) to manage and access resources required for running Amazon EMR clusters or Amazon EMR Serverless applications.
        public var emrSettings: SageMakerClientTypes.EmrSettings?
        /// The Amazon Resource Name (ARN) of the lifecycle configurations attached to the user profile or domain. To remove a lifecycle config, you must set LifecycleConfigArns to an empty list.
        public var lifecycleConfigArns: [Swift.String]?

        public init(
            appLifecycleManagement: SageMakerClientTypes.AppLifecycleManagement? = nil,
            codeRepositories: [SageMakerClientTypes.CodeRepository]? = nil,
            customImages: [SageMakerClientTypes.CustomImage]? = nil,
            defaultResourceSpec: SageMakerClientTypes.ResourceSpec? = nil,
            emrSettings: SageMakerClientTypes.EmrSettings? = nil,
            lifecycleConfigArns: [Swift.String]? = nil
        )
        {
            self.appLifecycleManagement = appLifecycleManagement
            self.codeRepositories = codeRepositories
            self.customImages = customImages
            self.defaultResourceSpec = defaultResourceSpec
            self.emrSettings = emrSettings
            self.lifecycleConfigArns = lifecycleConfigArns
        }
    }

}

extension SageMakerClientTypes {
    /// The JupyterServer app settings.
    public struct JupyterServerAppSettings {
        /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterServer application.
        public var codeRepositories: [SageMakerClientTypes.CodeRepository]?
        /// The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the JupyterServer app. If you use the LifecycleConfigArns parameter, then this parameter is also required.
        public var defaultResourceSpec: SageMakerClientTypes.ResourceSpec?
        /// The Amazon Resource Name (ARN) of the Lifecycle Configurations attached to the JupyterServerApp. If you use this parameter, the DefaultResourceSpec parameter is also required. To remove a Lifecycle Config, you must set LifecycleConfigArns to an empty list.
        public var lifecycleConfigArns: [Swift.String]?

        public init(
            codeRepositories: [SageMakerClientTypes.CodeRepository]? = nil,
            defaultResourceSpec: SageMakerClientTypes.ResourceSpec? = nil,
            lifecycleConfigArns: [Swift.String]? = nil
        )
        {
            self.codeRepositories = codeRepositories
            self.defaultResourceSpec = defaultResourceSpec
            self.lifecycleConfigArns = lifecycleConfigArns
        }
    }

}

extension SageMakerClientTypes {
    /// The KernelGateway app settings.
    public struct KernelGatewayAppSettings {
        /// A list of custom SageMaker images that are configured to run as a KernelGateway app.
        public var customImages: [SageMakerClientTypes.CustomImage]?
        /// The default instance type and the Amazon Resource Name (ARN) of the default SageMaker image used by the KernelGateway app. The Amazon SageMaker Studio UI does not use the default instance type value set here. The default instance type set here is used when Apps are created using the CLI or CloudFormation and the instance type parameter value is not passed.
        public var defaultResourceSpec: SageMakerClientTypes.ResourceSpec?
        /// The Amazon Resource Name (ARN) of the Lifecycle Configurations attached to the the user profile or domain. To remove a Lifecycle Config, you must set LifecycleConfigArns to an empty list.
        public var lifecycleConfigArns: [Swift.String]?

        public init(
            customImages: [SageMakerClientTypes.CustomImage]? = nil,
            defaultResourceSpec: SageMakerClientTypes.ResourceSpec? = nil,
            lifecycleConfigArns: [Swift.String]? = nil
        )
        {
            self.customImages = customImages
            self.defaultResourceSpec = defaultResourceSpec
            self.lifecycleConfigArns = lifecycleConfigArns
        }
    }

}

extension SageMakerClientTypes {
    /// A collection of default EBS storage settings that apply to spaces created within a domain or user profile.
    public struct DefaultEbsStorageSettings {
        /// The default size of the EBS storage volume for a space.
        /// This member is required.
        public var defaultEbsVolumeSizeInGb: Swift.Int?
        /// The maximum size of the EBS storage volume for a space.
        /// This member is required.
        public var maximumEbsVolumeSizeInGb: Swift.Int?

        public init(
            defaultEbsVolumeSizeInGb: Swift.Int? = nil,
            maximumEbsVolumeSizeInGb: Swift.Int? = nil
        )
        {
            self.defaultEbsVolumeSizeInGb = defaultEbsVolumeSizeInGb
            self.maximumEbsVolumeSizeInGb = maximumEbsVolumeSizeInGb
        }
    }

}

extension SageMakerClientTypes {
    /// The default storage settings for a space.
    public struct DefaultSpaceStorageSettings {
        /// The default EBS storage settings for a space.
        public var defaultEbsStorageSettings: SageMakerClientTypes.DefaultEbsStorageSettings?

        public init(
            defaultEbsStorageSettings: SageMakerClientTypes.DefaultEbsStorageSettings? = nil
        )
        {
            self.defaultEbsStorageSettings = defaultEbsStorageSettings
        }
    }

}

extension SageMakerClientTypes {
    /// A collection of settings that apply to spaces created in the domain.
    public struct DefaultSpaceSettings {
        /// The settings for assigning a custom file system to a domain. Permitted users can access this file system in Amazon SageMaker Studio.
        public var customFileSystemConfigs: [SageMakerClientTypes.CustomFileSystemConfig]?
        /// Details about the POSIX identity that is used for file system operations.
        public var customPosixUserConfig: SageMakerClientTypes.CustomPosixUserConfig?
        /// The ARN of the execution role for the space.
        public var executionRole: Swift.String?
        /// The settings for the JupyterLab application.
        public var jupyterLabAppSettings: SageMakerClientTypes.JupyterLabAppSettings?
        /// The JupyterServer app settings.
        public var jupyterServerAppSettings: SageMakerClientTypes.JupyterServerAppSettings?
        /// The KernelGateway app settings.
        public var kernelGatewayAppSettings: SageMakerClientTypes.KernelGatewayAppSettings?
        /// The security group IDs for the Amazon VPC that the space uses for communication.
        public var securityGroups: [Swift.String]?
        /// The default storage settings for a space.
        public var spaceStorageSettings: SageMakerClientTypes.DefaultSpaceStorageSettings?

        public init(
            customFileSystemConfigs: [SageMakerClientTypes.CustomFileSystemConfig]? = nil,
            customPosixUserConfig: SageMakerClientTypes.CustomPosixUserConfig? = nil,
            executionRole: Swift.String? = nil,
            jupyterLabAppSettings: SageMakerClientTypes.JupyterLabAppSettings? = nil,
            jupyterServerAppSettings: SageMakerClientTypes.JupyterServerAppSettings? = nil,
            kernelGatewayAppSettings: SageMakerClientTypes.KernelGatewayAppSettings? = nil,
            securityGroups: [Swift.String]? = nil,
            spaceStorageSettings: SageMakerClientTypes.DefaultSpaceStorageSettings? = nil
        )
        {
            self.customFileSystemConfigs = customFileSystemConfigs
            self.customPosixUserConfig = customPosixUserConfig
            self.executionRole = executionRole
            self.jupyterLabAppSettings = jupyterLabAppSettings
            self.jupyterServerAppSettings = jupyterServerAppSettings
            self.kernelGatewayAppSettings = kernelGatewayAppSettings
            self.securityGroups = securityGroups
            self.spaceStorageSettings = spaceStorageSettings
        }
    }

}

extension SageMakerClientTypes {
    /// A collection of settings that apply to an RSessionGateway app.
    public struct RSessionAppSettings {
        /// A list of custom SageMaker images that are configured to run as a RSession app.
        public var customImages: [SageMakerClientTypes.CustomImage]?
        /// Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
        public var defaultResourceSpec: SageMakerClientTypes.ResourceSpec?

        public init(
            customImages: [SageMakerClientTypes.CustomImage]? = nil,
            defaultResourceSpec: SageMakerClientTypes.ResourceSpec? = nil
        )
        {
            self.customImages = customImages
            self.defaultResourceSpec = defaultResourceSpec
        }
    }

}

extension SageMakerClientTypes {

    public enum RStudioServerProAccessStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [RStudioServerProAccessStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum RStudioServerProUserGroup: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case admin
        case user
        case sdkUnknown(Swift.String)

        public static var allCases: [RStudioServerProUserGroup] {
            return [
                .admin,
                .user
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .admin: return "R_STUDIO_ADMIN"
            case .user: return "R_STUDIO_USER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A collection of settings that configure user interaction with the RStudioServerPro app.
    public struct RStudioServerProAppSettings {
        /// Indicates whether the current user has access to the RStudioServerPro app.
        public var accessStatus: SageMakerClientTypes.RStudioServerProAccessStatus?
        /// The level of permissions that the user has within the RStudioServerPro app. This value defaults to `User`. The `Admin` value allows the user access to the RStudio Administrative Dashboard.
        public var userGroup: SageMakerClientTypes.RStudioServerProUserGroup?

        public init(
            accessStatus: SageMakerClientTypes.RStudioServerProAccessStatus? = nil,
            userGroup: SageMakerClientTypes.RStudioServerProUserGroup? = nil
        )
        {
            self.accessStatus = accessStatus
            self.userGroup = userGroup
        }
    }

}

extension SageMakerClientTypes {

    public enum NotebookOutputOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allowed
        case disabled
        case sdkUnknown(Swift.String)

        public static var allCases: [NotebookOutputOption] {
            return [
                .allowed,
                .disabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allowed: return "Allowed"
            case .disabled: return "Disabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies options for sharing Amazon SageMaker Studio notebooks. These settings are specified as part of DefaultUserSettings when the CreateDomain API is called, and as part of UserSettings when the CreateUserProfile API is called. When SharingSettings is not specified, notebook sharing isn't allowed.
    public struct SharingSettings {
        /// Whether to include the notebook cell output when sharing the notebook. The default is Disabled.
        public var notebookOutputOption: SageMakerClientTypes.NotebookOutputOption?
        /// When NotebookOutputOption is Allowed, the Amazon Web Services Key Management Service (KMS) encryption key ID used to encrypt the notebook cell output in the Amazon S3 bucket.
        public var s3KmsKeyId: Swift.String?
        /// When NotebookOutputOption is Allowed, the Amazon S3 bucket used to store the shared notebook snapshots.
        public var s3OutputPath: Swift.String?

        public init(
            notebookOutputOption: SageMakerClientTypes.NotebookOutputOption? = nil,
            s3KmsKeyId: Swift.String? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.notebookOutputOption = notebookOutputOption
            self.s3KmsKeyId = s3KmsKeyId
            self.s3OutputPath = s3OutputPath
        }
    }

}

extension SageMakerClientTypes {

    public enum StudioWebPortal: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [StudioWebPortal] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum MlTools: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case autoMl
        case dataWrangler
        case emrClusters
        case endpoints
        case experiments
        case featureStore
        case inferenceOptimization
        case inferenceRecommender
        case jumpStart
        case models
        case modelEvaluation
        case pipelines
        case projects
        case training
        case sdkUnknown(Swift.String)

        public static var allCases: [MlTools] {
            return [
                .autoMl,
                .dataWrangler,
                .emrClusters,
                .endpoints,
                .experiments,
                .featureStore,
                .inferenceOptimization,
                .inferenceRecommender,
                .jumpStart,
                .models,
                .modelEvaluation,
                .pipelines,
                .projects,
                .training
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .autoMl: return "AutoMl"
            case .dataWrangler: return "DataWrangler"
            case .emrClusters: return "EmrClusters"
            case .endpoints: return "Endpoints"
            case .experiments: return "Experiments"
            case .featureStore: return "FeatureStore"
            case .inferenceOptimization: return "InferenceOptimization"
            case .inferenceRecommender: return "InferenceRecommender"
            case .jumpStart: return "JumpStart"
            case .models: return "Models"
            case .modelEvaluation: return "ModelEvaluation"
            case .pipelines: return "Pipelines"
            case .projects: return "Projects"
            case .training: return "Training"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Studio settings. If these settings are applied on a user level, they take priority over the settings applied on a domain level.
    public struct StudioWebPortalSettings {
        /// The [Applications supported in Studio](https://docs.aws.amazon.com/sagemaker/latest/dg/studio-updated-apps.html) that are hidden from the Studio left navigation pane.
        public var hiddenAppTypes: [SageMakerClientTypes.AppType]?
        /// The machine learning tools that are hidden from the Studio left navigation pane.
        public var hiddenMlTools: [SageMakerClientTypes.MlTools]?

        public init(
            hiddenAppTypes: [SageMakerClientTypes.AppType]? = nil,
            hiddenMlTools: [SageMakerClientTypes.MlTools]? = nil
        )
        {
            self.hiddenAppTypes = hiddenAppTypes
            self.hiddenMlTools = hiddenMlTools
        }
    }

}

extension SageMakerClientTypes {
    /// The TensorBoard app settings.
    public struct TensorBoardAppSettings {
        /// The default instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.
        public var defaultResourceSpec: SageMakerClientTypes.ResourceSpec?

        public init(
            defaultResourceSpec: SageMakerClientTypes.ResourceSpec? = nil
        )
        {
            self.defaultResourceSpec = defaultResourceSpec
        }
    }

}

extension SageMakerClientTypes {
    /// A collection of settings that apply to users in a domain. These settings are specified when the CreateUserProfile API is called, and as DefaultUserSettings when the CreateDomain API is called. SecurityGroups is aggregated when specified in both calls. For all other settings in UserSettings, the values specified in CreateUserProfile take precedence over those specified in CreateDomain.
    public struct UserSettings {
        /// Indicates whether auto-mounting of an EFS volume is supported for the user profile. The DefaultAsDomain value is only supported for user profiles. Do not use the DefaultAsDomain value when setting this parameter for a domain.
        public var autoMountHomeEFS: SageMakerClientTypes.AutoMountHomeEFS?
        /// The Canvas app settings.
        public var canvasAppSettings: SageMakerClientTypes.CanvasAppSettings?
        /// The Code Editor application settings.
        public var codeEditorAppSettings: SageMakerClientTypes.CodeEditorAppSettings?
        /// The settings for assigning a custom file system to a user profile. Permitted users can access this file system in Amazon SageMaker Studio.
        public var customFileSystemConfigs: [SageMakerClientTypes.CustomFileSystemConfig]?
        /// Details about the POSIX identity that is used for file system operations.
        public var customPosixUserConfig: SageMakerClientTypes.CustomPosixUserConfig?
        /// The default experience that the user is directed to when accessing the domain. The supported values are:
        ///
        /// * studio::: Indicates that Studio is the default experience. This value can only be passed if StudioWebPortal is set to ENABLED.
        ///
        /// * app:JupyterServer:: Indicates that Studio Classic is the default experience.
        public var defaultLandingUri: Swift.String?
        /// The execution role for the user.
        public var executionRole: Swift.String?
        /// The settings for the JupyterLab application.
        public var jupyterLabAppSettings: SageMakerClientTypes.JupyterLabAppSettings?
        /// The Jupyter server's app settings.
        public var jupyterServerAppSettings: SageMakerClientTypes.JupyterServerAppSettings?
        /// The kernel gateway app settings.
        public var kernelGatewayAppSettings: SageMakerClientTypes.KernelGatewayAppSettings?
        /// A collection of settings that configure the RSessionGateway app.
        public var rSessionAppSettings: SageMakerClientTypes.RSessionAppSettings?
        /// A collection of settings that configure user interaction with the RStudioServerPro app.
        public var rStudioServerProAppSettings: SageMakerClientTypes.RStudioServerProAppSettings?
        /// The security groups for the Amazon Virtual Private Cloud (VPC) that the domain uses for communication. Optional when the CreateDomain.AppNetworkAccessType parameter is set to PublicInternetOnly. Required when the CreateDomain.AppNetworkAccessType parameter is set to VpcOnly, unless specified as part of the DefaultUserSettings for the domain. Amazon SageMaker adds a security group to allow NFS traffic from Amazon SageMaker Studio. Therefore, the number of security groups that you can specify is one less than the maximum number shown.
        public var securityGroups: [Swift.String]?
        /// Specifies options for sharing Amazon SageMaker Studio notebooks.
        public var sharingSettings: SageMakerClientTypes.SharingSettings?
        /// The storage settings for a space.
        public var spaceStorageSettings: SageMakerClientTypes.DefaultSpaceStorageSettings?
        /// Whether the user can access Studio. If this value is set to DISABLED, the user cannot access Studio, even if that is the default experience for the domain.
        public var studioWebPortal: SageMakerClientTypes.StudioWebPortal?
        /// Studio settings. If these settings are applied on a user level, they take priority over the settings applied on a domain level.
        public var studioWebPortalSettings: SageMakerClientTypes.StudioWebPortalSettings?
        /// The TensorBoard app settings.
        public var tensorBoardAppSettings: SageMakerClientTypes.TensorBoardAppSettings?

        public init(
            autoMountHomeEFS: SageMakerClientTypes.AutoMountHomeEFS? = nil,
            canvasAppSettings: SageMakerClientTypes.CanvasAppSettings? = nil,
            codeEditorAppSettings: SageMakerClientTypes.CodeEditorAppSettings? = nil,
            customFileSystemConfigs: [SageMakerClientTypes.CustomFileSystemConfig]? = nil,
            customPosixUserConfig: SageMakerClientTypes.CustomPosixUserConfig? = nil,
            defaultLandingUri: Swift.String? = nil,
            executionRole: Swift.String? = nil,
            jupyterLabAppSettings: SageMakerClientTypes.JupyterLabAppSettings? = nil,
            jupyterServerAppSettings: SageMakerClientTypes.JupyterServerAppSettings? = nil,
            kernelGatewayAppSettings: SageMakerClientTypes.KernelGatewayAppSettings? = nil,
            rSessionAppSettings: SageMakerClientTypes.RSessionAppSettings? = nil,
            rStudioServerProAppSettings: SageMakerClientTypes.RStudioServerProAppSettings? = nil,
            securityGroups: [Swift.String]? = nil,
            sharingSettings: SageMakerClientTypes.SharingSettings? = nil,
            spaceStorageSettings: SageMakerClientTypes.DefaultSpaceStorageSettings? = nil,
            studioWebPortal: SageMakerClientTypes.StudioWebPortal? = nil,
            studioWebPortalSettings: SageMakerClientTypes.StudioWebPortalSettings? = nil,
            tensorBoardAppSettings: SageMakerClientTypes.TensorBoardAppSettings? = nil
        )
        {
            self.autoMountHomeEFS = autoMountHomeEFS
            self.canvasAppSettings = canvasAppSettings
            self.codeEditorAppSettings = codeEditorAppSettings
            self.customFileSystemConfigs = customFileSystemConfigs
            self.customPosixUserConfig = customPosixUserConfig
            self.defaultLandingUri = defaultLandingUri
            self.executionRole = executionRole
            self.jupyterLabAppSettings = jupyterLabAppSettings
            self.jupyterServerAppSettings = jupyterServerAppSettings
            self.kernelGatewayAppSettings = kernelGatewayAppSettings
            self.rSessionAppSettings = rSessionAppSettings
            self.rStudioServerProAppSettings = rStudioServerProAppSettings
            self.securityGroups = securityGroups
            self.sharingSettings = sharingSettings
            self.spaceStorageSettings = spaceStorageSettings
            self.studioWebPortal = studioWebPortal
            self.studioWebPortalSettings = studioWebPortalSettings
            self.tensorBoardAppSettings = tensorBoardAppSettings
        }
    }

}

extension SageMakerClientTypes {
    /// A collection of settings that configure the domain's Docker interaction.
    public struct DockerSettings {
        /// Indicates whether the domain can access Docker.
        public var enableDockerAccess: SageMakerClientTypes.FeatureStatus?
        /// The list of Amazon Web Services accounts that are trusted when the domain is created in VPC-only mode.
        public var vpcOnlyTrustedAccounts: [Swift.String]?

        public init(
            enableDockerAccess: SageMakerClientTypes.FeatureStatus? = nil,
            vpcOnlyTrustedAccounts: [Swift.String]? = nil
        )
        {
            self.enableDockerAccess = enableDockerAccess
            self.vpcOnlyTrustedAccounts = vpcOnlyTrustedAccounts
        }
    }

}

extension SageMakerClientTypes {

    public enum ExecutionRoleIdentityConfig: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case userProfileName
        case sdkUnknown(Swift.String)

        public static var allCases: [ExecutionRoleIdentityConfig] {
            return [
                .disabled,
                .userProfileName
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .userProfileName: return "USER_PROFILE_NAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A collection of settings that configure the RStudioServerPro Domain-level app.
    public struct RStudioServerProDomainSettings {
        /// Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
        public var defaultResourceSpec: SageMakerClientTypes.ResourceSpec?
        /// The ARN of the execution role for the RStudioServerPro Domain-level app.
        /// This member is required.
        public var domainExecutionRoleArn: Swift.String?
        /// A URL pointing to an RStudio Connect server.
        public var rStudioConnectUrl: Swift.String?
        /// A URL pointing to an RStudio Package Manager server.
        public var rStudioPackageManagerUrl: Swift.String?

        public init(
            defaultResourceSpec: SageMakerClientTypes.ResourceSpec? = nil,
            domainExecutionRoleArn: Swift.String? = nil,
            rStudioConnectUrl: Swift.String? = nil,
            rStudioPackageManagerUrl: Swift.String? = nil
        )
        {
            self.defaultResourceSpec = defaultResourceSpec
            self.domainExecutionRoleArn = domainExecutionRoleArn
            self.rStudioConnectUrl = rStudioConnectUrl
            self.rStudioPackageManagerUrl = rStudioPackageManagerUrl
        }
    }

}

extension SageMakerClientTypes {
    /// A collection of settings that apply to the SageMaker Domain. These settings are specified through the CreateDomain API call.
    public struct DomainSettings {
        /// A collection of settings that configure the Amazon Q experience within the domain. The AuthMode that you use to create the domain must be SSO.
        public var amazonQSettings: SageMakerClientTypes.AmazonQSettings?
        /// A collection of settings that configure the domain's Docker interaction.
        public var dockerSettings: SageMakerClientTypes.DockerSettings?
        /// The configuration for attaching a SageMaker user profile name to the execution role as a [sts:SourceIdentity key](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html).
        public var executionRoleIdentityConfig: SageMakerClientTypes.ExecutionRoleIdentityConfig?
        /// A collection of settings that configure the RStudioServerPro Domain-level app.
        public var rStudioServerProDomainSettings: SageMakerClientTypes.RStudioServerProDomainSettings?
        /// The security groups for the Amazon Virtual Private Cloud that the Domain uses for communication between Domain-level apps and user apps.
        public var securityGroupIds: [Swift.String]?

        public init(
            amazonQSettings: SageMakerClientTypes.AmazonQSettings? = nil,
            dockerSettings: SageMakerClientTypes.DockerSettings? = nil,
            executionRoleIdentityConfig: SageMakerClientTypes.ExecutionRoleIdentityConfig? = nil,
            rStudioServerProDomainSettings: SageMakerClientTypes.RStudioServerProDomainSettings? = nil,
            securityGroupIds: [Swift.String]? = nil
        )
        {
            self.amazonQSettings = amazonQSettings
            self.dockerSettings = dockerSettings
            self.executionRoleIdentityConfig = executionRoleIdentityConfig
            self.rStudioServerProDomainSettings = rStudioServerProDomainSettings
            self.securityGroupIds = securityGroupIds
        }
    }

}

public struct CreateDomainInput {
    /// Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly.
    ///
    /// * PublicInternetOnly - Non-EFS traffic is through a VPC managed by Amazon SageMaker, which allows direct internet access
    ///
    /// * VpcOnly - All traffic is through the specified VPC and subnets
    public var appNetworkAccessType: SageMakerClientTypes.AppNetworkAccessType?
    /// The entity that creates and manages the required security groups for inter-app communication in VPCOnly mode. Required when CreateDomain.AppNetworkAccessType is VPCOnly and DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn is provided. If setting up the domain for use with RStudio, this value must be set to Service.
    public var appSecurityGroupManagement: SageMakerClientTypes.AppSecurityGroupManagement?
    /// The mode of authentication that members use to access the domain.
    /// This member is required.
    public var authMode: SageMakerClientTypes.AuthMode?
    /// The default settings used to create a space.
    public var defaultSpaceSettings: SageMakerClientTypes.DefaultSpaceSettings?
    /// The default settings to use to create a user profile when UserSettings isn't specified in the call to the CreateUserProfile API. SecurityGroups is aggregated when specified in both calls. For all other settings in UserSettings, the values specified in CreateUserProfile take precedence over those specified in CreateDomain.
    /// This member is required.
    public var defaultUserSettings: SageMakerClientTypes.UserSettings?
    /// A name for the domain.
    /// This member is required.
    public var domainName: Swift.String?
    /// A collection of Domain settings.
    public var domainSettings: SageMakerClientTypes.DomainSettings?
    /// Use KmsKeyId.
    @available(*, deprecated, message: "This property is deprecated, use KmsKeyId instead.")
    public var homeEfsFileSystemKmsKeyId: Swift.String?
    /// SageMaker uses Amazon Web Services KMS to encrypt EFS and EBS volumes attached to the domain with an Amazon Web Services managed key by default. For more control, specify a customer managed key.
    public var kmsKeyId: Swift.String?
    /// The VPC subnets that the domain uses for communication.
    /// This member is required.
    public var subnetIds: [Swift.String]?
    /// Tags to associated with the Domain. Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags are searchable using the Search API. Tags that you specify for the Domain are also added to all Apps that the Domain launches.
    public var tags: [SageMakerClientTypes.Tag]?
    /// The ID of the Amazon Virtual Private Cloud (VPC) that the domain uses for communication.
    /// This member is required.
    public var vpcId: Swift.String?

    public init(
        appNetworkAccessType: SageMakerClientTypes.AppNetworkAccessType? = nil,
        appSecurityGroupManagement: SageMakerClientTypes.AppSecurityGroupManagement? = nil,
        authMode: SageMakerClientTypes.AuthMode? = nil,
        defaultSpaceSettings: SageMakerClientTypes.DefaultSpaceSettings? = nil,
        defaultUserSettings: SageMakerClientTypes.UserSettings? = nil,
        domainName: Swift.String? = nil,
        domainSettings: SageMakerClientTypes.DomainSettings? = nil,
        homeEfsFileSystemKmsKeyId: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        subnetIds: [Swift.String]? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.appNetworkAccessType = appNetworkAccessType
        self.appSecurityGroupManagement = appSecurityGroupManagement
        self.authMode = authMode
        self.defaultSpaceSettings = defaultSpaceSettings
        self.defaultUserSettings = defaultUserSettings
        self.domainName = domainName
        self.domainSettings = domainSettings
        self.homeEfsFileSystemKmsKeyId = homeEfsFileSystemKmsKeyId
        self.kmsKeyId = kmsKeyId
        self.subnetIds = subnetIds
        self.tags = tags
        self.vpcId = vpcId
    }
}

public struct CreateDomainOutput {
    /// The Amazon Resource Name (ARN) of the created domain.
    public var domainArn: Swift.String?
    /// The URL to the created domain.
    public var url: Swift.String?

    public init(
        domainArn: Swift.String? = nil,
        url: Swift.String? = nil
    )
    {
        self.domainArn = domainArn
        self.url = url
    }
}

extension SageMakerClientTypes {
    /// Contains information about the configuration of a model in a deployment.
    public struct EdgeDeploymentModelConfig {
        /// The edge packaging job associated with this deployment.
        /// This member is required.
        public var edgePackagingJobName: Swift.String?
        /// The name the device application uses to reference this model.
        /// This member is required.
        public var modelHandle: Swift.String?

        public init(
            edgePackagingJobName: Swift.String? = nil,
            modelHandle: Swift.String? = nil
        )
        {
            self.edgePackagingJobName = edgePackagingJobName
            self.modelHandle = modelHandle
        }
    }

}

extension SageMakerClientTypes {

    public enum FailureHandlingPolicy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case donothing
        case rollbackonfailure
        case sdkUnknown(Swift.String)

        public static var allCases: [FailureHandlingPolicy] {
            return [
                .donothing,
                .rollbackonfailure
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .donothing: return "DO_NOTHING"
            case .rollbackonfailure: return "ROLLBACK_ON_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Contains information about the configuration of a deployment.
    public struct EdgeDeploymentConfig {
        /// Toggle that determines whether to rollback to previous configuration if the current deployment fails. By default this is turned on. You may turn this off if you want to investigate the errors yourself.
        /// This member is required.
        public var failureHandlingPolicy: SageMakerClientTypes.FailureHandlingPolicy?

        public init(
            failureHandlingPolicy: SageMakerClientTypes.FailureHandlingPolicy? = nil
        )
        {
            self.failureHandlingPolicy = failureHandlingPolicy
        }
    }

}

extension SageMakerClientTypes {

    public enum DeviceSubsetType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case namecontains
        case percentage
        case selection
        case sdkUnknown(Swift.String)

        public static var allCases: [DeviceSubsetType] {
            return [
                .namecontains,
                .percentage,
                .selection
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .namecontains: return "NAMECONTAINS"
            case .percentage: return "PERCENTAGE"
            case .selection: return "SELECTION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Contains information about the configurations of selected devices.
    public struct DeviceSelectionConfig {
        /// A filter to select devices with names containing this name.
        public var deviceNameContains: Swift.String?
        /// List of devices chosen to deploy.
        public var deviceNames: [Swift.String]?
        /// Type of device subsets to deploy to the current stage.
        /// This member is required.
        public var deviceSubsetType: SageMakerClientTypes.DeviceSubsetType?
        /// Percentage of devices in the fleet to deploy to the current stage.
        public var percentage: Swift.Int?

        public init(
            deviceNameContains: Swift.String? = nil,
            deviceNames: [Swift.String]? = nil,
            deviceSubsetType: SageMakerClientTypes.DeviceSubsetType? = nil,
            percentage: Swift.Int? = nil
        )
        {
            self.deviceNameContains = deviceNameContains
            self.deviceNames = deviceNames
            self.deviceSubsetType = deviceSubsetType
            self.percentage = percentage
        }
    }

}

extension SageMakerClientTypes {
    /// Contains information about a stage in an edge deployment plan.
    public struct DeploymentStage {
        /// Configuration of the deployment details.
        public var deploymentConfig: SageMakerClientTypes.EdgeDeploymentConfig?
        /// Configuration of the devices in the stage.
        /// This member is required.
        public var deviceSelectionConfig: SageMakerClientTypes.DeviceSelectionConfig?
        /// The name of the stage.
        /// This member is required.
        public var stageName: Swift.String?

        public init(
            deploymentConfig: SageMakerClientTypes.EdgeDeploymentConfig? = nil,
            deviceSelectionConfig: SageMakerClientTypes.DeviceSelectionConfig? = nil,
            stageName: Swift.String? = nil
        )
        {
            self.deploymentConfig = deploymentConfig
            self.deviceSelectionConfig = deviceSelectionConfig
            self.stageName = stageName
        }
    }

}

public struct CreateEdgeDeploymentPlanInput {
    /// The device fleet used for this edge deployment plan.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// The name of the edge deployment plan.
    /// This member is required.
    public var edgeDeploymentPlanName: Swift.String?
    /// List of models associated with the edge deployment plan.
    /// This member is required.
    public var modelConfigs: [SageMakerClientTypes.EdgeDeploymentModelConfig]?
    /// List of stages of the edge deployment plan. The number of stages is limited to 10 per deployment.
    public var stages: [SageMakerClientTypes.DeploymentStage]?
    /// List of tags with which to tag the edge deployment plan.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        deviceFleetName: Swift.String? = nil,
        edgeDeploymentPlanName: Swift.String? = nil,
        modelConfigs: [SageMakerClientTypes.EdgeDeploymentModelConfig]? = nil,
        stages: [SageMakerClientTypes.DeploymentStage]? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.deviceFleetName = deviceFleetName
        self.edgeDeploymentPlanName = edgeDeploymentPlanName
        self.modelConfigs = modelConfigs
        self.stages = stages
        self.tags = tags
    }
}

public struct CreateEdgeDeploymentPlanOutput {
    /// The ARN of the edge deployment plan.
    /// This member is required.
    public var edgeDeploymentPlanArn: Swift.String?

    public init(
        edgeDeploymentPlanArn: Swift.String? = nil
    )
    {
        self.edgeDeploymentPlanArn = edgeDeploymentPlanArn
    }
}

public struct CreateEdgeDeploymentStageInput {
    /// The name of the edge deployment plan.
    /// This member is required.
    public var edgeDeploymentPlanName: Swift.String?
    /// List of stages to be added to the edge deployment plan.
    /// This member is required.
    public var stages: [SageMakerClientTypes.DeploymentStage]?

    public init(
        edgeDeploymentPlanName: Swift.String? = nil,
        stages: [SageMakerClientTypes.DeploymentStage]? = nil
    )
    {
        self.edgeDeploymentPlanName = edgeDeploymentPlanName
        self.stages = stages
    }
}

public struct CreateEdgePackagingJobInput {
    /// The name of the SageMaker Neo compilation job that will be used to locate model artifacts for packaging.
    /// This member is required.
    public var compilationJobName: Swift.String?
    /// The name of the edge packaging job.
    /// This member is required.
    public var edgePackagingJobName: Swift.String?
    /// The name of the model.
    /// This member is required.
    public var modelName: Swift.String?
    /// The version of the model.
    /// This member is required.
    public var modelVersion: Swift.String?
    /// Provides information about the output location for the packaged model.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.EdgeOutputConfig?
    /// The Amazon Web Services KMS key to use when encrypting the EBS volume the edge packaging job runs on.
    public var resourceKey: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to download and upload the model, and to contact SageMaker Neo.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Creates tags for the packaging job.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        compilationJobName: Swift.String? = nil,
        edgePackagingJobName: Swift.String? = nil,
        modelName: Swift.String? = nil,
        modelVersion: Swift.String? = nil,
        outputConfig: SageMakerClientTypes.EdgeOutputConfig? = nil,
        resourceKey: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.compilationJobName = compilationJobName
        self.edgePackagingJobName = edgePackagingJobName
        self.modelName = modelName
        self.modelVersion = modelVersion
        self.outputConfig = outputConfig
        self.resourceKey = resourceKey
        self.roleArn = roleArn
        self.tags = tags
    }
}

extension SageMakerClientTypes {
    /// Specifies a rolling deployment strategy for updating a SageMaker endpoint.
    public struct RollingUpdatePolicy {
        /// Batch size for each rolling step to provision capacity and turn on traffic on the new endpoint fleet, and terminate capacity on the old endpoint fleet. Value must be between 5% to 50% of the variant's total instance count.
        /// This member is required.
        public var maximumBatchSize: SageMakerClientTypes.CapacitySize?
        /// The time limit for the total deployment. Exceeding this limit causes a timeout.
        public var maximumExecutionTimeoutInSeconds: Swift.Int?
        /// Batch size for rollback to the old endpoint fleet. Each rolling step to provision capacity and turn on traffic on the old endpoint fleet, and terminate capacity on the new endpoint fleet. If this field is absent, the default value will be set to 100% of total capacity which means to bring up the whole capacity of the old fleet at once during rollback.
        public var rollbackMaximumBatchSize: SageMakerClientTypes.CapacitySize?
        /// The length of the baking period, during which SageMaker monitors alarms for each batch on the new fleet.
        /// This member is required.
        public var waitIntervalInSeconds: Swift.Int?

        public init(
            maximumBatchSize: SageMakerClientTypes.CapacitySize? = nil,
            maximumExecutionTimeoutInSeconds: Swift.Int? = nil,
            rollbackMaximumBatchSize: SageMakerClientTypes.CapacitySize? = nil,
            waitIntervalInSeconds: Swift.Int? = nil
        )
        {
            self.maximumBatchSize = maximumBatchSize
            self.maximumExecutionTimeoutInSeconds = maximumExecutionTimeoutInSeconds
            self.rollbackMaximumBatchSize = rollbackMaximumBatchSize
            self.waitIntervalInSeconds = waitIntervalInSeconds
        }
    }

}

extension SageMakerClientTypes {
    /// The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.
    public struct DeploymentConfig {
        /// Automatic rollback configuration for handling endpoint deployment failures and recovery.
        public var autoRollbackConfiguration: SageMakerClientTypes.AutoRollbackConfig?
        /// Update policy for a blue/green deployment. If this update policy is specified, SageMaker creates a new fleet during the deployment while maintaining the old fleet. SageMaker flips traffic to the new fleet according to the specified traffic routing configuration. Only one update policy should be used in the deployment configuration. If no update policy is specified, SageMaker uses a blue/green deployment strategy with all at once traffic shifting by default.
        public var blueGreenUpdatePolicy: SageMakerClientTypes.BlueGreenUpdatePolicy?
        /// Specifies a rolling deployment strategy for updating a SageMaker endpoint.
        public var rollingUpdatePolicy: SageMakerClientTypes.RollingUpdatePolicy?

        public init(
            autoRollbackConfiguration: SageMakerClientTypes.AutoRollbackConfig? = nil,
            blueGreenUpdatePolicy: SageMakerClientTypes.BlueGreenUpdatePolicy? = nil,
            rollingUpdatePolicy: SageMakerClientTypes.RollingUpdatePolicy? = nil
        )
        {
            self.autoRollbackConfiguration = autoRollbackConfiguration
            self.blueGreenUpdatePolicy = blueGreenUpdatePolicy
            self.rollingUpdatePolicy = rollingUpdatePolicy
        }
    }

}

public struct CreateEndpointInput {
    /// The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.
    public var deploymentConfig: SageMakerClientTypes.DeploymentConfig?
    /// The name of an endpoint configuration. For more information, see [CreateEndpointConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html).
    /// This member is required.
    public var endpointConfigName: Swift.String?
    /// The name of the endpoint.The name must be unique within an Amazon Web Services Region in your Amazon Web Services account. The name is case-insensitive in CreateEndpoint, but the case is preserved and must be matched in [InvokeEndpoint](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpoint.html).
    /// This member is required.
    public var endpointName: Swift.String?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        deploymentConfig: SageMakerClientTypes.DeploymentConfig? = nil,
        endpointConfigName: Swift.String? = nil,
        endpointName: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.deploymentConfig = deploymentConfig
        self.endpointConfigName = endpointConfigName
        self.endpointName = endpointName
        self.tags = tags
    }
}

public struct CreateEndpointOutput {
    /// The Amazon Resource Name (ARN) of the endpoint.
    /// This member is required.
    public var endpointArn: Swift.String?

    public init(
        endpointArn: Swift.String? = nil
    )
    {
        self.endpointArn = endpointArn
    }
}

extension SageMakerClientTypes {
    /// Configuration to control how SageMaker captures inference data.
    public struct DataCaptureConfig {
        /// Configuration specifying how to treat different headers. If no headers are specified SageMaker will by default base64 encode when capturing the data.
        public var captureContentTypeHeader: SageMakerClientTypes.CaptureContentTypeHeader?
        /// Specifies data Model Monitor will capture. You can configure whether to collect only input, only output, or both
        /// This member is required.
        public var captureOptions: [SageMakerClientTypes.CaptureOption]?
        /// The Amazon S3 location used to capture the data.
        /// This member is required.
        public var destinationS3Uri: Swift.String?
        /// Whether data capture should be enabled or disabled (defaults to enabled).
        public var enableCapture: Swift.Bool?
        /// The percentage of requests SageMaker will capture. A lower value is recommended for Endpoints with high traffic.
        /// This member is required.
        public var initialSamplingPercentage: Swift.Int?
        /// The Amazon Resource Name (ARN) of an Key Management Service key that SageMaker uses to encrypt the captured data at rest using Amazon S3 server-side encryption. The KmsKeyId can be any of the following formats:
        ///
        /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Key ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
        ///
        /// * Alias name: alias/ExampleAlias
        ///
        /// * Alias name ARN: arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias
        public var kmsKeyId: Swift.String?

        public init(
            captureContentTypeHeader: SageMakerClientTypes.CaptureContentTypeHeader? = nil,
            captureOptions: [SageMakerClientTypes.CaptureOption]? = nil,
            destinationS3Uri: Swift.String? = nil,
            enableCapture: Swift.Bool? = nil,
            initialSamplingPercentage: Swift.Int? = nil,
            kmsKeyId: Swift.String? = nil
        )
        {
            self.captureContentTypeHeader = captureContentTypeHeader
            self.captureOptions = captureOptions
            self.destinationS3Uri = destinationS3Uri
            self.enableCapture = enableCapture
            self.initialSamplingPercentage = initialSamplingPercentage
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension SageMakerClientTypes {
    /// A parameter to activate explainers.
    public struct ExplainerConfig {
        /// A member of ExplainerConfig that contains configuration parameters for the SageMaker Clarify explainer.
        public var clarifyExplainerConfig: SageMakerClientTypes.ClarifyExplainerConfig?

        public init(
            clarifyExplainerConfig: SageMakerClientTypes.ClarifyExplainerConfig? = nil
        )
        {
            self.clarifyExplainerConfig = clarifyExplainerConfig
        }
    }

}

extension SageMakerClientTypes {

    public enum ProductionVariantAcceleratorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mlEia1Large
        case mlEia1Medium
        case mlEia1Xlarge
        case mlEia2Large
        case mlEia2Medium
        case mlEia2Xlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [ProductionVariantAcceleratorType] {
            return [
                .mlEia1Large,
                .mlEia1Medium,
                .mlEia1Xlarge,
                .mlEia2Large,
                .mlEia2Medium,
                .mlEia2Xlarge
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mlEia1Large: return "ml.eia1.large"
            case .mlEia1Medium: return "ml.eia1.medium"
            case .mlEia1Xlarge: return "ml.eia1.xlarge"
            case .mlEia2Large: return "ml.eia2.large"
            case .mlEia2Medium: return "ml.eia2.medium"
            case .mlEia2Xlarge: return "ml.eia2.xlarge"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies configuration for a core dump from the model container when the process crashes.
    public struct ProductionVariantCoreDumpConfig {
        /// The Amazon S3 bucket to send the core dump to.
        /// This member is required.
        public var destinationS3Uri: Swift.String?
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that SageMaker uses to encrypt the core dump data at rest using Amazon S3 server-side encryption. The KmsKeyId can be any of the following formats:
        ///
        /// * // KMS Key ID "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * // Amazon Resource Name (ARN) of a KMS Key "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * // KMS Key Alias "alias/ExampleAlias"
        ///
        /// * // Amazon Resource Name (ARN) of a KMS Key Alias "arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"
        ///
        ///
        /// If you use a KMS key ID or an alias of your KMS key, the SageMaker execution role must include permissions to call kms:Encrypt. If you don't provide a KMS key ID, SageMaker uses the default KMS key for Amazon S3 for your role's account. SageMaker uses server-side encryption with KMS-managed keys for OutputDataConfig. If you use a bucket policy with an s3:PutObject permission that only allows objects with server-side encryption, set the condition key of s3:x-amz-server-side-encryption to "aws:kms". For more information, see [KMS-Managed Encryption Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html) in the Amazon Simple Storage Service Developer Guide. The KMS key policy must grant permission to the IAM role that you specify in your CreateEndpoint and UpdateEndpoint requests. For more information, see [Using Key Policies in Amazon Web Services KMS](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html) in the Amazon Web Services Key Management Service Developer Guide.
        public var kmsKeyId: Swift.String?

        public init(
            destinationS3Uri: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil
        )
        {
            self.destinationS3Uri = destinationS3Uri
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension SageMakerClientTypes {

    public enum ProductionVariantInferenceAmiVersion: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case al2Gpu2
        case sdkUnknown(Swift.String)

        public static var allCases: [ProductionVariantInferenceAmiVersion] {
            return [
                .al2Gpu2
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .al2Gpu2: return "al2-ami-sagemaker-inference-gpu-2"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum ManagedInstanceScalingStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ManagedInstanceScalingStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Settings that control the range in the number of instances that the endpoint provisions as it scales up or down to accommodate traffic.
    public struct ProductionVariantManagedInstanceScaling {
        /// The maximum number of instances that the endpoint can provision when it scales up to accommodate an increase in traffic.
        public var maxInstanceCount: Swift.Int?
        /// The minimum number of instances that the endpoint must retain when it scales down to accommodate a decrease in traffic.
        public var minInstanceCount: Swift.Int?
        /// Indicates whether managed instance scaling is enabled.
        public var status: SageMakerClientTypes.ManagedInstanceScalingStatus?

        public init(
            maxInstanceCount: Swift.Int? = nil,
            minInstanceCount: Swift.Int? = nil,
            status: SageMakerClientTypes.ManagedInstanceScalingStatus? = nil
        )
        {
            self.maxInstanceCount = maxInstanceCount
            self.minInstanceCount = minInstanceCount
            self.status = status
        }
    }

}

extension SageMakerClientTypes {

    public enum RoutingStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case leastOutstandingRequests
        case random
        case sdkUnknown(Swift.String)

        public static var allCases: [RoutingStrategy] {
            return [
                .leastOutstandingRequests,
                .random
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .leastOutstandingRequests: return "LEAST_OUTSTANDING_REQUESTS"
            case .random: return "RANDOM"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Settings that control how the endpoint routes incoming traffic to the instances that the endpoint hosts.
    public struct ProductionVariantRoutingConfig {
        /// Sets how the endpoint routes incoming traffic:
        ///
        /// * LEAST_OUTSTANDING_REQUESTS: The endpoint routes requests to the specific instances that have more capacity to process them.
        ///
        /// * RANDOM: The endpoint routes each request to a randomly chosen instance.
        /// This member is required.
        public var routingStrategy: SageMakerClientTypes.RoutingStrategy?

        public init(
            routingStrategy: SageMakerClientTypes.RoutingStrategy? = nil
        )
        {
            self.routingStrategy = routingStrategy
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies the serverless configuration for an endpoint variant.
    public struct ProductionVariantServerlessConfig {
        /// The maximum number of concurrent invocations your serverless endpoint can process.
        /// This member is required.
        public var maxConcurrency: Swift.Int?
        /// The memory size of your serverless endpoint. Valid values are in 1 GB increments: 1024 MB, 2048 MB, 3072 MB, 4096 MB, 5120 MB, or 6144 MB.
        /// This member is required.
        public var memorySizeInMB: Swift.Int?
        /// The amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to MaxConcurrency. This field is not supported for serverless endpoint recommendations for Inference Recommender jobs. For more information about creating an Inference Recommender job, see [CreateInferenceRecommendationsJobs](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html).
        public var provisionedConcurrency: Swift.Int?

        public init(
            maxConcurrency: Swift.Int? = nil,
            memorySizeInMB: Swift.Int? = nil,
            provisionedConcurrency: Swift.Int? = nil
        )
        {
            self.maxConcurrency = maxConcurrency
            self.memorySizeInMB = memorySizeInMB
            self.provisionedConcurrency = provisionedConcurrency
        }
    }

}

extension SageMakerClientTypes {
    /// Identifies a model that you want to host and the resources chosen to deploy for hosting it. If you are deploying multiple models, tell SageMaker how to distribute traffic among the models by specifying variant weights. For more information on production variants, check [ Production variants](https://docs.aws.amazon.com/sagemaker/latest/dg/model-ab-testing.html).
    public struct ProductionVariant {
        /// The size of the Elastic Inference (EI) instance to use for the production variant. EI instances provide on-demand GPU computing for inference. For more information, see [Using Elastic Inference in Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html).
        public var acceleratorType: SageMakerClientTypes.ProductionVariantAcceleratorType?
        /// The timeout value, in seconds, for your inference container to pass health check by SageMaker Hosting. For more information about health check, see [How Your Container Should Respond to Health Check (Ping) Requests](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-inference-code.html#your-algorithms-inference-algo-ping-requests).
        public var containerStartupHealthCheckTimeoutInSeconds: Swift.Int?
        /// Specifies configuration for a core dump from the model container when the process crashes.
        public var coreDumpConfig: SageMakerClientTypes.ProductionVariantCoreDumpConfig?
        /// You can use this parameter to turn on native Amazon Web Services Systems Manager (SSM) access for a production variant behind an endpoint. By default, SSM access is disabled for all production variants behind an endpoint. You can turn on or turn off SSM access for a production variant behind an existing endpoint by creating a new endpoint configuration and calling UpdateEndpoint.
        public var enableSSMAccess: Swift.Bool?
        /// Specifies an option from a collection of preconfigured Amazon Machine Image (AMI) images. Each image is configured by Amazon Web Services with a set of software and driver versions. Amazon Web Services optimizes these configurations for different machine learning workloads. By selecting an AMI version, you can ensure that your inference environment is compatible with specific software requirements, such as CUDA driver versions, Linux kernel versions, or Amazon Web Services Neuron driver versions. The AMI version names, and their configurations, are the following: al2-ami-sagemaker-inference-gpu-2
        ///
        /// * Accelerator: GPU
        ///
        /// * NVIDIA driver version: 535.54.03
        ///
        /// * CUDA driver version: 12.2
        ///
        /// * Supported instance types: ml.g4dn.*, ml.g5.*, ml.g6.*, ml.p3.*, ml.p4d.*, ml.p4de.*, ml.p5.*
        public var inferenceAmiVersion: SageMakerClientTypes.ProductionVariantInferenceAmiVersion?
        /// Number of instances to launch initially.
        public var initialInstanceCount: Swift.Int?
        /// Determines initial traffic distribution among all of the models that you specify in the endpoint configuration. The traffic to a production variant is determined by the ratio of the VariantWeight to the sum of all VariantWeight values across all ProductionVariants. If unspecified, it defaults to 1.0.
        public var initialVariantWeight: Swift.Float?
        /// The ML compute instance type.
        public var instanceType: SageMakerClientTypes.ProductionVariantInstanceType?
        /// Settings that control the range in the number of instances that the endpoint provisions as it scales up or down to accommodate traffic.
        public var managedInstanceScaling: SageMakerClientTypes.ProductionVariantManagedInstanceScaling?
        /// The timeout value, in seconds, to download and extract the model that you want to host from Amazon S3 to the individual inference instance associated with this production variant.
        public var modelDataDownloadTimeoutInSeconds: Swift.Int?
        /// The name of the model that you want to host. This is the name that you specified when creating the model.
        public var modelName: Swift.String?
        /// Settings that control how the endpoint routes incoming traffic to the instances that the endpoint hosts.
        public var routingConfig: SageMakerClientTypes.ProductionVariantRoutingConfig?
        /// The serverless configuration for an endpoint. Specifies a serverless endpoint configuration instead of an instance-based endpoint configuration.
        public var serverlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig?
        /// The name of the production variant.
        /// This member is required.
        public var variantName: Swift.String?
        /// The size, in GB, of the ML storage volume attached to individual inference instance associated with the production variant. Currently only Amazon EBS gp2 storage volumes are supported.
        public var volumeSizeInGB: Swift.Int?

        public init(
            acceleratorType: SageMakerClientTypes.ProductionVariantAcceleratorType? = nil,
            containerStartupHealthCheckTimeoutInSeconds: Swift.Int? = nil,
            coreDumpConfig: SageMakerClientTypes.ProductionVariantCoreDumpConfig? = nil,
            enableSSMAccess: Swift.Bool? = nil,
            inferenceAmiVersion: SageMakerClientTypes.ProductionVariantInferenceAmiVersion? = nil,
            initialInstanceCount: Swift.Int? = nil,
            initialVariantWeight: Swift.Float? = nil,
            instanceType: SageMakerClientTypes.ProductionVariantInstanceType? = nil,
            managedInstanceScaling: SageMakerClientTypes.ProductionVariantManagedInstanceScaling? = nil,
            modelDataDownloadTimeoutInSeconds: Swift.Int? = nil,
            modelName: Swift.String? = nil,
            routingConfig: SageMakerClientTypes.ProductionVariantRoutingConfig? = nil,
            serverlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig? = nil,
            variantName: Swift.String? = nil,
            volumeSizeInGB: Swift.Int? = nil
        )
        {
            self.acceleratorType = acceleratorType
            self.containerStartupHealthCheckTimeoutInSeconds = containerStartupHealthCheckTimeoutInSeconds
            self.coreDumpConfig = coreDumpConfig
            self.enableSSMAccess = enableSSMAccess
            self.inferenceAmiVersion = inferenceAmiVersion
            self.initialInstanceCount = initialInstanceCount
            self.initialVariantWeight = initialVariantWeight
            self.instanceType = instanceType
            self.managedInstanceScaling = managedInstanceScaling
            self.modelDataDownloadTimeoutInSeconds = modelDataDownloadTimeoutInSeconds
            self.modelName = modelName
            self.routingConfig = routingConfig
            self.serverlessConfig = serverlessConfig
            self.variantName = variantName
            self.volumeSizeInGB = volumeSizeInGB
        }
    }

}

public struct CreateEndpointConfigInput {
    /// Specifies configuration for how an endpoint performs asynchronous inference. This is a required field in order for your Endpoint to be invoked using [InvokeEndpointAsync](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpointAsync.html).
    public var asyncInferenceConfig: SageMakerClientTypes.AsyncInferenceConfig?
    /// Configuration to control how SageMaker captures inference data.
    public var dataCaptureConfig: SageMakerClientTypes.DataCaptureConfig?
    /// Sets whether all model containers deployed to the endpoint are isolated. If they are, no inbound or outbound network calls can be made to or from the model containers.
    public var enableNetworkIsolation: Swift.Bool?
    /// The name of the endpoint configuration. You specify this name in a [CreateEndpoint](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html) request.
    /// This member is required.
    public var endpointConfigName: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform actions on your behalf. For more information, see [SageMaker Roles](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html). To be able to pass this role to Amazon SageMaker, the caller of this action must have the iam:PassRole permission.
    public var executionRoleArn: Swift.String?
    /// A member of CreateEndpointConfig that enables explainers.
    public var explainerConfig: SageMakerClientTypes.ExplainerConfig?
    /// The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint. The KmsKeyId can be any of the following formats:
    ///
    /// * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Key ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
    ///
    /// * Alias name: alias/ExampleAlias
    ///
    /// * Alias name ARN: arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias
    ///
    ///
    /// The KMS key policy must grant permission to the IAM role that you specify in your CreateEndpoint, UpdateEndpoint requests. For more information, refer to the Amazon Web Services Key Management Service section[ Using Key Policies in Amazon Web Services KMS ](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html) Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a KmsKeyId when using an instance type with local storage. If any of the models that you specify in the ProductionVariants parameter use nitro-based instances with local storage, do not specify a value for the KmsKeyId parameter. If you specify a value for KmsKeyId when using any nitro-based instances with local storage, the call to CreateEndpointConfig fails. For a list of instance types that support local instance storage, see [Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes). For more information about local instance storage encryption, see [SSD Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html).
    public var kmsKeyId: Swift.String?
    /// An array of ProductionVariant objects, one for each model that you want to host at this endpoint.
    /// This member is required.
    public var productionVariants: [SageMakerClientTypes.ProductionVariant]?
    /// An array of ProductionVariant objects, one for each model that you want to host at this endpoint in shadow mode with production traffic replicated from the model specified on ProductionVariants. If you use this field, you can only specify one variant for ProductionVariants and one variant for ShadowProductionVariants.
    public var shadowProductionVariants: [SageMakerClientTypes.ProductionVariant]?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?
    /// Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to. You can control access to and from your resources by configuring a VPC. For more information, see [Give SageMaker Access to Resources in your Amazon VPC](https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html).
    public var vpcConfig: SageMakerClientTypes.VpcConfig?

    public init(
        asyncInferenceConfig: SageMakerClientTypes.AsyncInferenceConfig? = nil,
        dataCaptureConfig: SageMakerClientTypes.DataCaptureConfig? = nil,
        enableNetworkIsolation: Swift.Bool? = nil,
        endpointConfigName: Swift.String? = nil,
        executionRoleArn: Swift.String? = nil,
        explainerConfig: SageMakerClientTypes.ExplainerConfig? = nil,
        kmsKeyId: Swift.String? = nil,
        productionVariants: [SageMakerClientTypes.ProductionVariant]? = nil,
        shadowProductionVariants: [SageMakerClientTypes.ProductionVariant]? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        vpcConfig: SageMakerClientTypes.VpcConfig? = nil
    )
    {
        self.asyncInferenceConfig = asyncInferenceConfig
        self.dataCaptureConfig = dataCaptureConfig
        self.enableNetworkIsolation = enableNetworkIsolation
        self.endpointConfigName = endpointConfigName
        self.executionRoleArn = executionRoleArn
        self.explainerConfig = explainerConfig
        self.kmsKeyId = kmsKeyId
        self.productionVariants = productionVariants
        self.shadowProductionVariants = shadowProductionVariants
        self.tags = tags
        self.vpcConfig = vpcConfig
    }
}

public struct CreateEndpointConfigOutput {
    /// The Amazon Resource Name (ARN) of the endpoint configuration.
    /// This member is required.
    public var endpointConfigArn: Swift.String?

    public init(
        endpointConfigArn: Swift.String? = nil
    )
    {
        self.endpointConfigArn = endpointConfigArn
    }
}

public struct CreateExperimentInput {
    /// The description of the experiment.
    public var description: Swift.String?
    /// The name of the experiment as displayed. The name doesn't need to be unique. If you don't specify DisplayName, the value in ExperimentName is displayed.
    public var displayName: Swift.String?
    /// The name of the experiment. The name must be unique in your Amazon Web Services account and is not case-sensitive.
    /// This member is required.
    public var experimentName: Swift.String?
    /// A list of tags to associate with the experiment. You can use [Search](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html) API to search on the tags.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        experimentName: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.displayName = displayName
        self.experimentName = experimentName
        self.tags = tags
    }
}

public struct CreateExperimentOutput {
    /// The Amazon Resource Name (ARN) of the experiment.
    public var experimentArn: Swift.String?

    public init(
        experimentArn: Swift.String? = nil
    )
    {
        self.experimentArn = experimentArn
    }
}

extension SageMakerClientTypes {

    public enum FeatureType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fractional
        case integral
        case string
        case sdkUnknown(Swift.String)

        public static var allCases: [FeatureType] {
            return [
                .fractional,
                .integral,
                .string
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fractional: return "Fractional"
            case .integral: return "Integral"
            case .string: return "String"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A list of features. You must include FeatureName and FeatureType. Valid feature FeatureTypes are Integral, Fractional and String.
    public struct FeatureDefinition {
        /// Configuration for your collection.
        public var collectionConfig: SageMakerClientTypes.CollectionConfig?
        /// A grouping of elements where each element within the collection must have the same feature type (String, Integral, or Fractional).
        ///
        /// * List: An ordered collection of elements.
        ///
        /// * Set: An unordered collection of unique elements.
        ///
        /// * Vector: A specialized list that represents a fixed-size array of elements. The vector dimension is determined by you. Must have elements with fractional feature types.
        public var collectionType: SageMakerClientTypes.CollectionType?
        /// The name of a feature. The type must be a string. FeatureName cannot be any of the following: is_deleted, write_time, api_invocation_time. The name:
        ///
        /// * Must start with an alphanumeric character.
        ///
        /// * Can only include alphanumeric characters, underscores, and hyphens. Spaces are not allowed.
        /// This member is required.
        public var featureName: Swift.String?
        /// The value type of a feature. Valid values are Integral, Fractional, or String.
        /// This member is required.
        public var featureType: SageMakerClientTypes.FeatureType?

        public init(
            collectionConfig: SageMakerClientTypes.CollectionConfig? = nil,
            collectionType: SageMakerClientTypes.CollectionType? = nil,
            featureName: Swift.String? = nil,
            featureType: SageMakerClientTypes.FeatureType? = nil
        )
        {
            self.collectionConfig = collectionConfig
            self.collectionType = collectionType
            self.featureName = featureName
            self.featureType = featureType
        }
    }

}

extension SageMakerClientTypes {
    /// The meta data of the Glue table which serves as data catalog for the OfflineStore.
    public struct DataCatalogConfig {
        /// The name of the Glue table catalog.
        /// This member is required.
        public var catalog: Swift.String?
        /// The name of the Glue table database.
        /// This member is required.
        public var database: Swift.String?
        /// The name of the Glue table.
        /// This member is required.
        public var tableName: Swift.String?

        public init(
            catalog: Swift.String? = nil,
            database: Swift.String? = nil,
            tableName: Swift.String? = nil
        )
        {
            self.catalog = catalog
            self.database = database
            self.tableName = tableName
        }
    }

}

extension SageMakerClientTypes {
    /// The Amazon Simple Storage (Amazon S3) location and security configuration for OfflineStore.
    public struct S3StorageConfig {
        /// The Amazon Web Services Key Management Service (KMS) key ARN of the key used to encrypt any objects written into the OfflineStore S3 location. The IAM roleARN that is passed as a parameter to CreateFeatureGroup must have below permissions to the KmsKeyId:
        ///
        /// * "kms:GenerateDataKey"
        public var kmsKeyId: Swift.String?
        /// The S3 path where offline records are written.
        public var resolvedOutputS3Uri: Swift.String?
        /// The S3 URI, or location in Amazon S3, of OfflineStore. S3 URIs have a format similar to the following: s3://example-bucket/prefix/.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil,
            resolvedOutputS3Uri: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.resolvedOutputS3Uri = resolvedOutputS3Uri
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {

    public enum TableFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `default`
        case glue
        case iceberg
        case sdkUnknown(Swift.String)

        public static var allCases: [TableFormat] {
            return [
                .default,
                .glue,
                .iceberg
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .default: return "Default"
            case .glue: return "Glue"
            case .iceberg: return "Iceberg"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The configuration of an OfflineStore. Provide an OfflineStoreConfig in a request to CreateFeatureGroup to create an OfflineStore. To encrypt an OfflineStore using at rest data encryption, specify Amazon Web Services Key Management Service (KMS) key ID, or KMSKeyId, in S3StorageConfig.
    public struct OfflineStoreConfig {
        /// The meta data of the Glue table that is autogenerated when an OfflineStore is created.
        public var dataCatalogConfig: SageMakerClientTypes.DataCatalogConfig?
        /// Set to True to disable the automatic creation of an Amazon Web Services Glue table when configuring an OfflineStore. If set to False, Feature Store will name the OfflineStore Glue table following [Athena's naming recommendations](https://docs.aws.amazon.com/athena/latest/ug/tables-databases-columns-names.html). The default value is False.
        public var disableGlueTableCreation: Swift.Bool?
        /// The Amazon Simple Storage (Amazon S3) location of OfflineStore.
        /// This member is required.
        public var s3StorageConfig: SageMakerClientTypes.S3StorageConfig?
        /// Format for the offline store table. Supported formats are Glue (Default) and [Apache Iceberg](https://iceberg.apache.org/).
        public var tableFormat: SageMakerClientTypes.TableFormat?

        public init(
            dataCatalogConfig: SageMakerClientTypes.DataCatalogConfig? = nil,
            disableGlueTableCreation: Swift.Bool? = nil,
            s3StorageConfig: SageMakerClientTypes.S3StorageConfig? = nil,
            tableFormat: SageMakerClientTypes.TableFormat? = nil
        )
        {
            self.dataCatalogConfig = dataCatalogConfig
            self.disableGlueTableCreation = disableGlueTableCreation
            self.s3StorageConfig = s3StorageConfig
            self.tableFormat = tableFormat
        }
    }

}

extension SageMakerClientTypes {
    /// The security configuration for OnlineStore.
    public struct OnlineStoreSecurityConfig {
        /// The Amazon Web Services Key Management Service (KMS) key ARN that SageMaker Feature Store uses to encrypt the Amazon S3 objects at rest using Amazon S3 server-side encryption. The caller (either user or IAM role) of CreateFeatureGroup must have below permissions to the OnlineStoreKmsKeyId:
        ///
        /// * "kms:Encrypt"
        ///
        /// * "kms:Decrypt"
        ///
        /// * "kms:DescribeKey"
        ///
        /// * "kms:CreateGrant"
        ///
        /// * "kms:RetireGrant"
        ///
        /// * "kms:ReEncryptFrom"
        ///
        /// * "kms:ReEncryptTo"
        ///
        /// * "kms:GenerateDataKey"
        ///
        /// * "kms:ListAliases"
        ///
        /// * "kms:ListGrants"
        ///
        /// * "kms:RevokeGrant"
        ///
        ///
        /// The caller (either user or IAM role) to all DataPlane operations (PutRecord, GetRecord, DeleteRecord) must have the following permissions to the KmsKeyId:
        ///
        /// * "kms:Decrypt"
        public var kmsKeyId: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension SageMakerClientTypes {

    public enum StorageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case inMemory
        case standard
        case sdkUnknown(Swift.String)

        public static var allCases: [StorageType] {
            return [
                .inMemory,
                .standard
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .inMemory: return "InMemory"
            case .standard: return "Standard"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum TtlDurationUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case days
        case hours
        case minutes
        case seconds
        case weeks
        case sdkUnknown(Swift.String)

        public static var allCases: [TtlDurationUnit] {
            return [
                .days,
                .hours,
                .minutes,
                .seconds,
                .weeks
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .days: return "Days"
            case .hours: return "Hours"
            case .minutes: return "Minutes"
            case .seconds: return "Seconds"
            case .weeks: return "Weeks"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Time to live duration, where the record is hard deleted after the expiration time is reached; ExpiresAt = EventTime + TtlDuration. For information on HardDelete, see the [DeleteRecord](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_DeleteRecord.html) API in the Amazon SageMaker API Reference guide.
    public struct TtlDuration {
        /// TtlDuration time unit.
        public var unit: SageMakerClientTypes.TtlDurationUnit?
        /// TtlDuration time value.
        public var value: Swift.Int?

        public init(
            unit: SageMakerClientTypes.TtlDurationUnit? = nil,
            value: Swift.Int? = nil
        )
        {
            self.unit = unit
            self.value = value
        }
    }

}

extension SageMakerClientTypes {
    /// Use this to specify the Amazon Web Services Key Management Service (KMS) Key ID, or KMSKeyId, for at rest data encryption. You can turn OnlineStore on or off by specifying the EnableOnlineStore flag at General Assembly. The default value is False.
    public struct OnlineStoreConfig {
        /// Turn OnlineStore off by specifying False for the EnableOnlineStore flag. Turn OnlineStore on by specifying True for the EnableOnlineStore flag. The default value is False.
        public var enableOnlineStore: Swift.Bool?
        /// Use to specify KMS Key ID (KMSKeyId) for at-rest encryption of your OnlineStore.
        public var securityConfig: SageMakerClientTypes.OnlineStoreSecurityConfig?
        /// Option for different tiers of low latency storage for real-time data retrieval.
        ///
        /// * Standard: A managed low latency data store for feature groups.
        ///
        /// * InMemory: A managed data store for feature groups that supports very low latency retrieval.
        public var storageType: SageMakerClientTypes.StorageType?
        /// Time to live duration, where the record is hard deleted after the expiration time is reached; ExpiresAt = EventTime + TtlDuration. For information on HardDelete, see the [DeleteRecord](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_DeleteRecord.html) API in the Amazon SageMaker API Reference guide.
        public var ttlDuration: SageMakerClientTypes.TtlDuration?

        public init(
            enableOnlineStore: Swift.Bool? = nil,
            securityConfig: SageMakerClientTypes.OnlineStoreSecurityConfig? = nil,
            storageType: SageMakerClientTypes.StorageType? = nil,
            ttlDuration: SageMakerClientTypes.TtlDuration? = nil
        )
        {
            self.enableOnlineStore = enableOnlineStore
            self.securityConfig = securityConfig
            self.storageType = storageType
            self.ttlDuration = ttlDuration
        }
    }

}

extension SageMakerClientTypes {

    public enum ThroughputMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case onDemand
        case provisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [ThroughputMode] {
            return [
                .onDemand,
                .provisioned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .onDemand: return "OnDemand"
            case .provisioned: return "Provisioned"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Used to set feature group throughput configuration. There are two modes: ON_DEMAND and PROVISIONED. With on-demand mode, you are charged for data reads and writes that your application performs on your feature group. You do not need to specify read and write throughput because Feature Store accommodates your workloads as they ramp up and down. You can switch a feature group to on-demand only once in a 24 hour period. With provisioned throughput mode, you specify the read and write capacity per second that you expect your application to require, and you are billed based on those limits. Exceeding provisioned throughput will result in your requests being throttled. Note: PROVISIONED throughput mode is supported only for feature groups that are offline-only, or use the [Standard](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OnlineStoreConfig.html#sagemaker-Type-OnlineStoreConfig-StorageType) tier online store.
    public struct ThroughputConfig {
        /// For provisioned feature groups with online store enabled, this indicates the read throughput you are billed for and can consume without throttling. This field is not applicable for on-demand feature groups.
        public var provisionedReadCapacityUnits: Swift.Int?
        /// For provisioned feature groups, this indicates the write throughput you are billed for and can consume without throttling. This field is not applicable for on-demand feature groups.
        public var provisionedWriteCapacityUnits: Swift.Int?
        /// The mode used for your feature group throughput: ON_DEMAND or PROVISIONED.
        /// This member is required.
        public var throughputMode: SageMakerClientTypes.ThroughputMode?

        public init(
            provisionedReadCapacityUnits: Swift.Int? = nil,
            provisionedWriteCapacityUnits: Swift.Int? = nil,
            throughputMode: SageMakerClientTypes.ThroughputMode? = nil
        )
        {
            self.provisionedReadCapacityUnits = provisionedReadCapacityUnits
            self.provisionedWriteCapacityUnits = provisionedWriteCapacityUnits
            self.throughputMode = throughputMode
        }
    }

}

public struct CreateFeatureGroupInput {
    /// A free-form description of a FeatureGroup.
    public var description: Swift.String?
    /// The name of the feature that stores the EventTime of a Record in a FeatureGroup. An EventTime is a point in time when a new event occurs that corresponds to the creation or update of a Record in a FeatureGroup. All Records in the FeatureGroup must have a corresponding EventTime. An EventTime can be a String or Fractional.
    ///
    /// * Fractional: EventTime feature values must be a Unix timestamp in seconds.
    ///
    /// * String: EventTime feature values must be an ISO-8601 string in the format. The following formats are supported yyyy-MM-dd'T'HH:mm:ssZ and yyyy-MM-dd'T'HH:mm:ss.SSSZ where yyyy, MM, and dd represent the year, month, and day respectively and HH, mm, ss, and if applicable, SSS represent the hour, month, second and milliseconds respsectively. 'T' and Z are constants.
    /// This member is required.
    public var eventTimeFeatureName: Swift.String?
    /// A list of Feature names and types. Name and Type is compulsory per Feature. Valid feature FeatureTypes are Integral, Fractional and String. FeatureNames cannot be any of the following: is_deleted, write_time, api_invocation_time You can create up to 2,500 FeatureDefinitions per FeatureGroup.
    /// This member is required.
    public var featureDefinitions: [SageMakerClientTypes.FeatureDefinition]?
    /// The name of the FeatureGroup. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account. The name:
    ///
    /// * Must start with an alphanumeric character.
    ///
    /// * Can only include alphanumeric characters, underscores, and hyphens. Spaces are not allowed.
    /// This member is required.
    public var featureGroupName: Swift.String?
    /// Use this to configure an OfflineFeatureStore. This parameter allows you to specify:
    ///
    /// * The Amazon Simple Storage Service (Amazon S3) location of an OfflineStore.
    ///
    /// * A configuration for an Amazon Web Services Glue or Amazon Web Services Hive data catalog.
    ///
    /// * An KMS encryption key to encrypt the Amazon S3 location used for OfflineStore. If KMS encryption key is not specified, by default we encrypt all data at rest using Amazon Web Services KMS key. By defining your [bucket-level key](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucket-key.html) for SSE, you can reduce Amazon Web Services KMS requests costs by up to 99 percent.
    ///
    /// * Format for the offline store table. Supported formats are Glue (Default) and [Apache Iceberg](https://iceberg.apache.org/).
    ///
    ///
    /// To learn more about this parameter, see [OfflineStoreConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OfflineStoreConfig.html).
    public var offlineStoreConfig: SageMakerClientTypes.OfflineStoreConfig?
    /// You can turn the OnlineStore on or off by specifying True for the EnableOnlineStore flag in OnlineStoreConfig. You can also include an Amazon Web Services KMS key ID (KMSKeyId) for at-rest encryption of the OnlineStore. The default value is False.
    public var onlineStoreConfig: SageMakerClientTypes.OnlineStoreConfig?
    /// The name of the Feature whose value uniquely identifies a Record defined in the FeatureStore. Only the latest record per identifier value will be stored in the OnlineStore. RecordIdentifierFeatureName must be one of feature definitions' names. You use the RecordIdentifierFeatureName to access data in a FeatureStore. This name:
    ///
    /// * Must start with an alphanumeric character.
    ///
    /// * Can only contains alphanumeric characters, hyphens, underscores. Spaces are not allowed.
    /// This member is required.
    public var recordIdentifierFeatureName: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the OfflineStore if an OfflineStoreConfig is provided.
    public var roleArn: Swift.String?
    /// Tags used to identify Features in each FeatureGroup.
    public var tags: [SageMakerClientTypes.Tag]?
    /// Used to set feature group throughput configuration. There are two modes: ON_DEMAND and PROVISIONED. With on-demand mode, you are charged for data reads and writes that your application performs on your feature group. You do not need to specify read and write throughput because Feature Store accommodates your workloads as they ramp up and down. You can switch a feature group to on-demand only once in a 24 hour period. With provisioned throughput mode, you specify the read and write capacity per second that you expect your application to require, and you are billed based on those limits. Exceeding provisioned throughput will result in your requests being throttled. Note: PROVISIONED throughput mode is supported only for feature groups that are offline-only, or use the [Standard](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OnlineStoreConfig.html#sagemaker-Type-OnlineStoreConfig-StorageType) tier online store.
    public var throughputConfig: SageMakerClientTypes.ThroughputConfig?

    public init(
        description: Swift.String? = nil,
        eventTimeFeatureName: Swift.String? = nil,
        featureDefinitions: [SageMakerClientTypes.FeatureDefinition]? = nil,
        featureGroupName: Swift.String? = nil,
        offlineStoreConfig: SageMakerClientTypes.OfflineStoreConfig? = nil,
        onlineStoreConfig: SageMakerClientTypes.OnlineStoreConfig? = nil,
        recordIdentifierFeatureName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        throughputConfig: SageMakerClientTypes.ThroughputConfig? = nil
    )
    {
        self.description = description
        self.eventTimeFeatureName = eventTimeFeatureName
        self.featureDefinitions = featureDefinitions
        self.featureGroupName = featureGroupName
        self.offlineStoreConfig = offlineStoreConfig
        self.onlineStoreConfig = onlineStoreConfig
        self.recordIdentifierFeatureName = recordIdentifierFeatureName
        self.roleArn = roleArn
        self.tags = tags
        self.throughputConfig = throughputConfig
    }
}

public struct CreateFeatureGroupOutput {
    /// The Amazon Resource Name (ARN) of the FeatureGroup. This is a unique identifier for the feature group.
    /// This member is required.
    public var featureGroupArn: Swift.String?

    public init(
        featureGroupArn: Swift.String? = nil
    )
    {
        self.featureGroupArn = featureGroupArn
    }
}

extension SageMakerClientTypes {
    /// Defines under what conditions SageMaker creates a human loop. Used within [CreateFlowDefinition](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateFlowDefinition.html). See [HumanLoopActivationConditionsConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HumanLoopActivationConditionsConfig.html) for the required format of activation conditions.
    public struct HumanLoopActivationConditionsConfig {
        /// JSON expressing use-case specific conditions declaratively. If any condition is matched, atomic tasks are created against the configured work team. The set of conditions is different for Rekognition and Textract. For more information about how to structure the JSON, see [JSON Schema for Human Loop Activation Conditions in Amazon Augmented AI](https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-human-fallback-conditions-json-schema.html) in the Amazon SageMaker Developer Guide.
        /// This member is required.
        public var humanLoopActivationConditions: Swift.String?

        public init(
            humanLoopActivationConditions: Swift.String? = nil
        )
        {
            self.humanLoopActivationConditions = humanLoopActivationConditions
        }
    }

}

extension SageMakerClientTypes {
    /// Provides information about how and under what conditions SageMaker creates a human loop. If HumanLoopActivationConfig is not given, then all requests go to humans.
    public struct HumanLoopActivationConfig {
        /// Container structure for defining under what conditions SageMaker creates a human loop.
        /// This member is required.
        public var humanLoopActivationConditionsConfig: SageMakerClientTypes.HumanLoopActivationConditionsConfig?

        public init(
            humanLoopActivationConditionsConfig: SageMakerClientTypes.HumanLoopActivationConditionsConfig? = nil
        )
        {
            self.humanLoopActivationConditionsConfig = humanLoopActivationConditionsConfig
        }
    }

}

extension SageMakerClientTypes {
    /// Represents an amount of money in United States dollars.
    public struct USD {
        /// The fractional portion, in cents, of the amount.
        public var cents: Swift.Int?
        /// The whole number of dollars in the amount.
        public var dollars: Swift.Int?
        /// Fractions of a cent, in tenths.
        public var tenthFractionsOfACent: Swift.Int?

        public init(
            cents: Swift.Int? = nil,
            dollars: Swift.Int? = nil,
            tenthFractionsOfACent: Swift.Int? = nil
        )
        {
            self.cents = cents
            self.dollars = dollars
            self.tenthFractionsOfACent = tenthFractionsOfACent
        }
    }

}

extension SageMakerClientTypes {
    /// Defines the amount of money paid to an Amazon Mechanical Turk worker for each task performed. Use one of the following prices for bounding box tasks. Prices are in US dollars and should be based on the complexity of the task; the longer it takes in your initial testing, the more you should offer.
    ///
    /// * 0.036
    ///
    /// * 0.048
    ///
    /// * 0.060
    ///
    /// * 0.072
    ///
    /// * 0.120
    ///
    /// * 0.240
    ///
    /// * 0.360
    ///
    /// * 0.480
    ///
    /// * 0.600
    ///
    /// * 0.720
    ///
    /// * 0.840
    ///
    /// * 0.960
    ///
    /// * 1.080
    ///
    /// * 1.200
    ///
    ///
    /// Use one of the following prices for image classification, text classification, and custom tasks. Prices are in US dollars.
    ///
    /// * 0.012
    ///
    /// * 0.024
    ///
    /// * 0.036
    ///
    /// * 0.048
    ///
    /// * 0.060
    ///
    /// * 0.072
    ///
    /// * 0.120
    ///
    /// * 0.240
    ///
    /// * 0.360
    ///
    /// * 0.480
    ///
    /// * 0.600
    ///
    /// * 0.720
    ///
    /// * 0.840
    ///
    /// * 0.960
    ///
    /// * 1.080
    ///
    /// * 1.200
    ///
    ///
    /// Use one of the following prices for semantic segmentation tasks. Prices are in US dollars.
    ///
    /// * 0.840
    ///
    /// * 0.960
    ///
    /// * 1.080
    ///
    /// * 1.200
    ///
    ///
    /// Use one of the following prices for Textract AnalyzeDocument Important Form Key Amazon Augmented AI review tasks. Prices are in US dollars.
    ///
    /// * 2.400
    ///
    /// * 2.280
    ///
    /// * 2.160
    ///
    /// * 2.040
    ///
    /// * 1.920
    ///
    /// * 1.800
    ///
    /// * 1.680
    ///
    /// * 1.560
    ///
    /// * 1.440
    ///
    /// * 1.320
    ///
    /// * 1.200
    ///
    /// * 1.080
    ///
    /// * 0.960
    ///
    /// * 0.840
    ///
    /// * 0.720
    ///
    /// * 0.600
    ///
    /// * 0.480
    ///
    /// * 0.360
    ///
    /// * 0.240
    ///
    /// * 0.120
    ///
    /// * 0.072
    ///
    /// * 0.060
    ///
    /// * 0.048
    ///
    /// * 0.036
    ///
    /// * 0.024
    ///
    /// * 0.012
    ///
    ///
    /// Use one of the following prices for Rekognition DetectModerationLabels Amazon Augmented AI review tasks. Prices are in US dollars.
    ///
    /// * 1.200
    ///
    /// * 1.080
    ///
    /// * 0.960
    ///
    /// * 0.840
    ///
    /// * 0.720
    ///
    /// * 0.600
    ///
    /// * 0.480
    ///
    /// * 0.360
    ///
    /// * 0.240
    ///
    /// * 0.120
    ///
    /// * 0.072
    ///
    /// * 0.060
    ///
    /// * 0.048
    ///
    /// * 0.036
    ///
    /// * 0.024
    ///
    /// * 0.012
    ///
    ///
    /// Use one of the following prices for Amazon Augmented AI custom human review tasks. Prices are in US dollars.
    ///
    /// * 1.200
    ///
    /// * 1.080
    ///
    /// * 0.960
    ///
    /// * 0.840
    ///
    /// * 0.720
    ///
    /// * 0.600
    ///
    /// * 0.480
    ///
    /// * 0.360
    ///
    /// * 0.240
    ///
    /// * 0.120
    ///
    /// * 0.072
    ///
    /// * 0.060
    ///
    /// * 0.048
    ///
    /// * 0.036
    ///
    /// * 0.024
    ///
    /// * 0.012
    public struct PublicWorkforceTaskPrice {
        /// Defines the amount of money paid to an Amazon Mechanical Turk worker in United States dollars.
        public var amountInUsd: SageMakerClientTypes.USD?

        public init(
            amountInUsd: SageMakerClientTypes.USD? = nil
        )
        {
            self.amountInUsd = amountInUsd
        }
    }

}

extension SageMakerClientTypes {
    /// Describes the work to be performed by human workers.
    public struct HumanLoopConfig {
        /// The Amazon Resource Name (ARN) of the human task user interface. You can use standard HTML and Crowd HTML Elements to create a custom worker task template. You use this template to create a human task UI. To learn how to create a custom HTML template, see [Create Custom Worker Task Template](https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-custom-templates.html). To learn how to create a human task UI, which is a worker task template that can be used in a flow definition, see [Create and Delete a Worker Task Templates](https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-worker-template-console.html).
        /// This member is required.
        public var humanTaskUiArn: Swift.String?
        /// Defines the amount of money paid to an Amazon Mechanical Turk worker for each task performed. Use one of the following prices for bounding box tasks. Prices are in US dollars and should be based on the complexity of the task; the longer it takes in your initial testing, the more you should offer.
        ///
        /// * 0.036
        ///
        /// * 0.048
        ///
        /// * 0.060
        ///
        /// * 0.072
        ///
        /// * 0.120
        ///
        /// * 0.240
        ///
        /// * 0.360
        ///
        /// * 0.480
        ///
        /// * 0.600
        ///
        /// * 0.720
        ///
        /// * 0.840
        ///
        /// * 0.960
        ///
        /// * 1.080
        ///
        /// * 1.200
        ///
        ///
        /// Use one of the following prices for image classification, text classification, and custom tasks. Prices are in US dollars.
        ///
        /// * 0.012
        ///
        /// * 0.024
        ///
        /// * 0.036
        ///
        /// * 0.048
        ///
        /// * 0.060
        ///
        /// * 0.072
        ///
        /// * 0.120
        ///
        /// * 0.240
        ///
        /// * 0.360
        ///
        /// * 0.480
        ///
        /// * 0.600
        ///
        /// * 0.720
        ///
        /// * 0.840
        ///
        /// * 0.960
        ///
        /// * 1.080
        ///
        /// * 1.200
        ///
        ///
        /// Use one of the following prices for semantic segmentation tasks. Prices are in US dollars.
        ///
        /// * 0.840
        ///
        /// * 0.960
        ///
        /// * 1.080
        ///
        /// * 1.200
        ///
        ///
        /// Use one of the following prices for Textract AnalyzeDocument Important Form Key Amazon Augmented AI review tasks. Prices are in US dollars.
        ///
        /// * 2.400
        ///
        /// * 2.280
        ///
        /// * 2.160
        ///
        /// * 2.040
        ///
        /// * 1.920
        ///
        /// * 1.800
        ///
        /// * 1.680
        ///
        /// * 1.560
        ///
        /// * 1.440
        ///
        /// * 1.320
        ///
        /// * 1.200
        ///
        /// * 1.080
        ///
        /// * 0.960
        ///
        /// * 0.840
        ///
        /// * 0.720
        ///
        /// * 0.600
        ///
        /// * 0.480
        ///
        /// * 0.360
        ///
        /// * 0.240
        ///
        /// * 0.120
        ///
        /// * 0.072
        ///
        /// * 0.060
        ///
        /// * 0.048
        ///
        /// * 0.036
        ///
        /// * 0.024
        ///
        /// * 0.012
        ///
        ///
        /// Use one of the following prices for Rekognition DetectModerationLabels Amazon Augmented AI review tasks. Prices are in US dollars.
        ///
        /// * 1.200
        ///
        /// * 1.080
        ///
        /// * 0.960
        ///
        /// * 0.840
        ///
        /// * 0.720
        ///
        /// * 0.600
        ///
        /// * 0.480
        ///
        /// * 0.360
        ///
        /// * 0.240
        ///
        /// * 0.120
        ///
        /// * 0.072
        ///
        /// * 0.060
        ///
        /// * 0.048
        ///
        /// * 0.036
        ///
        /// * 0.024
        ///
        /// * 0.012
        ///
        ///
        /// Use one of the following prices for Amazon Augmented AI custom human review tasks. Prices are in US dollars.
        ///
        /// * 1.200
        ///
        /// * 1.080
        ///
        /// * 0.960
        ///
        /// * 0.840
        ///
        /// * 0.720
        ///
        /// * 0.600
        ///
        /// * 0.480
        ///
        /// * 0.360
        ///
        /// * 0.240
        ///
        /// * 0.120
        ///
        /// * 0.072
        ///
        /// * 0.060
        ///
        /// * 0.048
        ///
        /// * 0.036
        ///
        /// * 0.024
        ///
        /// * 0.012
        public var publicWorkforceTaskPrice: SageMakerClientTypes.PublicWorkforceTaskPrice?
        /// The length of time that a task remains available for review by human workers.
        public var taskAvailabilityLifetimeInSeconds: Swift.Int?
        /// The number of distinct workers who will perform the same task on each object. For example, if TaskCount is set to 3 for an image classification labeling job, three workers will classify each input image. Increasing TaskCount can improve label accuracy.
        /// This member is required.
        public var taskCount: Swift.Int?
        /// A description for the human worker task.
        /// This member is required.
        public var taskDescription: Swift.String?
        /// Keywords used to describe the task so that workers can discover the task.
        public var taskKeywords: [Swift.String]?
        /// The amount of time that a worker has to complete a task. The default value is 3,600 seconds (1 hour).
        public var taskTimeLimitInSeconds: Swift.Int?
        /// A title for the human worker task.
        /// This member is required.
        public var taskTitle: Swift.String?
        /// Amazon Resource Name (ARN) of a team of workers. To learn more about the types of workforces and work teams you can create and use with Amazon A2I, see [Create and Manage Workforces](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-management.html).
        /// This member is required.
        public var workteamArn: Swift.String?

        public init(
            humanTaskUiArn: Swift.String? = nil,
            publicWorkforceTaskPrice: SageMakerClientTypes.PublicWorkforceTaskPrice? = nil,
            taskAvailabilityLifetimeInSeconds: Swift.Int? = nil,
            taskCount: Swift.Int? = nil,
            taskDescription: Swift.String? = nil,
            taskKeywords: [Swift.String]? = nil,
            taskTimeLimitInSeconds: Swift.Int? = nil,
            taskTitle: Swift.String? = nil,
            workteamArn: Swift.String? = nil
        )
        {
            self.humanTaskUiArn = humanTaskUiArn
            self.publicWorkforceTaskPrice = publicWorkforceTaskPrice
            self.taskAvailabilityLifetimeInSeconds = taskAvailabilityLifetimeInSeconds
            self.taskCount = taskCount
            self.taskDescription = taskDescription
            self.taskKeywords = taskKeywords
            self.taskTimeLimitInSeconds = taskTimeLimitInSeconds
            self.taskTitle = taskTitle
            self.workteamArn = workteamArn
        }
    }

}

extension SageMakerClientTypes {
    /// Container for configuring the source of human task requests.
    public struct HumanLoopRequestSource {
        /// Specifies whether Amazon Rekognition or Amazon Textract are used as the integration source. The default field settings and JSON parsing rules are different based on the integration source. Valid values:
        /// This member is required.
        public var awsManagedHumanLoopRequestSource: SageMakerClientTypes.AwsManagedHumanLoopRequestSource?

        public init(
            awsManagedHumanLoopRequestSource: SageMakerClientTypes.AwsManagedHumanLoopRequestSource? = nil
        )
        {
            self.awsManagedHumanLoopRequestSource = awsManagedHumanLoopRequestSource
        }
    }

}

extension SageMakerClientTypes {
    /// Contains information about where human output will be stored.
    public struct FlowDefinitionOutputConfig {
        /// The Amazon Key Management Service (KMS) key ID for server-side encryption.
        public var kmsKeyId: Swift.String?
        /// The Amazon S3 path where the object containing human output will be made available. To learn more about the format of Amazon A2I output data, see [Amazon A2I Output Data](https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-output-data.html).
        /// This member is required.
        public var s3OutputPath: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3OutputPath = s3OutputPath
        }
    }

}

public struct CreateFlowDefinitionInput {
    /// The name of your flow definition.
    /// This member is required.
    public var flowDefinitionName: Swift.String?
    /// An object containing information about the events that trigger a human workflow.
    public var humanLoopActivationConfig: SageMakerClientTypes.HumanLoopActivationConfig?
    /// An object containing information about the tasks the human reviewers will perform.
    public var humanLoopConfig: SageMakerClientTypes.HumanLoopConfig?
    /// Container for configuring the source of human task requests. Use to specify if Amazon Rekognition or Amazon Textract is used as an integration source.
    public var humanLoopRequestSource: SageMakerClientTypes.HumanLoopRequestSource?
    /// An object containing information about where the human review results will be uploaded.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.FlowDefinitionOutputConfig?
    /// The Amazon Resource Name (ARN) of the role needed to call other services on your behalf. For example, arn:aws:iam::1234567890:role/service-role/AmazonSageMaker-ExecutionRole-20180111T151298.
    /// This member is required.
    public var roleArn: Swift.String?
    /// An array of key-value pairs that contain metadata to help you categorize and organize a flow definition. Each tag consists of a key and a value, both of which you define.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        flowDefinitionName: Swift.String? = nil,
        humanLoopActivationConfig: SageMakerClientTypes.HumanLoopActivationConfig? = nil,
        humanLoopConfig: SageMakerClientTypes.HumanLoopConfig? = nil,
        humanLoopRequestSource: SageMakerClientTypes.HumanLoopRequestSource? = nil,
        outputConfig: SageMakerClientTypes.FlowDefinitionOutputConfig? = nil,
        roleArn: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.flowDefinitionName = flowDefinitionName
        self.humanLoopActivationConfig = humanLoopActivationConfig
        self.humanLoopConfig = humanLoopConfig
        self.humanLoopRequestSource = humanLoopRequestSource
        self.outputConfig = outputConfig
        self.roleArn = roleArn
        self.tags = tags
    }
}

public struct CreateFlowDefinitionOutput {
    /// The Amazon Resource Name (ARN) of the flow definition you create.
    /// This member is required.
    public var flowDefinitionArn: Swift.String?

    public init(
        flowDefinitionArn: Swift.String? = nil
    )
    {
        self.flowDefinitionArn = flowDefinitionArn
    }
}

extension SageMakerClientTypes {
    /// The Amazon S3 storage configuration of a hub.
    public struct HubS3StorageConfig {
        /// The Amazon S3 bucket prefix for hosting hub content.
        public var s3OutputPath: Swift.String?

        public init(
            s3OutputPath: Swift.String? = nil
        )
        {
            self.s3OutputPath = s3OutputPath
        }
    }

}

public struct CreateHubInput {
    /// A description of the hub.
    /// This member is required.
    public var hubDescription: Swift.String?
    /// The display name of the hub.
    public var hubDisplayName: Swift.String?
    /// The name of the hub to create.
    /// This member is required.
    public var hubName: Swift.String?
    /// The searchable keywords for the hub.
    public var hubSearchKeywords: [Swift.String]?
    /// The Amazon S3 storage configuration for the hub.
    public var s3StorageConfig: SageMakerClientTypes.HubS3StorageConfig?
    /// Any tags to associate with the hub.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        hubDescription: Swift.String? = nil,
        hubDisplayName: Swift.String? = nil,
        hubName: Swift.String? = nil,
        hubSearchKeywords: [Swift.String]? = nil,
        s3StorageConfig: SageMakerClientTypes.HubS3StorageConfig? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.hubDescription = hubDescription
        self.hubDisplayName = hubDisplayName
        self.hubName = hubName
        self.hubSearchKeywords = hubSearchKeywords
        self.s3StorageConfig = s3StorageConfig
        self.tags = tags
    }
}

public struct CreateHubOutput {
    /// The Amazon Resource Name (ARN) of the hub.
    /// This member is required.
    public var hubArn: Swift.String?

    public init(
        hubArn: Swift.String? = nil
    )
    {
        self.hubArn = hubArn
    }
}

public struct CreateHubContentReferenceInput {
    /// The name of the hub content to reference.
    public var hubContentName: Swift.String?
    /// The name of the hub to add the hub content reference to.
    /// This member is required.
    public var hubName: Swift.String?
    /// The minimum version of the hub content to reference.
    public var minVersion: Swift.String?
    /// The ARN of the public hub content to reference.
    /// This member is required.
    public var sageMakerPublicHubContentArn: Swift.String?
    /// Any tags associated with the hub content to reference.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        hubContentName: Swift.String? = nil,
        hubName: Swift.String? = nil,
        minVersion: Swift.String? = nil,
        sageMakerPublicHubContentArn: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.hubContentName = hubContentName
        self.hubName = hubName
        self.minVersion = minVersion
        self.sageMakerPublicHubContentArn = sageMakerPublicHubContentArn
        self.tags = tags
    }
}

public struct CreateHubContentReferenceOutput {
    /// The ARN of the hub that the hub content reference was added to.
    /// This member is required.
    public var hubArn: Swift.String?
    /// The ARN of the hub content.
    /// This member is required.
    public var hubContentArn: Swift.String?

    public init(
        hubArn: Swift.String? = nil,
        hubContentArn: Swift.String? = nil
    )
    {
        self.hubArn = hubArn
        self.hubContentArn = hubContentArn
    }
}

extension SageMakerClientTypes {
    /// The Liquid template for the worker user interface.
    public struct UiTemplate {
        /// The content of the Liquid template for the worker user interface.
        /// This member is required.
        public var content: Swift.String?

        public init(
            content: Swift.String? = nil
        )
        {
            self.content = content
        }
    }

}

public struct CreateHumanTaskUiInput {
    /// The name of the user interface you are creating.
    /// This member is required.
    public var humanTaskUiName: Swift.String?
    /// An array of key-value pairs that contain metadata to help you categorize and organize a human review workflow user interface. Each tag consists of a key and a value, both of which you define.
    public var tags: [SageMakerClientTypes.Tag]?
    /// The Liquid template for the worker user interface.
    /// This member is required.
    public var uiTemplate: SageMakerClientTypes.UiTemplate?

    public init(
        humanTaskUiName: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        uiTemplate: SageMakerClientTypes.UiTemplate? = nil
    )
    {
        self.humanTaskUiName = humanTaskUiName
        self.tags = tags
        self.uiTemplate = uiTemplate
    }
}

public struct CreateHumanTaskUiOutput {
    /// The Amazon Resource Name (ARN) of the human review workflow user interface you create.
    /// This member is required.
    public var humanTaskUiArn: Swift.String?

    public init(
        humanTaskUiArn: Swift.String? = nil
    )
    {
        self.humanTaskUiArn = humanTaskUiArn
    }
}

extension SageMakerClientTypes {
    /// For a hyperparameter of the integer type, specifies the range that a hyperparameter tuning job searches.
    public struct IntegerParameterRange {
        /// The maximum value of the hyperparameter to search.
        /// This member is required.
        public var maxValue: Swift.String?
        /// The minimum value of the hyperparameter to search.
        /// This member is required.
        public var minValue: Swift.String?
        /// The name of the hyperparameter to search.
        /// This member is required.
        public var name: Swift.String?
        /// The scale that hyperparameter tuning uses to search the hyperparameter range. For information about choosing a hyperparameter scale, see [Hyperparameter Scaling](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-ranges.html#scaling-type). One of the following values: Auto SageMaker hyperparameter tuning chooses the best scale for the hyperparameter. Linear Hyperparameter tuning searches the values in the hyperparameter range by using a linear scale. Logarithmic Hyperparameter tuning searches the values in the hyperparameter range by using a logarithmic scale. Logarithmic scaling works only for ranges that have only values greater than 0.
        public var scalingType: SageMakerClientTypes.HyperParameterScalingType?

        public init(
            maxValue: Swift.String? = nil,
            minValue: Swift.String? = nil,
            name: Swift.String? = nil,
            scalingType: SageMakerClientTypes.HyperParameterScalingType? = nil
        )
        {
            self.maxValue = maxValue
            self.minValue = minValue
            self.name = name
            self.scalingType = scalingType
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies ranges of integer, continuous, and categorical hyperparameters that a hyperparameter tuning job searches. The hyperparameter tuning job launches training jobs with hyperparameter values within these ranges to find the combination of values that result in the training job with the best performance as measured by the objective metric of the hyperparameter tuning job. The maximum number of items specified for Array Members refers to the maximum number of hyperparameters for each range and also the maximum for the hyperparameter tuning job itself. That is, the sum of the number of hyperparameters for all the ranges can't exceed the maximum number specified.
    public struct ParameterRanges {
        /// A list containing hyperparameter names and example values to be used by Autotune to determine optimal ranges for your tuning job.
        public var autoParameters: [SageMakerClientTypes.AutoParameter]?
        /// The array of [CategoricalParameterRange](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CategoricalParameterRange.html) objects that specify ranges of categorical hyperparameters that a hyperparameter tuning job searches.
        public var categoricalParameterRanges: [SageMakerClientTypes.CategoricalParameterRange]?
        /// The array of [ContinuousParameterRange](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ContinuousParameterRange.html) objects that specify ranges of continuous hyperparameters that a hyperparameter tuning job searches.
        public var continuousParameterRanges: [SageMakerClientTypes.ContinuousParameterRange]?
        /// The array of [IntegerParameterRange](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_IntegerParameterRange.html) objects that specify ranges of integer hyperparameters that a hyperparameter tuning job searches.
        public var integerParameterRanges: [SageMakerClientTypes.IntegerParameterRange]?

        public init(
            autoParameters: [SageMakerClientTypes.AutoParameter]? = nil,
            categoricalParameterRanges: [SageMakerClientTypes.CategoricalParameterRange]? = nil,
            continuousParameterRanges: [SageMakerClientTypes.ContinuousParameterRange]? = nil,
            integerParameterRanges: [SageMakerClientTypes.IntegerParameterRange]? = nil
        )
        {
            self.autoParameters = autoParameters
            self.categoricalParameterRanges = categoricalParameterRanges
            self.continuousParameterRanges = continuousParameterRanges
            self.integerParameterRanges = integerParameterRanges
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies the maximum number of training jobs and parallel training jobs that a hyperparameter tuning job can launch.
    public struct ResourceLimits {
        /// The maximum number of training jobs that a hyperparameter tuning job can launch.
        public var maxNumberOfTrainingJobs: Swift.Int?
        /// The maximum number of concurrent training jobs that a hyperparameter tuning job can launch.
        /// This member is required.
        public var maxParallelTrainingJobs: Swift.Int?
        /// The maximum time in seconds that a hyperparameter tuning job can run.
        public var maxRuntimeInSeconds: Swift.Int?

        public init(
            maxNumberOfTrainingJobs: Swift.Int? = nil,
            maxParallelTrainingJobs: Swift.Int? = nil,
            maxRuntimeInSeconds: Swift.Int? = nil
        )
        {
            self.maxNumberOfTrainingJobs = maxNumberOfTrainingJobs
            self.maxParallelTrainingJobs = maxParallelTrainingJobs
            self.maxRuntimeInSeconds = maxRuntimeInSeconds
        }
    }

}

extension SageMakerClientTypes {

    /// The strategy hyperparameter tuning uses to find the best combination of hyperparameters for your model.
    public enum HyperParameterTuningJobStrategyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bayesian
        case grid
        case hyperband
        case random
        case sdkUnknown(Swift.String)

        public static var allCases: [HyperParameterTuningJobStrategyType] {
            return [
                .bayesian,
                .grid,
                .hyperband,
                .random
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bayesian: return "Bayesian"
            case .grid: return "Grid"
            case .hyperband: return "Hyperband"
            case .random: return "Random"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The configuration for Hyperband, a multi-fidelity based hyperparameter tuning strategy. Hyperband uses the final and intermediate results of a training job to dynamically allocate resources to utilized hyperparameter configurations while automatically stopping under-performing configurations. This parameter should be provided only if Hyperband is selected as the StrategyConfig under the HyperParameterTuningJobConfig API.
    public struct HyperbandStrategyConfig {
        /// The maximum number of resources (such as epochs) that can be used by a training job launched by a hyperparameter tuning job. Once a job reaches the MaxResource value, it is stopped. If a value for MaxResource is not provided, and Hyperband is selected as the hyperparameter tuning strategy, HyperbandTraining attempts to infer MaxResource from the following keys (if present) in [StaticsHyperParameters](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-StaticHyperParameters):
        ///
        /// * epochs
        ///
        /// * numepochs
        ///
        /// * n-epochs
        ///
        /// * n_epochs
        ///
        /// * num_epochs
        ///
        ///
        /// If HyperbandStrategyConfig is unable to infer a value for MaxResource, it generates a validation error. The maximum value is 20,000 epochs. All metrics that correspond to an objective metric are used to derive [early stopping decisions](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-early-stopping.html). For [distributed](https://docs.aws.amazon.com/sagemaker/latest/dg/distributed-training.html) training jobs, ensure that duplicate metrics are not printed in the logs across the individual nodes in a training job. If multiple nodes are publishing duplicate or incorrect metrics, training jobs may make an incorrect stopping decision and stop the job prematurely.
        public var maxResource: Swift.Int?
        /// The minimum number of resources (such as epochs) that can be used by a training job launched by a hyperparameter tuning job. If the value for MinResource has not been reached, the training job is not stopped by Hyperband.
        public var minResource: Swift.Int?

        public init(
            maxResource: Swift.Int? = nil,
            minResource: Swift.Int? = nil
        )
        {
            self.maxResource = maxResource
            self.minResource = minResource
        }
    }

}

extension SageMakerClientTypes {
    /// The configuration for a training job launched by a hyperparameter tuning job. Choose Bayesian for Bayesian optimization, and Random for random search optimization. For more advanced use cases, use Hyperband, which evaluates objective metrics for training jobs after every epoch. For more information about strategies, see [How Hyperparameter Tuning Works](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html).
    public struct HyperParameterTuningJobStrategyConfig {
        /// The configuration for the object that specifies the Hyperband strategy. This parameter is only supported for the Hyperband selection for Strategy within the HyperParameterTuningJobConfig API.
        public var hyperbandStrategyConfig: SageMakerClientTypes.HyperbandStrategyConfig?

        public init(
            hyperbandStrategyConfig: SageMakerClientTypes.HyperbandStrategyConfig? = nil
        )
        {
            self.hyperbandStrategyConfig = hyperbandStrategyConfig
        }
    }

}

extension SageMakerClientTypes {

    public enum TrainingJobEarlyStoppingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case auto
        case off
        case sdkUnknown(Swift.String)

        public static var allCases: [TrainingJobEarlyStoppingType] {
            return [
                .auto,
                .off
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .auto: return "Auto"
            case .off: return "Off"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The job completion criteria.
    public struct TuningJobCompletionCriteria {
        /// A flag to stop your hyperparameter tuning job if model performance fails to improve as evaluated against an objective function.
        public var bestObjectiveNotImproving: SageMakerClientTypes.BestObjectiveNotImproving?
        /// A flag to top your hyperparameter tuning job if automatic model tuning (AMT) has detected that your model has converged as evaluated against your objective function.
        public var convergenceDetected: SageMakerClientTypes.ConvergenceDetected?
        /// The value of the objective metric.
        public var targetObjectiveMetricValue: Swift.Float?

        public init(
            bestObjectiveNotImproving: SageMakerClientTypes.BestObjectiveNotImproving? = nil,
            convergenceDetected: SageMakerClientTypes.ConvergenceDetected? = nil,
            targetObjectiveMetricValue: Swift.Float? = nil
        )
        {
            self.bestObjectiveNotImproving = bestObjectiveNotImproving
            self.convergenceDetected = convergenceDetected
            self.targetObjectiveMetricValue = targetObjectiveMetricValue
        }
    }

}

extension SageMakerClientTypes {
    /// Configures a hyperparameter tuning job.
    public struct HyperParameterTuningJobConfig {
        /// The [HyperParameterTuningJobObjective](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobObjective.html) specifies the objective metric used to evaluate the performance of training jobs launched by this tuning job.
        public var hyperParameterTuningJobObjective: SageMakerClientTypes.HyperParameterTuningJobObjective?
        /// The [ParameterRanges](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ParameterRanges.html) object that specifies the ranges of hyperparameters that this tuning job searches over to find the optimal configuration for the highest model performance against your chosen objective metric.
        public var parameterRanges: SageMakerClientTypes.ParameterRanges?
        /// A value used to initialize a pseudo-random number generator. Setting a random seed and using the same seed later for the same tuning job will allow hyperparameter optimization to find more a consistent hyperparameter configuration between the two runs.
        public var randomSeed: Swift.Int?
        /// The [ResourceLimits](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ResourceLimits.html) object that specifies the maximum number of training and parallel training jobs that can be used for this hyperparameter tuning job.
        /// This member is required.
        public var resourceLimits: SageMakerClientTypes.ResourceLimits?
        /// Specifies how hyperparameter tuning chooses the combinations of hyperparameter values to use for the training job it launches. For information about search strategies, see [How Hyperparameter Tuning Works](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html).
        /// This member is required.
        public var strategy: SageMakerClientTypes.HyperParameterTuningJobStrategyType?
        /// The configuration for the Hyperband optimization strategy. This parameter should be provided only if Hyperband is selected as the strategy for HyperParameterTuningJobConfig.
        public var strategyConfig: SageMakerClientTypes.HyperParameterTuningJobStrategyConfig?
        /// Specifies whether to use early stopping for training jobs launched by the hyperparameter tuning job. Because the Hyperband strategy has its own advanced internal early stopping mechanism, TrainingJobEarlyStoppingType must be OFF to use Hyperband. This parameter can take on one of the following values (the default value is OFF): OFF Training jobs launched by the hyperparameter tuning job do not use early stopping. AUTO SageMaker stops training jobs launched by the hyperparameter tuning job when they are unlikely to perform better than previously completed training jobs. For more information, see [Stop Training Jobs Early](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-early-stopping.html).
        public var trainingJobEarlyStoppingType: SageMakerClientTypes.TrainingJobEarlyStoppingType?
        /// The tuning job's completion criteria.
        public var tuningJobCompletionCriteria: SageMakerClientTypes.TuningJobCompletionCriteria?

        public init(
            hyperParameterTuningJobObjective: SageMakerClientTypes.HyperParameterTuningJobObjective? = nil,
            parameterRanges: SageMakerClientTypes.ParameterRanges? = nil,
            randomSeed: Swift.Int? = nil,
            resourceLimits: SageMakerClientTypes.ResourceLimits? = nil,
            strategy: SageMakerClientTypes.HyperParameterTuningJobStrategyType? = nil,
            strategyConfig: SageMakerClientTypes.HyperParameterTuningJobStrategyConfig? = nil,
            trainingJobEarlyStoppingType: SageMakerClientTypes.TrainingJobEarlyStoppingType? = nil,
            tuningJobCompletionCriteria: SageMakerClientTypes.TuningJobCompletionCriteria? = nil
        )
        {
            self.hyperParameterTuningJobObjective = hyperParameterTuningJobObjective
            self.parameterRanges = parameterRanges
            self.randomSeed = randomSeed
            self.resourceLimits = resourceLimits
            self.strategy = strategy
            self.strategyConfig = strategyConfig
            self.trainingJobEarlyStoppingType = trainingJobEarlyStoppingType
            self.tuningJobCompletionCriteria = tuningJobCompletionCriteria
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies which training algorithm to use for training jobs that a hyperparameter tuning job launches and the metrics to monitor.
    public struct HyperParameterAlgorithmSpecification {
        /// The name of the resource algorithm to use for the hyperparameter tuning job. If you specify a value for this parameter, do not specify a value for TrainingImage.
        public var algorithmName: Swift.String?
        /// An array of [MetricDefinition](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_MetricDefinition.html) objects that specify the metrics that the algorithm emits.
        public var metricDefinitions: [SageMakerClientTypes.MetricDefinition]?
        /// The registry path of the Docker image that contains the training algorithm. For information about Docker registry paths for built-in algorithms, see [Algorithms Provided by Amazon SageMaker: Common Parameters](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-algo-docker-registry-paths.html). SageMaker supports both registry/repository[:tag] and registry/repository[@digest] image path formats. For more information, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html).
        public var trainingImage: Swift.String?
        /// The training input mode that the algorithm supports. For more information about input modes, see [Algorithms](https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). Pipe mode If an algorithm supports Pipe mode, Amazon SageMaker streams data directly from Amazon S3 to the container. File mode If an algorithm supports File mode, SageMaker downloads the training data from S3 to the provisioned ML storage volume, and mounts the directory to the Docker volume for the training container. You must provision the ML storage volume with sufficient capacity to accommodate the data downloaded from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container uses the ML storage volume to also store intermediate information, if any. For distributed algorithms, training data is distributed uniformly. Your training duration is predictable if the input data objects sizes are approximately the same. SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed when one host in a training cluster is overloaded, thus becoming a bottleneck in training. FastFile mode If an algorithm supports FastFile mode, SageMaker streams data directly from S3 to the container with no code changes, and provides file system access to the data. Users can author their training script to interact with these files as if they were stored on disk. FastFile mode works best when the data is read sequentially. Augmented manifest files aren't supported. The startup time is lower when there are fewer files in the S3 bucket provided.
        /// This member is required.
        public var trainingInputMode: SageMakerClientTypes.TrainingInputMode?

        public init(
            algorithmName: Swift.String? = nil,
            metricDefinitions: [SageMakerClientTypes.MetricDefinition]? = nil,
            trainingImage: Swift.String? = nil,
            trainingInputMode: SageMakerClientTypes.TrainingInputMode? = nil
        )
        {
            self.algorithmName = algorithmName
            self.metricDefinitions = metricDefinitions
            self.trainingImage = trainingImage
            self.trainingInputMode = trainingInputMode
        }
    }

}

extension SageMakerClientTypes {

    public enum HyperParameterTuningAllocationStrategy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case prioritized
        case sdkUnknown(Swift.String)

        public static var allCases: [HyperParameterTuningAllocationStrategy] {
            return [
                .prioritized
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .prioritized: return "Prioritized"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The configuration for hyperparameter tuning resources for use in training jobs launched by the tuning job. These resources include compute instances and storage volumes. Specify one or more compute instance configurations and allocation strategies to select resources (optional).
    public struct HyperParameterTuningInstanceConfig {
        /// The number of instances of the type specified by InstanceType. Choose an instance count larger than 1 for distributed training algorithms. See [Step 2: Launch a SageMaker Distributed Training Job Using the SageMaker Python SDK](https://docs.aws.amazon.com/sagemaker/latest/dg/data-parallel-use-api.html) for more information.
        /// This member is required.
        public var instanceCount: Swift.Int?
        /// The instance type used for processing of hyperparameter optimization jobs. Choose from general purpose (no GPUs) instance types: ml.m5.xlarge, ml.m5.2xlarge, and ml.m5.4xlarge or compute optimized (no GPUs) instance types: ml.c5.xlarge and ml.c5.2xlarge. For more information about instance types, see [instance type descriptions](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html).
        /// This member is required.
        public var instanceType: SageMakerClientTypes.TrainingInstanceType?
        /// The volume size in GB of the data to be processed for hyperparameter optimization (optional).
        /// This member is required.
        public var volumeSizeInGB: Swift.Int?

        public init(
            instanceCount: Swift.Int? = nil,
            instanceType: SageMakerClientTypes.TrainingInstanceType? = nil,
            volumeSizeInGB: Swift.Int? = nil
        )
        {
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.volumeSizeInGB = volumeSizeInGB
        }
    }

}

extension SageMakerClientTypes {
    /// The configuration of resources, including compute instances and storage volumes for use in training jobs launched by hyperparameter tuning jobs. HyperParameterTuningResourceConfig is similar to ResourceConfig, but has the additional InstanceConfigs and AllocationStrategy fields to allow for flexible instance management. Specify one or more instance types, count, and the allocation strategy for instance selection. HyperParameterTuningResourceConfig supports the capabilities of ResourceConfig with the exception of KeepAlivePeriodInSeconds. Hyperparameter tuning jobs use warm pools by default, which reuse clusters between training jobs.
    public struct HyperParameterTuningResourceConfig {
        /// The strategy that determines the order of preference for resources specified in InstanceConfigs used in hyperparameter optimization.
        public var allocationStrategy: SageMakerClientTypes.HyperParameterTuningAllocationStrategy?
        /// A list containing the configuration(s) for one or more resources for processing hyperparameter jobs. These resources include compute instances and storage volumes to use in model training jobs launched by hyperparameter tuning jobs. The AllocationStrategy controls the order in which multiple configurations provided in InstanceConfigs are used. If you only want to use a single instance configuration inside the HyperParameterTuningResourceConfig API, do not provide a value for InstanceConfigs. Instead, use InstanceType, VolumeSizeInGB and InstanceCount. If you use InstanceConfigs, do not provide values for InstanceType, VolumeSizeInGB or InstanceCount.
        public var instanceConfigs: [SageMakerClientTypes.HyperParameterTuningInstanceConfig]?
        /// The number of compute instances of type InstanceType to use. For [distributed training](https://docs.aws.amazon.com/sagemaker/latest/dg/data-parallel-use-api.html), select a value greater than 1.
        public var instanceCount: Swift.Int?
        /// The instance type used to run hyperparameter optimization tuning jobs. See [ descriptions of instance types](https://docs.aws.amazon.com/sagemaker/latest/dg/notebooks-available-instance-types.html) for more information.
        public var instanceType: SageMakerClientTypes.TrainingInstanceType?
        /// A key used by Amazon Web Services Key Management Service to encrypt data on the storage volume attached to the compute instances used to run the training job. You can use either of the following formats to specify a key. KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab" Amazon Resource Name (ARN) of a KMS key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab" Some instances use local storage, which use a [hardware module to encrypt](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html) storage volumes. If you choose one of these instance types, you cannot request a VolumeKmsKeyId. For a list of instance types that use local storage, see [instance store volumes](http://aws.amazon.com/releasenotes/host-instance-storage-volumes-table/). For more information about Amazon Web Services Key Management Service, see [KMS encryption](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-security-kms-permissions.html) for more information.
        public var volumeKmsKeyId: Swift.String?
        /// The volume size in GB for the storage volume to be used in processing hyperparameter optimization jobs (optional). These volumes store model artifacts, incremental states and optionally, scratch space for training algorithms. Do not provide a value for this parameter if a value for InstanceConfigs is also specified. Some instance types have a fixed total local storage size. If you select one of these instances for training, VolumeSizeInGB cannot be greater than this total size. For a list of instance types with local instance storage and their sizes, see [instance store volumes](http://aws.amazon.com/releasenotes/host-instance-storage-volumes-table/). SageMaker supports only the [General Purpose SSD (gp2)](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html) storage volume type.
        public var volumeSizeInGB: Swift.Int?

        public init(
            allocationStrategy: SageMakerClientTypes.HyperParameterTuningAllocationStrategy? = nil,
            instanceConfigs: [SageMakerClientTypes.HyperParameterTuningInstanceConfig]? = nil,
            instanceCount: Swift.Int? = nil,
            instanceType: SageMakerClientTypes.TrainingInstanceType? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            volumeSizeInGB: Swift.Int? = nil
        )
        {
            self.allocationStrategy = allocationStrategy
            self.instanceConfigs = instanceConfigs
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.volumeKmsKeyId = volumeKmsKeyId
            self.volumeSizeInGB = volumeSizeInGB
        }
    }

}

extension SageMakerClientTypes {
    /// The retry strategy to use when a training job fails due to an InternalServerError. RetryStrategy is specified as part of the CreateTrainingJob and CreateHyperParameterTuningJob requests. You can add the StoppingCondition parameter to the request to limit the training time for the complete job.
    public struct RetryStrategy {
        /// The number of times to retry the job. When the job is retried, it's SecondaryStatus is changed to STARTING.
        /// This member is required.
        public var maximumRetryAttempts: Swift.Int?

        public init(
            maximumRetryAttempts: Swift.Int? = nil
        )
        {
            self.maximumRetryAttempts = maximumRetryAttempts
        }
    }

}

extension SageMakerClientTypes {
    /// Defines the training jobs launched by a hyperparameter tuning job.
    public struct HyperParameterTrainingJobDefinition {
        /// The [HyperParameterAlgorithmSpecification](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterAlgorithmSpecification.html) object that specifies the resource algorithm to use for the training jobs that the tuning job launches.
        /// This member is required.
        public var algorithmSpecification: SageMakerClientTypes.HyperParameterAlgorithmSpecification?
        /// Contains information about the output location for managed spot training checkpoint data.
        public var checkpointConfig: SageMakerClientTypes.CheckpointConfig?
        /// The job definition name.
        public var definitionName: Swift.String?
        /// To encrypt all communications between ML compute instances in distributed training, choose True. Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithm in distributed training.
        public var enableInterContainerTrafficEncryption: Swift.Bool?
        /// A Boolean indicating whether managed spot training is enabled (True) or not (False).
        public var enableManagedSpotTraining: Swift.Bool?
        /// Isolates the training container. No inbound or outbound network calls can be made, except for calls between peers within a training cluster for distributed training. If network isolation is used for training jobs that are configured to use a VPC, SageMaker downloads and uploads customer data and model artifacts through the specified VPC, but the training container does not have network access.
        public var enableNetworkIsolation: Swift.Bool?
        /// An environment variable that you can pass into the SageMaker [CreateTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html) API. You can use an existing [environment variable from the training container](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html#sagemaker-CreateTrainingJob-request-Environment) or use your own. See [Define metrics and variables](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics-variables.html) for more information. The maximum number of items specified for Map Entries refers to the maximum number of environment variables for each TrainingJobDefinition and also the maximum for the hyperparameter tuning job itself. That is, the sum of the number of environment variables for all the training job definitions can't exceed the maximum number specified.
        public var environment: [Swift.String: Swift.String]?
        /// Specifies ranges of integer, continuous, and categorical hyperparameters that a hyperparameter tuning job searches. The hyperparameter tuning job launches training jobs with hyperparameter values within these ranges to find the combination of values that result in the training job with the best performance as measured by the objective metric of the hyperparameter tuning job. The maximum number of items specified for Array Members refers to the maximum number of hyperparameters for each range and also the maximum for the hyperparameter tuning job itself. That is, the sum of the number of hyperparameters for all the ranges can't exceed the maximum number specified.
        public var hyperParameterRanges: SageMakerClientTypes.ParameterRanges?
        /// The configuration for the hyperparameter tuning resources, including the compute instances and storage volumes, used for training jobs launched by the tuning job. By default, storage volumes hold model artifacts and incremental states. Choose File for TrainingInputMode in the AlgorithmSpecification parameter to additionally store training data in the storage volume (optional).
        public var hyperParameterTuningResourceConfig: SageMakerClientTypes.HyperParameterTuningResourceConfig?
        /// An array of [Channel](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Channel.html) objects that specify the input for the training jobs that the tuning job launches.
        public var inputDataConfig: [SageMakerClientTypes.Channel]?
        /// Specifies the path to the Amazon S3 bucket where you store model artifacts from the training jobs that the tuning job launches.
        /// This member is required.
        public var outputDataConfig: SageMakerClientTypes.OutputDataConfig?
        /// The resources, including the compute instances and storage volumes, to use for the training jobs that the tuning job launches. Storage volumes store model artifacts and incremental states. Training algorithms might also use storage volumes for scratch space. If you want SageMaker to use the storage volume to store the training data, choose File as the TrainingInputMode in the algorithm specification. For distributed training algorithms, specify an instance count greater than 1. If you want to use hyperparameter optimization with instance type flexibility, use HyperParameterTuningResourceConfig instead.
        public var resourceConfig: SageMakerClientTypes.ResourceConfig?
        /// The number of times to retry the job when the job fails due to an InternalServerError.
        public var retryStrategy: SageMakerClientTypes.RetryStrategy?
        /// The Amazon Resource Name (ARN) of the IAM role associated with the training jobs that the tuning job launches.
        /// This member is required.
        public var roleArn: Swift.String?
        /// Specifies the values of hyperparameters that do not change for the tuning job.
        public var staticHyperParameters: [Swift.String: Swift.String]?
        /// Specifies a limit to how long a model hyperparameter training job can run. It also specifies how long a managed spot training job has to complete. When the job reaches the time limit, SageMaker ends the training job. Use this API to cap model training costs.
        /// This member is required.
        public var stoppingCondition: SageMakerClientTypes.StoppingCondition?
        /// Defines the objective metric for a hyperparameter tuning job. Hyperparameter tuning uses the value of this metric to evaluate the training jobs it launches, and returns the training job that results in either the highest or lowest value for this metric, depending on the value you specify for the Type parameter. If you want to define a custom objective metric, see [Define metrics and environment variables](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics-variables.html).
        public var tuningObjective: SageMakerClientTypes.HyperParameterTuningJobObjective?
        /// The [VpcConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html) object that specifies the VPC that you want the training jobs that this hyperparameter tuning job launches to connect to. Control access to and from your training container by configuring the VPC. For more information, see [Protect Training Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).
        public var vpcConfig: SageMakerClientTypes.VpcConfig?

        public init(
            algorithmSpecification: SageMakerClientTypes.HyperParameterAlgorithmSpecification? = nil,
            checkpointConfig: SageMakerClientTypes.CheckpointConfig? = nil,
            definitionName: Swift.String? = nil,
            enableInterContainerTrafficEncryption: Swift.Bool? = nil,
            enableManagedSpotTraining: Swift.Bool? = nil,
            enableNetworkIsolation: Swift.Bool? = nil,
            environment: [Swift.String: Swift.String]? = nil,
            hyperParameterRanges: SageMakerClientTypes.ParameterRanges? = nil,
            hyperParameterTuningResourceConfig: SageMakerClientTypes.HyperParameterTuningResourceConfig? = nil,
            inputDataConfig: [SageMakerClientTypes.Channel]? = nil,
            outputDataConfig: SageMakerClientTypes.OutputDataConfig? = nil,
            resourceConfig: SageMakerClientTypes.ResourceConfig? = nil,
            retryStrategy: SageMakerClientTypes.RetryStrategy? = nil,
            roleArn: Swift.String? = nil,
            staticHyperParameters: [Swift.String: Swift.String]? = nil,
            stoppingCondition: SageMakerClientTypes.StoppingCondition? = nil,
            tuningObjective: SageMakerClientTypes.HyperParameterTuningJobObjective? = nil,
            vpcConfig: SageMakerClientTypes.VpcConfig? = nil
        )
        {
            self.algorithmSpecification = algorithmSpecification
            self.checkpointConfig = checkpointConfig
            self.definitionName = definitionName
            self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
            self.enableManagedSpotTraining = enableManagedSpotTraining
            self.enableNetworkIsolation = enableNetworkIsolation
            self.environment = environment
            self.hyperParameterRanges = hyperParameterRanges
            self.hyperParameterTuningResourceConfig = hyperParameterTuningResourceConfig
            self.inputDataConfig = inputDataConfig
            self.outputDataConfig = outputDataConfig
            self.resourceConfig = resourceConfig
            self.retryStrategy = retryStrategy
            self.roleArn = roleArn
            self.staticHyperParameters = staticHyperParameters
            self.stoppingCondition = stoppingCondition
            self.tuningObjective = tuningObjective
            self.vpcConfig = vpcConfig
        }
    }

}

extension SageMakerClientTypes {
    /// A previously completed or stopped hyperparameter tuning job to be used as a starting point for a new hyperparameter tuning job.
    public struct ParentHyperParameterTuningJob {
        /// The name of the hyperparameter tuning job to be used as a starting point for a new hyperparameter tuning job.
        public var hyperParameterTuningJobName: Swift.String?

        public init(
            hyperParameterTuningJobName: Swift.String? = nil
        )
        {
            self.hyperParameterTuningJobName = hyperParameterTuningJobName
        }
    }

}

extension SageMakerClientTypes {

    public enum HyperParameterTuningJobWarmStartType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case identicalDataAndAlgorithm
        case transferLearning
        case sdkUnknown(Swift.String)

        public static var allCases: [HyperParameterTuningJobWarmStartType] {
            return [
                .identicalDataAndAlgorithm,
                .transferLearning
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .identicalDataAndAlgorithm: return "IdenticalDataAndAlgorithm"
            case .transferLearning: return "TransferLearning"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies the configuration for a hyperparameter tuning job that uses one or more previous hyperparameter tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job. All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric, and the training job that performs the best is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job. All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.
    public struct HyperParameterTuningJobWarmStartConfig {
        /// An array of hyperparameter tuning jobs that are used as the starting point for the new hyperparameter tuning job. For more information about warm starting a hyperparameter tuning job, see [Using a Previous Hyperparameter Tuning Job as a Starting Point](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-warm-start.html). Hyperparameter tuning jobs created before October 1, 2018 cannot be used as parent jobs for warm start tuning jobs.
        /// This member is required.
        public var parentHyperParameterTuningJobs: [SageMakerClientTypes.ParentHyperParameterTuningJob]?
        /// Specifies one of the following: IDENTICAL_DATA_AND_ALGORITHM The new hyperparameter tuning job uses the same input data and training image as the parent tuning jobs. You can change the hyperparameter ranges to search and the maximum number of training jobs that the hyperparameter tuning job launches. You cannot use a new version of the training algorithm, unless the changes in the new version do not affect the algorithm itself. For example, changes that improve logging or adding support for a different data format are allowed. You can also change hyperparameters from tunable to static, and from static to tunable, but the total number of static plus tunable hyperparameters must remain the same as it is in all parent jobs. The objective metric for the new tuning job must be the same as for all parent jobs. TRANSFER_LEARNING The new hyperparameter tuning job can include input data, hyperparameter ranges, maximum number of concurrent training jobs, and maximum number of training jobs that are different than those of its parent hyperparameter tuning jobs. The training image can also be a different version from the version used in the parent hyperparameter tuning job. You can also change hyperparameters from tunable to static, and from static to tunable, but the total number of static plus tunable hyperparameters must remain the same as it is in all parent jobs. The objective metric for the new tuning job must be the same as for all parent jobs.
        /// This member is required.
        public var warmStartType: SageMakerClientTypes.HyperParameterTuningJobWarmStartType?

        public init(
            parentHyperParameterTuningJobs: [SageMakerClientTypes.ParentHyperParameterTuningJob]? = nil,
            warmStartType: SageMakerClientTypes.HyperParameterTuningJobWarmStartType? = nil
        )
        {
            self.parentHyperParameterTuningJobs = parentHyperParameterTuningJobs
            self.warmStartType = warmStartType
        }
    }

}

public struct CreateHyperParameterTuningJobInput {
    /// Configures SageMaker Automatic model tuning (AMT) to automatically find optimal parameters for the following fields:
    ///
    /// * [ParameterRanges](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html#sagemaker-Type-HyperParameterTuningJobConfig-ParameterRanges): The names and ranges of parameters that a hyperparameter tuning job can optimize.
    ///
    /// * [ResourceLimits](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ResourceLimits.html): The maximum resources that can be used for a training job. These resources include the maximum number of training jobs, the maximum runtime of a tuning job, and the maximum number of training jobs to run at the same time.
    ///
    /// * [TrainingJobEarlyStoppingType](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html#sagemaker-Type-HyperParameterTuningJobConfig-TrainingJobEarlyStoppingType): A flag that specifies whether or not to use early stopping for training jobs launched by a hyperparameter tuning job.
    ///
    /// * [RetryStrategy](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html#sagemaker-Type-HyperParameterTrainingJobDefinition-RetryStrategy): The number of times to retry a training job.
    ///
    /// * [Strategy](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html): Specifies how hyperparameter tuning chooses the combinations of hyperparameter values to use for the training jobs that it launches.
    ///
    /// * [ConvergenceDetected](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ConvergenceDetected.html): A flag to indicate that Automatic model tuning (AMT) has detected model convergence.
    public var autotune: SageMakerClientTypes.Autotune?
    /// The [HyperParameterTuningJobConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html) object that describes the tuning job, including the search strategy, the objective metric used to evaluate training jobs, ranges of parameters to search, and resource limits for the tuning job. For more information, see [How Hyperparameter Tuning Works](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-how-it-works.html).
    /// This member is required.
    public var hyperParameterTuningJobConfig: SageMakerClientTypes.HyperParameterTuningJobConfig?
    /// The name of the tuning job. This name is the prefix for the names of all training jobs that this tuning job launches. The name must be unique within the same Amazon Web Services account and Amazon Web Services Region. The name must have 1 to 32 characters. Valid characters are a-z, A-Z, 0-9, and : + = @ _ % - (hyphen). The name is not case sensitive.
    /// This member is required.
    public var hyperParameterTuningJobName: Swift.String?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html). Tags that you specify for the tuning job are also added to all training jobs that the tuning job launches.
    public var tags: [SageMakerClientTypes.Tag]?
    /// The [HyperParameterTrainingJobDefinition](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html) object that describes the training jobs that this tuning job launches, including static hyperparameters, input data configuration, output data configuration, resource configuration, and stopping condition.
    public var trainingJobDefinition: SageMakerClientTypes.HyperParameterTrainingJobDefinition?
    /// A list of the [HyperParameterTrainingJobDefinition](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html) objects launched for this tuning job.
    public var trainingJobDefinitions: [SageMakerClientTypes.HyperParameterTrainingJobDefinition]?
    /// Specifies the configuration for starting the hyperparameter tuning job using one or more previous tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job. All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric. If you specify IDENTICAL_DATA_AND_ALGORITHM as the WarmStartType value for the warm start configuration, the training job that performs the best in the new tuning job is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job. All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.
    public var warmStartConfig: SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig?

    public init(
        autotune: SageMakerClientTypes.Autotune? = nil,
        hyperParameterTuningJobConfig: SageMakerClientTypes.HyperParameterTuningJobConfig? = nil,
        hyperParameterTuningJobName: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        trainingJobDefinition: SageMakerClientTypes.HyperParameterTrainingJobDefinition? = nil,
        trainingJobDefinitions: [SageMakerClientTypes.HyperParameterTrainingJobDefinition]? = nil,
        warmStartConfig: SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig? = nil
    )
    {
        self.autotune = autotune
        self.hyperParameterTuningJobConfig = hyperParameterTuningJobConfig
        self.hyperParameterTuningJobName = hyperParameterTuningJobName
        self.tags = tags
        self.trainingJobDefinition = trainingJobDefinition
        self.trainingJobDefinitions = trainingJobDefinitions
        self.warmStartConfig = warmStartConfig
    }
}

public struct CreateHyperParameterTuningJobOutput {
    /// The Amazon Resource Name (ARN) of the tuning job. SageMaker assigns an ARN to a hyperparameter tuning job when you create it.
    /// This member is required.
    public var hyperParameterTuningJobArn: Swift.String?

    public init(
        hyperParameterTuningJobArn: Swift.String? = nil
    )
    {
        self.hyperParameterTuningJobArn = hyperParameterTuningJobArn
    }
}

public struct CreateImageInput {
    /// The description of the image.
    public var description: Swift.String?
    /// The display name of the image. If not provided, ImageName is displayed.
    public var displayName: Swift.String?
    /// The name of the image. Must be unique to your account.
    /// This member is required.
    public var imageName: Swift.String?
    /// The ARN of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A list of tags to apply to the image.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        imageName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.description = description
        self.displayName = displayName
        self.imageName = imageName
        self.roleArn = roleArn
        self.tags = tags
    }
}

public struct CreateImageOutput {
    /// The ARN of the image.
    public var imageArn: Swift.String?

    public init(
        imageArn: Swift.String? = nil
    )
    {
        self.imageArn = imageArn
    }
}

extension SageMakerClientTypes {

    public enum JobType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case inference
        case notebookKernel
        case training
        case sdkUnknown(Swift.String)

        public static var allCases: [JobType] {
            return [
                .inference,
                .notebookKernel,
                .training
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .inference: return "INFERENCE"
            case .notebookKernel: return "NOTEBOOK_KERNEL"
            case .training: return "TRAINING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum Processor: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cpu
        case gpu
        case sdkUnknown(Swift.String)

        public static var allCases: [Processor] {
            return [
                .cpu,
                .gpu
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cpu: return "CPU"
            case .gpu: return "GPU"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum VendorGuidance: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case archived
        case notProvided
        case stable
        case toBeArchived
        case sdkUnknown(Swift.String)

        public static var allCases: [VendorGuidance] {
            return [
                .archived,
                .notProvided,
                .stable,
                .toBeArchived
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .archived: return "ARCHIVED"
            case .notProvided: return "NOT_PROVIDED"
            case .stable: return "STABLE"
            case .toBeArchived: return "TO_BE_ARCHIVED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateImageVersionInput {
    /// A list of aliases created with the image version.
    public var aliases: [Swift.String]?
    /// The registry path of the container image to use as the starting point for this version. The path is an Amazon ECR URI in the following format: .dkr.ecr..amazonaws.com/
    /// This member is required.
    public var baseImage: Swift.String?
    /// A unique ID. If not specified, the Amazon Web Services CLI and Amazon Web Services SDKs, such as the SDK for Python (Boto3), add a unique value to the call.
    /// This member is required.
    public var clientToken: Swift.String?
    /// Indicates Horovod compatibility.
    public var horovod: Swift.Bool?
    /// The ImageName of the Image to create a version of.
    /// This member is required.
    public var imageName: Swift.String?
    /// Indicates SageMaker job type compatibility.
    ///
    /// * TRAINING: The image version is compatible with SageMaker training jobs.
    ///
    /// * INFERENCE: The image version is compatible with SageMaker inference jobs.
    ///
    /// * NOTEBOOK_KERNEL: The image version is compatible with SageMaker notebook kernels.
    public var jobType: SageMakerClientTypes.JobType?
    /// The machine learning framework vended in the image version.
    public var mlFramework: Swift.String?
    /// Indicates CPU or GPU compatibility.
    ///
    /// * CPU: The image version is compatible with CPU.
    ///
    /// * GPU: The image version is compatible with GPU.
    public var processor: SageMakerClientTypes.Processor?
    /// The supported programming language and its version.
    public var programmingLang: Swift.String?
    /// The maintainer description of the image version.
    public var releaseNotes: Swift.String?
    /// The stability of the image version, specified by the maintainer.
    ///
    /// * NOT_PROVIDED: The maintainers did not provide a status for image version stability.
    ///
    /// * STABLE: The image version is stable.
    ///
    /// * TO_BE_ARCHIVED: The image version is set to be archived. Custom image versions that are set to be archived are automatically archived after three months.
    ///
    /// * ARCHIVED: The image version is archived. Archived image versions are not searchable and are no longer actively supported.
    public var vendorGuidance: SageMakerClientTypes.VendorGuidance?

    public init(
        aliases: [Swift.String]? = nil,
        baseImage: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        horovod: Swift.Bool? = nil,
        imageName: Swift.String? = nil,
        jobType: SageMakerClientTypes.JobType? = nil,
        mlFramework: Swift.String? = nil,
        processor: SageMakerClientTypes.Processor? = nil,
        programmingLang: Swift.String? = nil,
        releaseNotes: Swift.String? = nil,
        vendorGuidance: SageMakerClientTypes.VendorGuidance? = nil
    )
    {
        self.aliases = aliases
        self.baseImage = baseImage
        self.clientToken = clientToken
        self.horovod = horovod
        self.imageName = imageName
        self.jobType = jobType
        self.mlFramework = mlFramework
        self.processor = processor
        self.programmingLang = programmingLang
        self.releaseNotes = releaseNotes
        self.vendorGuidance = vendorGuidance
    }
}

public struct CreateImageVersionOutput {
    /// The ARN of the image version.
    public var imageVersionArn: Swift.String?

    public init(
        imageVersionArn: Swift.String? = nil
    )
    {
        self.imageVersionArn = imageVersionArn
    }
}

extension SageMakerClientTypes {
    /// Runtime settings for a model that is deployed with an inference component.
    public struct InferenceComponentRuntimeConfig {
        /// The number of runtime copies of the model container to deploy with the inference component. Each copy can serve inference requests.
        /// This member is required.
        public var copyCount: Swift.Int?

        public init(
            copyCount: Swift.Int? = nil
        )
        {
            self.copyCount = copyCount
        }
    }

}

extension SageMakerClientTypes {
    /// Defines the compute resources to allocate to run a model that you assign to an inference component. These resources include CPU cores, accelerators, and memory.
    public struct InferenceComponentComputeResourceRequirements {
        /// The maximum MB of memory to allocate to run a model that you assign to an inference component.
        public var maxMemoryRequiredInMb: Swift.Int?
        /// The minimum MB of memory to allocate to run a model that you assign to an inference component.
        /// This member is required.
        public var minMemoryRequiredInMb: Swift.Int?
        /// The number of accelerators to allocate to run a model that you assign to an inference component. Accelerators include GPUs and Amazon Web Services Inferentia.
        public var numberOfAcceleratorDevicesRequired: Swift.Float?
        /// The number of CPU cores to allocate to run a model that you assign to an inference component.
        public var numberOfCpuCoresRequired: Swift.Float?

        public init(
            maxMemoryRequiredInMb: Swift.Int? = nil,
            minMemoryRequiredInMb: Swift.Int? = nil,
            numberOfAcceleratorDevicesRequired: Swift.Float? = nil,
            numberOfCpuCoresRequired: Swift.Float? = nil
        )
        {
            self.maxMemoryRequiredInMb = maxMemoryRequiredInMb
            self.minMemoryRequiredInMb = minMemoryRequiredInMb
            self.numberOfAcceleratorDevicesRequired = numberOfAcceleratorDevicesRequired
            self.numberOfCpuCoresRequired = numberOfCpuCoresRequired
        }
    }

}

extension SageMakerClientTypes {
    /// Defines a container that provides the runtime environment for a model that you deploy with an inference component.
    public struct InferenceComponentContainerSpecification {
        /// The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).
        public var artifactUrl: Swift.String?
        /// The environment variables to set in the Docker container. Each key and value in the Environment string-to-string map can have length of up to 1024. We support up to 16 entries in the map.
        public var environment: [Swift.String: Swift.String]?
        /// The Amazon Elastic Container Registry (Amazon ECR) path where the Docker image for the model is stored.
        public var image: Swift.String?

        public init(
            artifactUrl: Swift.String? = nil,
            environment: [Swift.String: Swift.String]? = nil,
            image: Swift.String? = nil
        )
        {
            self.artifactUrl = artifactUrl
            self.environment = environment
            self.image = image
        }
    }

}

extension SageMakerClientTypes {
    /// Settings that take effect while the model container starts up.
    public struct InferenceComponentStartupParameters {
        /// The timeout value, in seconds, for your inference container to pass health check by Amazon S3 Hosting. For more information about health check, see [How Your Container Should Respond to Health Check (Ping) Requests](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-inference-code.html#your-algorithms-inference-algo-ping-requests).
        public var containerStartupHealthCheckTimeoutInSeconds: Swift.Int?
        /// The timeout value, in seconds, to download and extract the model that you want to host from Amazon S3 to the individual inference instance associated with this inference component.
        public var modelDataDownloadTimeoutInSeconds: Swift.Int?

        public init(
            containerStartupHealthCheckTimeoutInSeconds: Swift.Int? = nil,
            modelDataDownloadTimeoutInSeconds: Swift.Int? = nil
        )
        {
            self.containerStartupHealthCheckTimeoutInSeconds = containerStartupHealthCheckTimeoutInSeconds
            self.modelDataDownloadTimeoutInSeconds = modelDataDownloadTimeoutInSeconds
        }
    }

}

extension SageMakerClientTypes {
    /// Details about the resources to deploy with this inference component, including the model, container, and compute resources.
    public struct InferenceComponentSpecification {
        /// The compute resources allocated to run the model assigned to the inference component.
        /// This member is required.
        public var computeResourceRequirements: SageMakerClientTypes.InferenceComponentComputeResourceRequirements?
        /// Defines a container that provides the runtime environment for a model that you deploy with an inference component.
        public var container: SageMakerClientTypes.InferenceComponentContainerSpecification?
        /// The name of an existing SageMaker model object in your account that you want to deploy with the inference component.
        public var modelName: Swift.String?
        /// Settings that take effect while the model container starts up.
        public var startupParameters: SageMakerClientTypes.InferenceComponentStartupParameters?

        public init(
            computeResourceRequirements: SageMakerClientTypes.InferenceComponentComputeResourceRequirements? = nil,
            container: SageMakerClientTypes.InferenceComponentContainerSpecification? = nil,
            modelName: Swift.String? = nil,
            startupParameters: SageMakerClientTypes.InferenceComponentStartupParameters? = nil
        )
        {
            self.computeResourceRequirements = computeResourceRequirements
            self.container = container
            self.modelName = modelName
            self.startupParameters = startupParameters
        }
    }

}

public struct CreateInferenceComponentInput {
    /// The name of an existing endpoint where you host the inference component.
    /// This member is required.
    public var endpointName: Swift.String?
    /// A unique name to assign to the inference component.
    /// This member is required.
    public var inferenceComponentName: Swift.String?
    /// Runtime settings for a model that is deployed with an inference component.
    /// This member is required.
    public var runtimeConfig: SageMakerClientTypes.InferenceComponentRuntimeConfig?
    /// Details about the resources to deploy with this inference component, including the model, container, and compute resources.
    /// This member is required.
    public var specification: SageMakerClientTypes.InferenceComponentSpecification?
    /// A list of key-value pairs associated with the model. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference.
    public var tags: [SageMakerClientTypes.Tag]?
    /// The name of an existing production variant where you host the inference component.
    /// This member is required.
    public var variantName: Swift.String?

    public init(
        endpointName: Swift.String? = nil,
        inferenceComponentName: Swift.String? = nil,
        runtimeConfig: SageMakerClientTypes.InferenceComponentRuntimeConfig? = nil,
        specification: SageMakerClientTypes.InferenceComponentSpecification? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        variantName: Swift.String? = nil
    )
    {
        self.endpointName = endpointName
        self.inferenceComponentName = inferenceComponentName
        self.runtimeConfig = runtimeConfig
        self.specification = specification
        self.tags = tags
        self.variantName = variantName
    }
}

public struct CreateInferenceComponentOutput {
    /// The Amazon Resource Name (ARN) of the inference component.
    /// This member is required.
    public var inferenceComponentArn: Swift.String?

    public init(
        inferenceComponentArn: Swift.String? = nil
    )
    {
        self.inferenceComponentArn = inferenceComponentArn
    }
}

extension SageMakerClientTypes {
    /// The Amazon S3 location and configuration for storing inference request and response data.
    public struct InferenceExperimentDataStorageConfig {
        /// Configuration specifying how to treat different headers. If no headers are specified Amazon SageMaker will by default base64 encode when capturing the data.
        public var contentType: SageMakerClientTypes.CaptureContentTypeHeader?
        /// The Amazon S3 bucket where the inference request and response data is stored.
        /// This member is required.
        public var destination: Swift.String?
        /// The Amazon Web Services Key Management Service key that Amazon SageMaker uses to encrypt captured data at rest using Amazon S3 server-side encryption.
        public var kmsKey: Swift.String?

        public init(
            contentType: SageMakerClientTypes.CaptureContentTypeHeader? = nil,
            destination: Swift.String? = nil,
            kmsKey: Swift.String? = nil
        )
        {
            self.contentType = contentType
            self.destination = destination
            self.kmsKey = kmsKey
        }
    }

}

extension SageMakerClientTypes {

    public enum ModelInfrastructureType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case realTimeInference
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelInfrastructureType] {
            return [
                .realTimeInference
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .realTimeInference: return "RealTimeInference"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum InstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mlC42xlarge
        case mlC44xlarge
        case mlC48xlarge
        case mlC4Xlarge
        case mlC5d18xlarge
        case mlC5d2xlarge
        case mlC5d4xlarge
        case mlC5d9xlarge
        case mlC5dXlarge
        case mlC518xlarge
        case mlC52xlarge
        case mlC54xlarge
        case mlC59xlarge
        case mlC5Xlarge
        case mlC6id12xlarge
        case mlC6id16xlarge
        case mlC6id24xlarge
        case mlC6id2xlarge
        case mlC6id32xlarge
        case mlC6id4xlarge
        case mlC6id8xlarge
        case mlC6idLarge
        case mlC6idXlarge
        case mlC6i12xlarge
        case mlC6i16xlarge
        case mlC6i24xlarge
        case mlC6i2xlarge
        case mlC6i32xlarge
        case mlC6i4xlarge
        case mlC6i8xlarge
        case mlC6iLarge
        case mlC6iXlarge
        case mlC7i12xlarge
        case mlC7i16xlarge
        case mlC7i24xlarge
        case mlC7i2xlarge
        case mlC7i48xlarge
        case mlC7i4xlarge
        case mlC7i8xlarge
        case mlC7iLarge
        case mlC7iXlarge
        case mlG4dn12xlarge
        case mlG4dn16xlarge
        case mlG4dn2xlarge
        case mlG4dn4xlarge
        case mlG4dn8xlarge
        case mlG4dnXlarge
        case mlG512xlarge
        case mlG516xlarge
        case mlG524xlarge
        case mlG52xlarge
        case mlG548xlarge
        case mlG54xlarge
        case mlG58xlarge
        case mlG5Xlarge
        case mlG612xlarge
        case mlG616xlarge
        case mlG624xlarge
        case mlG62xlarge
        case mlG648xlarge
        case mlG64xlarge
        case mlG68xlarge
        case mlG6Xlarge
        case mlInf124xlarge
        case mlInf12xlarge
        case mlInf16xlarge
        case mlInf1Xlarge
        case mlM410xlarge
        case mlM416xlarge
        case mlM42xlarge
        case mlM44xlarge
        case mlM4Xlarge
        case mlM5d12xlarge
        case mlM5d16xlarge
        case mlM5d24xlarge
        case mlM5d2xlarge
        case mlM5d4xlarge
        case mlM5d8xlarge
        case mlM5dLarge
        case mlM5dXlarge
        case mlM512xlarge
        case mlM524xlarge
        case mlM52xlarge
        case mlM54xlarge
        case mlM5Xlarge
        case mlM6id12xlarge
        case mlM6id16xlarge
        case mlM6id24xlarge
        case mlM6id2xlarge
        case mlM6id32xlarge
        case mlM6id4xlarge
        case mlM6id8xlarge
        case mlM6idLarge
        case mlM6idXlarge
        case mlM6i12xlarge
        case mlM6i16xlarge
        case mlM6i24xlarge
        case mlM6i2xlarge
        case mlM6i32xlarge
        case mlM6i4xlarge
        case mlM6i8xlarge
        case mlM6iLarge
        case mlM6iXlarge
        case mlM7i12xlarge
        case mlM7i16xlarge
        case mlM7i24xlarge
        case mlM7i2xlarge
        case mlM7i48xlarge
        case mlM7i4xlarge
        case mlM7i8xlarge
        case mlM7iLarge
        case mlM7iXlarge
        case mlP216xlarge
        case mlP28xlarge
        case mlP2Xlarge
        case mlP3dn24xlarge
        case mlP316xlarge
        case mlP32xlarge
        case mlP38xlarge
        case mlP4de24xlarge
        case mlP4d24xlarge
        case mlP548xlarge
        case mlR512xlarge
        case mlR516xlarge
        case mlR524xlarge
        case mlR52xlarge
        case mlR54xlarge
        case mlR58xlarge
        case mlR5Large
        case mlR5Xlarge
        case mlR6id12xlarge
        case mlR6id16xlarge
        case mlR6id24xlarge
        case mlR6id2xlarge
        case mlR6id32xlarge
        case mlR6id4xlarge
        case mlR6id8xlarge
        case mlR6idLarge
        case mlR6idXlarge
        case mlR6i12xlarge
        case mlR6i16xlarge
        case mlR6i24xlarge
        case mlR6i2xlarge
        case mlR6i32xlarge
        case mlR6i4xlarge
        case mlR6i8xlarge
        case mlR6iLarge
        case mlR6iXlarge
        case mlR7i12xlarge
        case mlR7i16xlarge
        case mlR7i24xlarge
        case mlR7i2xlarge
        case mlR7i48xlarge
        case mlR7i4xlarge
        case mlR7i8xlarge
        case mlR7iLarge
        case mlR7iXlarge
        case mlT22xlarge
        case mlT2Large
        case mlT2Medium
        case mlT2Xlarge
        case mlT32xlarge
        case mlT3Large
        case mlT3Medium
        case mlT3Xlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceType] {
            return [
                .mlC42xlarge,
                .mlC44xlarge,
                .mlC48xlarge,
                .mlC4Xlarge,
                .mlC5d18xlarge,
                .mlC5d2xlarge,
                .mlC5d4xlarge,
                .mlC5d9xlarge,
                .mlC5dXlarge,
                .mlC518xlarge,
                .mlC52xlarge,
                .mlC54xlarge,
                .mlC59xlarge,
                .mlC5Xlarge,
                .mlC6id12xlarge,
                .mlC6id16xlarge,
                .mlC6id24xlarge,
                .mlC6id2xlarge,
                .mlC6id32xlarge,
                .mlC6id4xlarge,
                .mlC6id8xlarge,
                .mlC6idLarge,
                .mlC6idXlarge,
                .mlC6i12xlarge,
                .mlC6i16xlarge,
                .mlC6i24xlarge,
                .mlC6i2xlarge,
                .mlC6i32xlarge,
                .mlC6i4xlarge,
                .mlC6i8xlarge,
                .mlC6iLarge,
                .mlC6iXlarge,
                .mlC7i12xlarge,
                .mlC7i16xlarge,
                .mlC7i24xlarge,
                .mlC7i2xlarge,
                .mlC7i48xlarge,
                .mlC7i4xlarge,
                .mlC7i8xlarge,
                .mlC7iLarge,
                .mlC7iXlarge,
                .mlG4dn12xlarge,
                .mlG4dn16xlarge,
                .mlG4dn2xlarge,
                .mlG4dn4xlarge,
                .mlG4dn8xlarge,
                .mlG4dnXlarge,
                .mlG512xlarge,
                .mlG516xlarge,
                .mlG524xlarge,
                .mlG52xlarge,
                .mlG548xlarge,
                .mlG54xlarge,
                .mlG58xlarge,
                .mlG5Xlarge,
                .mlG612xlarge,
                .mlG616xlarge,
                .mlG624xlarge,
                .mlG62xlarge,
                .mlG648xlarge,
                .mlG64xlarge,
                .mlG68xlarge,
                .mlG6Xlarge,
                .mlInf124xlarge,
                .mlInf12xlarge,
                .mlInf16xlarge,
                .mlInf1Xlarge,
                .mlM410xlarge,
                .mlM416xlarge,
                .mlM42xlarge,
                .mlM44xlarge,
                .mlM4Xlarge,
                .mlM5d12xlarge,
                .mlM5d16xlarge,
                .mlM5d24xlarge,
                .mlM5d2xlarge,
                .mlM5d4xlarge,
                .mlM5d8xlarge,
                .mlM5dLarge,
                .mlM5dXlarge,
                .mlM512xlarge,
                .mlM524xlarge,
                .mlM52xlarge,
                .mlM54xlarge,
                .mlM5Xlarge,
                .mlM6id12xlarge,
                .mlM6id16xlarge,
                .mlM6id24xlarge,
                .mlM6id2xlarge,
                .mlM6id32xlarge,
                .mlM6id4xlarge,
                .mlM6id8xlarge,
                .mlM6idLarge,
                .mlM6idXlarge,
                .mlM6i12xlarge,
                .mlM6i16xlarge,
                .mlM6i24xlarge,
                .mlM6i2xlarge,
                .mlM6i32xlarge,
                .mlM6i4xlarge,
                .mlM6i8xlarge,
                .mlM6iLarge,
                .mlM6iXlarge,
                .mlM7i12xlarge,
                .mlM7i16xlarge,
                .mlM7i24xlarge,
                .mlM7i2xlarge,
                .mlM7i48xlarge,
                .mlM7i4xlarge,
                .mlM7i8xlarge,
                .mlM7iLarge,
                .mlM7iXlarge,
                .mlP216xlarge,
                .mlP28xlarge,
                .mlP2Xlarge,
                .mlP3dn24xlarge,
                .mlP316xlarge,
                .mlP32xlarge,
                .mlP38xlarge,
                .mlP4de24xlarge,
                .mlP4d24xlarge,
                .mlP548xlarge,
                .mlR512xlarge,
                .mlR516xlarge,
                .mlR524xlarge,
                .mlR52xlarge,
                .mlR54xlarge,
                .mlR58xlarge,
                .mlR5Large,
                .mlR5Xlarge,
                .mlR6id12xlarge,
                .mlR6id16xlarge,
                .mlR6id24xlarge,
                .mlR6id2xlarge,
                .mlR6id32xlarge,
                .mlR6id4xlarge,
                .mlR6id8xlarge,
                .mlR6idLarge,
                .mlR6idXlarge,
                .mlR6i12xlarge,
                .mlR6i16xlarge,
                .mlR6i24xlarge,
                .mlR6i2xlarge,
                .mlR6i32xlarge,
                .mlR6i4xlarge,
                .mlR6i8xlarge,
                .mlR6iLarge,
                .mlR6iXlarge,
                .mlR7i12xlarge,
                .mlR7i16xlarge,
                .mlR7i24xlarge,
                .mlR7i2xlarge,
                .mlR7i48xlarge,
                .mlR7i4xlarge,
                .mlR7i8xlarge,
                .mlR7iLarge,
                .mlR7iXlarge,
                .mlT22xlarge,
                .mlT2Large,
                .mlT2Medium,
                .mlT2Xlarge,
                .mlT32xlarge,
                .mlT3Large,
                .mlT3Medium,
                .mlT3Xlarge
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mlC42xlarge: return "ml.c4.2xlarge"
            case .mlC44xlarge: return "ml.c4.4xlarge"
            case .mlC48xlarge: return "ml.c4.8xlarge"
            case .mlC4Xlarge: return "ml.c4.xlarge"
            case .mlC5d18xlarge: return "ml.c5d.18xlarge"
            case .mlC5d2xlarge: return "ml.c5d.2xlarge"
            case .mlC5d4xlarge: return "ml.c5d.4xlarge"
            case .mlC5d9xlarge: return "ml.c5d.9xlarge"
            case .mlC5dXlarge: return "ml.c5d.xlarge"
            case .mlC518xlarge: return "ml.c5.18xlarge"
            case .mlC52xlarge: return "ml.c5.2xlarge"
            case .mlC54xlarge: return "ml.c5.4xlarge"
            case .mlC59xlarge: return "ml.c5.9xlarge"
            case .mlC5Xlarge: return "ml.c5.xlarge"
            case .mlC6id12xlarge: return "ml.c6id.12xlarge"
            case .mlC6id16xlarge: return "ml.c6id.16xlarge"
            case .mlC6id24xlarge: return "ml.c6id.24xlarge"
            case .mlC6id2xlarge: return "ml.c6id.2xlarge"
            case .mlC6id32xlarge: return "ml.c6id.32xlarge"
            case .mlC6id4xlarge: return "ml.c6id.4xlarge"
            case .mlC6id8xlarge: return "ml.c6id.8xlarge"
            case .mlC6idLarge: return "ml.c6id.large"
            case .mlC6idXlarge: return "ml.c6id.xlarge"
            case .mlC6i12xlarge: return "ml.c6i.12xlarge"
            case .mlC6i16xlarge: return "ml.c6i.16xlarge"
            case .mlC6i24xlarge: return "ml.c6i.24xlarge"
            case .mlC6i2xlarge: return "ml.c6i.2xlarge"
            case .mlC6i32xlarge: return "ml.c6i.32xlarge"
            case .mlC6i4xlarge: return "ml.c6i.4xlarge"
            case .mlC6i8xlarge: return "ml.c6i.8xlarge"
            case .mlC6iLarge: return "ml.c6i.large"
            case .mlC6iXlarge: return "ml.c6i.xlarge"
            case .mlC7i12xlarge: return "ml.c7i.12xlarge"
            case .mlC7i16xlarge: return "ml.c7i.16xlarge"
            case .mlC7i24xlarge: return "ml.c7i.24xlarge"
            case .mlC7i2xlarge: return "ml.c7i.2xlarge"
            case .mlC7i48xlarge: return "ml.c7i.48xlarge"
            case .mlC7i4xlarge: return "ml.c7i.4xlarge"
            case .mlC7i8xlarge: return "ml.c7i.8xlarge"
            case .mlC7iLarge: return "ml.c7i.large"
            case .mlC7iXlarge: return "ml.c7i.xlarge"
            case .mlG4dn12xlarge: return "ml.g4dn.12xlarge"
            case .mlG4dn16xlarge: return "ml.g4dn.16xlarge"
            case .mlG4dn2xlarge: return "ml.g4dn.2xlarge"
            case .mlG4dn4xlarge: return "ml.g4dn.4xlarge"
            case .mlG4dn8xlarge: return "ml.g4dn.8xlarge"
            case .mlG4dnXlarge: return "ml.g4dn.xlarge"
            case .mlG512xlarge: return "ml.g5.12xlarge"
            case .mlG516xlarge: return "ml.g5.16xlarge"
            case .mlG524xlarge: return "ml.g5.24xlarge"
            case .mlG52xlarge: return "ml.g5.2xlarge"
            case .mlG548xlarge: return "ml.g5.48xlarge"
            case .mlG54xlarge: return "ml.g5.4xlarge"
            case .mlG58xlarge: return "ml.g5.8xlarge"
            case .mlG5Xlarge: return "ml.g5.xlarge"
            case .mlG612xlarge: return "ml.g6.12xlarge"
            case .mlG616xlarge: return "ml.g6.16xlarge"
            case .mlG624xlarge: return "ml.g6.24xlarge"
            case .mlG62xlarge: return "ml.g6.2xlarge"
            case .mlG648xlarge: return "ml.g6.48xlarge"
            case .mlG64xlarge: return "ml.g6.4xlarge"
            case .mlG68xlarge: return "ml.g6.8xlarge"
            case .mlG6Xlarge: return "ml.g6.xlarge"
            case .mlInf124xlarge: return "ml.inf1.24xlarge"
            case .mlInf12xlarge: return "ml.inf1.2xlarge"
            case .mlInf16xlarge: return "ml.inf1.6xlarge"
            case .mlInf1Xlarge: return "ml.inf1.xlarge"
            case .mlM410xlarge: return "ml.m4.10xlarge"
            case .mlM416xlarge: return "ml.m4.16xlarge"
            case .mlM42xlarge: return "ml.m4.2xlarge"
            case .mlM44xlarge: return "ml.m4.4xlarge"
            case .mlM4Xlarge: return "ml.m4.xlarge"
            case .mlM5d12xlarge: return "ml.m5d.12xlarge"
            case .mlM5d16xlarge: return "ml.m5d.16xlarge"
            case .mlM5d24xlarge: return "ml.m5d.24xlarge"
            case .mlM5d2xlarge: return "ml.m5d.2xlarge"
            case .mlM5d4xlarge: return "ml.m5d.4xlarge"
            case .mlM5d8xlarge: return "ml.m5d.8xlarge"
            case .mlM5dLarge: return "ml.m5d.large"
            case .mlM5dXlarge: return "ml.m5d.xlarge"
            case .mlM512xlarge: return "ml.m5.12xlarge"
            case .mlM524xlarge: return "ml.m5.24xlarge"
            case .mlM52xlarge: return "ml.m5.2xlarge"
            case .mlM54xlarge: return "ml.m5.4xlarge"
            case .mlM5Xlarge: return "ml.m5.xlarge"
            case .mlM6id12xlarge: return "ml.m6id.12xlarge"
            case .mlM6id16xlarge: return "ml.m6id.16xlarge"
            case .mlM6id24xlarge: return "ml.m6id.24xlarge"
            case .mlM6id2xlarge: return "ml.m6id.2xlarge"
            case .mlM6id32xlarge: return "ml.m6id.32xlarge"
            case .mlM6id4xlarge: return "ml.m6id.4xlarge"
            case .mlM6id8xlarge: return "ml.m6id.8xlarge"
            case .mlM6idLarge: return "ml.m6id.large"
            case .mlM6idXlarge: return "ml.m6id.xlarge"
            case .mlM6i12xlarge: return "ml.m6i.12xlarge"
            case .mlM6i16xlarge: return "ml.m6i.16xlarge"
            case .mlM6i24xlarge: return "ml.m6i.24xlarge"
            case .mlM6i2xlarge: return "ml.m6i.2xlarge"
            case .mlM6i32xlarge: return "ml.m6i.32xlarge"
            case .mlM6i4xlarge: return "ml.m6i.4xlarge"
            case .mlM6i8xlarge: return "ml.m6i.8xlarge"
            case .mlM6iLarge: return "ml.m6i.large"
            case .mlM6iXlarge: return "ml.m6i.xlarge"
            case .mlM7i12xlarge: return "ml.m7i.12xlarge"
            case .mlM7i16xlarge: return "ml.m7i.16xlarge"
            case .mlM7i24xlarge: return "ml.m7i.24xlarge"
            case .mlM7i2xlarge: return "ml.m7i.2xlarge"
            case .mlM7i48xlarge: return "ml.m7i.48xlarge"
            case .mlM7i4xlarge: return "ml.m7i.4xlarge"
            case .mlM7i8xlarge: return "ml.m7i.8xlarge"
            case .mlM7iLarge: return "ml.m7i.large"
            case .mlM7iXlarge: return "ml.m7i.xlarge"
            case .mlP216xlarge: return "ml.p2.16xlarge"
            case .mlP28xlarge: return "ml.p2.8xlarge"
            case .mlP2Xlarge: return "ml.p2.xlarge"
            case .mlP3dn24xlarge: return "ml.p3dn.24xlarge"
            case .mlP316xlarge: return "ml.p3.16xlarge"
            case .mlP32xlarge: return "ml.p3.2xlarge"
            case .mlP38xlarge: return "ml.p3.8xlarge"
            case .mlP4de24xlarge: return "ml.p4de.24xlarge"
            case .mlP4d24xlarge: return "ml.p4d.24xlarge"
            case .mlP548xlarge: return "ml.p5.48xlarge"
            case .mlR512xlarge: return "ml.r5.12xlarge"
            case .mlR516xlarge: return "ml.r5.16xlarge"
            case .mlR524xlarge: return "ml.r5.24xlarge"
            case .mlR52xlarge: return "ml.r5.2xlarge"
            case .mlR54xlarge: return "ml.r5.4xlarge"
            case .mlR58xlarge: return "ml.r5.8xlarge"
            case .mlR5Large: return "ml.r5.large"
            case .mlR5Xlarge: return "ml.r5.xlarge"
            case .mlR6id12xlarge: return "ml.r6id.12xlarge"
            case .mlR6id16xlarge: return "ml.r6id.16xlarge"
            case .mlR6id24xlarge: return "ml.r6id.24xlarge"
            case .mlR6id2xlarge: return "ml.r6id.2xlarge"
            case .mlR6id32xlarge: return "ml.r6id.32xlarge"
            case .mlR6id4xlarge: return "ml.r6id.4xlarge"
            case .mlR6id8xlarge: return "ml.r6id.8xlarge"
            case .mlR6idLarge: return "ml.r6id.large"
            case .mlR6idXlarge: return "ml.r6id.xlarge"
            case .mlR6i12xlarge: return "ml.r6i.12xlarge"
            case .mlR6i16xlarge: return "ml.r6i.16xlarge"
            case .mlR6i24xlarge: return "ml.r6i.24xlarge"
            case .mlR6i2xlarge: return "ml.r6i.2xlarge"
            case .mlR6i32xlarge: return "ml.r6i.32xlarge"
            case .mlR6i4xlarge: return "ml.r6i.4xlarge"
            case .mlR6i8xlarge: return "ml.r6i.8xlarge"
            case .mlR6iLarge: return "ml.r6i.large"
            case .mlR6iXlarge: return "ml.r6i.xlarge"
            case .mlR7i12xlarge: return "ml.r7i.12xlarge"
            case .mlR7i16xlarge: return "ml.r7i.16xlarge"
            case .mlR7i24xlarge: return "ml.r7i.24xlarge"
            case .mlR7i2xlarge: return "ml.r7i.2xlarge"
            case .mlR7i48xlarge: return "ml.r7i.48xlarge"
            case .mlR7i4xlarge: return "ml.r7i.4xlarge"
            case .mlR7i8xlarge: return "ml.r7i.8xlarge"
            case .mlR7iLarge: return "ml.r7i.large"
            case .mlR7iXlarge: return "ml.r7i.xlarge"
            case .mlT22xlarge: return "ml.t2.2xlarge"
            case .mlT2Large: return "ml.t2.large"
            case .mlT2Medium: return "ml.t2.medium"
            case .mlT2Xlarge: return "ml.t2.xlarge"
            case .mlT32xlarge: return "ml.t3.2xlarge"
            case .mlT3Large: return "ml.t3.large"
            case .mlT3Medium: return "ml.t3.medium"
            case .mlT3Xlarge: return "ml.t3.xlarge"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The infrastructure configuration for deploying the model to a real-time inference endpoint.
    public struct RealTimeInferenceConfig {
        /// The number of instances of the type specified by InstanceType.
        /// This member is required.
        public var instanceCount: Swift.Int?
        /// The instance type the model is deployed to.
        /// This member is required.
        public var instanceType: SageMakerClientTypes.InstanceType?

        public init(
            instanceCount: Swift.Int? = nil,
            instanceType: SageMakerClientTypes.InstanceType? = nil
        )
        {
            self.instanceCount = instanceCount
            self.instanceType = instanceType
        }
    }

}

extension SageMakerClientTypes {
    /// The configuration for the infrastructure that the model will be deployed to.
    public struct ModelInfrastructureConfig {
        /// The inference option to which to deploy your model. Possible values are the following:
        ///
        /// * RealTime: Deploy to real-time inference.
        /// This member is required.
        public var infrastructureType: SageMakerClientTypes.ModelInfrastructureType?
        /// The infrastructure configuration for deploying the model to real-time inference.
        /// This member is required.
        public var realTimeInferenceConfig: SageMakerClientTypes.RealTimeInferenceConfig?

        public init(
            infrastructureType: SageMakerClientTypes.ModelInfrastructureType? = nil,
            realTimeInferenceConfig: SageMakerClientTypes.RealTimeInferenceConfig? = nil
        )
        {
            self.infrastructureType = infrastructureType
            self.realTimeInferenceConfig = realTimeInferenceConfig
        }
    }

}

extension SageMakerClientTypes {
    /// Contains information about the deployment options of a model.
    public struct ModelVariantConfig {
        /// The configuration for the infrastructure that the model will be deployed to.
        /// This member is required.
        public var infrastructureConfig: SageMakerClientTypes.ModelInfrastructureConfig?
        /// The name of the Amazon SageMaker Model entity.
        /// This member is required.
        public var modelName: Swift.String?
        /// The name of the variant.
        /// This member is required.
        public var variantName: Swift.String?

        public init(
            infrastructureConfig: SageMakerClientTypes.ModelInfrastructureConfig? = nil,
            modelName: Swift.String? = nil,
            variantName: Swift.String? = nil
        )
        {
            self.infrastructureConfig = infrastructureConfig
            self.modelName = modelName
            self.variantName = variantName
        }
    }

}

extension SageMakerClientTypes {
    /// The start and end times of an inference experiment. The maximum duration that you can set for an inference experiment is 30 days.
    public struct InferenceExperimentSchedule {
        /// The timestamp at which the inference experiment ended or will end.
        public var endTime: Foundation.Date?
        /// The timestamp at which the inference experiment started or will start.
        public var startTime: Foundation.Date?

        public init(
            endTime: Foundation.Date? = nil,
            startTime: Foundation.Date? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
        }
    }

}

extension SageMakerClientTypes {
    /// The name and sampling percentage of a shadow variant.
    public struct ShadowModelVariantConfig {
        /// The percentage of inference requests that Amazon SageMaker replicates from the production variant to the shadow variant.
        /// This member is required.
        public var samplingPercentage: Swift.Int?
        /// The name of the shadow variant.
        /// This member is required.
        public var shadowModelVariantName: Swift.String?

        public init(
            samplingPercentage: Swift.Int? = nil,
            shadowModelVariantName: Swift.String? = nil
        )
        {
            self.samplingPercentage = samplingPercentage
            self.shadowModelVariantName = shadowModelVariantName
        }
    }

}

extension SageMakerClientTypes {
    /// The configuration of ShadowMode inference experiment type, which specifies a production variant to take all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant it also specifies the percentage of requests that Amazon SageMaker replicates.
    public struct ShadowModeConfig {
        /// List of shadow variant configurations.
        /// This member is required.
        public var shadowModelVariants: [SageMakerClientTypes.ShadowModelVariantConfig]?
        /// The name of the production variant, which takes all the inference requests.
        /// This member is required.
        public var sourceModelVariantName: Swift.String?

        public init(
            shadowModelVariants: [SageMakerClientTypes.ShadowModelVariantConfig]? = nil,
            sourceModelVariantName: Swift.String? = nil
        )
        {
            self.shadowModelVariants = shadowModelVariants
            self.sourceModelVariantName = sourceModelVariantName
        }
    }

}

extension SageMakerClientTypes {

    public enum InferenceExperimentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case shadowMode
        case sdkUnknown(Swift.String)

        public static var allCases: [InferenceExperimentType] {
            return [
                .shadowMode
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .shadowMode: return "ShadowMode"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateInferenceExperimentInput {
    /// The Amazon S3 location and configuration for storing inference request and response data. This is an optional parameter that you can use for data capture. For more information, see [Capture data](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor-data-capture.html).
    public var dataStorageConfig: SageMakerClientTypes.InferenceExperimentDataStorageConfig?
    /// A description for the inference experiment.
    public var description: Swift.String?
    /// The name of the Amazon SageMaker endpoint on which you want to run the inference experiment.
    /// This member is required.
    public var endpointName: Swift.String?
    /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint. The KmsKey can be any of the following formats:
    ///
    /// * KMS key ID "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS key "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * KMS key Alias "alias/ExampleAlias"
    ///
    /// * Amazon Resource Name (ARN) of a KMS key Alias "arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"
    ///
    ///
    /// If you use a KMS key ID or an alias of your KMS key, the Amazon SageMaker execution role must include permissions to call kms:Encrypt. If you don't provide a KMS key ID, Amazon SageMaker uses the default KMS key for Amazon S3 for your role's account. Amazon SageMaker uses server-side encryption with KMS managed keys for OutputDataConfig. If you use a bucket policy with an s3:PutObject permission that only allows objects with server-side encryption, set the condition key of s3:x-amz-server-side-encryption to "aws:kms". For more information, see [KMS managed Encryption Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html) in the Amazon Simple Storage Service Developer Guide. The KMS key policy must grant permission to the IAM role that you specify in your CreateEndpoint and UpdateEndpoint requests. For more information, see [Using Key Policies in Amazon Web Services KMS](https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html) in the Amazon Web Services Key Management Service Developer Guide.
    public var kmsKey: Swift.String?
    /// An array of ModelVariantConfig objects. There is one for each variant in the inference experiment. Each ModelVariantConfig object in the array describes the infrastructure configuration for the corresponding variant.
    /// This member is required.
    public var modelVariants: [SageMakerClientTypes.ModelVariantConfig]?
    /// The name for the inference experiment.
    /// This member is required.
    public var name: Swift.String?
    /// The ARN of the IAM role that Amazon SageMaker can assume to access model artifacts and container images, and manage Amazon SageMaker Inference endpoints for model deployment.
    /// This member is required.
    public var roleArn: Swift.String?
    /// The duration for which you want the inference experiment to run. If you don't specify this field, the experiment automatically starts immediately upon creation and concludes after 7 days.
    public var schedule: SageMakerClientTypes.InferenceExperimentSchedule?
    /// The configuration of ShadowMode inference experiment type. Use this field to specify a production variant which takes all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant also specify the percentage of requests that Amazon SageMaker replicates.
    /// This member is required.
    public var shadowModeConfig: SageMakerClientTypes.ShadowModeConfig?
    /// Array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging your Amazon Web Services Resources](https://docs.aws.amazon.com/ARG/latest/userguide/tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?
    /// The type of the inference experiment that you want to run. The following types of experiments are possible:
    ///
    /// * ShadowMode: You can use this type to validate a shadow variant. For more information, see [Shadow tests](https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests.html).
    /// This member is required.
    public var type: SageMakerClientTypes.InferenceExperimentType?

    public init(
        dataStorageConfig: SageMakerClientTypes.InferenceExperimentDataStorageConfig? = nil,
        description: Swift.String? = nil,
        endpointName: Swift.String? = nil,
        kmsKey: Swift.String? = nil,
        modelVariants: [SageMakerClientTypes.ModelVariantConfig]? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        schedule: SageMakerClientTypes.InferenceExperimentSchedule? = nil,
        shadowModeConfig: SageMakerClientTypes.ShadowModeConfig? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        type: SageMakerClientTypes.InferenceExperimentType? = nil
    )
    {
        self.dataStorageConfig = dataStorageConfig
        self.description = description
        self.endpointName = endpointName
        self.kmsKey = kmsKey
        self.modelVariants = modelVariants
        self.name = name
        self.roleArn = roleArn
        self.schedule = schedule
        self.shadowModeConfig = shadowModeConfig
        self.tags = tags
        self.type = type
    }
}

public struct CreateInferenceExperimentOutput {
    /// The ARN for your inference experiment.
    /// This member is required.
    public var inferenceExperimentArn: Swift.String?

    public init(
        inferenceExperimentArn: Swift.String? = nil
    )
    {
        self.inferenceExperimentArn = inferenceExperimentArn
    }
}

extension SageMakerClientTypes {
    /// The configuration for the payload for a recommendation job.
    public struct RecommendationJobPayloadConfig {
        /// The Amazon Simple Storage Service (Amazon S3) path where the sample payload is stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).
        public var samplePayloadUrl: Swift.String?
        /// The supported MIME types for the input data.
        public var supportedContentTypes: [Swift.String]?

        public init(
            samplePayloadUrl: Swift.String? = nil,
            supportedContentTypes: [Swift.String]? = nil
        )
        {
            self.samplePayloadUrl = samplePayloadUrl
            self.supportedContentTypes = supportedContentTypes
        }
    }

}

extension SageMakerClientTypes {

    public enum RecommendationJobSupportedEndpointType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case realtime
        case serverless
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationJobSupportedEndpointType] {
            return [
                .realtime,
                .serverless
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .realtime: return "RealTime"
            case .serverless: return "Serverless"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies mandatory fields for running an Inference Recommender job directly in the [CreateInferenceRecommendationsJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html) API. The fields specified in ContainerConfig override the corresponding fields in the model package. Use ContainerConfig if you want to specify these fields for the recommendation job but don't want to edit them in your model package.
    public struct RecommendationJobContainerConfig {
        /// Specifies the name and shape of the expected data inputs for your trained model with a JSON dictionary form. This field is used for optimizing your model using SageMaker Neo. For more information, see [DataInputConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_InputConfig.html#sagemaker-Type-InputConfig-DataInputConfig).
        public var dataInputConfig: Swift.String?
        /// The machine learning domain of the model and its components. Valid Values: COMPUTER_VISION | NATURAL_LANGUAGE_PROCESSING | MACHINE_LEARNING
        public var domain: Swift.String?
        /// The machine learning framework of the container image. Valid Values: TENSORFLOW | PYTORCH | XGBOOST | SAGEMAKER-SCIKIT-LEARN
        public var framework: Swift.String?
        /// The framework version of the container image.
        public var frameworkVersion: Swift.String?
        /// The name of a pre-trained machine learning model benchmarked by Amazon SageMaker Inference Recommender that matches your model. Valid Values: efficientnetb7 | unet | xgboost | faster-rcnn-resnet101 | nasnetlarge | vgg16 | inception-v3 | mask-rcnn | sagemaker-scikit-learn | densenet201-gluon | resnet18v2-gluon | xception | densenet201 | yolov4 | resnet152 | bert-base-cased | xceptionV1-keras | resnet50 | retinanet
        public var nearestModelName: Swift.String?
        /// Specifies the SamplePayloadUrl and all other sample payload-related fields.
        public var payloadConfig: SageMakerClientTypes.RecommendationJobPayloadConfig?
        /// The endpoint type to receive recommendations for. By default this is null, and the results of the inference recommendation job return a combined list of both real-time and serverless benchmarks. By specifying a value for this field, you can receive a longer list of benchmarks for the desired endpoint type.
        public var supportedEndpointType: SageMakerClientTypes.RecommendationJobSupportedEndpointType?
        /// A list of the instance types that are used to generate inferences in real-time.
        public var supportedInstanceTypes: [Swift.String]?
        /// The supported MIME types for the output data.
        public var supportedResponseMIMETypes: [Swift.String]?
        /// The machine learning task that the model accomplishes. Valid Values: IMAGE_CLASSIFICATION | OBJECT_DETECTION | TEXT_GENERATION | IMAGE_SEGMENTATION | FILL_MASK | CLASSIFICATION | REGRESSION | OTHER
        public var task: Swift.String?

        public init(
            dataInputConfig: Swift.String? = nil,
            domain: Swift.String? = nil,
            framework: Swift.String? = nil,
            frameworkVersion: Swift.String? = nil,
            nearestModelName: Swift.String? = nil,
            payloadConfig: SageMakerClientTypes.RecommendationJobPayloadConfig? = nil,
            supportedEndpointType: SageMakerClientTypes.RecommendationJobSupportedEndpointType? = nil,
            supportedInstanceTypes: [Swift.String]? = nil,
            supportedResponseMIMETypes: [Swift.String]? = nil,
            task: Swift.String? = nil
        )
        {
            self.dataInputConfig = dataInputConfig
            self.domain = domain
            self.framework = framework
            self.frameworkVersion = frameworkVersion
            self.nearestModelName = nearestModelName
            self.payloadConfig = payloadConfig
            self.supportedEndpointType = supportedEndpointType
            self.supportedInstanceTypes = supportedInstanceTypes
            self.supportedResponseMIMETypes = supportedResponseMIMETypes
            self.task = task
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies the range of environment parameters
    public struct EnvironmentParameterRanges {
        /// Specified a list of parameters for each category.
        public var categoricalParameterRanges: [SageMakerClientTypes.CategoricalParameter]?

        public init(
            categoricalParameterRanges: [SageMakerClientTypes.CategoricalParameter]? = nil
        )
        {
            self.categoricalParameterRanges = categoricalParameterRanges
        }
    }

}

extension SageMakerClientTypes {
    /// The endpoint configuration for the load test.
    public struct EndpointInputConfiguration {
        /// The parameter you want to benchmark against.
        public var environmentParameterRanges: SageMakerClientTypes.EnvironmentParameterRanges?
        /// The inference specification name in the model package version.
        public var inferenceSpecificationName: Swift.String?
        /// The instance types to use for the load test.
        public var instanceType: SageMakerClientTypes.ProductionVariantInstanceType?
        /// Specifies the serverless configuration for an endpoint variant.
        public var serverlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig?

        public init(
            environmentParameterRanges: SageMakerClientTypes.EnvironmentParameterRanges? = nil,
            inferenceSpecificationName: Swift.String? = nil,
            instanceType: SageMakerClientTypes.ProductionVariantInstanceType? = nil,
            serverlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig? = nil
        )
        {
            self.environmentParameterRanges = environmentParameterRanges
            self.inferenceSpecificationName = inferenceSpecificationName
            self.instanceType = instanceType
            self.serverlessConfig = serverlessConfig
        }
    }

}

extension SageMakerClientTypes {
    /// Details about a customer endpoint that was compared in an Inference Recommender job.
    public struct EndpointInfo {
        /// The name of a customer's endpoint.
        public var endpointName: Swift.String?

        public init(
            endpointName: Swift.String? = nil
        )
        {
            self.endpointName = endpointName
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies the maximum number of jobs that can run in parallel and the maximum number of jobs that can run.
    public struct RecommendationJobResourceLimit {
        /// Defines the maximum number of load tests.
        public var maxNumberOfTests: Swift.Int?
        /// Defines the maximum number of parallel load tests.
        public var maxParallelOfTests: Swift.Int?

        public init(
            maxNumberOfTests: Swift.Int? = nil,
            maxParallelOfTests: Swift.Int? = nil
        )
        {
            self.maxNumberOfTests = maxNumberOfTests
            self.maxParallelOfTests = maxParallelOfTests
        }
    }

}

extension SageMakerClientTypes {
    /// Defines the traffic pattern.
    public struct Phase {
        /// Specifies how long a traffic phase should be. For custom load tests, the value should be between 120 and 3600. This value should not exceed JobDurationInSeconds.
        public var durationInSeconds: Swift.Int?
        /// Specifies how many concurrent users to start with. The value should be between 1 and 3.
        public var initialNumberOfUsers: Swift.Int?
        /// Specified how many new users to spawn in a minute.
        public var spawnRate: Swift.Int?

        public init(
            durationInSeconds: Swift.Int? = nil,
            initialNumberOfUsers: Swift.Int? = nil,
            spawnRate: Swift.Int? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
            self.initialNumberOfUsers = initialNumberOfUsers
            self.spawnRate = spawnRate
        }
    }

}

extension SageMakerClientTypes {
    /// Defines the stairs traffic pattern for an Inference Recommender load test. This pattern type consists of multiple steps where the number of users increases at each step. Specify either the stairs or phases traffic pattern.
    public struct Stairs {
        /// Defines how long each traffic step should be.
        public var durationInSeconds: Swift.Int?
        /// Specifies how many steps to perform during traffic.
        public var numberOfSteps: Swift.Int?
        /// Specifies how many new users to spawn in each step.
        public var usersPerStep: Swift.Int?

        public init(
            durationInSeconds: Swift.Int? = nil,
            numberOfSteps: Swift.Int? = nil,
            usersPerStep: Swift.Int? = nil
        )
        {
            self.durationInSeconds = durationInSeconds
            self.numberOfSteps = numberOfSteps
            self.usersPerStep = usersPerStep
        }
    }

}

extension SageMakerClientTypes {

    public enum TrafficType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case phases
        case stairs
        case sdkUnknown(Swift.String)

        public static var allCases: [TrafficType] {
            return [
                .phases,
                .stairs
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .phases: return "PHASES"
            case .stairs: return "STAIRS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Defines the traffic pattern of the load test.
    public struct TrafficPattern {
        /// Defines the phases traffic specification.
        public var phases: [SageMakerClientTypes.Phase]?
        /// Defines the stairs traffic pattern.
        public var stairs: SageMakerClientTypes.Stairs?
        /// Defines the traffic patterns. Choose either PHASES or STAIRS.
        public var trafficType: SageMakerClientTypes.TrafficType?

        public init(
            phases: [SageMakerClientTypes.Phase]? = nil,
            stairs: SageMakerClientTypes.Stairs? = nil,
            trafficType: SageMakerClientTypes.TrafficType? = nil
        )
        {
            self.phases = phases
            self.stairs = stairs
            self.trafficType = trafficType
        }
    }

}

extension SageMakerClientTypes {
    /// Inference Recommender provisions SageMaker endpoints with access to VPC in the inference recommendation job.
    public struct RecommendationJobVpcConfig {
        /// The VPC security group IDs. IDs have the form of sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        /// This member is required.
        public var securityGroupIds: [Swift.String]?
        /// The ID of the subnets in the VPC to which you want to connect your model.
        /// This member is required.
        public var subnets: [Swift.String]?

        public init(
            securityGroupIds: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
        }
    }

}

extension SageMakerClientTypes {
    /// The input configuration of the recommendation job.
    public struct RecommendationJobInputConfig {
        /// Specifies mandatory fields for running an Inference Recommender job. The fields specified in ContainerConfig override the corresponding fields in the model package.
        public var containerConfig: SageMakerClientTypes.RecommendationJobContainerConfig?
        /// Specifies the endpoint configuration to use for a job.
        public var endpointConfigurations: [SageMakerClientTypes.EndpointInputConfiguration]?
        /// Existing customer endpoints on which to run an Inference Recommender job.
        public var endpoints: [SageMakerClientTypes.EndpointInfo]?
        /// Specifies the maximum duration of the job, in seconds. The maximum value is 18,000 seconds.
        public var jobDurationInSeconds: Swift.Int?
        /// The name of the created model.
        public var modelName: Swift.String?
        /// The Amazon Resource Name (ARN) of a versioned model package.
        public var modelPackageVersionArn: Swift.String?
        /// Defines the resource limit of the job.
        public var resourceLimit: SageMakerClientTypes.RecommendationJobResourceLimit?
        /// Specifies the traffic pattern of the job.
        public var trafficPattern: SageMakerClientTypes.TrafficPattern?
        /// The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint. This key will be passed to SageMaker Hosting for endpoint creation. The SageMaker execution role must have kms:CreateGrant permission in order to encrypt data on the storage volume of the endpoints created for inference recommendation. The inference recommendation job will fail asynchronously during endpoint configuration creation if the role passed does not have kms:CreateGrant permission. The KmsKeyId can be any of the following formats:
        ///
        /// * // KMS Key ID "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * // Amazon Resource Name (ARN) of a KMS Key "arn:aws:kms:::key/"
        ///
        /// * // KMS Key Alias "alias/ExampleAlias"
        ///
        /// * // Amazon Resource Name (ARN) of a KMS Key Alias "arn:aws:kms:::alias/"
        ///
        ///
        /// For more information about key identifiers, see [Key identifiers (KeyID)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-id) in the Amazon Web Services Key Management Service (Amazon Web Services KMS) documentation.
        public var volumeKmsKeyId: Swift.String?
        /// Inference Recommender provisions SageMaker endpoints with access to VPC in the inference recommendation job.
        public var vpcConfig: SageMakerClientTypes.RecommendationJobVpcConfig?

        public init(
            containerConfig: SageMakerClientTypes.RecommendationJobContainerConfig? = nil,
            endpointConfigurations: [SageMakerClientTypes.EndpointInputConfiguration]? = nil,
            endpoints: [SageMakerClientTypes.EndpointInfo]? = nil,
            jobDurationInSeconds: Swift.Int? = nil,
            modelName: Swift.String? = nil,
            modelPackageVersionArn: Swift.String? = nil,
            resourceLimit: SageMakerClientTypes.RecommendationJobResourceLimit? = nil,
            trafficPattern: SageMakerClientTypes.TrafficPattern? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: SageMakerClientTypes.RecommendationJobVpcConfig? = nil
        )
        {
            self.containerConfig = containerConfig
            self.endpointConfigurations = endpointConfigurations
            self.endpoints = endpoints
            self.jobDurationInSeconds = jobDurationInSeconds
            self.modelName = modelName
            self.modelPackageVersionArn = modelPackageVersionArn
            self.resourceLimit = resourceLimit
            self.trafficPattern = trafficPattern
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }

}

extension SageMakerClientTypes {

    public enum RecommendationJobType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case advanced
        case `default`
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationJobType] {
            return [
                .advanced,
                .default
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .advanced: return "Advanced"
            case .default: return "Default"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Provides information about the output configuration for the compiled model.
    public struct RecommendationJobCompiledOutputConfig {
        /// Identifies the Amazon S3 bucket where you want SageMaker to store the compiled model artifacts.
        public var s3OutputUri: Swift.String?

        public init(
            s3OutputUri: Swift.String? = nil
        )
        {
            self.s3OutputUri = s3OutputUri
        }
    }

}

extension SageMakerClientTypes {
    /// Provides information about the output configuration for the compiled model.
    public struct RecommendationJobOutputConfig {
        /// Provides information about the output configuration for the compiled model.
        public var compiledOutputConfig: SageMakerClientTypes.RecommendationJobCompiledOutputConfig?
        /// The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt your output artifacts with Amazon S3 server-side encryption. The SageMaker execution role must have kms:GenerateDataKey permission. The KmsKeyId can be any of the following formats:
        ///
        /// * // KMS Key ID "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * // Amazon Resource Name (ARN) of a KMS Key "arn:aws:kms:::key/"
        ///
        /// * // KMS Key Alias "alias/ExampleAlias"
        ///
        /// * // Amazon Resource Name (ARN) of a KMS Key Alias "arn:aws:kms:::alias/"
        ///
        ///
        /// For more information about key identifiers, see [Key identifiers (KeyID)](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-id) in the Amazon Web Services Key Management Service (Amazon Web Services KMS) documentation.
        public var kmsKeyId: Swift.String?

        public init(
            compiledOutputConfig: SageMakerClientTypes.RecommendationJobCompiledOutputConfig? = nil,
            kmsKeyId: Swift.String? = nil
        )
        {
            self.compiledOutputConfig = compiledOutputConfig
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension SageMakerClientTypes {

    public enum FlatInvocations: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `continue`
        case stop
        case sdkUnknown(Swift.String)

        public static var allCases: [FlatInvocations] {
            return [
                .continue,
                .stop
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .continue: return "Continue"
            case .stop: return "Stop"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The model latency threshold.
    public struct ModelLatencyThreshold {
        /// The model latency percentile threshold. Acceptable values are P95 and P99. For custom load tests, specify the value as P95.
        public var percentile: Swift.String?
        /// The model latency percentile value in milliseconds.
        public var valueInMilliseconds: Swift.Int?

        public init(
            percentile: Swift.String? = nil,
            valueInMilliseconds: Swift.Int? = nil
        )
        {
            self.percentile = percentile
            self.valueInMilliseconds = valueInMilliseconds
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies conditions for stopping a job. When a job reaches a stopping condition limit, SageMaker ends the job.
    public struct RecommendationJobStoppingConditions {
        /// Stops a load test when the number of invocations (TPS) peaks and flattens, which means that the instance has reached capacity. The default value is Stop. If you want the load test to continue after invocations have flattened, set the value to Continue.
        public var flatInvocations: SageMakerClientTypes.FlatInvocations?
        /// The maximum number of requests per minute expected for the endpoint.
        public var maxInvocations: Swift.Int?
        /// The interval of time taken by a model to respond as viewed from SageMaker. The interval includes the local communication time taken to send the request and to fetch the response from the container of a model and the time taken to complete the inference in the container.
        public var modelLatencyThresholds: [SageMakerClientTypes.ModelLatencyThreshold]?

        public init(
            flatInvocations: SageMakerClientTypes.FlatInvocations? = nil,
            maxInvocations: Swift.Int? = nil,
            modelLatencyThresholds: [SageMakerClientTypes.ModelLatencyThreshold]? = nil
        )
        {
            self.flatInvocations = flatInvocations
            self.maxInvocations = maxInvocations
            self.modelLatencyThresholds = modelLatencyThresholds
        }
    }

}

public struct CreateInferenceRecommendationsJobInput {
    /// Provides information about the versioned model package Amazon Resource Name (ARN), the traffic pattern, and endpoint configurations.
    /// This member is required.
    public var inputConfig: SageMakerClientTypes.RecommendationJobInputConfig?
    /// Description of the recommendation job.
    public var jobDescription: Swift.String?
    /// A name for the recommendation job. The name must be unique within the Amazon Web Services Region and within your Amazon Web Services account. The job name is passed down to the resources created by the recommendation job. The names of resources (such as the model, endpoint configuration, endpoint, and compilation) that are prefixed with the job name are truncated at 40 characters.
    /// This member is required.
    public var jobName: Swift.String?
    /// Defines the type of recommendation job. Specify Default to initiate an instance recommendation and Advanced to initiate a load test. If left unspecified, Amazon SageMaker Inference Recommender will run an instance recommendation (DEFAULT) job.
    /// This member is required.
    public var jobType: SageMakerClientTypes.RecommendationJobType?
    /// Provides information about the output artifacts and the KMS key to use for Amazon S3 server-side encryption.
    public var outputConfig: SageMakerClientTypes.RecommendationJobOutputConfig?
    /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A set of conditions for stopping a recommendation job. If any of the conditions are met, the job is automatically stopped.
    public var stoppingConditions: SageMakerClientTypes.RecommendationJobStoppingConditions?
    /// The metadata that you apply to Amazon Web Services resources to help you categorize and organize them. Each tag consists of a key and a value, both of which you define. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        inputConfig: SageMakerClientTypes.RecommendationJobInputConfig? = nil,
        jobDescription: Swift.String? = nil,
        jobName: Swift.String? = nil,
        jobType: SageMakerClientTypes.RecommendationJobType? = nil,
        outputConfig: SageMakerClientTypes.RecommendationJobOutputConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingConditions: SageMakerClientTypes.RecommendationJobStoppingConditions? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.inputConfig = inputConfig
        self.jobDescription = jobDescription
        self.jobName = jobName
        self.jobType = jobType
        self.outputConfig = outputConfig
        self.roleArn = roleArn
        self.stoppingConditions = stoppingConditions
        self.tags = tags
    }
}

public struct CreateInferenceRecommendationsJobOutput {
    /// The Amazon Resource Name (ARN) of the recommendation job.
    /// This member is required.
    public var jobArn: Swift.String?

    public init(
        jobArn: Swift.String? = nil
    )
    {
        self.jobArn = jobArn
    }
}

extension SageMakerClientTypes {
    /// Provided configuration information for the worker UI for a labeling job. Provide either HumanTaskUiArn or UiTemplateS3Uri. For named entity recognition, 3D point cloud and video frame labeling jobs, use HumanTaskUiArn. For all other Ground Truth built-in task types and custom task types, use UiTemplateS3Uri to specify the location of a worker task template in Amazon S3.
    public struct UiConfig {
        /// The ARN of the worker task template used to render the worker UI and tools for labeling job tasks. Use this parameter when you are creating a labeling job for named entity recognition, 3D point cloud and video frame labeling jobs. Use your labeling job task type to select one of the following ARNs and use it with this parameter when you create a labeling job. Replace aws-region with the Amazon Web Services Region you are creating your labeling job in. For example, replace aws-region with us-west-1 if you create a labeling job in US West (N. California). Named Entity Recognition Use the following HumanTaskUiArn for named entity recognition labeling jobs: arn:aws:sagemaker:aws-region:394669845002:human-task-ui/NamedEntityRecognition 3D Point Cloud HumanTaskUiArns Use this HumanTaskUiArn for 3D point cloud object detection and 3D point cloud object detection adjustment labeling jobs.
        ///
        /// * arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudObjectDetection
        ///
        ///
        /// Use this HumanTaskUiArn for 3D point cloud object tracking and 3D point cloud object tracking adjustment labeling jobs.
        ///
        /// * arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudObjectTracking
        ///
        ///
        /// Use this HumanTaskUiArn for 3D point cloud semantic segmentation and 3D point cloud semantic segmentation adjustment labeling jobs.
        ///
        /// * arn:aws:sagemaker:aws-region:394669845002:human-task-ui/PointCloudSemanticSegmentation
        ///
        ///
        /// Video Frame HumanTaskUiArns Use this HumanTaskUiArn for video frame object detection and video frame object detection adjustment labeling jobs.
        ///
        /// * arn:aws:sagemaker:region:394669845002:human-task-ui/VideoObjectDetection
        ///
        ///
        /// Use this HumanTaskUiArn for video frame object tracking and video frame object tracking adjustment labeling jobs.
        ///
        /// * arn:aws:sagemaker:aws-region:394669845002:human-task-ui/VideoObjectTracking
        public var humanTaskUiArn: Swift.String?
        /// The Amazon S3 bucket location of the UI template, or worker task template. This is the template used to render the worker UI and tools for labeling job tasks. For more information about the contents of a UI template, see [ Creating Your Custom Labeling Task Template](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates-step2.html).
        public var uiTemplateS3Uri: Swift.String?

        public init(
            humanTaskUiArn: Swift.String? = nil,
            uiTemplateS3Uri: Swift.String? = nil
        )
        {
            self.humanTaskUiArn = humanTaskUiArn
            self.uiTemplateS3Uri = uiTemplateS3Uri
        }
    }

}

extension SageMakerClientTypes {
    /// Information required for human workers to complete a labeling task.
    public struct HumanTaskConfig {
        /// Configures how labels are consolidated across human workers.
        /// This member is required.
        public var annotationConsolidationConfig: SageMakerClientTypes.AnnotationConsolidationConfig?
        /// Defines the maximum number of data objects that can be labeled by human workers at the same time. Also referred to as batch size. Each object may have more than one worker at one time. The default value is 1000 objects. To increase the maximum value to 5000 objects, contact Amazon Web Services Support.
        public var maxConcurrentTaskCount: Swift.Int?
        /// The number of human workers that will label an object.
        /// This member is required.
        public var numberOfHumanWorkersPerDataObject: Swift.Int?
        /// The Amazon Resource Name (ARN) of a Lambda function that is run before a data object is sent to a human worker. Use this function to provide input to a custom labeling job. For [built-in task types](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html), use one of the following Amazon SageMaker Ground Truth Lambda function ARNs for PreHumanTaskLambdaArn. For custom labeling workflows, see [Pre-annotation Lambda](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates-step3.html#sms-custom-templates-step3-prelambda). Bounding box - Finds the most similar boxes from different workers based on the Jaccard index of the boxes.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-BoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-BoundingBox
        ///
        ///
        /// Image classification - Uses a variant of the Expectation Maximization approach to estimate the true class of an image based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-ImageMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-ImageMultiClass
        ///
        ///
        /// Multi-label image classification - Uses a variant of the Expectation Maximization approach to estimate the true classes of an image based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-ImageMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-ImageMultiClassMultiLabel
        ///
        ///
        /// Semantic segmentation - Treats each pixel in an image as a multi-class classification and treats pixel annotations from workers as "votes" for the correct label.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-SemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-SemanticSegmentation
        ///
        ///
        /// Text classification - Uses a variant of the Expectation Maximization approach to estimate the true class of text based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-TextMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-TextMultiClass
        ///
        ///
        /// Multi-label text classification - Uses a variant of the Expectation Maximization approach to estimate the true classes of text based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-TextMultiClassMultiLabel
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-TextMultiClassMultiLabel
        ///
        ///
        /// Named entity recognition - Groups similar selections and calculates aggregate boundaries, resolving to most-assigned label.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-NamedEntityRecognition
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-NamedEntityRecognition
        ///
        ///
        /// Video Classification - Use this task type when you need workers to classify videos using predefined labels that you specify. Workers are shown videos and are asked to choose one label for each video.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoMultiClass
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoMultiClass
        ///
        ///
        /// Video Frame Object Detection - Use this task type to have workers identify and locate objects in a sequence of video frames (images extracted from a video) using bounding boxes. For example, you can use this task to ask workers to identify and localize various objects in a series of video frames, such as cars, bikes, and pedestrians.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoObjectDetection
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoObjectDetection
        ///
        ///
        /// Video Frame Object Tracking - Use this task type to have workers track the movement of objects in a sequence of video frames (images extracted from a video) using bounding boxes. For example, you can use this task to ask workers to track the movement of objects, such as cars, bikes, and pedestrians.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VideoObjectTracking
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-VideoObjectTracking
        ///
        ///
        /// 3D Point Cloud Modalities Use the following pre-annotation lambdas for 3D point cloud labeling modality tasks. See [3D Point Cloud Task types ](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud-task-types.html) to learn more. 3D Point Cloud Object Detection - Use this task type when you want workers to classify objects in a 3D point cloud by drawing 3D cuboids around objects. For example, you can use this task type to ask workers to identify different types of objects in a point cloud, such as cars, bikes, and pedestrians.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudObjectDetection
        ///
        ///
        /// 3D Point Cloud Object Tracking - Use this task type when you want workers to draw 3D cuboids around objects that appear in a sequence of 3D point cloud frames. For example, you can use this task type to ask workers to track the movement of vehicles across multiple point cloud frames.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudObjectTracking
        ///
        ///
        /// 3D Point Cloud Semantic Segmentation - Use this task type when you want workers to create a point-level semantic segmentation masks by painting objects in a 3D point cloud using different colors where each color is assigned to one of the classes you specify.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-3DPointCloudSemanticSegmentation
        ///
        ///
        /// Use the following ARNs for Label Verification and Adjustment Jobs Use label verification and adjustment jobs to review and adjust labels. To learn more, see [Verify and Adjust Labels ](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html). Bounding box verification - Uses a variant of the Expectation Maximization approach to estimate the true class of verification judgement for bounding box labels based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VerificationBoundingBox
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-VerificationBoundingBox
        ///
        ///
        /// Bounding box adjustment - Finds the most similar boxes from different workers based on the Jaccard index of the adjusted annotations.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentBoundingBox
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentBoundingBox
        ///
        ///
        /// Semantic segmentation verification - Uses a variant of the Expectation Maximization approach to estimate the true class of verification judgment for semantic segmentation labels based on annotations from individual workers.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-VerificationSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-VerificationSemanticSegmentation
        ///
        ///
        /// Semantic segmentation adjustment - Treats each pixel in an image as a multi-class classification and treats pixel adjusted annotations from workers as "votes" for the correct label.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentSemanticSegmentation
        ///
        ///
        /// Video Frame Object Detection Adjustment - Use this task type when you want workers to adjust bounding boxes that workers have added to video frames to classify and localize objects in a sequence of video frames.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentVideoObjectDetection
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentVideoObjectDetection
        ///
        ///
        /// Video Frame Object Tracking Adjustment - Use this task type when you want workers to adjust bounding boxes that workers have added to video frames to track object movement across a sequence of video frames.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-AdjustmentVideoObjectTracking
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-AdjustmentVideoObjectTracking
        ///
        ///
        /// 3D point cloud object detection adjustment - Adjust 3D cuboids in a point cloud frame.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudObjectDetection
        ///
        ///
        /// 3D point cloud object tracking adjustment - Adjust 3D cuboids across a sequence of point cloud frames.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudObjectTracking
        ///
        ///
        /// 3D point cloud semantic segmentation adjustment - Adjust semantic segmentation masks in a 3D point cloud.
        ///
        /// * arn:aws:lambda:us-east-1:432418664414:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-east-2:266458841044:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:us-west-2:081040173940:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-1:568282634449:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-1:477331159723:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-2:454466003867:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-south-1:565803892007:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-central-1:203001061592:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-northeast-2:845288260483:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:eu-west-2:487402164563:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ap-southeast-1:377565633583:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        ///
        /// * arn:aws:lambda:ca-central-1:918755190332:function:PRE-Adjustment3DPointCloudSemanticSegmentation
        /// This member is required.
        public var preHumanTaskLambdaArn: Swift.String?
        /// The price that you pay for each task performed by an Amazon Mechanical Turk worker.
        public var publicWorkforceTaskPrice: SageMakerClientTypes.PublicWorkforceTaskPrice?
        /// The length of time that a task remains available for labeling by human workers. The default and maximum values for this parameter depend on the type of workforce you use.
        ///
        /// * If you choose the Amazon Mechanical Turk workforce, the maximum is 12 hours (43,200 seconds). The default is 6 hours (21,600 seconds).
        ///
        /// * If you choose a private or vendor workforce, the default value is 30 days (2592,000 seconds) for non-AL mode. For most users, the maximum is also 30 days.
        public var taskAvailabilityLifetimeInSeconds: Swift.Int?
        /// A description of the task for your human workers.
        /// This member is required.
        public var taskDescription: Swift.String?
        /// Keywords used to describe the task so that workers on Amazon Mechanical Turk can discover the task.
        public var taskKeywords: [Swift.String]?
        /// The amount of time that a worker has to complete a task. If you create a custom labeling job, the maximum value for this parameter is 8 hours (28,800 seconds). If you create a labeling job using a [built-in task type](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html) the maximum for this parameter depends on the task type you use:
        ///
        /// * For [image](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-label-images.html) and [text](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-label-text.html) labeling jobs, the maximum is 8 hours (28,800 seconds).
        ///
        /// * For [3D point cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud.html) and [video frame](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-video.html) labeling jobs, the maximum is 30 days (2952,000 seconds) for non-AL mode. For most users, the maximum is also 30 days.
        /// This member is required.
        public var taskTimeLimitInSeconds: Swift.Int?
        /// A title for the task for your human workers.
        /// This member is required.
        public var taskTitle: Swift.String?
        /// Information about the user interface that workers use to complete the labeling task.
        /// This member is required.
        public var uiConfig: SageMakerClientTypes.UiConfig?
        /// The Amazon Resource Name (ARN) of the work team assigned to complete the tasks.
        /// This member is required.
        public var workteamArn: Swift.String?

        public init(
            annotationConsolidationConfig: SageMakerClientTypes.AnnotationConsolidationConfig? = nil,
            maxConcurrentTaskCount: Swift.Int? = nil,
            numberOfHumanWorkersPerDataObject: Swift.Int? = nil,
            preHumanTaskLambdaArn: Swift.String? = nil,
            publicWorkforceTaskPrice: SageMakerClientTypes.PublicWorkforceTaskPrice? = nil,
            taskAvailabilityLifetimeInSeconds: Swift.Int? = nil,
            taskDescription: Swift.String? = nil,
            taskKeywords: [Swift.String]? = nil,
            taskTimeLimitInSeconds: Swift.Int? = nil,
            taskTitle: Swift.String? = nil,
            uiConfig: SageMakerClientTypes.UiConfig? = nil,
            workteamArn: Swift.String? = nil
        )
        {
            self.annotationConsolidationConfig = annotationConsolidationConfig
            self.maxConcurrentTaskCount = maxConcurrentTaskCount
            self.numberOfHumanWorkersPerDataObject = numberOfHumanWorkersPerDataObject
            self.preHumanTaskLambdaArn = preHumanTaskLambdaArn
            self.publicWorkforceTaskPrice = publicWorkforceTaskPrice
            self.taskAvailabilityLifetimeInSeconds = taskAvailabilityLifetimeInSeconds
            self.taskDescription = taskDescription
            self.taskKeywords = taskKeywords
            self.taskTimeLimitInSeconds = taskTimeLimitInSeconds
            self.taskTitle = taskTitle
            self.uiConfig = uiConfig
            self.workteamArn = workteamArn
        }
    }

}

extension SageMakerClientTypes {
    /// Attributes of the data specified by the customer. Use these to describe the data to be labeled.
    public struct LabelingJobDataAttributes {
        /// Declares that your content is free of personally identifiable information or adult content. SageMaker may restrict the Amazon Mechanical Turk workers that can view your task based on this information.
        public var contentClassifiers: [SageMakerClientTypes.ContentClassifier]?

        public init(
            contentClassifiers: [SageMakerClientTypes.ContentClassifier]? = nil
        )
        {
            self.contentClassifiers = contentClassifiers
        }
    }

}

extension SageMakerClientTypes {
    /// The Amazon S3 location of the input data objects.
    public struct LabelingJobS3DataSource {
        /// The Amazon S3 location of the manifest file that describes the input data objects. The input manifest file referenced in ManifestS3Uri must contain one of the following keys: source-ref or source. The value of the keys are interpreted as follows:
        ///
        /// * source-ref: The source of the object is the Amazon S3 object specified in the value. Use this value when the object is a binary object, such as an image.
        ///
        /// * source: The source of the object is the value. Use this value when the object is a text value.
        ///
        ///
        /// If you are a new user of Ground Truth, it is recommended you review [Use an Input Manifest File ](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-input-data-input-manifest.html) in the Amazon SageMaker Developer Guide to learn how to create an input manifest file.
        /// This member is required.
        public var manifestS3Uri: Swift.String?

        public init(
            manifestS3Uri: Swift.String? = nil
        )
        {
            self.manifestS3Uri = manifestS3Uri
        }
    }

}

extension SageMakerClientTypes {
    /// An Amazon SNS data source used for streaming labeling jobs.
    public struct LabelingJobSnsDataSource {
        /// The Amazon SNS input topic Amazon Resource Name (ARN). Specify the ARN of the input topic you will use to send new data objects to a streaming labeling job.
        /// This member is required.
        public var snsTopicArn: Swift.String?

        public init(
            snsTopicArn: Swift.String? = nil
        )
        {
            self.snsTopicArn = snsTopicArn
        }
    }

}

extension SageMakerClientTypes {
    /// Provides information about the location of input data. You must specify at least one of the following: S3DataSource or SnsDataSource. Use SnsDataSource to specify an SNS input topic for a streaming labeling job. If you do not specify and SNS input topic ARN, Ground Truth will create a one-time labeling job. Use S3DataSource to specify an input manifest file for both streaming and one-time labeling jobs. Adding an S3DataSource is optional if you use SnsDataSource to create a streaming labeling job.
    public struct LabelingJobDataSource {
        /// The Amazon S3 location of the input data objects.
        public var s3DataSource: SageMakerClientTypes.LabelingJobS3DataSource?
        /// An Amazon SNS data source used for streaming labeling jobs. To learn more, see [Send Data to a Streaming Labeling Job](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-labeling-job.html#sms-streaming-how-it-works-send-data).
        public var snsDataSource: SageMakerClientTypes.LabelingJobSnsDataSource?

        public init(
            s3DataSource: SageMakerClientTypes.LabelingJobS3DataSource? = nil,
            snsDataSource: SageMakerClientTypes.LabelingJobSnsDataSource? = nil
        )
        {
            self.s3DataSource = s3DataSource
            self.snsDataSource = snsDataSource
        }
    }

}

extension SageMakerClientTypes {
    /// Input configuration information for a labeling job.
    public struct LabelingJobInputConfig {
        /// Attributes of the data specified by the customer.
        public var dataAttributes: SageMakerClientTypes.LabelingJobDataAttributes?
        /// The location of the input data.
        /// This member is required.
        public var dataSource: SageMakerClientTypes.LabelingJobDataSource?

        public init(
            dataAttributes: SageMakerClientTypes.LabelingJobDataAttributes? = nil,
            dataSource: SageMakerClientTypes.LabelingJobDataSource? = nil
        )
        {
            self.dataAttributes = dataAttributes
            self.dataSource = dataSource
        }
    }

}

extension SageMakerClientTypes {
    /// Configure encryption on the storage volume attached to the ML compute instance used to run automated data labeling model training and inference.
    public struct LabelingJobResourceConfig {
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the training and inference jobs used for automated data labeling. You can only specify a VolumeKmsKeyId when you create a labeling job with automated data labeling enabled using the API operation CreateLabelingJob. You cannot specify an Amazon Web Services KMS key to encrypt the storage volume used for automated data labeling model training and inference when you create a labeling job using the console. To learn more, see [Output Data and Storage Volume Encryption](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-security.html). The VolumeKmsKeyId can be any of the following formats:
        ///
        /// * KMS Key ID "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to. You can control access to and from your resources by configuring a VPC. For more information, see [Give SageMaker Access to Resources in your Amazon VPC](https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html).
        public var vpcConfig: SageMakerClientTypes.VpcConfig?

        public init(
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: SageMakerClientTypes.VpcConfig? = nil
        )
        {
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }

}

extension SageMakerClientTypes {
    /// Provides configuration information for auto-labeling of your data objects. A LabelingJobAlgorithmsConfig object must be supplied in order to use auto-labeling.
    public struct LabelingJobAlgorithmsConfig {
        /// At the end of an auto-label job Ground Truth sends the Amazon Resource Name (ARN) of the final model used for auto-labeling. You can use this model as the starting point for subsequent similar jobs by providing the ARN of the model here.
        public var initialActiveLearningModelArn: Swift.String?
        /// Specifies the Amazon Resource Name (ARN) of the algorithm used for auto-labeling. You must select one of the following ARNs:
        ///
        /// * Image classification arn:aws:sagemaker:region:027400017018:labeling-job-algorithm-specification/image-classification
        ///
        /// * Text classification arn:aws:sagemaker:region:027400017018:labeling-job-algorithm-specification/text-classification
        ///
        /// * Object detection arn:aws:sagemaker:region:027400017018:labeling-job-algorithm-specification/object-detection
        ///
        /// * Semantic Segmentation arn:aws:sagemaker:region:027400017018:labeling-job-algorithm-specification/semantic-segmentation
        /// This member is required.
        public var labelingJobAlgorithmSpecificationArn: Swift.String?
        /// Provides configuration information for a labeling job.
        public var labelingJobResourceConfig: SageMakerClientTypes.LabelingJobResourceConfig?

        public init(
            initialActiveLearningModelArn: Swift.String? = nil,
            labelingJobAlgorithmSpecificationArn: Swift.String? = nil,
            labelingJobResourceConfig: SageMakerClientTypes.LabelingJobResourceConfig? = nil
        )
        {
            self.initialActiveLearningModelArn = initialActiveLearningModelArn
            self.labelingJobAlgorithmSpecificationArn = labelingJobAlgorithmSpecificationArn
            self.labelingJobResourceConfig = labelingJobResourceConfig
        }
    }

}

extension SageMakerClientTypes {
    /// Output configuration information for a labeling job.
    public struct LabelingJobOutputConfig {
        /// The Amazon Web Services Key Management Service ID of the key used to encrypt the output data, if any. If you provide your own KMS key ID, you must add the required permissions to your KMS key described in [Encrypt Output Data and Storage Volume with Amazon Web Services KMS](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-security-permission.html#sms-security-kms-permissions). If you don't provide a KMS key ID, Amazon SageMaker uses the default Amazon Web Services KMS key for Amazon S3 for your role's account to encrypt your output data. If you use a bucket policy with an s3:PutObject permission that only allows objects with server-side encryption, set the condition key of s3:x-amz-server-side-encryption to "aws:kms". For more information, see [KMS-Managed Encryption Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html) in the Amazon Simple Storage Service Developer Guide.
        public var kmsKeyId: Swift.String?
        /// The Amazon S3 location to write output data.
        /// This member is required.
        public var s3OutputPath: Swift.String?
        /// An Amazon Simple Notification Service (Amazon SNS) output topic ARN. Provide a SnsTopicArn if you want to do real time chaining to another streaming job and receive an Amazon SNS notifications each time a data object is submitted by a worker. If you provide an SnsTopicArn in OutputConfig, when workers complete labeling tasks, Ground Truth will send labeling task output data to the SNS output topic you specify here. To learn more, see [Receive Output Data from a Streaming Labeling Job](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-labeling-job.html#sms-streaming-how-it-works-output-data).
        public var snsTopicArn: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil,
            s3OutputPath: Swift.String? = nil,
            snsTopicArn: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3OutputPath = s3OutputPath
            self.snsTopicArn = snsTopicArn
        }
    }

}

extension SageMakerClientTypes {
    /// A set of conditions for stopping a labeling job. If any of the conditions are met, the job is automatically stopped. You can use these conditions to control the cost of data labeling. Labeling jobs fail after 30 days with an appropriate client error message.
    public struct LabelingJobStoppingConditions {
        /// The maximum number of objects that can be labeled by human workers.
        public var maxHumanLabeledObjectCount: Swift.Int?
        /// The maximum number of input data objects that should be labeled.
        public var maxPercentageOfInputDatasetLabeled: Swift.Int?

        public init(
            maxHumanLabeledObjectCount: Swift.Int? = nil,
            maxPercentageOfInputDatasetLabeled: Swift.Int? = nil
        )
        {
            self.maxHumanLabeledObjectCount = maxHumanLabeledObjectCount
            self.maxPercentageOfInputDatasetLabeled = maxPercentageOfInputDatasetLabeled
        }
    }

}

public struct CreateLabelingJobInput {
    /// Configures the labeling task and how it is presented to workers; including, but not limited to price, keywords, and batch size (task count).
    /// This member is required.
    public var humanTaskConfig: SageMakerClientTypes.HumanTaskConfig?
    /// Input data for the labeling job, such as the Amazon S3 location of the data objects and the location of the manifest file that describes the data objects. You must specify at least one of the following: S3DataSource or SnsDataSource.
    ///
    /// * Use SnsDataSource to specify an SNS input topic for a streaming labeling job. If you do not specify and SNS input topic ARN, Ground Truth will create a one-time labeling job that stops after all data objects in the input manifest file have been labeled.
    ///
    /// * Use S3DataSource to specify an input manifest file for both streaming and one-time labeling jobs. Adding an S3DataSource is optional if you use SnsDataSource to create a streaming labeling job.
    ///
    ///
    /// If you use the Amazon Mechanical Turk workforce, your input data should not include confidential information, personal information or protected health information. Use ContentClassifiers to specify that your data is free of personally identifiable information and adult content.
    /// This member is required.
    public var inputConfig: SageMakerClientTypes.LabelingJobInputConfig?
    /// The attribute name to use for the label in the output manifest file. This is the key for the key/value pair formed with the label that a worker assigns to the object. The LabelAttributeName must meet the following requirements.
    ///
    /// * The name can't end with "-metadata".
    ///
    /// * If you are using one of the following [built-in task types](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html), the attribute name must end with "-ref". If the task type you are using is not listed below, the attribute name must not end with "-ref".
    ///
    /// * Image semantic segmentation (SemanticSegmentation), and adjustment (AdjustmentSemanticSegmentation) and verification (VerificationSemanticSegmentation) labeling jobs for this task type.
    ///
    /// * Video frame object detection (VideoObjectDetection), and adjustment and verification (AdjustmentVideoObjectDetection) labeling jobs for this task type.
    ///
    /// * Video frame object tracking (VideoObjectTracking), and adjustment and verification (AdjustmentVideoObjectTracking) labeling jobs for this task type.
    ///
    /// * 3D point cloud semantic segmentation (3DPointCloudSemanticSegmentation), and adjustment and verification (Adjustment3DPointCloudSemanticSegmentation) labeling jobs for this task type.
    ///
    /// * 3D point cloud object tracking (3DPointCloudObjectTracking), and adjustment and verification (Adjustment3DPointCloudObjectTracking) labeling jobs for this task type.
    ///
    ///
    ///
    ///
    ///
    /// If you are creating an adjustment or verification labeling job, you must use a different LabelAttributeName than the one used in the original labeling job. The original labeling job is the Ground Truth labeling job that produced the labels that you want verified or adjusted. To learn more about adjustment and verification labeling jobs, see [Verify and Adjust Labels](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-verification-data.html).
    /// This member is required.
    public var labelAttributeName: Swift.String?
    /// The S3 URI of the file, referred to as a label category configuration file, that defines the categories used to label the data objects. For 3D point cloud and video frame task types, you can add label category attributes and frame attributes to your label category configuration file. To learn how, see [Create a Labeling Category Configuration File for 3D Point Cloud Labeling Jobs](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud-label-category-config.html). For named entity recognition jobs, in addition to "labels", you must provide worker instructions in the label category configuration file using the "instructions" parameter: "instructions": {"shortInstruction":"
    /// Add header
    ///
    ///
    ///     Add Instructions
    ///
    /// ", "fullInstruction":"Add additional instructions."}. For details and an example, see [Create a Named Entity Recognition Labeling Job (API) ](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-named-entity-recg.html#sms-creating-ner-api). For all other [built-in task types](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html) and [custom tasks](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates.html), your label category configuration file must be a JSON file in the following format. Identify the labels you want to use by replacing label_1, label_2,...,label_n with your label categories. {
    ///     "document-version": "2018-11-28",
    ///
    ///
    ///     "labels": [{"label": "label_1"},{"label": "label_2"},...{"label": "label_n"}]
    ///
    /// } Note the following about the label category configuration file:
    ///
    /// * For image classification and text classification (single and multi-label) you must specify at least two label categories. For all other task types, the minimum number of label categories required is one.
    ///
    /// * Each label category must be unique, you cannot specify duplicate label categories.
    ///
    /// * If you create a 3D point cloud or video frame adjustment or verification labeling job, you must include auditLabelAttributeName in the label category configuration. Use this parameter to enter the [LabelAttributeName](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateLabelingJob.html#sagemaker-CreateLabelingJob-request-LabelAttributeName) of the labeling job you want to adjust or verify annotations of.
    public var labelCategoryConfigS3Uri: Swift.String?
    /// Configures the information required to perform automated data labeling.
    public var labelingJobAlgorithmsConfig: SageMakerClientTypes.LabelingJobAlgorithmsConfig?
    /// The name of the labeling job. This name is used to identify the job in a list of labeling jobs. Labeling job names must be unique within an Amazon Web Services account and region. LabelingJobName is not case sensitive. For example, Example-job and example-job are considered the same labeling job name by Ground Truth.
    /// This member is required.
    public var labelingJobName: Swift.String?
    /// The location of the output data and the Amazon Web Services Key Management Service key ID for the key used to encrypt the output data, if any.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.LabelingJobOutputConfig?
    /// The Amazon Resource Number (ARN) that Amazon SageMaker assumes to perform tasks on your behalf during data labeling. You must grant this role the necessary permissions so that Amazon SageMaker can successfully complete data labeling.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A set of conditions for stopping the labeling job. If any of the conditions are met, the job is automatically stopped. You can use these conditions to control the cost of data labeling.
    public var stoppingConditions: SageMakerClientTypes.LabelingJobStoppingConditions?
    /// An array of key/value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what) in the Amazon Web Services Billing and Cost Management User Guide.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        humanTaskConfig: SageMakerClientTypes.HumanTaskConfig? = nil,
        inputConfig: SageMakerClientTypes.LabelingJobInputConfig? = nil,
        labelAttributeName: Swift.String? = nil,
        labelCategoryConfigS3Uri: Swift.String? = nil,
        labelingJobAlgorithmsConfig: SageMakerClientTypes.LabelingJobAlgorithmsConfig? = nil,
        labelingJobName: Swift.String? = nil,
        outputConfig: SageMakerClientTypes.LabelingJobOutputConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingConditions: SageMakerClientTypes.LabelingJobStoppingConditions? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.humanTaskConfig = humanTaskConfig
        self.inputConfig = inputConfig
        self.labelAttributeName = labelAttributeName
        self.labelCategoryConfigS3Uri = labelCategoryConfigS3Uri
        self.labelingJobAlgorithmsConfig = labelingJobAlgorithmsConfig
        self.labelingJobName = labelingJobName
        self.outputConfig = outputConfig
        self.roleArn = roleArn
        self.stoppingConditions = stoppingConditions
        self.tags = tags
    }
}

public struct CreateLabelingJobOutput {
    /// The Amazon Resource Name (ARN) of the labeling job. You use this ARN to identify the labeling job.
    /// This member is required.
    public var labelingJobArn: Swift.String?

    public init(
        labelingJobArn: Swift.String? = nil
    )
    {
        self.labelingJobArn = labelingJobArn
    }
}

extension SageMakerClientTypes {

    public enum TrackingServerSize: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case l
        case m
        case s
        case sdkUnknown(Swift.String)

        public static var allCases: [TrackingServerSize] {
            return [
                .l,
                .m,
                .s
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .l: return "Large"
            case .m: return "Medium"
            case .s: return "Small"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateMlflowTrackingServerInput {
    /// The S3 URI for a general purpose bucket to use as the MLflow Tracking Server artifact store.
    /// This member is required.
    public var artifactStoreUri: Swift.String?
    /// Whether to enable or disable automatic registration of new MLflow models to the SageMaker Model Registry. To enable automatic model registration, set this value to True. To disable automatic model registration, set this value to False. If not specified, AutomaticModelRegistration defaults to False.
    public var automaticModelRegistration: Swift.Bool?
    /// The version of MLflow that the tracking server uses. To see which MLflow versions are available to use, see [How it works](https://docs.aws.amazon.com/sagemaker/latest/dg/mlflow.html#mlflow-create-tracking-server-how-it-works).
    public var mlflowVersion: Swift.String?
    /// The Amazon Resource Name (ARN) for an IAM role in your account that the MLflow Tracking Server uses to access the artifact store in Amazon S3. The role should have AmazonS3FullAccess permissions. For more information on IAM permissions for tracking server creation, see [Set up IAM permissions for MLflow](https://docs.aws.amazon.com/sagemaker/latest/dg/mlflow-create-tracking-server-iam.html).
    /// This member is required.
    public var roleArn: Swift.String?
    /// Tags consisting of key-value pairs used to manage metadata for the tracking server.
    public var tags: [SageMakerClientTypes.Tag]?
    /// A unique string identifying the tracking server name. This string is part of the tracking server ARN.
    /// This member is required.
    public var trackingServerName: Swift.String?
    /// The size of the tracking server you want to create. You can choose between "Small", "Medium", and "Large". The default MLflow Tracking Server configuration size is "Small". You can choose a size depending on the projected use of the tracking server such as the volume of data logged, number of users, and frequency of use. We recommend using a small tracking server for teams of up to 25 users, a medium tracking server for teams of up to 50 users, and a large tracking server for teams of up to 100 users.
    public var trackingServerSize: SageMakerClientTypes.TrackingServerSize?
    /// The day and time of the week in Coordinated Universal Time (UTC) 24-hour standard time that weekly maintenance updates are scheduled. For example: TUE:03:30.
    public var weeklyMaintenanceWindowStart: Swift.String?

    public init(
        artifactStoreUri: Swift.String? = nil,
        automaticModelRegistration: Swift.Bool? = nil,
        mlflowVersion: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        trackingServerName: Swift.String? = nil,
        trackingServerSize: SageMakerClientTypes.TrackingServerSize? = nil,
        weeklyMaintenanceWindowStart: Swift.String? = nil
    )
    {
        self.artifactStoreUri = artifactStoreUri
        self.automaticModelRegistration = automaticModelRegistration
        self.mlflowVersion = mlflowVersion
        self.roleArn = roleArn
        self.tags = tags
        self.trackingServerName = trackingServerName
        self.trackingServerSize = trackingServerSize
        self.weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStart
    }
}

public struct CreateMlflowTrackingServerOutput {
    /// The ARN of the tracking server.
    public var trackingServerArn: Swift.String?

    public init(
        trackingServerArn: Swift.String? = nil
    )
    {
        self.trackingServerArn = trackingServerArn
    }
}

extension SageMakerClientTypes {

    public enum InferenceExecutionMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case direct
        case serial
        case sdkUnknown(Swift.String)

        public static var allCases: [InferenceExecutionMode] {
            return [
                .direct,
                .serial
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .direct: return "Direct"
            case .serial: return "Serial"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies details about how containers in a multi-container endpoint are run.
    public struct InferenceExecutionConfig {
        /// How containers in a multi-container are run. The following values are valid.
        ///
        /// * SERIAL - Containers run as a serial pipeline.
        ///
        /// * DIRECT - Only the individual container that you specify is run.
        /// This member is required.
        public var mode: SageMakerClientTypes.InferenceExecutionMode?

        public init(
            mode: SageMakerClientTypes.InferenceExecutionMode? = nil
        )
        {
            self.mode = mode
        }
    }

}

public struct CreateModelInput {
    /// Specifies the containers in the inference pipeline.
    public var containers: [SageMakerClientTypes.ContainerDefinition]?
    /// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
    public var enableNetworkIsolation: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the IAM role that SageMaker can assume to access model artifacts and docker image for deployment on ML compute instances or for batch transform jobs. Deploying on ML compute instances is part of model hosting. For more information, see [SageMaker Roles](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html). To be able to pass this role to SageMaker, the caller of this API must have the iam:PassRole permission.
    public var executionRoleArn: Swift.String?
    /// Specifies details of how containers in a multi-container endpoint are called.
    public var inferenceExecutionConfig: SageMakerClientTypes.InferenceExecutionConfig?
    /// The name of the new model.
    /// This member is required.
    public var modelName: Swift.String?
    /// The location of the primary docker image containing inference code, associated artifacts, and custom environment map that the inference code uses when the model is deployed for predictions.
    public var primaryContainer: SageMakerClientTypes.ContainerDefinition?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?
    /// A [VpcConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html) object that specifies the VPC that you want your model to connect to. Control access to and from your model container by configuring the VPC. VpcConfig is used in hosting services and in batch transform. For more information, see [Protect Endpoints by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html) and [Protect Data in Batch Transform Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-vpc.html).
    public var vpcConfig: SageMakerClientTypes.VpcConfig?

    public init(
        containers: [SageMakerClientTypes.ContainerDefinition]? = nil,
        enableNetworkIsolation: Swift.Bool? = nil,
        executionRoleArn: Swift.String? = nil,
        inferenceExecutionConfig: SageMakerClientTypes.InferenceExecutionConfig? = nil,
        modelName: Swift.String? = nil,
        primaryContainer: SageMakerClientTypes.ContainerDefinition? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        vpcConfig: SageMakerClientTypes.VpcConfig? = nil
    )
    {
        self.containers = containers
        self.enableNetworkIsolation = enableNetworkIsolation
        self.executionRoleArn = executionRoleArn
        self.inferenceExecutionConfig = inferenceExecutionConfig
        self.modelName = modelName
        self.primaryContainer = primaryContainer
        self.tags = tags
        self.vpcConfig = vpcConfig
    }
}

public struct CreateModelOutput {
    /// The ARN of the model created in SageMaker.
    /// This member is required.
    public var modelArn: Swift.String?

    public init(
        modelArn: Swift.String? = nil
    )
    {
        self.modelArn = modelArn
    }
}

extension SageMakerClientTypes {
    /// Docker container image configuration object for the model bias job.
    public struct ModelBiasAppSpecification {
        /// JSON formatted S3 file that defines bias parameters. For more information on this JSON configuration file, see [Configure bias parameters](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-config-json-monitor-bias-parameters.html).
        /// This member is required.
        public var configUri: Swift.String?
        /// Sets the environment variables in the Docker container.
        public var environment: [Swift.String: Swift.String]?
        /// The container image to be run by the model bias job.
        /// This member is required.
        public var imageUri: Swift.String?

        public init(
            configUri: Swift.String? = nil,
            environment: [Swift.String: Swift.String]? = nil,
            imageUri: Swift.String? = nil
        )
        {
            self.configUri = configUri
            self.environment = environment
            self.imageUri = imageUri
        }
    }

}

extension SageMakerClientTypes {
    /// The configuration for a baseline model bias job.
    public struct ModelBiasBaselineConfig {
        /// The name of the baseline model bias job.
        public var baseliningJobName: Swift.String?
        /// The constraints resource for a monitoring job.
        public var constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource?

        public init(
            baseliningJobName: Swift.String? = nil,
            constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource? = nil
        )
        {
            self.baseliningJobName = baseliningJobName
            self.constraintsResource = constraintsResource
        }
    }

}

extension SageMakerClientTypes {
    /// The ground truth labels for the dataset used for the monitoring job.
    public struct MonitoringGroundTruthS3Input {
        /// The address of the Amazon S3 location of the ground truth labels.
        public var s3Uri: Swift.String?

        public init(
            s3Uri: Swift.String? = nil
        )
        {
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    /// Inputs for the model bias job.
    public struct ModelBiasJobInput {
        /// Input object for the batch transform job.
        public var batchTransformInput: SageMakerClientTypes.BatchTransformInput?
        /// Input object for the endpoint
        public var endpointInput: SageMakerClientTypes.EndpointInput?
        /// Location of ground truth labels to use in model bias job.
        /// This member is required.
        public var groundTruthS3Input: SageMakerClientTypes.MonitoringGroundTruthS3Input?

        public init(
            batchTransformInput: SageMakerClientTypes.BatchTransformInput? = nil,
            endpointInput: SageMakerClientTypes.EndpointInput? = nil,
            groundTruthS3Input: SageMakerClientTypes.MonitoringGroundTruthS3Input? = nil
        )
        {
            self.batchTransformInput = batchTransformInput
            self.endpointInput = endpointInput
            self.groundTruthS3Input = groundTruthS3Input
        }
    }

}

public struct CreateModelBiasJobDefinitionInput {
    /// The name of the bias job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// Identifies the resources to deploy for a monitoring job.
    /// This member is required.
    public var jobResources: SageMakerClientTypes.MonitoringResources?
    /// Configures the model bias job to run a specified Docker container image.
    /// This member is required.
    public var modelBiasAppSpecification: SageMakerClientTypes.ModelBiasAppSpecification?
    /// The baseline configuration for a model bias job.
    public var modelBiasBaselineConfig: SageMakerClientTypes.ModelBiasBaselineConfig?
    /// Inputs for the model bias job.
    /// This member is required.
    public var modelBiasJobInput: SageMakerClientTypes.ModelBiasJobInput?
    /// The output configuration for monitoring jobs.
    /// This member is required.
    public var modelBiasJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    /// Networking options for a model bias job.
    public var networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A time limit for how long the monitoring job is allowed to run before stopping.
    public var stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?
    /// (Optional) An array of key-value pairs. For more information, see [ Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the Amazon Web Services Billing and Cost Management User Guide.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        jobDefinitionName: Swift.String? = nil,
        jobResources: SageMakerClientTypes.MonitoringResources? = nil,
        modelBiasAppSpecification: SageMakerClientTypes.ModelBiasAppSpecification? = nil,
        modelBiasBaselineConfig: SageMakerClientTypes.ModelBiasBaselineConfig? = nil,
        modelBiasJobInput: SageMakerClientTypes.ModelBiasJobInput? = nil,
        modelBiasJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig? = nil,
        networkConfig: SageMakerClientTypes.MonitoringNetworkConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
        self.jobResources = jobResources
        self.modelBiasAppSpecification = modelBiasAppSpecification
        self.modelBiasBaselineConfig = modelBiasBaselineConfig
        self.modelBiasJobInput = modelBiasJobInput
        self.modelBiasJobOutputConfig = modelBiasJobOutputConfig
        self.networkConfig = networkConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
        self.tags = tags
    }
}

public struct CreateModelBiasJobDefinitionOutput {
    /// The Amazon Resource Name (ARN) of the model bias job.
    /// This member is required.
    public var jobDefinitionArn: Swift.String?

    public init(
        jobDefinitionArn: Swift.String? = nil
    )
    {
        self.jobDefinitionArn = jobDefinitionArn
    }
}

extension SageMakerClientTypes {

    public enum ModelCardStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case approved
        case archived
        case draft
        case pendingreview
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelCardStatus] {
            return [
                .approved,
                .archived,
                .draft,
                .pendingreview
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .approved: return "Approved"
            case .archived: return "Archived"
            case .draft: return "Draft"
            case .pendingreview: return "PendingReview"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Configure the security settings to protect model card data.
    public struct ModelCardSecurityConfig {
        /// A Key Management Service [key ID](https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#key-id-key-id) to use for encrypting a model card.
        public var kmsKeyId: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
        }
    }

}

public struct CreateModelCardInput {
    /// The content of the model card. Content must be in [model card JSON schema](https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html#model-cards-json-schema) and provided as a string.
    /// This member is required.
    public var content: Swift.String?
    /// The unique name of the model card.
    /// This member is required.
    public var modelCardName: Swift.String?
    /// The approval status of the model card within your organization. Different organizations might have different criteria for model card review and approval.
    ///
    /// * Draft: The model card is a work in progress.
    ///
    /// * PendingReview: The model card is pending review.
    ///
    /// * Approved: The model card is approved.
    ///
    /// * Archived: The model card is archived. No more updates should be made to the model card, but it can still be exported.
    /// This member is required.
    public var modelCardStatus: SageMakerClientTypes.ModelCardStatus?
    /// An optional Key Management Service key to encrypt, decrypt, and re-encrypt model card content for regulated workloads with highly sensitive data.
    public var securityConfig: SageMakerClientTypes.ModelCardSecurityConfig?
    /// Key-value pairs used to manage metadata for model cards.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        content: Swift.String? = nil,
        modelCardName: Swift.String? = nil,
        modelCardStatus: SageMakerClientTypes.ModelCardStatus? = nil,
        securityConfig: SageMakerClientTypes.ModelCardSecurityConfig? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.content = content
        self.modelCardName = modelCardName
        self.modelCardStatus = modelCardStatus
        self.securityConfig = securityConfig
        self.tags = tags
    }
}

extension CreateModelCardInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateModelCardInput(modelCardName: \(Swift.String(describing: modelCardName)), modelCardStatus: \(Swift.String(describing: modelCardStatus)), securityConfig: \(Swift.String(describing: securityConfig)), tags: \(Swift.String(describing: tags)), content: \"CONTENT_REDACTED\")"}
}

public struct CreateModelCardOutput {
    /// The Amazon Resource Name (ARN) of the successfully created model card.
    /// This member is required.
    public var modelCardArn: Swift.String?

    public init(
        modelCardArn: Swift.String? = nil
    )
    {
        self.modelCardArn = modelCardArn
    }
}

extension SageMakerClientTypes {
    /// Configure the export output details for an Amazon SageMaker Model Card.
    public struct ModelCardExportOutputConfig {
        /// The Amazon S3 output path to export your model card PDF.
        /// This member is required.
        public var s3OutputPath: Swift.String?

        public init(
            s3OutputPath: Swift.String? = nil
        )
        {
            self.s3OutputPath = s3OutputPath
        }
    }

}

public struct CreateModelCardExportJobInput {
    /// The name of the model card export job.
    /// This member is required.
    public var modelCardExportJobName: Swift.String?
    /// The name or Amazon Resource Name (ARN) of the model card to export.
    /// This member is required.
    public var modelCardName: Swift.String?
    /// The version of the model card to export. If a version is not provided, then the latest version of the model card is exported.
    public var modelCardVersion: Swift.Int?
    /// The model card output configuration that specifies the Amazon S3 path for exporting.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.ModelCardExportOutputConfig?

    public init(
        modelCardExportJobName: Swift.String? = nil,
        modelCardName: Swift.String? = nil,
        modelCardVersion: Swift.Int? = nil,
        outputConfig: SageMakerClientTypes.ModelCardExportOutputConfig? = nil
    )
    {
        self.modelCardExportJobName = modelCardExportJobName
        self.modelCardName = modelCardName
        self.modelCardVersion = modelCardVersion
        self.outputConfig = outputConfig
    }
}

public struct CreateModelCardExportJobOutput {
    /// The Amazon Resource Name (ARN) of the model card export job.
    /// This member is required.
    public var modelCardExportJobArn: Swift.String?

    public init(
        modelCardExportJobArn: Swift.String? = nil
    )
    {
        self.modelCardExportJobArn = modelCardExportJobArn
    }
}

extension SageMakerClientTypes {
    /// Docker container image configuration object for the model explainability job.
    public struct ModelExplainabilityAppSpecification {
        /// JSON formatted Amazon S3 file that defines explainability parameters. For more information on this JSON configuration file, see [Configure model explainability parameters](https://docs.aws.amazon.com/sagemaker/latest/dg/clarify-config-json-monitor-model-explainability-parameters.html).
        /// This member is required.
        public var configUri: Swift.String?
        /// Sets the environment variables in the Docker container.
        public var environment: [Swift.String: Swift.String]?
        /// The container image to be run by the model explainability job.
        /// This member is required.
        public var imageUri: Swift.String?

        public init(
            configUri: Swift.String? = nil,
            environment: [Swift.String: Swift.String]? = nil,
            imageUri: Swift.String? = nil
        )
        {
            self.configUri = configUri
            self.environment = environment
            self.imageUri = imageUri
        }
    }

}

extension SageMakerClientTypes {
    /// The configuration for a baseline model explainability job.
    public struct ModelExplainabilityBaselineConfig {
        /// The name of the baseline model explainability job.
        public var baseliningJobName: Swift.String?
        /// The constraints resource for a monitoring job.
        public var constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource?

        public init(
            baseliningJobName: Swift.String? = nil,
            constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource? = nil
        )
        {
            self.baseliningJobName = baseliningJobName
            self.constraintsResource = constraintsResource
        }
    }

}

extension SageMakerClientTypes {
    /// Inputs for the model explainability job.
    public struct ModelExplainabilityJobInput {
        /// Input object for the batch transform job.
        public var batchTransformInput: SageMakerClientTypes.BatchTransformInput?
        /// Input object for the endpoint
        public var endpointInput: SageMakerClientTypes.EndpointInput?

        public init(
            batchTransformInput: SageMakerClientTypes.BatchTransformInput? = nil,
            endpointInput: SageMakerClientTypes.EndpointInput? = nil
        )
        {
            self.batchTransformInput = batchTransformInput
            self.endpointInput = endpointInput
        }
    }

}

public struct CreateModelExplainabilityJobDefinitionInput {
    /// The name of the model explainability job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// Identifies the resources to deploy for a monitoring job.
    /// This member is required.
    public var jobResources: SageMakerClientTypes.MonitoringResources?
    /// Configures the model explainability job to run a specified Docker container image.
    /// This member is required.
    public var modelExplainabilityAppSpecification: SageMakerClientTypes.ModelExplainabilityAppSpecification?
    /// The baseline configuration for a model explainability job.
    public var modelExplainabilityBaselineConfig: SageMakerClientTypes.ModelExplainabilityBaselineConfig?
    /// Inputs for the model explainability job.
    /// This member is required.
    public var modelExplainabilityJobInput: SageMakerClientTypes.ModelExplainabilityJobInput?
    /// The output configuration for monitoring jobs.
    /// This member is required.
    public var modelExplainabilityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    /// Networking options for a model explainability job.
    public var networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A time limit for how long the monitoring job is allowed to run before stopping.
    public var stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?
    /// (Optional) An array of key-value pairs. For more information, see [ Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the Amazon Web Services Billing and Cost Management User Guide.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        jobDefinitionName: Swift.String? = nil,
        jobResources: SageMakerClientTypes.MonitoringResources? = nil,
        modelExplainabilityAppSpecification: SageMakerClientTypes.ModelExplainabilityAppSpecification? = nil,
        modelExplainabilityBaselineConfig: SageMakerClientTypes.ModelExplainabilityBaselineConfig? = nil,
        modelExplainabilityJobInput: SageMakerClientTypes.ModelExplainabilityJobInput? = nil,
        modelExplainabilityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig? = nil,
        networkConfig: SageMakerClientTypes.MonitoringNetworkConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
        self.jobResources = jobResources
        self.modelExplainabilityAppSpecification = modelExplainabilityAppSpecification
        self.modelExplainabilityBaselineConfig = modelExplainabilityBaselineConfig
        self.modelExplainabilityJobInput = modelExplainabilityJobInput
        self.modelExplainabilityJobOutputConfig = modelExplainabilityJobOutputConfig
        self.networkConfig = networkConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
        self.tags = tags
    }
}

public struct CreateModelExplainabilityJobDefinitionOutput {
    /// The Amazon Resource Name (ARN) of the model explainability job.
    /// This member is required.
    public var jobDefinitionArn: Swift.String?

    public init(
        jobDefinitionArn: Swift.String? = nil
    )
    {
        self.jobDefinitionArn = jobDefinitionArn
    }
}

extension SageMakerClientTypes {
    /// Contains details regarding the file source.
    public struct FileSource {
        /// The digest of the file source.
        public var contentDigest: Swift.String?
        /// The type of content stored in the file source.
        public var contentType: Swift.String?
        /// The Amazon S3 URI for the file source.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            contentDigest: Swift.String? = nil,
            contentType: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.contentDigest = contentDigest
            self.contentType = contentType
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    /// Represents the drift check bias baselines that can be used when the model monitor is set using the model package.
    public struct DriftCheckBias {
        /// The bias config file for a model.
        public var configFile: SageMakerClientTypes.FileSource?
        /// The post-training constraints.
        public var postTrainingConstraints: SageMakerClientTypes.MetricsSource?
        /// The pre-training constraints.
        public var preTrainingConstraints: SageMakerClientTypes.MetricsSource?

        public init(
            configFile: SageMakerClientTypes.FileSource? = nil,
            postTrainingConstraints: SageMakerClientTypes.MetricsSource? = nil,
            preTrainingConstraints: SageMakerClientTypes.MetricsSource? = nil
        )
        {
            self.configFile = configFile
            self.postTrainingConstraints = postTrainingConstraints
            self.preTrainingConstraints = preTrainingConstraints
        }
    }

}

extension SageMakerClientTypes {
    /// Represents the drift check explainability baselines that can be used when the model monitor is set using the model package.
    public struct DriftCheckExplainability {
        /// The explainability config file for the model.
        public var configFile: SageMakerClientTypes.FileSource?
        /// The drift check explainability constraints.
        public var constraints: SageMakerClientTypes.MetricsSource?

        public init(
            configFile: SageMakerClientTypes.FileSource? = nil,
            constraints: SageMakerClientTypes.MetricsSource? = nil
        )
        {
            self.configFile = configFile
            self.constraints = constraints
        }
    }

}

extension SageMakerClientTypes {
    /// Represents the drift check data quality baselines that can be used when the model monitor is set using the model package.
    public struct DriftCheckModelDataQuality {
        /// The drift check model data quality constraints.
        public var constraints: SageMakerClientTypes.MetricsSource?
        /// The drift check model data quality statistics.
        public var statistics: SageMakerClientTypes.MetricsSource?

        public init(
            constraints: SageMakerClientTypes.MetricsSource? = nil,
            statistics: SageMakerClientTypes.MetricsSource? = nil
        )
        {
            self.constraints = constraints
            self.statistics = statistics
        }
    }

}

extension SageMakerClientTypes {
    /// Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.
    public struct DriftCheckModelQuality {
        /// The drift check model quality constraints.
        public var constraints: SageMakerClientTypes.MetricsSource?
        /// The drift check model quality statistics.
        public var statistics: SageMakerClientTypes.MetricsSource?

        public init(
            constraints: SageMakerClientTypes.MetricsSource? = nil,
            statistics: SageMakerClientTypes.MetricsSource? = nil
        )
        {
            self.constraints = constraints
            self.statistics = statistics
        }
    }

}

extension SageMakerClientTypes {
    /// Represents the drift check baselines that can be used when the model monitor is set using the model package.
    public struct DriftCheckBaselines {
        /// Represents the drift check bias baselines that can be used when the model monitor is set using the model package.
        public var bias: SageMakerClientTypes.DriftCheckBias?
        /// Represents the drift check explainability baselines that can be used when the model monitor is set using the model package.
        public var explainability: SageMakerClientTypes.DriftCheckExplainability?
        /// Represents the drift check model data quality baselines that can be used when the model monitor is set using the model package.
        public var modelDataQuality: SageMakerClientTypes.DriftCheckModelDataQuality?
        /// Represents the drift check model quality baselines that can be used when the model monitor is set using the model package.
        public var modelQuality: SageMakerClientTypes.DriftCheckModelQuality?

        public init(
            bias: SageMakerClientTypes.DriftCheckBias? = nil,
            explainability: SageMakerClientTypes.DriftCheckExplainability? = nil,
            modelDataQuality: SageMakerClientTypes.DriftCheckModelDataQuality? = nil,
            modelQuality: SageMakerClientTypes.DriftCheckModelQuality? = nil
        )
        {
            self.bias = bias
            self.explainability = explainability
            self.modelDataQuality = modelDataQuality
            self.modelQuality = modelQuality
        }
    }

}

extension SageMakerClientTypes {
    /// The model card associated with the model package. Since ModelPackageModelCard is tied to a model package, it is a specific usage of a model card and its schema is simplified compared to the schema of ModelCard. The ModelPackageModelCard schema does not include model_package_details, and model_overview is composed of the model_creator and model_artifact properties. For more information about the model package model card schema, see [Model package model card schema](https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html#model-card-schema). For more information about the model card associated with the model package, see [View the Details of a Model Version](https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html).
    public struct ModelPackageModelCard {
        /// The content of the model card. The content must follow the schema described in [Model Package Model Card Schema](https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html#model-card-schema).
        public var modelCardContent: Swift.String?
        /// The approval status of the model card within your organization. Different organizations might have different criteria for model card review and approval.
        ///
        /// * Draft: The model card is a work in progress.
        ///
        /// * PendingReview: The model card is pending review.
        ///
        /// * Approved: The model card is approved.
        ///
        /// * Archived: The model card is archived. No more updates can be made to the model card content. If you try to update the model card content, you will receive the message Model Card is in Archived state.
        public var modelCardStatus: SageMakerClientTypes.ModelCardStatus?

        public init(
            modelCardContent: Swift.String? = nil,
            modelCardStatus: SageMakerClientTypes.ModelCardStatus? = nil
        )
        {
            self.modelCardContent = modelCardContent
            self.modelCardStatus = modelCardStatus
        }
    }

}

extension SageMakerClientTypes.ModelPackageModelCard: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ModelPackageModelCard(modelCardStatus: \(Swift.String(describing: modelCardStatus)), modelCardContent: \"CONTENT_REDACTED\")"}
}

extension SageMakerClientTypes {
    /// Contains explainability metrics for a model.
    public struct Explainability {
        /// The explainability report for a model.
        public var report: SageMakerClientTypes.MetricsSource?

        public init(
            report: SageMakerClientTypes.MetricsSource? = nil
        )
        {
            self.report = report
        }
    }

}

extension SageMakerClientTypes {
    /// Data quality constraints and statistics for a model.
    public struct ModelDataQuality {
        /// Data quality constraints for a model.
        public var constraints: SageMakerClientTypes.MetricsSource?
        /// Data quality statistics for a model.
        public var statistics: SageMakerClientTypes.MetricsSource?

        public init(
            constraints: SageMakerClientTypes.MetricsSource? = nil,
            statistics: SageMakerClientTypes.MetricsSource? = nil
        )
        {
            self.constraints = constraints
            self.statistics = statistics
        }
    }

}

extension SageMakerClientTypes {
    /// Model quality statistics and constraints.
    public struct ModelQuality {
        /// Model quality constraints.
        public var constraints: SageMakerClientTypes.MetricsSource?
        /// Model quality statistics.
        public var statistics: SageMakerClientTypes.MetricsSource?

        public init(
            constraints: SageMakerClientTypes.MetricsSource? = nil,
            statistics: SageMakerClientTypes.MetricsSource? = nil
        )
        {
            self.constraints = constraints
            self.statistics = statistics
        }
    }

}

extension SageMakerClientTypes {
    /// Contains metrics captured from a model.
    public struct ModelMetrics {
        /// Metrics that measure bias in a model.
        public var bias: SageMakerClientTypes.Bias?
        /// Metrics that help explain a model.
        public var explainability: SageMakerClientTypes.Explainability?
        /// Metrics that measure the quality of the input data for a model.
        public var modelDataQuality: SageMakerClientTypes.ModelDataQuality?
        /// Metrics that measure the quality of a model.
        public var modelQuality: SageMakerClientTypes.ModelQuality?

        public init(
            bias: SageMakerClientTypes.Bias? = nil,
            explainability: SageMakerClientTypes.Explainability? = nil,
            modelDataQuality: SageMakerClientTypes.ModelDataQuality? = nil,
            modelQuality: SageMakerClientTypes.ModelQuality? = nil
        )
        {
            self.bias = bias
            self.explainability = explainability
            self.modelDataQuality = modelDataQuality
            self.modelQuality = modelQuality
        }
    }

}

extension SageMakerClientTypes {
    /// An optional Key Management Service key to encrypt, decrypt, and re-encrypt model package information for regulated workloads with highly sensitive data.
    public struct ModelPackageSecurityConfig {
        /// The KMS Key ID (KMSKeyId) used for encryption of model package information.
        /// This member is required.
        public var kmsKeyId: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension SageMakerClientTypes {

    public enum SkipModelValidation: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [SkipModelValidation] {
            return [
                .all,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "All"
            case .none: return "None"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your SageMaker account or an algorithm in Amazon Web Services Marketplace that you are subscribed to.
    public struct SourceAlgorithm {
        /// The name of an algorithm that was used to create the model package. The algorithm must be either an algorithm resource in your SageMaker account or an algorithm in Amazon Web Services Marketplace that you are subscribed to.
        /// This member is required.
        public var algorithmName: Swift.String?
        /// Specifies the location of ML model data to deploy during endpoint creation.
        public var modelDataSource: SageMakerClientTypes.ModelDataSource?
        /// The Amazon S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix). The model artifacts must be in an S3 bucket that is in the same Amazon Web Services region as the algorithm.
        public var modelDataUrl: Swift.String?

        public init(
            algorithmName: Swift.String? = nil,
            modelDataSource: SageMakerClientTypes.ModelDataSource? = nil,
            modelDataUrl: Swift.String? = nil
        )
        {
            self.algorithmName = algorithmName
            self.modelDataSource = modelDataSource
            self.modelDataUrl = modelDataUrl
        }
    }

}

extension SageMakerClientTypes {
    /// A list of algorithms that were used to create a model package.
    public struct SourceAlgorithmSpecification {
        /// A list of the algorithms that were used to create a model package.
        /// This member is required.
        public var sourceAlgorithms: [SageMakerClientTypes.SourceAlgorithm]?

        public init(
            sourceAlgorithms: [SageMakerClientTypes.SourceAlgorithm]? = nil
        )
        {
            self.sourceAlgorithms = sourceAlgorithms
        }
    }

}

extension SageMakerClientTypes {
    /// Contains data, such as the inputs and targeted instance types that are used in the process of validating the model package. The data provided in the validation profile is made available to your buyers on Amazon Web Services Marketplace.
    public struct ModelPackageValidationProfile {
        /// The name of the profile for the model package.
        /// This member is required.
        public var profileName: Swift.String?
        /// The TransformJobDefinition object that describes the transform job used for the validation of the model package.
        /// This member is required.
        public var transformJobDefinition: SageMakerClientTypes.TransformJobDefinition?

        public init(
            profileName: Swift.String? = nil,
            transformJobDefinition: SageMakerClientTypes.TransformJobDefinition? = nil
        )
        {
            self.profileName = profileName
            self.transformJobDefinition = transformJobDefinition
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies batch transform jobs that SageMaker runs to validate your model package.
    public struct ModelPackageValidationSpecification {
        /// An array of ModelPackageValidationProfile objects, each of which specifies a batch transform job that SageMaker runs to validate your model package.
        /// This member is required.
        public var validationProfiles: [SageMakerClientTypes.ModelPackageValidationProfile]?
        /// The IAM roles to be used for the validation of the model package.
        /// This member is required.
        public var validationRole: Swift.String?

        public init(
            validationProfiles: [SageMakerClientTypes.ModelPackageValidationProfile]? = nil,
            validationRole: Swift.String? = nil
        )
        {
            self.validationProfiles = validationProfiles
            self.validationRole = validationRole
        }
    }

}

public struct CreateModelPackageInput {
    /// An array of additional Inference Specification objects. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.
    public var additionalInferenceSpecifications: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]?
    /// Whether to certify the model package for listing on Amazon Web Services Marketplace. This parameter is optional for unversioned models, and does not apply to versioned models.
    public var certifyForMarketplace: Swift.Bool?
    /// A unique token that guarantees that the call to this API is idempotent.
    public var clientToken: Swift.String?
    /// The metadata properties associated with the model package versions.
    public var customerMetadataProperties: [Swift.String: Swift.String]?
    /// The machine learning domain of your model package and its components. Common machine learning domains include computer vision and natural language processing.
    public var domain: Swift.String?
    /// Represents the drift check baselines that can be used when the model monitor is set using the model package. For more information, see the topic on [Drift Detection against Previous Baselines in SageMaker Pipelines](https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection) in the Amazon SageMaker Developer Guide.
    public var driftCheckBaselines: SageMakerClientTypes.DriftCheckBaselines?
    /// Specifies details about inference jobs that you can run with models based on this model package, including the following information:
    ///
    /// * The Amazon ECR paths of containers that contain the inference code and model artifacts.
    ///
    /// * The instance types that the model package supports for transform jobs and real-time endpoints used for inference.
    ///
    /// * The input and output content formats that the model package supports for inference.
    public var inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// Whether the model is approved for deployment. This parameter is optional for versioned models, and does not apply to unversioned models. For versioned models, the value of this parameter must be set to Approved to deploy the model.
    public var modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
    /// The model card associated with the model package. Since ModelPackageModelCard is tied to a model package, it is a specific usage of a model card and its schema is simplified compared to the schema of ModelCard. The ModelPackageModelCard schema does not include model_package_details, and model_overview is composed of the model_creator and model_artifact properties. For more information about the model package model card schema, see [Model package model card schema](https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html#model-card-schema). For more information about the model card associated with the model package, see [View the Details of a Model Version](https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html).
    public var modelCard: SageMakerClientTypes.ModelPackageModelCard?
    /// A structure that contains model metrics reports.
    public var modelMetrics: SageMakerClientTypes.ModelMetrics?
    /// A description of the model package.
    public var modelPackageDescription: Swift.String?
    /// The name or Amazon Resource Name (ARN) of the model package group that this model version belongs to. This parameter is required for versioned models, and does not apply to unversioned models.
    public var modelPackageGroupName: Swift.String?
    /// The name of the model package. The name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen). This parameter is required for unversioned models. It is not applicable to versioned models.
    public var modelPackageName: Swift.String?
    /// The Amazon Simple Storage Service (Amazon S3) path where the sample payload is stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix). This archive can hold multiple files that are all equally used in the load test. Each file in the archive must satisfy the size constraints of the [InvokeEndpoint](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_runtime_InvokeEndpoint.html#API_runtime_InvokeEndpoint_RequestSyntax) call.
    public var samplePayloadUrl: Swift.String?
    /// The KMS Key ID (KMSKeyId) used for encryption of model package information.
    public var securityConfig: SageMakerClientTypes.ModelPackageSecurityConfig?
    /// Indicates if you want to skip model validation.
    public var skipModelValidation: SageMakerClientTypes.SkipModelValidation?
    /// Details about the algorithm that was used to create the model package.
    public var sourceAlgorithmSpecification: SageMakerClientTypes.SourceAlgorithmSpecification?
    /// The URI of the source for the model package. If you want to clone a model package, set it to the model package Amazon Resource Name (ARN). If you want to register a model, set it to the model ARN.
    public var sourceUri: Swift.String?
    /// A list of key value pairs associated with the model. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference Guide. If you supply ModelPackageGroupName, your model package belongs to the model group you specify and uses the tags associated with the model group. In this case, you cannot supply a tag argument.
    public var tags: [SageMakerClientTypes.Tag]?
    /// The machine learning task your model package accomplishes. Common machine learning tasks include object detection and image classification. The following tasks are supported by Inference Recommender: "IMAGE_CLASSIFICATION" | "OBJECT_DETECTION" | "TEXT_GENERATION" |"IMAGE_SEGMENTATION" | "FILL_MASK" | "CLASSIFICATION" | "REGRESSION" | "OTHER". Specify "OTHER" if none of the tasks listed fit your use case.
    public var task: Swift.String?
    /// Specifies configurations for one or more transform jobs that SageMaker runs to test the model package.
    public var validationSpecification: SageMakerClientTypes.ModelPackageValidationSpecification?

    public init(
        additionalInferenceSpecifications: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]? = nil,
        certifyForMarketplace: Swift.Bool? = nil,
        clientToken: Swift.String? = nil,
        customerMetadataProperties: [Swift.String: Swift.String]? = nil,
        domain: Swift.String? = nil,
        driftCheckBaselines: SageMakerClientTypes.DriftCheckBaselines? = nil,
        inferenceSpecification: SageMakerClientTypes.InferenceSpecification? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus? = nil,
        modelCard: SageMakerClientTypes.ModelPackageModelCard? = nil,
        modelMetrics: SageMakerClientTypes.ModelMetrics? = nil,
        modelPackageDescription: Swift.String? = nil,
        modelPackageGroupName: Swift.String? = nil,
        modelPackageName: Swift.String? = nil,
        samplePayloadUrl: Swift.String? = nil,
        securityConfig: SageMakerClientTypes.ModelPackageSecurityConfig? = nil,
        skipModelValidation: SageMakerClientTypes.SkipModelValidation? = nil,
        sourceAlgorithmSpecification: SageMakerClientTypes.SourceAlgorithmSpecification? = nil,
        sourceUri: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        task: Swift.String? = nil,
        validationSpecification: SageMakerClientTypes.ModelPackageValidationSpecification? = nil
    )
    {
        self.additionalInferenceSpecifications = additionalInferenceSpecifications
        self.certifyForMarketplace = certifyForMarketplace
        self.clientToken = clientToken
        self.customerMetadataProperties = customerMetadataProperties
        self.domain = domain
        self.driftCheckBaselines = driftCheckBaselines
        self.inferenceSpecification = inferenceSpecification
        self.metadataProperties = metadataProperties
        self.modelApprovalStatus = modelApprovalStatus
        self.modelCard = modelCard
        self.modelMetrics = modelMetrics
        self.modelPackageDescription = modelPackageDescription
        self.modelPackageGroupName = modelPackageGroupName
        self.modelPackageName = modelPackageName
        self.samplePayloadUrl = samplePayloadUrl
        self.securityConfig = securityConfig
        self.skipModelValidation = skipModelValidation
        self.sourceAlgorithmSpecification = sourceAlgorithmSpecification
        self.sourceUri = sourceUri
        self.tags = tags
        self.task = task
        self.validationSpecification = validationSpecification
    }
}

public struct CreateModelPackageOutput {
    /// The Amazon Resource Name (ARN) of the new model package.
    /// This member is required.
    public var modelPackageArn: Swift.String?

    public init(
        modelPackageArn: Swift.String? = nil
    )
    {
        self.modelPackageArn = modelPackageArn
    }
}

public struct CreateModelPackageGroupInput {
    /// A description for the model group.
    public var modelPackageGroupDescription: Swift.String?
    /// The name of the model group.
    /// This member is required.
    public var modelPackageGroupName: Swift.String?
    /// A list of key value pairs associated with the model group. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference Guide.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        modelPackageGroupDescription: Swift.String? = nil,
        modelPackageGroupName: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.modelPackageGroupDescription = modelPackageGroupDescription
        self.modelPackageGroupName = modelPackageGroupName
        self.tags = tags
    }
}

public struct CreateModelPackageGroupOutput {
    /// The Amazon Resource Name (ARN) of the model group.
    /// This member is required.
    public var modelPackageGroupArn: Swift.String?

    public init(
        modelPackageGroupArn: Swift.String? = nil
    )
    {
        self.modelPackageGroupArn = modelPackageGroupArn
    }
}

extension SageMakerClientTypes {

    public enum MonitoringProblemType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case binaryClassification
        case multiclassClassification
        case regression
        case sdkUnknown(Swift.String)

        public static var allCases: [MonitoringProblemType] {
            return [
                .binaryClassification,
                .multiclassClassification,
                .regression
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .binaryClassification: return "BinaryClassification"
            case .multiclassClassification: return "MulticlassClassification"
            case .regression: return "Regression"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Container image configuration object for the monitoring job.
    public struct ModelQualityAppSpecification {
        /// An array of arguments for the container used to run the monitoring job.
        public var containerArguments: [Swift.String]?
        /// Specifies the entrypoint for a container that the monitoring job runs.
        public var containerEntrypoint: [Swift.String]?
        /// Sets the environment variables in the container that the monitoring job runs.
        public var environment: [Swift.String: Swift.String]?
        /// The address of the container image that the monitoring job runs.
        /// This member is required.
        public var imageUri: Swift.String?
        /// An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        public var postAnalyticsProcessorSourceUri: Swift.String?
        /// The machine learning problem type of the model that the monitoring job monitors.
        public var problemType: SageMakerClientTypes.MonitoringProblemType?
        /// An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flattened JSON so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers.
        public var recordPreprocessorSourceUri: Swift.String?

        public init(
            containerArguments: [Swift.String]? = nil,
            containerEntrypoint: [Swift.String]? = nil,
            environment: [Swift.String: Swift.String]? = nil,
            imageUri: Swift.String? = nil,
            postAnalyticsProcessorSourceUri: Swift.String? = nil,
            problemType: SageMakerClientTypes.MonitoringProblemType? = nil,
            recordPreprocessorSourceUri: Swift.String? = nil
        )
        {
            self.containerArguments = containerArguments
            self.containerEntrypoint = containerEntrypoint
            self.environment = environment
            self.imageUri = imageUri
            self.postAnalyticsProcessorSourceUri = postAnalyticsProcessorSourceUri
            self.problemType = problemType
            self.recordPreprocessorSourceUri = recordPreprocessorSourceUri
        }
    }

}

extension SageMakerClientTypes {
    /// Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically.
    public struct ModelQualityBaselineConfig {
        /// The name of the job that performs baselining for the monitoring job.
        public var baseliningJobName: Swift.String?
        /// The constraints resource for a monitoring job.
        public var constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource?

        public init(
            baseliningJobName: Swift.String? = nil,
            constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource? = nil
        )
        {
            self.baseliningJobName = baseliningJobName
            self.constraintsResource = constraintsResource
        }
    }

}

extension SageMakerClientTypes {
    /// The input for the model quality monitoring job. Currently endpoints are supported for input for model quality monitoring jobs.
    public struct ModelQualityJobInput {
        /// Input object for the batch transform job.
        public var batchTransformInput: SageMakerClientTypes.BatchTransformInput?
        /// Input object for the endpoint
        public var endpointInput: SageMakerClientTypes.EndpointInput?
        /// The ground truth label provided for the model.
        /// This member is required.
        public var groundTruthS3Input: SageMakerClientTypes.MonitoringGroundTruthS3Input?

        public init(
            batchTransformInput: SageMakerClientTypes.BatchTransformInput? = nil,
            endpointInput: SageMakerClientTypes.EndpointInput? = nil,
            groundTruthS3Input: SageMakerClientTypes.MonitoringGroundTruthS3Input? = nil
        )
        {
            self.batchTransformInput = batchTransformInput
            self.endpointInput = endpointInput
            self.groundTruthS3Input = groundTruthS3Input
        }
    }

}

public struct CreateModelQualityJobDefinitionInput {
    /// The name of the monitoring job definition.
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// Identifies the resources to deploy for a monitoring job.
    /// This member is required.
    public var jobResources: SageMakerClientTypes.MonitoringResources?
    /// The container that runs the monitoring job.
    /// This member is required.
    public var modelQualityAppSpecification: SageMakerClientTypes.ModelQualityAppSpecification?
    /// Specifies the constraints and baselines for the monitoring job.
    public var modelQualityBaselineConfig: SageMakerClientTypes.ModelQualityBaselineConfig?
    /// A list of the inputs that are monitored. Currently endpoints are supported.
    /// This member is required.
    public var modelQualityJobInput: SageMakerClientTypes.ModelQualityJobInput?
    /// The output configuration for monitoring jobs.
    /// This member is required.
    public var modelQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    /// Specifies the network configuration for the monitoring job.
    public var networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A time limit for how long the monitoring job is allowed to run before stopping.
    public var stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?
    /// (Optional) An array of key-value pairs. For more information, see [ Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the Amazon Web Services Billing and Cost Management User Guide.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        jobDefinitionName: Swift.String? = nil,
        jobResources: SageMakerClientTypes.MonitoringResources? = nil,
        modelQualityAppSpecification: SageMakerClientTypes.ModelQualityAppSpecification? = nil,
        modelQualityBaselineConfig: SageMakerClientTypes.ModelQualityBaselineConfig? = nil,
        modelQualityJobInput: SageMakerClientTypes.ModelQualityJobInput? = nil,
        modelQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig? = nil,
        networkConfig: SageMakerClientTypes.MonitoringNetworkConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
        self.jobResources = jobResources
        self.modelQualityAppSpecification = modelQualityAppSpecification
        self.modelQualityBaselineConfig = modelQualityBaselineConfig
        self.modelQualityJobInput = modelQualityJobInput
        self.modelQualityJobOutputConfig = modelQualityJobOutputConfig
        self.networkConfig = networkConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
        self.tags = tags
    }
}

public struct CreateModelQualityJobDefinitionOutput {
    /// The Amazon Resource Name (ARN) of the model quality monitoring job.
    /// This member is required.
    public var jobDefinitionArn: Swift.String?

    public init(
        jobDefinitionArn: Swift.String? = nil
    )
    {
        self.jobDefinitionArn = jobDefinitionArn
    }
}

extension SageMakerClientTypes {
    /// Configuration for monitoring constraints and monitoring statistics. These baseline resources are compared against the results of the current job from the series of jobs scheduled to collect data periodically.
    public struct MonitoringBaselineConfig {
        /// The name of the job that performs baselining for the monitoring job.
        public var baseliningJobName: Swift.String?
        /// The baseline constraint file in Amazon S3 that the current monitoring job should validated against.
        public var constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource?
        /// The baseline statistics file in Amazon S3 that the current monitoring job should be validated against.
        public var statisticsResource: SageMakerClientTypes.MonitoringStatisticsResource?

        public init(
            baseliningJobName: Swift.String? = nil,
            constraintsResource: SageMakerClientTypes.MonitoringConstraintsResource? = nil,
            statisticsResource: SageMakerClientTypes.MonitoringStatisticsResource? = nil
        )
        {
            self.baseliningJobName = baseliningJobName
            self.constraintsResource = constraintsResource
            self.statisticsResource = statisticsResource
        }
    }

}

extension SageMakerClientTypes {
    /// Container image configuration object for the monitoring job.
    public struct MonitoringAppSpecification {
        /// An array of arguments for the container used to run the monitoring job.
        public var containerArguments: [Swift.String]?
        /// Specifies the entrypoint for a container used to run the monitoring job.
        public var containerEntrypoint: [Swift.String]?
        /// The container image to be run by the monitoring job.
        /// This member is required.
        public var imageUri: Swift.String?
        /// An Amazon S3 URI to a script that is called after analysis has been performed. Applicable only for the built-in (first party) containers.
        public var postAnalyticsProcessorSourceUri: Swift.String?
        /// An Amazon S3 URI to a script that is called per row prior to running analysis. It can base64 decode the payload and convert it into a flattened JSON so that the built-in container can use the converted data. Applicable only for the built-in (first party) containers.
        public var recordPreprocessorSourceUri: Swift.String?

        public init(
            containerArguments: [Swift.String]? = nil,
            containerEntrypoint: [Swift.String]? = nil,
            imageUri: Swift.String? = nil,
            postAnalyticsProcessorSourceUri: Swift.String? = nil,
            recordPreprocessorSourceUri: Swift.String? = nil
        )
        {
            self.containerArguments = containerArguments
            self.containerEntrypoint = containerEntrypoint
            self.imageUri = imageUri
            self.postAnalyticsProcessorSourceUri = postAnalyticsProcessorSourceUri
            self.recordPreprocessorSourceUri = recordPreprocessorSourceUri
        }
    }

}

extension SageMakerClientTypes {
    /// The inputs for a monitoring job.
    public struct MonitoringInput {
        /// Input object for the batch transform job.
        public var batchTransformInput: SageMakerClientTypes.BatchTransformInput?
        /// The endpoint for a monitoring job.
        public var endpointInput: SageMakerClientTypes.EndpointInput?

        public init(
            batchTransformInput: SageMakerClientTypes.BatchTransformInput? = nil,
            endpointInput: SageMakerClientTypes.EndpointInput? = nil
        )
        {
            self.batchTransformInput = batchTransformInput
            self.endpointInput = endpointInput
        }
    }

}

extension SageMakerClientTypes {
    /// Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
    public struct NetworkConfig {
        /// Whether to encrypt all communications between distributed processing jobs. Choose True to encrypt communications. Encryption provides greater security for distributed processing jobs, but the processing might take longer.
        public var enableInterContainerTrafficEncryption: Swift.Bool?
        /// Whether to allow inbound and outbound network calls to and from the containers used for the processing job.
        public var enableNetworkIsolation: Swift.Bool?
        /// Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to. You can control access to and from your resources by configuring a VPC. For more information, see [Give SageMaker Access to Resources in your Amazon VPC](https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html).
        public var vpcConfig: SageMakerClientTypes.VpcConfig?

        public init(
            enableInterContainerTrafficEncryption: Swift.Bool? = nil,
            enableNetworkIsolation: Swift.Bool? = nil,
            vpcConfig: SageMakerClientTypes.VpcConfig? = nil
        )
        {
            self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
            self.enableNetworkIsolation = enableNetworkIsolation
            self.vpcConfig = vpcConfig
        }
    }

}

extension SageMakerClientTypes {
    /// Defines the monitoring job.
    public struct MonitoringJobDefinition {
        /// Baseline configuration used to validate that the data conforms to the specified constraints and statistics
        public var baselineConfig: SageMakerClientTypes.MonitoringBaselineConfig?
        /// Sets the environment variables in the Docker container.
        public var environment: [Swift.String: Swift.String]?
        /// Configures the monitoring job to run a specified Docker container image.
        /// This member is required.
        public var monitoringAppSpecification: SageMakerClientTypes.MonitoringAppSpecification?
        /// The array of inputs for the monitoring job. Currently we support monitoring an Amazon SageMaker Endpoint.
        /// This member is required.
        public var monitoringInputs: [SageMakerClientTypes.MonitoringInput]?
        /// The array of outputs from the monitoring job to be uploaded to Amazon S3.
        /// This member is required.
        public var monitoringOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
        /// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a monitoring job. In distributed processing, you specify more than one instance.
        /// This member is required.
        public var monitoringResources: SageMakerClientTypes.MonitoringResources?
        /// Specifies networking options for an monitoring job.
        public var networkConfig: SageMakerClientTypes.NetworkConfig?
        /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
        /// This member is required.
        public var roleArn: Swift.String?
        /// Specifies a time limit for how long the monitoring job is allowed to run.
        public var stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?

        public init(
            baselineConfig: SageMakerClientTypes.MonitoringBaselineConfig? = nil,
            environment: [Swift.String: Swift.String]? = nil,
            monitoringAppSpecification: SageMakerClientTypes.MonitoringAppSpecification? = nil,
            monitoringInputs: [SageMakerClientTypes.MonitoringInput]? = nil,
            monitoringOutputConfig: SageMakerClientTypes.MonitoringOutputConfig? = nil,
            monitoringResources: SageMakerClientTypes.MonitoringResources? = nil,
            networkConfig: SageMakerClientTypes.NetworkConfig? = nil,
            roleArn: Swift.String? = nil,
            stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition? = nil
        )
        {
            self.baselineConfig = baselineConfig
            self.environment = environment
            self.monitoringAppSpecification = monitoringAppSpecification
            self.monitoringInputs = monitoringInputs
            self.monitoringOutputConfig = monitoringOutputConfig
            self.monitoringResources = monitoringResources
            self.networkConfig = networkConfig
            self.roleArn = roleArn
            self.stoppingCondition = stoppingCondition
        }
    }

}

extension SageMakerClientTypes {

    public enum MonitoringType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case dataQuality
        case modelBias
        case modelExplainability
        case modelQuality
        case sdkUnknown(Swift.String)

        public static var allCases: [MonitoringType] {
            return [
                .dataQuality,
                .modelBias,
                .modelExplainability,
                .modelQuality
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .dataQuality: return "DataQuality"
            case .modelBias: return "ModelBias"
            case .modelExplainability: return "ModelExplainability"
            case .modelQuality: return "ModelQuality"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Configuration details about the monitoring schedule.
    public struct ScheduleConfig {
        /// Sets the end time for a monitoring job window. Express this time as an offset to the times that you schedule your monitoring jobs to run. You schedule monitoring jobs with the ScheduleExpression parameter. Specify this offset in ISO 8601 duration format. For example, if you want to end the window one hour before the start of each monitoring job, you would specify: "-PT1H". The end time that you specify must not follow the start time that you specify by more than 24 hours. You specify the start time with the DataAnalysisStartTime parameter. If you set ScheduleExpression to NOW, this parameter is required.
        public var dataAnalysisEndTime: Swift.String?
        /// Sets the start time for a monitoring job window. Express this time as an offset to the times that you schedule your monitoring jobs to run. You schedule monitoring jobs with the ScheduleExpression parameter. Specify this offset in ISO 8601 duration format. For example, if you want to monitor the five hours of data in your dataset that precede the start of each monitoring job, you would specify: "-PT5H". The start time that you specify must not precede the end time that you specify by more than 24 hours. You specify the end time with the DataAnalysisEndTime parameter. If you set ScheduleExpression to NOW, this parameter is required.
        public var dataAnalysisStartTime: Swift.String?
        /// A cron expression that describes details about the monitoring schedule. The supported cron expressions are:
        ///
        /// * If you want to set the job to start every hour, use the following: Hourly: cron(0 * ? * * *)
        ///
        /// * If you want to start the job daily: cron(0 [00-23] ? * * *)
        ///
        /// * If you want to run the job one time, immediately, use the following keyword: NOW
        ///
        ///
        /// For example, the following are valid cron expressions:
        ///
        /// * Daily at noon UTC: cron(0 12 ? * * *)
        ///
        /// * Daily at midnight UTC: cron(0 0 ? * * *)
        ///
        ///
        /// To support running every 6, 12 hours, the following are also supported: cron(0 [00-23]/[01-24] ? * * *) For example, the following are valid cron expressions:
        ///
        /// * Every 12 hours, starting at 5pm UTC: cron(0 17/12 ? * * *)
        ///
        /// * Every two hours starting at midnight: cron(0 0/2 ? * * *)
        ///
        ///
        ///
        ///
        /// * Even though the cron expression is set to start at 5PM UTC, note that there could be a delay of 0-20 minutes from the actual requested time to run the execution.
        ///
        /// * We recommend that if you would like a daily schedule, you do not provide this parameter. Amazon SageMaker will pick a time for running every day.
        ///
        ///
        /// You can also specify the keyword NOW to run the monitoring job immediately, one time, without recurring.
        /// This member is required.
        public var scheduleExpression: Swift.String?

        public init(
            dataAnalysisEndTime: Swift.String? = nil,
            dataAnalysisStartTime: Swift.String? = nil,
            scheduleExpression: Swift.String? = nil
        )
        {
            self.dataAnalysisEndTime = dataAnalysisEndTime
            self.dataAnalysisStartTime = dataAnalysisStartTime
            self.scheduleExpression = scheduleExpression
        }
    }

}

extension SageMakerClientTypes {
    /// Configures the monitoring schedule and defines the monitoring job.
    public struct MonitoringScheduleConfig {
        /// Defines the monitoring job.
        public var monitoringJobDefinition: SageMakerClientTypes.MonitoringJobDefinition?
        /// The name of the monitoring job definition to schedule.
        public var monitoringJobDefinitionName: Swift.String?
        /// The type of the monitoring job definition to schedule.
        public var monitoringType: SageMakerClientTypes.MonitoringType?
        /// Configures the monitoring schedule.
        public var scheduleConfig: SageMakerClientTypes.ScheduleConfig?

        public init(
            monitoringJobDefinition: SageMakerClientTypes.MonitoringJobDefinition? = nil,
            monitoringJobDefinitionName: Swift.String? = nil,
            monitoringType: SageMakerClientTypes.MonitoringType? = nil,
            scheduleConfig: SageMakerClientTypes.ScheduleConfig? = nil
        )
        {
            self.monitoringJobDefinition = monitoringJobDefinition
            self.monitoringJobDefinitionName = monitoringJobDefinitionName
            self.monitoringType = monitoringType
            self.scheduleConfig = scheduleConfig
        }
    }

}

public struct CreateMonitoringScheduleInput {
    /// The configuration object that specifies the monitoring schedule and defines the monitoring job.
    /// This member is required.
    public var monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig?
    /// The name of the monitoring schedule. The name must be unique within an Amazon Web Services Region within an Amazon Web Services account.
    /// This member is required.
    public var monitoringScheduleName: Swift.String?
    /// (Optional) An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the Amazon Web Services Billing and Cost Management User Guide.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig? = nil,
        monitoringScheduleName: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.monitoringScheduleConfig = monitoringScheduleConfig
        self.monitoringScheduleName = monitoringScheduleName
        self.tags = tags
    }
}

public struct CreateMonitoringScheduleOutput {
    /// The Amazon Resource Name (ARN) of the monitoring schedule.
    /// This member is required.
    public var monitoringScheduleArn: Swift.String?

    public init(
        monitoringScheduleArn: Swift.String? = nil
    )
    {
        self.monitoringScheduleArn = monitoringScheduleArn
    }
}

extension SageMakerClientTypes {

    public enum NotebookInstanceAcceleratorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mlEia1Large
        case mlEia1Medium
        case mlEia1Xlarge
        case mlEia2Large
        case mlEia2Medium
        case mlEia2Xlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [NotebookInstanceAcceleratorType] {
            return [
                .mlEia1Large,
                .mlEia1Medium,
                .mlEia1Xlarge,
                .mlEia2Large,
                .mlEia2Medium,
                .mlEia2Xlarge
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mlEia1Large: return "ml.eia1.large"
            case .mlEia1Medium: return "ml.eia1.medium"
            case .mlEia1Xlarge: return "ml.eia1.xlarge"
            case .mlEia2Large: return "ml.eia2.large"
            case .mlEia2Medium: return "ml.eia2.medium"
            case .mlEia2Xlarge: return "ml.eia2.xlarge"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum DirectInternetAccess: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [DirectInternetAccess] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Information on the IMDS configuration of the notebook instance
    public struct InstanceMetadataServiceConfiguration {
        /// Indicates the minimum IMDS version that the notebook instance supports. When passed as part of CreateNotebookInstance, if no value is selected, then it defaults to IMDSv1. This means that both IMDSv1 and IMDSv2 are supported. If passed as part of UpdateNotebookInstance, there is no default.
        /// This member is required.
        public var minimumInstanceMetadataServiceVersion: Swift.String?

        public init(
            minimumInstanceMetadataServiceVersion: Swift.String? = nil
        )
        {
            self.minimumInstanceMetadataServiceVersion = minimumInstanceMetadataServiceVersion
        }
    }

}

extension SageMakerClientTypes {

    public enum RootAccess: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [RootAccess] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateNotebookInstanceInput {
    /// A list of Elastic Inference (EI) instance types to associate with this notebook instance. Currently, only one instance type can be associated with a notebook instance. For more information, see [Using Elastic Inference in Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html).
    public var acceleratorTypes: [SageMakerClientTypes.NotebookInstanceAcceleratorType]?
    /// An array of up to three Git repositories to associate with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in [Amazon Web Services CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see [Associating Git Repositories with SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
    public var additionalCodeRepositories: [Swift.String]?
    /// A Git repository to associate with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in [Amazon Web Services CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see [Associating Git Repositories with SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
    public var defaultCodeRepository: Swift.String?
    /// Sets whether SageMaker provides internet access to the notebook instance. If you set this to Disabled this notebook instance is able to access resources only in your VPC, and is not be able to connect to SageMaker training and endpoint services unless you configure a NAT Gateway in your VPC. For more information, see [Notebook Instances Are Internet-Enabled by Default](https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access). You can set the value of this parameter to Disabled only if you set a value for the SubnetId parameter.
    public var directInternetAccess: SageMakerClientTypes.DirectInternetAccess?
    /// Information on the IMDS configuration of the notebook instance
    public var instanceMetadataServiceConfiguration: SageMakerClientTypes.InstanceMetadataServiceConfiguration?
    /// The type of ML compute instance to launch for the notebook instance.
    /// This member is required.
    public var instanceType: SageMakerClientTypes.InstanceType?
    /// The Amazon Resource Name (ARN) of a Amazon Web Services Key Management Service key that SageMaker uses to encrypt data on the storage volume attached to your notebook instance. The KMS key you provide must be enabled. For information, see [Enabling and Disabling Keys](https://docs.aws.amazon.com/kms/latest/developerguide/enabling-keys.html) in the Amazon Web Services Key Management Service Developer Guide.
    public var kmsKeyId: Swift.String?
    /// The name of a lifecycle configuration to associate with the notebook instance. For information about lifestyle configurations, see [Step 2.1: (Optional) Customize a Notebook Instance](https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html).
    public var lifecycleConfigName: Swift.String?
    /// The name of the new notebook instance.
    /// This member is required.
    public var notebookInstanceName: Swift.String?
    /// The platform identifier of the notebook instance runtime environment.
    public var platformIdentifier: Swift.String?
    /// When you send any requests to Amazon Web Services resources from the notebook instance, SageMaker assumes this role to perform tasks on your behalf. You must grant this role necessary permissions so SageMaker can perform these tasks. The policy must allow the SageMaker service principal (sagemaker.amazonaws.com) permissions to assume this role. For more information, see [SageMaker Roles](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html). To be able to pass this role to SageMaker, the caller of this API must have the iam:PassRole permission.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Whether root access is enabled or disabled for users of the notebook instance. The default value is Enabled. Lifecycle configurations need root access to be able to set up a notebook instance. Because of this, lifecycle configurations associated with a notebook instance always run with root access even if you disable root access for users.
    public var rootAccess: SageMakerClientTypes.RootAccess?
    /// The VPC security group IDs, in the form sg-xxxxxxxx. The security groups must be for the same VPC as specified in the subnet.
    public var securityGroupIds: [Swift.String]?
    /// The ID of the subnet in a VPC to which you would like to have a connectivity from your ML compute instance.
    public var subnetId: Swift.String?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?
    /// The size, in GB, of the ML storage volume to attach to the notebook instance. The default value is 5 GB.
    public var volumeSizeInGB: Swift.Int?

    public init(
        acceleratorTypes: [SageMakerClientTypes.NotebookInstanceAcceleratorType]? = nil,
        additionalCodeRepositories: [Swift.String]? = nil,
        defaultCodeRepository: Swift.String? = nil,
        directInternetAccess: SageMakerClientTypes.DirectInternetAccess? = nil,
        instanceMetadataServiceConfiguration: SageMakerClientTypes.InstanceMetadataServiceConfiguration? = nil,
        instanceType: SageMakerClientTypes.InstanceType? = nil,
        kmsKeyId: Swift.String? = nil,
        lifecycleConfigName: Swift.String? = nil,
        notebookInstanceName: Swift.String? = nil,
        platformIdentifier: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        rootAccess: SageMakerClientTypes.RootAccess? = nil,
        securityGroupIds: [Swift.String]? = nil,
        subnetId: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        volumeSizeInGB: Swift.Int? = nil
    )
    {
        self.acceleratorTypes = acceleratorTypes
        self.additionalCodeRepositories = additionalCodeRepositories
        self.defaultCodeRepository = defaultCodeRepository
        self.directInternetAccess = directInternetAccess
        self.instanceMetadataServiceConfiguration = instanceMetadataServiceConfiguration
        self.instanceType = instanceType
        self.kmsKeyId = kmsKeyId
        self.lifecycleConfigName = lifecycleConfigName
        self.notebookInstanceName = notebookInstanceName
        self.platformIdentifier = platformIdentifier
        self.roleArn = roleArn
        self.rootAccess = rootAccess
        self.securityGroupIds = securityGroupIds
        self.subnetId = subnetId
        self.tags = tags
        self.volumeSizeInGB = volumeSizeInGB
    }
}

public struct CreateNotebookInstanceOutput {
    /// The Amazon Resource Name (ARN) of the notebook instance.
    public var notebookInstanceArn: Swift.String?

    public init(
        notebookInstanceArn: Swift.String? = nil
    )
    {
        self.notebookInstanceArn = notebookInstanceArn
    }
}

extension SageMakerClientTypes {
    /// Contains the notebook instance lifecycle configuration script. Each lifecycle configuration script has a limit of 16384 characters. The value of the $PATH environment variable that is available to both scripts is /sbin:bin:/usr/sbin:/usr/bin. View Amazon CloudWatch Logs for notebook instance lifecycle configurations in log group /aws/sagemaker/NotebookInstances in log stream [notebook-instance-name]/[LifecycleConfigHook]. Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs for longer than 5 minutes, it fails and the notebook instance is not created or started. For information about notebook instance lifestyle configurations, see [Step 2.1: (Optional) Customize a Notebook Instance](https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html).
    public struct NotebookInstanceLifecycleHook {
        /// A base64-encoded string that contains a shell script for a notebook instance lifecycle configuration.
        public var content: Swift.String?

        public init(
            content: Swift.String? = nil
        )
        {
            self.content = content
        }
    }

}

public struct CreateNotebookInstanceLifecycleConfigInput {
    /// The name of the lifecycle configuration.
    /// This member is required.
    public var notebookInstanceLifecycleConfigName: Swift.String?
    /// A shell script that runs only once, when you create a notebook instance. The shell script must be a base64-encoded string.
    public var onCreate: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?
    /// A shell script that runs every time you start a notebook instance, including when you create the notebook instance. The shell script must be a base64-encoded string.
    public var onStart: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?

    public init(
        notebookInstanceLifecycleConfigName: Swift.String? = nil,
        onCreate: [SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil,
        onStart: [SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil
    )
    {
        self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
        self.onCreate = onCreate
        self.onStart = onStart
    }
}

public struct CreateNotebookInstanceLifecycleConfigOutput {
    /// The Amazon Resource Name (ARN) of the lifecycle configuration.
    public var notebookInstanceLifecycleConfigArn: Swift.String?

    public init(
        notebookInstanceLifecycleConfigArn: Swift.String? = nil
    )
    {
        self.notebookInstanceLifecycleConfigArn = notebookInstanceLifecycleConfigArn
    }
}

extension SageMakerClientTypes {

    public enum OptimizationJobDeploymentInstanceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mlG512xlarge
        case mlG516xlarge
        case mlG524xlarge
        case mlG52xlarge
        case mlG548xlarge
        case mlG54xlarge
        case mlG58xlarge
        case mlG5Xlarge
        case mlG612xlarge
        case mlG616xlarge
        case mlG624xlarge
        case mlG62xlarge
        case mlG648xlarge
        case mlG64xlarge
        case mlG68xlarge
        case mlG6Xlarge
        case mlInf224xlarge
        case mlInf248xlarge
        case mlInf28xlarge
        case mlInf2Xlarge
        case mlP4de24xlarge
        case mlP4d24xlarge
        case mlP548xlarge
        case mlTrn1n32xlarge
        case mlTrn12xlarge
        case mlTrn132xlarge
        case sdkUnknown(Swift.String)

        public static var allCases: [OptimizationJobDeploymentInstanceType] {
            return [
                .mlG512xlarge,
                .mlG516xlarge,
                .mlG524xlarge,
                .mlG52xlarge,
                .mlG548xlarge,
                .mlG54xlarge,
                .mlG58xlarge,
                .mlG5Xlarge,
                .mlG612xlarge,
                .mlG616xlarge,
                .mlG624xlarge,
                .mlG62xlarge,
                .mlG648xlarge,
                .mlG64xlarge,
                .mlG68xlarge,
                .mlG6Xlarge,
                .mlInf224xlarge,
                .mlInf248xlarge,
                .mlInf28xlarge,
                .mlInf2Xlarge,
                .mlP4de24xlarge,
                .mlP4d24xlarge,
                .mlP548xlarge,
                .mlTrn1n32xlarge,
                .mlTrn12xlarge,
                .mlTrn132xlarge
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mlG512xlarge: return "ml.g5.12xlarge"
            case .mlG516xlarge: return "ml.g5.16xlarge"
            case .mlG524xlarge: return "ml.g5.24xlarge"
            case .mlG52xlarge: return "ml.g5.2xlarge"
            case .mlG548xlarge: return "ml.g5.48xlarge"
            case .mlG54xlarge: return "ml.g5.4xlarge"
            case .mlG58xlarge: return "ml.g5.8xlarge"
            case .mlG5Xlarge: return "ml.g5.xlarge"
            case .mlG612xlarge: return "ml.g6.12xlarge"
            case .mlG616xlarge: return "ml.g6.16xlarge"
            case .mlG624xlarge: return "ml.g6.24xlarge"
            case .mlG62xlarge: return "ml.g6.2xlarge"
            case .mlG648xlarge: return "ml.g6.48xlarge"
            case .mlG64xlarge: return "ml.g6.4xlarge"
            case .mlG68xlarge: return "ml.g6.8xlarge"
            case .mlG6Xlarge: return "ml.g6.xlarge"
            case .mlInf224xlarge: return "ml.inf2.24xlarge"
            case .mlInf248xlarge: return "ml.inf2.48xlarge"
            case .mlInf28xlarge: return "ml.inf2.8xlarge"
            case .mlInf2Xlarge: return "ml.inf2.xlarge"
            case .mlP4de24xlarge: return "ml.p4de.24xlarge"
            case .mlP4d24xlarge: return "ml.p4d.24xlarge"
            case .mlP548xlarge: return "ml.p5.48xlarge"
            case .mlTrn1n32xlarge: return "ml.trn1n.32xlarge"
            case .mlTrn12xlarge: return "ml.trn1.2xlarge"
            case .mlTrn132xlarge: return "ml.trn1.32xlarge"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The access configuration settings for the source ML model for an optimization job, where you can accept the model end-user license agreement (EULA).
    public struct OptimizationModelAccessConfig {
        /// Specifies agreement to the model end-user license agreement (EULA). The AcceptEula value must be explicitly defined as True in order to accept the EULA that this model requires. You are responsible for reviewing and complying with any applicable license terms and making sure they are acceptable for your use case before downloading or using a model.
        /// This member is required.
        public var acceptEula: Swift.Bool?

        public init(
            acceptEula: Swift.Bool? = nil
        )
        {
            self.acceptEula = acceptEula
        }
    }

}

extension SageMakerClientTypes {
    /// The Amazon S3 location of a source model to optimize with an optimization job.
    public struct OptimizationJobModelSourceS3 {
        /// The access configuration settings for the source ML model for an optimization job, where you can accept the model end-user license agreement (EULA).
        public var modelAccessConfig: SageMakerClientTypes.OptimizationModelAccessConfig?
        /// An Amazon S3 URI that locates a source model to optimize with an optimization job.
        public var s3Uri: Swift.String?

        public init(
            modelAccessConfig: SageMakerClientTypes.OptimizationModelAccessConfig? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.modelAccessConfig = modelAccessConfig
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    /// The location of the source model to optimize with an optimization job.
    public struct OptimizationJobModelSource {
        /// The Amazon S3 location of a source model to optimize with an optimization job.
        public var s3: SageMakerClientTypes.OptimizationJobModelSourceS3?

        public init(
            s3: SageMakerClientTypes.OptimizationJobModelSourceS3? = nil
        )
        {
            self.s3 = s3
        }
    }

}

extension SageMakerClientTypes {
    /// Settings for the model compilation technique that's applied by a model optimization job.
    public struct ModelCompilationConfig {
        /// The URI of an LMI DLC in Amazon ECR. SageMaker uses this image to run the optimization.
        public var image: Swift.String?
        /// Environment variables that override the default ones in the model container.
        public var overrideEnvironment: [Swift.String: Swift.String]?

        public init(
            image: Swift.String? = nil,
            overrideEnvironment: [Swift.String: Swift.String]? = nil
        )
        {
            self.image = image
            self.overrideEnvironment = overrideEnvironment
        }
    }

}

extension SageMakerClientTypes {
    /// Settings for the model quantization technique that's applied by a model optimization job.
    public struct ModelQuantizationConfig {
        /// The URI of an LMI DLC in Amazon ECR. SageMaker uses this image to run the optimization.
        public var image: Swift.String?
        /// Environment variables that override the default ones in the model container.
        public var overrideEnvironment: [Swift.String: Swift.String]?

        public init(
            image: Swift.String? = nil,
            overrideEnvironment: [Swift.String: Swift.String]? = nil
        )
        {
            self.image = image
            self.overrideEnvironment = overrideEnvironment
        }
    }

}

extension SageMakerClientTypes {
    /// Settings for an optimization technique that you apply with a model optimization job.
    public enum OptimizationConfig {
        /// Settings for the model quantization technique that's applied by a model optimization job.
        case modelquantizationconfig(SageMakerClientTypes.ModelQuantizationConfig)
        /// Settings for the model compilation technique that's applied by a model optimization job.
        case modelcompilationconfig(SageMakerClientTypes.ModelCompilationConfig)
        case sdkUnknown(Swift.String)
    }

}

extension SageMakerClientTypes {
    /// Details for where to store the optimized model that you create with the optimization job.
    public struct OptimizationJobOutputConfig {
        /// The Amazon Resource Name (ARN) of a key in Amazon Web Services KMS. SageMaker uses they key to encrypt the artifacts of the optimized model when SageMaker uploads the model to Amazon S3.
        public var kmsKeyId: Swift.String?
        /// The Amazon S3 URI for where to store the optimized model that you create with an optimization job.
        /// This member is required.
        public var s3OutputLocation: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil,
            s3OutputLocation: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3OutputLocation = s3OutputLocation
        }
    }

}

extension SageMakerClientTypes {
    /// A VPC in Amazon VPC that's accessible to an optimized that you create with an optimization job. You can control access to and from your resources by configuring a VPC. For more information, see [Give SageMaker Access to Resources in your Amazon VPC](https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html).
    public struct OptimizationVpcConfig {
        /// The VPC security group IDs, in the form sg-xxxxxxxx. Specify the security groups for the VPC that is specified in the Subnets field.
        /// This member is required.
        public var securityGroupIds: [Swift.String]?
        /// The ID of the subnets in the VPC to which you want to connect your optimized model.
        /// This member is required.
        public var subnets: [Swift.String]?

        public init(
            securityGroupIds: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
        }
    }

}

public struct CreateOptimizationJobInput {
    /// The type of instance that hosts the optimized model that you create with the optimization job.
    /// This member is required.
    public var deploymentInstanceType: SageMakerClientTypes.OptimizationJobDeploymentInstanceType?
    /// The location of the source model to optimize with an optimization job.
    /// This member is required.
    public var modelSource: SageMakerClientTypes.OptimizationJobModelSource?
    /// Settings for each of the optimization techniques that the job applies.
    /// This member is required.
    public var optimizationConfigs: [SageMakerClientTypes.OptimizationConfig]?
    /// The environment variables to set in the model container.
    public var optimizationEnvironment: [Swift.String: Swift.String]?
    /// A custom name for the new optimization job.
    /// This member is required.
    public var optimizationJobName: Swift.String?
    /// Details for where to store the optimized model that you create with the optimization job.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.OptimizationJobOutputConfig?
    /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf. During model optimization, Amazon SageMaker needs your permission to:
    ///
    /// * Read input data from an S3 bucket
    ///
    /// * Write model artifacts to an S3 bucket
    ///
    /// * Write logs to Amazon CloudWatch Logs
    ///
    /// * Publish metrics to Amazon CloudWatch
    ///
    ///
    /// You grant permissions for all of these tasks to an IAM role. To pass this role to Amazon SageMaker, the caller of this API must have the iam:PassRole permission. For more information, see [Amazon SageMaker Roles.](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html)
    /// This member is required.
    public var roleArn: Swift.String?
    /// Specifies a limit to how long a job can run. When the job reaches the time limit, SageMaker ends the job. Use this API to cap costs. To stop a training job, SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost. The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with CreateModel. The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.
    /// This member is required.
    public var stoppingCondition: SageMakerClientTypes.StoppingCondition?
    /// A list of key-value pairs associated with the optimization job. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference Guide.
    public var tags: [SageMakerClientTypes.Tag]?
    /// A VPC in Amazon VPC that your optimized model has access to.
    public var vpcConfig: SageMakerClientTypes.OptimizationVpcConfig?

    public init(
        deploymentInstanceType: SageMakerClientTypes.OptimizationJobDeploymentInstanceType? = nil,
        modelSource: SageMakerClientTypes.OptimizationJobModelSource? = nil,
        optimizationConfigs: [SageMakerClientTypes.OptimizationConfig]? = nil,
        optimizationEnvironment: [Swift.String: Swift.String]? = nil,
        optimizationJobName: Swift.String? = nil,
        outputConfig: SageMakerClientTypes.OptimizationJobOutputConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.StoppingCondition? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        vpcConfig: SageMakerClientTypes.OptimizationVpcConfig? = nil
    )
    {
        self.deploymentInstanceType = deploymentInstanceType
        self.modelSource = modelSource
        self.optimizationConfigs = optimizationConfigs
        self.optimizationEnvironment = optimizationEnvironment
        self.optimizationJobName = optimizationJobName
        self.outputConfig = outputConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
        self.tags = tags
        self.vpcConfig = vpcConfig
    }
}

public struct CreateOptimizationJobOutput {
    /// The Amazon Resource Name (ARN) of the optimization job.
    /// This member is required.
    public var optimizationJobArn: Swift.String?

    public init(
        optimizationJobArn: Swift.String? = nil
    )
    {
        self.optimizationJobArn = optimizationJobArn
    }
}

extension SageMakerClientTypes {
    /// Configuration that controls the parallelism of the pipeline. By default, the parallelism configuration specified applies to all executions of the pipeline unless overridden.
    public struct ParallelismConfiguration {
        /// The max number of steps that can be executed in parallel.
        /// This member is required.
        public var maxParallelExecutionSteps: Swift.Int?

        public init(
            maxParallelExecutionSteps: Swift.Int? = nil
        )
        {
            self.maxParallelExecutionSteps = maxParallelExecutionSteps
        }
    }

}

extension SageMakerClientTypes {
    /// The location of the pipeline definition stored in Amazon S3.
    public struct PipelineDefinitionS3Location {
        /// Name of the S3 bucket.
        /// This member is required.
        public var bucket: Swift.String?
        /// The object key (or key name) uniquely identifies the object in an S3 bucket.
        /// This member is required.
        public var objectKey: Swift.String?
        /// Version Id of the pipeline definition file. If not specified, Amazon SageMaker will retrieve the latest version.
        public var versionId: Swift.String?

        public init(
            bucket: Swift.String? = nil,
            objectKey: Swift.String? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.objectKey = objectKey
            self.versionId = versionId
        }
    }

}

public struct CreatePipelineInput {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// This is the configuration that controls the parallelism of the pipeline. If specified, it applies to all runs of this pipeline by default.
    public var parallelismConfiguration: SageMakerClientTypes.ParallelismConfiguration?
    /// The [JSON pipeline definition](https://aws-sagemaker-mlops.github.io/sagemaker-model-building-pipeline-definition-JSON-schema/) of the pipeline.
    public var pipelineDefinition: Swift.String?
    /// The location of the pipeline definition stored in Amazon S3. If specified, SageMaker will retrieve the pipeline definition from this location.
    public var pipelineDefinitionS3Location: SageMakerClientTypes.PipelineDefinitionS3Location?
    /// A description of the pipeline.
    public var pipelineDescription: Swift.String?
    /// The display name of the pipeline.
    public var pipelineDisplayName: Swift.String?
    /// The name of the pipeline.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The Amazon Resource Name (ARN) of the role used by the pipeline to access and create resources.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A list of tags to apply to the created pipeline.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        clientRequestToken: Swift.String? = nil,
        parallelismConfiguration: SageMakerClientTypes.ParallelismConfiguration? = nil,
        pipelineDefinition: Swift.String? = nil,
        pipelineDefinitionS3Location: SageMakerClientTypes.PipelineDefinitionS3Location? = nil,
        pipelineDescription: Swift.String? = nil,
        pipelineDisplayName: Swift.String? = nil,
        pipelineName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.parallelismConfiguration = parallelismConfiguration
        self.pipelineDefinition = pipelineDefinition
        self.pipelineDefinitionS3Location = pipelineDefinitionS3Location
        self.pipelineDescription = pipelineDescription
        self.pipelineDisplayName = pipelineDisplayName
        self.pipelineName = pipelineName
        self.roleArn = roleArn
        self.tags = tags
    }
}

public struct CreatePipelineOutput {
    /// The Amazon Resource Name (ARN) of the created pipeline.
    public var pipelineArn: Swift.String?

    public init(
        pipelineArn: Swift.String? = nil
    )
    {
        self.pipelineArn = pipelineArn
    }
}

public struct CreatePresignedDomainUrlInput {
    /// The domain ID.
    /// This member is required.
    public var domainId: Swift.String?
    /// The number of seconds until the pre-signed URL expires. This value defaults to 300.
    public var expiresInSeconds: Swift.Int?
    /// The landing page that the user is directed to when accessing the presigned URL. Using this value, users can access Studio or Studio Classic, even if it is not the default experience for the domain. The supported values are:
    ///
    /// * studio::relative/path: Directs users to the relative path in Studio.
    ///
    /// * app:JupyterServer:relative/path: Directs users to the relative path in the Studio Classic application.
    ///
    /// * app:JupyterLab:relative/path: Directs users to the relative path in the JupyterLab application.
    ///
    /// * app:RStudioServerPro:relative/path: Directs users to the relative path in the RStudio application.
    ///
    /// * app:CodeEditor:relative/path: Directs users to the relative path in the Code Editor, based on Code-OSS, Visual Studio Code - Open Source application.
    ///
    /// * app:Canvas:relative/path: Directs users to the relative path in the Canvas application.
    public var landingUri: Swift.String?
    /// The session expiration duration in seconds. This value defaults to 43200.
    public var sessionExpirationDurationInSeconds: Swift.Int?
    /// The name of the space.
    public var spaceName: Swift.String?
    /// The name of the UserProfile to sign-in as.
    /// This member is required.
    public var userProfileName: Swift.String?

    public init(
        domainId: Swift.String? = nil,
        expiresInSeconds: Swift.Int? = nil,
        landingUri: Swift.String? = nil,
        sessionExpirationDurationInSeconds: Swift.Int? = nil,
        spaceName: Swift.String? = nil,
        userProfileName: Swift.String? = nil
    )
    {
        self.domainId = domainId
        self.expiresInSeconds = expiresInSeconds
        self.landingUri = landingUri
        self.sessionExpirationDurationInSeconds = sessionExpirationDurationInSeconds
        self.spaceName = spaceName
        self.userProfileName = userProfileName
    }
}

public struct CreatePresignedDomainUrlOutput {
    /// The presigned URL.
    public var authorizedUrl: Swift.String?

    public init(
        authorizedUrl: Swift.String? = nil
    )
    {
        self.authorizedUrl = authorizedUrl
    }
}

public struct CreatePresignedMlflowTrackingServerUrlInput {
    /// The duration in seconds that your presigned URL is valid. The presigned URL can be used only once.
    public var expiresInSeconds: Swift.Int?
    /// The duration in seconds that your MLflow UI session is valid.
    public var sessionExpirationDurationInSeconds: Swift.Int?
    /// The name of the tracking server to connect to your MLflow UI.
    /// This member is required.
    public var trackingServerName: Swift.String?

    public init(
        expiresInSeconds: Swift.Int? = nil,
        sessionExpirationDurationInSeconds: Swift.Int? = nil,
        trackingServerName: Swift.String? = nil
    )
    {
        self.expiresInSeconds = expiresInSeconds
        self.sessionExpirationDurationInSeconds = sessionExpirationDurationInSeconds
        self.trackingServerName = trackingServerName
    }
}

public struct CreatePresignedMlflowTrackingServerUrlOutput {
    /// A presigned URL with an authorization token.
    public var authorizedUrl: Swift.String?

    public init(
        authorizedUrl: Swift.String? = nil
    )
    {
        self.authorizedUrl = authorizedUrl
    }
}

public struct CreatePresignedNotebookInstanceUrlInput {
    /// The name of the notebook instance.
    /// This member is required.
    public var notebookInstanceName: Swift.String?
    /// The duration of the session, in seconds. The default is 12 hours.
    public var sessionExpirationDurationInSeconds: Swift.Int?

    public init(
        notebookInstanceName: Swift.String? = nil,
        sessionExpirationDurationInSeconds: Swift.Int? = nil
    )
    {
        self.notebookInstanceName = notebookInstanceName
        self.sessionExpirationDurationInSeconds = sessionExpirationDurationInSeconds
    }
}

public struct CreatePresignedNotebookInstanceUrlOutput {
    /// A JSON object that contains the URL string.
    public var authorizedUrl: Swift.String?

    public init(
        authorizedUrl: Swift.String? = nil
    )
    {
        self.authorizedUrl = authorizedUrl
    }
}

extension SageMakerClientTypes {
    /// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
    ///
    /// * [CreateProcessingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html)
    ///
    /// * [CreateTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
    ///
    /// * [CreateTransformJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html)
    public struct ExperimentConfig {
        /// The name of an existing experiment to associate with the trial component.
        public var experimentName: Swift.String?
        /// The name of the experiment run to associate with the trial component.
        public var runName: Swift.String?
        /// The display name for the trial component. If this key isn't specified, the display name is the trial component name.
        public var trialComponentDisplayName: Swift.String?
        /// The name of an existing trial to associate the trial component with. If not specified, a new trial is created.
        public var trialName: Swift.String?

        public init(
            experimentName: Swift.String? = nil,
            runName: Swift.String? = nil,
            trialComponentDisplayName: Swift.String? = nil,
            trialName: Swift.String? = nil
        )
        {
            self.experimentName = experimentName
            self.runName = runName
            self.trialComponentDisplayName = trialComponentDisplayName
            self.trialName = trialName
        }
    }

}

extension SageMakerClientTypes {

    public enum DataDistributionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fullyreplicated
        case shardedbys3key
        case sdkUnknown(Swift.String)

        public static var allCases: [DataDistributionType] {
            return [
                .fullyreplicated,
                .shardedbys3key
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fullyreplicated: return "FullyReplicated"
            case .shardedbys3key: return "ShardedByS3Key"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum InputMode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case file
        case pipe
        case sdkUnknown(Swift.String)

        public static var allCases: [InputMode] {
            return [
                .file,
                .pipe
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .file: return "File"
            case .pipe: return "Pipe"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    /// The compression used for Redshift query results.
    public enum RedshiftResultCompressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case bzip2
        case gzip
        case `none`
        case snappy
        case zstd
        case sdkUnknown(Swift.String)

        public static var allCases: [RedshiftResultCompressionType] {
            return [
                .bzip2,
                .gzip,
                .none,
                .snappy,
                .zstd
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .bzip2: return "BZIP2"
            case .gzip: return "GZIP"
            case .none: return "None"
            case .snappy: return "SNAPPY"
            case .zstd: return "ZSTD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    /// The data storage format for Redshift query results.
    public enum RedshiftResultFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case csv
        case parquet
        case sdkUnknown(Swift.String)

        public static var allCases: [RedshiftResultFormat] {
            return [
                .csv,
                .parquet
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .csv: return "CSV"
            case .parquet: return "PARQUET"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Configuration for Redshift Dataset Definition input.
    public struct RedshiftDatasetDefinition {
        /// The Redshift cluster Identifier.
        /// This member is required.
        public var clusterId: Swift.String?
        /// The IAM role attached to your Redshift cluster that Amazon SageMaker uses to generate datasets.
        /// This member is required.
        public var clusterRoleArn: Swift.String?
        /// The name of the Redshift database used in Redshift query execution.
        /// This member is required.
        public var database: Swift.String?
        /// The database user name used in Redshift query execution.
        /// This member is required.
        public var dbUser: Swift.String?
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data from a Redshift execution.
        public var kmsKeyId: Swift.String?
        /// The compression used for Redshift query results.
        public var outputCompression: SageMakerClientTypes.RedshiftResultCompressionType?
        /// The data storage format for Redshift query results.
        /// This member is required.
        public var outputFormat: SageMakerClientTypes.RedshiftResultFormat?
        /// The location in Amazon S3 where the Redshift query results are stored.
        /// This member is required.
        public var outputS3Uri: Swift.String?
        /// The SQL query statements to be executed.
        /// This member is required.
        public var queryString: Swift.String?

        public init(
            clusterId: Swift.String? = nil,
            clusterRoleArn: Swift.String? = nil,
            database: Swift.String? = nil,
            dbUser: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            outputCompression: SageMakerClientTypes.RedshiftResultCompressionType? = nil,
            outputFormat: SageMakerClientTypes.RedshiftResultFormat? = nil,
            outputS3Uri: Swift.String? = nil,
            queryString: Swift.String? = nil
        )
        {
            self.clusterId = clusterId
            self.clusterRoleArn = clusterRoleArn
            self.database = database
            self.dbUser = dbUser
            self.kmsKeyId = kmsKeyId
            self.outputCompression = outputCompression
            self.outputFormat = outputFormat
            self.outputS3Uri = outputS3Uri
            self.queryString = queryString
        }
    }

}

extension SageMakerClientTypes {
    /// Configuration for Dataset Definition inputs. The Dataset Definition input must specify exactly one of either AthenaDatasetDefinition or RedshiftDatasetDefinition types.
    public struct DatasetDefinition {
        /// Configuration for Athena Dataset Definition input.
        public var athenaDatasetDefinition: SageMakerClientTypes.AthenaDatasetDefinition?
        /// Whether the generated dataset is FullyReplicated or ShardedByS3Key (default).
        public var dataDistributionType: SageMakerClientTypes.DataDistributionType?
        /// Whether to use File or Pipe input mode. In File (default) mode, Amazon SageMaker copies the data from the input source onto the local Amazon Elastic Block Store (Amazon EBS) volumes before starting your training algorithm. This is the most commonly used input mode. In Pipe mode, Amazon SageMaker streams input data from the source directly to your algorithm without using the EBS volume.
        public var inputMode: SageMakerClientTypes.InputMode?
        /// The local path where you want Amazon SageMaker to download the Dataset Definition inputs to run a processing job. LocalPath is an absolute path to the input data. This is a required parameter when AppManaged is False (default).
        public var localPath: Swift.String?
        /// Configuration for Redshift Dataset Definition input.
        public var redshiftDatasetDefinition: SageMakerClientTypes.RedshiftDatasetDefinition?

        public init(
            athenaDatasetDefinition: SageMakerClientTypes.AthenaDatasetDefinition? = nil,
            dataDistributionType: SageMakerClientTypes.DataDistributionType? = nil,
            inputMode: SageMakerClientTypes.InputMode? = nil,
            localPath: Swift.String? = nil,
            redshiftDatasetDefinition: SageMakerClientTypes.RedshiftDatasetDefinition? = nil
        )
        {
            self.athenaDatasetDefinition = athenaDatasetDefinition
            self.dataDistributionType = dataDistributionType
            self.inputMode = inputMode
            self.localPath = localPath
            self.redshiftDatasetDefinition = redshiftDatasetDefinition
        }
    }

}

extension SageMakerClientTypes {

    public enum ProcessingS3CompressionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case gzip
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessingS3CompressionType] {
            return [
                .gzip,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .gzip: return "Gzip"
            case .none: return "None"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum ProcessingS3DataType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case manifestFile
        case s3Prefix
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessingS3DataType] {
            return [
                .manifestFile,
                .s3Prefix
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .manifestFile: return "ManifestFile"
            case .s3Prefix: return "S3Prefix"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Configuration for downloading input data from Amazon S3 into the processing container.
    public struct ProcessingS3Input {
        /// The local path in your container where you want Amazon SageMaker to write input data to. LocalPath is an absolute path to the input data and must begin with /opt/ml/processing/. LocalPath is a required parameter when AppManaged is False (default).
        public var localPath: Swift.String?
        /// Whether to GZIP-decompress the data in Amazon S3 as it is streamed into the processing container. Gzip can only be used when Pipe mode is specified as the S3InputMode. In Pipe mode, Amazon SageMaker streams input data from the source directly to your container without using the EBS volume.
        public var s3CompressionType: SageMakerClientTypes.ProcessingS3CompressionType?
        /// Whether to distribute the data from Amazon S3 to all processing instances with FullyReplicated, or whether the data from Amazon S3 is shared by Amazon S3 key, downloading one shard of data to each processing instance.
        public var s3DataDistributionType: SageMakerClientTypes.ProcessingS3DataDistributionType?
        /// Whether you use an S3Prefix or a ManifestFile for the data type. If you choose S3Prefix, S3Uri identifies a key name prefix. Amazon SageMaker uses all objects with the specified key name prefix for the processing job. If you choose ManifestFile, S3Uri identifies an object that is a manifest file containing a list of object keys that you want Amazon SageMaker to use for the processing job.
        /// This member is required.
        public var s3DataType: SageMakerClientTypes.ProcessingS3DataType?
        /// Whether to use File or Pipe input mode. In File mode, Amazon SageMaker copies the data from the input source onto the local ML storage volume before starting your processing container. This is the most commonly used input mode. In Pipe mode, Amazon SageMaker streams input data from the source directly to your processing container into named pipes without using the ML storage volume.
        public var s3InputMode: SageMakerClientTypes.ProcessingS3InputMode?
        /// The URI of the Amazon S3 prefix Amazon SageMaker downloads data required to run a processing job.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            localPath: Swift.String? = nil,
            s3CompressionType: SageMakerClientTypes.ProcessingS3CompressionType? = nil,
            s3DataDistributionType: SageMakerClientTypes.ProcessingS3DataDistributionType? = nil,
            s3DataType: SageMakerClientTypes.ProcessingS3DataType? = nil,
            s3InputMode: SageMakerClientTypes.ProcessingS3InputMode? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.localPath = localPath
            self.s3CompressionType = s3CompressionType
            self.s3DataDistributionType = s3DataDistributionType
            self.s3DataType = s3DataType
            self.s3InputMode = s3InputMode
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    /// The inputs for a processing job. The processing input must specify exactly one of either S3Input or DatasetDefinition types.
    public struct ProcessingInput {
        /// When True, input operations such as data download are managed natively by the processing job application. When False (default), input operations are managed by Amazon SageMaker.
        public var appManaged: Swift.Bool?
        /// Configuration for a Dataset Definition input.
        public var datasetDefinition: SageMakerClientTypes.DatasetDefinition?
        /// The name for the processing job input.
        /// This member is required.
        public var inputName: Swift.String?
        /// Configuration for downloading input data from Amazon S3 into the processing container.
        public var s3Input: SageMakerClientTypes.ProcessingS3Input?

        public init(
            appManaged: Swift.Bool? = nil,
            datasetDefinition: SageMakerClientTypes.DatasetDefinition? = nil,
            inputName: Swift.String? = nil,
            s3Input: SageMakerClientTypes.ProcessingS3Input? = nil
        )
        {
            self.appManaged = appManaged
            self.datasetDefinition = datasetDefinition
            self.inputName = inputName
            self.s3Input = s3Input
        }
    }

}

extension SageMakerClientTypes {
    /// Configuration for processing job outputs in Amazon SageMaker Feature Store.
    public struct ProcessingFeatureStoreOutput {
        /// The name of the Amazon SageMaker FeatureGroup to use as the destination for processing job output. Note that your processing script is responsible for putting records into your Feature Store.
        /// This member is required.
        public var featureGroupName: Swift.String?

        public init(
            featureGroupName: Swift.String? = nil
        )
        {
            self.featureGroupName = featureGroupName
        }
    }

}

extension SageMakerClientTypes {
    /// Configuration for uploading output data to Amazon S3 from the processing container.
    public struct ProcessingS3Output {
        /// The local path of a directory where you want Amazon SageMaker to upload its contents to Amazon S3. LocalPath is an absolute path to a directory containing output files. This directory will be created by the platform and exist when your container's entrypoint is invoked.
        public var localPath: Swift.String?
        /// Whether to upload the results of the processing job continuously or after the job completes.
        /// This member is required.
        public var s3UploadMode: SageMakerClientTypes.ProcessingS3UploadMode?
        /// A URI that identifies the Amazon S3 bucket where you want Amazon SageMaker to save the results of a processing job.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            localPath: Swift.String? = nil,
            s3UploadMode: SageMakerClientTypes.ProcessingS3UploadMode? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.localPath = localPath
            self.s3UploadMode = s3UploadMode
            self.s3Uri = s3Uri
        }
    }

}

extension SageMakerClientTypes {
    /// Describes the results of a processing job. The processing output must specify exactly one of either S3Output or FeatureStoreOutput types.
    public struct ProcessingOutput {
        /// When True, output operations such as data upload are managed natively by the processing job application. When False (default), output operations are managed by Amazon SageMaker.
        public var appManaged: Swift.Bool?
        /// Configuration for processing job outputs in Amazon SageMaker Feature Store. This processing output type is only supported when AppManaged is specified.
        public var featureStoreOutput: SageMakerClientTypes.ProcessingFeatureStoreOutput?
        /// The name for the processing job output.
        /// This member is required.
        public var outputName: Swift.String?
        /// Configuration for processing job outputs in Amazon S3.
        public var s3Output: SageMakerClientTypes.ProcessingS3Output?

        public init(
            appManaged: Swift.Bool? = nil,
            featureStoreOutput: SageMakerClientTypes.ProcessingFeatureStoreOutput? = nil,
            outputName: Swift.String? = nil,
            s3Output: SageMakerClientTypes.ProcessingS3Output? = nil
        )
        {
            self.appManaged = appManaged
            self.featureStoreOutput = featureStoreOutput
            self.outputName = outputName
            self.s3Output = s3Output
        }
    }

}

extension SageMakerClientTypes {
    /// Configuration for uploading output from the processing container.
    public struct ProcessingOutputConfig {
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt the processing job output. KmsKeyId can be an ID of a KMS key, ARN of a KMS key, alias of a KMS key, or alias of a KMS key. The KmsKeyId is applied to all outputs.
        public var kmsKeyId: Swift.String?
        /// An array of outputs configuring the data to upload from the processing container.
        /// This member is required.
        public var outputs: [SageMakerClientTypes.ProcessingOutput]?

        public init(
            kmsKeyId: Swift.String? = nil,
            outputs: [SageMakerClientTypes.ProcessingOutput]? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.outputs = outputs
        }
    }

}

extension SageMakerClientTypes {
    /// Configuration for the cluster used to run a processing job.
    public struct ProcessingClusterConfig {
        /// The number of ML compute instances to use in the processing job. For distributed processing jobs, specify a value greater than 1. The default value is 1.
        /// This member is required.
        public var instanceCount: Swift.Int?
        /// The ML compute instance type for the processing job.
        /// This member is required.
        public var instanceType: SageMakerClientTypes.ProcessingInstanceType?
        /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance(s) that run the processing job. Certain Nitro-based instances include local storage, dependent on the instance type. Local storage volumes are encrypted using a hardware module on the instance. You can't request a VolumeKmsKeyId when using an instance type with local storage. For a list of instance types that support local instance storage, see [Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes). For more information about local instance storage encryption, see [SSD Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html).
        public var volumeKmsKeyId: Swift.String?
        /// The size of the ML storage volume in gigabytes that you want to provision. You must specify sufficient ML storage for your scenario. Certain Nitro-based instances include local storage with a fixed total size, dependent on the instance type. When using these instances for processing, Amazon SageMaker mounts the local instance storage instead of Amazon EBS gp2 storage. You can't request a VolumeSizeInGB greater than the total size of the local instance storage. For a list of instance types that support local instance storage, including the total size per instance type, see [Instance Store Volumes](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes).
        /// This member is required.
        public var volumeSizeInGB: Swift.Int?

        public init(
            instanceCount: Swift.Int? = nil,
            instanceType: SageMakerClientTypes.ProcessingInstanceType? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            volumeSizeInGB: Swift.Int? = nil
        )
        {
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.volumeKmsKeyId = volumeKmsKeyId
            self.volumeSizeInGB = volumeSizeInGB
        }
    }

}

extension SageMakerClientTypes {
    /// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
    public struct ProcessingResources {
        /// The configuration for the resources in a cluster used to run the processing job.
        /// This member is required.
        public var clusterConfig: SageMakerClientTypes.ProcessingClusterConfig?

        public init(
            clusterConfig: SageMakerClientTypes.ProcessingClusterConfig? = nil
        )
        {
            self.clusterConfig = clusterConfig
        }
    }

}

extension SageMakerClientTypes {
    /// Configures conditions under which the processing job should be stopped, such as how long the processing job has been running. After the condition is met, the processing job is stopped.
    public struct ProcessingStoppingCondition {
        /// Specifies the maximum runtime in seconds.
        /// This member is required.
        public var maxRuntimeInSeconds: Swift.Int?

        public init(
            maxRuntimeInSeconds: Swift.Int? = nil
        )
        {
            self.maxRuntimeInSeconds = maxRuntimeInSeconds
        }
    }

}

public struct CreateProcessingJobInput {
    /// Configures the processing job to run a specified Docker container image.
    /// This member is required.
    public var appSpecification: SageMakerClientTypes.AppSpecification?
    /// The environment variables to set in the Docker container. Up to 100 key and values entries in the map are supported.
    public var environment: [Swift.String: Swift.String]?
    /// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
    ///
    /// * [CreateProcessingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html)
    ///
    /// * [CreateTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
    ///
    /// * [CreateTransformJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html)
    public var experimentConfig: SageMakerClientTypes.ExperimentConfig?
    /// Networking options for a processing job, such as whether to allow inbound and outbound network calls to and from processing containers, and the VPC subnets and security groups to use for VPC-enabled processing jobs.
    public var networkConfig: SageMakerClientTypes.NetworkConfig?
    /// An array of inputs configuring the data to download into the processing container.
    public var processingInputs: [SageMakerClientTypes.ProcessingInput]?
    /// The name of the processing job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var processingJobName: Swift.String?
    /// Output configuration for the processing job.
    public var processingOutputConfig: SageMakerClientTypes.ProcessingOutputConfig?
    /// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
    /// This member is required.
    public var processingResources: SageMakerClientTypes.ProcessingResources?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
    /// This member is required.
    public var roleArn: Swift.String?
    /// The time limit for how long the processing job is allowed to run.
    public var stoppingCondition: SageMakerClientTypes.ProcessingStoppingCondition?
    /// (Optional) An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the Amazon Web Services Billing and Cost Management User Guide.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        appSpecification: SageMakerClientTypes.AppSpecification? = nil,
        environment: [Swift.String: Swift.String]? = nil,
        experimentConfig: SageMakerClientTypes.ExperimentConfig? = nil,
        networkConfig: SageMakerClientTypes.NetworkConfig? = nil,
        processingInputs: [SageMakerClientTypes.ProcessingInput]? = nil,
        processingJobName: Swift.String? = nil,
        processingOutputConfig: SageMakerClientTypes.ProcessingOutputConfig? = nil,
        processingResources: SageMakerClientTypes.ProcessingResources? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.ProcessingStoppingCondition? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.appSpecification = appSpecification
        self.environment = environment
        self.experimentConfig = experimentConfig
        self.networkConfig = networkConfig
        self.processingInputs = processingInputs
        self.processingJobName = processingJobName
        self.processingOutputConfig = processingOutputConfig
        self.processingResources = processingResources
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
        self.tags = tags
    }
}

public struct CreateProcessingJobOutput {
    /// The Amazon Resource Name (ARN) of the processing job.
    /// This member is required.
    public var processingJobArn: Swift.String?

    public init(
        processingJobArn: Swift.String? = nil
    )
    {
        self.processingJobArn = processingJobArn
    }
}

extension SageMakerClientTypes {
    /// A key value pair used when you provision a project as a service catalog product. For information, see [What is Amazon Web Services Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html).
    public struct ProvisioningParameter {
        /// The key that identifies a provisioning parameter.
        public var key: Swift.String?
        /// The value of the provisioning parameter.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension SageMakerClientTypes {
    /// Details that you specify to provision a service catalog product. For information about service catalog, see [What is Amazon Web Services Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html).
    public struct ServiceCatalogProvisioningDetails {
        /// The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path.
        public var pathId: Swift.String?
        /// The ID of the product to provision.
        /// This member is required.
        public var productId: Swift.String?
        /// The ID of the provisioning artifact.
        public var provisioningArtifactId: Swift.String?
        /// A list of key value pairs that you specify when you provision a product.
        public var provisioningParameters: [SageMakerClientTypes.ProvisioningParameter]?

        public init(
            pathId: Swift.String? = nil,
            productId: Swift.String? = nil,
            provisioningArtifactId: Swift.String? = nil,
            provisioningParameters: [SageMakerClientTypes.ProvisioningParameter]? = nil
        )
        {
            self.pathId = pathId
            self.productId = productId
            self.provisioningArtifactId = provisioningArtifactId
            self.provisioningParameters = provisioningParameters
        }
    }

}

public struct CreateProjectInput {
    /// A description for the project.
    public var projectDescription: Swift.String?
    /// The name of the project.
    /// This member is required.
    public var projectName: Swift.String?
    /// The product ID and provisioning artifact ID to provision a service catalog. The provisioning artifact ID will default to the latest provisioning artifact ID of the product, if you don't provide the provisioning artifact ID. For more information, see [What is Amazon Web Services Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html).
    /// This member is required.
    public var serviceCatalogProvisioningDetails: SageMakerClientTypes.ServiceCatalogProvisioningDetails?
    /// An array of key-value pairs that you want to use to organize and track your Amazon Web Services resource costs. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference Guide.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        projectDescription: Swift.String? = nil,
        projectName: Swift.String? = nil,
        serviceCatalogProvisioningDetails: SageMakerClientTypes.ServiceCatalogProvisioningDetails? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.projectDescription = projectDescription
        self.projectName = projectName
        self.serviceCatalogProvisioningDetails = serviceCatalogProvisioningDetails
        self.tags = tags
    }
}

public struct CreateProjectOutput {
    /// The Amazon Resource Name (ARN) of the project.
    /// This member is required.
    public var projectArn: Swift.String?
    /// The ID of the new project.
    /// This member is required.
    public var projectId: Swift.String?

    public init(
        projectArn: Swift.String? = nil,
        projectId: Swift.String? = nil
    )
    {
        self.projectArn = projectArn
        self.projectId = projectId
    }
}

extension SageMakerClientTypes {
    /// The collection of ownership settings for a space.
    public struct OwnershipSettings {
        /// The user profile who is the owner of the space.
        /// This member is required.
        public var ownerUserProfileName: Swift.String?

        public init(
            ownerUserProfileName: Swift.String? = nil
        )
        {
            self.ownerUserProfileName = ownerUserProfileName
        }
    }

}

extension SageMakerClientTypes {
    /// Settings related to idle shutdown of Studio applications in a space.
    public struct SpaceIdleSettings {
        /// The time that SageMaker waits after the application becomes idle before shutting it down.
        public var idleTimeoutInMinutes: Swift.Int?

        public init(
            idleTimeoutInMinutes: Swift.Int? = nil
        )
        {
            self.idleTimeoutInMinutes = idleTimeoutInMinutes
        }
    }

}

extension SageMakerClientTypes {
    /// Settings that are used to configure and manage the lifecycle of Amazon SageMaker Studio applications in a space.
    public struct SpaceAppLifecycleManagement {
        /// Settings related to idle shutdown of Studio applications.
        public var idleSettings: SageMakerClientTypes.SpaceIdleSettings?

        public init(
            idleSettings: SageMakerClientTypes.SpaceIdleSettings? = nil
        )
        {
            self.idleSettings = idleSettings
        }
    }

}

extension SageMakerClientTypes {
    /// The application settings for a Code Editor space.
    public struct SpaceCodeEditorAppSettings {
        /// Settings that are used to configure and manage the lifecycle of CodeEditor applications in a space.
        public var appLifecycleManagement: SageMakerClientTypes.SpaceAppLifecycleManagement?
        /// Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
        public var defaultResourceSpec: SageMakerClientTypes.ResourceSpec?

        public init(
            appLifecycleManagement: SageMakerClientTypes.SpaceAppLifecycleManagement? = nil,
            defaultResourceSpec: SageMakerClientTypes.ResourceSpec? = nil
        )
        {
            self.appLifecycleManagement = appLifecycleManagement
            self.defaultResourceSpec = defaultResourceSpec
        }
    }

}

extension SageMakerClientTypes {
    /// A file system, created by you in Amazon EFS, that you assign to a user profile or space for an Amazon SageMaker Domain. Permitted users can access this file system in Amazon SageMaker Studio.
    public struct EFSFileSystem {
        /// The ID of your Amazon EFS file system.
        /// This member is required.
        public var fileSystemId: Swift.String?

        public init(
            fileSystemId: Swift.String? = nil
        )
        {
            self.fileSystemId = fileSystemId
        }
    }

}

extension SageMakerClientTypes {
    /// A file system, created by you, that you assign to a user profile or space for an Amazon SageMaker Domain. Permitted users can access this file system in Amazon SageMaker Studio.
    public enum CustomFileSystem {
        /// A custom file system in Amazon EFS.
        case efsfilesystem(SageMakerClientTypes.EFSFileSystem)
        case sdkUnknown(Swift.String)
    }

}

extension SageMakerClientTypes {
    /// The settings for the JupyterLab application within a space.
    public struct SpaceJupyterLabAppSettings {
        /// Settings that are used to configure and manage the lifecycle of JupyterLab applications in a space.
        public var appLifecycleManagement: SageMakerClientTypes.SpaceAppLifecycleManagement?
        /// A list of Git repositories that SageMaker automatically displays to users for cloning in the JupyterLab application.
        public var codeRepositories: [SageMakerClientTypes.CodeRepository]?
        /// Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
        public var defaultResourceSpec: SageMakerClientTypes.ResourceSpec?

        public init(
            appLifecycleManagement: SageMakerClientTypes.SpaceAppLifecycleManagement? = nil,
            codeRepositories: [SageMakerClientTypes.CodeRepository]? = nil,
            defaultResourceSpec: SageMakerClientTypes.ResourceSpec? = nil
        )
        {
            self.appLifecycleManagement = appLifecycleManagement
            self.codeRepositories = codeRepositories
            self.defaultResourceSpec = defaultResourceSpec
        }
    }

}

extension SageMakerClientTypes {
    /// A collection of EBS storage settings that apply to both private and shared spaces.
    public struct EbsStorageSettings {
        /// The size of an EBS storage volume for a space.
        /// This member is required.
        public var ebsVolumeSizeInGb: Swift.Int?

        public init(
            ebsVolumeSizeInGb: Swift.Int? = nil
        )
        {
            self.ebsVolumeSizeInGb = ebsVolumeSizeInGb
        }
    }

}

extension SageMakerClientTypes {
    /// The storage settings for a space.
    public struct SpaceStorageSettings {
        /// A collection of EBS storage settings for a space.
        public var ebsStorageSettings: SageMakerClientTypes.EbsStorageSettings?

        public init(
            ebsStorageSettings: SageMakerClientTypes.EbsStorageSettings? = nil
        )
        {
            self.ebsStorageSettings = ebsStorageSettings
        }
    }

}

extension SageMakerClientTypes {
    /// A collection of space settings.
    public struct SpaceSettings {
        /// The type of app created within the space.
        public var appType: SageMakerClientTypes.AppType?
        /// The Code Editor application settings.
        public var codeEditorAppSettings: SageMakerClientTypes.SpaceCodeEditorAppSettings?
        /// A file system, created by you, that you assign to a space for an Amazon SageMaker Domain. Permitted users can access this file system in Amazon SageMaker Studio.
        public var customFileSystems: [SageMakerClientTypes.CustomFileSystem]?
        /// The settings for the JupyterLab application.
        public var jupyterLabAppSettings: SageMakerClientTypes.SpaceJupyterLabAppSettings?
        /// The JupyterServer app settings.
        public var jupyterServerAppSettings: SageMakerClientTypes.JupyterServerAppSettings?
        /// The KernelGateway app settings.
        public var kernelGatewayAppSettings: SageMakerClientTypes.KernelGatewayAppSettings?
        /// The storage settings for a space.
        public var spaceStorageSettings: SageMakerClientTypes.SpaceStorageSettings?

        public init(
            appType: SageMakerClientTypes.AppType? = nil,
            codeEditorAppSettings: SageMakerClientTypes.SpaceCodeEditorAppSettings? = nil,
            customFileSystems: [SageMakerClientTypes.CustomFileSystem]? = nil,
            jupyterLabAppSettings: SageMakerClientTypes.SpaceJupyterLabAppSettings? = nil,
            jupyterServerAppSettings: SageMakerClientTypes.JupyterServerAppSettings? = nil,
            kernelGatewayAppSettings: SageMakerClientTypes.KernelGatewayAppSettings? = nil,
            spaceStorageSettings: SageMakerClientTypes.SpaceStorageSettings? = nil
        )
        {
            self.appType = appType
            self.codeEditorAppSettings = codeEditorAppSettings
            self.customFileSystems = customFileSystems
            self.jupyterLabAppSettings = jupyterLabAppSettings
            self.jupyterServerAppSettings = jupyterServerAppSettings
            self.kernelGatewayAppSettings = kernelGatewayAppSettings
            self.spaceStorageSettings = spaceStorageSettings
        }
    }

}

extension SageMakerClientTypes {

    public enum SharingType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case `private`
        case shared
        case sdkUnknown(Swift.String)

        public static var allCases: [SharingType] {
            return [
                .private,
                .shared
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .private: return "Private"
            case .shared: return "Shared"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A collection of space sharing settings.
    public struct SpaceSharingSettings {
        /// Specifies the sharing type of the space.
        /// This member is required.
        public var sharingType: SageMakerClientTypes.SharingType?

        public init(
            sharingType: SageMakerClientTypes.SharingType? = nil
        )
        {
            self.sharingType = sharingType
        }
    }

}

public struct CreateSpaceInput {
    /// The ID of the associated domain.
    /// This member is required.
    public var domainId: Swift.String?
    /// A collection of ownership settings.
    public var ownershipSettings: SageMakerClientTypes.OwnershipSettings?
    /// The name of the space that appears in the SageMaker Studio UI.
    public var spaceDisplayName: Swift.String?
    /// The name of the space.
    /// This member is required.
    public var spaceName: Swift.String?
    /// A collection of space settings.
    public var spaceSettings: SageMakerClientTypes.SpaceSettings?
    /// A collection of space sharing settings.
    public var spaceSharingSettings: SageMakerClientTypes.SpaceSharingSettings?
    /// Tags to associated with the space. Each tag consists of a key and an optional value. Tag keys must be unique for each resource. Tags are searchable using the Search API.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        domainId: Swift.String? = nil,
        ownershipSettings: SageMakerClientTypes.OwnershipSettings? = nil,
        spaceDisplayName: Swift.String? = nil,
        spaceName: Swift.String? = nil,
        spaceSettings: SageMakerClientTypes.SpaceSettings? = nil,
        spaceSharingSettings: SageMakerClientTypes.SpaceSharingSettings? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.domainId = domainId
        self.ownershipSettings = ownershipSettings
        self.spaceDisplayName = spaceDisplayName
        self.spaceName = spaceName
        self.spaceSettings = spaceSettings
        self.spaceSharingSettings = spaceSharingSettings
        self.tags = tags
    }
}

public struct CreateSpaceOutput {
    /// The space's Amazon Resource Name (ARN).
    public var spaceArn: Swift.String?

    public init(
        spaceArn: Swift.String? = nil
    )
    {
        self.spaceArn = spaceArn
    }
}

extension SageMakerClientTypes {

    public enum StudioLifecycleConfigAppType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case codeeditor
        case jupyterlab
        case jupyterserver
        case kernelgateway
        case sdkUnknown(Swift.String)

        public static var allCases: [StudioLifecycleConfigAppType] {
            return [
                .codeeditor,
                .jupyterlab,
                .jupyterserver,
                .kernelgateway
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .codeeditor: return "CodeEditor"
            case .jupyterlab: return "JupyterLab"
            case .jupyterserver: return "JupyterServer"
            case .kernelgateway: return "KernelGateway"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct CreateStudioLifecycleConfigInput {
    /// The App type that the Lifecycle Configuration is attached to.
    /// This member is required.
    public var studioLifecycleConfigAppType: SageMakerClientTypes.StudioLifecycleConfigAppType?
    /// The content of your Amazon SageMaker Studio Lifecycle Configuration script. This content must be base64 encoded.
    /// This member is required.
    public var studioLifecycleConfigContent: Swift.String?
    /// The name of the Amazon SageMaker Studio Lifecycle Configuration to create.
    /// This member is required.
    public var studioLifecycleConfigName: Swift.String?
    /// Tags to be associated with the Lifecycle Configuration. Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags are searchable using the Search API.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        studioLifecycleConfigAppType: SageMakerClientTypes.StudioLifecycleConfigAppType? = nil,
        studioLifecycleConfigContent: Swift.String? = nil,
        studioLifecycleConfigName: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.studioLifecycleConfigAppType = studioLifecycleConfigAppType
        self.studioLifecycleConfigContent = studioLifecycleConfigContent
        self.studioLifecycleConfigName = studioLifecycleConfigName
        self.tags = tags
    }
}

public struct CreateStudioLifecycleConfigOutput {
    /// The ARN of your created Lifecycle Configuration.
    public var studioLifecycleConfigArn: Swift.String?

    public init(
        studioLifecycleConfigArn: Swift.String? = nil
    )
    {
        self.studioLifecycleConfigArn = studioLifecycleConfigArn
    }
}

extension SageMakerClientTypes {
    /// Configuration information for the Amazon SageMaker Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the DebugHookConfig parameter, see [Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
    public struct DebugHookConfig {
        /// Configuration information for Amazon SageMaker Debugger tensor collections. To learn more about how to configure the CollectionConfiguration parameter, see [Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
        public var collectionConfigurations: [SageMakerClientTypes.CollectionConfiguration]?
        /// Configuration information for the Amazon SageMaker Debugger hook parameters.
        public var hookParameters: [Swift.String: Swift.String]?
        /// Path to local storage location for metrics and tensors. Defaults to /opt/ml/output/tensors/.
        public var localPath: Swift.String?
        /// Path to Amazon S3 storage location for metrics and tensors.
        /// This member is required.
        public var s3OutputPath: Swift.String?

        public init(
            collectionConfigurations: [SageMakerClientTypes.CollectionConfiguration]? = nil,
            hookParameters: [Swift.String: Swift.String]? = nil,
            localPath: Swift.String? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.collectionConfigurations = collectionConfigurations
            self.hookParameters = hookParameters
            self.localPath = localPath
            self.s3OutputPath = s3OutputPath
        }
    }

}

extension SageMakerClientTypes {
    /// Configuration information for SageMaker Debugger rules for debugging. To learn more about how to configure the DebugRuleConfiguration parameter, see [Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
    public struct DebugRuleConfiguration {
        /// The instance type to deploy a custom rule for debugging a training job.
        public var instanceType: SageMakerClientTypes.ProcessingInstanceType?
        /// Path to local storage location for output of rules. Defaults to /opt/ml/processing/output/rule/.
        public var localPath: Swift.String?
        /// The name of the rule configuration. It must be unique relative to other rule configuration names.
        /// This member is required.
        public var ruleConfigurationName: Swift.String?
        /// The Amazon Elastic Container (ECR) Image for the managed rule evaluation.
        /// This member is required.
        public var ruleEvaluatorImage: Swift.String?
        /// Runtime configuration for rule container.
        public var ruleParameters: [Swift.String: Swift.String]?
        /// Path to Amazon S3 storage location for rules.
        public var s3OutputPath: Swift.String?
        /// The size, in GB, of the ML storage volume attached to the processing instance.
        public var volumeSizeInGB: Swift.Int?

        public init(
            instanceType: SageMakerClientTypes.ProcessingInstanceType? = nil,
            localPath: Swift.String? = nil,
            ruleConfigurationName: Swift.String? = nil,
            ruleEvaluatorImage: Swift.String? = nil,
            ruleParameters: [Swift.String: Swift.String]? = nil,
            s3OutputPath: Swift.String? = nil,
            volumeSizeInGB: Swift.Int? = nil
        )
        {
            self.instanceType = instanceType
            self.localPath = localPath
            self.ruleConfigurationName = ruleConfigurationName
            self.ruleEvaluatorImage = ruleEvaluatorImage
            self.ruleParameters = ruleParameters
            self.s3OutputPath = s3OutputPath
            self.volumeSizeInGB = volumeSizeInGB
        }
    }

}

extension SageMakerClientTypes {
    /// Configuration information for the infrastructure health check of a training job. A SageMaker-provided health check tests the health of instance hardware and cluster network connectivity.
    public struct InfraCheckConfig {
        /// Enables an infrastructure health check.
        public var enableInfraCheck: Swift.Bool?

        public init(
            enableInfraCheck: Swift.Bool? = nil
        )
        {
            self.enableInfraCheck = enableInfraCheck
        }
    }

}

extension SageMakerClientTypes {
    /// Configuration information for Amazon SageMaker Debugger system monitoring, framework profiling, and storage paths.
    public struct ProfilerConfig {
        /// Configuration to turn off Amazon SageMaker Debugger's system monitoring and profiling functionality. To turn it off, set to True.
        public var disableProfiler: Swift.Bool?
        /// A time interval for capturing system metrics in milliseconds. Available values are 100, 200, 500, 1000 (1 second), 5000 (5 seconds), and 60000 (1 minute) milliseconds. The default value is 500 milliseconds.
        public var profilingIntervalInMilliseconds: Swift.Int?
        /// Configuration information for capturing framework metrics. Available key strings for different profiling options are DetailedProfilingConfig, PythonProfilingConfig, and DataLoaderProfilingConfig. The following codes are configuration structures for the ProfilingParameters parameter. To learn more about how to configure the ProfilingParameters parameter, see [Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
        public var profilingParameters: [Swift.String: Swift.String]?
        /// Path to Amazon S3 storage location for system and framework metrics.
        public var s3OutputPath: Swift.String?

        public init(
            disableProfiler: Swift.Bool? = nil,
            profilingIntervalInMilliseconds: Swift.Int? = nil,
            profilingParameters: [Swift.String: Swift.String]? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.disableProfiler = disableProfiler
            self.profilingIntervalInMilliseconds = profilingIntervalInMilliseconds
            self.profilingParameters = profilingParameters
            self.s3OutputPath = s3OutputPath
        }
    }

}

extension SageMakerClientTypes {
    /// Configuration information for profiling rules.
    public struct ProfilerRuleConfiguration {
        /// The instance type to deploy a custom rule for profiling a training job.
        public var instanceType: SageMakerClientTypes.ProcessingInstanceType?
        /// Path to local storage location for output of rules. Defaults to /opt/ml/processing/output/rule/.
        public var localPath: Swift.String?
        /// The name of the rule configuration. It must be unique relative to other rule configuration names.
        /// This member is required.
        public var ruleConfigurationName: Swift.String?
        /// The Amazon Elastic Container Registry Image for the managed rule evaluation.
        /// This member is required.
        public var ruleEvaluatorImage: Swift.String?
        /// Runtime configuration for rule container.
        public var ruleParameters: [Swift.String: Swift.String]?
        /// Path to Amazon S3 storage location for rules.
        public var s3OutputPath: Swift.String?
        /// The size, in GB, of the ML storage volume attached to the processing instance.
        public var volumeSizeInGB: Swift.Int?

        public init(
            instanceType: SageMakerClientTypes.ProcessingInstanceType? = nil,
            localPath: Swift.String? = nil,
            ruleConfigurationName: Swift.String? = nil,
            ruleEvaluatorImage: Swift.String? = nil,
            ruleParameters: [Swift.String: Swift.String]? = nil,
            s3OutputPath: Swift.String? = nil,
            volumeSizeInGB: Swift.Int? = nil
        )
        {
            self.instanceType = instanceType
            self.localPath = localPath
            self.ruleConfigurationName = ruleConfigurationName
            self.ruleEvaluatorImage = ruleEvaluatorImage
            self.ruleParameters = ruleParameters
            self.s3OutputPath = s3OutputPath
            self.volumeSizeInGB = volumeSizeInGB
        }
    }

}

extension SageMakerClientTypes {
    /// Configuration for remote debugging for the [CreateTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html) API. To learn more about the remote debugging functionality of SageMaker, see [Access a training container through Amazon Web Services Systems Manager (SSM) for remote debugging](https://docs.aws.amazon.com/sagemaker/latest/dg/train-remote-debugging.html).
    public struct RemoteDebugConfig {
        /// If set to True, enables remote debugging.
        public var enableRemoteDebug: Swift.Bool?

        public init(
            enableRemoteDebug: Swift.Bool? = nil
        )
        {
            self.enableRemoteDebug = enableRemoteDebug
        }
    }

}

extension SageMakerClientTypes {
    /// Contains information about attribute-based access control (ABAC) for a training job. The session chaining configuration uses Amazon Security Token Service (STS) for your training job to request temporary, limited-privilege credentials to tenants. For more information, see [Attribute-based access control (ABAC) for multi-tenancy training](https://docs.aws.amazon.com/sagemaker/latest/dg/model-access-training-data.html#model-access-training-data-abac).
    public struct SessionChainingConfig {
        /// Set to True to allow SageMaker to extract session tags from a training job creation role and reuse these tags when assuming the training job execution role.
        public var enableSessionTagChaining: Swift.Bool?

        public init(
            enableSessionTagChaining: Swift.Bool? = nil
        )
        {
            self.enableSessionTagChaining = enableSessionTagChaining
        }
    }

}

extension SageMakerClientTypes {
    /// Configuration of storage locations for the Amazon SageMaker Debugger TensorBoard output data.
    public struct TensorBoardOutputConfig {
        /// Path to local storage location for tensorBoard output. Defaults to /opt/ml/output/tensorboard.
        public var localPath: Swift.String?
        /// Path to Amazon S3 storage location for TensorBoard output.
        /// This member is required.
        public var s3OutputPath: Swift.String?

        public init(
            localPath: Swift.String? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.localPath = localPath
            self.s3OutputPath = s3OutputPath
        }
    }

}

public struct CreateTrainingJobInput {
    /// The registry path of the Docker image that contains the training algorithm and algorithm-specific metadata, including the input mode. For more information about algorithms provided by SageMaker, see [Algorithms](https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). For information about providing your own algorithms, see [Using Your Own Algorithms with Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html).
    /// This member is required.
    public var algorithmSpecification: SageMakerClientTypes.AlgorithmSpecification?
    /// Contains information about the output location for managed spot training checkpoint data.
    public var checkpointConfig: SageMakerClientTypes.CheckpointConfig?
    /// Configuration information for the Amazon SageMaker Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the DebugHookConfig parameter, see [Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
    public var debugHookConfig: SageMakerClientTypes.DebugHookConfig?
    /// Configuration information for Amazon SageMaker Debugger rules for debugging output tensors.
    public var debugRuleConfigurations: [SageMakerClientTypes.DebugRuleConfiguration]?
    /// To encrypt all communications between ML compute instances in distributed training, choose True. Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithm in distributed training. For more information, see [Protect Communications Between ML Compute Instances in a Distributed Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/train-encrypt.html).
    public var enableInterContainerTrafficEncryption: Swift.Bool?
    /// To train models using managed spot training, choose True. Managed spot training provides a fully managed and scalable infrastructure for training machine learning models. this option is useful when training jobs can be interrupted and when there is flexibility when the training job is run. The complete and intermediate results of jobs are stored in an Amazon S3 bucket, and can be used as a starting point to train models incrementally. Amazon SageMaker provides metrics and logs in CloudWatch. They can be used to see when managed spot training jobs are running, interrupted, resumed, or completed.
    public var enableManagedSpotTraining: Swift.Bool?
    /// Isolates the training container. No inbound or outbound network calls can be made, except for calls between peers within a training cluster for distributed training. If you enable network isolation for training jobs that are configured to use a VPC, SageMaker downloads and uploads customer data and model artifacts through the specified VPC, but the training container does not have network access.
    public var enableNetworkIsolation: Swift.Bool?
    /// The environment variables to set in the Docker container.
    public var environment: [Swift.String: Swift.String]?
    /// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
    ///
    /// * [CreateProcessingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html)
    ///
    /// * [CreateTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
    ///
    /// * [CreateTransformJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html)
    public var experimentConfig: SageMakerClientTypes.ExperimentConfig?
    /// Algorithm-specific parameters that influence the quality of the model. You set hyperparameters before you start the learning process. For a list of hyperparameters for each training algorithm provided by SageMaker, see [Algorithms](https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). You can specify a maximum of 100 hyperparameters. Each hyperparameter is a key-value pair. Each key and value is limited to 256 characters, as specified by the Length Constraint. Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.
    public var hyperParameters: [Swift.String: Swift.String]?
    /// Contains information about the infrastructure health check configuration for the training job.
    public var infraCheckConfig: SageMakerClientTypes.InfraCheckConfig?
    /// An array of Channel objects. Each channel is a named input source. InputDataConfig describes the input data and its location. Algorithms can accept input data from one or more channels. For example, an algorithm might have two channels of input data, training_data and validation_data. The configuration for each channel provides the S3, EFS, or FSx location where the input data is stored. It also provides information about the stored data: the MIME type, compression method, and whether the data is wrapped in RecordIO format. Depending on the input mode that the algorithm supports, SageMaker either copies input data files from an S3 bucket to a local directory in the Docker container, or makes it available as input streams. For example, if you specify an EFS location, input data files are available as input streams. They do not need to be downloaded. Your input must be in the same Amazon Web Services region as your training job.
    public var inputDataConfig: [SageMakerClientTypes.Channel]?
    /// Specifies the path to the S3 location where you want to store model artifacts. SageMaker creates subfolders for the artifacts.
    /// This member is required.
    public var outputDataConfig: SageMakerClientTypes.OutputDataConfig?
    /// Configuration information for Amazon SageMaker Debugger system monitoring, framework profiling, and storage paths.
    public var profilerConfig: SageMakerClientTypes.ProfilerConfig?
    /// Configuration information for Amazon SageMaker Debugger rules for profiling system and framework metrics.
    public var profilerRuleConfigurations: [SageMakerClientTypes.ProfilerRuleConfiguration]?
    /// Configuration for remote debugging. To learn more about the remote debugging functionality of SageMaker, see [Access a training container through Amazon Web Services Systems Manager (SSM) for remote debugging](https://docs.aws.amazon.com/sagemaker/latest/dg/train-remote-debugging.html).
    public var remoteDebugConfig: SageMakerClientTypes.RemoteDebugConfig?
    /// The resources, including the ML compute instances and ML storage volumes, to use for model training. ML storage volumes store model artifacts and incremental states. Training algorithms might also use ML storage volumes for scratch space. If you want SageMaker to use the ML storage volume to store the training data, choose File as the TrainingInputMode in the algorithm specification. For distributed training algorithms, specify an instance count greater than 1.
    /// This member is required.
    public var resourceConfig: SageMakerClientTypes.ResourceConfig?
    /// The number of times to retry the job when the job fails due to an InternalServerError.
    public var retryStrategy: SageMakerClientTypes.RetryStrategy?
    /// The Amazon Resource Name (ARN) of an IAM role that SageMaker can assume to perform tasks on your behalf. During model training, SageMaker needs your permission to read input data from an S3 bucket, download a Docker image that contains training code, write model artifacts to an S3 bucket, write logs to Amazon CloudWatch Logs, and publish metrics to Amazon CloudWatch. You grant permissions for all of these tasks to an IAM role. For more information, see [SageMaker Roles](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html). To be able to pass this role to SageMaker, the caller of this API must have the iam:PassRole permission.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Contains information about attribute-based access control (ABAC) for the training job.
    public var sessionChainingConfig: SageMakerClientTypes.SessionChainingConfig?
    /// Specifies a limit to how long a model training job can run. It also specifies how long a managed Spot training job has to complete. When the job reaches the time limit, SageMaker ends the training job. Use this API to cap model training costs. To stop a job, SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
    /// This member is required.
    public var stoppingCondition: SageMakerClientTypes.StoppingCondition?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?
    /// Configuration of storage locations for the Amazon SageMaker Debugger TensorBoard output data.
    public var tensorBoardOutputConfig: SageMakerClientTypes.TensorBoardOutputConfig?
    /// The name of the training job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account.
    /// This member is required.
    public var trainingJobName: Swift.String?
    /// A [VpcConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html) object that specifies the VPC that you want your training job to connect to. Control access to and from your training container by configuring the VPC. For more information, see [Protect Training Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).
    public var vpcConfig: SageMakerClientTypes.VpcConfig?

    public init(
        algorithmSpecification: SageMakerClientTypes.AlgorithmSpecification? = nil,
        checkpointConfig: SageMakerClientTypes.CheckpointConfig? = nil,
        debugHookConfig: SageMakerClientTypes.DebugHookConfig? = nil,
        debugRuleConfigurations: [SageMakerClientTypes.DebugRuleConfiguration]? = nil,
        enableInterContainerTrafficEncryption: Swift.Bool? = nil,
        enableManagedSpotTraining: Swift.Bool? = nil,
        enableNetworkIsolation: Swift.Bool? = nil,
        environment: [Swift.String: Swift.String]? = nil,
        experimentConfig: SageMakerClientTypes.ExperimentConfig? = nil,
        hyperParameters: [Swift.String: Swift.String]? = nil,
        infraCheckConfig: SageMakerClientTypes.InfraCheckConfig? = nil,
        inputDataConfig: [SageMakerClientTypes.Channel]? = nil,
        outputDataConfig: SageMakerClientTypes.OutputDataConfig? = nil,
        profilerConfig: SageMakerClientTypes.ProfilerConfig? = nil,
        profilerRuleConfigurations: [SageMakerClientTypes.ProfilerRuleConfiguration]? = nil,
        remoteDebugConfig: SageMakerClientTypes.RemoteDebugConfig? = nil,
        resourceConfig: SageMakerClientTypes.ResourceConfig? = nil,
        retryStrategy: SageMakerClientTypes.RetryStrategy? = nil,
        roleArn: Swift.String? = nil,
        sessionChainingConfig: SageMakerClientTypes.SessionChainingConfig? = nil,
        stoppingCondition: SageMakerClientTypes.StoppingCondition? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        tensorBoardOutputConfig: SageMakerClientTypes.TensorBoardOutputConfig? = nil,
        trainingJobName: Swift.String? = nil,
        vpcConfig: SageMakerClientTypes.VpcConfig? = nil
    )
    {
        self.algorithmSpecification = algorithmSpecification
        self.checkpointConfig = checkpointConfig
        self.debugHookConfig = debugHookConfig
        self.debugRuleConfigurations = debugRuleConfigurations
        self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
        self.enableManagedSpotTraining = enableManagedSpotTraining
        self.enableNetworkIsolation = enableNetworkIsolation
        self.environment = environment
        self.experimentConfig = experimentConfig
        self.hyperParameters = hyperParameters
        self.infraCheckConfig = infraCheckConfig
        self.inputDataConfig = inputDataConfig
        self.outputDataConfig = outputDataConfig
        self.profilerConfig = profilerConfig
        self.profilerRuleConfigurations = profilerRuleConfigurations
        self.remoteDebugConfig = remoteDebugConfig
        self.resourceConfig = resourceConfig
        self.retryStrategy = retryStrategy
        self.roleArn = roleArn
        self.sessionChainingConfig = sessionChainingConfig
        self.stoppingCondition = stoppingCondition
        self.tags = tags
        self.tensorBoardOutputConfig = tensorBoardOutputConfig
        self.trainingJobName = trainingJobName
        self.vpcConfig = vpcConfig
    }
}

public struct CreateTrainingJobOutput {
    /// The Amazon Resource Name (ARN) of the training job.
    /// This member is required.
    public var trainingJobArn: Swift.String?

    public init(
        trainingJobArn: Swift.String? = nil
    )
    {
        self.trainingJobArn = trainingJobArn
    }
}

extension SageMakerClientTypes {

    public enum JoinSource: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case input
        case `none`
        case sdkUnknown(Swift.String)

        public static var allCases: [JoinSource] {
            return [
                .input,
                .none
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .input: return "Input"
            case .none: return "None"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see [Associate Prediction Results with their Corresponding Input Records](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html).
    public struct DataProcessing {
        /// A [JSONPath](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#data-processing-operators) expression used to select a portion of the input data to pass to the algorithm. Use the InputFilter parameter to exclude fields, such as an ID column, from the input. If you want SageMaker to pass the entire input dataset to the algorithm, accept the default value $. Examples: "$", "$[1:]", "$.features"
        public var inputFilter: Swift.String?
        /// Specifies the source of the data to join with the transformed data. The valid values are None and Input. The default value is None, which specifies not to join the input with the transformed data. If you want the batch transform job to join the original input data with the transformed data, set JoinSource to Input. You can specify OutputFilter as an additional filter to select a portion of the joined dataset and store it in the output file. For JSON or JSONLines objects, such as a JSON array, SageMaker adds the transformed data to the input JSON object in an attribute called SageMakerOutput. The joined result for JSON must be a key-value pair object. If the input is not a key-value pair object, SageMaker creates a new JSON file. In the new JSON file, and the input data is stored under the SageMakerInput key and the results are stored in SageMakerOutput. For CSV data, SageMaker takes each row as a JSON array and joins the transformed data with the input by appending each transformed row to the end of the input. The joined data has the original input data followed by the transformed data and the output is a CSV file. For information on how joining in applied, see [Workflow for Associating Inferences with Input Records](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#batch-transform-data-processing-workflow).
        public var joinSource: SageMakerClientTypes.JoinSource?
        /// A [JSONPath](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html#data-processing-operators) expression used to select a portion of the joined dataset to save in the output file for a batch transform job. If you want SageMaker to store the entire input dataset in the output file, leave the default value, $. If you specify indexes that aren't within the dimension size of the joined dataset, you get an error. Examples: "$", "$[0,5:]", "$['id','SageMakerOutput']"
        public var outputFilter: Swift.String?

        public init(
            inputFilter: Swift.String? = nil,
            joinSource: SageMakerClientTypes.JoinSource? = nil,
            outputFilter: Swift.String? = nil
        )
        {
            self.inputFilter = inputFilter
            self.joinSource = joinSource
            self.outputFilter = outputFilter
        }
    }

}

extension SageMakerClientTypes {
    /// Configures the timeout and maximum number of retries for processing a transform job invocation.
    public struct ModelClientConfig {
        /// The maximum number of retries when invocation requests are failing. The default value is 3.
        public var invocationsMaxRetries: Swift.Int?
        /// The timeout value in seconds for an invocation request. The default value is 600.
        public var invocationsTimeoutInSeconds: Swift.Int?

        public init(
            invocationsMaxRetries: Swift.Int? = nil,
            invocationsTimeoutInSeconds: Swift.Int? = nil
        )
        {
            self.invocationsMaxRetries = invocationsMaxRetries
            self.invocationsTimeoutInSeconds = invocationsTimeoutInSeconds
        }
    }

}

public struct CreateTransformJobInput {
    /// Specifies the number of records to include in a mini-batch for an HTTP inference request. A record is a single unit of input data that inference can be made on. For example, a single line in a CSV file is a record. To enable the batch strategy, you must set the SplitType property to Line, RecordIO, or TFRecord. To use only one record when making an HTTP invocation request to a container, set BatchStrategy to SingleRecord and SplitType to Line. To fit as many records in a mini-batch as can fit within the MaxPayloadInMB limit, set BatchStrategy to MultiRecord and SplitType to Line.
    public var batchStrategy: SageMakerClientTypes.BatchStrategy?
    /// Configuration to control how SageMaker captures inference data.
    public var dataCaptureConfig: SageMakerClientTypes.BatchDataCaptureConfig?
    /// The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see [Associate Prediction Results with their Corresponding Input Records](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html).
    public var dataProcessing: SageMakerClientTypes.DataProcessing?
    /// The environment variables to set in the Docker container. Don't include any sensitive data in your environment variables. We support up to 16 key and values entries in the map.
    public var environment: [Swift.String: Swift.String]?
    /// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
    ///
    /// * [CreateProcessingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html)
    ///
    /// * [CreateTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
    ///
    /// * [CreateTransformJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html)
    public var experimentConfig: SageMakerClientTypes.ExperimentConfig?
    /// The maximum number of parallel requests that can be sent to each instance in a transform job. If MaxConcurrentTransforms is set to 0 or left unset, Amazon SageMaker checks the optional execution-parameters to determine the settings for your chosen algorithm. If the execution-parameters endpoint is not enabled, the default value is 1. For more information on execution-parameters, see [How Containers Serve Requests](https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-batch-code.html#your-algorithms-batch-code-how-containe-serves-requests). For built-in algorithms, you don't need to set a value for MaxConcurrentTransforms.
    public var maxConcurrentTransforms: Swift.Int?
    /// The maximum allowed size of the payload, in MB. A payload is the data portion of a record (without metadata). The value in MaxPayloadInMB must be greater than, or equal to, the size of a single record. To estimate the size of a record in MB, divide the size of your dataset by the number of records. To ensure that the records fit within the maximum payload size, we recommend using a slightly larger value. The default value is 6 MB. The value of MaxPayloadInMB cannot be greater than 100 MB. If you specify the MaxConcurrentTransforms parameter, the value of (MaxConcurrentTransforms * MaxPayloadInMB) also cannot exceed 100 MB. For cases where the payload might be arbitrarily large and is transmitted using HTTP chunked encoding, set the value to 0. This feature works only in supported algorithms. Currently, Amazon SageMaker built-in algorithms do not support HTTP chunked encoding.
    public var maxPayloadInMB: Swift.Int?
    /// Configures the timeout and maximum number of retries for processing a transform job invocation.
    public var modelClientConfig: SageMakerClientTypes.ModelClientConfig?
    /// The name of the model that you want to use for the transform job. ModelName must be the name of an existing Amazon SageMaker model within an Amazon Web Services Region in an Amazon Web Services account.
    /// This member is required.
    public var modelName: Swift.String?
    /// (Optional) An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what) in the Amazon Web Services Billing and Cost Management User Guide.
    public var tags: [SageMakerClientTypes.Tag]?
    /// Describes the input source and the way the transform job consumes it.
    /// This member is required.
    public var transformInput: SageMakerClientTypes.TransformInput?
    /// The name of the transform job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account.
    /// This member is required.
    public var transformJobName: Swift.String?
    /// Describes the results of the transform job.
    /// This member is required.
    public var transformOutput: SageMakerClientTypes.TransformOutput?
    /// Describes the resources, including ML instance types and ML instance count, to use for the transform job.
    /// This member is required.
    public var transformResources: SageMakerClientTypes.TransformResources?

    public init(
        batchStrategy: SageMakerClientTypes.BatchStrategy? = nil,
        dataCaptureConfig: SageMakerClientTypes.BatchDataCaptureConfig? = nil,
        dataProcessing: SageMakerClientTypes.DataProcessing? = nil,
        environment: [Swift.String: Swift.String]? = nil,
        experimentConfig: SageMakerClientTypes.ExperimentConfig? = nil,
        maxConcurrentTransforms: Swift.Int? = nil,
        maxPayloadInMB: Swift.Int? = nil,
        modelClientConfig: SageMakerClientTypes.ModelClientConfig? = nil,
        modelName: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        transformInput: SageMakerClientTypes.TransformInput? = nil,
        transformJobName: Swift.String? = nil,
        transformOutput: SageMakerClientTypes.TransformOutput? = nil,
        transformResources: SageMakerClientTypes.TransformResources? = nil
    )
    {
        self.batchStrategy = batchStrategy
        self.dataCaptureConfig = dataCaptureConfig
        self.dataProcessing = dataProcessing
        self.environment = environment
        self.experimentConfig = experimentConfig
        self.maxConcurrentTransforms = maxConcurrentTransforms
        self.maxPayloadInMB = maxPayloadInMB
        self.modelClientConfig = modelClientConfig
        self.modelName = modelName
        self.tags = tags
        self.transformInput = transformInput
        self.transformJobName = transformJobName
        self.transformOutput = transformOutput
        self.transformResources = transformResources
    }
}

public struct CreateTransformJobOutput {
    /// The Amazon Resource Name (ARN) of the transform job.
    /// This member is required.
    public var transformJobArn: Swift.String?

    public init(
        transformJobArn: Swift.String? = nil
    )
    {
        self.transformJobArn = transformJobArn
    }
}

public struct CreateTrialInput {
    /// The name of the trial as displayed. The name doesn't need to be unique. If DisplayName isn't specified, TrialName is displayed.
    public var displayName: Swift.String?
    /// The name of the experiment to associate the trial with.
    /// This member is required.
    public var experimentName: Swift.String?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// A list of tags to associate with the trial. You can use [Search](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html) API to search on the tags.
    public var tags: [SageMakerClientTypes.Tag]?
    /// The name of the trial. The name must be unique in your Amazon Web Services account and is not case-sensitive.
    /// This member is required.
    public var trialName: Swift.String?

    public init(
        displayName: Swift.String? = nil,
        experimentName: Swift.String? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        trialName: Swift.String? = nil
    )
    {
        self.displayName = displayName
        self.experimentName = experimentName
        self.metadataProperties = metadataProperties
        self.tags = tags
        self.trialName = trialName
    }
}

public struct CreateTrialOutput {
    /// The Amazon Resource Name (ARN) of the trial.
    public var trialArn: Swift.String?

    public init(
        trialArn: Swift.String? = nil
    )
    {
        self.trialArn = trialArn
    }
}

extension SageMakerClientTypes {
    /// Represents an input or output artifact of a trial component. You specify TrialComponentArtifact as part of the InputArtifacts and OutputArtifacts parameters in the [CreateTrialComponent](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrialComponent.html) request. Examples of input artifacts are datasets, algorithms, hyperparameters, source code, and instance types. Examples of output artifacts are metrics, snapshots, logs, and images.
    public struct TrialComponentArtifact {
        /// The media type of the artifact, which indicates the type of data in the artifact file. The media type consists of a type and a subtype concatenated with a slash (/) character, for example, text/csv, image/jpeg, and s3/uri. The type specifies the category of the media. The subtype specifies the kind of data.
        public var mediaType: Swift.String?
        /// The location of the artifact.
        /// This member is required.
        public var value: Swift.String?

        public init(
            mediaType: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.mediaType = mediaType
            self.value = value
        }
    }

}

extension SageMakerClientTypes {
    /// The value of a hyperparameter. Only one of NumberValue or StringValue can be specified. This object is specified in the [CreateTrialComponent](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrialComponent.html) request.
    public enum TrialComponentParameterValue {
        /// The string value of a categorical hyperparameter. If you specify a value for this parameter, you can't specify the NumberValue parameter.
        case stringvalue(Swift.String)
        /// The numeric value of a numeric hyperparameter. If you specify a value for this parameter, you can't specify the StringValue parameter.
        case numbervalue(Swift.Double)
        case sdkUnknown(Swift.String)
    }

}

extension SageMakerClientTypes {

    public enum TrialComponentPrimaryStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [TrialComponentPrimaryStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The status of the trial component.
    public struct TrialComponentStatus {
        /// If the component failed, a message describing why.
        public var message: Swift.String?
        /// The status of the trial component.
        public var primaryStatus: SageMakerClientTypes.TrialComponentPrimaryStatus?

        public init(
            message: Swift.String? = nil,
            primaryStatus: SageMakerClientTypes.TrialComponentPrimaryStatus? = nil
        )
        {
            self.message = message
            self.primaryStatus = primaryStatus
        }
    }

}

public struct CreateTrialComponentInput {
    /// The name of the component as displayed. The name doesn't need to be unique. If DisplayName isn't specified, TrialComponentName is displayed.
    public var displayName: Swift.String?
    /// When the component ended.
    public var endTime: Foundation.Date?
    /// The input artifacts for the component. Examples of input artifacts are datasets, algorithms, hyperparameters, source code, and instance types.
    public var inputArtifacts: [Swift.String: SageMakerClientTypes.TrialComponentArtifact]?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// The output artifacts for the component. Examples of output artifacts are metrics, snapshots, logs, and images.
    public var outputArtifacts: [Swift.String: SageMakerClientTypes.TrialComponentArtifact]?
    /// The hyperparameters for the component.
    public var parameters: [Swift.String: SageMakerClientTypes.TrialComponentParameterValue]?
    /// When the component started.
    public var startTime: Foundation.Date?
    /// The status of the component. States include:
    ///
    /// * InProgress
    ///
    /// * Completed
    ///
    /// * Failed
    public var status: SageMakerClientTypes.TrialComponentStatus?
    /// A list of tags to associate with the component. You can use [Search](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html) API to search on the tags.
    public var tags: [SageMakerClientTypes.Tag]?
    /// The name of the component. The name must be unique in your Amazon Web Services account and is not case-sensitive.
    /// This member is required.
    public var trialComponentName: Swift.String?

    public init(
        displayName: Swift.String? = nil,
        endTime: Foundation.Date? = nil,
        inputArtifacts: [Swift.String: SageMakerClientTypes.TrialComponentArtifact]? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        outputArtifacts: [Swift.String: SageMakerClientTypes.TrialComponentArtifact]? = nil,
        parameters: [Swift.String: SageMakerClientTypes.TrialComponentParameterValue]? = nil,
        startTime: Foundation.Date? = nil,
        status: SageMakerClientTypes.TrialComponentStatus? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        trialComponentName: Swift.String? = nil
    )
    {
        self.displayName = displayName
        self.endTime = endTime
        self.inputArtifacts = inputArtifacts
        self.metadataProperties = metadataProperties
        self.outputArtifacts = outputArtifacts
        self.parameters = parameters
        self.startTime = startTime
        self.status = status
        self.tags = tags
        self.trialComponentName = trialComponentName
    }
}

public struct CreateTrialComponentOutput {
    /// The Amazon Resource Name (ARN) of the trial component.
    public var trialComponentArn: Swift.String?

    public init(
        trialComponentArn: Swift.String? = nil
    )
    {
        self.trialComponentArn = trialComponentArn
    }
}

public struct CreateUserProfileInput {
    /// The ID of the associated Domain.
    /// This member is required.
    public var domainId: Swift.String?
    /// A specifier for the type of value specified in SingleSignOnUserValue. Currently, the only supported value is "UserName". If the Domain's AuthMode is IAM Identity Center, this field is required. If the Domain's AuthMode is not IAM Identity Center, this field cannot be specified.
    public var singleSignOnUserIdentifier: Swift.String?
    /// The username of the associated Amazon Web Services Single Sign-On User for this UserProfile. If the Domain's AuthMode is IAM Identity Center, this field is required, and must match a valid username of a user in your directory. If the Domain's AuthMode is not IAM Identity Center, this field cannot be specified.
    public var singleSignOnUserValue: Swift.String?
    /// Each tag consists of a key and an optional value. Tag keys must be unique per resource. Tags that you specify for the User Profile are also added to all Apps that the User Profile launches.
    public var tags: [SageMakerClientTypes.Tag]?
    /// A name for the UserProfile. This value is not case sensitive.
    /// This member is required.
    public var userProfileName: Swift.String?
    /// A collection of settings.
    public var userSettings: SageMakerClientTypes.UserSettings?

    public init(
        domainId: Swift.String? = nil,
        singleSignOnUserIdentifier: Swift.String? = nil,
        singleSignOnUserValue: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        userProfileName: Swift.String? = nil,
        userSettings: SageMakerClientTypes.UserSettings? = nil
    )
    {
        self.domainId = domainId
        self.singleSignOnUserIdentifier = singleSignOnUserIdentifier
        self.singleSignOnUserValue = singleSignOnUserValue
        self.tags = tags
        self.userProfileName = userProfileName
        self.userSettings = userSettings
    }
}

public struct CreateUserProfileOutput {
    /// The user profile Amazon Resource Name (ARN).
    public var userProfileArn: Swift.String?

    public init(
        userProfileArn: Swift.String? = nil
    )
    {
        self.userProfileArn = userProfileArn
    }
}

extension SageMakerClientTypes {
    /// Use this parameter to configure your OIDC Identity Provider (IdP).
    public struct OidcConfig {
        /// A string to string map of identifiers specific to the custom identity provider (IdP) being used.
        public var authenticationRequestExtraParams: [Swift.String: Swift.String]?
        /// The OIDC IdP authorization endpoint used to configure your private workforce.
        /// This member is required.
        public var authorizationEndpoint: Swift.String?
        /// The OIDC IdP client ID used to configure your private workforce.
        /// This member is required.
        public var clientId: Swift.String?
        /// The OIDC IdP client secret used to configure your private workforce.
        /// This member is required.
        public var clientSecret: Swift.String?
        /// The OIDC IdP issuer used to configure your private workforce.
        /// This member is required.
        public var issuer: Swift.String?
        /// The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private workforce.
        /// This member is required.
        public var jwksUri: Swift.String?
        /// The OIDC IdP logout endpoint used to configure your private workforce.
        /// This member is required.
        public var logoutEndpoint: Swift.String?
        /// An array of string identifiers used to refer to the specific pieces of user data or claims that the client application wants to access.
        public var scope: Swift.String?
        /// The OIDC IdP token endpoint used to configure your private workforce.
        /// This member is required.
        public var tokenEndpoint: Swift.String?
        /// The OIDC IdP user information endpoint used to configure your private workforce.
        /// This member is required.
        public var userInfoEndpoint: Swift.String?

        public init(
            authenticationRequestExtraParams: [Swift.String: Swift.String]? = nil,
            authorizationEndpoint: Swift.String? = nil,
            clientId: Swift.String? = nil,
            clientSecret: Swift.String? = nil,
            issuer: Swift.String? = nil,
            jwksUri: Swift.String? = nil,
            logoutEndpoint: Swift.String? = nil,
            scope: Swift.String? = nil,
            tokenEndpoint: Swift.String? = nil,
            userInfoEndpoint: Swift.String? = nil
        )
        {
            self.authenticationRequestExtraParams = authenticationRequestExtraParams
            self.authorizationEndpoint = authorizationEndpoint
            self.clientId = clientId
            self.clientSecret = clientSecret
            self.issuer = issuer
            self.jwksUri = jwksUri
            self.logoutEndpoint = logoutEndpoint
            self.scope = scope
            self.tokenEndpoint = tokenEndpoint
            self.userInfoEndpoint = userInfoEndpoint
        }
    }

}

extension SageMakerClientTypes.OidcConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OidcConfig(authenticationRequestExtraParams: \(Swift.String(describing: authenticationRequestExtraParams)), authorizationEndpoint: \(Swift.String(describing: authorizationEndpoint)), clientId: \(Swift.String(describing: clientId)), issuer: \(Swift.String(describing: issuer)), jwksUri: \(Swift.String(describing: jwksUri)), logoutEndpoint: \(Swift.String(describing: logoutEndpoint)), scope: \(Swift.String(describing: scope)), tokenEndpoint: \(Swift.String(describing: tokenEndpoint)), userInfoEndpoint: \(Swift.String(describing: userInfoEndpoint)), clientSecret: \"CONTENT_REDACTED\")"}
}

extension SageMakerClientTypes {
    /// A list of IP address ranges ([CIDRs](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html)). Used to create an allow list of IP addresses for a private workforce. Workers will only be able to log in to their worker portal from an IP address within this range. By default, a workforce isn't restricted to specific IP addresses.
    public struct SourceIpConfig {
        /// A list of one to ten [Classless Inter-Domain Routing](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html) (CIDR) values. Maximum: Ten CIDR values The following Length Constraints apply to individual CIDR values in the CIDR value list.
        /// This member is required.
        public var cidrs: [Swift.String]?

        public init(
            cidrs: [Swift.String]? = nil
        )
        {
            self.cidrs = cidrs
        }
    }

}

extension SageMakerClientTypes {
    /// The VPC object you use to create or update a workforce.
    public struct WorkforceVpcConfigRequest {
        /// The VPC security group IDs, in the form sg-xxxxxxxx. The security groups must be for the same VPC as specified in the subnet.
        public var securityGroupIds: [Swift.String]?
        /// The ID of the subnets in the VPC that you want to connect.
        public var subnets: [Swift.String]?
        /// The ID of the VPC that the workforce uses for communication.
        public var vpcId: Swift.String?

        public init(
            securityGroupIds: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
            self.vpcId = vpcId
        }
    }

}

public struct CreateWorkforceInput {
    /// Use this parameter to configure an Amazon Cognito private workforce. A single Cognito workforce is created using and corresponds to a single [ Amazon Cognito user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html). Do not use OidcConfig if you specify values for CognitoConfig.
    public var cognitoConfig: SageMakerClientTypes.CognitoConfig?
    /// Use this parameter to configure a private workforce using your own OIDC Identity Provider. Do not use CognitoConfig if you specify values for OidcConfig.
    public var oidcConfig: SageMakerClientTypes.OidcConfig?
    /// A list of IP address ranges ([CIDRs](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html)). Used to create an allow list of IP addresses for a private workforce. Workers will only be able to log in to their worker portal from an IP address within this range. By default, a workforce isn't restricted to specific IP addresses.
    public var sourceIpConfig: SageMakerClientTypes.SourceIpConfig?
    /// An array of key-value pairs that contain metadata to help you categorize and organize our workforce. Each tag consists of a key and a value, both of which you define.
    public var tags: [SageMakerClientTypes.Tag]?
    /// The name of the private workforce.
    /// This member is required.
    public var workforceName: Swift.String?
    /// Use this parameter to configure a workforce using VPC.
    public var workforceVpcConfig: SageMakerClientTypes.WorkforceVpcConfigRequest?

    public init(
        cognitoConfig: SageMakerClientTypes.CognitoConfig? = nil,
        oidcConfig: SageMakerClientTypes.OidcConfig? = nil,
        sourceIpConfig: SageMakerClientTypes.SourceIpConfig? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        workforceName: Swift.String? = nil,
        workforceVpcConfig: SageMakerClientTypes.WorkforceVpcConfigRequest? = nil
    )
    {
        self.cognitoConfig = cognitoConfig
        self.oidcConfig = oidcConfig
        self.sourceIpConfig = sourceIpConfig
        self.tags = tags
        self.workforceName = workforceName
        self.workforceVpcConfig = workforceVpcConfig
    }
}

public struct CreateWorkforceOutput {
    /// The Amazon Resource Name (ARN) of the workforce.
    /// This member is required.
    public var workforceArn: Swift.String?

    public init(
        workforceArn: Swift.String? = nil
    )
    {
        self.workforceArn = workforceArn
    }
}

extension SageMakerClientTypes {
    /// A list of user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. When you add a user group to the list of Groups, you can add that user group to one or more private work teams. If you add a user group to a private work team, all workers in that user group are added to the work team.
    public struct OidcMemberDefinition {
        /// A list of comma seperated strings that identifies user groups in your OIDC IdP. Each user group is made up of a group of private workers.
        public var groups: [Swift.String]?

        public init(
            groups: [Swift.String]? = nil
        )
        {
            self.groups = groups
        }
    }

}

extension SageMakerClientTypes {
    /// Defines an Amazon Cognito or your own OIDC IdP user group that is part of a work team.
    public struct MemberDefinition {
        /// The Amazon Cognito user group that is part of the work team.
        public var cognitoMemberDefinition: SageMakerClientTypes.CognitoMemberDefinition?
        /// A list user groups that exist in your OIDC Identity Provider (IdP). One to ten groups can be used to create a single private work team. When you add a user group to the list of Groups, you can add that user group to one or more private work teams. If you add a user group to a private work team, all workers in that user group are added to the work team.
        public var oidcMemberDefinition: SageMakerClientTypes.OidcMemberDefinition?

        public init(
            cognitoMemberDefinition: SageMakerClientTypes.CognitoMemberDefinition? = nil,
            oidcMemberDefinition: SageMakerClientTypes.OidcMemberDefinition? = nil
        )
        {
            self.cognitoMemberDefinition = cognitoMemberDefinition
            self.oidcMemberDefinition = oidcMemberDefinition
        }
    }

}

extension SageMakerClientTypes {
    /// Configures Amazon SNS notifications of available or expiring work items for work teams.
    public struct NotificationConfiguration {
        /// The ARN for the Amazon SNS topic to which notifications should be published.
        public var notificationTopicArn: Swift.String?

        public init(
            notificationTopicArn: Swift.String? = nil
        )
        {
            self.notificationTopicArn = notificationTopicArn
        }
    }

}

extension SageMakerClientTypes {

    public enum EnabledOrDisabled: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [EnabledOrDisabled] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Use this parameter to specify a supported global condition key that is added to the IAM policy.
    public struct IamPolicyConstraints {
        /// When SourceIp is Enabled the worker's IP address when a task is rendered in the worker portal is added to the IAM policy as a Condition used to generate the Amazon S3 presigned URL. This IP address is checked by Amazon S3 and must match in order for the Amazon S3 resource to be rendered in the worker portal.
        public var sourceIp: SageMakerClientTypes.EnabledOrDisabled?
        /// When VpcSourceIp is Enabled the worker's IP address when a task is rendered in private worker portal inside the VPC is added to the IAM policy as a Condition used to generate the Amazon S3 presigned URL. To render the task successfully Amazon S3 checks that the presigned URL is being accessed over an Amazon S3 VPC Endpoint, and that the worker's IP address matches the IP address in the IAM policy. To learn more about configuring private worker portal, see [Use Amazon VPC mode from a private worker portal](https://docs.aws.amazon.com/sagemaker/latest/dg/samurai-vpc-worker-portal.html).
        public var vpcSourceIp: SageMakerClientTypes.EnabledOrDisabled?

        public init(
            sourceIp: SageMakerClientTypes.EnabledOrDisabled? = nil,
            vpcSourceIp: SageMakerClientTypes.EnabledOrDisabled? = nil
        )
        {
            self.sourceIp = sourceIp
            self.vpcSourceIp = vpcSourceIp
        }
    }

}

extension SageMakerClientTypes {
    /// This object defines the access restrictions to Amazon S3 resources that are included in custom worker task templates using the Liquid filter, grant_read_access. To learn more about how custom templates are created, see [Create custom worker task templates](https://docs.aws.amazon.com/sagemaker/latest/dg/a2i-custom-templates.html).
    public struct S3Presign {
        /// Use this parameter to specify the allowed request source. Possible sources are either SourceIp or VpcSourceIp.
        public var iamPolicyConstraints: SageMakerClientTypes.IamPolicyConstraints?

        public init(
            iamPolicyConstraints: SageMakerClientTypes.IamPolicyConstraints? = nil
        )
        {
            self.iamPolicyConstraints = iamPolicyConstraints
        }
    }

}

extension SageMakerClientTypes {
    /// Use this optional parameter to constrain access to an Amazon S3 resource based on the IP address using supported IAM global condition keys. The Amazon S3 resource is accessed in the worker portal using a Amazon S3 presigned URL.
    public struct WorkerAccessConfiguration {
        /// Defines any Amazon S3 resource constraints.
        public var s3Presign: SageMakerClientTypes.S3Presign?

        public init(
            s3Presign: SageMakerClientTypes.S3Presign? = nil
        )
        {
            self.s3Presign = s3Presign
        }
    }

}

public struct CreateWorkteamInput {
    /// A description of the work team.
    /// This member is required.
    public var description: Swift.String?
    /// A list of MemberDefinition objects that contains objects that identify the workers that make up the work team. Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use CognitoMemberDefinition. For workforces created using your own OIDC identity provider (IdP) use OidcMemberDefinition. Do not provide input for both of these parameters in a single request. For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito user groups within the user pool used to create a workforce. All of the CognitoMemberDefinition objects that make up the member definition must have the same ClientId and UserPool values. To add a Amazon Cognito user group to an existing worker pool, see [Adding groups to a User Pool]. For more information about user pools, see [Amazon Cognito User Pools](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html). For workforces created using your own OIDC IdP, specify the user groups that you want to include in your private work team in OidcMemberDefinition by listing those groups in Groups.
    /// This member is required.
    public var memberDefinitions: [SageMakerClientTypes.MemberDefinition]?
    /// Configures notification of workers regarding available or expiring work items.
    public var notificationConfiguration: SageMakerClientTypes.NotificationConfiguration?
    /// An array of key-value pairs. For more information, see [Resource Tag](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html) and [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what) in the Amazon Web Services Billing and Cost Management User Guide.
    public var tags: [SageMakerClientTypes.Tag]?
    /// Use this optional parameter to constrain access to an Amazon S3 resource based on the IP address using supported IAM global condition keys. The Amazon S3 resource is accessed in the worker portal using a Amazon S3 presigned URL.
    public var workerAccessConfiguration: SageMakerClientTypes.WorkerAccessConfiguration?
    /// The name of the workforce.
    public var workforceName: Swift.String?
    /// The name of the work team. Use this name to identify the work team.
    /// This member is required.
    public var workteamName: Swift.String?

    public init(
        description: Swift.String? = nil,
        memberDefinitions: [SageMakerClientTypes.MemberDefinition]? = nil,
        notificationConfiguration: SageMakerClientTypes.NotificationConfiguration? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil,
        workerAccessConfiguration: SageMakerClientTypes.WorkerAccessConfiguration? = nil,
        workforceName: Swift.String? = nil,
        workteamName: Swift.String? = nil
    )
    {
        self.description = description
        self.memberDefinitions = memberDefinitions
        self.notificationConfiguration = notificationConfiguration
        self.tags = tags
        self.workerAccessConfiguration = workerAccessConfiguration
        self.workforceName = workforceName
        self.workteamName = workteamName
    }
}

public struct CreateWorkteamOutput {
    /// The Amazon Resource Name (ARN) of the work team. You can use this ARN to identify the work team.
    public var workteamArn: Swift.String?

    public init(
        workteamArn: Swift.String? = nil
    )
    {
        self.workteamArn = workteamArn
    }
}

extension SageMakerClientTypes {

    public enum CrossAccountFilterOption: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case crossAccount
        case sameAccount
        case sdkUnknown(Swift.String)

        public static var allCases: [CrossAccountFilterOption] {
            return [
                .crossAccount,
                .sameAccount
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .crossAccount: return "CrossAccount"
            case .sameAccount: return "SameAccount"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum Statistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case average
        case maximum
        case minimum
        case sampleCount
        case sum
        case sdkUnknown(Swift.String)

        public static var allCases: [Statistic] {
            return [
                .average,
                .maximum,
                .minimum,
                .sampleCount,
                .sum
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case .minimum: return "Minimum"
            case .sampleCount: return "SampleCount"
            case .sum: return "Sum"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A customized metric.
    public struct CustomizedMetricSpecification {
        /// The name of the customized metric.
        public var metricName: Swift.String?
        /// The namespace of the customized metric.
        public var namespace: Swift.String?
        /// The statistic of the customized metric.
        public var statistic: SageMakerClientTypes.Statistic?

        public init(
            metricName: Swift.String? = nil,
            namespace: Swift.String? = nil,
            statistic: SageMakerClientTypes.Statistic? = nil
        )
        {
            self.metricName = metricName
            self.namespace = namespace
            self.statistic = statistic
        }
    }

}

extension SageMakerClientTypes {
    /// The currently active data capture configuration used by your Endpoint.
    public struct DataCaptureConfigSummary {
        /// Whether data capture is currently functional.
        /// This member is required.
        public var captureStatus: SageMakerClientTypes.CaptureStatus?
        /// The percentage of requests being captured by your Endpoint.
        /// This member is required.
        public var currentSamplingPercentage: Swift.Int?
        /// The Amazon S3 location being used to capture the data.
        /// This member is required.
        public var destinationS3Uri: Swift.String?
        /// Whether data capture is enabled or disabled.
        /// This member is required.
        public var enableCapture: Swift.Bool?
        /// The KMS key being used to encrypt the data in Amazon S3.
        /// This member is required.
        public var kmsKeyId: Swift.String?

        public init(
            captureStatus: SageMakerClientTypes.CaptureStatus? = nil,
            currentSamplingPercentage: Swift.Int? = nil,
            destinationS3Uri: Swift.String? = nil,
            enableCapture: Swift.Bool? = nil,
            kmsKeyId: Swift.String? = nil
        )
        {
            self.captureStatus = captureStatus
            self.currentSamplingPercentage = currentSamplingPercentage
            self.destinationS3Uri = destinationS3Uri
            self.enableCapture = enableCapture
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension SageMakerClientTypes {

    public enum RuleEvaluationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case error
        case inProgress
        case issuesFound
        case noIssuesFound
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [RuleEvaluationStatus] {
            return [
                .error,
                .inProgress,
                .issuesFound,
                .noIssuesFound,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .error: return "Error"
            case .inProgress: return "InProgress"
            case .issuesFound: return "IssuesFound"
            case .noIssuesFound: return "NoIssuesFound"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Information about the status of the rule evaluation.
    public struct DebugRuleEvaluationStatus {
        /// Timestamp when the rule evaluation status was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The name of the rule configuration.
        public var ruleConfigurationName: Swift.String?
        /// The Amazon Resource Name (ARN) of the rule evaluation job.
        public var ruleEvaluationJobArn: Swift.String?
        /// Status of the rule evaluation.
        public var ruleEvaluationStatus: SageMakerClientTypes.RuleEvaluationStatus?
        /// Details from the rule evaluation.
        public var statusDetails: Swift.String?

        public init(
            lastModifiedTime: Foundation.Date? = nil,
            ruleConfigurationName: Swift.String? = nil,
            ruleEvaluationJobArn: Swift.String? = nil,
            ruleEvaluationStatus: SageMakerClientTypes.RuleEvaluationStatus? = nil,
            statusDetails: Swift.String? = nil
        )
        {
            self.lastModifiedTime = lastModifiedTime
            self.ruleConfigurationName = ruleConfigurationName
            self.ruleEvaluationJobArn = ruleEvaluationJobArn
            self.ruleEvaluationStatus = ruleEvaluationStatus
            self.statusDetails = statusDetails
        }
    }

}

public struct DeleteActionInput {
    /// The name of the action to delete.
    /// This member is required.
    public var actionName: Swift.String?

    public init(
        actionName: Swift.String? = nil
    )
    {
        self.actionName = actionName
    }
}

public struct DeleteActionOutput {
    /// The Amazon Resource Name (ARN) of the action.
    public var actionArn: Swift.String?

    public init(
        actionArn: Swift.String? = nil
    )
    {
        self.actionArn = actionArn
    }
}

public struct DeleteAlgorithmInput {
    /// The name of the algorithm to delete.
    /// This member is required.
    public var algorithmName: Swift.String?

    public init(
        algorithmName: Swift.String? = nil
    )
    {
        self.algorithmName = algorithmName
    }
}

public struct DeleteAppInput {
    /// The name of the app.
    /// This member is required.
    public var appName: Swift.String?
    /// The type of app.
    /// This member is required.
    public var appType: SageMakerClientTypes.AppType?
    /// The domain ID.
    /// This member is required.
    public var domainId: Swift.String?
    /// The name of the space. If this value is not set, then UserProfileName must be set.
    public var spaceName: Swift.String?
    /// The user profile name. If this value is not set, then SpaceName must be set.
    public var userProfileName: Swift.String?

    public init(
        appName: Swift.String? = nil,
        appType: SageMakerClientTypes.AppType? = nil,
        domainId: Swift.String? = nil,
        spaceName: Swift.String? = nil,
        userProfileName: Swift.String? = nil
    )
    {
        self.appName = appName
        self.appType = appType
        self.domainId = domainId
        self.spaceName = spaceName
        self.userProfileName = userProfileName
    }
}

public struct DeleteAppImageConfigInput {
    /// The name of the AppImageConfig to delete.
    /// This member is required.
    public var appImageConfigName: Swift.String?

    public init(
        appImageConfigName: Swift.String? = nil
    )
    {
        self.appImageConfigName = appImageConfigName
    }
}

public struct DeleteArtifactInput {
    /// The Amazon Resource Name (ARN) of the artifact to delete.
    public var artifactArn: Swift.String?
    /// The URI of the source.
    public var source: SageMakerClientTypes.ArtifactSource?

    public init(
        artifactArn: Swift.String? = nil,
        source: SageMakerClientTypes.ArtifactSource? = nil
    )
    {
        self.artifactArn = artifactArn
        self.source = source
    }
}

public struct DeleteArtifactOutput {
    /// The Amazon Resource Name (ARN) of the artifact.
    public var artifactArn: Swift.String?

    public init(
        artifactArn: Swift.String? = nil
    )
    {
        self.artifactArn = artifactArn
    }
}

public struct DeleteAssociationInput {
    /// The Amazon Resource Name (ARN) of the destination.
    /// This member is required.
    public var destinationArn: Swift.String?
    /// The ARN of the source.
    /// This member is required.
    public var sourceArn: Swift.String?

    public init(
        destinationArn: Swift.String? = nil,
        sourceArn: Swift.String? = nil
    )
    {
        self.destinationArn = destinationArn
        self.sourceArn = sourceArn
    }
}

public struct DeleteAssociationOutput {
    /// The Amazon Resource Name (ARN) of the destination.
    public var destinationArn: Swift.String?
    /// The ARN of the source.
    public var sourceArn: Swift.String?

    public init(
        destinationArn: Swift.String? = nil,
        sourceArn: Swift.String? = nil
    )
    {
        self.destinationArn = destinationArn
        self.sourceArn = sourceArn
    }
}

public struct DeleteClusterInput {
    /// The string name or the Amazon Resource Name (ARN) of the SageMaker HyperPod cluster to delete.
    /// This member is required.
    public var clusterName: Swift.String?

    public init(
        clusterName: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
    }
}

public struct DeleteClusterOutput {
    /// The Amazon Resource Name (ARN) of the SageMaker HyperPod cluster to delete.
    /// This member is required.
    public var clusterArn: Swift.String?

    public init(
        clusterArn: Swift.String? = nil
    )
    {
        self.clusterArn = clusterArn
    }
}

public struct DeleteCodeRepositoryInput {
    /// The name of the Git repository to delete.
    /// This member is required.
    public var codeRepositoryName: Swift.String?

    public init(
        codeRepositoryName: Swift.String? = nil
    )
    {
        self.codeRepositoryName = codeRepositoryName
    }
}

public struct DeleteCompilationJobInput {
    /// The name of the compilation job to delete.
    /// This member is required.
    public var compilationJobName: Swift.String?

    public init(
        compilationJobName: Swift.String? = nil
    )
    {
        self.compilationJobName = compilationJobName
    }
}

public struct DeleteContextInput {
    /// The name of the context to delete.
    /// This member is required.
    public var contextName: Swift.String?

    public init(
        contextName: Swift.String? = nil
    )
    {
        self.contextName = contextName
    }
}

public struct DeleteContextOutput {
    /// The Amazon Resource Name (ARN) of the context.
    public var contextArn: Swift.String?

    public init(
        contextArn: Swift.String? = nil
    )
    {
        self.contextArn = contextArn
    }
}

public struct DeleteDataQualityJobDefinitionInput {
    /// The name of the data quality monitoring job definition to delete.
    /// This member is required.
    public var jobDefinitionName: Swift.String?

    public init(
        jobDefinitionName: Swift.String? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
    }
}

public struct DeleteDeviceFleetInput {
    /// The name of the fleet to delete.
    /// This member is required.
    public var deviceFleetName: Swift.String?

    public init(
        deviceFleetName: Swift.String? = nil
    )
    {
        self.deviceFleetName = deviceFleetName
    }
}

extension SageMakerClientTypes {

    public enum RetentionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case delete
        case retain
        case sdkUnknown(Swift.String)

        public static var allCases: [RetentionType] {
            return [
                .delete,
                .retain
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .delete: return "Delete"
            case .retain: return "Retain"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The retention policy for data stored on an Amazon Elastic File System volume.
    public struct RetentionPolicy {
        /// The default is Retain, which specifies to keep the data stored on the Amazon EFS volume. Specify Delete to delete the data stored on the Amazon EFS volume.
        public var homeEfsFileSystem: SageMakerClientTypes.RetentionType?

        public init(
            homeEfsFileSystem: SageMakerClientTypes.RetentionType? = nil
        )
        {
            self.homeEfsFileSystem = homeEfsFileSystem
        }
    }

}

public struct DeleteDomainInput {
    /// The domain ID.
    /// This member is required.
    public var domainId: Swift.String?
    /// The retention policy for this domain, which specifies whether resources will be retained after the Domain is deleted. By default, all resources are retained (not automatically deleted).
    public var retentionPolicy: SageMakerClientTypes.RetentionPolicy?

    public init(
        domainId: Swift.String? = nil,
        retentionPolicy: SageMakerClientTypes.RetentionPolicy? = nil
    )
    {
        self.domainId = domainId
        self.retentionPolicy = retentionPolicy
    }
}

public struct DeleteEdgeDeploymentPlanInput {
    /// The name of the edge deployment plan to delete.
    /// This member is required.
    public var edgeDeploymentPlanName: Swift.String?

    public init(
        edgeDeploymentPlanName: Swift.String? = nil
    )
    {
        self.edgeDeploymentPlanName = edgeDeploymentPlanName
    }
}

public struct DeleteEdgeDeploymentStageInput {
    /// The name of the edge deployment plan from which the stage will be deleted.
    /// This member is required.
    public var edgeDeploymentPlanName: Swift.String?
    /// The name of the stage.
    /// This member is required.
    public var stageName: Swift.String?

    public init(
        edgeDeploymentPlanName: Swift.String? = nil,
        stageName: Swift.String? = nil
    )
    {
        self.edgeDeploymentPlanName = edgeDeploymentPlanName
        self.stageName = stageName
    }
}

public struct DeleteEndpointInput {
    /// The name of the endpoint that you want to delete.
    /// This member is required.
    public var endpointName: Swift.String?

    public init(
        endpointName: Swift.String? = nil
    )
    {
        self.endpointName = endpointName
    }
}

public struct DeleteEndpointConfigInput {
    /// The name of the endpoint configuration that you want to delete.
    /// This member is required.
    public var endpointConfigName: Swift.String?

    public init(
        endpointConfigName: Swift.String? = nil
    )
    {
        self.endpointConfigName = endpointConfigName
    }
}

public struct DeleteExperimentInput {
    /// The name of the experiment to delete.
    /// This member is required.
    public var experimentName: Swift.String?

    public init(
        experimentName: Swift.String? = nil
    )
    {
        self.experimentName = experimentName
    }
}

public struct DeleteExperimentOutput {
    /// The Amazon Resource Name (ARN) of the experiment that is being deleted.
    public var experimentArn: Swift.String?

    public init(
        experimentArn: Swift.String? = nil
    )
    {
        self.experimentArn = experimentArn
    }
}

public struct DeleteFeatureGroupInput {
    /// The name of the FeatureGroup you want to delete. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account.
    /// This member is required.
    public var featureGroupName: Swift.String?

    public init(
        featureGroupName: Swift.String? = nil
    )
    {
        self.featureGroupName = featureGroupName
    }
}

public struct DeleteFlowDefinitionInput {
    /// The name of the flow definition you are deleting.
    /// This member is required.
    public var flowDefinitionName: Swift.String?

    public init(
        flowDefinitionName: Swift.String? = nil
    )
    {
        self.flowDefinitionName = flowDefinitionName
    }
}

public struct DeleteFlowDefinitionOutput {

    public init() { }
}

public struct DeleteHubInput {
    /// The name of the hub to delete.
    /// This member is required.
    public var hubName: Swift.String?

    public init(
        hubName: Swift.String? = nil
    )
    {
        self.hubName = hubName
    }
}

extension SageMakerClientTypes {

    public enum HubContentType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case model
        case modelReference
        case notebook
        case sdkUnknown(Swift.String)

        public static var allCases: [HubContentType] {
            return [
                .model,
                .modelReference,
                .notebook
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .model: return "Model"
            case .modelReference: return "ModelReference"
            case .notebook: return "Notebook"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DeleteHubContentInput {
    /// The name of the content that you want to delete from a hub.
    /// This member is required.
    public var hubContentName: Swift.String?
    /// The type of content that you want to delete from a hub.
    /// This member is required.
    public var hubContentType: SageMakerClientTypes.HubContentType?
    /// The version of the content that you want to delete from a hub.
    /// This member is required.
    public var hubContentVersion: Swift.String?
    /// The name of the hub that you want to delete content in.
    /// This member is required.
    public var hubName: Swift.String?

    public init(
        hubContentName: Swift.String? = nil,
        hubContentType: SageMakerClientTypes.HubContentType? = nil,
        hubContentVersion: Swift.String? = nil,
        hubName: Swift.String? = nil
    )
    {
        self.hubContentName = hubContentName
        self.hubContentType = hubContentType
        self.hubContentVersion = hubContentVersion
        self.hubName = hubName
    }
}

public struct DeleteHubContentReferenceInput {
    /// The name of the hub content to delete.
    /// This member is required.
    public var hubContentName: Swift.String?
    /// The type of hub content reference to delete. The only supported type of hub content reference to delete is ModelReference.
    /// This member is required.
    public var hubContentType: SageMakerClientTypes.HubContentType?
    /// The name of the hub to delete the hub content reference from.
    /// This member is required.
    public var hubName: Swift.String?

    public init(
        hubContentName: Swift.String? = nil,
        hubContentType: SageMakerClientTypes.HubContentType? = nil,
        hubName: Swift.String? = nil
    )
    {
        self.hubContentName = hubContentName
        self.hubContentType = hubContentType
        self.hubName = hubName
    }
}

public struct DeleteHumanTaskUiInput {
    /// The name of the human task user interface (work task template) you want to delete.
    /// This member is required.
    public var humanTaskUiName: Swift.String?

    public init(
        humanTaskUiName: Swift.String? = nil
    )
    {
        self.humanTaskUiName = humanTaskUiName
    }
}

public struct DeleteHumanTaskUiOutput {

    public init() { }
}

public struct DeleteHyperParameterTuningJobInput {
    /// The name of the hyperparameter tuning job that you want to delete.
    /// This member is required.
    public var hyperParameterTuningJobName: Swift.String?

    public init(
        hyperParameterTuningJobName: Swift.String? = nil
    )
    {
        self.hyperParameterTuningJobName = hyperParameterTuningJobName
    }
}

public struct DeleteImageInput {
    /// The name of the image to delete.
    /// This member is required.
    public var imageName: Swift.String?

    public init(
        imageName: Swift.String? = nil
    )
    {
        self.imageName = imageName
    }
}

public struct DeleteImageOutput {

    public init() { }
}

public struct DeleteImageVersionInput {
    /// The alias of the image to delete.
    public var alias: Swift.String?
    /// The name of the image to delete.
    /// This member is required.
    public var imageName: Swift.String?
    /// The version to delete.
    public var version: Swift.Int?

    public init(
        alias: Swift.String? = nil,
        imageName: Swift.String? = nil,
        version: Swift.Int? = nil
    )
    {
        self.alias = alias
        self.imageName = imageName
        self.version = version
    }
}

public struct DeleteImageVersionOutput {

    public init() { }
}

public struct DeleteInferenceComponentInput {
    /// The name of the inference component to delete.
    /// This member is required.
    public var inferenceComponentName: Swift.String?

    public init(
        inferenceComponentName: Swift.String? = nil
    )
    {
        self.inferenceComponentName = inferenceComponentName
    }
}

public struct DeleteInferenceExperimentInput {
    /// The name of the inference experiment you want to delete.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct DeleteInferenceExperimentOutput {
    /// The ARN of the deleted inference experiment.
    /// This member is required.
    public var inferenceExperimentArn: Swift.String?

    public init(
        inferenceExperimentArn: Swift.String? = nil
    )
    {
        self.inferenceExperimentArn = inferenceExperimentArn
    }
}

public struct DeleteMlflowTrackingServerInput {
    /// The name of the the tracking server to delete.
    /// This member is required.
    public var trackingServerName: Swift.String?

    public init(
        trackingServerName: Swift.String? = nil
    )
    {
        self.trackingServerName = trackingServerName
    }
}

public struct DeleteMlflowTrackingServerOutput {
    /// A TrackingServerArn object, the ARN of the tracking server that is deleted if successfully found.
    public var trackingServerArn: Swift.String?

    public init(
        trackingServerArn: Swift.String? = nil
    )
    {
        self.trackingServerArn = trackingServerArn
    }
}

public struct DeleteModelInput {
    /// The name of the model to delete.
    /// This member is required.
    public var modelName: Swift.String?

    public init(
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

public struct DeleteModelBiasJobDefinitionInput {
    /// The name of the model bias job definition to delete.
    /// This member is required.
    public var jobDefinitionName: Swift.String?

    public init(
        jobDefinitionName: Swift.String? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
    }
}

public struct DeleteModelCardInput {
    /// The name of the model card to delete.
    /// This member is required.
    public var modelCardName: Swift.String?

    public init(
        modelCardName: Swift.String? = nil
    )
    {
        self.modelCardName = modelCardName
    }
}

public struct DeleteModelExplainabilityJobDefinitionInput {
    /// The name of the model explainability job definition to delete.
    /// This member is required.
    public var jobDefinitionName: Swift.String?

    public init(
        jobDefinitionName: Swift.String? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
    }
}

public struct DeleteModelPackageInput {
    /// The name or Amazon Resource Name (ARN) of the model package to delete. When you specify a name, the name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).
    /// This member is required.
    public var modelPackageName: Swift.String?

    public init(
        modelPackageName: Swift.String? = nil
    )
    {
        self.modelPackageName = modelPackageName
    }
}

public struct DeleteModelPackageGroupInput {
    /// The name of the model group to delete.
    /// This member is required.
    public var modelPackageGroupName: Swift.String?

    public init(
        modelPackageGroupName: Swift.String? = nil
    )
    {
        self.modelPackageGroupName = modelPackageGroupName
    }
}

public struct DeleteModelPackageGroupPolicyInput {
    /// The name of the model group for which to delete the policy.
    /// This member is required.
    public var modelPackageGroupName: Swift.String?

    public init(
        modelPackageGroupName: Swift.String? = nil
    )
    {
        self.modelPackageGroupName = modelPackageGroupName
    }
}

public struct DeleteModelQualityJobDefinitionInput {
    /// The name of the model quality monitoring job definition to delete.
    /// This member is required.
    public var jobDefinitionName: Swift.String?

    public init(
        jobDefinitionName: Swift.String? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
    }
}

public struct DeleteMonitoringScheduleInput {
    /// The name of the monitoring schedule to delete.
    /// This member is required.
    public var monitoringScheduleName: Swift.String?

    public init(
        monitoringScheduleName: Swift.String? = nil
    )
    {
        self.monitoringScheduleName = monitoringScheduleName
    }
}

public struct DeleteNotebookInstanceInput {
    /// The name of the SageMaker notebook instance to delete.
    /// This member is required.
    public var notebookInstanceName: Swift.String?

    public init(
        notebookInstanceName: Swift.String? = nil
    )
    {
        self.notebookInstanceName = notebookInstanceName
    }
}

public struct DeleteNotebookInstanceLifecycleConfigInput {
    /// The name of the lifecycle configuration to delete.
    /// This member is required.
    public var notebookInstanceLifecycleConfigName: Swift.String?

    public init(
        notebookInstanceLifecycleConfigName: Swift.String? = nil
    )
    {
        self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
    }
}

public struct DeleteOptimizationJobInput {
    /// The name that you assigned to the optimization job.
    /// This member is required.
    public var optimizationJobName: Swift.String?

    public init(
        optimizationJobName: Swift.String? = nil
    )
    {
        self.optimizationJobName = optimizationJobName
    }
}

public struct DeletePipelineInput {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// The name of the pipeline to delete.
    /// This member is required.
    public var pipelineName: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        pipelineName: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.pipelineName = pipelineName
    }
}

public struct DeletePipelineOutput {
    /// The Amazon Resource Name (ARN) of the pipeline to delete.
    public var pipelineArn: Swift.String?

    public init(
        pipelineArn: Swift.String? = nil
    )
    {
        self.pipelineArn = pipelineArn
    }
}

public struct DeleteProjectInput {
    /// The name of the project to delete.
    /// This member is required.
    public var projectName: Swift.String?

    public init(
        projectName: Swift.String? = nil
    )
    {
        self.projectName = projectName
    }
}

public struct DeleteSpaceInput {
    /// The ID of the associated domain.
    /// This member is required.
    public var domainId: Swift.String?
    /// The name of the space.
    /// This member is required.
    public var spaceName: Swift.String?

    public init(
        domainId: Swift.String? = nil,
        spaceName: Swift.String? = nil
    )
    {
        self.domainId = domainId
        self.spaceName = spaceName
    }
}

public struct DeleteStudioLifecycleConfigInput {
    /// The name of the Amazon SageMaker Studio Lifecycle Configuration to delete.
    /// This member is required.
    public var studioLifecycleConfigName: Swift.String?

    public init(
        studioLifecycleConfigName: Swift.String? = nil
    )
    {
        self.studioLifecycleConfigName = studioLifecycleConfigName
    }
}

public struct DeleteTagsInput {
    /// The Amazon Resource Name (ARN) of the resource whose tags you want to delete.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// An array or one or more tag keys to delete.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct DeleteTagsOutput {

    public init() { }
}

public struct DeleteTrialInput {
    /// The name of the trial to delete.
    /// This member is required.
    public var trialName: Swift.String?

    public init(
        trialName: Swift.String? = nil
    )
    {
        self.trialName = trialName
    }
}

public struct DeleteTrialOutput {
    /// The Amazon Resource Name (ARN) of the trial that is being deleted.
    public var trialArn: Swift.String?

    public init(
        trialArn: Swift.String? = nil
    )
    {
        self.trialArn = trialArn
    }
}

public struct DeleteTrialComponentInput {
    /// The name of the component to delete.
    /// This member is required.
    public var trialComponentName: Swift.String?

    public init(
        trialComponentName: Swift.String? = nil
    )
    {
        self.trialComponentName = trialComponentName
    }
}

public struct DeleteTrialComponentOutput {
    /// The Amazon Resource Name (ARN) of the component is being deleted.
    public var trialComponentArn: Swift.String?

    public init(
        trialComponentArn: Swift.String? = nil
    )
    {
        self.trialComponentArn = trialComponentArn
    }
}

public struct DeleteUserProfileInput {
    /// The domain ID.
    /// This member is required.
    public var domainId: Swift.String?
    /// The user profile name.
    /// This member is required.
    public var userProfileName: Swift.String?

    public init(
        domainId: Swift.String? = nil,
        userProfileName: Swift.String? = nil
    )
    {
        self.domainId = domainId
        self.userProfileName = userProfileName
    }
}

public struct DeleteWorkforceInput {
    /// The name of the workforce.
    /// This member is required.
    public var workforceName: Swift.String?

    public init(
        workforceName: Swift.String? = nil
    )
    {
        self.workforceName = workforceName
    }
}

public struct DeleteWorkforceOutput {

    public init() { }
}

public struct DeleteWorkteamInput {
    /// The name of the work team to delete.
    /// This member is required.
    public var workteamName: Swift.String?

    public init(
        workteamName: Swift.String? = nil
    )
    {
        self.workteamName = workteamName
    }
}

public struct DeleteWorkteamOutput {
    /// Returns true if the work team was successfully deleted; otherwise, returns false.
    /// This member is required.
    public var success: Swift.Bool?

    public init(
        success: Swift.Bool? = nil
    )
    {
        self.success = success
    }
}

extension SageMakerClientTypes {
    /// Gets the Amazon EC2 Container Registry path of the docker image of the model that is hosted in this [ProductionVariant](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ProductionVariant.html). If you used the registry/repository[:tag] form to specify the image path of the primary container when you created the model hosted in this ProductionVariant, the path resolves to a path of the form registry/repository[@digest]. A digest is a hash value that identifies a specific version of an image. For information about Amazon ECR paths, see [Pulling an Image](https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html) in the Amazon ECR User Guide.
    public struct DeployedImage {
        /// The date and time when the image path for the model resolved to the ResolvedImage
        public var resolutionTime: Foundation.Date?
        /// The specific digest path of the image hosted in this ProductionVariant.
        public var resolvedImage: Swift.String?
        /// The image path you specified when you created the model.
        public var specifiedImage: Swift.String?

        public init(
            resolutionTime: Foundation.Date? = nil,
            resolvedImage: Swift.String? = nil,
            specifiedImage: Swift.String? = nil
        )
        {
            self.resolutionTime = resolutionTime
            self.resolvedImage = resolvedImage
            self.specifiedImage = specifiedImage
        }
    }

}

extension SageMakerClientTypes {
    /// The recommended configuration to use for Real-Time Inference.
    public struct RealTimeInferenceRecommendation {
        /// The recommended environment variables to set in the model container for Real-Time Inference.
        public var environment: [Swift.String: Swift.String]?
        /// The recommended instance type for Real-Time Inference.
        /// This member is required.
        public var instanceType: SageMakerClientTypes.ProductionVariantInstanceType?
        /// The recommendation ID which uniquely identifies each recommendation.
        /// This member is required.
        public var recommendationId: Swift.String?

        public init(
            environment: [Swift.String: Swift.String]? = nil,
            instanceType: SageMakerClientTypes.ProductionVariantInstanceType? = nil,
            recommendationId: Swift.String? = nil
        )
        {
            self.environment = environment
            self.instanceType = instanceType
            self.recommendationId = recommendationId
        }
    }

}

extension SageMakerClientTypes {

    public enum RecommendationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case notApplicable
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .notApplicable
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .notApplicable: return "NOT_APPLICABLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A set of recommended deployment configurations for the model. To get more advanced recommendations, see [CreateInferenceRecommendationsJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceRecommendationsJob.html) to create an inference recommendation job.
    public struct DeploymentRecommendation {
        /// A list of [RealTimeInferenceRecommendation](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_RealTimeInferenceRecommendation.html) items.
        public var realTimeInferenceRecommendations: [SageMakerClientTypes.RealTimeInferenceRecommendation]?
        /// Status of the deployment recommendation. The status NOT_APPLICABLE means that SageMaker is unable to provide a default recommendation for the model using the information provided. If the deployment status is IN_PROGRESS, retry your API call after a few seconds to get a COMPLETED deployment recommendation.
        /// This member is required.
        public var recommendationStatus: SageMakerClientTypes.RecommendationStatus?

        public init(
            realTimeInferenceRecommendations: [SageMakerClientTypes.RealTimeInferenceRecommendation]? = nil,
            recommendationStatus: SageMakerClientTypes.RecommendationStatus? = nil
        )
        {
            self.realTimeInferenceRecommendations = realTimeInferenceRecommendations
            self.recommendationStatus = recommendationStatus
        }
    }

}

extension SageMakerClientTypes {

    public enum StageStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creating
        case deployed
        case failed
        case inprogress
        case readytodeploy
        case starting
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [StageStatus] {
            return [
                .creating,
                .deployed,
                .failed,
                .inprogress,
                .readytodeploy,
                .starting,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creating: return "CREATING"
            case .deployed: return "DEPLOYED"
            case .failed: return "FAILED"
            case .inprogress: return "INPROGRESS"
            case .readytodeploy: return "READYTODEPLOY"
            case .starting: return "STARTING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Contains information summarizing the deployment stage results.
    public struct EdgeDeploymentStatus {
        /// The number of edge devices that failed the deployment in current stage.
        /// This member is required.
        public var edgeDeploymentFailedInStage: Swift.Int?
        /// The number of edge devices yet to pick up the deployment in current stage, or in progress.
        /// This member is required.
        public var edgeDeploymentPendingInStage: Swift.Int?
        /// The time when the deployment API started.
        public var edgeDeploymentStageStartTime: Foundation.Date?
        /// A detailed message about deployment status in current stage.
        public var edgeDeploymentStatusMessage: Swift.String?
        /// The number of edge devices with the successful deployment in the current stage.
        /// This member is required.
        public var edgeDeploymentSuccessInStage: Swift.Int?
        /// The general status of the current stage.
        /// This member is required.
        public var stageStatus: SageMakerClientTypes.StageStatus?

        public init(
            edgeDeploymentFailedInStage: Swift.Int? = nil,
            edgeDeploymentPendingInStage: Swift.Int? = nil,
            edgeDeploymentStageStartTime: Foundation.Date? = nil,
            edgeDeploymentStatusMessage: Swift.String? = nil,
            edgeDeploymentSuccessInStage: Swift.Int? = nil,
            stageStatus: SageMakerClientTypes.StageStatus? = nil
        )
        {
            self.edgeDeploymentFailedInStage = edgeDeploymentFailedInStage
            self.edgeDeploymentPendingInStage = edgeDeploymentPendingInStage
            self.edgeDeploymentStageStartTime = edgeDeploymentStageStartTime
            self.edgeDeploymentStatusMessage = edgeDeploymentStatusMessage
            self.edgeDeploymentSuccessInStage = edgeDeploymentSuccessInStage
            self.stageStatus = stageStatus
        }
    }

}

extension SageMakerClientTypes {
    /// Contains information summarizing the deployment stage results.
    public struct DeploymentStageStatusSummary {
        /// Configuration of the deployment details.
        /// This member is required.
        public var deploymentConfig: SageMakerClientTypes.EdgeDeploymentConfig?
        /// General status of the current state.
        /// This member is required.
        public var deploymentStatus: SageMakerClientTypes.EdgeDeploymentStatus?
        /// Configuration of the devices in the stage.
        /// This member is required.
        public var deviceSelectionConfig: SageMakerClientTypes.DeviceSelectionConfig?
        /// The name of the stage.
        /// This member is required.
        public var stageName: Swift.String?

        public init(
            deploymentConfig: SageMakerClientTypes.EdgeDeploymentConfig? = nil,
            deploymentStatus: SageMakerClientTypes.EdgeDeploymentStatus? = nil,
            deviceSelectionConfig: SageMakerClientTypes.DeviceSelectionConfig? = nil,
            stageName: Swift.String? = nil
        )
        {
            self.deploymentConfig = deploymentConfig
            self.deploymentStatus = deploymentStatus
            self.deviceSelectionConfig = deviceSelectionConfig
            self.stageName = stageName
        }
    }

}

public struct DeregisterDevicesInput {
    /// The name of the fleet the devices belong to.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// The unique IDs of the devices.
    /// This member is required.
    public var deviceNames: [Swift.String]?

    public init(
        deviceFleetName: Swift.String? = nil,
        deviceNames: [Swift.String]? = nil
    )
    {
        self.deviceFleetName = deviceFleetName
        self.deviceNames = deviceNames
    }
}

extension SageMakerClientTypes {
    /// Information that SageMaker Neo automatically derived about the model.
    public struct DerivedInformation {
        /// The data input configuration that SageMaker Neo automatically derived for the model. When SageMaker Neo derives this information, you don't need to specify the data input configuration when you create a compilation job.
        public var derivedDataInputConfig: Swift.String?

        public init(
            derivedDataInputConfig: Swift.String? = nil
        )
        {
            self.derivedDataInputConfig = derivedDataInputConfig
        }
    }

}

public struct DescribeActionInput {
    /// The name of the action to describe.
    /// This member is required.
    public var actionName: Swift.String?

    public init(
        actionName: Swift.String? = nil
    )
    {
        self.actionName = actionName
    }
}

public struct DescribeActionOutput {
    /// The Amazon Resource Name (ARN) of the action.
    public var actionArn: Swift.String?
    /// The name of the action.
    public var actionName: Swift.String?
    /// The type of the action.
    public var actionType: Swift.String?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// When the action was created.
    public var creationTime: Foundation.Date?
    /// The description of the action.
    public var description: Swift.String?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// When the action was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the lineage group.
    public var lineageGroupArn: Swift.String?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// A list of the action's properties.
    public var properties: [Swift.String: Swift.String]?
    /// The source of the action.
    public var source: SageMakerClientTypes.ActionSource?
    /// The status of the action.
    public var status: SageMakerClientTypes.ActionStatus?

    public init(
        actionArn: Swift.String? = nil,
        actionName: Swift.String? = nil,
        actionType: Swift.String? = nil,
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        lineageGroupArn: Swift.String? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        properties: [Swift.String: Swift.String]? = nil,
        source: SageMakerClientTypes.ActionSource? = nil,
        status: SageMakerClientTypes.ActionStatus? = nil
    )
    {
        self.actionArn = actionArn
        self.actionName = actionName
        self.actionType = actionType
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.description = description
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.lineageGroupArn = lineageGroupArn
        self.metadataProperties = metadataProperties
        self.properties = properties
        self.source = source
        self.status = status
    }
}

public struct DescribeAlgorithmInput {
    /// The name of the algorithm to describe.
    /// This member is required.
    public var algorithmName: Swift.String?

    public init(
        algorithmName: Swift.String? = nil
    )
    {
        self.algorithmName = algorithmName
    }
}

public struct DescribeAlgorithmOutput {
    /// The Amazon Resource Name (ARN) of the algorithm.
    /// This member is required.
    public var algorithmArn: Swift.String?
    /// A brief summary about the algorithm.
    public var algorithmDescription: Swift.String?
    /// The name of the algorithm being described.
    /// This member is required.
    public var algorithmName: Swift.String?
    /// The current status of the algorithm.
    /// This member is required.
    public var algorithmStatus: SageMakerClientTypes.AlgorithmStatus?
    /// Details about the current status of the algorithm.
    /// This member is required.
    public var algorithmStatusDetails: SageMakerClientTypes.AlgorithmStatusDetails?
    /// Whether the algorithm is certified to be listed in Amazon Web Services Marketplace.
    public var certifyForMarketplace: Swift.Bool?
    /// A timestamp specifying when the algorithm was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// Details about inference jobs that the algorithm runs.
    public var inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
    /// The product identifier of the algorithm.
    public var productId: Swift.String?
    /// Details about training jobs run by this algorithm.
    /// This member is required.
    public var trainingSpecification: SageMakerClientTypes.TrainingSpecification?
    /// Details about configurations for one or more training jobs that SageMaker runs to test the algorithm.
    public var validationSpecification: SageMakerClientTypes.AlgorithmValidationSpecification?

    public init(
        algorithmArn: Swift.String? = nil,
        algorithmDescription: Swift.String? = nil,
        algorithmName: Swift.String? = nil,
        algorithmStatus: SageMakerClientTypes.AlgorithmStatus? = nil,
        algorithmStatusDetails: SageMakerClientTypes.AlgorithmStatusDetails? = nil,
        certifyForMarketplace: Swift.Bool? = nil,
        creationTime: Foundation.Date? = nil,
        inferenceSpecification: SageMakerClientTypes.InferenceSpecification? = nil,
        productId: Swift.String? = nil,
        trainingSpecification: SageMakerClientTypes.TrainingSpecification? = nil,
        validationSpecification: SageMakerClientTypes.AlgorithmValidationSpecification? = nil
    )
    {
        self.algorithmArn = algorithmArn
        self.algorithmDescription = algorithmDescription
        self.algorithmName = algorithmName
        self.algorithmStatus = algorithmStatus
        self.algorithmStatusDetails = algorithmStatusDetails
        self.certifyForMarketplace = certifyForMarketplace
        self.creationTime = creationTime
        self.inferenceSpecification = inferenceSpecification
        self.productId = productId
        self.trainingSpecification = trainingSpecification
        self.validationSpecification = validationSpecification
    }
}

public struct DescribeAppInput {
    /// The name of the app.
    /// This member is required.
    public var appName: Swift.String?
    /// The type of app.
    /// This member is required.
    public var appType: SageMakerClientTypes.AppType?
    /// The domain ID.
    /// This member is required.
    public var domainId: Swift.String?
    /// The name of the space.
    public var spaceName: Swift.String?
    /// The user profile name. If this value is not set, then SpaceName must be set.
    public var userProfileName: Swift.String?

    public init(
        appName: Swift.String? = nil,
        appType: SageMakerClientTypes.AppType? = nil,
        domainId: Swift.String? = nil,
        spaceName: Swift.String? = nil,
        userProfileName: Swift.String? = nil
    )
    {
        self.appName = appName
        self.appType = appType
        self.domainId = domainId
        self.spaceName = spaceName
        self.userProfileName = userProfileName
    }
}

public struct DescribeAppOutput {
    /// The Amazon Resource Name (ARN) of the app.
    public var appArn: Swift.String?
    /// The name of the app.
    public var appName: Swift.String?
    /// The type of app.
    public var appType: SageMakerClientTypes.AppType?
    /// The creation time of the application. After an application has been shut down for 24 hours, SageMaker deletes all metadata for the application. To be considered an update and retain application metadata, applications must be restarted within 24 hours after the previous application has been shut down. After this time window, creation of an application is considered a new application rather than an update of the previous application.
    public var creationTime: Foundation.Date?
    /// The domain ID.
    public var domainId: Swift.String?
    /// The failure reason.
    public var failureReason: Swift.String?
    /// The timestamp of the last health check.
    public var lastHealthCheckTimestamp: Foundation.Date?
    /// The timestamp of the last user's activity. LastUserActivityTimestamp is also updated when SageMaker performs health checks without user activity. As a result, this value is set to the same value as LastHealthCheckTimestamp.
    public var lastUserActivityTimestamp: Foundation.Date?
    /// The instance type and the Amazon Resource Name (ARN) of the SageMaker image created on the instance.
    public var resourceSpec: SageMakerClientTypes.ResourceSpec?
    /// The name of the space. If this value is not set, then UserProfileName must be set.
    public var spaceName: Swift.String?
    /// The status.
    public var status: SageMakerClientTypes.AppStatus?
    /// The user profile name.
    public var userProfileName: Swift.String?

    public init(
        appArn: Swift.String? = nil,
        appName: Swift.String? = nil,
        appType: SageMakerClientTypes.AppType? = nil,
        creationTime: Foundation.Date? = nil,
        domainId: Swift.String? = nil,
        failureReason: Swift.String? = nil,
        lastHealthCheckTimestamp: Foundation.Date? = nil,
        lastUserActivityTimestamp: Foundation.Date? = nil,
        resourceSpec: SageMakerClientTypes.ResourceSpec? = nil,
        spaceName: Swift.String? = nil,
        status: SageMakerClientTypes.AppStatus? = nil,
        userProfileName: Swift.String? = nil
    )
    {
        self.appArn = appArn
        self.appName = appName
        self.appType = appType
        self.creationTime = creationTime
        self.domainId = domainId
        self.failureReason = failureReason
        self.lastHealthCheckTimestamp = lastHealthCheckTimestamp
        self.lastUserActivityTimestamp = lastUserActivityTimestamp
        self.resourceSpec = resourceSpec
        self.spaceName = spaceName
        self.status = status
        self.userProfileName = userProfileName
    }
}

public struct DescribeAppImageConfigInput {
    /// The name of the AppImageConfig to describe.
    /// This member is required.
    public var appImageConfigName: Swift.String?

    public init(
        appImageConfigName: Swift.String? = nil
    )
    {
        self.appImageConfigName = appImageConfigName
    }
}

public struct DescribeAppImageConfigOutput {
    /// The ARN of the AppImageConfig.
    public var appImageConfigArn: Swift.String?
    /// The name of the AppImageConfig.
    public var appImageConfigName: Swift.String?
    /// The configuration of the Code Editor app.
    public var codeEditorAppImageConfig: SageMakerClientTypes.CodeEditorAppImageConfig?
    /// When the AppImageConfig was created.
    public var creationTime: Foundation.Date?
    /// The configuration of the JupyterLab app.
    public var jupyterLabAppImageConfig: SageMakerClientTypes.JupyterLabAppImageConfig?
    /// The configuration of a KernelGateway app.
    public var kernelGatewayImageConfig: SageMakerClientTypes.KernelGatewayImageConfig?
    /// When the AppImageConfig was last modified.
    public var lastModifiedTime: Foundation.Date?

    public init(
        appImageConfigArn: Swift.String? = nil,
        appImageConfigName: Swift.String? = nil,
        codeEditorAppImageConfig: SageMakerClientTypes.CodeEditorAppImageConfig? = nil,
        creationTime: Foundation.Date? = nil,
        jupyterLabAppImageConfig: SageMakerClientTypes.JupyterLabAppImageConfig? = nil,
        kernelGatewayImageConfig: SageMakerClientTypes.KernelGatewayImageConfig? = nil,
        lastModifiedTime: Foundation.Date? = nil
    )
    {
        self.appImageConfigArn = appImageConfigArn
        self.appImageConfigName = appImageConfigName
        self.codeEditorAppImageConfig = codeEditorAppImageConfig
        self.creationTime = creationTime
        self.jupyterLabAppImageConfig = jupyterLabAppImageConfig
        self.kernelGatewayImageConfig = kernelGatewayImageConfig
        self.lastModifiedTime = lastModifiedTime
    }
}

public struct DescribeArtifactInput {
    /// The Amazon Resource Name (ARN) of the artifact to describe.
    /// This member is required.
    public var artifactArn: Swift.String?

    public init(
        artifactArn: Swift.String? = nil
    )
    {
        self.artifactArn = artifactArn
    }
}

public struct DescribeArtifactOutput {
    /// The Amazon Resource Name (ARN) of the artifact.
    public var artifactArn: Swift.String?
    /// The name of the artifact.
    public var artifactName: Swift.String?
    /// The type of the artifact.
    public var artifactType: Swift.String?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// When the artifact was created.
    public var creationTime: Foundation.Date?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// When the artifact was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the lineage group.
    public var lineageGroupArn: Swift.String?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// A list of the artifact's properties.
    public var properties: [Swift.String: Swift.String]?
    /// The source of the artifact.
    public var source: SageMakerClientTypes.ArtifactSource?

    public init(
        artifactArn: Swift.String? = nil,
        artifactName: Swift.String? = nil,
        artifactType: Swift.String? = nil,
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: Foundation.Date? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        lineageGroupArn: Swift.String? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        properties: [Swift.String: Swift.String]? = nil,
        source: SageMakerClientTypes.ArtifactSource? = nil
    )
    {
        self.artifactArn = artifactArn
        self.artifactName = artifactName
        self.artifactType = artifactType
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.lineageGroupArn = lineageGroupArn
        self.metadataProperties = metadataProperties
        self.properties = properties
        self.source = source
    }
}

public struct DescribeAutoMLJobInput {
    /// Requests information about an AutoML job using its unique name.
    /// This member is required.
    public var autoMLJobName: Swift.String?

    public init(
        autoMLJobName: Swift.String? = nil
    )
    {
        self.autoMLJobName = autoMLJobName
    }
}

extension SageMakerClientTypes {
    /// Provides information about the endpoint of the model deployment.
    public struct ModelDeployResult {
        /// The name of the endpoint to which the model has been deployed. If model deployment fails, this field is omitted from the response.
        public var endpointName: Swift.String?

        public init(
            endpointName: Swift.String? = nil
        )
        {
            self.endpointName = endpointName
        }
    }

}

extension SageMakerClientTypes {
    /// The resolved attributes.
    public struct ResolvedAttributes {
        /// Specifies a metric to minimize or maximize as the objective of an AutoML job.
        public var autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective?
        /// How long a job is allowed to run, or how many candidates a job is allowed to generate.
        public var completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria?
        /// The problem type.
        public var problemType: SageMakerClientTypes.ProblemType?

        public init(
            autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective? = nil,
            completionCriteria: SageMakerClientTypes.AutoMLJobCompletionCriteria? = nil,
            problemType: SageMakerClientTypes.ProblemType? = nil
        )
        {
            self.autoMLJobObjective = autoMLJobObjective
            self.completionCriteria = completionCriteria
            self.problemType = problemType
        }
    }

}

public struct DescribeAutoMLJobOutput {
    /// Returns the ARN of the AutoML job.
    /// This member is required.
    public var autoMLJobArn: Swift.String?
    /// Returns information on the job's artifacts found in AutoMLJobArtifacts.
    public var autoMLJobArtifacts: SageMakerClientTypes.AutoMLJobArtifacts?
    /// Returns the configuration for the AutoML job.
    public var autoMLJobConfig: SageMakerClientTypes.AutoMLJobConfig?
    /// Returns the name of the AutoML job.
    /// This member is required.
    public var autoMLJobName: Swift.String?
    /// Returns the job's objective.
    public var autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective?
    /// Returns the secondary status of the AutoML job.
    /// This member is required.
    public var autoMLJobSecondaryStatus: SageMakerClientTypes.AutoMLJobSecondaryStatus?
    /// Returns the status of the AutoML job.
    /// This member is required.
    public var autoMLJobStatus: SageMakerClientTypes.AutoMLJobStatus?
    /// The best model candidate selected by SageMaker Autopilot using both the best objective metric and lowest [InferenceLatency](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-metrics-validation.html) for an experiment.
    public var bestCandidate: SageMakerClientTypes.AutoMLCandidate?
    /// Returns the creation time of the AutoML job.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// Returns the end time of the AutoML job.
    public var endTime: Foundation.Date?
    /// Returns the failure reason for an AutoML job, when applicable.
    public var failureReason: Swift.String?
    /// Indicates whether the output for an AutoML job generates candidate definitions only.
    public var generateCandidateDefinitionsOnly: Swift.Bool?
    /// Returns the input data configuration for the AutoML job.
    /// This member is required.
    public var inputDataConfig: [SageMakerClientTypes.AutoMLChannel]?
    /// Returns the job's last modified time.
    /// This member is required.
    public var lastModifiedTime: Foundation.Date?
    /// Indicates whether the model was deployed automatically to an endpoint and the name of that endpoint if deployed automatically.
    public var modelDeployConfig: SageMakerClientTypes.ModelDeployConfig?
    /// Provides information about endpoint for the model deployment.
    public var modelDeployResult: SageMakerClientTypes.ModelDeployResult?
    /// Returns the job's output data config.
    /// This member is required.
    public var outputDataConfig: SageMakerClientTypes.AutoMLOutputDataConfig?
    /// Returns a list of reasons for partial failures within an AutoML job.
    public var partialFailureReasons: [SageMakerClientTypes.AutoMLPartialFailureReason]?
    /// Returns the job's problem type.
    public var problemType: SageMakerClientTypes.ProblemType?
    /// Contains ProblemType, AutoMLJobObjective, and CompletionCriteria. If you do not provide these values, they are inferred.
    public var resolvedAttributes: SageMakerClientTypes.ResolvedAttributes?
    /// The ARN of the IAM role that has read permission to the input data location and write permission to the output data location in Amazon S3.
    /// This member is required.
    public var roleArn: Swift.String?

    public init(
        autoMLJobArn: Swift.String? = nil,
        autoMLJobArtifacts: SageMakerClientTypes.AutoMLJobArtifacts? = nil,
        autoMLJobConfig: SageMakerClientTypes.AutoMLJobConfig? = nil,
        autoMLJobName: Swift.String? = nil,
        autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective? = nil,
        autoMLJobSecondaryStatus: SageMakerClientTypes.AutoMLJobSecondaryStatus? = nil,
        autoMLJobStatus: SageMakerClientTypes.AutoMLJobStatus? = nil,
        bestCandidate: SageMakerClientTypes.AutoMLCandidate? = nil,
        creationTime: Foundation.Date? = nil,
        endTime: Foundation.Date? = nil,
        failureReason: Swift.String? = nil,
        generateCandidateDefinitionsOnly: Swift.Bool? = nil,
        inputDataConfig: [SageMakerClientTypes.AutoMLChannel]? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        modelDeployConfig: SageMakerClientTypes.ModelDeployConfig? = nil,
        modelDeployResult: SageMakerClientTypes.ModelDeployResult? = nil,
        outputDataConfig: SageMakerClientTypes.AutoMLOutputDataConfig? = nil,
        partialFailureReasons: [SageMakerClientTypes.AutoMLPartialFailureReason]? = nil,
        problemType: SageMakerClientTypes.ProblemType? = nil,
        resolvedAttributes: SageMakerClientTypes.ResolvedAttributes? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.autoMLJobArn = autoMLJobArn
        self.autoMLJobArtifacts = autoMLJobArtifacts
        self.autoMLJobConfig = autoMLJobConfig
        self.autoMLJobName = autoMLJobName
        self.autoMLJobObjective = autoMLJobObjective
        self.autoMLJobSecondaryStatus = autoMLJobSecondaryStatus
        self.autoMLJobStatus = autoMLJobStatus
        self.bestCandidate = bestCandidate
        self.creationTime = creationTime
        self.endTime = endTime
        self.failureReason = failureReason
        self.generateCandidateDefinitionsOnly = generateCandidateDefinitionsOnly
        self.inputDataConfig = inputDataConfig
        self.lastModifiedTime = lastModifiedTime
        self.modelDeployConfig = modelDeployConfig
        self.modelDeployResult = modelDeployResult
        self.outputDataConfig = outputDataConfig
        self.partialFailureReasons = partialFailureReasons
        self.problemType = problemType
        self.resolvedAttributes = resolvedAttributes
        self.roleArn = roleArn
    }
}

public struct DescribeAutoMLJobV2Input {
    /// Requests information about an AutoML job V2 using its unique name.
    /// This member is required.
    public var autoMLJobName: Swift.String?

    public init(
        autoMLJobName: Swift.String? = nil
    )
    {
        self.autoMLJobName = autoMLJobName
    }
}

public struct DescribeAutoMLJobV2Output {
    /// The compute configuration used for the AutoML job V2.
    public var autoMLComputeConfig: SageMakerClientTypes.AutoMLComputeConfig?
    /// Returns the Amazon Resource Name (ARN) of the AutoML job V2.
    /// This member is required.
    public var autoMLJobArn: Swift.String?
    /// The artifacts that are generated during an AutoML job.
    public var autoMLJobArtifacts: SageMakerClientTypes.AutoMLJobArtifacts?
    /// Returns an array of channel objects describing the input data and their location.
    /// This member is required.
    public var autoMLJobInputDataConfig: [SageMakerClientTypes.AutoMLJobChannel]?
    /// Returns the name of the AutoML job V2.
    /// This member is required.
    public var autoMLJobName: Swift.String?
    /// Returns the job's objective.
    public var autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective?
    /// Returns the secondary status of the AutoML job V2.
    /// This member is required.
    public var autoMLJobSecondaryStatus: SageMakerClientTypes.AutoMLJobSecondaryStatus?
    /// Returns the status of the AutoML job V2.
    /// This member is required.
    public var autoMLJobStatus: SageMakerClientTypes.AutoMLJobStatus?
    /// Returns the configuration settings of the problem type set for the AutoML job V2.
    public var autoMLProblemTypeConfig: SageMakerClientTypes.AutoMLProblemTypeConfig?
    /// Returns the name of the problem type configuration set for the AutoML job V2.
    public var autoMLProblemTypeConfigName: SageMakerClientTypes.AutoMLProblemTypeConfigName?
    /// Information about the candidate produced by an AutoML training job V2, including its status, steps, and other properties.
    public var bestCandidate: SageMakerClientTypes.AutoMLCandidate?
    /// Returns the creation time of the AutoML job V2.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// Returns the configuration settings of how the data are split into train and validation datasets.
    public var dataSplitConfig: SageMakerClientTypes.AutoMLDataSplitConfig?
    /// Returns the end time of the AutoML job V2.
    public var endTime: Foundation.Date?
    /// Returns the reason for the failure of the AutoML job V2, when applicable.
    public var failureReason: Swift.String?
    /// Returns the job's last modified time.
    /// This member is required.
    public var lastModifiedTime: Foundation.Date?
    /// Indicates whether the model was deployed automatically to an endpoint and the name of that endpoint if deployed automatically.
    public var modelDeployConfig: SageMakerClientTypes.ModelDeployConfig?
    /// Provides information about endpoint for the model deployment.
    public var modelDeployResult: SageMakerClientTypes.ModelDeployResult?
    /// Returns the job's output data config.
    /// This member is required.
    public var outputDataConfig: SageMakerClientTypes.AutoMLOutputDataConfig?
    /// Returns a list of reasons for partial failures within an AutoML job V2.
    public var partialFailureReasons: [SageMakerClientTypes.AutoMLPartialFailureReason]?
    /// Returns the resolved attributes used by the AutoML job V2.
    public var resolvedAttributes: SageMakerClientTypes.AutoMLResolvedAttributes?
    /// The ARN of the IAM role that has read permission to the input data location and write permission to the output data location in Amazon S3.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Returns the security configuration for traffic encryption or Amazon VPC settings.
    public var securityConfig: SageMakerClientTypes.AutoMLSecurityConfig?

    public init(
        autoMLComputeConfig: SageMakerClientTypes.AutoMLComputeConfig? = nil,
        autoMLJobArn: Swift.String? = nil,
        autoMLJobArtifacts: SageMakerClientTypes.AutoMLJobArtifacts? = nil,
        autoMLJobInputDataConfig: [SageMakerClientTypes.AutoMLJobChannel]? = nil,
        autoMLJobName: Swift.String? = nil,
        autoMLJobObjective: SageMakerClientTypes.AutoMLJobObjective? = nil,
        autoMLJobSecondaryStatus: SageMakerClientTypes.AutoMLJobSecondaryStatus? = nil,
        autoMLJobStatus: SageMakerClientTypes.AutoMLJobStatus? = nil,
        autoMLProblemTypeConfig: SageMakerClientTypes.AutoMLProblemTypeConfig? = nil,
        autoMLProblemTypeConfigName: SageMakerClientTypes.AutoMLProblemTypeConfigName? = nil,
        bestCandidate: SageMakerClientTypes.AutoMLCandidate? = nil,
        creationTime: Foundation.Date? = nil,
        dataSplitConfig: SageMakerClientTypes.AutoMLDataSplitConfig? = nil,
        endTime: Foundation.Date? = nil,
        failureReason: Swift.String? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        modelDeployConfig: SageMakerClientTypes.ModelDeployConfig? = nil,
        modelDeployResult: SageMakerClientTypes.ModelDeployResult? = nil,
        outputDataConfig: SageMakerClientTypes.AutoMLOutputDataConfig? = nil,
        partialFailureReasons: [SageMakerClientTypes.AutoMLPartialFailureReason]? = nil,
        resolvedAttributes: SageMakerClientTypes.AutoMLResolvedAttributes? = nil,
        roleArn: Swift.String? = nil,
        securityConfig: SageMakerClientTypes.AutoMLSecurityConfig? = nil
    )
    {
        self.autoMLComputeConfig = autoMLComputeConfig
        self.autoMLJobArn = autoMLJobArn
        self.autoMLJobArtifacts = autoMLJobArtifacts
        self.autoMLJobInputDataConfig = autoMLJobInputDataConfig
        self.autoMLJobName = autoMLJobName
        self.autoMLJobObjective = autoMLJobObjective
        self.autoMLJobSecondaryStatus = autoMLJobSecondaryStatus
        self.autoMLJobStatus = autoMLJobStatus
        self.autoMLProblemTypeConfig = autoMLProblemTypeConfig
        self.autoMLProblemTypeConfigName = autoMLProblemTypeConfigName
        self.bestCandidate = bestCandidate
        self.creationTime = creationTime
        self.dataSplitConfig = dataSplitConfig
        self.endTime = endTime
        self.failureReason = failureReason
        self.lastModifiedTime = lastModifiedTime
        self.modelDeployConfig = modelDeployConfig
        self.modelDeployResult = modelDeployResult
        self.outputDataConfig = outputDataConfig
        self.partialFailureReasons = partialFailureReasons
        self.resolvedAttributes = resolvedAttributes
        self.roleArn = roleArn
        self.securityConfig = securityConfig
    }
}

public struct DescribeClusterInput {
    /// The string name or the Amazon Resource Name (ARN) of the SageMaker HyperPod cluster.
    /// This member is required.
    public var clusterName: Swift.String?

    public init(
        clusterName: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
    }
}

public struct DescribeClusterOutput {
    /// The Amazon Resource Name (ARN) of the SageMaker HyperPod cluster.
    /// This member is required.
    public var clusterArn: Swift.String?
    /// The name of the SageMaker HyperPod cluster.
    public var clusterName: Swift.String?
    /// The status of the SageMaker HyperPod cluster.
    /// This member is required.
    public var clusterStatus: SageMakerClientTypes.ClusterStatus?
    /// The time when the SageMaker Cluster is created.
    public var creationTime: Foundation.Date?
    /// The failure message of the SageMaker HyperPod cluster.
    public var failureMessage: Swift.String?
    /// The instance groups of the SageMaker HyperPod cluster.
    /// This member is required.
    public var instanceGroups: [SageMakerClientTypes.ClusterInstanceGroupDetails]?
    /// The node recovery mode configured for the SageMaker HyperPod cluster.
    public var nodeRecovery: SageMakerClientTypes.ClusterNodeRecovery?
    /// The type of orchestrator used for the SageMaker HyperPod cluster.
    public var orchestrator: SageMakerClientTypes.ClusterOrchestrator?
    /// Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to. You can control access to and from your resources by configuring a VPC. For more information, see [Give SageMaker Access to Resources in your Amazon VPC](https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html).
    public var vpcConfig: SageMakerClientTypes.VpcConfig?

    public init(
        clusterArn: Swift.String? = nil,
        clusterName: Swift.String? = nil,
        clusterStatus: SageMakerClientTypes.ClusterStatus? = nil,
        creationTime: Foundation.Date? = nil,
        failureMessage: Swift.String? = nil,
        instanceGroups: [SageMakerClientTypes.ClusterInstanceGroupDetails]? = nil,
        nodeRecovery: SageMakerClientTypes.ClusterNodeRecovery? = nil,
        orchestrator: SageMakerClientTypes.ClusterOrchestrator? = nil,
        vpcConfig: SageMakerClientTypes.VpcConfig? = nil
    )
    {
        self.clusterArn = clusterArn
        self.clusterName = clusterName
        self.clusterStatus = clusterStatus
        self.creationTime = creationTime
        self.failureMessage = failureMessage
        self.instanceGroups = instanceGroups
        self.nodeRecovery = nodeRecovery
        self.orchestrator = orchestrator
        self.vpcConfig = vpcConfig
    }
}

public struct DescribeClusterNodeInput {
    /// The string name or the Amazon Resource Name (ARN) of the SageMaker HyperPod cluster in which the node is.
    /// This member is required.
    public var clusterName: Swift.String?
    /// The ID of the SageMaker HyperPod cluster node.
    /// This member is required.
    public var nodeId: Swift.String?

    public init(
        clusterName: Swift.String? = nil,
        nodeId: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
        self.nodeId = nodeId
    }
}

public struct DescribeClusterNodeOutput {
    /// The details of the SageMaker HyperPod cluster node.
    /// This member is required.
    public var nodeDetails: SageMakerClientTypes.ClusterNodeDetails?

    public init(
        nodeDetails: SageMakerClientTypes.ClusterNodeDetails? = nil
    )
    {
        self.nodeDetails = nodeDetails
    }
}

public struct DescribeCodeRepositoryInput {
    /// The name of the Git repository to describe.
    /// This member is required.
    public var codeRepositoryName: Swift.String?

    public init(
        codeRepositoryName: Swift.String? = nil
    )
    {
        self.codeRepositoryName = codeRepositoryName
    }
}

public struct DescribeCodeRepositoryOutput {
    /// The Amazon Resource Name (ARN) of the Git repository.
    /// This member is required.
    public var codeRepositoryArn: Swift.String?
    /// The name of the Git repository.
    /// This member is required.
    public var codeRepositoryName: Swift.String?
    /// The date and time that the repository was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// Configuration details about the repository, including the URL where the repository is located, the default branch, and the Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that contains the credentials used to access the repository.
    public var gitConfig: SageMakerClientTypes.GitConfig?
    /// The date and time that the repository was last changed.
    /// This member is required.
    public var lastModifiedTime: Foundation.Date?

    public init(
        codeRepositoryArn: Swift.String? = nil,
        codeRepositoryName: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        gitConfig: SageMakerClientTypes.GitConfig? = nil,
        lastModifiedTime: Foundation.Date? = nil
    )
    {
        self.codeRepositoryArn = codeRepositoryArn
        self.codeRepositoryName = codeRepositoryName
        self.creationTime = creationTime
        self.gitConfig = gitConfig
        self.lastModifiedTime = lastModifiedTime
    }
}

public struct DescribeCompilationJobInput {
    /// The name of the model compilation job that you want information about.
    /// This member is required.
    public var compilationJobName: Swift.String?

    public init(
        compilationJobName: Swift.String? = nil
    )
    {
        self.compilationJobName = compilationJobName
    }
}

extension SageMakerClientTypes {
    /// Provides information about the location that is configured for storing model artifacts. Model artifacts are outputs that result from training a model. They typically consist of trained parameters, a model definition that describes how to compute inferences, and other metadata. A SageMaker container stores your trained model artifacts in the /opt/ml/model directory. After training has completed, by default, these artifacts are uploaded to your Amazon S3 bucket as compressed files.
    public struct ModelArtifacts {
        /// The path of the S3 object that contains the model artifacts. For example, s3://bucket-name/keynameprefix/model.tar.gz.
        /// This member is required.
        public var s3ModelArtifacts: Swift.String?

        public init(
            s3ModelArtifacts: Swift.String? = nil
        )
        {
            self.s3ModelArtifacts = s3ModelArtifacts
        }
    }

}

extension SageMakerClientTypes {
    /// Provides information to verify the integrity of stored model artifacts.
    public struct ModelDigests {
        /// Provides a hash value that uniquely identifies the stored model artifacts.
        public var artifactDigest: Swift.String?

        public init(
            artifactDigest: Swift.String? = nil
        )
        {
            self.artifactDigest = artifactDigest
        }
    }

}

public struct DescribeCompilationJobOutput {
    /// The time when the model compilation job on a compilation job instance ended. For a successful or stopped job, this is when the job's model artifacts have finished uploading. For a failed job, this is when Amazon SageMaker detected that the job failed.
    public var compilationEndTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the model compilation job.
    /// This member is required.
    public var compilationJobArn: Swift.String?
    /// The name of the model compilation job.
    /// This member is required.
    public var compilationJobName: Swift.String?
    /// The status of the model compilation job.
    /// This member is required.
    public var compilationJobStatus: SageMakerClientTypes.CompilationJobStatus?
    /// The time when the model compilation job started the CompilationJob instances. You are billed for the time between this timestamp and the timestamp in the CompilationEndTime field. In Amazon CloudWatch Logs, the start time might be later than this time. That's because it takes time to download the compilation job, which depends on the size of the compilation job container.
    public var compilationStartTime: Foundation.Date?
    /// The time that the model compilation job was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// Information that SageMaker Neo automatically derived about the model.
    public var derivedInformation: SageMakerClientTypes.DerivedInformation?
    /// If a model compilation job failed, the reason it failed.
    /// This member is required.
    public var failureReason: Swift.String?
    /// The inference image to use when compiling a model. Specify an image only if the target device is a cloud instance.
    public var inferenceImage: Swift.String?
    /// Information about the location in Amazon S3 of the input model artifacts, the name and shape of the expected data inputs, and the framework in which the model was trained.
    /// This member is required.
    public var inputConfig: SageMakerClientTypes.InputConfig?
    /// The time that the status of the model compilation job was last modified.
    /// This member is required.
    public var lastModifiedTime: Foundation.Date?
    /// Information about the location in Amazon S3 that has been configured for storing the model artifacts used in the compilation job.
    /// This member is required.
    public var modelArtifacts: SageMakerClientTypes.ModelArtifacts?
    /// Provides a BLAKE2 hash value that identifies the compiled model artifacts in Amazon S3.
    public var modelDigests: SageMakerClientTypes.ModelDigests?
    /// The Amazon Resource Name (ARN) of the versioned model package that was provided to SageMaker Neo when you initiated a compilation job.
    public var modelPackageVersionArn: Swift.String?
    /// Information about the output location for the compiled model and the target device that the model runs on.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.OutputConfig?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker assumes to perform the model compilation job.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Specifies a limit to how long a model compilation job can run. When the job reaches the time limit, Amazon SageMaker ends the compilation job. Use this API to cap model training costs.
    /// This member is required.
    public var stoppingCondition: SageMakerClientTypes.StoppingCondition?
    /// A [VpcConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html) object that specifies the VPC that you want your compilation job to connect to. Control access to your models by configuring the VPC. For more information, see [Protect Compilation Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/neo-vpc.html).
    public var vpcConfig: SageMakerClientTypes.NeoVpcConfig?

    public init(
        compilationEndTime: Foundation.Date? = nil,
        compilationJobArn: Swift.String? = nil,
        compilationJobName: Swift.String? = nil,
        compilationJobStatus: SageMakerClientTypes.CompilationJobStatus? = nil,
        compilationStartTime: Foundation.Date? = nil,
        creationTime: Foundation.Date? = nil,
        derivedInformation: SageMakerClientTypes.DerivedInformation? = nil,
        failureReason: Swift.String? = nil,
        inferenceImage: Swift.String? = nil,
        inputConfig: SageMakerClientTypes.InputConfig? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        modelArtifacts: SageMakerClientTypes.ModelArtifacts? = nil,
        modelDigests: SageMakerClientTypes.ModelDigests? = nil,
        modelPackageVersionArn: Swift.String? = nil,
        outputConfig: SageMakerClientTypes.OutputConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.StoppingCondition? = nil,
        vpcConfig: SageMakerClientTypes.NeoVpcConfig? = nil
    )
    {
        self.compilationEndTime = compilationEndTime
        self.compilationJobArn = compilationJobArn
        self.compilationJobName = compilationJobName
        self.compilationJobStatus = compilationJobStatus
        self.compilationStartTime = compilationStartTime
        self.creationTime = creationTime
        self.derivedInformation = derivedInformation
        self.failureReason = failureReason
        self.inferenceImage = inferenceImage
        self.inputConfig = inputConfig
        self.lastModifiedTime = lastModifiedTime
        self.modelArtifacts = modelArtifacts
        self.modelDigests = modelDigests
        self.modelPackageVersionArn = modelPackageVersionArn
        self.outputConfig = outputConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
        self.vpcConfig = vpcConfig
    }
}

public struct DescribeContextInput {
    /// The name of the context to describe.
    /// This member is required.
    public var contextName: Swift.String?

    public init(
        contextName: Swift.String? = nil
    )
    {
        self.contextName = contextName
    }
}

public struct DescribeContextOutput {
    /// The Amazon Resource Name (ARN) of the context.
    public var contextArn: Swift.String?
    /// The name of the context.
    public var contextName: Swift.String?
    /// The type of the context.
    public var contextType: Swift.String?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// When the context was created.
    public var creationTime: Foundation.Date?
    /// The description of the context.
    public var description: Swift.String?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// When the context was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the lineage group.
    public var lineageGroupArn: Swift.String?
    /// A list of the context's properties.
    public var properties: [Swift.String: Swift.String]?
    /// The source of the context.
    public var source: SageMakerClientTypes.ContextSource?

    public init(
        contextArn: Swift.String? = nil,
        contextName: Swift.String? = nil,
        contextType: Swift.String? = nil,
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        lineageGroupArn: Swift.String? = nil,
        properties: [Swift.String: Swift.String]? = nil,
        source: SageMakerClientTypes.ContextSource? = nil
    )
    {
        self.contextArn = contextArn
        self.contextName = contextName
        self.contextType = contextType
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.description = description
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.lineageGroupArn = lineageGroupArn
        self.properties = properties
        self.source = source
    }
}

public struct DescribeDataQualityJobDefinitionInput {
    /// The name of the data quality monitoring job definition to describe.
    /// This member is required.
    public var jobDefinitionName: Swift.String?

    public init(
        jobDefinitionName: Swift.String? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
    }
}

public struct DescribeDataQualityJobDefinitionOutput {
    /// The time that the data quality monitoring job definition was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// Information about the container that runs the data quality monitoring job.
    /// This member is required.
    public var dataQualityAppSpecification: SageMakerClientTypes.DataQualityAppSpecification?
    /// The constraints and baselines for the data quality monitoring job definition.
    public var dataQualityBaselineConfig: SageMakerClientTypes.DataQualityBaselineConfig?
    /// The list of inputs for the data quality monitoring job. Currently endpoints are supported.
    /// This member is required.
    public var dataQualityJobInput: SageMakerClientTypes.DataQualityJobInput?
    /// The output configuration for monitoring jobs.
    /// This member is required.
    public var dataQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    /// The Amazon Resource Name (ARN) of the data quality monitoring job definition.
    /// This member is required.
    public var jobDefinitionArn: Swift.String?
    /// The name of the data quality monitoring job definition.
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// Identifies the resources to deploy for a monitoring job.
    /// This member is required.
    public var jobResources: SageMakerClientTypes.MonitoringResources?
    /// The networking configuration for the data quality monitoring job.
    public var networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A time limit for how long the monitoring job is allowed to run before stopping.
    public var stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?

    public init(
        creationTime: Foundation.Date? = nil,
        dataQualityAppSpecification: SageMakerClientTypes.DataQualityAppSpecification? = nil,
        dataQualityBaselineConfig: SageMakerClientTypes.DataQualityBaselineConfig? = nil,
        dataQualityJobInput: SageMakerClientTypes.DataQualityJobInput? = nil,
        dataQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig? = nil,
        jobDefinitionArn: Swift.String? = nil,
        jobDefinitionName: Swift.String? = nil,
        jobResources: SageMakerClientTypes.MonitoringResources? = nil,
        networkConfig: SageMakerClientTypes.MonitoringNetworkConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition? = nil
    )
    {
        self.creationTime = creationTime
        self.dataQualityAppSpecification = dataQualityAppSpecification
        self.dataQualityBaselineConfig = dataQualityBaselineConfig
        self.dataQualityJobInput = dataQualityJobInput
        self.dataQualityJobOutputConfig = dataQualityJobOutputConfig
        self.jobDefinitionArn = jobDefinitionArn
        self.jobDefinitionName = jobDefinitionName
        self.jobResources = jobResources
        self.networkConfig = networkConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
    }
}

public struct DescribeDeviceInput {
    /// The name of the fleet the devices belong to.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// The unique ID of the device.
    /// This member is required.
    public var deviceName: Swift.String?
    /// Next token of device description.
    public var nextToken: Swift.String?

    public init(
        deviceFleetName: Swift.String? = nil,
        deviceName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deviceFleetName = deviceFleetName
        self.deviceName = deviceName
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {
    /// The model on the edge device.
    public struct EdgeModel {
        /// The timestamp of the last inference that was made.
        public var latestInference: Foundation.Date?
        /// The timestamp of the last data sample taken.
        public var latestSampleTime: Foundation.Date?
        /// The name of the model.
        /// This member is required.
        public var modelName: Swift.String?
        /// The model version.
        /// This member is required.
        public var modelVersion: Swift.String?

        public init(
            latestInference: Foundation.Date? = nil,
            latestSampleTime: Foundation.Date? = nil,
            modelName: Swift.String? = nil,
            modelVersion: Swift.String? = nil
        )
        {
            self.latestInference = latestInference
            self.latestSampleTime = latestSampleTime
            self.modelName = modelName
            self.modelVersion = modelVersion
        }
    }

}

public struct DescribeDeviceOutput {
    /// Edge Manager agent version.
    public var agentVersion: Swift.String?
    /// A description of the device.
    public var description: Swift.String?
    /// The Amazon Resource Name (ARN) of the device.
    public var deviceArn: Swift.String?
    /// The name of the fleet the device belongs to.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// The unique identifier of the device.
    /// This member is required.
    public var deviceName: Swift.String?
    /// The Amazon Web Services Internet of Things (IoT) object thing name associated with the device.
    public var iotThingName: Swift.String?
    /// The last heartbeat received from the device.
    public var latestHeartbeat: Foundation.Date?
    /// The maximum number of models.
    public var maxModels: Swift.Int?
    /// Models on the device.
    public var models: [SageMakerClientTypes.EdgeModel]?
    /// The response from the last list when returning a list large enough to need tokening.
    public var nextToken: Swift.String?
    /// The timestamp of the last registration or de-reregistration.
    /// This member is required.
    public var registrationTime: Foundation.Date?

    public init(
        agentVersion: Swift.String? = nil,
        description: Swift.String? = nil,
        deviceArn: Swift.String? = nil,
        deviceFleetName: Swift.String? = nil,
        deviceName: Swift.String? = nil,
        iotThingName: Swift.String? = nil,
        latestHeartbeat: Foundation.Date? = nil,
        maxModels: Swift.Int? = nil,
        models: [SageMakerClientTypes.EdgeModel]? = nil,
        nextToken: Swift.String? = nil,
        registrationTime: Foundation.Date? = nil
    )
    {
        self.agentVersion = agentVersion
        self.description = description
        self.deviceArn = deviceArn
        self.deviceFleetName = deviceFleetName
        self.deviceName = deviceName
        self.iotThingName = iotThingName
        self.latestHeartbeat = latestHeartbeat
        self.maxModels = maxModels
        self.models = models
        self.nextToken = nextToken
        self.registrationTime = registrationTime
    }
}

public struct DescribeDeviceFleetInput {
    /// The name of the fleet.
    /// This member is required.
    public var deviceFleetName: Swift.String?

    public init(
        deviceFleetName: Swift.String? = nil
    )
    {
        self.deviceFleetName = deviceFleetName
    }
}

public struct DescribeDeviceFleetOutput {
    /// Timestamp of when the device fleet was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// A description of the fleet.
    public var description: Swift.String?
    /// The The Amazon Resource Name (ARN) of the fleet.
    /// This member is required.
    public var deviceFleetArn: Swift.String?
    /// The name of the fleet.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// The Amazon Resource Name (ARN) alias created in Amazon Web Services Internet of Things (IoT).
    public var iotRoleAlias: Swift.String?
    /// Timestamp of when the device fleet was last updated.
    /// This member is required.
    public var lastModifiedTime: Foundation.Date?
    /// The output configuration for storing sampled data.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.EdgeOutputConfig?
    /// The Amazon Resource Name (ARN) that has access to Amazon Web Services Internet of Things (IoT).
    public var roleArn: Swift.String?

    public init(
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        deviceFleetArn: Swift.String? = nil,
        deviceFleetName: Swift.String? = nil,
        iotRoleAlias: Swift.String? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        outputConfig: SageMakerClientTypes.EdgeOutputConfig? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.description = description
        self.deviceFleetArn = deviceFleetArn
        self.deviceFleetName = deviceFleetName
        self.iotRoleAlias = iotRoleAlias
        self.lastModifiedTime = lastModifiedTime
        self.outputConfig = outputConfig
        self.roleArn = roleArn
    }
}

public struct DescribeDomainInput {
    /// The domain ID.
    /// This member is required.
    public var domainId: Swift.String?

    public init(
        domainId: Swift.String? = nil
    )
    {
        self.domainId = domainId
    }
}

extension SageMakerClientTypes {

    public enum DomainStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleteFailed
        case deleting
        case failed
        case inservice
        case pending
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [DomainStatus] {
            return [
                .deleteFailed,
                .deleting,
                .failed,
                .inservice,
                .pending,
                .updateFailed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleteFailed: return "Delete_Failed"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inservice: return "InService"
            case .pending: return "Pending"
            case .updateFailed: return "Update_Failed"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeDomainOutput {
    /// Specifies the VPC used for non-EFS traffic. The default value is PublicInternetOnly.
    ///
    /// * PublicInternetOnly - Non-EFS traffic is through a VPC managed by Amazon SageMaker, which allows direct internet access
    ///
    /// * VpcOnly - All traffic is through the specified VPC and subnets
    public var appNetworkAccessType: SageMakerClientTypes.AppNetworkAccessType?
    /// The entity that creates and manages the required security groups for inter-app communication in VPCOnly mode. Required when CreateDomain.AppNetworkAccessType is VPCOnly and DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn is provided.
    public var appSecurityGroupManagement: SageMakerClientTypes.AppSecurityGroupManagement?
    /// The domain's authentication mode.
    public var authMode: SageMakerClientTypes.AuthMode?
    /// The creation time.
    public var creationTime: Foundation.Date?
    /// The default settings used to create a space.
    public var defaultSpaceSettings: SageMakerClientTypes.DefaultSpaceSettings?
    /// Settings which are applied to UserProfiles in this domain if settings are not explicitly specified in a given UserProfile.
    public var defaultUserSettings: SageMakerClientTypes.UserSettings?
    /// The domain's Amazon Resource Name (ARN).
    public var domainArn: Swift.String?
    /// The domain ID.
    public var domainId: Swift.String?
    /// The domain name.
    public var domainName: Swift.String?
    /// A collection of Domain settings.
    public var domainSettings: SageMakerClientTypes.DomainSettings?
    /// The failure reason.
    public var failureReason: Swift.String?
    /// The ID of the Amazon Elastic File System managed by this Domain.
    public var homeEfsFileSystemId: Swift.String?
    /// Use KmsKeyId.
    @available(*, deprecated, message: "This property is deprecated, use KmsKeyId instead.")
    public var homeEfsFileSystemKmsKeyId: Swift.String?
    /// The Amazon Web Services KMS customer managed key used to encrypt the EFS volume attached to the domain.
    public var kmsKeyId: Swift.String?
    /// The last modified time.
    public var lastModifiedTime: Foundation.Date?
    /// The ID of the security group that authorizes traffic between the RSessionGateway apps and the RStudioServerPro app.
    public var securityGroupIdForDomainBoundary: Swift.String?
    /// The ARN of the application managed by SageMaker in IAM Identity Center. This value is only returned for domains created after October 1, 2023.
    public var singleSignOnApplicationArn: Swift.String?
    /// The IAM Identity Center managed application instance ID.
    public var singleSignOnManagedApplicationInstanceId: Swift.String?
    /// The status.
    public var status: SageMakerClientTypes.DomainStatus?
    /// The VPC subnets that the domain uses for communication.
    public var subnetIds: [Swift.String]?
    /// The domain's URL.
    public var url: Swift.String?
    /// The ID of the Amazon Virtual Private Cloud (VPC) that the domain uses for communication.
    public var vpcId: Swift.String?

    public init(
        appNetworkAccessType: SageMakerClientTypes.AppNetworkAccessType? = nil,
        appSecurityGroupManagement: SageMakerClientTypes.AppSecurityGroupManagement? = nil,
        authMode: SageMakerClientTypes.AuthMode? = nil,
        creationTime: Foundation.Date? = nil,
        defaultSpaceSettings: SageMakerClientTypes.DefaultSpaceSettings? = nil,
        defaultUserSettings: SageMakerClientTypes.UserSettings? = nil,
        domainArn: Swift.String? = nil,
        domainId: Swift.String? = nil,
        domainName: Swift.String? = nil,
        domainSettings: SageMakerClientTypes.DomainSettings? = nil,
        failureReason: Swift.String? = nil,
        homeEfsFileSystemId: Swift.String? = nil,
        homeEfsFileSystemKmsKeyId: Swift.String? = nil,
        kmsKeyId: Swift.String? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        securityGroupIdForDomainBoundary: Swift.String? = nil,
        singleSignOnApplicationArn: Swift.String? = nil,
        singleSignOnManagedApplicationInstanceId: Swift.String? = nil,
        status: SageMakerClientTypes.DomainStatus? = nil,
        subnetIds: [Swift.String]? = nil,
        url: Swift.String? = nil,
        vpcId: Swift.String? = nil
    )
    {
        self.appNetworkAccessType = appNetworkAccessType
        self.appSecurityGroupManagement = appSecurityGroupManagement
        self.authMode = authMode
        self.creationTime = creationTime
        self.defaultSpaceSettings = defaultSpaceSettings
        self.defaultUserSettings = defaultUserSettings
        self.domainArn = domainArn
        self.domainId = domainId
        self.domainName = domainName
        self.domainSettings = domainSettings
        self.failureReason = failureReason
        self.homeEfsFileSystemId = homeEfsFileSystemId
        self.homeEfsFileSystemKmsKeyId = homeEfsFileSystemKmsKeyId
        self.kmsKeyId = kmsKeyId
        self.lastModifiedTime = lastModifiedTime
        self.securityGroupIdForDomainBoundary = securityGroupIdForDomainBoundary
        self.singleSignOnApplicationArn = singleSignOnApplicationArn
        self.singleSignOnManagedApplicationInstanceId = singleSignOnManagedApplicationInstanceId
        self.status = status
        self.subnetIds = subnetIds
        self.url = url
        self.vpcId = vpcId
    }
}

public struct DescribeEdgeDeploymentPlanInput {
    /// The name of the deployment plan to describe.
    /// This member is required.
    public var edgeDeploymentPlanName: Swift.String?
    /// The maximum number of results to select (50 by default).
    public var maxResults: Swift.Int?
    /// If the edge deployment plan has enough stages to require tokening, then this is the response from the last list of stages returned.
    public var nextToken: Swift.String?

    public init(
        edgeDeploymentPlanName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.edgeDeploymentPlanName = edgeDeploymentPlanName
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct DescribeEdgeDeploymentPlanOutput {
    /// The time when the edge deployment plan was created.
    public var creationTime: Foundation.Date?
    /// The device fleet used for this edge deployment plan.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// The number of edge devices that failed the deployment.
    public var edgeDeploymentFailed: Swift.Int?
    /// The number of edge devices yet to pick up deployment, or in progress.
    public var edgeDeploymentPending: Swift.Int?
    /// The ARN of edge deployment plan.
    /// This member is required.
    public var edgeDeploymentPlanArn: Swift.String?
    /// The name of the edge deployment plan.
    /// This member is required.
    public var edgeDeploymentPlanName: Swift.String?
    /// The number of edge devices with the successful deployment.
    public var edgeDeploymentSuccess: Swift.Int?
    /// The time when the edge deployment plan was last updated.
    public var lastModifiedTime: Foundation.Date?
    /// List of models associated with the edge deployment plan.
    /// This member is required.
    public var modelConfigs: [SageMakerClientTypes.EdgeDeploymentModelConfig]?
    /// Token to use when calling the next set of stages in the edge deployment plan.
    public var nextToken: Swift.String?
    /// List of stages in the edge deployment plan.
    /// This member is required.
    public var stages: [SageMakerClientTypes.DeploymentStageStatusSummary]?

    public init(
        creationTime: Foundation.Date? = nil,
        deviceFleetName: Swift.String? = nil,
        edgeDeploymentFailed: Swift.Int? = nil,
        edgeDeploymentPending: Swift.Int? = nil,
        edgeDeploymentPlanArn: Swift.String? = nil,
        edgeDeploymentPlanName: Swift.String? = nil,
        edgeDeploymentSuccess: Swift.Int? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        modelConfigs: [SageMakerClientTypes.EdgeDeploymentModelConfig]? = nil,
        nextToken: Swift.String? = nil,
        stages: [SageMakerClientTypes.DeploymentStageStatusSummary]? = nil
    )
    {
        self.creationTime = creationTime
        self.deviceFleetName = deviceFleetName
        self.edgeDeploymentFailed = edgeDeploymentFailed
        self.edgeDeploymentPending = edgeDeploymentPending
        self.edgeDeploymentPlanArn = edgeDeploymentPlanArn
        self.edgeDeploymentPlanName = edgeDeploymentPlanName
        self.edgeDeploymentSuccess = edgeDeploymentSuccess
        self.lastModifiedTime = lastModifiedTime
        self.modelConfigs = modelConfigs
        self.nextToken = nextToken
        self.stages = stages
    }
}

public struct DescribeEdgePackagingJobInput {
    /// The name of the edge packaging job.
    /// This member is required.
    public var edgePackagingJobName: Swift.String?

    public init(
        edgePackagingJobName: Swift.String? = nil
    )
    {
        self.edgePackagingJobName = edgePackagingJobName
    }
}

extension SageMakerClientTypes {

    public enum EdgePackagingJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inprogress
        case starting
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [EdgePackagingJobStatus] {
            return [
                .completed,
                .failed,
                .inprogress,
                .starting,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inprogress: return "INPROGRESS"
            case .starting: return "STARTING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum EdgePresetDeploymentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [EdgePresetDeploymentStatus] {
            return [
                .completed,
                .failed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The output of a SageMaker Edge Manager deployable resource.
    public struct EdgePresetDeploymentOutput {
        /// The Amazon Resource Name (ARN) of the generated deployable resource.
        public var artifact: Swift.String?
        /// The status of the deployable resource.
        public var status: SageMakerClientTypes.EdgePresetDeploymentStatus?
        /// Returns a message describing the status of the deployed resource.
        public var statusMessage: Swift.String?
        /// The deployment type created by SageMaker Edge Manager. Currently only supports Amazon Web Services IoT Greengrass Version 2 components.
        /// This member is required.
        public var type: SageMakerClientTypes.EdgePresetDeploymentType?

        public init(
            artifact: Swift.String? = nil,
            status: SageMakerClientTypes.EdgePresetDeploymentStatus? = nil,
            statusMessage: Swift.String? = nil,
            type: SageMakerClientTypes.EdgePresetDeploymentType? = nil
        )
        {
            self.artifact = artifact
            self.status = status
            self.statusMessage = statusMessage
            self.type = type
        }
    }

}

public struct DescribeEdgePackagingJobOutput {
    /// The name of the SageMaker Neo compilation job that is used to locate model artifacts that are being packaged.
    public var compilationJobName: Swift.String?
    /// The timestamp of when the packaging job was created.
    public var creationTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the edge packaging job.
    /// This member is required.
    public var edgePackagingJobArn: Swift.String?
    /// The name of the edge packaging job.
    /// This member is required.
    public var edgePackagingJobName: Swift.String?
    /// The current status of the packaging job.
    /// This member is required.
    public var edgePackagingJobStatus: SageMakerClientTypes.EdgePackagingJobStatus?
    /// Returns a message describing the job status and error messages.
    public var edgePackagingJobStatusMessage: Swift.String?
    /// The timestamp of when the job was last updated.
    public var lastModifiedTime: Foundation.Date?
    /// The Amazon Simple Storage (S3) URI where model artifacts ares stored.
    public var modelArtifact: Swift.String?
    /// The name of the model.
    public var modelName: Swift.String?
    /// The signature document of files in the model artifact.
    public var modelSignature: Swift.String?
    /// The version of the model.
    public var modelVersion: Swift.String?
    /// The output configuration for the edge packaging job.
    public var outputConfig: SageMakerClientTypes.EdgeOutputConfig?
    /// The output of a SageMaker Edge Manager deployable resource.
    public var presetDeploymentOutput: SageMakerClientTypes.EdgePresetDeploymentOutput?
    /// The Amazon Web Services KMS key to use when encrypting the EBS volume the job run on.
    public var resourceKey: Swift.String?
    /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to download and upload the model, and to contact Neo.
    public var roleArn: Swift.String?

    public init(
        compilationJobName: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        edgePackagingJobArn: Swift.String? = nil,
        edgePackagingJobName: Swift.String? = nil,
        edgePackagingJobStatus: SageMakerClientTypes.EdgePackagingJobStatus? = nil,
        edgePackagingJobStatusMessage: Swift.String? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        modelArtifact: Swift.String? = nil,
        modelName: Swift.String? = nil,
        modelSignature: Swift.String? = nil,
        modelVersion: Swift.String? = nil,
        outputConfig: SageMakerClientTypes.EdgeOutputConfig? = nil,
        presetDeploymentOutput: SageMakerClientTypes.EdgePresetDeploymentOutput? = nil,
        resourceKey: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.compilationJobName = compilationJobName
        self.creationTime = creationTime
        self.edgePackagingJobArn = edgePackagingJobArn
        self.edgePackagingJobName = edgePackagingJobName
        self.edgePackagingJobStatus = edgePackagingJobStatus
        self.edgePackagingJobStatusMessage = edgePackagingJobStatusMessage
        self.lastModifiedTime = lastModifiedTime
        self.modelArtifact = modelArtifact
        self.modelName = modelName
        self.modelSignature = modelSignature
        self.modelVersion = modelVersion
        self.outputConfig = outputConfig
        self.presetDeploymentOutput = presetDeploymentOutput
        self.resourceKey = resourceKey
        self.roleArn = roleArn
    }
}

public struct DescribeEndpointInput {
    /// The name of the endpoint.
    /// This member is required.
    public var endpointName: Swift.String?

    public init(
        endpointName: Swift.String? = nil
    )
    {
        self.endpointName = endpointName
    }
}

extension SageMakerClientTypes {

    public enum EndpointStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creating
        case deleting
        case failed
        case inService
        case outOfService
        case rollingBack
        case systemUpdating
        case updateRollbackFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointStatus] {
            return [
                .creating,
                .deleting,
                .failed,
                .inService,
                .outOfService,
                .rollingBack,
                .systemUpdating,
                .updateRollbackFailed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creating: return "Creating"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inService: return "InService"
            case .outOfService: return "OutOfService"
            case .rollingBack: return "RollingBack"
            case .systemUpdating: return "SystemUpdating"
            case .updateRollbackFailed: return "UpdateRollbackFailed"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum VariantStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case activatingTraffic
        case baking
        case creating
        case deleting
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [VariantStatus] {
            return [
                .activatingTraffic,
                .baking,
                .creating,
                .deleting,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .activatingTraffic: return "ActivatingTraffic"
            case .baking: return "Baking"
            case .creating: return "Creating"
            case .deleting: return "Deleting"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Describes the status of the production variant.
    public struct ProductionVariantStatus {
        /// The start time of the current status change.
        public var startTime: Foundation.Date?
        /// The endpoint variant status which describes the current deployment stage status or operational status.
        ///
        /// * Creating: Creating inference resources for the production variant.
        ///
        /// * Deleting: Terminating inference resources for the production variant.
        ///
        /// * Updating: Updating capacity for the production variant.
        ///
        /// * ActivatingTraffic: Turning on traffic for the production variant.
        ///
        /// * Baking: Waiting period to monitor the CloudWatch alarms in the automatic rollback configuration.
        /// This member is required.
        public var status: SageMakerClientTypes.VariantStatus?
        /// A message that describes the status of the production variant.
        public var statusMessage: Swift.String?

        public init(
            startTime: Foundation.Date? = nil,
            status: SageMakerClientTypes.VariantStatus? = nil,
            statusMessage: Swift.String? = nil
        )
        {
            self.startTime = startTime
            self.status = status
            self.statusMessage = statusMessage
        }
    }

}

extension SageMakerClientTypes {
    /// The production variant summary for a deployment when an endpoint is creating or updating with the [CreateEndpoint](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html) or [UpdateEndpoint](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html) operations. Describes the VariantStatus , weight and capacity for a production variant associated with an endpoint.
    public struct PendingProductionVariantSummary {
        /// The size of the Elastic Inference (EI) instance to use for the production variant. EI instances provide on-demand GPU computing for inference. For more information, see [Using Elastic Inference in Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html).
        public var acceleratorType: SageMakerClientTypes.ProductionVariantAcceleratorType?
        /// The number of instances associated with the variant.
        public var currentInstanceCount: Swift.Int?
        /// The serverless configuration for the endpoint.
        public var currentServerlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig?
        /// The weight associated with the variant.
        public var currentWeight: Swift.Float?
        /// An array of DeployedImage objects that specify the Amazon EC2 Container Registry paths of the inference images deployed on instances of this ProductionVariant.
        public var deployedImages: [SageMakerClientTypes.DeployedImage]?
        /// The number of instances requested in this deployment, as specified in the endpoint configuration for the endpoint. The value is taken from the request to the [CreateEndpointConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html) operation.
        public var desiredInstanceCount: Swift.Int?
        /// The serverless configuration requested for this deployment, as specified in the endpoint configuration for the endpoint.
        public var desiredServerlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig?
        /// The requested weight for the variant in this deployment, as specified in the endpoint configuration for the endpoint. The value is taken from the request to the [CreateEndpointConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html) operation.
        public var desiredWeight: Swift.Float?
        /// The type of instances associated with the variant.
        public var instanceType: SageMakerClientTypes.ProductionVariantInstanceType?
        /// Settings that control the range in the number of instances that the endpoint provisions as it scales up or down to accommodate traffic.
        public var managedInstanceScaling: SageMakerClientTypes.ProductionVariantManagedInstanceScaling?
        /// Settings that control how the endpoint routes incoming traffic to the instances that the endpoint hosts.
        public var routingConfig: SageMakerClientTypes.ProductionVariantRoutingConfig?
        /// The name of the variant.
        /// This member is required.
        public var variantName: Swift.String?
        /// The endpoint variant status which describes the current deployment stage status or operational status.
        public var variantStatus: [SageMakerClientTypes.ProductionVariantStatus]?

        public init(
            acceleratorType: SageMakerClientTypes.ProductionVariantAcceleratorType? = nil,
            currentInstanceCount: Swift.Int? = nil,
            currentServerlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig? = nil,
            currentWeight: Swift.Float? = nil,
            deployedImages: [SageMakerClientTypes.DeployedImage]? = nil,
            desiredInstanceCount: Swift.Int? = nil,
            desiredServerlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig? = nil,
            desiredWeight: Swift.Float? = nil,
            instanceType: SageMakerClientTypes.ProductionVariantInstanceType? = nil,
            managedInstanceScaling: SageMakerClientTypes.ProductionVariantManagedInstanceScaling? = nil,
            routingConfig: SageMakerClientTypes.ProductionVariantRoutingConfig? = nil,
            variantName: Swift.String? = nil,
            variantStatus: [SageMakerClientTypes.ProductionVariantStatus]? = nil
        )
        {
            self.acceleratorType = acceleratorType
            self.currentInstanceCount = currentInstanceCount
            self.currentServerlessConfig = currentServerlessConfig
            self.currentWeight = currentWeight
            self.deployedImages = deployedImages
            self.desiredInstanceCount = desiredInstanceCount
            self.desiredServerlessConfig = desiredServerlessConfig
            self.desiredWeight = desiredWeight
            self.instanceType = instanceType
            self.managedInstanceScaling = managedInstanceScaling
            self.routingConfig = routingConfig
            self.variantName = variantName
            self.variantStatus = variantStatus
        }
    }

}

extension SageMakerClientTypes {
    /// The summary of an in-progress deployment when an endpoint is creating or updating with a new endpoint configuration.
    public struct PendingDeploymentSummary {
        /// The name of the endpoint configuration used in the deployment.
        /// This member is required.
        public var endpointConfigName: Swift.String?
        /// An array of [PendingProductionVariantSummary](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_PendingProductionVariantSummary.html) objects, one for each model hosted behind this endpoint for the in-progress deployment.
        public var productionVariants: [SageMakerClientTypes.PendingProductionVariantSummary]?
        /// An array of [PendingProductionVariantSummary](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_PendingProductionVariantSummary.html) objects, one for each model hosted behind this endpoint in shadow mode with production traffic replicated from the model specified on ProductionVariants for the in-progress deployment.
        public var shadowProductionVariants: [SageMakerClientTypes.PendingProductionVariantSummary]?
        /// The start time of the deployment.
        public var startTime: Foundation.Date?

        public init(
            endpointConfigName: Swift.String? = nil,
            productionVariants: [SageMakerClientTypes.PendingProductionVariantSummary]? = nil,
            shadowProductionVariants: [SageMakerClientTypes.PendingProductionVariantSummary]? = nil,
            startTime: Foundation.Date? = nil
        )
        {
            self.endpointConfigName = endpointConfigName
            self.productionVariants = productionVariants
            self.shadowProductionVariants = shadowProductionVariants
            self.startTime = startTime
        }
    }

}

extension SageMakerClientTypes {
    /// Describes weight and capacities for a production variant associated with an endpoint. If you sent a request to the UpdateEndpointWeightsAndCapacities API and the endpoint status is Updating, you get different desired and current values.
    public struct ProductionVariantSummary {
        /// The number of instances associated with the variant.
        public var currentInstanceCount: Swift.Int?
        /// The serverless configuration for the endpoint.
        public var currentServerlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig?
        /// The weight associated with the variant.
        public var currentWeight: Swift.Float?
        /// An array of DeployedImage objects that specify the Amazon EC2 Container Registry paths of the inference images deployed on instances of this ProductionVariant.
        public var deployedImages: [SageMakerClientTypes.DeployedImage]?
        /// The number of instances requested in the UpdateEndpointWeightsAndCapacities request.
        public var desiredInstanceCount: Swift.Int?
        /// The serverless configuration requested for the endpoint update.
        public var desiredServerlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig?
        /// The requested weight, as specified in the UpdateEndpointWeightsAndCapacities request.
        public var desiredWeight: Swift.Float?
        /// Settings that control the range in the number of instances that the endpoint provisions as it scales up or down to accommodate traffic.
        public var managedInstanceScaling: SageMakerClientTypes.ProductionVariantManagedInstanceScaling?
        /// Settings that control how the endpoint routes incoming traffic to the instances that the endpoint hosts.
        public var routingConfig: SageMakerClientTypes.ProductionVariantRoutingConfig?
        /// The name of the variant.
        /// This member is required.
        public var variantName: Swift.String?
        /// The endpoint variant status which describes the current deployment stage status or operational status.
        public var variantStatus: [SageMakerClientTypes.ProductionVariantStatus]?

        public init(
            currentInstanceCount: Swift.Int? = nil,
            currentServerlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig? = nil,
            currentWeight: Swift.Float? = nil,
            deployedImages: [SageMakerClientTypes.DeployedImage]? = nil,
            desiredInstanceCount: Swift.Int? = nil,
            desiredServerlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig? = nil,
            desiredWeight: Swift.Float? = nil,
            managedInstanceScaling: SageMakerClientTypes.ProductionVariantManagedInstanceScaling? = nil,
            routingConfig: SageMakerClientTypes.ProductionVariantRoutingConfig? = nil,
            variantName: Swift.String? = nil,
            variantStatus: [SageMakerClientTypes.ProductionVariantStatus]? = nil
        )
        {
            self.currentInstanceCount = currentInstanceCount
            self.currentServerlessConfig = currentServerlessConfig
            self.currentWeight = currentWeight
            self.deployedImages = deployedImages
            self.desiredInstanceCount = desiredInstanceCount
            self.desiredServerlessConfig = desiredServerlessConfig
            self.desiredWeight = desiredWeight
            self.managedInstanceScaling = managedInstanceScaling
            self.routingConfig = routingConfig
            self.variantName = variantName
            self.variantStatus = variantStatus
        }
    }

}

public struct DescribeEndpointOutput {
    /// Returns the description of an endpoint configuration created using the [CreateEndpointConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html) API.
    public var asyncInferenceConfig: SageMakerClientTypes.AsyncInferenceConfig?
    /// A timestamp that shows when the endpoint was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The currently active data capture configuration used by your Endpoint.
    public var dataCaptureConfig: SageMakerClientTypes.DataCaptureConfigSummary?
    /// The Amazon Resource Name (ARN) of the endpoint.
    /// This member is required.
    public var endpointArn: Swift.String?
    /// The name of the endpoint configuration associated with this endpoint.
    public var endpointConfigName: Swift.String?
    /// Name of the endpoint.
    /// This member is required.
    public var endpointName: Swift.String?
    /// The status of the endpoint.
    ///
    /// * OutOfService: Endpoint is not available to take incoming requests.
    ///
    /// * Creating: [CreateEndpoint](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html) is executing.
    ///
    /// * Updating: [UpdateEndpoint](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html) or [UpdateEndpointWeightsAndCapacities](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpointWeightsAndCapacities.html) is executing.
    ///
    /// * SystemUpdating: Endpoint is undergoing maintenance and cannot be updated or deleted or re-scaled until it has completed. This maintenance operation does not change any customer-specified values such as VPC config, KMS encryption, model, instance type, or instance count.
    ///
    /// * RollingBack: Endpoint fails to scale up or down or change its variant weight and is in the process of rolling back to its previous configuration. Once the rollback completes, endpoint returns to an InService status. This transitional status only applies to an endpoint that has autoscaling enabled and is undergoing variant weight or capacity changes as part of an [UpdateEndpointWeightsAndCapacities](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpointWeightsAndCapacities.html) call or when the [UpdateEndpointWeightsAndCapacities](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpointWeightsAndCapacities.html) operation is called explicitly.
    ///
    /// * InService: Endpoint is available to process incoming requests.
    ///
    /// * Deleting: [DeleteEndpoint](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteEndpoint.html) is executing.
    ///
    /// * Failed: Endpoint could not be created, updated, or re-scaled. Use the FailureReason value returned by [DescribeEndpoint](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeEndpoint.html) for information about the failure. [DeleteEndpoint](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteEndpoint.html) is the only operation that can be performed on a failed endpoint.
    ///
    /// * UpdateRollbackFailed: Both the rolling deployment and auto-rollback failed. Your endpoint is in service with a mix of the old and new endpoint configurations. For information about how to remedy this issue and restore the endpoint's status to InService, see [Rolling Deployments](https://docs.aws.amazon.com/sagemaker/latest/dg/deployment-guardrails-rolling.html).
    /// This member is required.
    public var endpointStatus: SageMakerClientTypes.EndpointStatus?
    /// The configuration parameters for an explainer.
    public var explainerConfig: SageMakerClientTypes.ExplainerConfig?
    /// If the status of the endpoint is Failed, the reason why it failed.
    public var failureReason: Swift.String?
    /// The most recent deployment configuration for the endpoint.
    public var lastDeploymentConfig: SageMakerClientTypes.DeploymentConfig?
    /// A timestamp that shows when the endpoint was last modified.
    /// This member is required.
    public var lastModifiedTime: Foundation.Date?
    /// Returns the summary of an in-progress deployment. This field is only returned when the endpoint is creating or updating with a new endpoint configuration.
    public var pendingDeploymentSummary: SageMakerClientTypes.PendingDeploymentSummary?
    /// An array of [ProductionVariantSummary](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ProductionVariantSummary.html) objects, one for each model hosted behind this endpoint.
    public var productionVariants: [SageMakerClientTypes.ProductionVariantSummary]?
    /// An array of [ProductionVariantSummary](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ProductionVariantSummary.html) objects, one for each model that you want to host at this endpoint in shadow mode with production traffic replicated from the model specified on ProductionVariants.
    public var shadowProductionVariants: [SageMakerClientTypes.ProductionVariantSummary]?

    public init(
        asyncInferenceConfig: SageMakerClientTypes.AsyncInferenceConfig? = nil,
        creationTime: Foundation.Date? = nil,
        dataCaptureConfig: SageMakerClientTypes.DataCaptureConfigSummary? = nil,
        endpointArn: Swift.String? = nil,
        endpointConfigName: Swift.String? = nil,
        endpointName: Swift.String? = nil,
        endpointStatus: SageMakerClientTypes.EndpointStatus? = nil,
        explainerConfig: SageMakerClientTypes.ExplainerConfig? = nil,
        failureReason: Swift.String? = nil,
        lastDeploymentConfig: SageMakerClientTypes.DeploymentConfig? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        pendingDeploymentSummary: SageMakerClientTypes.PendingDeploymentSummary? = nil,
        productionVariants: [SageMakerClientTypes.ProductionVariantSummary]? = nil,
        shadowProductionVariants: [SageMakerClientTypes.ProductionVariantSummary]? = nil
    )
    {
        self.asyncInferenceConfig = asyncInferenceConfig
        self.creationTime = creationTime
        self.dataCaptureConfig = dataCaptureConfig
        self.endpointArn = endpointArn
        self.endpointConfigName = endpointConfigName
        self.endpointName = endpointName
        self.endpointStatus = endpointStatus
        self.explainerConfig = explainerConfig
        self.failureReason = failureReason
        self.lastDeploymentConfig = lastDeploymentConfig
        self.lastModifiedTime = lastModifiedTime
        self.pendingDeploymentSummary = pendingDeploymentSummary
        self.productionVariants = productionVariants
        self.shadowProductionVariants = shadowProductionVariants
    }
}

public struct DescribeEndpointConfigInput {
    /// The name of the endpoint configuration.
    /// This member is required.
    public var endpointConfigName: Swift.String?

    public init(
        endpointConfigName: Swift.String? = nil
    )
    {
        self.endpointConfigName = endpointConfigName
    }
}

public struct DescribeEndpointConfigOutput {
    /// Returns the description of an endpoint configuration created using the [CreateEndpointConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html) API.
    public var asyncInferenceConfig: SageMakerClientTypes.AsyncInferenceConfig?
    /// A timestamp that shows when the endpoint configuration was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// Configuration to control how SageMaker captures inference data.
    public var dataCaptureConfig: SageMakerClientTypes.DataCaptureConfig?
    /// Indicates whether all model containers deployed to the endpoint are isolated. If they are, no inbound or outbound network calls can be made to or from the model containers.
    public var enableNetworkIsolation: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the endpoint configuration.
    /// This member is required.
    public var endpointConfigArn: Swift.String?
    /// Name of the SageMaker endpoint configuration.
    /// This member is required.
    public var endpointConfigName: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that you assigned to the endpoint configuration.
    public var executionRoleArn: Swift.String?
    /// The configuration parameters for an explainer.
    public var explainerConfig: SageMakerClientTypes.ExplainerConfig?
    /// Amazon Web Services KMS key ID Amazon SageMaker uses to encrypt data when storing it on the ML storage volume attached to the instance.
    public var kmsKeyId: Swift.String?
    /// An array of ProductionVariant objects, one for each model that you want to host at this endpoint.
    /// This member is required.
    public var productionVariants: [SageMakerClientTypes.ProductionVariant]?
    /// An array of ProductionVariant objects, one for each model that you want to host at this endpoint in shadow mode with production traffic replicated from the model specified on ProductionVariants.
    public var shadowProductionVariants: [SageMakerClientTypes.ProductionVariant]?
    /// Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to. You can control access to and from your resources by configuring a VPC. For more information, see [Give SageMaker Access to Resources in your Amazon VPC](https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html).
    public var vpcConfig: SageMakerClientTypes.VpcConfig?

    public init(
        asyncInferenceConfig: SageMakerClientTypes.AsyncInferenceConfig? = nil,
        creationTime: Foundation.Date? = nil,
        dataCaptureConfig: SageMakerClientTypes.DataCaptureConfig? = nil,
        enableNetworkIsolation: Swift.Bool? = nil,
        endpointConfigArn: Swift.String? = nil,
        endpointConfigName: Swift.String? = nil,
        executionRoleArn: Swift.String? = nil,
        explainerConfig: SageMakerClientTypes.ExplainerConfig? = nil,
        kmsKeyId: Swift.String? = nil,
        productionVariants: [SageMakerClientTypes.ProductionVariant]? = nil,
        shadowProductionVariants: [SageMakerClientTypes.ProductionVariant]? = nil,
        vpcConfig: SageMakerClientTypes.VpcConfig? = nil
    )
    {
        self.asyncInferenceConfig = asyncInferenceConfig
        self.creationTime = creationTime
        self.dataCaptureConfig = dataCaptureConfig
        self.enableNetworkIsolation = enableNetworkIsolation
        self.endpointConfigArn = endpointConfigArn
        self.endpointConfigName = endpointConfigName
        self.executionRoleArn = executionRoleArn
        self.explainerConfig = explainerConfig
        self.kmsKeyId = kmsKeyId
        self.productionVariants = productionVariants
        self.shadowProductionVariants = shadowProductionVariants
        self.vpcConfig = vpcConfig
    }
}

public struct DescribeExperimentInput {
    /// The name of the experiment to describe.
    /// This member is required.
    public var experimentName: Swift.String?

    public init(
        experimentName: Swift.String? = nil
    )
    {
        self.experimentName = experimentName
    }
}

extension SageMakerClientTypes {
    /// The source of the experiment.
    public struct ExperimentSource {
        /// The Amazon Resource Name (ARN) of the source.
        /// This member is required.
        public var sourceArn: Swift.String?
        /// The source type.
        public var sourceType: Swift.String?

        public init(
            sourceArn: Swift.String? = nil,
            sourceType: Swift.String? = nil
        )
        {
            self.sourceArn = sourceArn
            self.sourceType = sourceType
        }
    }

}

public struct DescribeExperimentOutput {
    /// Who created the experiment.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// When the experiment was created.
    public var creationTime: Foundation.Date?
    /// The description of the experiment.
    public var description: Swift.String?
    /// The name of the experiment as displayed. If DisplayName isn't specified, ExperimentName is displayed.
    public var displayName: Swift.String?
    /// The Amazon Resource Name (ARN) of the experiment.
    public var experimentArn: Swift.String?
    /// The name of the experiment.
    public var experimentName: Swift.String?
    /// Who last modified the experiment.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// When the experiment was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the source and, optionally, the type.
    public var source: SageMakerClientTypes.ExperimentSource?

    public init(
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        experimentArn: Swift.String? = nil,
        experimentName: Swift.String? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        source: SageMakerClientTypes.ExperimentSource? = nil
    )
    {
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.description = description
        self.displayName = displayName
        self.experimentArn = experimentArn
        self.experimentName = experimentName
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.source = source
    }
}

public struct DescribeFeatureGroupInput {
    /// The name or Amazon Resource Name (ARN) of the FeatureGroup you want described.
    /// This member is required.
    public var featureGroupName: Swift.String?
    /// A token to resume pagination of the list of Features (FeatureDefinitions). 2,500 Features are returned by default.
    public var nextToken: Swift.String?

    public init(
        featureGroupName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.featureGroupName = featureGroupName
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum FeatureGroupStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case created
        case createFailed
        case creating
        case deleteFailed
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [FeatureGroupStatus] {
            return [
                .created,
                .createFailed,
                .creating,
                .deleteFailed,
                .deleting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .created: return "Created"
            case .createFailed: return "CreateFailed"
            case .creating: return "Creating"
            case .deleteFailed: return "DeleteFailed"
            case .deleting: return "Deleting"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum LastUpdateStatusValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case inProgress
        case successful
        case sdkUnknown(Swift.String)

        public static var allCases: [LastUpdateStatusValue] {
            return [
                .failed,
                .inProgress,
                .successful
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .successful: return "Successful"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A value that indicates whether the update was successful.
    public struct LastUpdateStatus {
        /// If the update wasn't successful, indicates the reason why it failed.
        public var failureReason: Swift.String?
        /// A value that indicates whether the update was made successful.
        /// This member is required.
        public var status: SageMakerClientTypes.LastUpdateStatusValue?

        public init(
            failureReason: Swift.String? = nil,
            status: SageMakerClientTypes.LastUpdateStatusValue? = nil
        )
        {
            self.failureReason = failureReason
            self.status = status
        }
    }

}

extension SageMakerClientTypes {

    public enum OfflineStoreStatusValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case blocked
        case disabled
        case sdkUnknown(Swift.String)

        public static var allCases: [OfflineStoreStatusValue] {
            return [
                .active,
                .blocked,
                .disabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .blocked: return "Blocked"
            case .disabled: return "Disabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The status of OfflineStore.
    public struct OfflineStoreStatus {
        /// The justification for why the OfflineStoreStatus is Blocked (if applicable).
        public var blockedReason: Swift.String?
        /// An OfflineStore status.
        /// This member is required.
        public var status: SageMakerClientTypes.OfflineStoreStatusValue?

        public init(
            blockedReason: Swift.String? = nil,
            status: SageMakerClientTypes.OfflineStoreStatusValue? = nil
        )
        {
            self.blockedReason = blockedReason
            self.status = status
        }
    }

}

extension SageMakerClientTypes {
    /// Active throughput configuration of the feature group. There are two modes: ON_DEMAND and PROVISIONED. With on-demand mode, you are charged for data reads and writes that your application performs on your feature group. You do not need to specify read and write throughput because Feature Store accommodates your workloads as they ramp up and down. You can switch a feature group to on-demand only once in a 24 hour period. With provisioned throughput mode, you specify the read and write capacity per second that you expect your application to require, and you are billed based on those limits. Exceeding provisioned throughput will result in your requests being throttled. Note: PROVISIONED throughput mode is supported only for feature groups that are offline-only, or use the [Standard](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OnlineStoreConfig.html#sagemaker-Type-OnlineStoreConfig-StorageType) tier online store.
    public struct ThroughputConfigDescription {
        /// For provisioned feature groups with online store enabled, this indicates the read throughput you are billed for and can consume without throttling. This field is not applicable for on-demand feature groups.
        public var provisionedReadCapacityUnits: Swift.Int?
        /// For provisioned feature groups, this indicates the write throughput you are billed for and can consume without throttling. This field is not applicable for on-demand feature groups.
        public var provisionedWriteCapacityUnits: Swift.Int?
        /// The mode used for your feature group throughput: ON_DEMAND or PROVISIONED.
        /// This member is required.
        public var throughputMode: SageMakerClientTypes.ThroughputMode?

        public init(
            provisionedReadCapacityUnits: Swift.Int? = nil,
            provisionedWriteCapacityUnits: Swift.Int? = nil,
            throughputMode: SageMakerClientTypes.ThroughputMode? = nil
        )
        {
            self.provisionedReadCapacityUnits = provisionedReadCapacityUnits
            self.provisionedWriteCapacityUnits = provisionedWriteCapacityUnits
            self.throughputMode = throughputMode
        }
    }

}

public struct DescribeFeatureGroupOutput {
    /// A timestamp indicating when SageMaker created the FeatureGroup.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// A free form description of the feature group.
    public var description: Swift.String?
    /// The name of the feature that stores the EventTime of a Record in a FeatureGroup. An EventTime is a point in time when a new event occurs that corresponds to the creation or update of a Record in a FeatureGroup. All Records in the FeatureGroup have a corresponding EventTime.
    /// This member is required.
    public var eventTimeFeatureName: Swift.String?
    /// The reason that the FeatureGroup failed to be replicated in the OfflineStore. This is failure can occur because:
    ///
    /// * The FeatureGroup could not be created in the OfflineStore.
    ///
    /// * The FeatureGroup could not be deleted from the OfflineStore.
    public var failureReason: Swift.String?
    /// A list of the Features in the FeatureGroup. Each feature is defined by a FeatureName and FeatureType.
    /// This member is required.
    public var featureDefinitions: [SageMakerClientTypes.FeatureDefinition]?
    /// The Amazon Resource Name (ARN) of the FeatureGroup.
    /// This member is required.
    public var featureGroupArn: Swift.String?
    /// he name of the FeatureGroup.
    /// This member is required.
    public var featureGroupName: Swift.String?
    /// The status of the feature group.
    public var featureGroupStatus: SageMakerClientTypes.FeatureGroupStatus?
    /// A timestamp indicating when the feature group was last updated.
    public var lastModifiedTime: Foundation.Date?
    /// A value indicating whether the update made to the feature group was successful.
    public var lastUpdateStatus: SageMakerClientTypes.LastUpdateStatus?
    /// A token to resume pagination of the list of Features (FeatureDefinitions).
    /// This member is required.
    public var nextToken: Swift.String?
    /// The configuration of the offline store. It includes the following configurations:
    ///
    /// * Amazon S3 location of the offline store.
    ///
    /// * Configuration of the Glue data catalog.
    ///
    /// * Table format of the offline store.
    ///
    /// * Option to disable the automatic creation of a Glue table for the offline store.
    ///
    /// * Encryption configuration.
    public var offlineStoreConfig: SageMakerClientTypes.OfflineStoreConfig?
    /// The status of the OfflineStore. Notifies you if replicating data into the OfflineStore has failed. Returns either: Active or Blocked
    public var offlineStoreStatus: SageMakerClientTypes.OfflineStoreStatus?
    /// The configuration for the OnlineStore.
    public var onlineStoreConfig: SageMakerClientTypes.OnlineStoreConfig?
    /// The size of the OnlineStore in bytes.
    public var onlineStoreTotalSizeBytes: Swift.Int?
    /// The name of the Feature used for RecordIdentifier, whose value uniquely identifies a record stored in the feature store.
    /// This member is required.
    public var recordIdentifierFeatureName: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM execution role used to persist data into the OfflineStore if an OfflineStoreConfig is provided.
    public var roleArn: Swift.String?
    /// Active throughput configuration of the feature group. There are two modes: ON_DEMAND and PROVISIONED. With on-demand mode, you are charged for data reads and writes that your application performs on your feature group. You do not need to specify read and write throughput because Feature Store accommodates your workloads as they ramp up and down. You can switch a feature group to on-demand only once in a 24 hour period. With provisioned throughput mode, you specify the read and write capacity per second that you expect your application to require, and you are billed based on those limits. Exceeding provisioned throughput will result in your requests being throttled. Note: PROVISIONED throughput mode is supported only for feature groups that are offline-only, or use the [Standard](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_OnlineStoreConfig.html#sagemaker-Type-OnlineStoreConfig-StorageType) tier online store.
    public var throughputConfig: SageMakerClientTypes.ThroughputConfigDescription?

    public init(
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        eventTimeFeatureName: Swift.String? = nil,
        failureReason: Swift.String? = nil,
        featureDefinitions: [SageMakerClientTypes.FeatureDefinition]? = nil,
        featureGroupArn: Swift.String? = nil,
        featureGroupName: Swift.String? = nil,
        featureGroupStatus: SageMakerClientTypes.FeatureGroupStatus? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        lastUpdateStatus: SageMakerClientTypes.LastUpdateStatus? = nil,
        nextToken: Swift.String? = nil,
        offlineStoreConfig: SageMakerClientTypes.OfflineStoreConfig? = nil,
        offlineStoreStatus: SageMakerClientTypes.OfflineStoreStatus? = nil,
        onlineStoreConfig: SageMakerClientTypes.OnlineStoreConfig? = nil,
        onlineStoreTotalSizeBytes: Swift.Int? = nil,
        recordIdentifierFeatureName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        throughputConfig: SageMakerClientTypes.ThroughputConfigDescription? = nil
    )
    {
        self.creationTime = creationTime
        self.description = description
        self.eventTimeFeatureName = eventTimeFeatureName
        self.failureReason = failureReason
        self.featureDefinitions = featureDefinitions
        self.featureGroupArn = featureGroupArn
        self.featureGroupName = featureGroupName
        self.featureGroupStatus = featureGroupStatus
        self.lastModifiedTime = lastModifiedTime
        self.lastUpdateStatus = lastUpdateStatus
        self.nextToken = nextToken
        self.offlineStoreConfig = offlineStoreConfig
        self.offlineStoreStatus = offlineStoreStatus
        self.onlineStoreConfig = onlineStoreConfig
        self.onlineStoreTotalSizeBytes = onlineStoreTotalSizeBytes
        self.recordIdentifierFeatureName = recordIdentifierFeatureName
        self.roleArn = roleArn
        self.throughputConfig = throughputConfig
    }
}

public struct DescribeFeatureMetadataInput {
    /// The name or Amazon Resource Name (ARN) of the feature group containing the feature.
    /// This member is required.
    public var featureGroupName: Swift.String?
    /// The name of the feature.
    /// This member is required.
    public var featureName: Swift.String?

    public init(
        featureGroupName: Swift.String? = nil,
        featureName: Swift.String? = nil
    )
    {
        self.featureGroupName = featureGroupName
        self.featureName = featureName
    }
}

extension SageMakerClientTypes {
    /// A key-value pair that you specify to describe the feature.
    public struct FeatureParameter {
        /// A key that must contain a value to describe the feature.
        public var key: Swift.String?
        /// The value that belongs to a key.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct DescribeFeatureMetadataOutput {
    /// A timestamp indicating when the feature was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The description you added to describe the feature.
    public var description: Swift.String?
    /// The Amazon Resource Number (ARN) of the feature group that contains the feature.
    /// This member is required.
    public var featureGroupArn: Swift.String?
    /// The name of the feature group that you've specified.
    /// This member is required.
    public var featureGroupName: Swift.String?
    /// The name of the feature that you've specified.
    /// This member is required.
    public var featureName: Swift.String?
    /// The data type of the feature.
    /// This member is required.
    public var featureType: SageMakerClientTypes.FeatureType?
    /// A timestamp indicating when the metadata for the feature group was modified. For example, if you add a parameter describing the feature, the timestamp changes to reflect the last time you
    /// This member is required.
    public var lastModifiedTime: Foundation.Date?
    /// The key-value pairs that you added to describe the feature.
    public var parameters: [SageMakerClientTypes.FeatureParameter]?

    public init(
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        featureGroupArn: Swift.String? = nil,
        featureGroupName: Swift.String? = nil,
        featureName: Swift.String? = nil,
        featureType: SageMakerClientTypes.FeatureType? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        parameters: [SageMakerClientTypes.FeatureParameter]? = nil
    )
    {
        self.creationTime = creationTime
        self.description = description
        self.featureGroupArn = featureGroupArn
        self.featureGroupName = featureGroupName
        self.featureName = featureName
        self.featureType = featureType
        self.lastModifiedTime = lastModifiedTime
        self.parameters = parameters
    }
}

public struct DescribeFlowDefinitionInput {
    /// The name of the flow definition.
    /// This member is required.
    public var flowDefinitionName: Swift.String?

    public init(
        flowDefinitionName: Swift.String? = nil
    )
    {
        self.flowDefinitionName = flowDefinitionName
    }
}

extension SageMakerClientTypes {

    public enum FlowDefinitionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case deleting
        case failed
        case initializing
        case sdkUnknown(Swift.String)

        public static var allCases: [FlowDefinitionStatus] {
            return [
                .active,
                .deleting,
                .failed,
                .initializing
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .initializing: return "Initializing"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeFlowDefinitionOutput {
    /// The timestamp when the flow definition was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The reason your flow definition failed.
    public var failureReason: Swift.String?
    /// The Amazon Resource Name (ARN) of the flow defintion.
    /// This member is required.
    public var flowDefinitionArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the flow definition.
    /// This member is required.
    public var flowDefinitionName: Swift.String?
    /// The status of the flow definition. Valid values are listed below.
    /// This member is required.
    public var flowDefinitionStatus: SageMakerClientTypes.FlowDefinitionStatus?
    /// An object containing information about what triggers a human review workflow.
    public var humanLoopActivationConfig: SageMakerClientTypes.HumanLoopActivationConfig?
    /// An object containing information about who works on the task, the workforce task price, and other task details.
    public var humanLoopConfig: SageMakerClientTypes.HumanLoopConfig?
    /// Container for configuring the source of human task requests. Used to specify if Amazon Rekognition or Amazon Textract is used as an integration source.
    public var humanLoopRequestSource: SageMakerClientTypes.HumanLoopRequestSource?
    /// An object containing information about the output file.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.FlowDefinitionOutputConfig?
    /// The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) execution role for the flow definition.
    /// This member is required.
    public var roleArn: Swift.String?

    public init(
        creationTime: Foundation.Date? = nil,
        failureReason: Swift.String? = nil,
        flowDefinitionArn: Swift.String? = nil,
        flowDefinitionName: Swift.String? = nil,
        flowDefinitionStatus: SageMakerClientTypes.FlowDefinitionStatus? = nil,
        humanLoopActivationConfig: SageMakerClientTypes.HumanLoopActivationConfig? = nil,
        humanLoopConfig: SageMakerClientTypes.HumanLoopConfig? = nil,
        humanLoopRequestSource: SageMakerClientTypes.HumanLoopRequestSource? = nil,
        outputConfig: SageMakerClientTypes.FlowDefinitionOutputConfig? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.failureReason = failureReason
        self.flowDefinitionArn = flowDefinitionArn
        self.flowDefinitionName = flowDefinitionName
        self.flowDefinitionStatus = flowDefinitionStatus
        self.humanLoopActivationConfig = humanLoopActivationConfig
        self.humanLoopConfig = humanLoopConfig
        self.humanLoopRequestSource = humanLoopRequestSource
        self.outputConfig = outputConfig
        self.roleArn = roleArn
    }
}

public struct DescribeHubInput {
    /// The name of the hub to describe.
    /// This member is required.
    public var hubName: Swift.String?

    public init(
        hubName: Swift.String? = nil
    )
    {
        self.hubName = hubName
    }
}

extension SageMakerClientTypes {

    public enum HubStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createFailed
        case creating
        case deleteFailed
        case deleting
        case inService
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [HubStatus] {
            return [
                .createFailed,
                .creating,
                .deleteFailed,
                .deleting,
                .inService,
                .updateFailed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createFailed: return "CreateFailed"
            case .creating: return "Creating"
            case .deleteFailed: return "DeleteFailed"
            case .deleting: return "Deleting"
            case .inService: return "InService"
            case .updateFailed: return "UpdateFailed"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeHubOutput {
    /// The date and time that the hub was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The failure reason if importing hub content failed.
    public var failureReason: Swift.String?
    /// The Amazon Resource Name (ARN) of the hub.
    /// This member is required.
    public var hubArn: Swift.String?
    /// A description of the hub.
    public var hubDescription: Swift.String?
    /// The display name of the hub.
    public var hubDisplayName: Swift.String?
    /// The name of the hub.
    /// This member is required.
    public var hubName: Swift.String?
    /// The searchable keywords for the hub.
    public var hubSearchKeywords: [Swift.String]?
    /// The status of the hub.
    /// This member is required.
    public var hubStatus: SageMakerClientTypes.HubStatus?
    /// The date and time that the hub was last modified.
    /// This member is required.
    public var lastModifiedTime: Foundation.Date?
    /// The Amazon S3 storage configuration for the hub.
    public var s3StorageConfig: SageMakerClientTypes.HubS3StorageConfig?

    public init(
        creationTime: Foundation.Date? = nil,
        failureReason: Swift.String? = nil,
        hubArn: Swift.String? = nil,
        hubDescription: Swift.String? = nil,
        hubDisplayName: Swift.String? = nil,
        hubName: Swift.String? = nil,
        hubSearchKeywords: [Swift.String]? = nil,
        hubStatus: SageMakerClientTypes.HubStatus? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        s3StorageConfig: SageMakerClientTypes.HubS3StorageConfig? = nil
    )
    {
        self.creationTime = creationTime
        self.failureReason = failureReason
        self.hubArn = hubArn
        self.hubDescription = hubDescription
        self.hubDisplayName = hubDisplayName
        self.hubName = hubName
        self.hubSearchKeywords = hubSearchKeywords
        self.hubStatus = hubStatus
        self.lastModifiedTime = lastModifiedTime
        self.s3StorageConfig = s3StorageConfig
    }
}

public struct DescribeHubContentInput {
    /// The name of the content to describe.
    /// This member is required.
    public var hubContentName: Swift.String?
    /// The type of content in the hub.
    /// This member is required.
    public var hubContentType: SageMakerClientTypes.HubContentType?
    /// The version of the content to describe.
    public var hubContentVersion: Swift.String?
    /// The name of the hub that contains the content to describe.
    /// This member is required.
    public var hubName: Swift.String?

    public init(
        hubContentName: Swift.String? = nil,
        hubContentType: SageMakerClientTypes.HubContentType? = nil,
        hubContentVersion: Swift.String? = nil,
        hubName: Swift.String? = nil
    )
    {
        self.hubContentName = hubContentName
        self.hubContentType = hubContentType
        self.hubContentVersion = hubContentVersion
        self.hubName = hubName
    }
}

extension SageMakerClientTypes {
    /// Any dependencies related to hub content, such as scripts, model artifacts, datasets, or notebooks.
    public struct HubContentDependency {
        /// The hub content dependency copy path.
        public var dependencyCopyPath: Swift.String?
        /// The hub content dependency origin path.
        public var dependencyOriginPath: Swift.String?

        public init(
            dependencyCopyPath: Swift.String? = nil,
            dependencyOriginPath: Swift.String? = nil
        )
        {
            self.dependencyCopyPath = dependencyCopyPath
            self.dependencyOriginPath = dependencyOriginPath
        }
    }

}

extension SageMakerClientTypes {

    public enum HubContentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case deleteFailed
        case deleting
        case importing
        case importFailed
        case sdkUnknown(Swift.String)

        public static var allCases: [HubContentStatus] {
            return [
                .available,
                .deleteFailed,
                .deleting,
                .importing,
                .importFailed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "Available"
            case .deleteFailed: return "DeleteFailed"
            case .deleting: return "Deleting"
            case .importing: return "Importing"
            case .importFailed: return "ImportFailed"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum HubContentSupportStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deprecated
        case supported
        case sdkUnknown(Swift.String)

        public static var allCases: [HubContentSupportStatus] {
            return [
                .deprecated,
                .supported
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deprecated: return "Deprecated"
            case .supported: return "Supported"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeHubContentOutput {
    /// The date and time that hub content was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The document schema version for the hub content.
    /// This member is required.
    public var documentSchemaVersion: Swift.String?
    /// The failure reason if importing hub content failed.
    public var failureReason: Swift.String?
    /// The Amazon Resource Name (ARN) of the hub that contains the content.
    /// This member is required.
    public var hubArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the hub content.
    /// This member is required.
    public var hubContentArn: Swift.String?
    /// The location of any dependencies that the hub content has, such as scripts, model artifacts, datasets, or notebooks.
    public var hubContentDependencies: [SageMakerClientTypes.HubContentDependency]?
    /// A description of the hub content.
    public var hubContentDescription: Swift.String?
    /// The display name of the hub content.
    public var hubContentDisplayName: Swift.String?
    /// The hub content document that describes information about the hub content such as type, associated containers, scripts, and more.
    /// This member is required.
    public var hubContentDocument: Swift.String?
    /// A string that provides a description of the hub content. This string can include links, tables, and standard markdown formating.
    public var hubContentMarkdown: Swift.String?
    /// The name of the hub content.
    /// This member is required.
    public var hubContentName: Swift.String?
    /// The searchable keywords for the hub content.
    public var hubContentSearchKeywords: [Swift.String]?
    /// The status of the hub content.
    /// This member is required.
    public var hubContentStatus: SageMakerClientTypes.HubContentStatus?
    /// The type of hub content.
    /// This member is required.
    public var hubContentType: SageMakerClientTypes.HubContentType?
    /// The version of the hub content.
    /// This member is required.
    public var hubContentVersion: Swift.String?
    /// The name of the hub that contains the content.
    /// This member is required.
    public var hubName: Swift.String?
    /// The minimum version of the hub content.
    public var referenceMinVersion: Swift.String?
    /// The ARN of the public hub content.
    public var sageMakerPublicHubContentArn: Swift.String?
    /// The support status of the hub content.
    public var supportStatus: SageMakerClientTypes.HubContentSupportStatus?

    public init(
        creationTime: Foundation.Date? = nil,
        documentSchemaVersion: Swift.String? = nil,
        failureReason: Swift.String? = nil,
        hubArn: Swift.String? = nil,
        hubContentArn: Swift.String? = nil,
        hubContentDependencies: [SageMakerClientTypes.HubContentDependency]? = nil,
        hubContentDescription: Swift.String? = nil,
        hubContentDisplayName: Swift.String? = nil,
        hubContentDocument: Swift.String? = nil,
        hubContentMarkdown: Swift.String? = nil,
        hubContentName: Swift.String? = nil,
        hubContentSearchKeywords: [Swift.String]? = nil,
        hubContentStatus: SageMakerClientTypes.HubContentStatus? = nil,
        hubContentType: SageMakerClientTypes.HubContentType? = nil,
        hubContentVersion: Swift.String? = nil,
        hubName: Swift.String? = nil,
        referenceMinVersion: Swift.String? = nil,
        sageMakerPublicHubContentArn: Swift.String? = nil,
        supportStatus: SageMakerClientTypes.HubContentSupportStatus? = nil
    )
    {
        self.creationTime = creationTime
        self.documentSchemaVersion = documentSchemaVersion
        self.failureReason = failureReason
        self.hubArn = hubArn
        self.hubContentArn = hubContentArn
        self.hubContentDependencies = hubContentDependencies
        self.hubContentDescription = hubContentDescription
        self.hubContentDisplayName = hubContentDisplayName
        self.hubContentDocument = hubContentDocument
        self.hubContentMarkdown = hubContentMarkdown
        self.hubContentName = hubContentName
        self.hubContentSearchKeywords = hubContentSearchKeywords
        self.hubContentStatus = hubContentStatus
        self.hubContentType = hubContentType
        self.hubContentVersion = hubContentVersion
        self.hubName = hubName
        self.referenceMinVersion = referenceMinVersion
        self.sageMakerPublicHubContentArn = sageMakerPublicHubContentArn
        self.supportStatus = supportStatus
    }
}

public struct DescribeHumanTaskUiInput {
    /// The name of the human task user interface (worker task template) you want information about.
    /// This member is required.
    public var humanTaskUiName: Swift.String?

    public init(
        humanTaskUiName: Swift.String? = nil
    )
    {
        self.humanTaskUiName = humanTaskUiName
    }
}

extension SageMakerClientTypes {

    public enum HumanTaskUiStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [HumanTaskUiStatus] {
            return [
                .active,
                .deleting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .deleting: return "Deleting"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Container for user interface template information.
    public struct UiTemplateInfo {
        /// The SHA-256 digest of the contents of the template.
        public var contentSha256: Swift.String?
        /// The URL for the user interface template.
        public var url: Swift.String?

        public init(
            contentSha256: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.contentSha256 = contentSha256
            self.url = url
        }
    }

}

public struct DescribeHumanTaskUiOutput {
    /// The timestamp when the human task user interface was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the human task user interface (worker task template).
    /// This member is required.
    public var humanTaskUiArn: Swift.String?
    /// The name of the human task user interface (worker task template).
    /// This member is required.
    public var humanTaskUiName: Swift.String?
    /// The status of the human task user interface (worker task template). Valid values are listed below.
    public var humanTaskUiStatus: SageMakerClientTypes.HumanTaskUiStatus?
    /// Container for user interface template information.
    /// This member is required.
    public var uiTemplate: SageMakerClientTypes.UiTemplateInfo?

    public init(
        creationTime: Foundation.Date? = nil,
        humanTaskUiArn: Swift.String? = nil,
        humanTaskUiName: Swift.String? = nil,
        humanTaskUiStatus: SageMakerClientTypes.HumanTaskUiStatus? = nil,
        uiTemplate: SageMakerClientTypes.UiTemplateInfo? = nil
    )
    {
        self.creationTime = creationTime
        self.humanTaskUiArn = humanTaskUiArn
        self.humanTaskUiName = humanTaskUiName
        self.humanTaskUiStatus = humanTaskUiStatus
        self.uiTemplate = uiTemplate
    }
}

public struct DescribeHyperParameterTuningJobInput {
    /// The name of the tuning job.
    /// This member is required.
    public var hyperParameterTuningJobName: Swift.String?

    public init(
        hyperParameterTuningJobName: Swift.String? = nil
    )
    {
        self.hyperParameterTuningJobName = hyperParameterTuningJobName
    }
}

extension SageMakerClientTypes {
    /// Shows the latest objective metric emitted by a training job that was launched by a hyperparameter tuning job. You define the objective metric in the HyperParameterTuningJobObjective parameter of [HyperParameterTuningJobConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html).
    public struct FinalHyperParameterTuningJobObjectiveMetric {
        /// The name of the objective metric. For SageMaker built-in algorithms, metrics are defined per algorithm. See the [metrics for XGBoost](https://docs.aws.amazon.com/sagemaker/latest/dg/xgboost-tuning.html) as an example. You can also use a custom algorithm for training and define your own metrics. For more information, see [Define metrics and environment variables](https://docs.aws.amazon.com/sagemaker/latest/dg/automatic-model-tuning-define-metrics-variables.html).
        /// This member is required.
        public var metricName: Swift.String?
        /// Select if you want to minimize or maximize the objective metric during hyperparameter tuning.
        public var type: SageMakerClientTypes.HyperParameterTuningJobObjectiveType?
        /// The value of the objective metric.
        /// This member is required.
        public var value: Swift.Float?

        public init(
            metricName: Swift.String? = nil,
            type: SageMakerClientTypes.HyperParameterTuningJobObjectiveType? = nil,
            value: Swift.Float? = nil
        )
        {
            self.metricName = metricName
            self.type = type
            self.value = value
        }
    }

}

extension SageMakerClientTypes {

    public enum TrainingJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [TrainingJobStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The container for the summary information about a training job.
    public struct HyperParameterTrainingJobSummary {
        /// The date and time that the training job was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The reason that the training job failed.
        public var failureReason: Swift.String?
        /// The [FinalHyperParameterTuningJobObjectiveMetric](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_FinalHyperParameterTuningJobObjectiveMetric.html) object that specifies the value of the objective metric of the tuning job that launched this training job.
        public var finalHyperParameterTuningJobObjectiveMetric: SageMakerClientTypes.FinalHyperParameterTuningJobObjectiveMetric?
        /// The status of the objective metric for the training job:
        ///
        /// * Succeeded: The final objective metric for the training job was evaluated by the hyperparameter tuning job and used in the hyperparameter tuning process.
        ///
        ///
        ///
        ///
        /// * Pending: The training job is in progress and evaluation of its final objective metric is pending.
        ///
        ///
        ///
        ///
        /// * Failed: The final objective metric for the training job was not evaluated, and was not used in the hyperparameter tuning process. This typically occurs when the training job failed or did not emit an objective metric.
        public var objectiveStatus: SageMakerClientTypes.ObjectiveStatus?
        /// Specifies the time when the training job ends on training instances. You are billed for the time interval between the value of TrainingStartTime and this time. For successful jobs and stopped jobs, this is the time after model artifacts are uploaded. For failed jobs, this is the time when SageMaker detects a job failure.
        public var trainingEndTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the training job.
        /// This member is required.
        public var trainingJobArn: Swift.String?
        /// The training job definition name.
        public var trainingJobDefinitionName: Swift.String?
        /// The name of the training job.
        /// This member is required.
        public var trainingJobName: Swift.String?
        /// The status of the training job.
        /// This member is required.
        public var trainingJobStatus: SageMakerClientTypes.TrainingJobStatus?
        /// The date and time that the training job started.
        public var trainingStartTime: Foundation.Date?
        /// A list of the hyperparameters for which you specified ranges to search.
        /// This member is required.
        public var tunedHyperParameters: [Swift.String: Swift.String]?
        /// The HyperParameter tuning job that launched the training job.
        public var tuningJobName: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            failureReason: Swift.String? = nil,
            finalHyperParameterTuningJobObjectiveMetric: SageMakerClientTypes.FinalHyperParameterTuningJobObjectiveMetric? = nil,
            objectiveStatus: SageMakerClientTypes.ObjectiveStatus? = nil,
            trainingEndTime: Foundation.Date? = nil,
            trainingJobArn: Swift.String? = nil,
            trainingJobDefinitionName: Swift.String? = nil,
            trainingJobName: Swift.String? = nil,
            trainingJobStatus: SageMakerClientTypes.TrainingJobStatus? = nil,
            trainingStartTime: Foundation.Date? = nil,
            tunedHyperParameters: [Swift.String: Swift.String]? = nil,
            tuningJobName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.finalHyperParameterTuningJobObjectiveMetric = finalHyperParameterTuningJobObjectiveMetric
            self.objectiveStatus = objectiveStatus
            self.trainingEndTime = trainingEndTime
            self.trainingJobArn = trainingJobArn
            self.trainingJobDefinitionName = trainingJobDefinitionName
            self.trainingJobName = trainingJobName
            self.trainingJobStatus = trainingJobStatus
            self.trainingStartTime = trainingStartTime
            self.tunedHyperParameters = tunedHyperParameters
            self.tuningJobName = tuningJobName
        }
    }

}

extension SageMakerClientTypes {
    /// The total resources consumed by your hyperparameter tuning job.
    public struct HyperParameterTuningJobConsumedResources {
        /// The wall clock runtime in seconds used by your hyperparameter tuning job.
        public var runtimeInSeconds: Swift.Int?

        public init(
            runtimeInSeconds: Swift.Int? = nil
        )
        {
            self.runtimeInSeconds = runtimeInSeconds
        }
    }

}

extension SageMakerClientTypes {

    public enum HyperParameterTuningJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case deleteFailed
        case deleting
        case failed
        case inProgress
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [HyperParameterTuningJobStatus] {
            return [
                .completed,
                .deleteFailed,
                .deleting,
                .failed,
                .inProgress,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .deleteFailed: return "DeleteFailed"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies the number of training jobs that this hyperparameter tuning job launched, categorized by the status of their objective metric. The objective metric status shows whether the final objective metric for the training job has been evaluated by the tuning job and used in the hyperparameter tuning process.
    public struct ObjectiveStatusCounters {
        /// The number of training jobs whose final objective metric was not evaluated and used in the hyperparameter tuning process. This typically occurs when the training job failed or did not emit an objective metric.
        public var failed: Swift.Int?
        /// The number of training jobs that are in progress and pending evaluation of their final objective metric.
        public var pending: Swift.Int?
        /// The number of training jobs whose final objective metric was evaluated by the hyperparameter tuning job and used in the hyperparameter tuning process.
        public var succeeded: Swift.Int?

        public init(
            failed: Swift.Int? = nil,
            pending: Swift.Int? = nil,
            succeeded: Swift.Int? = nil
        )
        {
            self.failed = failed
            self.pending = pending
            self.succeeded = succeeded
        }
    }

}

extension SageMakerClientTypes {
    /// The numbers of training jobs launched by a hyperparameter tuning job, categorized by status.
    public struct TrainingJobStatusCounters {
        /// The number of completed training jobs launched by the hyperparameter tuning job.
        public var completed: Swift.Int?
        /// The number of in-progress training jobs launched by a hyperparameter tuning job.
        public var inProgress: Swift.Int?
        /// The number of training jobs that failed and can't be retried. A failed training job can't be retried if it failed because a client error occurred.
        public var nonRetryableError: Swift.Int?
        /// The number of training jobs that failed, but can be retried. A failed training job can be retried only if it failed because an internal service error occurred.
        public var retryableError: Swift.Int?
        /// The number of training jobs launched by a hyperparameter tuning job that were manually stopped.
        public var stopped: Swift.Int?

        public init(
            completed: Swift.Int? = nil,
            inProgress: Swift.Int? = nil,
            nonRetryableError: Swift.Int? = nil,
            retryableError: Swift.Int? = nil,
            stopped: Swift.Int? = nil
        )
        {
            self.completed = completed
            self.inProgress = inProgress
            self.nonRetryableError = nonRetryableError
            self.retryableError = retryableError
            self.stopped = stopped
        }
    }

}

extension SageMakerClientTypes {
    /// A structure that contains runtime information about both current and completed hyperparameter tuning jobs.
    public struct HyperParameterTuningJobCompletionDetails {
        /// The time in timestamp format that AMT detected model convergence, as defined by a lack of significant improvement over time based on criteria developed over a wide range of diverse benchmarking tests.
        public var convergenceDetectedTime: Foundation.Date?
        /// The number of training jobs launched by a tuning job that are not improving (1% or less) as measured by model performance evaluated against an objective function.
        public var numberOfTrainingJobsObjectiveNotImproving: Swift.Int?

        public init(
            convergenceDetectedTime: Foundation.Date? = nil,
            numberOfTrainingJobsObjectiveNotImproving: Swift.Int? = nil
        )
        {
            self.convergenceDetectedTime = convergenceDetectedTime
            self.numberOfTrainingJobsObjectiveNotImproving = numberOfTrainingJobsObjectiveNotImproving
        }
    }

}

public struct DescribeHyperParameterTuningJobOutput {
    /// A flag to indicate if autotune is enabled for the hyperparameter tuning job.
    public var autotune: SageMakerClientTypes.Autotune?
    /// A [TrainingJobSummary](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobSummary.html) object that describes the training job that completed with the best current [HyperParameterTuningJobObjective](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobObjective.html).
    public var bestTrainingJob: SageMakerClientTypes.HyperParameterTrainingJobSummary?
    /// The total resources consumed by your hyperparameter tuning job.
    public var consumedResources: SageMakerClientTypes.HyperParameterTuningJobConsumedResources?
    /// The date and time that the tuning job started.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// If the tuning job failed, the reason it failed.
    public var failureReason: Swift.String?
    /// The date and time that the tuning job ended.
    public var hyperParameterTuningEndTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the tuning job.
    /// This member is required.
    public var hyperParameterTuningJobArn: Swift.String?
    /// The [HyperParameterTuningJobConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobConfig.html) object that specifies the configuration of the tuning job.
    /// This member is required.
    public var hyperParameterTuningJobConfig: SageMakerClientTypes.HyperParameterTuningJobConfig?
    /// The name of the hyperparameter tuning job.
    /// This member is required.
    public var hyperParameterTuningJobName: Swift.String?
    /// The status of the tuning job.
    /// This member is required.
    public var hyperParameterTuningJobStatus: SageMakerClientTypes.HyperParameterTuningJobStatus?
    /// The date and time that the status of the tuning job was modified.
    public var lastModifiedTime: Foundation.Date?
    /// The [ObjectiveStatusCounters](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ObjectiveStatusCounters.html) object that specifies the number of training jobs, categorized by the status of their final objective metric, that this tuning job launched.
    /// This member is required.
    public var objectiveStatusCounters: SageMakerClientTypes.ObjectiveStatusCounters?
    /// If the hyperparameter tuning job is an warm start tuning job with a WarmStartType of IDENTICAL_DATA_AND_ALGORITHM, this is the [TrainingJobSummary](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobSummary.html) for the training job with the best objective metric value of all training jobs launched by this tuning job and all parent jobs specified for the warm start tuning job.
    public var overallBestTrainingJob: SageMakerClientTypes.HyperParameterTrainingJobSummary?
    /// The [HyperParameterTrainingJobDefinition](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html) object that specifies the definition of the training jobs that this tuning job launches.
    public var trainingJobDefinition: SageMakerClientTypes.HyperParameterTrainingJobDefinition?
    /// A list of the [HyperParameterTrainingJobDefinition](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTrainingJobDefinition.html) objects launched for this tuning job.
    public var trainingJobDefinitions: [SageMakerClientTypes.HyperParameterTrainingJobDefinition]?
    /// The [TrainingJobStatusCounters](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobStatusCounters.html) object that specifies the number of training jobs, categorized by status, that this tuning job launched.
    /// This member is required.
    public var trainingJobStatusCounters: SageMakerClientTypes.TrainingJobStatusCounters?
    /// Tuning job completion information returned as the response from a hyperparameter tuning job. This information tells if your tuning job has or has not converged. It also includes the number of training jobs that have not improved model performance as evaluated against the objective function.
    public var tuningJobCompletionDetails: SageMakerClientTypes.HyperParameterTuningJobCompletionDetails?
    /// The configuration for starting the hyperparameter parameter tuning job using one or more previous tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job.
    public var warmStartConfig: SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig?

    public init(
        autotune: SageMakerClientTypes.Autotune? = nil,
        bestTrainingJob: SageMakerClientTypes.HyperParameterTrainingJobSummary? = nil,
        consumedResources: SageMakerClientTypes.HyperParameterTuningJobConsumedResources? = nil,
        creationTime: Foundation.Date? = nil,
        failureReason: Swift.String? = nil,
        hyperParameterTuningEndTime: Foundation.Date? = nil,
        hyperParameterTuningJobArn: Swift.String? = nil,
        hyperParameterTuningJobConfig: SageMakerClientTypes.HyperParameterTuningJobConfig? = nil,
        hyperParameterTuningJobName: Swift.String? = nil,
        hyperParameterTuningJobStatus: SageMakerClientTypes.HyperParameterTuningJobStatus? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        objectiveStatusCounters: SageMakerClientTypes.ObjectiveStatusCounters? = nil,
        overallBestTrainingJob: SageMakerClientTypes.HyperParameterTrainingJobSummary? = nil,
        trainingJobDefinition: SageMakerClientTypes.HyperParameterTrainingJobDefinition? = nil,
        trainingJobDefinitions: [SageMakerClientTypes.HyperParameterTrainingJobDefinition]? = nil,
        trainingJobStatusCounters: SageMakerClientTypes.TrainingJobStatusCounters? = nil,
        tuningJobCompletionDetails: SageMakerClientTypes.HyperParameterTuningJobCompletionDetails? = nil,
        warmStartConfig: SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig? = nil
    )
    {
        self.autotune = autotune
        self.bestTrainingJob = bestTrainingJob
        self.consumedResources = consumedResources
        self.creationTime = creationTime
        self.failureReason = failureReason
        self.hyperParameterTuningEndTime = hyperParameterTuningEndTime
        self.hyperParameterTuningJobArn = hyperParameterTuningJobArn
        self.hyperParameterTuningJobConfig = hyperParameterTuningJobConfig
        self.hyperParameterTuningJobName = hyperParameterTuningJobName
        self.hyperParameterTuningJobStatus = hyperParameterTuningJobStatus
        self.lastModifiedTime = lastModifiedTime
        self.objectiveStatusCounters = objectiveStatusCounters
        self.overallBestTrainingJob = overallBestTrainingJob
        self.trainingJobDefinition = trainingJobDefinition
        self.trainingJobDefinitions = trainingJobDefinitions
        self.trainingJobStatusCounters = trainingJobStatusCounters
        self.tuningJobCompletionDetails = tuningJobCompletionDetails
        self.warmStartConfig = warmStartConfig
    }
}

public struct DescribeImageInput {
    /// The name of the image to describe.
    /// This member is required.
    public var imageName: Swift.String?

    public init(
        imageName: Swift.String? = nil
    )
    {
        self.imageName = imageName
    }
}

extension SageMakerClientTypes {

    public enum ImageStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case created
        case createFailed
        case creating
        case deleteFailed
        case deleting
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ImageStatus] {
            return [
                .created,
                .createFailed,
                .creating,
                .deleteFailed,
                .deleting,
                .updateFailed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .created: return "CREATED"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case .updateFailed: return "UPDATE_FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeImageOutput {
    /// When the image was created.
    public var creationTime: Foundation.Date?
    /// The description of the image.
    public var description: Swift.String?
    /// The name of the image as displayed.
    public var displayName: Swift.String?
    /// When a create, update, or delete operation fails, the reason for the failure.
    public var failureReason: Swift.String?
    /// The ARN of the image.
    public var imageArn: Swift.String?
    /// The name of the image.
    public var imageName: Swift.String?
    /// The status of the image.
    public var imageStatus: SageMakerClientTypes.ImageStatus?
    /// When the image was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The ARN of the IAM role that enables Amazon SageMaker to perform tasks on your behalf.
    public var roleArn: Swift.String?

    public init(
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        failureReason: Swift.String? = nil,
        imageArn: Swift.String? = nil,
        imageName: Swift.String? = nil,
        imageStatus: SageMakerClientTypes.ImageStatus? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.description = description
        self.displayName = displayName
        self.failureReason = failureReason
        self.imageArn = imageArn
        self.imageName = imageName
        self.imageStatus = imageStatus
        self.lastModifiedTime = lastModifiedTime
        self.roleArn = roleArn
    }
}

public struct DescribeImageVersionInput {
    /// The alias of the image version.
    public var alias: Swift.String?
    /// The name of the image.
    /// This member is required.
    public var imageName: Swift.String?
    /// The version of the image. If not specified, the latest version is described.
    public var version: Swift.Int?

    public init(
        alias: Swift.String? = nil,
        imageName: Swift.String? = nil,
        version: Swift.Int? = nil
    )
    {
        self.alias = alias
        self.imageName = imageName
        self.version = version
    }
}

extension SageMakerClientTypes {

    public enum ImageVersionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case created
        case createFailed
        case creating
        case deleteFailed
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [ImageVersionStatus] {
            return [
                .created,
                .createFailed,
                .creating,
                .deleteFailed,
                .deleting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .created: return "CREATED"
            case .createFailed: return "CREATE_FAILED"
            case .creating: return "CREATING"
            case .deleteFailed: return "DELETE_FAILED"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeImageVersionOutput {
    /// The registry path of the container image on which this image version is based.
    public var baseImage: Swift.String?
    /// The registry path of the container image that contains this image version.
    public var containerImage: Swift.String?
    /// When the version was created.
    public var creationTime: Foundation.Date?
    /// When a create or delete operation fails, the reason for the failure.
    public var failureReason: Swift.String?
    /// Indicates Horovod compatibility.
    public var horovod: Swift.Bool?
    /// The ARN of the image the version is based on.
    public var imageArn: Swift.String?
    /// The ARN of the version.
    public var imageVersionArn: Swift.String?
    /// The status of the version.
    public var imageVersionStatus: SageMakerClientTypes.ImageVersionStatus?
    /// Indicates SageMaker job type compatibility.
    ///
    /// * TRAINING: The image version is compatible with SageMaker training jobs.
    ///
    /// * INFERENCE: The image version is compatible with SageMaker inference jobs.
    ///
    /// * NOTEBOOK_KERNEL: The image version is compatible with SageMaker notebook kernels.
    public var jobType: SageMakerClientTypes.JobType?
    /// When the version was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The machine learning framework vended in the image version.
    public var mlFramework: Swift.String?
    /// Indicates CPU or GPU compatibility.
    ///
    /// * CPU: The image version is compatible with CPU.
    ///
    /// * GPU: The image version is compatible with GPU.
    public var processor: SageMakerClientTypes.Processor?
    /// The supported programming language and its version.
    public var programmingLang: Swift.String?
    /// The maintainer description of the image version.
    public var releaseNotes: Swift.String?
    /// The stability of the image version specified by the maintainer.
    ///
    /// * NOT_PROVIDED: The maintainers did not provide a status for image version stability.
    ///
    /// * STABLE: The image version is stable.
    ///
    /// * TO_BE_ARCHIVED: The image version is set to be archived. Custom image versions that are set to be archived are automatically archived after three months.
    ///
    /// * ARCHIVED: The image version is archived. Archived image versions are not searchable and are no longer actively supported.
    public var vendorGuidance: SageMakerClientTypes.VendorGuidance?
    /// The version number.
    public var version: Swift.Int?

    public init(
        baseImage: Swift.String? = nil,
        containerImage: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        failureReason: Swift.String? = nil,
        horovod: Swift.Bool? = nil,
        imageArn: Swift.String? = nil,
        imageVersionArn: Swift.String? = nil,
        imageVersionStatus: SageMakerClientTypes.ImageVersionStatus? = nil,
        jobType: SageMakerClientTypes.JobType? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        mlFramework: Swift.String? = nil,
        processor: SageMakerClientTypes.Processor? = nil,
        programmingLang: Swift.String? = nil,
        releaseNotes: Swift.String? = nil,
        vendorGuidance: SageMakerClientTypes.VendorGuidance? = nil,
        version: Swift.Int? = nil
    )
    {
        self.baseImage = baseImage
        self.containerImage = containerImage
        self.creationTime = creationTime
        self.failureReason = failureReason
        self.horovod = horovod
        self.imageArn = imageArn
        self.imageVersionArn = imageVersionArn
        self.imageVersionStatus = imageVersionStatus
        self.jobType = jobType
        self.lastModifiedTime = lastModifiedTime
        self.mlFramework = mlFramework
        self.processor = processor
        self.programmingLang = programmingLang
        self.releaseNotes = releaseNotes
        self.vendorGuidance = vendorGuidance
        self.version = version
    }
}

public struct DescribeInferenceComponentInput {
    /// The name of the inference component.
    /// This member is required.
    public var inferenceComponentName: Swift.String?

    public init(
        inferenceComponentName: Swift.String? = nil
    )
    {
        self.inferenceComponentName = inferenceComponentName
    }
}

extension SageMakerClientTypes {

    public enum InferenceComponentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creating
        case deleting
        case failed
        case inService
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [InferenceComponentStatus] {
            return [
                .creating,
                .deleting,
                .failed,
                .inService,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creating: return "Creating"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inService: return "InService"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Details about the runtime settings for the model that is deployed with the inference component.
    public struct InferenceComponentRuntimeConfigSummary {
        /// The number of runtime copies of the model container that are currently deployed.
        public var currentCopyCount: Swift.Int?
        /// The number of runtime copies of the model container that you requested to deploy with the inference component.
        public var desiredCopyCount: Swift.Int?

        public init(
            currentCopyCount: Swift.Int? = nil,
            desiredCopyCount: Swift.Int? = nil
        )
        {
            self.currentCopyCount = currentCopyCount
            self.desiredCopyCount = desiredCopyCount
        }
    }

}

extension SageMakerClientTypes {
    /// Details about the resources that are deployed with this inference component.
    public struct InferenceComponentContainerSpecificationSummary {
        /// The Amazon S3 path where the model artifacts are stored.
        public var artifactUrl: Swift.String?
        /// Gets the Amazon EC2 Container Registry path of the docker image of the model that is hosted in this [ProductionVariant](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ProductionVariant.html). If you used the registry/repository[:tag] form to specify the image path of the primary container when you created the model hosted in this ProductionVariant, the path resolves to a path of the form registry/repository[@digest]. A digest is a hash value that identifies a specific version of an image. For information about Amazon ECR paths, see [Pulling an Image](https://docs.aws.amazon.com/AmazonECR/latest/userguide/docker-pull-ecr-image.html) in the Amazon ECR User Guide.
        public var deployedImage: SageMakerClientTypes.DeployedImage?
        /// The environment variables to set in the Docker container.
        public var environment: [Swift.String: Swift.String]?

        public init(
            artifactUrl: Swift.String? = nil,
            deployedImage: SageMakerClientTypes.DeployedImage? = nil,
            environment: [Swift.String: Swift.String]? = nil
        )
        {
            self.artifactUrl = artifactUrl
            self.deployedImage = deployedImage
            self.environment = environment
        }
    }

}

extension SageMakerClientTypes {
    /// Details about the resources that are deployed with this inference component.
    public struct InferenceComponentSpecificationSummary {
        /// The compute resources allocated to run the model assigned to the inference component.
        public var computeResourceRequirements: SageMakerClientTypes.InferenceComponentComputeResourceRequirements?
        /// Details about the container that provides the runtime environment for the model that is deployed with the inference component.
        public var container: SageMakerClientTypes.InferenceComponentContainerSpecificationSummary?
        /// The name of the SageMaker model object that is deployed with the inference component.
        public var modelName: Swift.String?
        /// Settings that take effect while the model container starts up.
        public var startupParameters: SageMakerClientTypes.InferenceComponentStartupParameters?

        public init(
            computeResourceRequirements: SageMakerClientTypes.InferenceComponentComputeResourceRequirements? = nil,
            container: SageMakerClientTypes.InferenceComponentContainerSpecificationSummary? = nil,
            modelName: Swift.String? = nil,
            startupParameters: SageMakerClientTypes.InferenceComponentStartupParameters? = nil
        )
        {
            self.computeResourceRequirements = computeResourceRequirements
            self.container = container
            self.modelName = modelName
            self.startupParameters = startupParameters
        }
    }

}

public struct DescribeInferenceComponentOutput {
    /// The time when the inference component was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the endpoint that hosts the inference component.
    /// This member is required.
    public var endpointArn: Swift.String?
    /// The name of the endpoint that hosts the inference component.
    /// This member is required.
    public var endpointName: Swift.String?
    /// If the inference component status is Failed, the reason for the failure.
    public var failureReason: Swift.String?
    /// The Amazon Resource Name (ARN) of the inference component.
    /// This member is required.
    public var inferenceComponentArn: Swift.String?
    /// The name of the inference component.
    /// This member is required.
    public var inferenceComponentName: Swift.String?
    /// The status of the inference component.
    public var inferenceComponentStatus: SageMakerClientTypes.InferenceComponentStatus?
    /// The time when the inference component was last updated.
    /// This member is required.
    public var lastModifiedTime: Foundation.Date?
    /// Details about the runtime settings for the model that is deployed with the inference component.
    public var runtimeConfig: SageMakerClientTypes.InferenceComponentRuntimeConfigSummary?
    /// Details about the resources that are deployed with this inference component.
    public var specification: SageMakerClientTypes.InferenceComponentSpecificationSummary?
    /// The name of the production variant that hosts the inference component.
    public var variantName: Swift.String?

    public init(
        creationTime: Foundation.Date? = nil,
        endpointArn: Swift.String? = nil,
        endpointName: Swift.String? = nil,
        failureReason: Swift.String? = nil,
        inferenceComponentArn: Swift.String? = nil,
        inferenceComponentName: Swift.String? = nil,
        inferenceComponentStatus: SageMakerClientTypes.InferenceComponentStatus? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        runtimeConfig: SageMakerClientTypes.InferenceComponentRuntimeConfigSummary? = nil,
        specification: SageMakerClientTypes.InferenceComponentSpecificationSummary? = nil,
        variantName: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.endpointArn = endpointArn
        self.endpointName = endpointName
        self.failureReason = failureReason
        self.inferenceComponentArn = inferenceComponentArn
        self.inferenceComponentName = inferenceComponentName
        self.inferenceComponentStatus = inferenceComponentStatus
        self.lastModifiedTime = lastModifiedTime
        self.runtimeConfig = runtimeConfig
        self.specification = specification
        self.variantName = variantName
    }
}

public struct DescribeInferenceExperimentInput {
    /// The name of the inference experiment to describe.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

extension SageMakerClientTypes {
    /// The metadata of the endpoint.
    public struct EndpointMetadata {
        /// The name of the endpoint configuration.
        public var endpointConfigName: Swift.String?
        /// The name of the endpoint.
        /// This member is required.
        public var endpointName: Swift.String?
        /// The status of the endpoint. For possible values of the status of an endpoint, see [EndpointSummary](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_EndpointSummary.html).
        public var endpointStatus: SageMakerClientTypes.EndpointStatus?
        /// If the status of the endpoint is Failed, or the status is InService but update operation fails, this provides the reason why it failed.
        public var failureReason: Swift.String?

        public init(
            endpointConfigName: Swift.String? = nil,
            endpointName: Swift.String? = nil,
            endpointStatus: SageMakerClientTypes.EndpointStatus? = nil,
            failureReason: Swift.String? = nil
        )
        {
            self.endpointConfigName = endpointConfigName
            self.endpointName = endpointName
            self.endpointStatus = endpointStatus
            self.failureReason = failureReason
        }
    }

}

extension SageMakerClientTypes {

    public enum ModelVariantStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creating
        case deleted
        case deleting
        case inService
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelVariantStatus] {
            return [
                .creating,
                .deleted,
                .deleting,
                .inService,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creating: return "Creating"
            case .deleted: return "Deleted"
            case .deleting: return "Deleting"
            case .inService: return "InService"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Summary of the deployment configuration of a model.
    public struct ModelVariantConfigSummary {
        /// The configuration of the infrastructure that the model has been deployed to.
        /// This member is required.
        public var infrastructureConfig: SageMakerClientTypes.ModelInfrastructureConfig?
        /// The name of the Amazon SageMaker Model entity.
        /// This member is required.
        public var modelName: Swift.String?
        /// The status of deployment for the model variant on the hosted inference endpoint.
        ///
        /// * Creating - Amazon SageMaker is preparing the model variant on the hosted inference endpoint.
        ///
        /// * InService - The model variant is running on the hosted inference endpoint.
        ///
        /// * Updating - Amazon SageMaker is updating the model variant on the hosted inference endpoint.
        ///
        /// * Deleting - Amazon SageMaker is deleting the model variant on the hosted inference endpoint.
        ///
        /// * Deleted - The model variant has been deleted on the hosted inference endpoint. This can only happen after stopping the experiment.
        /// This member is required.
        public var status: SageMakerClientTypes.ModelVariantStatus?
        /// The name of the variant.
        /// This member is required.
        public var variantName: Swift.String?

        public init(
            infrastructureConfig: SageMakerClientTypes.ModelInfrastructureConfig? = nil,
            modelName: Swift.String? = nil,
            status: SageMakerClientTypes.ModelVariantStatus? = nil,
            variantName: Swift.String? = nil
        )
        {
            self.infrastructureConfig = infrastructureConfig
            self.modelName = modelName
            self.status = status
            self.variantName = variantName
        }
    }

}

extension SageMakerClientTypes {

    public enum InferenceExperimentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case completed
        case created
        case creating
        case running
        case starting
        case stopping
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [InferenceExperimentStatus] {
            return [
                .cancelled,
                .completed,
                .created,
                .creating,
                .running,
                .starting,
                .stopping,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .completed: return "Completed"
            case .created: return "Created"
            case .creating: return "Creating"
            case .running: return "Running"
            case .starting: return "Starting"
            case .stopping: return "Stopping"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeInferenceExperimentOutput {
    /// The ARN of the inference experiment being described.
    /// This member is required.
    public var arn: Swift.String?
    /// The timestamp at which the inference experiment was completed.
    public var completionTime: Foundation.Date?
    /// The timestamp at which you created the inference experiment.
    public var creationTime: Foundation.Date?
    /// The Amazon S3 location and configuration for storing inference request and response data.
    public var dataStorageConfig: SageMakerClientTypes.InferenceExperimentDataStorageConfig?
    /// The description of the inference experiment.
    public var description: Swift.String?
    /// The metadata of the endpoint on which the inference experiment ran.
    /// This member is required.
    public var endpointMetadata: SageMakerClientTypes.EndpointMetadata?
    /// The Amazon Web Services Key Management Service (Amazon Web Services KMS) key that Amazon SageMaker uses to encrypt data on the storage volume attached to the ML compute instance that hosts the endpoint. For more information, see [CreateInferenceExperiment](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceExperiment.html).
    public var kmsKey: Swift.String?
    /// The timestamp at which you last modified the inference experiment.
    public var lastModifiedTime: Foundation.Date?
    /// An array of ModelVariantConfigSummary objects. There is one for each variant in the inference experiment. Each ModelVariantConfigSummary object in the array describes the infrastructure configuration for deploying the corresponding variant.
    /// This member is required.
    public var modelVariants: [SageMakerClientTypes.ModelVariantConfigSummary]?
    /// The name of the inference experiment.
    /// This member is required.
    public var name: Swift.String?
    /// The ARN of the IAM role that Amazon SageMaker can assume to access model artifacts and container images, and manage Amazon SageMaker Inference endpoints for model deployment.
    public var roleArn: Swift.String?
    /// The duration for which the inference experiment ran or will run.
    public var schedule: SageMakerClientTypes.InferenceExperimentSchedule?
    /// The configuration of ShadowMode inference experiment type, which shows the production variant that takes all the inference requests, and the shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant it also shows the percentage of requests that Amazon SageMaker replicates.
    public var shadowModeConfig: SageMakerClientTypes.ShadowModeConfig?
    /// The status of the inference experiment. The following are the possible statuses for an inference experiment:
    ///
    /// * Creating - Amazon SageMaker is creating your experiment.
    ///
    /// * Created - Amazon SageMaker has finished the creation of your experiment and will begin the experiment at the scheduled time.
    ///
    /// * Updating - When you make changes to your experiment, your experiment shows as updating.
    ///
    /// * Starting - Amazon SageMaker is beginning your experiment.
    ///
    /// * Running - Your experiment is in progress.
    ///
    /// * Stopping - Amazon SageMaker is stopping your experiment.
    ///
    /// * Completed - Your experiment has completed.
    ///
    /// * Cancelled - When you conclude your experiment early using the [StopInferenceExperiment](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StopInferenceExperiment.html) API, or if any operation fails with an unexpected error, it shows as cancelled.
    /// This member is required.
    public var status: SageMakerClientTypes.InferenceExperimentStatus?
    /// The error message or client-specified Reason from the [StopInferenceExperiment](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_StopInferenceExperiment.html) API, that explains the status of the inference experiment.
    public var statusReason: Swift.String?
    /// The type of the inference experiment.
    /// This member is required.
    public var type: SageMakerClientTypes.InferenceExperimentType?

    public init(
        arn: Swift.String? = nil,
        completionTime: Foundation.Date? = nil,
        creationTime: Foundation.Date? = nil,
        dataStorageConfig: SageMakerClientTypes.InferenceExperimentDataStorageConfig? = nil,
        description: Swift.String? = nil,
        endpointMetadata: SageMakerClientTypes.EndpointMetadata? = nil,
        kmsKey: Swift.String? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        modelVariants: [SageMakerClientTypes.ModelVariantConfigSummary]? = nil,
        name: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        schedule: SageMakerClientTypes.InferenceExperimentSchedule? = nil,
        shadowModeConfig: SageMakerClientTypes.ShadowModeConfig? = nil,
        status: SageMakerClientTypes.InferenceExperimentStatus? = nil,
        statusReason: Swift.String? = nil,
        type: SageMakerClientTypes.InferenceExperimentType? = nil
    )
    {
        self.arn = arn
        self.completionTime = completionTime
        self.creationTime = creationTime
        self.dataStorageConfig = dataStorageConfig
        self.description = description
        self.endpointMetadata = endpointMetadata
        self.kmsKey = kmsKey
        self.lastModifiedTime = lastModifiedTime
        self.modelVariants = modelVariants
        self.name = name
        self.roleArn = roleArn
        self.schedule = schedule
        self.shadowModeConfig = shadowModeConfig
        self.status = status
        self.statusReason = statusReason
        self.type = type
    }
}

public struct DescribeInferenceRecommendationsJobInput {
    /// The name of the job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobName: Swift.String?

    public init(
        jobName: Swift.String? = nil
    )
    {
        self.jobName = jobName
    }
}

extension SageMakerClientTypes {
    /// The metrics for an existing endpoint compared in an Inference Recommender job.
    public struct InferenceMetrics {
        /// The expected maximum number of requests per minute for the instance.
        /// This member is required.
        public var maxInvocations: Swift.Int?
        /// The expected model latency at maximum invocations per minute for the instance.
        /// This member is required.
        public var modelLatency: Swift.Int?

        public init(
            maxInvocations: Swift.Int? = nil,
            modelLatency: Swift.Int? = nil
        )
        {
            self.maxInvocations = maxInvocations
            self.modelLatency = modelLatency
        }
    }

}

extension SageMakerClientTypes {
    /// The performance results from running an Inference Recommender job on an existing endpoint.
    public struct EndpointPerformance {
        /// Details about a customer endpoint that was compared in an Inference Recommender job.
        /// This member is required.
        public var endpointInfo: SageMakerClientTypes.EndpointInfo?
        /// The metrics for an existing endpoint.
        /// This member is required.
        public var metrics: SageMakerClientTypes.InferenceMetrics?

        public init(
            endpointInfo: SageMakerClientTypes.EndpointInfo? = nil,
            metrics: SageMakerClientTypes.InferenceMetrics? = nil
        )
        {
            self.endpointInfo = endpointInfo
            self.metrics = metrics
        }
    }

}

extension SageMakerClientTypes {
    /// The endpoint configuration made by Inference Recommender during a recommendation job.
    public struct EndpointOutputConfiguration {
        /// The name of the endpoint made during a recommendation job.
        /// This member is required.
        public var endpointName: Swift.String?
        /// The number of instances recommended to launch initially.
        public var initialInstanceCount: Swift.Int?
        /// The instance type recommended by Amazon SageMaker Inference Recommender.
        public var instanceType: SageMakerClientTypes.ProductionVariantInstanceType?
        /// Specifies the serverless configuration for an endpoint variant.
        public var serverlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig?
        /// The name of the production variant (deployed model) made during a recommendation job.
        /// This member is required.
        public var variantName: Swift.String?

        public init(
            endpointName: Swift.String? = nil,
            initialInstanceCount: Swift.Int? = nil,
            instanceType: SageMakerClientTypes.ProductionVariantInstanceType? = nil,
            serverlessConfig: SageMakerClientTypes.ProductionVariantServerlessConfig? = nil,
            variantName: Swift.String? = nil
        )
        {
            self.endpointName = endpointName
            self.initialInstanceCount = initialInstanceCount
            self.instanceType = instanceType
            self.serverlessConfig = serverlessConfig
            self.variantName = variantName
        }
    }

}

extension SageMakerClientTypes {
    /// The metrics of recommendations.
    public struct RecommendationMetrics {
        /// Defines the cost per hour for the instance.
        public var costPerHour: Swift.Float?
        /// Defines the cost per inference for the instance .
        public var costPerInference: Swift.Float?
        /// The expected CPU utilization at maximum invocations per minute for the instance. NaN indicates that the value is not available.
        public var cpuUtilization: Swift.Float?
        /// The expected maximum number of requests per minute for the instance.
        public var maxInvocations: Swift.Int?
        /// The expected memory utilization at maximum invocations per minute for the instance. NaN indicates that the value is not available.
        public var memoryUtilization: Swift.Float?
        /// The expected model latency at maximum invocation per minute for the instance.
        public var modelLatency: Swift.Int?
        /// The time it takes to launch new compute resources for a serverless endpoint. The time can vary depending on the model size, how long it takes to download the model, and the start-up time of the container. NaN indicates that the value is not available.
        public var modelSetupTime: Swift.Int?

        public init(
            costPerHour: Swift.Float? = nil,
            costPerInference: Swift.Float? = nil,
            cpuUtilization: Swift.Float? = nil,
            maxInvocations: Swift.Int? = nil,
            memoryUtilization: Swift.Float? = nil,
            modelLatency: Swift.Int? = nil,
            modelSetupTime: Swift.Int? = nil
        )
        {
            self.costPerHour = costPerHour
            self.costPerInference = costPerInference
            self.cpuUtilization = cpuUtilization
            self.maxInvocations = maxInvocations
            self.memoryUtilization = memoryUtilization
            self.modelLatency = modelLatency
            self.modelSetupTime = modelSetupTime
        }
    }

}

extension SageMakerClientTypes {
    /// A list of environment parameters suggested by the Amazon SageMaker Inference Recommender.
    public struct EnvironmentParameter {
        /// The environment key suggested by the Amazon SageMaker Inference Recommender.
        /// This member is required.
        public var key: Swift.String?
        /// The value suggested by the Amazon SageMaker Inference Recommender.
        /// This member is required.
        public var value: Swift.String?
        /// The value type suggested by the Amazon SageMaker Inference Recommender.
        /// This member is required.
        public var valueType: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil,
            valueType: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
            self.valueType = valueType
        }
    }

}

extension SageMakerClientTypes {
    /// Defines the model configuration. Includes the specification name and environment parameters.
    public struct ModelConfiguration {
        /// The name of the compilation job used to create the recommended model artifacts.
        public var compilationJobName: Swift.String?
        /// Defines the environment parameters that includes key, value types, and values.
        public var environmentParameters: [SageMakerClientTypes.EnvironmentParameter]?
        /// The inference specification name in the model package version.
        public var inferenceSpecificationName: Swift.String?

        public init(
            compilationJobName: Swift.String? = nil,
            environmentParameters: [SageMakerClientTypes.EnvironmentParameter]? = nil,
            inferenceSpecificationName: Swift.String? = nil
        )
        {
            self.compilationJobName = compilationJobName
            self.environmentParameters = environmentParameters
            self.inferenceSpecificationName = inferenceSpecificationName
        }
    }

}

extension SageMakerClientTypes {
    /// A list of recommendations made by Amazon SageMaker Inference Recommender.
    public struct InferenceRecommendation {
        /// Defines the endpoint configuration parameters.
        /// This member is required.
        public var endpointConfiguration: SageMakerClientTypes.EndpointOutputConfiguration?
        /// A timestamp that shows when the benchmark completed.
        public var invocationEndTime: Foundation.Date?
        /// A timestamp that shows when the benchmark started.
        public var invocationStartTime: Foundation.Date?
        /// The metrics used to decide what recommendation to make.
        public var metrics: SageMakerClientTypes.RecommendationMetrics?
        /// Defines the model configuration.
        /// This member is required.
        public var modelConfiguration: SageMakerClientTypes.ModelConfiguration?
        /// The recommendation ID which uniquely identifies each recommendation.
        public var recommendationId: Swift.String?

        public init(
            endpointConfiguration: SageMakerClientTypes.EndpointOutputConfiguration? = nil,
            invocationEndTime: Foundation.Date? = nil,
            invocationStartTime: Foundation.Date? = nil,
            metrics: SageMakerClientTypes.RecommendationMetrics? = nil,
            modelConfiguration: SageMakerClientTypes.ModelConfiguration? = nil,
            recommendationId: Swift.String? = nil
        )
        {
            self.endpointConfiguration = endpointConfiguration
            self.invocationEndTime = invocationEndTime
            self.invocationStartTime = invocationStartTime
            self.metrics = metrics
            self.modelConfiguration = modelConfiguration
            self.recommendationId = recommendationId
        }
    }

}

extension SageMakerClientTypes {

    public enum RecommendationJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case deleted
        case deleting
        case failed
        case inProgress
        case pending
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationJobStatus] {
            return [
                .completed,
                .deleted,
                .deleting,
                .failed,
                .inProgress,
                .pending,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .deleted: return "DELETED"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .pending: return "PENDING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeInferenceRecommendationsJobOutput {
    /// A timestamp that shows when the job completed.
    public var completionTime: Foundation.Date?
    /// A timestamp that shows when the job was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The performance results from running an Inference Recommender job on an existing endpoint.
    public var endpointPerformances: [SageMakerClientTypes.EndpointPerformance]?
    /// If the job fails, provides information why the job failed.
    public var failureReason: Swift.String?
    /// The recommendations made by Inference Recommender.
    public var inferenceRecommendations: [SageMakerClientTypes.InferenceRecommendation]?
    /// Returns information about the versioned model package Amazon Resource Name (ARN), the traffic pattern, and endpoint configurations you provided when you initiated the job.
    /// This member is required.
    public var inputConfig: SageMakerClientTypes.RecommendationJobInputConfig?
    /// The Amazon Resource Name (ARN) of the job.
    /// This member is required.
    public var jobArn: Swift.String?
    /// The job description that you provided when you initiated the job.
    public var jobDescription: Swift.String?
    /// The name of the job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobName: Swift.String?
    /// The job type that you provided when you initiated the job.
    /// This member is required.
    public var jobType: SageMakerClientTypes.RecommendationJobType?
    /// A timestamp that shows when the job was last modified.
    /// This member is required.
    public var lastModifiedTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the Amazon Web Services Identity and Access Management (IAM) role you provided when you initiated the job.
    /// This member is required.
    public var roleArn: Swift.String?
    /// The status of the job.
    /// This member is required.
    public var status: SageMakerClientTypes.RecommendationJobStatus?
    /// The stopping conditions that you provided when you initiated the job.
    public var stoppingConditions: SageMakerClientTypes.RecommendationJobStoppingConditions?

    public init(
        completionTime: Foundation.Date? = nil,
        creationTime: Foundation.Date? = nil,
        endpointPerformances: [SageMakerClientTypes.EndpointPerformance]? = nil,
        failureReason: Swift.String? = nil,
        inferenceRecommendations: [SageMakerClientTypes.InferenceRecommendation]? = nil,
        inputConfig: SageMakerClientTypes.RecommendationJobInputConfig? = nil,
        jobArn: Swift.String? = nil,
        jobDescription: Swift.String? = nil,
        jobName: Swift.String? = nil,
        jobType: SageMakerClientTypes.RecommendationJobType? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        roleArn: Swift.String? = nil,
        status: SageMakerClientTypes.RecommendationJobStatus? = nil,
        stoppingConditions: SageMakerClientTypes.RecommendationJobStoppingConditions? = nil
    )
    {
        self.completionTime = completionTime
        self.creationTime = creationTime
        self.endpointPerformances = endpointPerformances
        self.failureReason = failureReason
        self.inferenceRecommendations = inferenceRecommendations
        self.inputConfig = inputConfig
        self.jobArn = jobArn
        self.jobDescription = jobDescription
        self.jobName = jobName
        self.jobType = jobType
        self.lastModifiedTime = lastModifiedTime
        self.roleArn = roleArn
        self.status = status
        self.stoppingConditions = stoppingConditions
    }
}

public struct DescribeLabelingJobInput {
    /// The name of the labeling job to return information for.
    /// This member is required.
    public var labelingJobName: Swift.String?

    public init(
        labelingJobName: Swift.String? = nil
    )
    {
        self.labelingJobName = labelingJobName
    }
}

extension SageMakerClientTypes {
    /// Provides a breakdown of the number of objects labeled.
    public struct LabelCounters {
        /// The total number of objects that could not be labeled due to an error.
        public var failedNonRetryableError: Swift.Int?
        /// The total number of objects labeled by a human worker.
        public var humanLabeled: Swift.Int?
        /// The total number of objects labeled by automated data labeling.
        public var machineLabeled: Swift.Int?
        /// The total number of objects labeled.
        public var totalLabeled: Swift.Int?
        /// The total number of objects not yet labeled.
        public var unlabeled: Swift.Int?

        public init(
            failedNonRetryableError: Swift.Int? = nil,
            humanLabeled: Swift.Int? = nil,
            machineLabeled: Swift.Int? = nil,
            totalLabeled: Swift.Int? = nil,
            unlabeled: Swift.Int? = nil
        )
        {
            self.failedNonRetryableError = failedNonRetryableError
            self.humanLabeled = humanLabeled
            self.machineLabeled = machineLabeled
            self.totalLabeled = totalLabeled
            self.unlabeled = unlabeled
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies the location of the output produced by the labeling job.
    public struct LabelingJobOutput {
        /// The Amazon Resource Name (ARN) for the most recent SageMaker model trained as part of automated data labeling.
        public var finalActiveLearningModelArn: Swift.String?
        /// The Amazon S3 bucket location of the manifest file for labeled data.
        /// This member is required.
        public var outputDatasetS3Uri: Swift.String?

        public init(
            finalActiveLearningModelArn: Swift.String? = nil,
            outputDatasetS3Uri: Swift.String? = nil
        )
        {
            self.finalActiveLearningModelArn = finalActiveLearningModelArn
            self.outputDatasetS3Uri = outputDatasetS3Uri
        }
    }

}

extension SageMakerClientTypes {

    public enum LabelingJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case initializing
        case inProgress
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [LabelingJobStatus] {
            return [
                .completed,
                .failed,
                .initializing,
                .inProgress,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .initializing: return "Initializing"
            case .inProgress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeLabelingJobOutput {
    /// The date and time that the labeling job was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// If the job failed, the reason that it failed.
    public var failureReason: Swift.String?
    /// Configuration information required for human workers to complete a labeling task.
    /// This member is required.
    public var humanTaskConfig: SageMakerClientTypes.HumanTaskConfig?
    /// Input configuration information for the labeling job, such as the Amazon S3 location of the data objects and the location of the manifest file that describes the data objects.
    /// This member is required.
    public var inputConfig: SageMakerClientTypes.LabelingJobInputConfig?
    /// A unique identifier for work done as part of a labeling job.
    /// This member is required.
    public var jobReferenceCode: Swift.String?
    /// The attribute used as the label in the output manifest file.
    public var labelAttributeName: Swift.String?
    /// The S3 location of the JSON file that defines the categories used to label data objects. Please note the following label-category limits:
    ///
    /// * Semantic segmentation labeling jobs using automated labeling: 20 labels
    ///
    /// * Box bounding labeling jobs (all): 10 labels
    ///
    ///
    /// The file is a JSON structure in the following format: {
    ///     "document-version": "2018-11-28"
    ///
    ///
    ///     "labels": [
    ///
    ///
    ///     {
    ///
    ///
    ///     "label": "label 1"
    ///
    ///
    ///     },
    ///
    ///
    ///     {
    ///
    ///
    ///     "label": "label 2"
    ///
    ///
    ///     },
    ///
    ///
    ///     ...
    ///
    ///
    ///     {
    ///
    ///
    ///     "label": "label n"
    ///
    ///
    ///     }
    ///
    ///
    ///     ]
    ///
    ///
    ///     }
    public var labelCategoryConfigS3Uri: Swift.String?
    /// Provides a breakdown of the number of data objects labeled by humans, the number of objects labeled by machine, the number of objects than couldn't be labeled, and the total number of objects labeled.
    /// This member is required.
    public var labelCounters: SageMakerClientTypes.LabelCounters?
    /// Configuration information for automated data labeling.
    public var labelingJobAlgorithmsConfig: SageMakerClientTypes.LabelingJobAlgorithmsConfig?
    /// The Amazon Resource Name (ARN) of the labeling job.
    /// This member is required.
    public var labelingJobArn: Swift.String?
    /// The name assigned to the labeling job when it was created.
    /// This member is required.
    public var labelingJobName: Swift.String?
    /// The location of the output produced by the labeling job.
    public var labelingJobOutput: SageMakerClientTypes.LabelingJobOutput?
    /// The processing status of the labeling job.
    /// This member is required.
    public var labelingJobStatus: SageMakerClientTypes.LabelingJobStatus?
    /// The date and time that the labeling job was last updated.
    /// This member is required.
    public var lastModifiedTime: Foundation.Date?
    /// The location of the job's output data and the Amazon Web Services Key Management Service key ID for the key used to encrypt the output data, if any.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.LabelingJobOutputConfig?
    /// The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on your behalf during data labeling.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A set of conditions for stopping a labeling job. If any of the conditions are met, the job is automatically stopped.
    public var stoppingConditions: SageMakerClientTypes.LabelingJobStoppingConditions?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        creationTime: Foundation.Date? = nil,
        failureReason: Swift.String? = nil,
        humanTaskConfig: SageMakerClientTypes.HumanTaskConfig? = nil,
        inputConfig: SageMakerClientTypes.LabelingJobInputConfig? = nil,
        jobReferenceCode: Swift.String? = nil,
        labelAttributeName: Swift.String? = nil,
        labelCategoryConfigS3Uri: Swift.String? = nil,
        labelCounters: SageMakerClientTypes.LabelCounters? = nil,
        labelingJobAlgorithmsConfig: SageMakerClientTypes.LabelingJobAlgorithmsConfig? = nil,
        labelingJobArn: Swift.String? = nil,
        labelingJobName: Swift.String? = nil,
        labelingJobOutput: SageMakerClientTypes.LabelingJobOutput? = nil,
        labelingJobStatus: SageMakerClientTypes.LabelingJobStatus? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        outputConfig: SageMakerClientTypes.LabelingJobOutputConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingConditions: SageMakerClientTypes.LabelingJobStoppingConditions? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.creationTime = creationTime
        self.failureReason = failureReason
        self.humanTaskConfig = humanTaskConfig
        self.inputConfig = inputConfig
        self.jobReferenceCode = jobReferenceCode
        self.labelAttributeName = labelAttributeName
        self.labelCategoryConfigS3Uri = labelCategoryConfigS3Uri
        self.labelCounters = labelCounters
        self.labelingJobAlgorithmsConfig = labelingJobAlgorithmsConfig
        self.labelingJobArn = labelingJobArn
        self.labelingJobName = labelingJobName
        self.labelingJobOutput = labelingJobOutput
        self.labelingJobStatus = labelingJobStatus
        self.lastModifiedTime = lastModifiedTime
        self.outputConfig = outputConfig
        self.roleArn = roleArn
        self.stoppingConditions = stoppingConditions
        self.tags = tags
    }
}

public struct DescribeLineageGroupInput {
    /// The name of the lineage group.
    /// This member is required.
    public var lineageGroupName: Swift.String?

    public init(
        lineageGroupName: Swift.String? = nil
    )
    {
        self.lineageGroupName = lineageGroupName
    }
}

public struct DescribeLineageGroupOutput {
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// The creation time of lineage group.
    public var creationTime: Foundation.Date?
    /// The description of the lineage group.
    public var description: Swift.String?
    /// The display name of the lineage group.
    public var displayName: Swift.String?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// The last modified time of the lineage group.
    public var lastModifiedTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the lineage group.
    public var lineageGroupArn: Swift.String?
    /// The name of the lineage group.
    public var lineageGroupName: Swift.String?

    public init(
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: Foundation.Date? = nil,
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        lineageGroupArn: Swift.String? = nil,
        lineageGroupName: Swift.String? = nil
    )
    {
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.description = description
        self.displayName = displayName
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.lineageGroupArn = lineageGroupArn
        self.lineageGroupName = lineageGroupName
    }
}

public struct DescribeMlflowTrackingServerInput {
    /// The name of the MLflow Tracking Server to describe.
    /// This member is required.
    public var trackingServerName: Swift.String?

    public init(
        trackingServerName: Swift.String? = nil
    )
    {
        self.trackingServerName = trackingServerName
    }
}

extension SageMakerClientTypes {

    public enum IsTrackingServerActive: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [IsTrackingServerActive] {
            return [
                .active,
                .inactive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .inactive: return "Inactive"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum TrackingServerStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case created
        case createFailed
        case creating
        case deleteFailed
        case deleting
        case maintenanceComplete
        case maintenanceFailed
        case maintenanceInProgress
        case started
        case starting
        case startFailed
        case stopped
        case stopping
        case stopFailed
        case updated
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [TrackingServerStatus] {
            return [
                .created,
                .createFailed,
                .creating,
                .deleteFailed,
                .deleting,
                .maintenanceComplete,
                .maintenanceFailed,
                .maintenanceInProgress,
                .started,
                .starting,
                .startFailed,
                .stopped,
                .stopping,
                .stopFailed,
                .updated,
                .updateFailed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .created: return "Created"
            case .createFailed: return "CreateFailed"
            case .creating: return "Creating"
            case .deleteFailed: return "DeleteFailed"
            case .deleting: return "Deleting"
            case .maintenanceComplete: return "MaintenanceComplete"
            case .maintenanceFailed: return "MaintenanceFailed"
            case .maintenanceInProgress: return "MaintenanceInProgress"
            case .started: return "Started"
            case .starting: return "Starting"
            case .startFailed: return "StartFailed"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .stopFailed: return "StopFailed"
            case .updated: return "Updated"
            case .updateFailed: return "UpdateFailed"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeMlflowTrackingServerOutput {
    /// The S3 URI of the general purpose bucket used as the MLflow Tracking Server artifact store.
    public var artifactStoreUri: Swift.String?
    /// Whether automatic registration of new MLflow models to the SageMaker Model Registry is enabled.
    public var automaticModelRegistration: Swift.Bool?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// The timestamp of when the described MLflow Tracking Server was created.
    public var creationTime: Foundation.Date?
    /// Whether the described MLflow Tracking Server is currently active.
    public var isActive: SageMakerClientTypes.IsTrackingServerActive?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// The timestamp of when the described MLflow Tracking Server was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The MLflow version used for the described tracking server.
    public var mlflowVersion: Swift.String?
    /// The Amazon Resource Name (ARN) for an IAM role in your account that the described MLflow Tracking Server uses to access the artifact store in Amazon S3.
    public var roleArn: Swift.String?
    /// The ARN of the described tracking server.
    public var trackingServerArn: Swift.String?
    /// The name of the described tracking server.
    public var trackingServerName: Swift.String?
    /// The size of the described tracking server.
    public var trackingServerSize: SageMakerClientTypes.TrackingServerSize?
    /// The current creation status of the described MLflow Tracking Server.
    public var trackingServerStatus: SageMakerClientTypes.TrackingServerStatus?
    /// The URL to connect to the MLflow user interface for the described tracking server.
    public var trackingServerUrl: Swift.String?
    /// The day and time of the week when weekly maintenance occurs on the described tracking server.
    public var weeklyMaintenanceWindowStart: Swift.String?

    public init(
        artifactStoreUri: Swift.String? = nil,
        automaticModelRegistration: Swift.Bool? = nil,
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: Foundation.Date? = nil,
        isActive: SageMakerClientTypes.IsTrackingServerActive? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        mlflowVersion: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        trackingServerArn: Swift.String? = nil,
        trackingServerName: Swift.String? = nil,
        trackingServerSize: SageMakerClientTypes.TrackingServerSize? = nil,
        trackingServerStatus: SageMakerClientTypes.TrackingServerStatus? = nil,
        trackingServerUrl: Swift.String? = nil,
        weeklyMaintenanceWindowStart: Swift.String? = nil
    )
    {
        self.artifactStoreUri = artifactStoreUri
        self.automaticModelRegistration = automaticModelRegistration
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.isActive = isActive
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.mlflowVersion = mlflowVersion
        self.roleArn = roleArn
        self.trackingServerArn = trackingServerArn
        self.trackingServerName = trackingServerName
        self.trackingServerSize = trackingServerSize
        self.trackingServerStatus = trackingServerStatus
        self.trackingServerUrl = trackingServerUrl
        self.weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStart
    }
}

public struct DescribeModelInput {
    /// The name of the model.
    /// This member is required.
    public var modelName: Swift.String?

    public init(
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

public struct DescribeModelOutput {
    /// The containers in the inference pipeline.
    public var containers: [SageMakerClientTypes.ContainerDefinition]?
    /// A timestamp that shows when the model was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// A set of recommended deployment configurations for the model.
    public var deploymentRecommendation: SageMakerClientTypes.DeploymentRecommendation?
    /// If True, no inbound or outbound network calls can be made to or from the model container.
    public var enableNetworkIsolation: Swift.Bool?
    /// The Amazon Resource Name (ARN) of the IAM role that you specified for the model.
    public var executionRoleArn: Swift.String?
    /// Specifies details of how containers in a multi-container endpoint are called.
    public var inferenceExecutionConfig: SageMakerClientTypes.InferenceExecutionConfig?
    /// The Amazon Resource Name (ARN) of the model.
    /// This member is required.
    public var modelArn: Swift.String?
    /// Name of the SageMaker model.
    /// This member is required.
    public var modelName: Swift.String?
    /// The location of the primary inference code, associated artifacts, and custom environment map that the inference code uses when it is deployed in production.
    public var primaryContainer: SageMakerClientTypes.ContainerDefinition?
    /// A [VpcConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html) object that specifies the VPC that this model has access to. For more information, see [Protect Endpoints by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html)
    public var vpcConfig: SageMakerClientTypes.VpcConfig?

    public init(
        containers: [SageMakerClientTypes.ContainerDefinition]? = nil,
        creationTime: Foundation.Date? = nil,
        deploymentRecommendation: SageMakerClientTypes.DeploymentRecommendation? = nil,
        enableNetworkIsolation: Swift.Bool? = nil,
        executionRoleArn: Swift.String? = nil,
        inferenceExecutionConfig: SageMakerClientTypes.InferenceExecutionConfig? = nil,
        modelArn: Swift.String? = nil,
        modelName: Swift.String? = nil,
        primaryContainer: SageMakerClientTypes.ContainerDefinition? = nil,
        vpcConfig: SageMakerClientTypes.VpcConfig? = nil
    )
    {
        self.containers = containers
        self.creationTime = creationTime
        self.deploymentRecommendation = deploymentRecommendation
        self.enableNetworkIsolation = enableNetworkIsolation
        self.executionRoleArn = executionRoleArn
        self.inferenceExecutionConfig = inferenceExecutionConfig
        self.modelArn = modelArn
        self.modelName = modelName
        self.primaryContainer = primaryContainer
        self.vpcConfig = vpcConfig
    }
}

public struct DescribeModelBiasJobDefinitionInput {
    /// The name of the model bias job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobDefinitionName: Swift.String?

    public init(
        jobDefinitionName: Swift.String? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
    }
}

public struct DescribeModelBiasJobDefinitionOutput {
    /// The time at which the model bias job was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the model bias job.
    /// This member is required.
    public var jobDefinitionArn: Swift.String?
    /// The name of the bias job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// Identifies the resources to deploy for a monitoring job.
    /// This member is required.
    public var jobResources: SageMakerClientTypes.MonitoringResources?
    /// Configures the model bias job to run a specified Docker container image.
    /// This member is required.
    public var modelBiasAppSpecification: SageMakerClientTypes.ModelBiasAppSpecification?
    /// The baseline configuration for a model bias job.
    public var modelBiasBaselineConfig: SageMakerClientTypes.ModelBiasBaselineConfig?
    /// Inputs for the model bias job.
    /// This member is required.
    public var modelBiasJobInput: SageMakerClientTypes.ModelBiasJobInput?
    /// The output configuration for monitoring jobs.
    /// This member is required.
    public var modelBiasJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    /// Networking options for a model bias job.
    public var networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    /// The Amazon Resource Name (ARN) of the IAM role that has read permission to the input data location and write permission to the output data location in Amazon S3.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A time limit for how long the monitoring job is allowed to run before stopping.
    public var stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?

    public init(
        creationTime: Foundation.Date? = nil,
        jobDefinitionArn: Swift.String? = nil,
        jobDefinitionName: Swift.String? = nil,
        jobResources: SageMakerClientTypes.MonitoringResources? = nil,
        modelBiasAppSpecification: SageMakerClientTypes.ModelBiasAppSpecification? = nil,
        modelBiasBaselineConfig: SageMakerClientTypes.ModelBiasBaselineConfig? = nil,
        modelBiasJobInput: SageMakerClientTypes.ModelBiasJobInput? = nil,
        modelBiasJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig? = nil,
        networkConfig: SageMakerClientTypes.MonitoringNetworkConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition? = nil
    )
    {
        self.creationTime = creationTime
        self.jobDefinitionArn = jobDefinitionArn
        self.jobDefinitionName = jobDefinitionName
        self.jobResources = jobResources
        self.modelBiasAppSpecification = modelBiasAppSpecification
        self.modelBiasBaselineConfig = modelBiasBaselineConfig
        self.modelBiasJobInput = modelBiasJobInput
        self.modelBiasJobOutputConfig = modelBiasJobOutputConfig
        self.networkConfig = networkConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
    }
}

public struct DescribeModelCardInput {
    /// The name or Amazon Resource Name (ARN) of the model card to describe.
    /// This member is required.
    public var modelCardName: Swift.String?
    /// The version of the model card to describe. If a version is not provided, then the latest version of the model card is described.
    public var modelCardVersion: Swift.Int?

    public init(
        modelCardName: Swift.String? = nil,
        modelCardVersion: Swift.Int? = nil
    )
    {
        self.modelCardName = modelCardName
        self.modelCardVersion = modelCardVersion
    }
}

extension SageMakerClientTypes {

    public enum ModelCardProcessingStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case contentDeleted
        case deleteCompleted
        case deleteFailed
        case deleteInprogress
        case deletePending
        case exportjobsDeleted
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelCardProcessingStatus] {
            return [
                .contentDeleted,
                .deleteCompleted,
                .deleteFailed,
                .deleteInprogress,
                .deletePending,
                .exportjobsDeleted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .contentDeleted: return "ContentDeleted"
            case .deleteCompleted: return "DeleteCompleted"
            case .deleteFailed: return "DeleteFailed"
            case .deleteInprogress: return "DeleteInProgress"
            case .deletePending: return "DeletePending"
            case .exportjobsDeleted: return "ExportJobsDeleted"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeModelCardOutput {
    /// The content of the model card.
    /// This member is required.
    public var content: Swift.String?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    /// This member is required.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// The date and time the model card was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// The date and time the model card was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the model card.
    /// This member is required.
    public var modelCardArn: Swift.String?
    /// The name of the model card.
    /// This member is required.
    public var modelCardName: Swift.String?
    /// The processing status of model card deletion. The ModelCardProcessingStatus updates throughout the different deletion steps.
    ///
    /// * DeletePending: Model card deletion request received.
    ///
    /// * DeleteInProgress: Model card deletion is in progress.
    ///
    /// * ContentDeleted: Deleted model card content.
    ///
    /// * ExportJobsDeleted: Deleted all export jobs associated with the model card.
    ///
    /// * DeleteCompleted: Successfully deleted the model card.
    ///
    /// * DeleteFailed: The model card failed to delete.
    public var modelCardProcessingStatus: SageMakerClientTypes.ModelCardProcessingStatus?
    /// The approval status of the model card within your organization. Different organizations might have different criteria for model card review and approval.
    ///
    /// * Draft: The model card is a work in progress.
    ///
    /// * PendingReview: The model card is pending review.
    ///
    /// * Approved: The model card is approved.
    ///
    /// * Archived: The model card is archived. No more updates should be made to the model card, but it can still be exported.
    /// This member is required.
    public var modelCardStatus: SageMakerClientTypes.ModelCardStatus?
    /// The version of the model card.
    /// This member is required.
    public var modelCardVersion: Swift.Int?
    /// The security configuration used to protect model card content.
    public var securityConfig: SageMakerClientTypes.ModelCardSecurityConfig?

    public init(
        content: Swift.String? = nil,
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: Foundation.Date? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        modelCardArn: Swift.String? = nil,
        modelCardName: Swift.String? = nil,
        modelCardProcessingStatus: SageMakerClientTypes.ModelCardProcessingStatus? = nil,
        modelCardStatus: SageMakerClientTypes.ModelCardStatus? = nil,
        modelCardVersion: Swift.Int? = nil,
        securityConfig: SageMakerClientTypes.ModelCardSecurityConfig? = nil
    )
    {
        self.content = content
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.modelCardArn = modelCardArn
        self.modelCardName = modelCardName
        self.modelCardProcessingStatus = modelCardProcessingStatus
        self.modelCardStatus = modelCardStatus
        self.modelCardVersion = modelCardVersion
        self.securityConfig = securityConfig
    }
}

extension DescribeModelCardOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeModelCardOutput(createdBy: \(Swift.String(describing: createdBy)), creationTime: \(Swift.String(describing: creationTime)), lastModifiedBy: \(Swift.String(describing: lastModifiedBy)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), modelCardArn: \(Swift.String(describing: modelCardArn)), modelCardName: \(Swift.String(describing: modelCardName)), modelCardProcessingStatus: \(Swift.String(describing: modelCardProcessingStatus)), modelCardStatus: \(Swift.String(describing: modelCardStatus)), modelCardVersion: \(Swift.String(describing: modelCardVersion)), securityConfig: \(Swift.String(describing: securityConfig)), content: \"CONTENT_REDACTED\")"}
}

public struct DescribeModelCardExportJobInput {
    /// The Amazon Resource Name (ARN) of the model card export job to describe.
    /// This member is required.
    public var modelCardExportJobArn: Swift.String?

    public init(
        modelCardExportJobArn: Swift.String? = nil
    )
    {
        self.modelCardExportJobArn = modelCardExportJobArn
    }
}

extension SageMakerClientTypes {
    /// The artifacts of the model card export job.
    public struct ModelCardExportArtifacts {
        /// The Amazon S3 URI of the exported model artifacts.
        /// This member is required.
        public var s3ExportArtifacts: Swift.String?

        public init(
            s3ExportArtifacts: Swift.String? = nil
        )
        {
            self.s3ExportArtifacts = s3ExportArtifacts
        }
    }

}

extension SageMakerClientTypes {

    public enum ModelCardExportJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelCardExportJobStatus] {
            return [
                .completed,
                .failed,
                .inProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeModelCardExportJobOutput {
    /// The date and time that the model export job was created.
    /// This member is required.
    public var createdAt: Foundation.Date?
    /// The exported model card artifacts.
    public var exportArtifacts: SageMakerClientTypes.ModelCardExportArtifacts?
    /// The failure reason if the model export job fails.
    public var failureReason: Swift.String?
    /// The date and time that the model export job was last modified.
    /// This member is required.
    public var lastModifiedAt: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the model card export job.
    /// This member is required.
    public var modelCardExportJobArn: Swift.String?
    /// The name of the model card export job to describe.
    /// This member is required.
    public var modelCardExportJobName: Swift.String?
    /// The name or Amazon Resource Name (ARN) of the model card that the model export job exports.
    /// This member is required.
    public var modelCardName: Swift.String?
    /// The version of the model card that the model export job exports.
    /// This member is required.
    public var modelCardVersion: Swift.Int?
    /// The export output details for the model card.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.ModelCardExportOutputConfig?
    /// The completion status of the model card export job.
    ///
    /// * InProgress: The model card export job is in progress.
    ///
    /// * Completed: The model card export job is complete.
    ///
    /// * Failed: The model card export job failed. To see the reason for the failure, see the FailureReason field in the response to a DescribeModelCardExportJob call.
    /// This member is required.
    public var status: SageMakerClientTypes.ModelCardExportJobStatus?

    public init(
        createdAt: Foundation.Date? = nil,
        exportArtifacts: SageMakerClientTypes.ModelCardExportArtifacts? = nil,
        failureReason: Swift.String? = nil,
        lastModifiedAt: Foundation.Date? = nil,
        modelCardExportJobArn: Swift.String? = nil,
        modelCardExportJobName: Swift.String? = nil,
        modelCardName: Swift.String? = nil,
        modelCardVersion: Swift.Int? = nil,
        outputConfig: SageMakerClientTypes.ModelCardExportOutputConfig? = nil,
        status: SageMakerClientTypes.ModelCardExportJobStatus? = nil
    )
    {
        self.createdAt = createdAt
        self.exportArtifacts = exportArtifacts
        self.failureReason = failureReason
        self.lastModifiedAt = lastModifiedAt
        self.modelCardExportJobArn = modelCardExportJobArn
        self.modelCardExportJobName = modelCardExportJobName
        self.modelCardName = modelCardName
        self.modelCardVersion = modelCardVersion
        self.outputConfig = outputConfig
        self.status = status
    }
}

public struct DescribeModelExplainabilityJobDefinitionInput {
    /// The name of the model explainability job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobDefinitionName: Swift.String?

    public init(
        jobDefinitionName: Swift.String? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
    }
}

public struct DescribeModelExplainabilityJobDefinitionOutput {
    /// The time at which the model explainability job was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the model explainability job.
    /// This member is required.
    public var jobDefinitionArn: Swift.String?
    /// The name of the explainability job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// Identifies the resources to deploy for a monitoring job.
    /// This member is required.
    public var jobResources: SageMakerClientTypes.MonitoringResources?
    /// Configures the model explainability job to run a specified Docker container image.
    /// This member is required.
    public var modelExplainabilityAppSpecification: SageMakerClientTypes.ModelExplainabilityAppSpecification?
    /// The baseline configuration for a model explainability job.
    public var modelExplainabilityBaselineConfig: SageMakerClientTypes.ModelExplainabilityBaselineConfig?
    /// Inputs for the model explainability job.
    /// This member is required.
    public var modelExplainabilityJobInput: SageMakerClientTypes.ModelExplainabilityJobInput?
    /// The output configuration for monitoring jobs.
    /// This member is required.
    public var modelExplainabilityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    /// Networking options for a model explainability job.
    public var networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    /// The Amazon Resource Name (ARN) of the IAM role that has read permission to the input data location and write permission to the output data location in Amazon S3.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A time limit for how long the monitoring job is allowed to run before stopping.
    public var stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?

    public init(
        creationTime: Foundation.Date? = nil,
        jobDefinitionArn: Swift.String? = nil,
        jobDefinitionName: Swift.String? = nil,
        jobResources: SageMakerClientTypes.MonitoringResources? = nil,
        modelExplainabilityAppSpecification: SageMakerClientTypes.ModelExplainabilityAppSpecification? = nil,
        modelExplainabilityBaselineConfig: SageMakerClientTypes.ModelExplainabilityBaselineConfig? = nil,
        modelExplainabilityJobInput: SageMakerClientTypes.ModelExplainabilityJobInput? = nil,
        modelExplainabilityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig? = nil,
        networkConfig: SageMakerClientTypes.MonitoringNetworkConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition? = nil
    )
    {
        self.creationTime = creationTime
        self.jobDefinitionArn = jobDefinitionArn
        self.jobDefinitionName = jobDefinitionName
        self.jobResources = jobResources
        self.modelExplainabilityAppSpecification = modelExplainabilityAppSpecification
        self.modelExplainabilityBaselineConfig = modelExplainabilityBaselineConfig
        self.modelExplainabilityJobInput = modelExplainabilityJobInput
        self.modelExplainabilityJobOutputConfig = modelExplainabilityJobOutputConfig
        self.networkConfig = networkConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
    }
}

public struct DescribeModelPackageInput {
    /// The name or Amazon Resource Name (ARN) of the model package to describe. When you specify a name, the name must have 1 to 63 characters. Valid characters are a-z, A-Z, 0-9, and - (hyphen).
    /// This member is required.
    public var modelPackageName: Swift.String?

    public init(
        modelPackageName: Swift.String? = nil
    )
    {
        self.modelPackageName = modelPackageName
    }
}

extension SageMakerClientTypes {

    public enum DetailedModelPackageStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case notStarted
        case sdkUnknown(Swift.String)

        public static var allCases: [DetailedModelPackageStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .notStarted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .notStarted: return "NotStarted"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Represents the overall status of a model package.
    public struct ModelPackageStatusItem {
        /// if the overall status is Failed, the reason for the failure.
        public var failureReason: Swift.String?
        /// The name of the model package for which the overall status is being reported.
        /// This member is required.
        public var name: Swift.String?
        /// The current status.
        /// This member is required.
        public var status: SageMakerClientTypes.DetailedModelPackageStatus?

        public init(
            failureReason: Swift.String? = nil,
            name: Swift.String? = nil,
            status: SageMakerClientTypes.DetailedModelPackageStatus? = nil
        )
        {
            self.failureReason = failureReason
            self.name = name
            self.status = status
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies the validation and image scan statuses of the model package.
    public struct ModelPackageStatusDetails {
        /// The status of the scan of the Docker image container for the model package.
        public var imageScanStatuses: [SageMakerClientTypes.ModelPackageStatusItem]?
        /// The validation status of the model package.
        /// This member is required.
        public var validationStatuses: [SageMakerClientTypes.ModelPackageStatusItem]?

        public init(
            imageScanStatuses: [SageMakerClientTypes.ModelPackageStatusItem]? = nil,
            validationStatuses: [SageMakerClientTypes.ModelPackageStatusItem]? = nil
        )
        {
            self.imageScanStatuses = imageScanStatuses
            self.validationStatuses = validationStatuses
        }
    }

}

public struct DescribeModelPackageOutput {
    /// An array of additional Inference Specification objects. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.
    public var additionalInferenceSpecifications: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]?
    /// A description provided for the model approval.
    public var approvalDescription: Swift.String?
    /// Whether the model package is certified for listing on Amazon Web Services Marketplace.
    public var certifyForMarketplace: Swift.Bool?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// A timestamp specifying when the model package was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The metadata properties associated with the model package versions.
    public var customerMetadataProperties: [Swift.String: Swift.String]?
    /// The machine learning domain of the model package you specified. Common machine learning domains include computer vision and natural language processing.
    public var domain: Swift.String?
    /// Represents the drift check baselines that can be used when the model monitor is set using the model package. For more information, see the topic on [Drift Detection against Previous Baselines in SageMaker Pipelines](https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-quality-clarify-baseline-lifecycle.html#pipelines-quality-clarify-baseline-drift-detection) in the Amazon SageMaker Developer Guide.
    public var driftCheckBaselines: SageMakerClientTypes.DriftCheckBaselines?
    /// Details about inference jobs that you can run with models based on this model package.
    public var inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// The last time that the model package was modified.
    public var lastModifiedTime: Foundation.Date?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// The approval status of the model package.
    public var modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
    /// The model card associated with the model package. Since ModelPackageModelCard is tied to a model package, it is a specific usage of a model card and its schema is simplified compared to the schema of ModelCard. The ModelPackageModelCard schema does not include model_package_details, and model_overview is composed of the model_creator and model_artifact properties. For more information about the model package model card schema, see [Model package model card schema](https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html#model-card-schema). For more information about the model card associated with the model package, see [View the Details of a Model Version](https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html).
    public var modelCard: SageMakerClientTypes.ModelPackageModelCard?
    /// Metrics for the model.
    public var modelMetrics: SageMakerClientTypes.ModelMetrics?
    /// The Amazon Resource Name (ARN) of the model package.
    /// This member is required.
    public var modelPackageArn: Swift.String?
    /// A brief summary of the model package.
    public var modelPackageDescription: Swift.String?
    /// If the model is a versioned model, the name of the model group that the versioned model belongs to.
    public var modelPackageGroupName: Swift.String?
    /// The name of the model package being described.
    /// This member is required.
    public var modelPackageName: Swift.String?
    /// The current status of the model package.
    /// This member is required.
    public var modelPackageStatus: SageMakerClientTypes.ModelPackageStatus?
    /// Details about the current status of the model package.
    /// This member is required.
    public var modelPackageStatusDetails: SageMakerClientTypes.ModelPackageStatusDetails?
    /// The version of the model package.
    public var modelPackageVersion: Swift.Int?
    /// The Amazon Simple Storage Service (Amazon S3) path where the sample payload are stored. This path points to a single gzip compressed tar archive (.tar.gz suffix).
    public var samplePayloadUrl: Swift.String?
    /// The KMS Key ID (KMSKeyId) used for encryption of model package information.
    public var securityConfig: SageMakerClientTypes.ModelPackageSecurityConfig?
    /// Indicates if you want to skip model validation.
    public var skipModelValidation: SageMakerClientTypes.SkipModelValidation?
    /// Details about the algorithm that was used to create the model package.
    public var sourceAlgorithmSpecification: SageMakerClientTypes.SourceAlgorithmSpecification?
    /// The URI of the source for the model package.
    public var sourceUri: Swift.String?
    /// The machine learning task you specified that your model package accomplishes. Common machine learning tasks include object detection and image classification.
    public var task: Swift.String?
    /// Configurations for one or more transform jobs that SageMaker runs to test the model package.
    public var validationSpecification: SageMakerClientTypes.ModelPackageValidationSpecification?

    public init(
        additionalInferenceSpecifications: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]? = nil,
        approvalDescription: Swift.String? = nil,
        certifyForMarketplace: Swift.Bool? = nil,
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: Foundation.Date? = nil,
        customerMetadataProperties: [Swift.String: Swift.String]? = nil,
        domain: Swift.String? = nil,
        driftCheckBaselines: SageMakerClientTypes.DriftCheckBaselines? = nil,
        inferenceSpecification: SageMakerClientTypes.InferenceSpecification? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus? = nil,
        modelCard: SageMakerClientTypes.ModelPackageModelCard? = nil,
        modelMetrics: SageMakerClientTypes.ModelMetrics? = nil,
        modelPackageArn: Swift.String? = nil,
        modelPackageDescription: Swift.String? = nil,
        modelPackageGroupName: Swift.String? = nil,
        modelPackageName: Swift.String? = nil,
        modelPackageStatus: SageMakerClientTypes.ModelPackageStatus? = nil,
        modelPackageStatusDetails: SageMakerClientTypes.ModelPackageStatusDetails? = nil,
        modelPackageVersion: Swift.Int? = nil,
        samplePayloadUrl: Swift.String? = nil,
        securityConfig: SageMakerClientTypes.ModelPackageSecurityConfig? = nil,
        skipModelValidation: SageMakerClientTypes.SkipModelValidation? = nil,
        sourceAlgorithmSpecification: SageMakerClientTypes.SourceAlgorithmSpecification? = nil,
        sourceUri: Swift.String? = nil,
        task: Swift.String? = nil,
        validationSpecification: SageMakerClientTypes.ModelPackageValidationSpecification? = nil
    )
    {
        self.additionalInferenceSpecifications = additionalInferenceSpecifications
        self.approvalDescription = approvalDescription
        self.certifyForMarketplace = certifyForMarketplace
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.customerMetadataProperties = customerMetadataProperties
        self.domain = domain
        self.driftCheckBaselines = driftCheckBaselines
        self.inferenceSpecification = inferenceSpecification
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.metadataProperties = metadataProperties
        self.modelApprovalStatus = modelApprovalStatus
        self.modelCard = modelCard
        self.modelMetrics = modelMetrics
        self.modelPackageArn = modelPackageArn
        self.modelPackageDescription = modelPackageDescription
        self.modelPackageGroupName = modelPackageGroupName
        self.modelPackageName = modelPackageName
        self.modelPackageStatus = modelPackageStatus
        self.modelPackageStatusDetails = modelPackageStatusDetails
        self.modelPackageVersion = modelPackageVersion
        self.samplePayloadUrl = samplePayloadUrl
        self.securityConfig = securityConfig
        self.skipModelValidation = skipModelValidation
        self.sourceAlgorithmSpecification = sourceAlgorithmSpecification
        self.sourceUri = sourceUri
        self.task = task
        self.validationSpecification = validationSpecification
    }
}

public struct DescribeModelPackageGroupInput {
    /// The name of the model group to describe.
    /// This member is required.
    public var modelPackageGroupName: Swift.String?

    public init(
        modelPackageGroupName: Swift.String? = nil
    )
    {
        self.modelPackageGroupName = modelPackageGroupName
    }
}

extension SageMakerClientTypes {

    public enum ModelPackageGroupStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case deleteFailed
        case deleting
        case failed
        case inProgress
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelPackageGroupStatus] {
            return [
                .completed,
                .deleteFailed,
                .deleting,
                .failed,
                .inProgress,
                .pending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .deleteFailed: return "DeleteFailed"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .pending: return "Pending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeModelPackageGroupOutput {
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    /// This member is required.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// The time that the model group was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the model group.
    /// This member is required.
    public var modelPackageGroupArn: Swift.String?
    /// A description of the model group.
    public var modelPackageGroupDescription: Swift.String?
    /// The name of the model group.
    /// This member is required.
    public var modelPackageGroupName: Swift.String?
    /// The status of the model group.
    /// This member is required.
    public var modelPackageGroupStatus: SageMakerClientTypes.ModelPackageGroupStatus?

    public init(
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: Foundation.Date? = nil,
        modelPackageGroupArn: Swift.String? = nil,
        modelPackageGroupDescription: Swift.String? = nil,
        modelPackageGroupName: Swift.String? = nil,
        modelPackageGroupStatus: SageMakerClientTypes.ModelPackageGroupStatus? = nil
    )
    {
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.modelPackageGroupArn = modelPackageGroupArn
        self.modelPackageGroupDescription = modelPackageGroupDescription
        self.modelPackageGroupName = modelPackageGroupName
        self.modelPackageGroupStatus = modelPackageGroupStatus
    }
}

public struct DescribeModelQualityJobDefinitionInput {
    /// The name of the model quality job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobDefinitionName: Swift.String?

    public init(
        jobDefinitionName: Swift.String? = nil
    )
    {
        self.jobDefinitionName = jobDefinitionName
    }
}

public struct DescribeModelQualityJobDefinitionOutput {
    /// The time at which the model quality job was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the model quality job.
    /// This member is required.
    public var jobDefinitionArn: Swift.String?
    /// The name of the quality job definition. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var jobDefinitionName: Swift.String?
    /// Identifies the resources to deploy for a monitoring job.
    /// This member is required.
    public var jobResources: SageMakerClientTypes.MonitoringResources?
    /// Configures the model quality job to run a specified Docker container image.
    /// This member is required.
    public var modelQualityAppSpecification: SageMakerClientTypes.ModelQualityAppSpecification?
    /// The baseline configuration for a model quality job.
    public var modelQualityBaselineConfig: SageMakerClientTypes.ModelQualityBaselineConfig?
    /// Inputs for the model quality job.
    /// This member is required.
    public var modelQualityJobInput: SageMakerClientTypes.ModelQualityJobInput?
    /// The output configuration for monitoring jobs.
    /// This member is required.
    public var modelQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig?
    /// Networking options for a model quality job.
    public var networkConfig: SageMakerClientTypes.MonitoringNetworkConfig?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A time limit for how long the monitoring job is allowed to run before stopping.
    public var stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition?

    public init(
        creationTime: Foundation.Date? = nil,
        jobDefinitionArn: Swift.String? = nil,
        jobDefinitionName: Swift.String? = nil,
        jobResources: SageMakerClientTypes.MonitoringResources? = nil,
        modelQualityAppSpecification: SageMakerClientTypes.ModelQualityAppSpecification? = nil,
        modelQualityBaselineConfig: SageMakerClientTypes.ModelQualityBaselineConfig? = nil,
        modelQualityJobInput: SageMakerClientTypes.ModelQualityJobInput? = nil,
        modelQualityJobOutputConfig: SageMakerClientTypes.MonitoringOutputConfig? = nil,
        networkConfig: SageMakerClientTypes.MonitoringNetworkConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.MonitoringStoppingCondition? = nil
    )
    {
        self.creationTime = creationTime
        self.jobDefinitionArn = jobDefinitionArn
        self.jobDefinitionName = jobDefinitionName
        self.jobResources = jobResources
        self.modelQualityAppSpecification = modelQualityAppSpecification
        self.modelQualityBaselineConfig = modelQualityBaselineConfig
        self.modelQualityJobInput = modelQualityJobInput
        self.modelQualityJobOutputConfig = modelQualityJobOutputConfig
        self.networkConfig = networkConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
    }
}

public struct DescribeMonitoringScheduleInput {
    /// Name of a previously created monitoring schedule.
    /// This member is required.
    public var monitoringScheduleName: Swift.String?

    public init(
        monitoringScheduleName: Swift.String? = nil
    )
    {
        self.monitoringScheduleName = monitoringScheduleName
    }
}

extension SageMakerClientTypes {

    public enum ExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case completedWithViolations
        case failed
        case inProgress
        case pending
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [ExecutionStatus] {
            return [
                .completed,
                .completedWithViolations,
                .failed,
                .inProgress,
                .pending,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .completedWithViolations: return "CompletedWithViolations"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .pending: return "Pending"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Summary of information about the last monitoring job to run.
    public struct MonitoringExecutionSummary {
        /// The time at which the monitoring job was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The name of the endpoint used to run the monitoring job.
        public var endpointName: Swift.String?
        /// Contains the reason a monitoring job failed, if it failed.
        public var failureReason: Swift.String?
        /// A timestamp that indicates the last time the monitoring job was modified.
        /// This member is required.
        public var lastModifiedTime: Foundation.Date?
        /// The status of the monitoring job.
        /// This member is required.
        public var monitoringExecutionStatus: SageMakerClientTypes.ExecutionStatus?
        /// The name of the monitoring job.
        public var monitoringJobDefinitionName: Swift.String?
        /// The name of the monitoring schedule.
        /// This member is required.
        public var monitoringScheduleName: Swift.String?
        /// The type of the monitoring job.
        public var monitoringType: SageMakerClientTypes.MonitoringType?
        /// The Amazon Resource Name (ARN) of the monitoring job.
        public var processingJobArn: Swift.String?
        /// The time the monitoring job was scheduled.
        /// This member is required.
        public var scheduledTime: Foundation.Date?

        public init(
            creationTime: Foundation.Date? = nil,
            endpointName: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            monitoringExecutionStatus: SageMakerClientTypes.ExecutionStatus? = nil,
            monitoringJobDefinitionName: Swift.String? = nil,
            monitoringScheduleName: Swift.String? = nil,
            monitoringType: SageMakerClientTypes.MonitoringType? = nil,
            processingJobArn: Swift.String? = nil,
            scheduledTime: Foundation.Date? = nil
        )
        {
            self.creationTime = creationTime
            self.endpointName = endpointName
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.monitoringExecutionStatus = monitoringExecutionStatus
            self.monitoringJobDefinitionName = monitoringJobDefinitionName
            self.monitoringScheduleName = monitoringScheduleName
            self.monitoringType = monitoringType
            self.processingJobArn = processingJobArn
            self.scheduledTime = scheduledTime
        }
    }

}

extension SageMakerClientTypes {

    public enum ScheduleStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case failed
        case pending
        case scheduled
        case stopped
        case sdkUnknown(Swift.String)

        public static var allCases: [ScheduleStatus] {
            return [
                .failed,
                .pending,
                .scheduled,
                .stopped
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .failed: return "Failed"
            case .pending: return "Pending"
            case .scheduled: return "Scheduled"
            case .stopped: return "Stopped"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeMonitoringScheduleOutput {
    /// The time at which the monitoring job was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The name of the endpoint for the monitoring job.
    public var endpointName: Swift.String?
    /// A string, up to one KB in size, that contains the reason a monitoring job failed, if it failed.
    public var failureReason: Swift.String?
    /// The time at which the monitoring job was last modified.
    /// This member is required.
    public var lastModifiedTime: Foundation.Date?
    /// Describes metadata on the last execution to run, if there was one.
    public var lastMonitoringExecutionSummary: SageMakerClientTypes.MonitoringExecutionSummary?
    /// The Amazon Resource Name (ARN) of the monitoring schedule.
    /// This member is required.
    public var monitoringScheduleArn: Swift.String?
    /// The configuration object that specifies the monitoring schedule and defines the monitoring job.
    /// This member is required.
    public var monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig?
    /// Name of the monitoring schedule.
    /// This member is required.
    public var monitoringScheduleName: Swift.String?
    /// The status of an monitoring job.
    /// This member is required.
    public var monitoringScheduleStatus: SageMakerClientTypes.ScheduleStatus?
    /// The type of the monitoring job that this schedule runs. This is one of the following values.
    ///
    /// * DATA_QUALITY - The schedule is for a data quality monitoring job.
    ///
    /// * MODEL_QUALITY - The schedule is for a model quality monitoring job.
    ///
    /// * MODEL_BIAS - The schedule is for a bias monitoring job.
    ///
    /// * MODEL_EXPLAINABILITY - The schedule is for an explainability monitoring job.
    public var monitoringType: SageMakerClientTypes.MonitoringType?

    public init(
        creationTime: Foundation.Date? = nil,
        endpointName: Swift.String? = nil,
        failureReason: Swift.String? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        lastMonitoringExecutionSummary: SageMakerClientTypes.MonitoringExecutionSummary? = nil,
        monitoringScheduleArn: Swift.String? = nil,
        monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig? = nil,
        monitoringScheduleName: Swift.String? = nil,
        monitoringScheduleStatus: SageMakerClientTypes.ScheduleStatus? = nil,
        monitoringType: SageMakerClientTypes.MonitoringType? = nil
    )
    {
        self.creationTime = creationTime
        self.endpointName = endpointName
        self.failureReason = failureReason
        self.lastModifiedTime = lastModifiedTime
        self.lastMonitoringExecutionSummary = lastMonitoringExecutionSummary
        self.monitoringScheduleArn = monitoringScheduleArn
        self.monitoringScheduleConfig = monitoringScheduleConfig
        self.monitoringScheduleName = monitoringScheduleName
        self.monitoringScheduleStatus = monitoringScheduleStatus
        self.monitoringType = monitoringType
    }
}

public struct DescribeNotebookInstanceInput {
    /// The name of the notebook instance that you want information about.
    /// This member is required.
    public var notebookInstanceName: Swift.String?

    public init(
        notebookInstanceName: Swift.String? = nil
    )
    {
        self.notebookInstanceName = notebookInstanceName
    }
}

extension SageMakerClientTypes {

    public enum NotebookInstanceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleting
        case failed
        case inservice
        case pending
        case stopped
        case stopping
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [NotebookInstanceStatus] {
            return [
                .deleting,
                .failed,
                .inservice,
                .pending,
                .stopped,
                .stopping,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inservice: return "InService"
            case .pending: return "Pending"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeNotebookInstanceOutput {
    /// A list of the Elastic Inference (EI) instance types associated with this notebook instance. Currently only one EI instance type can be associated with a notebook instance. For more information, see [Using Elastic Inference in Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html).
    public var acceleratorTypes: [SageMakerClientTypes.NotebookInstanceAcceleratorType]?
    /// An array of up to three Git repositories associated with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in [Amazon Web Services CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see [Associating Git Repositories with SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
    public var additionalCodeRepositories: [Swift.String]?
    /// A timestamp. Use this parameter to return the time when the notebook instance was created
    public var creationTime: Foundation.Date?
    /// The Git repository associated with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in [Amazon Web Services CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see [Associating Git Repositories with SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
    public var defaultCodeRepository: Swift.String?
    /// Describes whether SageMaker provides internet access to the notebook instance. If this value is set to Disabled, the notebook instance does not have internet access, and cannot connect to SageMaker training and endpoint services. For more information, see [Notebook Instances Are Internet-Enabled by Default](https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access).
    public var directInternetAccess: SageMakerClientTypes.DirectInternetAccess?
    /// If status is Failed, the reason it failed.
    public var failureReason: Swift.String?
    /// Information on the IMDS configuration of the notebook instance
    public var instanceMetadataServiceConfiguration: SageMakerClientTypes.InstanceMetadataServiceConfiguration?
    /// The type of ML compute instance running on the notebook instance.
    public var instanceType: SageMakerClientTypes.InstanceType?
    /// The Amazon Web Services KMS key ID SageMaker uses to encrypt data when storing it on the ML storage volume attached to the instance.
    public var kmsKeyId: Swift.String?
    /// A timestamp. Use this parameter to retrieve the time when the notebook instance was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The network interface IDs that SageMaker created at the time of creating the instance.
    public var networkInterfaceId: Swift.String?
    /// The Amazon Resource Name (ARN) of the notebook instance.
    public var notebookInstanceArn: Swift.String?
    /// Returns the name of a notebook instance lifecycle configuration. For information about notebook instance lifestyle configurations, see [Step 2.1: (Optional) Customize a Notebook Instance](https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html)
    public var notebookInstanceLifecycleConfigName: Swift.String?
    /// The name of the SageMaker notebook instance.
    public var notebookInstanceName: Swift.String?
    /// The status of the notebook instance.
    public var notebookInstanceStatus: SageMakerClientTypes.NotebookInstanceStatus?
    /// The platform identifier of the notebook instance runtime environment.
    public var platformIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role associated with the instance.
    public var roleArn: Swift.String?
    /// Whether root access is enabled or disabled for users of the notebook instance. Lifecycle configurations need root access to be able to set up a notebook instance. Because of this, lifecycle configurations associated with a notebook instance always run with root access even if you disable root access for users.
    public var rootAccess: SageMakerClientTypes.RootAccess?
    /// The IDs of the VPC security groups.
    public var securityGroups: [Swift.String]?
    /// The ID of the VPC subnet.
    public var subnetId: Swift.String?
    /// The URL that you use to connect to the Jupyter notebook that is running in your notebook instance.
    public var url: Swift.String?
    /// The size, in GB, of the ML storage volume attached to the notebook instance.
    public var volumeSizeInGB: Swift.Int?

    public init(
        acceleratorTypes: [SageMakerClientTypes.NotebookInstanceAcceleratorType]? = nil,
        additionalCodeRepositories: [Swift.String]? = nil,
        creationTime: Foundation.Date? = nil,
        defaultCodeRepository: Swift.String? = nil,
        directInternetAccess: SageMakerClientTypes.DirectInternetAccess? = nil,
        failureReason: Swift.String? = nil,
        instanceMetadataServiceConfiguration: SageMakerClientTypes.InstanceMetadataServiceConfiguration? = nil,
        instanceType: SageMakerClientTypes.InstanceType? = nil,
        kmsKeyId: Swift.String? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        networkInterfaceId: Swift.String? = nil,
        notebookInstanceArn: Swift.String? = nil,
        notebookInstanceLifecycleConfigName: Swift.String? = nil,
        notebookInstanceName: Swift.String? = nil,
        notebookInstanceStatus: SageMakerClientTypes.NotebookInstanceStatus? = nil,
        platformIdentifier: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        rootAccess: SageMakerClientTypes.RootAccess? = nil,
        securityGroups: [Swift.String]? = nil,
        subnetId: Swift.String? = nil,
        url: Swift.String? = nil,
        volumeSizeInGB: Swift.Int? = nil
    )
    {
        self.acceleratorTypes = acceleratorTypes
        self.additionalCodeRepositories = additionalCodeRepositories
        self.creationTime = creationTime
        self.defaultCodeRepository = defaultCodeRepository
        self.directInternetAccess = directInternetAccess
        self.failureReason = failureReason
        self.instanceMetadataServiceConfiguration = instanceMetadataServiceConfiguration
        self.instanceType = instanceType
        self.kmsKeyId = kmsKeyId
        self.lastModifiedTime = lastModifiedTime
        self.networkInterfaceId = networkInterfaceId
        self.notebookInstanceArn = notebookInstanceArn
        self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
        self.notebookInstanceName = notebookInstanceName
        self.notebookInstanceStatus = notebookInstanceStatus
        self.platformIdentifier = platformIdentifier
        self.roleArn = roleArn
        self.rootAccess = rootAccess
        self.securityGroups = securityGroups
        self.subnetId = subnetId
        self.url = url
        self.volumeSizeInGB = volumeSizeInGB
    }
}

public struct DescribeNotebookInstanceLifecycleConfigInput {
    /// The name of the lifecycle configuration to describe.
    /// This member is required.
    public var notebookInstanceLifecycleConfigName: Swift.String?

    public init(
        notebookInstanceLifecycleConfigName: Swift.String? = nil
    )
    {
        self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
    }
}

public struct DescribeNotebookInstanceLifecycleConfigOutput {
    /// A timestamp that tells when the lifecycle configuration was created.
    public var creationTime: Foundation.Date?
    /// A timestamp that tells when the lifecycle configuration was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the lifecycle configuration.
    public var notebookInstanceLifecycleConfigArn: Swift.String?
    /// The name of the lifecycle configuration.
    public var notebookInstanceLifecycleConfigName: Swift.String?
    /// The shell script that runs only once, when you create a notebook instance.
    public var onCreate: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?
    /// The shell script that runs every time you start a notebook instance, including when you create the notebook instance.
    public var onStart: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?

    public init(
        creationTime: Foundation.Date? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        notebookInstanceLifecycleConfigArn: Swift.String? = nil,
        notebookInstanceLifecycleConfigName: Swift.String? = nil,
        onCreate: [SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil,
        onStart: [SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil
    )
    {
        self.creationTime = creationTime
        self.lastModifiedTime = lastModifiedTime
        self.notebookInstanceLifecycleConfigArn = notebookInstanceLifecycleConfigArn
        self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
        self.onCreate = onCreate
        self.onStart = onStart
    }
}

public struct DescribeOptimizationJobInput {
    /// The name that you assigned to the optimization job.
    /// This member is required.
    public var optimizationJobName: Swift.String?

    public init(
        optimizationJobName: Swift.String? = nil
    )
    {
        self.optimizationJobName = optimizationJobName
    }
}

extension SageMakerClientTypes {

    public enum OptimizationJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inprogress
        case starting
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [OptimizationJobStatus] {
            return [
                .completed,
                .failed,
                .inprogress,
                .starting,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inprogress: return "INPROGRESS"
            case .starting: return "STARTING"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Output values produced by an optimization job.
    public struct OptimizationOutput {
        /// The image that SageMaker recommends that you use to host the optimized model that you created with an optimization job.
        public var recommendedInferenceImage: Swift.String?

        public init(
            recommendedInferenceImage: Swift.String? = nil
        )
        {
            self.recommendedInferenceImage = recommendedInferenceImage
        }
    }

}

public struct DescribeOptimizationJobOutput {
    /// The time when you created the optimization job.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The type of instance that hosts the optimized model that you create with the optimization job.
    /// This member is required.
    public var deploymentInstanceType: SageMakerClientTypes.OptimizationJobDeploymentInstanceType?
    /// If the optimization job status is FAILED, the reason for the failure.
    public var failureReason: Swift.String?
    /// The time when the optimization job was last updated.
    /// This member is required.
    public var lastModifiedTime: Foundation.Date?
    /// The location of the source model to optimize with an optimization job.
    /// This member is required.
    public var modelSource: SageMakerClientTypes.OptimizationJobModelSource?
    /// Settings for each of the optimization techniques that the job applies.
    /// This member is required.
    public var optimizationConfigs: [SageMakerClientTypes.OptimizationConfig]?
    /// The time when the optimization job finished processing.
    public var optimizationEndTime: Foundation.Date?
    /// The environment variables to set in the model container.
    public var optimizationEnvironment: [Swift.String: Swift.String]?
    /// The Amazon Resource Name (ARN) of the optimization job.
    /// This member is required.
    public var optimizationJobArn: Swift.String?
    /// The name that you assigned to the optimization job.
    /// This member is required.
    public var optimizationJobName: Swift.String?
    /// The current status of the optimization job.
    /// This member is required.
    public var optimizationJobStatus: SageMakerClientTypes.OptimizationJobStatus?
    /// Output values produced by an optimization job.
    public var optimizationOutput: SageMakerClientTypes.OptimizationOutput?
    /// The time when the optimization job started.
    public var optimizationStartTime: Foundation.Date?
    /// Details for where to store the optimized model that you create with the optimization job.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.OptimizationJobOutputConfig?
    /// The ARN of the IAM role that you assigned to the optimization job.
    /// This member is required.
    public var roleArn: Swift.String?
    /// Specifies a limit to how long a job can run. When the job reaches the time limit, SageMaker ends the job. Use this API to cap costs. To stop a training job, SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost. The training algorithms provided by SageMaker automatically save the intermediate results of a model training job when possible. This attempt to save artifacts is only a best effort case as model might not be in a state from which it can be saved. For example, if training has just started, the model might not be ready to save. When saved, this intermediate data is a valid model artifact. You can use it to create a model with CreateModel. The Neural Topic Model (NTM) currently does not support saving intermediate model artifacts. When training NTMs, make sure that the maximum runtime is sufficient for the training job to complete.
    /// This member is required.
    public var stoppingCondition: SageMakerClientTypes.StoppingCondition?
    /// A VPC in Amazon VPC that your optimized model has access to.
    public var vpcConfig: SageMakerClientTypes.OptimizationVpcConfig?

    public init(
        creationTime: Foundation.Date? = nil,
        deploymentInstanceType: SageMakerClientTypes.OptimizationJobDeploymentInstanceType? = nil,
        failureReason: Swift.String? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        modelSource: SageMakerClientTypes.OptimizationJobModelSource? = nil,
        optimizationConfigs: [SageMakerClientTypes.OptimizationConfig]? = nil,
        optimizationEndTime: Foundation.Date? = nil,
        optimizationEnvironment: [Swift.String: Swift.String]? = nil,
        optimizationJobArn: Swift.String? = nil,
        optimizationJobName: Swift.String? = nil,
        optimizationJobStatus: SageMakerClientTypes.OptimizationJobStatus? = nil,
        optimizationOutput: SageMakerClientTypes.OptimizationOutput? = nil,
        optimizationStartTime: Foundation.Date? = nil,
        outputConfig: SageMakerClientTypes.OptimizationJobOutputConfig? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.StoppingCondition? = nil,
        vpcConfig: SageMakerClientTypes.OptimizationVpcConfig? = nil
    )
    {
        self.creationTime = creationTime
        self.deploymentInstanceType = deploymentInstanceType
        self.failureReason = failureReason
        self.lastModifiedTime = lastModifiedTime
        self.modelSource = modelSource
        self.optimizationConfigs = optimizationConfigs
        self.optimizationEndTime = optimizationEndTime
        self.optimizationEnvironment = optimizationEnvironment
        self.optimizationJobArn = optimizationJobArn
        self.optimizationJobName = optimizationJobName
        self.optimizationJobStatus = optimizationJobStatus
        self.optimizationOutput = optimizationOutput
        self.optimizationStartTime = optimizationStartTime
        self.outputConfig = outputConfig
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
        self.vpcConfig = vpcConfig
    }
}

public struct DescribePipelineInput {
    /// The name or Amazon Resource Name (ARN) of the pipeline to describe.
    /// This member is required.
    public var pipelineName: Swift.String?

    public init(
        pipelineName: Swift.String? = nil
    )
    {
        self.pipelineName = pipelineName
    }
}

extension SageMakerClientTypes {

    public enum PipelineStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [PipelineStatus] {
            return [
                .active,
                .deleting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .deleting: return "Deleting"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribePipelineOutput {
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// The time when the pipeline was created.
    public var creationTime: Foundation.Date?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// The time when the pipeline was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The time when the pipeline was last run.
    public var lastRunTime: Foundation.Date?
    /// Lists the parallelism configuration applied to the pipeline.
    public var parallelismConfiguration: SageMakerClientTypes.ParallelismConfiguration?
    /// The Amazon Resource Name (ARN) of the pipeline.
    public var pipelineArn: Swift.String?
    /// The JSON pipeline definition.
    public var pipelineDefinition: Swift.String?
    /// The description of the pipeline.
    public var pipelineDescription: Swift.String?
    /// The display name of the pipeline.
    public var pipelineDisplayName: Swift.String?
    /// The name of the pipeline.
    public var pipelineName: Swift.String?
    /// The status of the pipeline execution.
    public var pipelineStatus: SageMakerClientTypes.PipelineStatus?
    /// The Amazon Resource Name (ARN) that the pipeline uses to execute.
    public var roleArn: Swift.String?

    public init(
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: Foundation.Date? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        lastRunTime: Foundation.Date? = nil,
        parallelismConfiguration: SageMakerClientTypes.ParallelismConfiguration? = nil,
        pipelineArn: Swift.String? = nil,
        pipelineDefinition: Swift.String? = nil,
        pipelineDescription: Swift.String? = nil,
        pipelineDisplayName: Swift.String? = nil,
        pipelineName: Swift.String? = nil,
        pipelineStatus: SageMakerClientTypes.PipelineStatus? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.lastRunTime = lastRunTime
        self.parallelismConfiguration = parallelismConfiguration
        self.pipelineArn = pipelineArn
        self.pipelineDefinition = pipelineDefinition
        self.pipelineDescription = pipelineDescription
        self.pipelineDisplayName = pipelineDisplayName
        self.pipelineName = pipelineName
        self.pipelineStatus = pipelineStatus
        self.roleArn = roleArn
    }
}

public struct DescribePipelineDefinitionForExecutionInput {
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    /// This member is required.
    public var pipelineExecutionArn: Swift.String?

    public init(
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

public struct DescribePipelineDefinitionForExecutionOutput {
    /// The time when the pipeline was created.
    public var creationTime: Foundation.Date?
    /// The JSON pipeline definition.
    public var pipelineDefinition: Swift.String?

    public init(
        creationTime: Foundation.Date? = nil,
        pipelineDefinition: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.pipelineDefinition = pipelineDefinition
    }
}

public struct DescribePipelineExecutionInput {
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    /// This member is required.
    public var pipelineExecutionArn: Swift.String?

    public init(
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

extension SageMakerClientTypes {

    public enum PipelineExecutionStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case executing
        case failed
        case stopped
        case stopping
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [PipelineExecutionStatus] {
            return [
                .executing,
                .failed,
                .stopped,
                .stopping,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .executing: return "Executing"
            case .failed: return "Failed"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies the names of the experiment and trial created by a pipeline.
    public struct PipelineExperimentConfig {
        /// The name of the experiment.
        public var experimentName: Swift.String?
        /// The name of the trial.
        public var trialName: Swift.String?

        public init(
            experimentName: Swift.String? = nil,
            trialName: Swift.String? = nil
        )
        {
            self.experimentName = experimentName
            self.trialName = trialName
        }
    }

}

extension SageMakerClientTypes {
    /// A step selected to run in selective execution mode.
    public struct SelectedStep {
        /// The name of the pipeline step.
        /// This member is required.
        public var stepName: Swift.String?

        public init(
            stepName: Swift.String? = nil
        )
        {
            self.stepName = stepName
        }
    }

}

extension SageMakerClientTypes {
    /// The selective execution configuration applied to the pipeline run.
    public struct SelectiveExecutionConfig {
        /// A list of pipeline steps to run. All step(s) in all path(s) between two selected steps should be included.
        /// This member is required.
        public var selectedSteps: [SageMakerClientTypes.SelectedStep]?
        /// The ARN from a reference execution of the current pipeline. Used to copy input collaterals needed for the selected steps to run. The execution status of the pipeline can be either Failed or Success. This field is required if the steps you specify for SelectedSteps depend on output collaterals from any non-specified pipeline steps. For more information, see [Selective Execution for Pipeline Steps](https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-selective-ex.html).
        public var sourcePipelineExecutionArn: Swift.String?

        public init(
            selectedSteps: [SageMakerClientTypes.SelectedStep]? = nil,
            sourcePipelineExecutionArn: Swift.String? = nil
        )
        {
            self.selectedSteps = selectedSteps
            self.sourcePipelineExecutionArn = sourcePipelineExecutionArn
        }
    }

}

public struct DescribePipelineExecutionOutput {
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// The time when the pipeline execution was created.
    public var creationTime: Foundation.Date?
    /// If the execution failed, a message describing why.
    public var failureReason: Swift.String?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// The time when the pipeline execution was modified last.
    public var lastModifiedTime: Foundation.Date?
    /// The parallelism configuration applied to the pipeline.
    public var parallelismConfiguration: SageMakerClientTypes.ParallelismConfiguration?
    /// The Amazon Resource Name (ARN) of the pipeline.
    public var pipelineArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    public var pipelineExecutionArn: Swift.String?
    /// The description of the pipeline execution.
    public var pipelineExecutionDescription: Swift.String?
    /// The display name of the pipeline execution.
    public var pipelineExecutionDisplayName: Swift.String?
    /// The status of the pipeline execution.
    public var pipelineExecutionStatus: SageMakerClientTypes.PipelineExecutionStatus?
    /// Specifies the names of the experiment and trial created by a pipeline.
    public var pipelineExperimentConfig: SageMakerClientTypes.PipelineExperimentConfig?
    /// The selective execution configuration applied to the pipeline run.
    public var selectiveExecutionConfig: SageMakerClientTypes.SelectiveExecutionConfig?

    public init(
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: Foundation.Date? = nil,
        failureReason: Swift.String? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        parallelismConfiguration: SageMakerClientTypes.ParallelismConfiguration? = nil,
        pipelineArn: Swift.String? = nil,
        pipelineExecutionArn: Swift.String? = nil,
        pipelineExecutionDescription: Swift.String? = nil,
        pipelineExecutionDisplayName: Swift.String? = nil,
        pipelineExecutionStatus: SageMakerClientTypes.PipelineExecutionStatus? = nil,
        pipelineExperimentConfig: SageMakerClientTypes.PipelineExperimentConfig? = nil,
        selectiveExecutionConfig: SageMakerClientTypes.SelectiveExecutionConfig? = nil
    )
    {
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.failureReason = failureReason
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.parallelismConfiguration = parallelismConfiguration
        self.pipelineArn = pipelineArn
        self.pipelineExecutionArn = pipelineExecutionArn
        self.pipelineExecutionDescription = pipelineExecutionDescription
        self.pipelineExecutionDisplayName = pipelineExecutionDisplayName
        self.pipelineExecutionStatus = pipelineExecutionStatus
        self.pipelineExperimentConfig = pipelineExperimentConfig
        self.selectiveExecutionConfig = selectiveExecutionConfig
    }
}

public struct DescribeProcessingJobInput {
    /// The name of the processing job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var processingJobName: Swift.String?

    public init(
        processingJobName: Swift.String? = nil
    )
    {
        self.processingJobName = processingJobName
    }
}

extension SageMakerClientTypes {

    public enum ProcessingJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [ProcessingJobStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeProcessingJobOutput {
    /// Configures the processing job to run a specified container image.
    /// This member is required.
    public var appSpecification: SageMakerClientTypes.AppSpecification?
    /// The ARN of an AutoML job associated with this processing job.
    public var autoMLJobArn: Swift.String?
    /// The time at which the processing job was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// The environment variables set in the Docker container.
    public var environment: [Swift.String: Swift.String]?
    /// An optional string, up to one KB in size, that contains metadata from the processing container when the processing job exits.
    public var exitMessage: Swift.String?
    /// The configuration information used to create an experiment.
    public var experimentConfig: SageMakerClientTypes.ExperimentConfig?
    /// A string, up to one KB in size, that contains the reason a processing job failed, if it failed.
    public var failureReason: Swift.String?
    /// The time at which the processing job was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The ARN of a monitoring schedule for an endpoint associated with this processing job.
    public var monitoringScheduleArn: Swift.String?
    /// Networking options for a processing job.
    public var networkConfig: SageMakerClientTypes.NetworkConfig?
    /// The time at which the processing job completed.
    public var processingEndTime: Foundation.Date?
    /// The inputs for a processing job.
    public var processingInputs: [SageMakerClientTypes.ProcessingInput]?
    /// The Amazon Resource Name (ARN) of the processing job.
    /// This member is required.
    public var processingJobArn: Swift.String?
    /// The name of the processing job. The name must be unique within an Amazon Web Services Region in the Amazon Web Services account.
    /// This member is required.
    public var processingJobName: Swift.String?
    /// Provides the status of a processing job.
    /// This member is required.
    public var processingJobStatus: SageMakerClientTypes.ProcessingJobStatus?
    /// Output configuration for the processing job.
    public var processingOutputConfig: SageMakerClientTypes.ProcessingOutputConfig?
    /// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
    /// This member is required.
    public var processingResources: SageMakerClientTypes.ProcessingResources?
    /// The time at which the processing job started.
    public var processingStartTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.
    public var roleArn: Swift.String?
    /// The time limit for how long the processing job is allowed to run.
    public var stoppingCondition: SageMakerClientTypes.ProcessingStoppingCondition?
    /// The ARN of a training job associated with this processing job.
    public var trainingJobArn: Swift.String?

    public init(
        appSpecification: SageMakerClientTypes.AppSpecification? = nil,
        autoMLJobArn: Swift.String? = nil,
        creationTime: Foundation.Date? = nil,
        environment: [Swift.String: Swift.String]? = nil,
        exitMessage: Swift.String? = nil,
        experimentConfig: SageMakerClientTypes.ExperimentConfig? = nil,
        failureReason: Swift.String? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        monitoringScheduleArn: Swift.String? = nil,
        networkConfig: SageMakerClientTypes.NetworkConfig? = nil,
        processingEndTime: Foundation.Date? = nil,
        processingInputs: [SageMakerClientTypes.ProcessingInput]? = nil,
        processingJobArn: Swift.String? = nil,
        processingJobName: Swift.String? = nil,
        processingJobStatus: SageMakerClientTypes.ProcessingJobStatus? = nil,
        processingOutputConfig: SageMakerClientTypes.ProcessingOutputConfig? = nil,
        processingResources: SageMakerClientTypes.ProcessingResources? = nil,
        processingStartTime: Foundation.Date? = nil,
        roleArn: Swift.String? = nil,
        stoppingCondition: SageMakerClientTypes.ProcessingStoppingCondition? = nil,
        trainingJobArn: Swift.String? = nil
    )
    {
        self.appSpecification = appSpecification
        self.autoMLJobArn = autoMLJobArn
        self.creationTime = creationTime
        self.environment = environment
        self.exitMessage = exitMessage
        self.experimentConfig = experimentConfig
        self.failureReason = failureReason
        self.lastModifiedTime = lastModifiedTime
        self.monitoringScheduleArn = monitoringScheduleArn
        self.networkConfig = networkConfig
        self.processingEndTime = processingEndTime
        self.processingInputs = processingInputs
        self.processingJobArn = processingJobArn
        self.processingJobName = processingJobName
        self.processingJobStatus = processingJobStatus
        self.processingOutputConfig = processingOutputConfig
        self.processingResources = processingResources
        self.processingStartTime = processingStartTime
        self.roleArn = roleArn
        self.stoppingCondition = stoppingCondition
        self.trainingJobArn = trainingJobArn
    }
}

public struct DescribeProjectInput {
    /// The name of the project to describe.
    /// This member is required.
    public var projectName: Swift.String?

    public init(
        projectName: Swift.String? = nil
    )
    {
        self.projectName = projectName
    }
}

extension SageMakerClientTypes {

    public enum ProjectStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createCompleted
        case createFailed
        case createInProgress
        case deleteCompleted
        case deleteFailed
        case deleteInProgress
        case pending
        case updateCompleted
        case updateFailed
        case updateInProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ProjectStatus] {
            return [
                .createCompleted,
                .createFailed,
                .createInProgress,
                .deleteCompleted,
                .deleteFailed,
                .deleteInProgress,
                .pending,
                .updateCompleted,
                .updateFailed,
                .updateInProgress
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createCompleted: return "CreateCompleted"
            case .createFailed: return "CreateFailed"
            case .createInProgress: return "CreateInProgress"
            case .deleteCompleted: return "DeleteCompleted"
            case .deleteFailed: return "DeleteFailed"
            case .deleteInProgress: return "DeleteInProgress"
            case .pending: return "Pending"
            case .updateCompleted: return "UpdateCompleted"
            case .updateFailed: return "UpdateFailed"
            case .updateInProgress: return "UpdateInProgress"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Details of a provisioned service catalog product. For information about service catalog, see [What is Amazon Web Services Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html).
    public struct ServiceCatalogProvisionedProductDetails {
        /// The ID of the provisioned product.
        public var provisionedProductId: Swift.String?
        /// The current status of the product.
        ///
        /// * AVAILABLE - Stable state, ready to perform any operation. The most recent operation succeeded and completed.
        ///
        /// * UNDER_CHANGE - Transitive state. Operations performed might not have valid results. Wait for an AVAILABLE status before performing operations.
        ///
        /// * TAINTED - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version.
        ///
        /// * ERROR - An unexpected error occurred. The provisioned product exists but the stack is not running. For example, CloudFormation received a parameter value that was not valid and could not launch the stack.
        ///
        /// * PLAN_IN_PROGRESS - Transitive state. The plan operations were performed to provision a new product, but resources have not yet been created. After reviewing the list of resources to be created, execute the plan. Wait for an AVAILABLE status before performing operations.
        public var provisionedProductStatusMessage: Swift.String?

        public init(
            provisionedProductId: Swift.String? = nil,
            provisionedProductStatusMessage: Swift.String? = nil
        )
        {
            self.provisionedProductId = provisionedProductId
            self.provisionedProductStatusMessage = provisionedProductStatusMessage
        }
    }

}

public struct DescribeProjectOutput {
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// The time when the project was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// The timestamp when project was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the project.
    /// This member is required.
    public var projectArn: Swift.String?
    /// The description of the project.
    public var projectDescription: Swift.String?
    /// The ID of the project.
    /// This member is required.
    public var projectId: Swift.String?
    /// The name of the project.
    /// This member is required.
    public var projectName: Swift.String?
    /// The status of the project.
    /// This member is required.
    public var projectStatus: SageMakerClientTypes.ProjectStatus?
    /// Information about a provisioned service catalog product.
    public var serviceCatalogProvisionedProductDetails: SageMakerClientTypes.ServiceCatalogProvisionedProductDetails?
    /// Information used to provision a service catalog product. For information, see [What is Amazon Web Services Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html).
    /// This member is required.
    public var serviceCatalogProvisioningDetails: SageMakerClientTypes.ServiceCatalogProvisioningDetails?

    public init(
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: Foundation.Date? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        projectArn: Swift.String? = nil,
        projectDescription: Swift.String? = nil,
        projectId: Swift.String? = nil,
        projectName: Swift.String? = nil,
        projectStatus: SageMakerClientTypes.ProjectStatus? = nil,
        serviceCatalogProvisionedProductDetails: SageMakerClientTypes.ServiceCatalogProvisionedProductDetails? = nil,
        serviceCatalogProvisioningDetails: SageMakerClientTypes.ServiceCatalogProvisioningDetails? = nil
    )
    {
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.projectArn = projectArn
        self.projectDescription = projectDescription
        self.projectId = projectId
        self.projectName = projectName
        self.projectStatus = projectStatus
        self.serviceCatalogProvisionedProductDetails = serviceCatalogProvisionedProductDetails
        self.serviceCatalogProvisioningDetails = serviceCatalogProvisioningDetails
    }
}

public struct DescribeSpaceInput {
    /// The ID of the associated domain.
    /// This member is required.
    public var domainId: Swift.String?
    /// The name of the space.
    /// This member is required.
    public var spaceName: Swift.String?

    public init(
        domainId: Swift.String? = nil,
        spaceName: Swift.String? = nil
    )
    {
        self.domainId = domainId
        self.spaceName = spaceName
    }
}

extension SageMakerClientTypes {

    public enum SpaceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleteFailed
        case deleting
        case failed
        case inservice
        case pending
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [SpaceStatus] {
            return [
                .deleteFailed,
                .deleting,
                .failed,
                .inservice,
                .pending,
                .updateFailed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleteFailed: return "Delete_Failed"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inservice: return "InService"
            case .pending: return "Pending"
            case .updateFailed: return "Update_Failed"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeSpaceOutput {
    /// The creation time.
    public var creationTime: Foundation.Date?
    /// The ID of the associated domain.
    public var domainId: Swift.String?
    /// The failure reason.
    public var failureReason: Swift.String?
    /// The ID of the space's profile in the Amazon EFS volume.
    public var homeEfsFileSystemUid: Swift.String?
    /// The last modified time.
    public var lastModifiedTime: Foundation.Date?
    /// The collection of ownership settings for a space.
    public var ownershipSettings: SageMakerClientTypes.OwnershipSettings?
    /// The space's Amazon Resource Name (ARN).
    public var spaceArn: Swift.String?
    /// The name of the space that appears in the Amazon SageMaker Studio UI.
    public var spaceDisplayName: Swift.String?
    /// The name of the space.
    public var spaceName: Swift.String?
    /// A collection of space settings.
    public var spaceSettings: SageMakerClientTypes.SpaceSettings?
    /// The collection of space sharing settings for a space.
    public var spaceSharingSettings: SageMakerClientTypes.SpaceSharingSettings?
    /// The status.
    public var status: SageMakerClientTypes.SpaceStatus?
    /// Returns the URL of the space. If the space is created with Amazon Web Services IAM Identity Center (Successor to Amazon Web Services Single Sign-On) authentication, users can navigate to the URL after appending the respective redirect parameter for the application type to be federated through Amazon Web Services IAM Identity Center. The following application types are supported:
    ///
    /// * Studio Classic: &redirect=JupyterServer
    ///
    /// * JupyterLab: &redirect=JupyterLab
    ///
    /// * Code Editor, based on Code-OSS, Visual Studio Code - Open Source: &redirect=CodeEditor
    public var url: Swift.String?

    public init(
        creationTime: Foundation.Date? = nil,
        domainId: Swift.String? = nil,
        failureReason: Swift.String? = nil,
        homeEfsFileSystemUid: Swift.String? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        ownershipSettings: SageMakerClientTypes.OwnershipSettings? = nil,
        spaceArn: Swift.String? = nil,
        spaceDisplayName: Swift.String? = nil,
        spaceName: Swift.String? = nil,
        spaceSettings: SageMakerClientTypes.SpaceSettings? = nil,
        spaceSharingSettings: SageMakerClientTypes.SpaceSharingSettings? = nil,
        status: SageMakerClientTypes.SpaceStatus? = nil,
        url: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.domainId = domainId
        self.failureReason = failureReason
        self.homeEfsFileSystemUid = homeEfsFileSystemUid
        self.lastModifiedTime = lastModifiedTime
        self.ownershipSettings = ownershipSettings
        self.spaceArn = spaceArn
        self.spaceDisplayName = spaceDisplayName
        self.spaceName = spaceName
        self.spaceSettings = spaceSettings
        self.spaceSharingSettings = spaceSharingSettings
        self.status = status
        self.url = url
    }
}

public struct DescribeStudioLifecycleConfigInput {
    /// The name of the Amazon SageMaker Studio Lifecycle Configuration to describe.
    /// This member is required.
    public var studioLifecycleConfigName: Swift.String?

    public init(
        studioLifecycleConfigName: Swift.String? = nil
    )
    {
        self.studioLifecycleConfigName = studioLifecycleConfigName
    }
}

public struct DescribeStudioLifecycleConfigOutput {
    /// The creation time of the Amazon SageMaker Studio Lifecycle Configuration.
    public var creationTime: Foundation.Date?
    /// This value is equivalent to CreationTime because Amazon SageMaker Studio Lifecycle Configurations are immutable.
    public var lastModifiedTime: Foundation.Date?
    /// The App type that the Lifecycle Configuration is attached to.
    public var studioLifecycleConfigAppType: SageMakerClientTypes.StudioLifecycleConfigAppType?
    /// The ARN of the Lifecycle Configuration to describe.
    public var studioLifecycleConfigArn: Swift.String?
    /// The content of your Amazon SageMaker Studio Lifecycle Configuration script.
    public var studioLifecycleConfigContent: Swift.String?
    /// The name of the Amazon SageMaker Studio Lifecycle Configuration that is described.
    public var studioLifecycleConfigName: Swift.String?

    public init(
        creationTime: Foundation.Date? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        studioLifecycleConfigAppType: SageMakerClientTypes.StudioLifecycleConfigAppType? = nil,
        studioLifecycleConfigArn: Swift.String? = nil,
        studioLifecycleConfigContent: Swift.String? = nil,
        studioLifecycleConfigName: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.lastModifiedTime = lastModifiedTime
        self.studioLifecycleConfigAppType = studioLifecycleConfigAppType
        self.studioLifecycleConfigArn = studioLifecycleConfigArn
        self.studioLifecycleConfigContent = studioLifecycleConfigContent
        self.studioLifecycleConfigName = studioLifecycleConfigName
    }
}

public struct DescribeSubscribedWorkteamInput {
    /// The Amazon Resource Name (ARN) of the subscribed work team to describe.
    /// This member is required.
    public var workteamArn: Swift.String?

    public init(
        workteamArn: Swift.String? = nil
    )
    {
        self.workteamArn = workteamArn
    }
}

extension SageMakerClientTypes {
    /// Describes a work team of a vendor that does the labelling job.
    public struct SubscribedWorkteam {
        /// Marketplace product listing ID.
        public var listingId: Swift.String?
        /// The description of the vendor from the Amazon Marketplace.
        public var marketplaceDescription: Swift.String?
        /// The title of the service provided by the vendor in the Amazon Marketplace.
        public var marketplaceTitle: Swift.String?
        /// The name of the vendor in the Amazon Marketplace.
        public var sellerName: Swift.String?
        /// The Amazon Resource Name (ARN) of the vendor that you have subscribed.
        /// This member is required.
        public var workteamArn: Swift.String?

        public init(
            listingId: Swift.String? = nil,
            marketplaceDescription: Swift.String? = nil,
            marketplaceTitle: Swift.String? = nil,
            sellerName: Swift.String? = nil,
            workteamArn: Swift.String? = nil
        )
        {
            self.listingId = listingId
            self.marketplaceDescription = marketplaceDescription
            self.marketplaceTitle = marketplaceTitle
            self.sellerName = sellerName
            self.workteamArn = workteamArn
        }
    }

}

public struct DescribeSubscribedWorkteamOutput {
    /// A Workteam instance that contains information about the work team.
    /// This member is required.
    public var subscribedWorkteam: SageMakerClientTypes.SubscribedWorkteam?

    public init(
        subscribedWorkteam: SageMakerClientTypes.SubscribedWorkteam? = nil
    )
    {
        self.subscribedWorkteam = subscribedWorkteam
    }
}

public struct DescribeTrainingJobInput {
    /// The name of the training job.
    /// This member is required.
    public var trainingJobName: Swift.String?

    public init(
        trainingJobName: Swift.String? = nil
    )
    {
        self.trainingJobName = trainingJobName
    }
}

extension SageMakerClientTypes {
    /// The name, value, and date and time of a metric that was emitted to Amazon CloudWatch.
    public struct MetricData {
        /// The name of the metric.
        public var metricName: Swift.String?
        /// The date and time that the algorithm emitted the metric.
        public var timestamp: Foundation.Date?
        /// The value of the metric.
        public var value: Swift.Float?

        public init(
            metricName: Swift.String? = nil,
            timestamp: Foundation.Date? = nil,
            value: Swift.Float? = nil
        )
        {
            self.metricName = metricName
            self.timestamp = timestamp
            self.value = value
        }
    }

}

extension SageMakerClientTypes {
    /// Information about the status of the rule evaluation.
    public struct ProfilerRuleEvaluationStatus {
        /// Timestamp when the rule evaluation status was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The name of the rule configuration.
        public var ruleConfigurationName: Swift.String?
        /// The Amazon Resource Name (ARN) of the rule evaluation job.
        public var ruleEvaluationJobArn: Swift.String?
        /// Status of the rule evaluation.
        public var ruleEvaluationStatus: SageMakerClientTypes.RuleEvaluationStatus?
        /// Details from the rule evaluation.
        public var statusDetails: Swift.String?

        public init(
            lastModifiedTime: Foundation.Date? = nil,
            ruleConfigurationName: Swift.String? = nil,
            ruleEvaluationJobArn: Swift.String? = nil,
            ruleEvaluationStatus: SageMakerClientTypes.RuleEvaluationStatus? = nil,
            statusDetails: Swift.String? = nil
        )
        {
            self.lastModifiedTime = lastModifiedTime
            self.ruleConfigurationName = ruleConfigurationName
            self.ruleEvaluationJobArn = ruleEvaluationJobArn
            self.ruleEvaluationStatus = ruleEvaluationStatus
            self.statusDetails = statusDetails
        }
    }

}

extension SageMakerClientTypes {

    public enum ProfilingStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ProfilingStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum SecondaryStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case downloading
        case downloadingTrainingImage
        case failed
        case interrupted
        case launchingMlInstances
        case maxRuntimeExceeded
        case maxWaitTimeExceeded
        case pending
        case preparingTrainingStack
        case restarting
        case starting
        case stopped
        case stopping
        case training
        case updating
        case uploading
        case sdkUnknown(Swift.String)

        public static var allCases: [SecondaryStatus] {
            return [
                .completed,
                .downloading,
                .downloadingTrainingImage,
                .failed,
                .interrupted,
                .launchingMlInstances,
                .maxRuntimeExceeded,
                .maxWaitTimeExceeded,
                .pending,
                .preparingTrainingStack,
                .restarting,
                .starting,
                .stopped,
                .stopping,
                .training,
                .updating,
                .uploading
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .downloading: return "Downloading"
            case .downloadingTrainingImage: return "DownloadingTrainingImage"
            case .failed: return "Failed"
            case .interrupted: return "Interrupted"
            case .launchingMlInstances: return "LaunchingMLInstances"
            case .maxRuntimeExceeded: return "MaxRuntimeExceeded"
            case .maxWaitTimeExceeded: return "MaxWaitTimeExceeded"
            case .pending: return "Pending"
            case .preparingTrainingStack: return "PreparingTrainingStack"
            case .restarting: return "Restarting"
            case .starting: return "Starting"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .training: return "Training"
            case .updating: return "Updating"
            case .uploading: return "Uploading"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// An array element of SecondaryStatusTransitions for [DescribeTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrainingJob.html). It provides additional details about a status that the training job has transitioned through. A training job can be in one of several states, for example, starting, downloading, training, or uploading. Within each state, there are a number of intermediate states. For example, within the starting state, SageMaker could be starting the training job or launching the ML instances. These transitional states are referred to as the job's secondary status.
    public struct SecondaryStatusTransition {
        /// A timestamp that shows when the training job transitioned out of this secondary status state into another secondary status state or when the training job has ended.
        public var endTime: Foundation.Date?
        /// A timestamp that shows when the training job transitioned to the current secondary status state.
        /// This member is required.
        public var startTime: Foundation.Date?
        /// Contains a secondary status information from a training job. Status might be one of the following secondary statuses: InProgress
        ///
        /// * Starting - Starting the training job.
        ///
        /// * Downloading - An optional stage for algorithms that support File training input mode. It indicates that data is being downloaded to the ML storage volumes.
        ///
        /// * Training - Training is in progress.
        ///
        /// * Uploading - Training is complete and the model artifacts are being uploaded to the S3 location.
        ///
        ///
        /// Completed
        ///
        /// * Completed - The training job has completed.
        ///
        ///
        /// Failed
        ///
        /// * Failed - The training job has failed. The reason for the failure is returned in the FailureReason field of DescribeTrainingJobResponse.
        ///
        ///
        /// Stopped
        ///
        /// * MaxRuntimeExceeded - The job stopped because it exceeded the maximum allowed runtime.
        ///
        /// * Stopped - The training job has stopped.
        ///
        ///
        /// Stopping
        ///
        /// * Stopping - Stopping the training job.
        ///
        ///
        /// We no longer support the following secondary statuses:
        ///
        /// * LaunchingMLInstances
        ///
        /// * PreparingTrainingStack
        ///
        /// * DownloadingTrainingImage
        /// This member is required.
        public var status: SageMakerClientTypes.SecondaryStatus?
        /// A detailed description of the progress within a secondary status. SageMaker provides secondary statuses and status messages that apply to each of them: Starting
        ///
        /// * Starting the training job.
        ///
        /// * Launching requested ML instances.
        ///
        /// * Insufficient capacity error from EC2 while launching instances, retrying!
        ///
        /// * Launched instance was unhealthy, replacing it!
        ///
        /// * Preparing the instances for training.
        ///
        ///
        /// Training
        ///
        /// * Training image download completed. Training in progress.
        ///
        ///
        /// Status messages are subject to change. Therefore, we recommend not including them in code that programmatically initiates actions. For examples, don't use status messages in if statements. To have an overview of your training job's progress, view TrainingJobStatus and SecondaryStatus in [DescribeTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrainingJob.html), and StatusMessage together. For example, at the start of a training job, you might see the following:
        ///
        /// * TrainingJobStatus - InProgress
        ///
        /// * SecondaryStatus - Training
        ///
        /// * StatusMessage - Downloading the training image
        public var statusMessage: Swift.String?

        public init(
            endTime: Foundation.Date? = nil,
            startTime: Foundation.Date? = nil,
            status: SageMakerClientTypes.SecondaryStatus? = nil,
            statusMessage: Swift.String? = nil
        )
        {
            self.endTime = endTime
            self.startTime = startTime
            self.status = status
            self.statusMessage = statusMessage
        }
    }

}

extension SageMakerClientTypes {

    public enum WarmPoolResourceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case available
        case inuse
        case reused
        case terminated
        case sdkUnknown(Swift.String)

        public static var allCases: [WarmPoolResourceStatus] {
            return [
                .available,
                .inuse,
                .reused,
                .terminated
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .available: return "Available"
            case .inuse: return "InUse"
            case .reused: return "Reused"
            case .terminated: return "Terminated"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Status and billing information about the warm pool.
    public struct WarmPoolStatus {
        /// The billable time in seconds used by the warm pool. Billable time refers to the absolute wall-clock time. Multiply ResourceRetainedBillableTimeInSeconds by the number of instances (InstanceCount) in your training cluster to get the total compute time SageMaker bills you if you run warm pool training. The formula is as follows: ResourceRetainedBillableTimeInSeconds * InstanceCount.
        public var resourceRetainedBillableTimeInSeconds: Swift.Int?
        /// The name of the matching training job that reused the warm pool.
        public var reusedByJob: Swift.String?
        /// The status of the warm pool.
        ///
        /// * InUse: The warm pool is in use for the training job.
        ///
        /// * Available: The warm pool is available to reuse for a matching training job.
        ///
        /// * Reused: The warm pool moved to a matching training job for reuse.
        ///
        /// * Terminated: The warm pool is no longer available. Warm pools are unavailable if they are terminated by a user, terminated for a patch update, or terminated for exceeding the specified KeepAlivePeriodInSeconds.
        /// This member is required.
        public var status: SageMakerClientTypes.WarmPoolResourceStatus?

        public init(
            resourceRetainedBillableTimeInSeconds: Swift.Int? = nil,
            reusedByJob: Swift.String? = nil,
            status: SageMakerClientTypes.WarmPoolResourceStatus? = nil
        )
        {
            self.resourceRetainedBillableTimeInSeconds = resourceRetainedBillableTimeInSeconds
            self.reusedByJob = reusedByJob
            self.status = status
        }
    }

}

public struct DescribeTrainingJobOutput {
    /// Information about the algorithm used for training, and algorithm metadata.
    /// This member is required.
    public var algorithmSpecification: SageMakerClientTypes.AlgorithmSpecification?
    /// The Amazon Resource Name (ARN) of an AutoML job.
    public var autoMLJobArn: Swift.String?
    /// The billable time in seconds. Billable time refers to the absolute wall-clock time. Multiply BillableTimeInSeconds by the number of instances (InstanceCount) in your training cluster to get the total compute time SageMaker bills you if you run distributed training. The formula is as follows: BillableTimeInSeconds * InstanceCount . You can calculate the savings from using managed spot training using the formula (1 - BillableTimeInSeconds / TrainingTimeInSeconds) * 100. For example, if BillableTimeInSeconds is 100 and TrainingTimeInSeconds is 500, the savings is 80%.
    public var billableTimeInSeconds: Swift.Int?
    /// Contains information about the output location for managed spot training checkpoint data.
    public var checkpointConfig: SageMakerClientTypes.CheckpointConfig?
    /// A timestamp that indicates when the training job was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// Configuration information for the Amazon SageMaker Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the DebugHookConfig parameter, see [Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
    public var debugHookConfig: SageMakerClientTypes.DebugHookConfig?
    /// Configuration information for Amazon SageMaker Debugger rules for debugging output tensors.
    public var debugRuleConfigurations: [SageMakerClientTypes.DebugRuleConfiguration]?
    /// Evaluation status of Amazon SageMaker Debugger rules for debugging on a training job.
    public var debugRuleEvaluationStatuses: [SageMakerClientTypes.DebugRuleEvaluationStatus]?
    /// To encrypt all communications between ML compute instances in distributed training, choose True. Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithms in distributed training.
    public var enableInterContainerTrafficEncryption: Swift.Bool?
    /// A Boolean indicating whether managed spot training is enabled (True) or not (False).
    public var enableManagedSpotTraining: Swift.Bool?
    /// If you want to allow inbound or outbound network calls, except for calls between peers within a training cluster for distributed training, choose True. If you enable network isolation for training jobs that are configured to use a VPC, SageMaker downloads and uploads customer data and model artifacts through the specified VPC, but the training container does not have network access.
    public var enableNetworkIsolation: Swift.Bool?
    /// The environment variables to set in the Docker container.
    public var environment: [Swift.String: Swift.String]?
    /// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
    ///
    /// * [CreateProcessingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html)
    ///
    /// * [CreateTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
    ///
    /// * [CreateTransformJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html)
    public var experimentConfig: SageMakerClientTypes.ExperimentConfig?
    /// If the training job failed, the reason it failed.
    public var failureReason: Swift.String?
    /// A collection of MetricData objects that specify the names, values, and dates and times that the training algorithm emitted to Amazon CloudWatch.
    public var finalMetricDataList: [SageMakerClientTypes.MetricData]?
    /// Algorithm-specific parameters.
    public var hyperParameters: [Swift.String: Swift.String]?
    /// Contains information about the infrastructure health check configuration for the training job.
    public var infraCheckConfig: SageMakerClientTypes.InfraCheckConfig?
    /// An array of Channel objects that describes each data input channel.
    public var inputDataConfig: [SageMakerClientTypes.Channel]?
    /// The Amazon Resource Name (ARN) of the SageMaker Ground Truth labeling job that created the transform or training job.
    public var labelingJobArn: Swift.String?
    /// A timestamp that indicates when the status of the training job was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// Information about the Amazon S3 location that is configured for storing model artifacts.
    /// This member is required.
    public var modelArtifacts: SageMakerClientTypes.ModelArtifacts?
    /// The S3 path where model artifacts that you configured when creating the job are stored. SageMaker creates subfolders for model artifacts.
    public var outputDataConfig: SageMakerClientTypes.OutputDataConfig?
    /// Configuration information for Amazon SageMaker Debugger system monitoring, framework profiling, and storage paths.
    public var profilerConfig: SageMakerClientTypes.ProfilerConfig?
    /// Configuration information for Amazon SageMaker Debugger rules for profiling system and framework metrics.
    public var profilerRuleConfigurations: [SageMakerClientTypes.ProfilerRuleConfiguration]?
    /// Evaluation status of Amazon SageMaker Debugger rules for profiling on a training job.
    public var profilerRuleEvaluationStatuses: [SageMakerClientTypes.ProfilerRuleEvaluationStatus]?
    /// Profiling status of a training job.
    public var profilingStatus: SageMakerClientTypes.ProfilingStatus?
    /// Configuration for remote debugging. To learn more about the remote debugging functionality of SageMaker, see [Access a training container through Amazon Web Services Systems Manager (SSM) for remote debugging](https://docs.aws.amazon.com/sagemaker/latest/dg/train-remote-debugging.html).
    public var remoteDebugConfig: SageMakerClientTypes.RemoteDebugConfig?
    /// Resources, including ML compute instances and ML storage volumes, that are configured for model training.
    /// This member is required.
    public var resourceConfig: SageMakerClientTypes.ResourceConfig?
    /// The number of times to retry the job when the job fails due to an InternalServerError.
    public var retryStrategy: SageMakerClientTypes.RetryStrategy?
    /// The Amazon Web Services Identity and Access Management (IAM) role configured for the training job.
    public var roleArn: Swift.String?
    /// Provides detailed information about the state of the training job. For detailed information on the secondary status of the training job, see StatusMessage under [SecondaryStatusTransition](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_SecondaryStatusTransition.html). SageMaker provides primary statuses and secondary statuses that apply to each of them: InProgress
    ///
    /// * Starting - Starting the training job.
    ///
    /// * Downloading - An optional stage for algorithms that support File training input mode. It indicates that data is being downloaded to the ML storage volumes.
    ///
    /// * Training - Training is in progress.
    ///
    /// * Interrupted - The job stopped because the managed spot training instances were interrupted.
    ///
    /// * Uploading - Training is complete and the model artifacts are being uploaded to the S3 location.
    ///
    ///
    /// Completed
    ///
    /// * Completed - The training job has completed.
    ///
    ///
    /// Failed
    ///
    /// * Failed - The training job has failed. The reason for the failure is returned in the FailureReason field of DescribeTrainingJobResponse.
    ///
    ///
    /// Stopped
    ///
    /// * MaxRuntimeExceeded - The job stopped because it exceeded the maximum allowed runtime.
    ///
    /// * MaxWaitTimeExceeded - The job stopped because it exceeded the maximum allowed wait time.
    ///
    /// * Stopped - The training job has stopped.
    ///
    ///
    /// Stopping
    ///
    /// * Stopping - Stopping the training job.
    ///
    ///
    /// Valid values for SecondaryStatus are subject to change. We no longer support the following secondary statuses:
    ///
    /// * LaunchingMLInstances
    ///
    /// * PreparingTraining
    ///
    /// * DownloadingTrainingImage
    /// This member is required.
    public var secondaryStatus: SageMakerClientTypes.SecondaryStatus?
    /// A history of all of the secondary statuses that the training job has transitioned through.
    public var secondaryStatusTransitions: [SageMakerClientTypes.SecondaryStatusTransition]?
    /// Specifies a limit to how long a model training job can run. It also specifies how long a managed Spot training job has to complete. When the job reaches the time limit, SageMaker ends the training job. Use this API to cap model training costs. To stop a job, SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
    /// This member is required.
    public var stoppingCondition: SageMakerClientTypes.StoppingCondition?
    /// Configuration of storage locations for the Amazon SageMaker Debugger TensorBoard output data.
    public var tensorBoardOutputConfig: SageMakerClientTypes.TensorBoardOutputConfig?
    /// Indicates the time when the training job ends on training instances. You are billed for the time interval between the value of TrainingStartTime and this time. For successful jobs and stopped jobs, this is the time after model artifacts are uploaded. For failed jobs, this is the time when SageMaker detects a job failure.
    public var trainingEndTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the training job.
    /// This member is required.
    public var trainingJobArn: Swift.String?
    /// Name of the model training job.
    /// This member is required.
    public var trainingJobName: Swift.String?
    /// The status of the training job. SageMaker provides the following training job statuses:
    ///
    /// * InProgress - The training is in progress.
    ///
    /// * Completed - The training job has completed.
    ///
    /// * Failed - The training job has failed. To see the reason for the failure, see the FailureReason field in the response to a DescribeTrainingJobResponse call.
    ///
    /// * Stopping - The training job is stopping.
    ///
    /// * Stopped - The training job has stopped.
    ///
    ///
    /// For more detailed information, see SecondaryStatus.
    /// This member is required.
    public var trainingJobStatus: SageMakerClientTypes.TrainingJobStatus?
    /// Indicates the time when the training job starts on training instances. You are billed for the time interval between this time and the value of TrainingEndTime. The start time in CloudWatch Logs might be later than this time. The difference is due to the time it takes to download the training data and to the size of the training container.
    public var trainingStartTime: Foundation.Date?
    /// The training time in seconds.
    public var trainingTimeInSeconds: Swift.Int?
    /// The Amazon Resource Name (ARN) of the associated hyperparameter tuning job if the training job was launched by a hyperparameter tuning job.
    public var tuningJobArn: Swift.String?
    /// A [VpcConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html) object that specifies the VPC that this training job has access to. For more information, see [Protect Training Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).
    public var vpcConfig: SageMakerClientTypes.VpcConfig?
    /// The status of the warm pool associated with the training job.
    public var warmPoolStatus: SageMakerClientTypes.WarmPoolStatus?

    public init(
        algorithmSpecification: SageMakerClientTypes.AlgorithmSpecification? = nil,
        autoMLJobArn: Swift.String? = nil,
        billableTimeInSeconds: Swift.Int? = nil,
        checkpointConfig: SageMakerClientTypes.CheckpointConfig? = nil,
        creationTime: Foundation.Date? = nil,
        debugHookConfig: SageMakerClientTypes.DebugHookConfig? = nil,
        debugRuleConfigurations: [SageMakerClientTypes.DebugRuleConfiguration]? = nil,
        debugRuleEvaluationStatuses: [SageMakerClientTypes.DebugRuleEvaluationStatus]? = nil,
        enableInterContainerTrafficEncryption: Swift.Bool? = nil,
        enableManagedSpotTraining: Swift.Bool? = nil,
        enableNetworkIsolation: Swift.Bool? = nil,
        environment: [Swift.String: Swift.String]? = nil,
        experimentConfig: SageMakerClientTypes.ExperimentConfig? = nil,
        failureReason: Swift.String? = nil,
        finalMetricDataList: [SageMakerClientTypes.MetricData]? = nil,
        hyperParameters: [Swift.String: Swift.String]? = nil,
        infraCheckConfig: SageMakerClientTypes.InfraCheckConfig? = nil,
        inputDataConfig: [SageMakerClientTypes.Channel]? = nil,
        labelingJobArn: Swift.String? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        modelArtifacts: SageMakerClientTypes.ModelArtifacts? = nil,
        outputDataConfig: SageMakerClientTypes.OutputDataConfig? = nil,
        profilerConfig: SageMakerClientTypes.ProfilerConfig? = nil,
        profilerRuleConfigurations: [SageMakerClientTypes.ProfilerRuleConfiguration]? = nil,
        profilerRuleEvaluationStatuses: [SageMakerClientTypes.ProfilerRuleEvaluationStatus]? = nil,
        profilingStatus: SageMakerClientTypes.ProfilingStatus? = nil,
        remoteDebugConfig: SageMakerClientTypes.RemoteDebugConfig? = nil,
        resourceConfig: SageMakerClientTypes.ResourceConfig? = nil,
        retryStrategy: SageMakerClientTypes.RetryStrategy? = nil,
        roleArn: Swift.String? = nil,
        secondaryStatus: SageMakerClientTypes.SecondaryStatus? = nil,
        secondaryStatusTransitions: [SageMakerClientTypes.SecondaryStatusTransition]? = nil,
        stoppingCondition: SageMakerClientTypes.StoppingCondition? = nil,
        tensorBoardOutputConfig: SageMakerClientTypes.TensorBoardOutputConfig? = nil,
        trainingEndTime: Foundation.Date? = nil,
        trainingJobArn: Swift.String? = nil,
        trainingJobName: Swift.String? = nil,
        trainingJobStatus: SageMakerClientTypes.TrainingJobStatus? = nil,
        trainingStartTime: Foundation.Date? = nil,
        trainingTimeInSeconds: Swift.Int? = nil,
        tuningJobArn: Swift.String? = nil,
        vpcConfig: SageMakerClientTypes.VpcConfig? = nil,
        warmPoolStatus: SageMakerClientTypes.WarmPoolStatus? = nil
    )
    {
        self.algorithmSpecification = algorithmSpecification
        self.autoMLJobArn = autoMLJobArn
        self.billableTimeInSeconds = billableTimeInSeconds
        self.checkpointConfig = checkpointConfig
        self.creationTime = creationTime
        self.debugHookConfig = debugHookConfig
        self.debugRuleConfigurations = debugRuleConfigurations
        self.debugRuleEvaluationStatuses = debugRuleEvaluationStatuses
        self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
        self.enableManagedSpotTraining = enableManagedSpotTraining
        self.enableNetworkIsolation = enableNetworkIsolation
        self.environment = environment
        self.experimentConfig = experimentConfig
        self.failureReason = failureReason
        self.finalMetricDataList = finalMetricDataList
        self.hyperParameters = hyperParameters
        self.infraCheckConfig = infraCheckConfig
        self.inputDataConfig = inputDataConfig
        self.labelingJobArn = labelingJobArn
        self.lastModifiedTime = lastModifiedTime
        self.modelArtifacts = modelArtifacts
        self.outputDataConfig = outputDataConfig
        self.profilerConfig = profilerConfig
        self.profilerRuleConfigurations = profilerRuleConfigurations
        self.profilerRuleEvaluationStatuses = profilerRuleEvaluationStatuses
        self.profilingStatus = profilingStatus
        self.remoteDebugConfig = remoteDebugConfig
        self.resourceConfig = resourceConfig
        self.retryStrategy = retryStrategy
        self.roleArn = roleArn
        self.secondaryStatus = secondaryStatus
        self.secondaryStatusTransitions = secondaryStatusTransitions
        self.stoppingCondition = stoppingCondition
        self.tensorBoardOutputConfig = tensorBoardOutputConfig
        self.trainingEndTime = trainingEndTime
        self.trainingJobArn = trainingJobArn
        self.trainingJobName = trainingJobName
        self.trainingJobStatus = trainingJobStatus
        self.trainingStartTime = trainingStartTime
        self.trainingTimeInSeconds = trainingTimeInSeconds
        self.tuningJobArn = tuningJobArn
        self.vpcConfig = vpcConfig
        self.warmPoolStatus = warmPoolStatus
    }
}

public struct DescribeTransformJobInput {
    /// The name of the transform job that you want to view details of.
    /// This member is required.
    public var transformJobName: Swift.String?

    public init(
        transformJobName: Swift.String? = nil
    )
    {
        self.transformJobName = transformJobName
    }
}

extension SageMakerClientTypes {

    public enum TransformJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [TransformJobStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "Completed"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeTransformJobOutput {
    /// The Amazon Resource Name (ARN) of the AutoML transform job.
    public var autoMLJobArn: Swift.String?
    /// Specifies the number of records to include in a mini-batch for an HTTP inference request. A record is a single unit of input data that inference can be made on. For example, a single line in a CSV file is a record. To enable the batch strategy, you must set SplitType to Line, RecordIO, or TFRecord.
    public var batchStrategy: SageMakerClientTypes.BatchStrategy?
    /// A timestamp that shows when the transform Job was created.
    /// This member is required.
    public var creationTime: Foundation.Date?
    /// Configuration to control how SageMaker captures inference data.
    public var dataCaptureConfig: SageMakerClientTypes.BatchDataCaptureConfig?
    /// The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see [Associate Prediction Results with their Corresponding Input Records](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html).
    public var dataProcessing: SageMakerClientTypes.DataProcessing?
    /// The environment variables to set in the Docker container. We support up to 16 key and values entries in the map.
    public var environment: [Swift.String: Swift.String]?
    /// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
    ///
    /// * [CreateProcessingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html)
    ///
    /// * [CreateTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
    ///
    /// * [CreateTransformJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html)
    public var experimentConfig: SageMakerClientTypes.ExperimentConfig?
    /// If the transform job failed, FailureReason describes why it failed. A transform job creates a log file, which includes error messages, and stores it as an Amazon S3 object. For more information, see [Log Amazon SageMaker Events with Amazon CloudWatch](https://docs.aws.amazon.com/sagemaker/latest/dg/logging-cloudwatch.html).
    public var failureReason: Swift.String?
    /// The Amazon Resource Name (ARN) of the Amazon SageMaker Ground Truth labeling job that created the transform or training job.
    public var labelingJobArn: Swift.String?
    /// The maximum number of parallel requests on each instance node that can be launched in a transform job. The default value is 1.
    public var maxConcurrentTransforms: Swift.Int?
    /// The maximum payload size, in MB, used in the transform job.
    public var maxPayloadInMB: Swift.Int?
    /// The timeout and maximum number of retries for processing a transform job invocation.
    public var modelClientConfig: SageMakerClientTypes.ModelClientConfig?
    /// The name of the model used in the transform job.
    /// This member is required.
    public var modelName: Swift.String?
    /// Indicates when the transform job has been completed, or has stopped or failed. You are billed for the time interval between this time and the value of TransformStartTime.
    public var transformEndTime: Foundation.Date?
    /// Describes the dataset to be transformed and the Amazon S3 location where it is stored.
    /// This member is required.
    public var transformInput: SageMakerClientTypes.TransformInput?
    /// The Amazon Resource Name (ARN) of the transform job.
    /// This member is required.
    public var transformJobArn: Swift.String?
    /// The name of the transform job.
    /// This member is required.
    public var transformJobName: Swift.String?
    /// The status of the transform job. If the transform job failed, the reason is returned in the FailureReason field.
    /// This member is required.
    public var transformJobStatus: SageMakerClientTypes.TransformJobStatus?
    /// Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job.
    public var transformOutput: SageMakerClientTypes.TransformOutput?
    /// Describes the resources, including ML instance types and ML instance count, to use for the transform job.
    /// This member is required.
    public var transformResources: SageMakerClientTypes.TransformResources?
    /// Indicates when the transform job starts on ML instances. You are billed for the time interval between this time and the value of TransformEndTime.
    public var transformStartTime: Foundation.Date?

    public init(
        autoMLJobArn: Swift.String? = nil,
        batchStrategy: SageMakerClientTypes.BatchStrategy? = nil,
        creationTime: Foundation.Date? = nil,
        dataCaptureConfig: SageMakerClientTypes.BatchDataCaptureConfig? = nil,
        dataProcessing: SageMakerClientTypes.DataProcessing? = nil,
        environment: [Swift.String: Swift.String]? = nil,
        experimentConfig: SageMakerClientTypes.ExperimentConfig? = nil,
        failureReason: Swift.String? = nil,
        labelingJobArn: Swift.String? = nil,
        maxConcurrentTransforms: Swift.Int? = nil,
        maxPayloadInMB: Swift.Int? = nil,
        modelClientConfig: SageMakerClientTypes.ModelClientConfig? = nil,
        modelName: Swift.String? = nil,
        transformEndTime: Foundation.Date? = nil,
        transformInput: SageMakerClientTypes.TransformInput? = nil,
        transformJobArn: Swift.String? = nil,
        transformJobName: Swift.String? = nil,
        transformJobStatus: SageMakerClientTypes.TransformJobStatus? = nil,
        transformOutput: SageMakerClientTypes.TransformOutput? = nil,
        transformResources: SageMakerClientTypes.TransformResources? = nil,
        transformStartTime: Foundation.Date? = nil
    )
    {
        self.autoMLJobArn = autoMLJobArn
        self.batchStrategy = batchStrategy
        self.creationTime = creationTime
        self.dataCaptureConfig = dataCaptureConfig
        self.dataProcessing = dataProcessing
        self.environment = environment
        self.experimentConfig = experimentConfig
        self.failureReason = failureReason
        self.labelingJobArn = labelingJobArn
        self.maxConcurrentTransforms = maxConcurrentTransforms
        self.maxPayloadInMB = maxPayloadInMB
        self.modelClientConfig = modelClientConfig
        self.modelName = modelName
        self.transformEndTime = transformEndTime
        self.transformInput = transformInput
        self.transformJobArn = transformJobArn
        self.transformJobName = transformJobName
        self.transformJobStatus = transformJobStatus
        self.transformOutput = transformOutput
        self.transformResources = transformResources
        self.transformStartTime = transformStartTime
    }
}

public struct DescribeTrialInput {
    /// The name of the trial to describe.
    /// This member is required.
    public var trialName: Swift.String?

    public init(
        trialName: Swift.String? = nil
    )
    {
        self.trialName = trialName
    }
}

extension SageMakerClientTypes {
    /// The source of the trial.
    public struct TrialSource {
        /// The Amazon Resource Name (ARN) of the source.
        /// This member is required.
        public var sourceArn: Swift.String?
        /// The source job type.
        public var sourceType: Swift.String?

        public init(
            sourceArn: Swift.String? = nil,
            sourceType: Swift.String? = nil
        )
        {
            self.sourceArn = sourceArn
            self.sourceType = sourceType
        }
    }

}

public struct DescribeTrialOutput {
    /// Who created the trial.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// When the trial was created.
    public var creationTime: Foundation.Date?
    /// The name of the trial as displayed. If DisplayName isn't specified, TrialName is displayed.
    public var displayName: Swift.String?
    /// The name of the experiment the trial is part of.
    public var experimentName: Swift.String?
    /// Who last modified the trial.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// When the trial was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// The Amazon Resource Name (ARN) of the source and, optionally, the job type.
    public var source: SageMakerClientTypes.TrialSource?
    /// The Amazon Resource Name (ARN) of the trial.
    public var trialArn: Swift.String?
    /// The name of the trial.
    public var trialName: Swift.String?

    public init(
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: Foundation.Date? = nil,
        displayName: Swift.String? = nil,
        experimentName: Swift.String? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        source: SageMakerClientTypes.TrialSource? = nil,
        trialArn: Swift.String? = nil,
        trialName: Swift.String? = nil
    )
    {
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.displayName = displayName
        self.experimentName = experimentName
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.metadataProperties = metadataProperties
        self.source = source
        self.trialArn = trialArn
        self.trialName = trialName
    }
}

public struct DescribeTrialComponentInput {
    /// The name of the trial component to describe.
    /// This member is required.
    public var trialComponentName: Swift.String?

    public init(
        trialComponentName: Swift.String? = nil
    )
    {
        self.trialComponentName = trialComponentName
    }
}

extension SageMakerClientTypes {
    /// A summary of the metrics of a trial component.
    public struct TrialComponentMetricSummary {
        /// The average value of the metric.
        public var avg: Swift.Double?
        /// The number of samples used to generate the metric.
        public var count: Swift.Int?
        /// The most recent value of the metric.
        public var last: Swift.Double?
        /// The maximum value of the metric.
        public var max: Swift.Double?
        /// The name of the metric.
        public var metricName: Swift.String?
        /// The minimum value of the metric.
        public var min: Swift.Double?
        /// The Amazon Resource Name (ARN) of the source.
        public var sourceArn: Swift.String?
        /// The standard deviation of the metric.
        public var stdDev: Swift.Double?
        /// When the metric was last updated.
        public var timeStamp: Foundation.Date?

        public init(
            avg: Swift.Double? = nil,
            count: Swift.Int? = nil,
            last: Swift.Double? = nil,
            max: Swift.Double? = nil,
            metricName: Swift.String? = nil,
            min: Swift.Double? = nil,
            sourceArn: Swift.String? = nil,
            stdDev: Swift.Double? = nil,
            timeStamp: Foundation.Date? = nil
        )
        {
            self.avg = avg
            self.count = count
            self.last = last
            self.max = max
            self.metricName = metricName
            self.min = min
            self.sourceArn = sourceArn
            self.stdDev = stdDev
            self.timeStamp = timeStamp
        }
    }

}

extension SageMakerClientTypes {
    /// The Amazon Resource Name (ARN) and job type of the source of a trial component.
    public struct TrialComponentSource {
        /// The source Amazon Resource Name (ARN).
        /// This member is required.
        public var sourceArn: Swift.String?
        /// The source job type.
        public var sourceType: Swift.String?

        public init(
            sourceArn: Swift.String? = nil,
            sourceType: Swift.String? = nil
        )
        {
            self.sourceArn = sourceArn
            self.sourceType = sourceType
        }
    }

}

public struct DescribeTrialComponentOutput {
    /// Who created the trial component.
    public var createdBy: SageMakerClientTypes.UserContext?
    /// When the component was created.
    public var creationTime: Foundation.Date?
    /// The name of the component as displayed. If DisplayName isn't specified, TrialComponentName is displayed.
    public var displayName: Swift.String?
    /// When the component ended.
    public var endTime: Foundation.Date?
    /// The input artifacts of the component.
    public var inputArtifacts: [Swift.String: SageMakerClientTypes.TrialComponentArtifact]?
    /// Who last modified the component.
    public var lastModifiedBy: SageMakerClientTypes.UserContext?
    /// When the component was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The Amazon Resource Name (ARN) of the lineage group.
    public var lineageGroupArn: Swift.String?
    /// Metadata properties of the tracking entity, trial, or trial component.
    public var metadataProperties: SageMakerClientTypes.MetadataProperties?
    /// The metrics for the component.
    public var metrics: [SageMakerClientTypes.TrialComponentMetricSummary]?
    /// The output artifacts of the component.
    public var outputArtifacts: [Swift.String: SageMakerClientTypes.TrialComponentArtifact]?
    /// The hyperparameters of the component.
    public var parameters: [Swift.String: SageMakerClientTypes.TrialComponentParameterValue]?
    /// The Amazon Resource Name (ARN) of the source and, optionally, the job type.
    public var source: SageMakerClientTypes.TrialComponentSource?
    /// A list of ARNs and, if applicable, job types for multiple sources of an experiment run.
    public var sources: [SageMakerClientTypes.TrialComponentSource]?
    /// When the component started.
    public var startTime: Foundation.Date?
    /// The status of the component. States include:
    ///
    /// * InProgress
    ///
    /// * Completed
    ///
    /// * Failed
    public var status: SageMakerClientTypes.TrialComponentStatus?
    /// The Amazon Resource Name (ARN) of the trial component.
    public var trialComponentArn: Swift.String?
    /// The name of the trial component.
    public var trialComponentName: Swift.String?

    public init(
        createdBy: SageMakerClientTypes.UserContext? = nil,
        creationTime: Foundation.Date? = nil,
        displayName: Swift.String? = nil,
        endTime: Foundation.Date? = nil,
        inputArtifacts: [Swift.String: SageMakerClientTypes.TrialComponentArtifact]? = nil,
        lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        lineageGroupArn: Swift.String? = nil,
        metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
        metrics: [SageMakerClientTypes.TrialComponentMetricSummary]? = nil,
        outputArtifacts: [Swift.String: SageMakerClientTypes.TrialComponentArtifact]? = nil,
        parameters: [Swift.String: SageMakerClientTypes.TrialComponentParameterValue]? = nil,
        source: SageMakerClientTypes.TrialComponentSource? = nil,
        sources: [SageMakerClientTypes.TrialComponentSource]? = nil,
        startTime: Foundation.Date? = nil,
        status: SageMakerClientTypes.TrialComponentStatus? = nil,
        trialComponentArn: Swift.String? = nil,
        trialComponentName: Swift.String? = nil
    )
    {
        self.createdBy = createdBy
        self.creationTime = creationTime
        self.displayName = displayName
        self.endTime = endTime
        self.inputArtifacts = inputArtifacts
        self.lastModifiedBy = lastModifiedBy
        self.lastModifiedTime = lastModifiedTime
        self.lineageGroupArn = lineageGroupArn
        self.metadataProperties = metadataProperties
        self.metrics = metrics
        self.outputArtifacts = outputArtifacts
        self.parameters = parameters
        self.source = source
        self.sources = sources
        self.startTime = startTime
        self.status = status
        self.trialComponentArn = trialComponentArn
        self.trialComponentName = trialComponentName
    }
}

public struct DescribeUserProfileInput {
    /// The domain ID.
    /// This member is required.
    public var domainId: Swift.String?
    /// The user profile name. This value is not case sensitive.
    /// This member is required.
    public var userProfileName: Swift.String?

    public init(
        domainId: Swift.String? = nil,
        userProfileName: Swift.String? = nil
    )
    {
        self.domainId = domainId
        self.userProfileName = userProfileName
    }
}

extension SageMakerClientTypes {

    public enum UserProfileStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleteFailed
        case deleting
        case failed
        case inservice
        case pending
        case updateFailed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [UserProfileStatus] {
            return [
                .deleteFailed,
                .deleting,
                .failed,
                .inservice,
                .pending,
                .updateFailed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleteFailed: return "Delete_Failed"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .inservice: return "InService"
            case .pending: return "Pending"
            case .updateFailed: return "Update_Failed"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DescribeUserProfileOutput {
    /// The creation time.
    public var creationTime: Foundation.Date?
    /// The ID of the domain that contains the profile.
    public var domainId: Swift.String?
    /// The failure reason.
    public var failureReason: Swift.String?
    /// The ID of the user's profile in the Amazon Elastic File System volume.
    public var homeEfsFileSystemUid: Swift.String?
    /// The last modified time.
    public var lastModifiedTime: Foundation.Date?
    /// The IAM Identity Center user identifier.
    public var singleSignOnUserIdentifier: Swift.String?
    /// The IAM Identity Center user value.
    public var singleSignOnUserValue: Swift.String?
    /// The status.
    public var status: SageMakerClientTypes.UserProfileStatus?
    /// The user profile Amazon Resource Name (ARN).
    public var userProfileArn: Swift.String?
    /// The user profile name.
    public var userProfileName: Swift.String?
    /// A collection of settings.
    public var userSettings: SageMakerClientTypes.UserSettings?

    public init(
        creationTime: Foundation.Date? = nil,
        domainId: Swift.String? = nil,
        failureReason: Swift.String? = nil,
        homeEfsFileSystemUid: Swift.String? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        singleSignOnUserIdentifier: Swift.String? = nil,
        singleSignOnUserValue: Swift.String? = nil,
        status: SageMakerClientTypes.UserProfileStatus? = nil,
        userProfileArn: Swift.String? = nil,
        userProfileName: Swift.String? = nil,
        userSettings: SageMakerClientTypes.UserSettings? = nil
    )
    {
        self.creationTime = creationTime
        self.domainId = domainId
        self.failureReason = failureReason
        self.homeEfsFileSystemUid = homeEfsFileSystemUid
        self.lastModifiedTime = lastModifiedTime
        self.singleSignOnUserIdentifier = singleSignOnUserIdentifier
        self.singleSignOnUserValue = singleSignOnUserValue
        self.status = status
        self.userProfileArn = userProfileArn
        self.userProfileName = userProfileName
        self.userSettings = userSettings
    }
}

public struct DescribeWorkforceInput {
    /// The name of the private workforce whose access you want to restrict. WorkforceName is automatically set to default when a workforce is created and cannot be modified.
    /// This member is required.
    public var workforceName: Swift.String?

    public init(
        workforceName: Swift.String? = nil
    )
    {
        self.workforceName = workforceName
    }
}

extension SageMakerClientTypes {
    /// Your OIDC IdP workforce configuration.
    public struct OidcConfigForResponse {
        /// A string to string map of identifiers specific to the custom identity provider (IdP) being used.
        public var authenticationRequestExtraParams: [Swift.String: Swift.String]?
        /// The OIDC IdP authorization endpoint used to configure your private workforce.
        public var authorizationEndpoint: Swift.String?
        /// The OIDC IdP client ID used to configure your private workforce.
        public var clientId: Swift.String?
        /// The OIDC IdP issuer used to configure your private workforce.
        public var issuer: Swift.String?
        /// The OIDC IdP JSON Web Key Set (Jwks) URI used to configure your private workforce.
        public var jwksUri: Swift.String?
        /// The OIDC IdP logout endpoint used to configure your private workforce.
        public var logoutEndpoint: Swift.String?
        /// An array of string identifiers used to refer to the specific pieces of user data or claims that the client application wants to access.
        public var scope: Swift.String?
        /// The OIDC IdP token endpoint used to configure your private workforce.
        public var tokenEndpoint: Swift.String?
        /// The OIDC IdP user information endpoint used to configure your private workforce.
        public var userInfoEndpoint: Swift.String?

        public init(
            authenticationRequestExtraParams: [Swift.String: Swift.String]? = nil,
            authorizationEndpoint: Swift.String? = nil,
            clientId: Swift.String? = nil,
            issuer: Swift.String? = nil,
            jwksUri: Swift.String? = nil,
            logoutEndpoint: Swift.String? = nil,
            scope: Swift.String? = nil,
            tokenEndpoint: Swift.String? = nil,
            userInfoEndpoint: Swift.String? = nil
        )
        {
            self.authenticationRequestExtraParams = authenticationRequestExtraParams
            self.authorizationEndpoint = authorizationEndpoint
            self.clientId = clientId
            self.issuer = issuer
            self.jwksUri = jwksUri
            self.logoutEndpoint = logoutEndpoint
            self.scope = scope
            self.tokenEndpoint = tokenEndpoint
            self.userInfoEndpoint = userInfoEndpoint
        }
    }

}

extension SageMakerClientTypes {

    public enum WorkforceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case deleting
        case failed
        case initializing
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [WorkforceStatus] {
            return [
                .active,
                .deleting,
                .failed,
                .initializing,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .deleting: return "Deleting"
            case .failed: return "Failed"
            case .initializing: return "Initializing"
            case .updating: return "Updating"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A VpcConfig object that specifies the VPC that you want your workforce to connect to.
    public struct WorkforceVpcConfigResponse {
        /// The VPC security group IDs, in the form sg-xxxxxxxx. The security groups must be for the same VPC as specified in the subnet.
        /// This member is required.
        public var securityGroupIds: [Swift.String]?
        /// The ID of the subnets in the VPC that you want to connect.
        /// This member is required.
        public var subnets: [Swift.String]?
        /// The IDs for the VPC service endpoints of your VPC workforce when it is created and updated.
        public var vpcEndpointId: Swift.String?
        /// The ID of the VPC that the workforce uses for communication.
        /// This member is required.
        public var vpcId: Swift.String?

        public init(
            securityGroupIds: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil,
            vpcEndpointId: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
            self.vpcEndpointId = vpcEndpointId
            self.vpcId = vpcId
        }
    }

}

extension SageMakerClientTypes {
    /// A single private workforce, which is automatically created when you create your first private work team. You can create one private work force in each Amazon Web Services Region. By default, any workforce-related API operation used in a specific region will apply to the workforce created in that region. To learn how to create a private workforce, see [Create a Private Workforce](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html).
    public struct Workforce {
        /// The configuration of an Amazon Cognito workforce. A single Cognito workforce is created using and corresponds to a single [ Amazon Cognito user pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html).
        public var cognitoConfig: SageMakerClientTypes.CognitoConfig?
        /// The date that the workforce is created.
        public var createDate: Foundation.Date?
        /// The reason your workforce failed.
        public var failureReason: Swift.String?
        /// The most recent date that [UpdateWorkforce](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateWorkforce.html) was used to successfully add one or more IP address ranges ([CIDRs](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html)) to a private workforce's allow list.
        public var lastUpdatedDate: Foundation.Date?
        /// The configuration of an OIDC Identity Provider (IdP) private workforce.
        public var oidcConfig: SageMakerClientTypes.OidcConfigForResponse?
        /// A list of one to ten IP address ranges ([CIDRs](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html)) to be added to the workforce allow list. By default, a workforce isn't restricted to specific IP addresses.
        public var sourceIpConfig: SageMakerClientTypes.SourceIpConfig?
        /// The status of your workforce.
        public var status: SageMakerClientTypes.WorkforceStatus?
        /// The subdomain for your OIDC Identity Provider.
        public var subDomain: Swift.String?
        /// The Amazon Resource Name (ARN) of the private workforce.
        /// This member is required.
        public var workforceArn: Swift.String?
        /// The name of the private workforce.
        /// This member is required.
        public var workforceName: Swift.String?
        /// The configuration of a VPC workforce.
        public var workforceVpcConfig: SageMakerClientTypes.WorkforceVpcConfigResponse?

        public init(
            cognitoConfig: SageMakerClientTypes.CognitoConfig? = nil,
            createDate: Foundation.Date? = nil,
            failureReason: Swift.String? = nil,
            lastUpdatedDate: Foundation.Date? = nil,
            oidcConfig: SageMakerClientTypes.OidcConfigForResponse? = nil,
            sourceIpConfig: SageMakerClientTypes.SourceIpConfig? = nil,
            status: SageMakerClientTypes.WorkforceStatus? = nil,
            subDomain: Swift.String? = nil,
            workforceArn: Swift.String? = nil,
            workforceName: Swift.String? = nil,
            workforceVpcConfig: SageMakerClientTypes.WorkforceVpcConfigResponse? = nil
        )
        {
            self.cognitoConfig = cognitoConfig
            self.createDate = createDate
            self.failureReason = failureReason
            self.lastUpdatedDate = lastUpdatedDate
            self.oidcConfig = oidcConfig
            self.sourceIpConfig = sourceIpConfig
            self.status = status
            self.subDomain = subDomain
            self.workforceArn = workforceArn
            self.workforceName = workforceName
            self.workforceVpcConfig = workforceVpcConfig
        }
    }

}

public struct DescribeWorkforceOutput {
    /// A single private workforce, which is automatically created when you create your first private work team. You can create one private work force in each Amazon Web Services Region. By default, any workforce-related API operation used in a specific region will apply to the workforce created in that region. To learn how to create a private workforce, see [Create a Private Workforce](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html).
    /// This member is required.
    public var workforce: SageMakerClientTypes.Workforce?

    public init(
        workforce: SageMakerClientTypes.Workforce? = nil
    )
    {
        self.workforce = workforce
    }
}

public struct DescribeWorkteamInput {
    /// The name of the work team to return a description of.
    /// This member is required.
    public var workteamName: Swift.String?

    public init(
        workteamName: Swift.String? = nil
    )
    {
        self.workteamName = workteamName
    }
}

extension SageMakerClientTypes {
    /// Provides details about a labeling work team.
    public struct Workteam {
        /// The date and time that the work team was created (timestamp).
        public var createDate: Foundation.Date?
        /// A description of the work team.
        /// This member is required.
        public var description: Swift.String?
        /// The date and time that the work team was last updated (timestamp).
        public var lastUpdatedDate: Foundation.Date?
        /// A list of MemberDefinition objects that contains objects that identify the workers that make up the work team. Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use CognitoMemberDefinition. For workforces created using your own OIDC identity provider (IdP) use OidcMemberDefinition.
        /// This member is required.
        public var memberDefinitions: [SageMakerClientTypes.MemberDefinition]?
        /// Configures SNS notifications of available or expiring work items for work teams.
        public var notificationConfiguration: SageMakerClientTypes.NotificationConfiguration?
        /// The Amazon Marketplace identifier for a vendor's work team.
        public var productListingIds: [Swift.String]?
        /// The URI of the labeling job's user interface. Workers open this URI to start labeling your data objects.
        public var subDomain: Swift.String?
        /// Describes any access constraints that have been defined for Amazon S3 resources.
        public var workerAccessConfiguration: SageMakerClientTypes.WorkerAccessConfiguration?
        /// The Amazon Resource Name (ARN) of the workforce.
        public var workforceArn: Swift.String?
        /// The Amazon Resource Name (ARN) that identifies the work team.
        /// This member is required.
        public var workteamArn: Swift.String?
        /// The name of the work team.
        /// This member is required.
        public var workteamName: Swift.String?

        public init(
            createDate: Foundation.Date? = nil,
            description: Swift.String? = nil,
            lastUpdatedDate: Foundation.Date? = nil,
            memberDefinitions: [SageMakerClientTypes.MemberDefinition]? = nil,
            notificationConfiguration: SageMakerClientTypes.NotificationConfiguration? = nil,
            productListingIds: [Swift.String]? = nil,
            subDomain: Swift.String? = nil,
            workerAccessConfiguration: SageMakerClientTypes.WorkerAccessConfiguration? = nil,
            workforceArn: Swift.String? = nil,
            workteamArn: Swift.String? = nil,
            workteamName: Swift.String? = nil
        )
        {
            self.createDate = createDate
            self.description = description
            self.lastUpdatedDate = lastUpdatedDate
            self.memberDefinitions = memberDefinitions
            self.notificationConfiguration = notificationConfiguration
            self.productListingIds = productListingIds
            self.subDomain = subDomain
            self.workerAccessConfiguration = workerAccessConfiguration
            self.workforceArn = workforceArn
            self.workteamArn = workteamArn
            self.workteamName = workteamName
        }
    }

}

public struct DescribeWorkteamOutput {
    /// A Workteam instance that contains information about the work team.
    /// This member is required.
    public var workteam: SageMakerClientTypes.Workteam?

    public init(
        workteam: SageMakerClientTypes.Workteam? = nil
    )
    {
        self.workteam = workteam
    }
}

extension SageMakerClientTypes {
    /// Specifies the serverless update concurrency configuration for an endpoint variant.
    public struct ProductionVariantServerlessUpdateConfig {
        /// The updated maximum number of concurrent invocations your serverless endpoint can process.
        public var maxConcurrency: Swift.Int?
        /// The updated amount of provisioned concurrency to allocate for the serverless endpoint. Should be less than or equal to MaxConcurrency.
        public var provisionedConcurrency: Swift.Int?

        public init(
            maxConcurrency: Swift.Int? = nil,
            provisionedConcurrency: Swift.Int? = nil
        )
        {
            self.maxConcurrency = maxConcurrency
            self.provisionedConcurrency = provisionedConcurrency
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies weight and capacity values for a production variant.
    public struct DesiredWeightAndCapacity {
        /// The variant's capacity.
        public var desiredInstanceCount: Swift.Int?
        /// The variant's weight.
        public var desiredWeight: Swift.Float?
        /// Specifies the serverless update concurrency configuration for an endpoint variant.
        public var serverlessUpdateConfig: SageMakerClientTypes.ProductionVariantServerlessUpdateConfig?
        /// The name of the variant to update.
        /// This member is required.
        public var variantName: Swift.String?

        public init(
            desiredInstanceCount: Swift.Int? = nil,
            desiredWeight: Swift.Float? = nil,
            serverlessUpdateConfig: SageMakerClientTypes.ProductionVariantServerlessUpdateConfig? = nil,
            variantName: Swift.String? = nil
        )
        {
            self.desiredInstanceCount = desiredInstanceCount
            self.desiredWeight = desiredWeight
            self.serverlessUpdateConfig = serverlessUpdateConfig
            self.variantName = variantName
        }
    }

}

extension SageMakerClientTypes {
    /// Information of a particular device.
    public struct Device {
        /// Description of the device.
        public var description: Swift.String?
        /// The name of the device.
        /// This member is required.
        public var deviceName: Swift.String?
        /// Amazon Web Services Internet of Things (IoT) object name.
        public var iotThingName: Swift.String?

        public init(
            description: Swift.String? = nil,
            deviceName: Swift.String? = nil,
            iotThingName: Swift.String? = nil
        )
        {
            self.description = description
            self.deviceName = deviceName
            self.iotThingName = iotThingName
        }
    }

}

extension SageMakerClientTypes {

    public enum DeviceDeploymentStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deployed
        case failed
        case inprogress
        case readytodeploy
        case stopped
        case stopping
        case sdkUnknown(Swift.String)

        public static var allCases: [DeviceDeploymentStatus] {
            return [
                .deployed,
                .failed,
                .inprogress,
                .readytodeploy,
                .stopped,
                .stopping
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deployed: return "DEPLOYED"
            case .failed: return "FAILED"
            case .inprogress: return "INPROGRESS"
            case .readytodeploy: return "READYTODEPLOY"
            case .stopped: return "STOPPED"
            case .stopping: return "STOPPING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Contains information summarizing device details and deployment status.
    public struct DeviceDeploymentSummary {
        /// The name of the deployed stage.
        public var deployedStageName: Swift.String?
        /// The time when the deployment on the device started.
        public var deploymentStartTime: Foundation.Date?
        /// The description of the device.
        public var description: Swift.String?
        /// The ARN of the device.
        /// This member is required.
        public var deviceArn: Swift.String?
        /// The deployment status of the device.
        public var deviceDeploymentStatus: SageMakerClientTypes.DeviceDeploymentStatus?
        /// The detailed error message for the deployoment status result.
        public var deviceDeploymentStatusMessage: Swift.String?
        /// The name of the fleet to which the device belongs to.
        public var deviceFleetName: Swift.String?
        /// The name of the device.
        /// This member is required.
        public var deviceName: Swift.String?
        /// The ARN of the edge deployment plan.
        /// This member is required.
        public var edgeDeploymentPlanArn: Swift.String?
        /// The name of the edge deployment plan.
        /// This member is required.
        public var edgeDeploymentPlanName: Swift.String?
        /// The name of the stage in the edge deployment plan.
        /// This member is required.
        public var stageName: Swift.String?

        public init(
            deployedStageName: Swift.String? = nil,
            deploymentStartTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            deviceArn: Swift.String? = nil,
            deviceDeploymentStatus: SageMakerClientTypes.DeviceDeploymentStatus? = nil,
            deviceDeploymentStatusMessage: Swift.String? = nil,
            deviceFleetName: Swift.String? = nil,
            deviceName: Swift.String? = nil,
            edgeDeploymentPlanArn: Swift.String? = nil,
            edgeDeploymentPlanName: Swift.String? = nil,
            stageName: Swift.String? = nil
        )
        {
            self.deployedStageName = deployedStageName
            self.deploymentStartTime = deploymentStartTime
            self.description = description
            self.deviceArn = deviceArn
            self.deviceDeploymentStatus = deviceDeploymentStatus
            self.deviceDeploymentStatusMessage = deviceDeploymentStatusMessage
            self.deviceFleetName = deviceFleetName
            self.deviceName = deviceName
            self.edgeDeploymentPlanArn = edgeDeploymentPlanArn
            self.edgeDeploymentPlanName = edgeDeploymentPlanName
            self.stageName = stageName
        }
    }

}

extension SageMakerClientTypes {
    /// Summary of the device fleet.
    public struct DeviceFleetSummary {
        /// Timestamp of when the device fleet was created.
        public var creationTime: Foundation.Date?
        /// Amazon Resource Name (ARN) of the device fleet.
        /// This member is required.
        public var deviceFleetArn: Swift.String?
        /// Name of the device fleet.
        /// This member is required.
        public var deviceFleetName: Swift.String?
        /// Timestamp of when the device fleet was last updated.
        public var lastModifiedTime: Foundation.Date?

        public init(
            creationTime: Foundation.Date? = nil,
            deviceFleetArn: Swift.String? = nil,
            deviceFleetName: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil
        )
        {
            self.creationTime = creationTime
            self.deviceFleetArn = deviceFleetArn
            self.deviceFleetName = deviceFleetName
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension SageMakerClientTypes {
    /// Status of devices.
    public struct DeviceStats {
        /// The number of devices connected with a heartbeat.
        /// This member is required.
        public var connectedDeviceCount: Swift.Int?
        /// The number of registered devices.
        /// This member is required.
        public var registeredDeviceCount: Swift.Int?

        public init(
            connectedDeviceCount: Swift.Int? = nil,
            registeredDeviceCount: Swift.Int? = nil
        )
        {
            self.connectedDeviceCount = connectedDeviceCount
            self.registeredDeviceCount = registeredDeviceCount
        }
    }

}

extension SageMakerClientTypes {
    /// Summary of model on edge device.
    public struct EdgeModelSummary {
        /// The name of the model.
        /// This member is required.
        public var modelName: Swift.String?
        /// The version model.
        /// This member is required.
        public var modelVersion: Swift.String?

        public init(
            modelName: Swift.String? = nil,
            modelVersion: Swift.String? = nil
        )
        {
            self.modelName = modelName
            self.modelVersion = modelVersion
        }
    }

}

extension SageMakerClientTypes {
    /// Summary of the device.
    public struct DeviceSummary {
        /// Edge Manager agent version.
        public var agentVersion: Swift.String?
        /// A description of the device.
        public var description: Swift.String?
        /// Amazon Resource Name (ARN) of the device.
        /// This member is required.
        public var deviceArn: Swift.String?
        /// The name of the fleet the device belongs to.
        public var deviceFleetName: Swift.String?
        /// The unique identifier of the device.
        /// This member is required.
        public var deviceName: Swift.String?
        /// The Amazon Web Services Internet of Things (IoT) object thing name associated with the device..
        public var iotThingName: Swift.String?
        /// The last heartbeat received from the device.
        public var latestHeartbeat: Foundation.Date?
        /// Models on the device.
        public var models: [SageMakerClientTypes.EdgeModelSummary]?
        /// The timestamp of the last registration or de-reregistration.
        public var registrationTime: Foundation.Date?

        public init(
            agentVersion: Swift.String? = nil,
            description: Swift.String? = nil,
            deviceArn: Swift.String? = nil,
            deviceFleetName: Swift.String? = nil,
            deviceName: Swift.String? = nil,
            iotThingName: Swift.String? = nil,
            latestHeartbeat: Foundation.Date? = nil,
            models: [SageMakerClientTypes.EdgeModelSummary]? = nil,
            registrationTime: Foundation.Date? = nil
        )
        {
            self.agentVersion = agentVersion
            self.description = description
            self.deviceArn = deviceArn
            self.deviceFleetName = deviceFleetName
            self.deviceName = deviceName
            self.iotThingName = iotThingName
            self.latestHeartbeat = latestHeartbeat
            self.models = models
            self.registrationTime = registrationTime
        }
    }

}

extension SageMakerClientTypes {

    public enum Direction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascendants
        case both
        case descendants
        case sdkUnknown(Swift.String)

        public static var allCases: [Direction] {
            return [
                .ascendants,
                .both,
                .descendants
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascendants: return "Ascendants"
            case .both: return "Both"
            case .descendants: return "Descendants"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct DisableSagemakerServicecatalogPortfolioInput {

    public init() { }
}

public struct DisableSagemakerServicecatalogPortfolioOutput {

    public init() { }
}

public struct DisassociateTrialComponentInput {
    /// The name of the component to disassociate from the trial.
    /// This member is required.
    public var trialComponentName: Swift.String?
    /// The name of the trial to disassociate from.
    /// This member is required.
    public var trialName: Swift.String?

    public init(
        trialComponentName: Swift.String? = nil,
        trialName: Swift.String? = nil
    )
    {
        self.trialComponentName = trialComponentName
        self.trialName = trialName
    }
}

public struct DisassociateTrialComponentOutput {
    /// The Amazon Resource Name (ARN) of the trial.
    public var trialArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the trial component.
    public var trialComponentArn: Swift.String?

    public init(
        trialArn: Swift.String? = nil,
        trialComponentArn: Swift.String? = nil
    )
    {
        self.trialArn = trialArn
        self.trialComponentArn = trialComponentArn
    }
}

extension SageMakerClientTypes {
    /// The domain's details.
    public struct DomainDetails {
        /// The creation time.
        public var creationTime: Foundation.Date?
        /// The domain's Amazon Resource Name (ARN).
        public var domainArn: Swift.String?
        /// The domain ID.
        public var domainId: Swift.String?
        /// The domain name.
        public var domainName: Swift.String?
        /// The last modified time.
        public var lastModifiedTime: Foundation.Date?
        /// The status.
        public var status: SageMakerClientTypes.DomainStatus?
        /// The domain's URL.
        public var url: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            domainArn: Swift.String? = nil,
            domainId: Swift.String? = nil,
            domainName: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            status: SageMakerClientTypes.DomainStatus? = nil,
            url: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.domainArn = domainArn
            self.domainId = domainId
            self.domainName = domainName
            self.lastModifiedTime = lastModifiedTime
            self.status = status
            self.url = url
        }
    }

}

extension SageMakerClientTypes {
    /// A collection of settings that update the current configuration for the RStudioServerPro Domain-level app.
    public struct RStudioServerProDomainSettingsForUpdate {
        /// Specifies the ARN's of a SageMaker image and SageMaker image version, and the instance type that the version runs on.
        public var defaultResourceSpec: SageMakerClientTypes.ResourceSpec?
        /// The execution role for the RStudioServerPro Domain-level app.
        /// This member is required.
        public var domainExecutionRoleArn: Swift.String?
        /// A URL pointing to an RStudio Connect server.
        public var rStudioConnectUrl: Swift.String?
        /// A URL pointing to an RStudio Package Manager server.
        public var rStudioPackageManagerUrl: Swift.String?

        public init(
            defaultResourceSpec: SageMakerClientTypes.ResourceSpec? = nil,
            domainExecutionRoleArn: Swift.String? = nil,
            rStudioConnectUrl: Swift.String? = nil,
            rStudioPackageManagerUrl: Swift.String? = nil
        )
        {
            self.defaultResourceSpec = defaultResourceSpec
            self.domainExecutionRoleArn = domainExecutionRoleArn
            self.rStudioConnectUrl = rStudioConnectUrl
            self.rStudioPackageManagerUrl = rStudioPackageManagerUrl
        }
    }

}

extension SageMakerClientTypes {
    /// A collection of Domain configuration settings to update.
    public struct DomainSettingsForUpdate {
        /// A collection of settings that configure the Amazon Q experience within the domain.
        public var amazonQSettings: SageMakerClientTypes.AmazonQSettings?
        /// A collection of settings that configure the domain's Docker interaction.
        public var dockerSettings: SageMakerClientTypes.DockerSettings?
        /// The configuration for attaching a SageMaker user profile name to the execution role as a [sts:SourceIdentity key](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_control-access_monitor.html). This configuration can only be modified if there are no apps in the InService or Pending state.
        public var executionRoleIdentityConfig: SageMakerClientTypes.ExecutionRoleIdentityConfig?
        /// A collection of RStudioServerPro Domain-level app settings to update. A single RStudioServerPro application is created for a domain.
        public var rStudioServerProDomainSettingsForUpdate: SageMakerClientTypes.RStudioServerProDomainSettingsForUpdate?
        /// The security groups for the Amazon Virtual Private Cloud that the Domain uses for communication between Domain-level apps and user apps.
        public var securityGroupIds: [Swift.String]?

        public init(
            amazonQSettings: SageMakerClientTypes.AmazonQSettings? = nil,
            dockerSettings: SageMakerClientTypes.DockerSettings? = nil,
            executionRoleIdentityConfig: SageMakerClientTypes.ExecutionRoleIdentityConfig? = nil,
            rStudioServerProDomainSettingsForUpdate: SageMakerClientTypes.RStudioServerProDomainSettingsForUpdate? = nil,
            securityGroupIds: [Swift.String]? = nil
        )
        {
            self.amazonQSettings = amazonQSettings
            self.dockerSettings = dockerSettings
            self.executionRoleIdentityConfig = executionRoleIdentityConfig
            self.rStudioServerProDomainSettingsForUpdate = rStudioServerProDomainSettingsForUpdate
            self.securityGroupIds = securityGroupIds
        }
    }

}

extension SageMakerClientTypes {
    /// A specification for a predefined metric.
    public struct PredefinedMetricSpecification {
        /// The metric type. You can only apply SageMaker metric types to SageMaker endpoints.
        public var predefinedMetricType: Swift.String?

        public init(
            predefinedMetricType: Swift.String? = nil
        )
        {
            self.predefinedMetricType = predefinedMetricType
        }
    }

}

extension SageMakerClientTypes {
    /// An object containing information about a metric.
    public enum MetricSpecification {
        /// Information about a predefined metric.
        case predefined(SageMakerClientTypes.PredefinedMetricSpecification)
        /// Information about a customized metric.
        case customized(SageMakerClientTypes.CustomizedMetricSpecification)
        case sdkUnknown(Swift.String)
    }

}

extension SageMakerClientTypes {
    /// A target tracking scaling policy. Includes support for predefined or customized metrics. When using the [PutScalingPolicy](https://docs.aws.amazon.com/autoscaling/application/APIReference/API_PutScalingPolicy.html) API, this parameter is required when you are creating a policy with the policy type TargetTrackingScaling.
    public struct TargetTrackingScalingPolicyConfiguration {
        /// An object containing information about a metric.
        public var metricSpecification: SageMakerClientTypes.MetricSpecification?
        /// The recommended target value to specify for the metric when creating a scaling policy.
        public var targetValue: Swift.Double?

        public init(
            metricSpecification: SageMakerClientTypes.MetricSpecification? = nil,
            targetValue: Swift.Double? = nil
        )
        {
            self.metricSpecification = metricSpecification
            self.targetValue = targetValue
        }
    }

}

extension SageMakerClientTypes {
    /// An object containing a recommended scaling policy.
    public enum ScalingPolicy {
        /// A target tracking scaling policy. Includes support for predefined or customized metrics.
        case targettracking(SageMakerClientTypes.TargetTrackingScalingPolicyConfiguration)
        case sdkUnknown(Swift.String)
    }

}

extension SageMakerClientTypes {
    /// An object with the recommended values for you to specify when creating an autoscaling policy.
    public struct DynamicScalingConfiguration {
        /// The recommended maximum capacity to specify for your autoscaling policy.
        public var maxCapacity: Swift.Int?
        /// The recommended minimum capacity to specify for your autoscaling policy.
        public var minCapacity: Swift.Int?
        /// The recommended scale in cooldown time for your autoscaling policy.
        public var scaleInCooldown: Swift.Int?
        /// The recommended scale out cooldown time for your autoscaling policy.
        public var scaleOutCooldown: Swift.Int?
        /// An object of the scaling policies for each metric.
        public var scalingPolicies: [SageMakerClientTypes.ScalingPolicy]?

        public init(
            maxCapacity: Swift.Int? = nil,
            minCapacity: Swift.Int? = nil,
            scaleInCooldown: Swift.Int? = nil,
            scaleOutCooldown: Swift.Int? = nil,
            scalingPolicies: [SageMakerClientTypes.ScalingPolicy]? = nil
        )
        {
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
            self.scaleInCooldown = scaleInCooldown
            self.scaleOutCooldown = scaleOutCooldown
            self.scalingPolicies = scalingPolicies
        }
    }

}

extension SageMakerClientTypes {
    /// A directed edge connecting two lineage entities.
    public struct Edge {
        /// The type of the Association(Edge) between the source and destination. For example ContributedTo, Produced, or DerivedFrom.
        public var associationType: SageMakerClientTypes.AssociationEdgeType?
        /// The Amazon Resource Name (ARN) of the destination lineage entity of the directed edge.
        public var destinationArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the source lineage entity of the directed edge.
        public var sourceArn: Swift.String?

        public init(
            associationType: SageMakerClientTypes.AssociationEdgeType? = nil,
            destinationArn: Swift.String? = nil,
            sourceArn: Swift.String? = nil
        )
        {
            self.associationType = associationType
            self.destinationArn = destinationArn
            self.sourceArn = sourceArn
        }
    }

}

extension SageMakerClientTypes {
    /// Contains information summarizing an edge deployment plan.
    public struct EdgeDeploymentPlanSummary {
        /// The time when the edge deployment plan was created.
        public var creationTime: Foundation.Date?
        /// The name of the device fleet used for the deployment.
        /// This member is required.
        public var deviceFleetName: Swift.String?
        /// The number of edge devices that failed the deployment.
        /// This member is required.
        public var edgeDeploymentFailed: Swift.Int?
        /// The number of edge devices yet to pick up the deployment, or in progress.
        /// This member is required.
        public var edgeDeploymentPending: Swift.Int?
        /// The ARN of the edge deployment plan.
        /// This member is required.
        public var edgeDeploymentPlanArn: Swift.String?
        /// The name of the edge deployment plan.
        /// This member is required.
        public var edgeDeploymentPlanName: Swift.String?
        /// The number of edge devices with the successful deployment.
        /// This member is required.
        public var edgeDeploymentSuccess: Swift.Int?
        /// The time when the edge deployment plan was last updated.
        public var lastModifiedTime: Foundation.Date?

        public init(
            creationTime: Foundation.Date? = nil,
            deviceFleetName: Swift.String? = nil,
            edgeDeploymentFailed: Swift.Int? = nil,
            edgeDeploymentPending: Swift.Int? = nil,
            edgeDeploymentPlanArn: Swift.String? = nil,
            edgeDeploymentPlanName: Swift.String? = nil,
            edgeDeploymentSuccess: Swift.Int? = nil,
            lastModifiedTime: Foundation.Date? = nil
        )
        {
            self.creationTime = creationTime
            self.deviceFleetName = deviceFleetName
            self.edgeDeploymentFailed = edgeDeploymentFailed
            self.edgeDeploymentPending = edgeDeploymentPending
            self.edgeDeploymentPlanArn = edgeDeploymentPlanArn
            self.edgeDeploymentPlanName = edgeDeploymentPlanName
            self.edgeDeploymentSuccess = edgeDeploymentSuccess
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension SageMakerClientTypes {
    /// Status of edge devices with this model.
    public struct EdgeModelStat {
        /// The number of devices that have this model version, a heart beat, and are currently running.
        /// This member is required.
        public var activeDeviceCount: Swift.Int?
        /// The number of devices that have this model version and have a heart beat.
        /// This member is required.
        public var connectedDeviceCount: Swift.Int?
        /// The name of the model.
        /// This member is required.
        public var modelName: Swift.String?
        /// The model version.
        /// This member is required.
        public var modelVersion: Swift.String?
        /// The number of devices that have this model version and do not have a heart beat.
        /// This member is required.
        public var offlineDeviceCount: Swift.Int?
        /// The number of devices with this model version and are producing sample data.
        /// This member is required.
        public var samplingDeviceCount: Swift.Int?

        public init(
            activeDeviceCount: Swift.Int? = nil,
            connectedDeviceCount: Swift.Int? = nil,
            modelName: Swift.String? = nil,
            modelVersion: Swift.String? = nil,
            offlineDeviceCount: Swift.Int? = nil,
            samplingDeviceCount: Swift.Int? = nil
        )
        {
            self.activeDeviceCount = activeDeviceCount
            self.connectedDeviceCount = connectedDeviceCount
            self.modelName = modelName
            self.modelVersion = modelVersion
            self.offlineDeviceCount = offlineDeviceCount
            self.samplingDeviceCount = samplingDeviceCount
        }
    }

}

extension SageMakerClientTypes {
    /// Summary of edge packaging job.
    public struct EdgePackagingJobSummary {
        /// The name of the SageMaker Neo compilation job.
        public var compilationJobName: Swift.String?
        /// The timestamp of when the job was created.
        public var creationTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the edge packaging job.
        /// This member is required.
        public var edgePackagingJobArn: Swift.String?
        /// The name of the edge packaging job.
        /// This member is required.
        public var edgePackagingJobName: Swift.String?
        /// The status of the edge packaging job.
        /// This member is required.
        public var edgePackagingJobStatus: SageMakerClientTypes.EdgePackagingJobStatus?
        /// The timestamp of when the edge packaging job was last updated.
        public var lastModifiedTime: Foundation.Date?
        /// The name of the model.
        public var modelName: Swift.String?
        /// The version of the model.
        public var modelVersion: Swift.String?

        public init(
            compilationJobName: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            edgePackagingJobArn: Swift.String? = nil,
            edgePackagingJobName: Swift.String? = nil,
            edgePackagingJobStatus: SageMakerClientTypes.EdgePackagingJobStatus? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            modelName: Swift.String? = nil,
            modelVersion: Swift.String? = nil
        )
        {
            self.compilationJobName = compilationJobName
            self.creationTime = creationTime
            self.edgePackagingJobArn = edgePackagingJobArn
            self.edgePackagingJobName = edgePackagingJobName
            self.edgePackagingJobStatus = edgePackagingJobStatus
            self.lastModifiedTime = lastModifiedTime
            self.modelName = modelName
            self.modelVersion = modelVersion
        }
    }

}

extension SageMakerClientTypes {
    /// The configurations and outcomes of an Amazon EMR step execution.
    public struct EMRStepMetadata {
        /// The identifier of the EMR cluster.
        public var clusterId: Swift.String?
        /// The path to the log file where the cluster step's failure root cause is recorded.
        public var logFilePath: Swift.String?
        /// The identifier of the EMR cluster step.
        public var stepId: Swift.String?
        /// The name of the EMR cluster step.
        public var stepName: Swift.String?

        public init(
            clusterId: Swift.String? = nil,
            logFilePath: Swift.String? = nil,
            stepId: Swift.String? = nil,
            stepName: Swift.String? = nil
        )
        {
            self.clusterId = clusterId
            self.logFilePath = logFilePath
            self.stepId = stepId
            self.stepName = stepName
        }
    }

}

public struct EnableSagemakerServicecatalogPortfolioInput {

    public init() { }
}

public struct EnableSagemakerServicecatalogPortfolioOutput {

    public init() { }
}

extension SageMakerClientTypes {
    /// A schedule for a model monitoring job. For information about model monitor, see [Amazon SageMaker Model Monitor](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html).
    public struct MonitoringSchedule {
        /// The time that the monitoring schedule was created.
        public var creationTime: Foundation.Date?
        /// The endpoint that hosts the model being monitored.
        public var endpointName: Swift.String?
        /// If the monitoring schedule failed, the reason it failed.
        public var failureReason: Swift.String?
        /// The last time the monitoring schedule was changed.
        public var lastModifiedTime: Foundation.Date?
        /// Summary of information about the last monitoring job to run.
        public var lastMonitoringExecutionSummary: SageMakerClientTypes.MonitoringExecutionSummary?
        /// The Amazon Resource Name (ARN) of the monitoring schedule.
        public var monitoringScheduleArn: Swift.String?
        /// Configures the monitoring schedule and defines the monitoring job.
        public var monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig?
        /// The name of the monitoring schedule.
        public var monitoringScheduleName: Swift.String?
        /// The status of the monitoring schedule. This can be one of the following values.
        ///
        /// * PENDING - The schedule is pending being created.
        ///
        /// * FAILED - The schedule failed.
        ///
        /// * SCHEDULED - The schedule was successfully created.
        ///
        /// * STOPPED - The schedule was stopped.
        public var monitoringScheduleStatus: SageMakerClientTypes.ScheduleStatus?
        /// The type of the monitoring job definition to schedule.
        public var monitoringType: SageMakerClientTypes.MonitoringType?
        /// A list of the tags associated with the monitoring schedlue. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference Guide.
        public var tags: [SageMakerClientTypes.Tag]?

        public init(
            creationTime: Foundation.Date? = nil,
            endpointName: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            lastMonitoringExecutionSummary: SageMakerClientTypes.MonitoringExecutionSummary? = nil,
            monitoringScheduleArn: Swift.String? = nil,
            monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig? = nil,
            monitoringScheduleName: Swift.String? = nil,
            monitoringScheduleStatus: SageMakerClientTypes.ScheduleStatus? = nil,
            monitoringType: SageMakerClientTypes.MonitoringType? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil
        )
        {
            self.creationTime = creationTime
            self.endpointName = endpointName
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.lastMonitoringExecutionSummary = lastMonitoringExecutionSummary
            self.monitoringScheduleArn = monitoringScheduleArn
            self.monitoringScheduleConfig = monitoringScheduleConfig
            self.monitoringScheduleName = monitoringScheduleName
            self.monitoringScheduleStatus = monitoringScheduleStatus
            self.monitoringType = monitoringType
            self.tags = tags
        }
    }

}

extension SageMakerClientTypes {
    /// A hosted endpoint for real-time inference.
    public struct Endpoint {
        /// The time that the endpoint was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The currently active data capture configuration used by your Endpoint.
        public var dataCaptureConfig: SageMakerClientTypes.DataCaptureConfigSummary?
        /// The Amazon Resource Name (ARN) of the endpoint.
        /// This member is required.
        public var endpointArn: Swift.String?
        /// The endpoint configuration associated with the endpoint.
        /// This member is required.
        public var endpointConfigName: Swift.String?
        /// The name of the endpoint.
        /// This member is required.
        public var endpointName: Swift.String?
        /// The status of the endpoint.
        /// This member is required.
        public var endpointStatus: SageMakerClientTypes.EndpointStatus?
        /// If the endpoint failed, the reason it failed.
        public var failureReason: Swift.String?
        /// The last time the endpoint was modified.
        /// This member is required.
        public var lastModifiedTime: Foundation.Date?
        /// A list of monitoring schedules for the endpoint. For information about model monitoring, see [Amazon SageMaker Model Monitor](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html).
        public var monitoringSchedules: [SageMakerClientTypes.MonitoringSchedule]?
        /// A list of the production variants hosted on the endpoint. Each production variant is a model.
        public var productionVariants: [SageMakerClientTypes.ProductionVariantSummary]?
        /// A list of the shadow variants hosted on the endpoint. Each shadow variant is a model in shadow mode with production traffic replicated from the production variant.
        public var shadowProductionVariants: [SageMakerClientTypes.ProductionVariantSummary]?
        /// A list of the tags associated with the endpoint. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference Guide.
        public var tags: [SageMakerClientTypes.Tag]?

        public init(
            creationTime: Foundation.Date? = nil,
            dataCaptureConfig: SageMakerClientTypes.DataCaptureConfigSummary? = nil,
            endpointArn: Swift.String? = nil,
            endpointConfigName: Swift.String? = nil,
            endpointName: Swift.String? = nil,
            endpointStatus: SageMakerClientTypes.EndpointStatus? = nil,
            failureReason: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            monitoringSchedules: [SageMakerClientTypes.MonitoringSchedule]? = nil,
            productionVariants: [SageMakerClientTypes.ProductionVariantSummary]? = nil,
            shadowProductionVariants: [SageMakerClientTypes.ProductionVariantSummary]? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil
        )
        {
            self.creationTime = creationTime
            self.dataCaptureConfig = dataCaptureConfig
            self.endpointArn = endpointArn
            self.endpointConfigName = endpointConfigName
            self.endpointName = endpointName
            self.endpointStatus = endpointStatus
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.monitoringSchedules = monitoringSchedules
            self.productionVariants = productionVariants
            self.shadowProductionVariants = shadowProductionVariants
            self.tags = tags
        }
    }

}

extension SageMakerClientTypes {

    public enum EndpointConfigSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationtime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointConfigSortKey] {
            return [
                .creationtime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Metadata for an endpoint configuration step.
    public struct EndpointConfigStepMetadata {
        /// The Amazon Resource Name (ARN) of the endpoint configuration used in the step.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension SageMakerClientTypes {
    /// Provides summary information for an endpoint configuration.
    public struct EndpointConfigSummary {
        /// A timestamp that shows when the endpoint configuration was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the endpoint configuration.
        /// This member is required.
        public var endpointConfigArn: Swift.String?
        /// The name of the endpoint configuration.
        /// This member is required.
        public var endpointConfigName: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            endpointConfigArn: Swift.String? = nil,
            endpointConfigName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.endpointConfigArn = endpointConfigArn
            self.endpointConfigName = endpointConfigName
        }
    }

}

extension SageMakerClientTypes {

    public enum EndpointSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationtime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointSortKey] {
            return [
                .creationtime,
                .name,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Metadata for an endpoint step.
    public struct EndpointStepMetadata {
        /// The Amazon Resource Name (ARN) of the endpoint in the step.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension SageMakerClientTypes {
    /// Provides summary information for an endpoint.
    public struct EndpointSummary {
        /// A timestamp that shows when the endpoint was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the endpoint.
        /// This member is required.
        public var endpointArn: Swift.String?
        /// The name of the endpoint.
        /// This member is required.
        public var endpointName: Swift.String?
        /// The status of the endpoint.
        ///
        /// * OutOfService: Endpoint is not available to take incoming requests.
        ///
        /// * Creating: [CreateEndpoint](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpoint.html) is executing.
        ///
        /// * Updating: [UpdateEndpoint](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html) or [UpdateEndpointWeightsAndCapacities](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpointWeightsAndCapacities.html) is executing.
        ///
        /// * SystemUpdating: Endpoint is undergoing maintenance and cannot be updated or deleted or re-scaled until it has completed. This maintenance operation does not change any customer-specified values such as VPC config, KMS encryption, model, instance type, or instance count.
        ///
        /// * RollingBack: Endpoint fails to scale up or down or change its variant weight and is in the process of rolling back to its previous configuration. Once the rollback completes, endpoint returns to an InService status. This transitional status only applies to an endpoint that has autoscaling enabled and is undergoing variant weight or capacity changes as part of an [UpdateEndpointWeightsAndCapacities](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpointWeightsAndCapacities.html) call or when the [UpdateEndpointWeightsAndCapacities](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpointWeightsAndCapacities.html) operation is called explicitly.
        ///
        /// * InService: Endpoint is available to process incoming requests.
        ///
        /// * Deleting: [DeleteEndpoint](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteEndpoint.html) is executing.
        ///
        /// * Failed: Endpoint could not be created, updated, or re-scaled. Use DescribeEndpointOutput$FailureReason for information about the failure. [DeleteEndpoint](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DeleteEndpoint.html) is the only operation that can be performed on a failed endpoint.
        ///
        ///
        /// To get a list of endpoints with a specified status, use the StatusEquals filter with a call to [ListEndpoints](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListEndpoints.html).
        /// This member is required.
        public var endpointStatus: SageMakerClientTypes.EndpointStatus?
        /// A timestamp that shows when the endpoint was last modified.
        /// This member is required.
        public var lastModifiedTime: Foundation.Date?

        public init(
            creationTime: Foundation.Date? = nil,
            endpointArn: Swift.String? = nil,
            endpointName: Swift.String? = nil,
            endpointStatus: SageMakerClientTypes.EndpointStatus? = nil,
            lastModifiedTime: Foundation.Date? = nil
        )
        {
            self.creationTime = creationTime
            self.endpointArn = endpointArn
            self.endpointName = endpointName
            self.endpointStatus = endpointStatus
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension SageMakerClientTypes {
    /// The properties of an experiment as returned by the [Search](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html) API.
    public struct Experiment {
        /// Who created the experiment.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// When the experiment was created.
        public var creationTime: Foundation.Date?
        /// The description of the experiment.
        public var description: Swift.String?
        /// The name of the experiment as displayed. If DisplayName isn't specified, ExperimentName is displayed.
        public var displayName: Swift.String?
        /// The Amazon Resource Name (ARN) of the experiment.
        public var experimentArn: Swift.String?
        /// The name of the experiment.
        public var experimentName: Swift.String?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
        public var lastModifiedBy: SageMakerClientTypes.UserContext?
        /// When the experiment was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The source of the experiment.
        public var source: SageMakerClientTypes.ExperimentSource?
        /// The list of tags that are associated with the experiment. You can use [Search](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html) API to search on the tags.
        public var tags: [SageMakerClientTypes.Tag]?

        public init(
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            displayName: Swift.String? = nil,
            experimentArn: Swift.String? = nil,
            experimentName: Swift.String? = nil,
            lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            source: SageMakerClientTypes.ExperimentSource? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil
        )
        {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.description = description
            self.displayName = displayName
            self.experimentArn = experimentArn
            self.experimentName = experimentName
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.source = source
            self.tags = tags
        }
    }

}

extension SageMakerClientTypes {
    /// A summary of the properties of an experiment. To get the complete set of properties, call the [DescribeExperiment](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeExperiment.html) API and provide the ExperimentName.
    public struct ExperimentSummary {
        /// When the experiment was created.
        public var creationTime: Foundation.Date?
        /// The name of the experiment as displayed. If DisplayName isn't specified, ExperimentName is displayed.
        public var displayName: Swift.String?
        /// The Amazon Resource Name (ARN) of the experiment.
        public var experimentArn: Swift.String?
        /// The name of the experiment.
        public var experimentName: Swift.String?
        /// The source of the experiment.
        public var experimentSource: SageMakerClientTypes.ExperimentSource?
        /// When the experiment was last modified.
        public var lastModifiedTime: Foundation.Date?

        public init(
            creationTime: Foundation.Date? = nil,
            displayName: Swift.String? = nil,
            experimentArn: Swift.String? = nil,
            experimentName: Swift.String? = nil,
            experimentSource: SageMakerClientTypes.ExperimentSource? = nil,
            lastModifiedTime: Foundation.Date? = nil
        )
        {
            self.creationTime = creationTime
            self.displayName = displayName
            self.experimentArn = experimentArn
            self.experimentName = experimentName
            self.experimentSource = experimentSource
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension SageMakerClientTypes {
    /// The container for the metadata for Fail step.
    public struct FailStepMetadata {
        /// A message that you define and then is processed and rendered by the Fail step when the error occurs.
        public var errorMessage: Swift.String?

        public init(
            errorMessage: Swift.String? = nil
        )
        {
            self.errorMessage = errorMessage
        }
    }

}

extension SageMakerClientTypes {
    /// Amazon SageMaker Feature Store stores features in a collection called Feature Group. A Feature Group can be visualized as a table which has rows, with a unique identifier for each row where each column in the table is a feature. In principle, a Feature Group is composed of features and values per features.
    public struct FeatureGroup {
        /// The time a FeatureGroup was created.
        public var creationTime: Foundation.Date?
        /// A free form description of a FeatureGroup.
        public var description: Swift.String?
        /// The name of the feature that stores the EventTime of a Record in a FeatureGroup. A EventTime is point in time when a new event occurs that corresponds to the creation or update of a Record in FeatureGroup. All Records in the FeatureGroup must have a corresponding EventTime.
        public var eventTimeFeatureName: Swift.String?
        /// The reason that the FeatureGroup failed to be replicated in the OfflineStore. This is failure may be due to a failure to create a FeatureGroup in or delete a FeatureGroup from the OfflineStore.
        public var failureReason: Swift.String?
        /// A list of Features. Each Feature must include a FeatureName and a FeatureType. Valid FeatureTypes are Integral, Fractional and String. FeatureNames cannot be any of the following: is_deleted, write_time, api_invocation_time. You can create up to 2,500 FeatureDefinitions per FeatureGroup.
        public var featureDefinitions: [SageMakerClientTypes.FeatureDefinition]?
        /// The Amazon Resource Name (ARN) of a FeatureGroup.
        public var featureGroupArn: Swift.String?
        /// The name of the FeatureGroup.
        public var featureGroupName: Swift.String?
        /// A FeatureGroup status.
        public var featureGroupStatus: SageMakerClientTypes.FeatureGroupStatus?
        /// A timestamp indicating the last time you updated the feature group.
        public var lastModifiedTime: Foundation.Date?
        /// A value that indicates whether the feature group was updated successfully.
        public var lastUpdateStatus: SageMakerClientTypes.LastUpdateStatus?
        /// The configuration of an OfflineStore. Provide an OfflineStoreConfig in a request to CreateFeatureGroup to create an OfflineStore. To encrypt an OfflineStore using at rest data encryption, specify Amazon Web Services Key Management Service (KMS) key ID, or KMSKeyId, in S3StorageConfig.
        public var offlineStoreConfig: SageMakerClientTypes.OfflineStoreConfig?
        /// The status of OfflineStore.
        public var offlineStoreStatus: SageMakerClientTypes.OfflineStoreStatus?
        /// Use this to specify the Amazon Web Services Key Management Service (KMS) Key ID, or KMSKeyId, for at rest data encryption. You can turn OnlineStore on or off by specifying the EnableOnlineStore flag at General Assembly. The default value is False.
        public var onlineStoreConfig: SageMakerClientTypes.OnlineStoreConfig?
        /// The name of the Feature whose value uniquely identifies a Record defined in the FeatureGroupFeatureDefinitions.
        public var recordIdentifierFeatureName: Swift.String?
        /// The Amazon Resource Name (ARN) of the IAM execution role used to create the feature group.
        public var roleArn: Swift.String?
        /// Tags used to define a FeatureGroup.
        public var tags: [SageMakerClientTypes.Tag]?

        public init(
            creationTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            eventTimeFeatureName: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            featureDefinitions: [SageMakerClientTypes.FeatureDefinition]? = nil,
            featureGroupArn: Swift.String? = nil,
            featureGroupName: Swift.String? = nil,
            featureGroupStatus: SageMakerClientTypes.FeatureGroupStatus? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            lastUpdateStatus: SageMakerClientTypes.LastUpdateStatus? = nil,
            offlineStoreConfig: SageMakerClientTypes.OfflineStoreConfig? = nil,
            offlineStoreStatus: SageMakerClientTypes.OfflineStoreStatus? = nil,
            onlineStoreConfig: SageMakerClientTypes.OnlineStoreConfig? = nil,
            recordIdentifierFeatureName: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil
        )
        {
            self.creationTime = creationTime
            self.description = description
            self.eventTimeFeatureName = eventTimeFeatureName
            self.failureReason = failureReason
            self.featureDefinitions = featureDefinitions
            self.featureGroupArn = featureGroupArn
            self.featureGroupName = featureGroupName
            self.featureGroupStatus = featureGroupStatus
            self.lastModifiedTime = lastModifiedTime
            self.lastUpdateStatus = lastUpdateStatus
            self.offlineStoreConfig = offlineStoreConfig
            self.offlineStoreStatus = offlineStoreStatus
            self.onlineStoreConfig = onlineStoreConfig
            self.recordIdentifierFeatureName = recordIdentifierFeatureName
            self.roleArn = roleArn
            self.tags = tags
        }
    }

}

extension SageMakerClientTypes {

    public enum FeatureGroupSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case featureGroupStatus
        case name
        case offlineStoreStatus
        case sdkUnknown(Swift.String)

        public static var allCases: [FeatureGroupSortBy] {
            return [
                .creationTime,
                .featureGroupStatus,
                .name,
                .offlineStoreStatus
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .featureGroupStatus: return "FeatureGroupStatus"
            case .name: return "Name"
            case .offlineStoreStatus: return "OfflineStoreStatus"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum FeatureGroupSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [FeatureGroupSortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The name, ARN, CreationTime, FeatureGroup values, LastUpdatedTime and EnableOnlineStorage status of a FeatureGroup.
    public struct FeatureGroupSummary {
        /// A timestamp indicating the time of creation time of the FeatureGroup.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// Unique identifier for the FeatureGroup.
        /// This member is required.
        public var featureGroupArn: Swift.String?
        /// The name of FeatureGroup.
        /// This member is required.
        public var featureGroupName: Swift.String?
        /// The status of a FeatureGroup. The status can be any of the following: Creating, Created, CreateFail, Deleting or DetailFail.
        public var featureGroupStatus: SageMakerClientTypes.FeatureGroupStatus?
        /// Notifies you if replicating data into the OfflineStore has failed. Returns either: Active or Blocked.
        public var offlineStoreStatus: SageMakerClientTypes.OfflineStoreStatus?

        public init(
            creationTime: Foundation.Date? = nil,
            featureGroupArn: Swift.String? = nil,
            featureGroupName: Swift.String? = nil,
            featureGroupStatus: SageMakerClientTypes.FeatureGroupStatus? = nil,
            offlineStoreStatus: SageMakerClientTypes.OfflineStoreStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.featureGroupArn = featureGroupArn
            self.featureGroupName = featureGroupName
            self.featureGroupStatus = featureGroupStatus
            self.offlineStoreStatus = offlineStoreStatus
        }
    }

}

extension SageMakerClientTypes {
    /// The metadata for a feature. It can either be metadata that you specify, or metadata that is updated automatically.
    public struct FeatureMetadata {
        /// A timestamp indicating when the feature was created.
        public var creationTime: Foundation.Date?
        /// An optional description that you specify to better describe the feature.
        public var description: Swift.String?
        /// The Amazon Resource Number (ARN) of the feature group.
        public var featureGroupArn: Swift.String?
        /// The name of the feature group containing the feature.
        public var featureGroupName: Swift.String?
        /// The name of feature.
        public var featureName: Swift.String?
        /// The data type of the feature.
        public var featureType: SageMakerClientTypes.FeatureType?
        /// A timestamp indicating when the feature was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// Optional key-value pairs that you specify to better describe the feature.
        public var parameters: [SageMakerClientTypes.FeatureParameter]?

        public init(
            creationTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            featureGroupArn: Swift.String? = nil,
            featureGroupName: Swift.String? = nil,
            featureName: Swift.String? = nil,
            featureType: SageMakerClientTypes.FeatureType? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            parameters: [SageMakerClientTypes.FeatureParameter]? = nil
        )
        {
            self.creationTime = creationTime
            self.description = description
            self.featureGroupArn = featureGroupArn
            self.featureGroupName = featureGroupName
            self.featureName = featureName
            self.featureType = featureType
            self.lastModifiedTime = lastModifiedTime
            self.parameters = parameters
        }
    }

}

extension SageMakerClientTypes {

    public enum Operator: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case contains
        case equals
        case exists
        case greaterThan
        case greaterThanOrEqualTo
        case `in`
        case lessThan
        case lessThanOrEqualTo
        case notEquals
        case notExists
        case sdkUnknown(Swift.String)

        public static var allCases: [Operator] {
            return [
                .contains,
                .equals,
                .exists,
                .greaterThan,
                .greaterThanOrEqualTo,
                .in,
                .lessThan,
                .lessThanOrEqualTo,
                .notEquals,
                .notExists
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .contains: return "Contains"
            case .equals: return "Equals"
            case .exists: return "Exists"
            case .greaterThan: return "GreaterThan"
            case .greaterThanOrEqualTo: return "GreaterThanOrEqualTo"
            case .in: return "In"
            case .lessThan: return "LessThan"
            case .lessThanOrEqualTo: return "LessThanOrEqualTo"
            case .notEquals: return "NotEquals"
            case .notExists: return "NotExists"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A conditional statement for a search expression that includes a resource property, a Boolean operator, and a value. Resources that match the statement are returned in the results from the [Search](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html) API. If you specify a Value, but not an Operator, SageMaker uses the equals operator. In search, there are several property types: Metrics To define a metric filter, enter a value using the form "Metrics.", where  is a metric name. For example, the following filter searches for training jobs with an "accuracy" metric greater than "0.9": {
    ///     "Name": "Metrics.accuracy",
    ///
    ///
    ///     "Operator": "GreaterThan",
    ///
    ///
    ///     "Value": "0.9"
    ///
    /// } HyperParameters To define a hyperparameter filter, enter a value with the form "HyperParameters.". Decimal hyperparameter values are treated as a decimal in a comparison if the specified Value is also a decimal value. If the specified Value is an integer, the decimal hyperparameter values are treated as integers. For example, the following filter is satisfied by training jobs with a "learning_rate" hyperparameter that is less than "0.5":  {
    ///     "Name": "HyperParameters.learning_rate",
    ///
    ///
    ///     "Operator": "LessThan",
    ///
    ///
    ///     "Value": "0.5"
    ///
    /// } Tags To define a tag filter, enter a value with the form Tags..
    public struct Filter {
        /// A resource property name. For example, TrainingJobName. For valid property names, see [SearchRecord](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_SearchRecord.html). You must specify a valid property for the resource.
        /// This member is required.
        public var name: Swift.String?
        /// A Boolean binary operator that is used to evaluate the filter. The operator field contains one of the following values: Equals The value of Name equals Value. NotEquals The value of Name doesn't equal Value. Exists The Name property exists. NotExists The Name property does not exist. GreaterThan The value of Name is greater than Value. Not supported for text properties. GreaterThanOrEqualTo The value of Name is greater than or equal to Value. Not supported for text properties. LessThan The value of Name is less than Value. Not supported for text properties. LessThanOrEqualTo The value of Name is less than or equal to Value. Not supported for text properties. In The value of Name is one of the comma delimited strings in Value. Only supported for text properties. Contains The value of Name contains the string Value. Only supported for text properties. A SearchExpression can include the Contains operator multiple times when the value of Name is one of the following:
        ///
        /// * Experiment.DisplayName
        ///
        /// * Experiment.ExperimentName
        ///
        /// * Experiment.Tags
        ///
        /// * Trial.DisplayName
        ///
        /// * Trial.TrialName
        ///
        /// * Trial.Tags
        ///
        /// * TrialComponent.DisplayName
        ///
        /// * TrialComponent.TrialComponentName
        ///
        /// * TrialComponent.Tags
        ///
        /// * TrialComponent.InputArtifacts
        ///
        /// * TrialComponent.OutputArtifacts
        ///
        ///
        /// A SearchExpression can include only one Contains operator for all other values of Name. In these cases, if you include multiple Contains operators in the SearchExpression, the result is the following error message: "'CONTAINS' operator usage limit of 1 exceeded."
        public var `operator`: SageMakerClientTypes.Operator?
        /// A value used with Name and Operator to determine which resources satisfy the filter's condition. For numerical properties, Value must be an integer or floating-point decimal. For timestamp properties, Value must be an ISO 8601 date-time string of the following format: YYYY-mm-dd'T'HH:MM:SS.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            `operator`: SageMakerClientTypes.Operator? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.`operator` = `operator`
            self.value = value
        }
    }

}

extension SageMakerClientTypes {
    /// Contains summary information about the flow definition.
    public struct FlowDefinitionSummary {
        /// The timestamp when SageMaker created the flow definition.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The reason why the flow definition creation failed. A failure reason is returned only when the flow definition status is Failed.
        public var failureReason: Swift.String?
        /// The Amazon Resource Name (ARN) of the flow definition.
        /// This member is required.
        public var flowDefinitionArn: Swift.String?
        /// The name of the flow definition.
        /// This member is required.
        public var flowDefinitionName: Swift.String?
        /// The status of the flow definition. Valid values:
        /// This member is required.
        public var flowDefinitionStatus: SageMakerClientTypes.FlowDefinitionStatus?

        public init(
            creationTime: Foundation.Date? = nil,
            failureReason: Swift.String? = nil,
            flowDefinitionArn: Swift.String? = nil,
            flowDefinitionName: Swift.String? = nil,
            flowDefinitionStatus: SageMakerClientTypes.FlowDefinitionStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.flowDefinitionArn = flowDefinitionArn
            self.flowDefinitionName = flowDefinitionName
            self.flowDefinitionStatus = flowDefinitionStatus
        }
    }

}

public struct GetDeviceFleetReportInput {
    /// The name of the fleet.
    /// This member is required.
    public var deviceFleetName: Swift.String?

    public init(
        deviceFleetName: Swift.String? = nil
    )
    {
        self.deviceFleetName = deviceFleetName
    }
}

public struct GetDeviceFleetReportOutput {
    /// The versions of Edge Manager agent deployed on the fleet.
    public var agentVersions: [SageMakerClientTypes.AgentVersion]?
    /// Description of the fleet.
    public var description: Swift.String?
    /// The Amazon Resource Name (ARN) of the device.
    /// This member is required.
    public var deviceFleetArn: Swift.String?
    /// The name of the fleet.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// Status of devices.
    public var deviceStats: SageMakerClientTypes.DeviceStats?
    /// Status of model on device.
    public var modelStats: [SageMakerClientTypes.EdgeModelStat]?
    /// The output configuration for storing sample data collected by the fleet.
    public var outputConfig: SageMakerClientTypes.EdgeOutputConfig?
    /// Timestamp of when the report was generated.
    public var reportGenerated: Foundation.Date?

    public init(
        agentVersions: [SageMakerClientTypes.AgentVersion]? = nil,
        description: Swift.String? = nil,
        deviceFleetArn: Swift.String? = nil,
        deviceFleetName: Swift.String? = nil,
        deviceStats: SageMakerClientTypes.DeviceStats? = nil,
        modelStats: [SageMakerClientTypes.EdgeModelStat]? = nil,
        outputConfig: SageMakerClientTypes.EdgeOutputConfig? = nil,
        reportGenerated: Foundation.Date? = nil
    )
    {
        self.agentVersions = agentVersions
        self.description = description
        self.deviceFleetArn = deviceFleetArn
        self.deviceFleetName = deviceFleetName
        self.deviceStats = deviceStats
        self.modelStats = modelStats
        self.outputConfig = outputConfig
        self.reportGenerated = reportGenerated
    }
}

public struct GetLineageGroupPolicyInput {
    /// The name or Amazon Resource Name (ARN) of the lineage group.
    /// This member is required.
    public var lineageGroupName: Swift.String?

    public init(
        lineageGroupName: Swift.String? = nil
    )
    {
        self.lineageGroupName = lineageGroupName
    }
}

public struct GetLineageGroupPolicyOutput {
    /// The Amazon Resource Name (ARN) of the lineage group.
    public var lineageGroupArn: Swift.String?
    /// The resource policy that gives access to the lineage group in another account.
    public var resourcePolicy: Swift.String?

    public init(
        lineageGroupArn: Swift.String? = nil,
        resourcePolicy: Swift.String? = nil
    )
    {
        self.lineageGroupArn = lineageGroupArn
        self.resourcePolicy = resourcePolicy
    }
}

public struct GetModelPackageGroupPolicyInput {
    /// The name of the model group for which to get the resource policy.
    /// This member is required.
    public var modelPackageGroupName: Swift.String?

    public init(
        modelPackageGroupName: Swift.String? = nil
    )
    {
        self.modelPackageGroupName = modelPackageGroupName
    }
}

public struct GetModelPackageGroupPolicyOutput {
    /// The resource policy for the model group.
    /// This member is required.
    public var resourcePolicy: Swift.String?

    public init(
        resourcePolicy: Swift.String? = nil
    )
    {
        self.resourcePolicy = resourcePolicy
    }
}

public struct GetSagemakerServicecatalogPortfolioStatusInput {

    public init() { }
}

extension SageMakerClientTypes {

    public enum SagemakerServicecatalogStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [SagemakerServicecatalogStatus] {
            return [
                .disabled,
                .enabled
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "Disabled"
            case .enabled: return "Enabled"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct GetSagemakerServicecatalogPortfolioStatusOutput {
    /// Whether Service Catalog is enabled or disabled in SageMaker.
    public var status: SageMakerClientTypes.SagemakerServicecatalogStatus?

    public init(
        status: SageMakerClientTypes.SagemakerServicecatalogStatus? = nil
    )
    {
        self.status = status
    }
}

extension SageMakerClientTypes {
    /// An object where you specify the anticipated traffic pattern for an endpoint.
    public struct ScalingPolicyObjective {
        /// The maximum number of expected requests to your endpoint per minute.
        public var maxInvocationsPerMinute: Swift.Int?
        /// The minimum number of expected requests to your endpoint per minute.
        public var minInvocationsPerMinute: Swift.Int?

        public init(
            maxInvocationsPerMinute: Swift.Int? = nil,
            minInvocationsPerMinute: Swift.Int? = nil
        )
        {
            self.maxInvocationsPerMinute = maxInvocationsPerMinute
            self.minInvocationsPerMinute = minInvocationsPerMinute
        }
    }

}

public struct GetScalingConfigurationRecommendationInput {
    /// The name of an endpoint benchmarked during a previously completed inference recommendation job. This name should come from one of the recommendations returned by the job specified in the InferenceRecommendationsJobName field. Specify either this field or the RecommendationId field.
    public var endpointName: Swift.String?
    /// The name of a previously completed Inference Recommender job.
    /// This member is required.
    public var inferenceRecommendationsJobName: Swift.String?
    /// The recommendation ID of a previously completed inference recommendation. This ID should come from one of the recommendations returned by the job specified in the InferenceRecommendationsJobName field. Specify either this field or the EndpointName field.
    public var recommendationId: Swift.String?
    /// An object where you specify the anticipated traffic pattern for an endpoint.
    public var scalingPolicyObjective: SageMakerClientTypes.ScalingPolicyObjective?
    /// The percentage of how much utilization you want an instance to use before autoscaling. The default value is 50%.
    public var targetCpuUtilizationPerCore: Swift.Int?

    public init(
        endpointName: Swift.String? = nil,
        inferenceRecommendationsJobName: Swift.String? = nil,
        recommendationId: Swift.String? = nil,
        scalingPolicyObjective: SageMakerClientTypes.ScalingPolicyObjective? = nil,
        targetCpuUtilizationPerCore: Swift.Int? = nil
    )
    {
        self.endpointName = endpointName
        self.inferenceRecommendationsJobName = inferenceRecommendationsJobName
        self.recommendationId = recommendationId
        self.scalingPolicyObjective = scalingPolicyObjective
        self.targetCpuUtilizationPerCore = targetCpuUtilizationPerCore
    }
}

extension SageMakerClientTypes {
    /// The metric for a scaling policy.
    public struct ScalingPolicyMetric {
        /// The number of invocations sent to a model, normalized by InstanceCount in each ProductionVariant. 1/numberOfInstances is sent as the value on each request, where numberOfInstances is the number of active instances for the ProductionVariant behind the endpoint at the time of the request.
        public var invocationsPerInstance: Swift.Int?
        /// The interval of time taken by a model to respond as viewed from SageMaker. This interval includes the local communication times taken to send the request and to fetch the response from the container of a model and the time taken to complete the inference in the container.
        public var modelLatency: Swift.Int?

        public init(
            invocationsPerInstance: Swift.Int? = nil,
            modelLatency: Swift.Int? = nil
        )
        {
            self.invocationsPerInstance = invocationsPerInstance
            self.modelLatency = modelLatency
        }
    }

}

public struct GetScalingConfigurationRecommendationOutput {
    /// An object with the recommended values for you to specify when creating an autoscaling policy.
    public var dynamicScalingConfiguration: SageMakerClientTypes.DynamicScalingConfiguration?
    /// The name of an endpoint benchmarked during a previously completed Inference Recommender job.
    public var endpointName: Swift.String?
    /// The name of a previously completed Inference Recommender job.
    public var inferenceRecommendationsJobName: Swift.String?
    /// An object with a list of metrics that were benchmarked during the previously completed Inference Recommender job.
    public var metric: SageMakerClientTypes.ScalingPolicyMetric?
    /// The recommendation ID of a previously completed inference recommendation.
    public var recommendationId: Swift.String?
    /// An object representing the anticipated traffic pattern for an endpoint that you specified in the request.
    public var scalingPolicyObjective: SageMakerClientTypes.ScalingPolicyObjective?
    /// The percentage of how much utilization you want an instance to use before autoscaling, which you specified in the request. The default value is 50%.
    public var targetCpuUtilizationPerCore: Swift.Int?

    public init(
        dynamicScalingConfiguration: SageMakerClientTypes.DynamicScalingConfiguration? = nil,
        endpointName: Swift.String? = nil,
        inferenceRecommendationsJobName: Swift.String? = nil,
        metric: SageMakerClientTypes.ScalingPolicyMetric? = nil,
        recommendationId: Swift.String? = nil,
        scalingPolicyObjective: SageMakerClientTypes.ScalingPolicyObjective? = nil,
        targetCpuUtilizationPerCore: Swift.Int? = nil
    )
    {
        self.dynamicScalingConfiguration = dynamicScalingConfiguration
        self.endpointName = endpointName
        self.inferenceRecommendationsJobName = inferenceRecommendationsJobName
        self.metric = metric
        self.recommendationId = recommendationId
        self.scalingPolicyObjective = scalingPolicyObjective
        self.targetCpuUtilizationPerCore = targetCpuUtilizationPerCore
    }
}

extension SageMakerClientTypes {

    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case endpoint
        case experiment
        case experimentTrial
        case experimentTrialComponent
        case featureGroup
        case featureMetadata
        case hyperParameterTuningJob
        case image
        case imageVersion
        case model
        case modelCard
        case modelPackage
        case modelPackageGroup
        case pipeline
        case pipelineExecution
        case project
        case trainingJob
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .endpoint,
                .experiment,
                .experimentTrial,
                .experimentTrialComponent,
                .featureGroup,
                .featureMetadata,
                .hyperParameterTuningJob,
                .image,
                .imageVersion,
                .model,
                .modelCard,
                .modelPackage,
                .modelPackageGroup,
                .pipeline,
                .pipelineExecution,
                .project,
                .trainingJob
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .endpoint: return "Endpoint"
            case .experiment: return "Experiment"
            case .experimentTrial: return "ExperimentTrial"
            case .experimentTrialComponent: return "ExperimentTrialComponent"
            case .featureGroup: return "FeatureGroup"
            case .featureMetadata: return "FeatureMetadata"
            case .hyperParameterTuningJob: return "HyperParameterTuningJob"
            case .image: return "Image"
            case .imageVersion: return "ImageVersion"
            case .model: return "Model"
            case .modelCard: return "ModelCard"
            case .modelPackage: return "ModelPackage"
            case .modelPackageGroup: return "ModelPackageGroup"
            case .pipeline: return "Pipeline"
            case .pipelineExecution: return "PipelineExecution"
            case .project: return "Project"
            case .trainingJob: return "TrainingJob"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Part of the SuggestionQuery type. Specifies a hint for retrieving property names that begin with the specified text.
    public struct PropertyNameQuery {
        /// Text that begins a property's name.
        /// This member is required.
        public var propertyNameHint: Swift.String?

        public init(
            propertyNameHint: Swift.String? = nil
        )
        {
            self.propertyNameHint = propertyNameHint
        }
    }

}

extension SageMakerClientTypes {
    /// Specified in the [GetSearchSuggestions](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_GetSearchSuggestions.html) request. Limits the property names that are included in the response.
    public struct SuggestionQuery {
        /// Defines a property name hint. Only property names that begin with the specified hint are included in the response.
        public var propertyNameQuery: SageMakerClientTypes.PropertyNameQuery?

        public init(
            propertyNameQuery: SageMakerClientTypes.PropertyNameQuery? = nil
        )
        {
            self.propertyNameQuery = propertyNameQuery
        }
    }

}

public struct GetSearchSuggestionsInput {
    /// The name of the SageMaker resource to search for.
    /// This member is required.
    public var resource: SageMakerClientTypes.ResourceType?
    /// Limits the property names that are included in the response.
    public var suggestionQuery: SageMakerClientTypes.SuggestionQuery?

    public init(
        resource: SageMakerClientTypes.ResourceType? = nil,
        suggestionQuery: SageMakerClientTypes.SuggestionQuery? = nil
    )
    {
        self.resource = resource
        self.suggestionQuery = suggestionQuery
    }
}

extension SageMakerClientTypes {
    /// A property name returned from a GetSearchSuggestions call that specifies a value in the PropertyNameQuery field.
    public struct PropertyNameSuggestion {
        /// A suggested property name based on what you entered in the search textbox in the SageMaker console.
        public var propertyName: Swift.String?

        public init(
            propertyName: Swift.String? = nil
        )
        {
            self.propertyName = propertyName
        }
    }

}

public struct GetSearchSuggestionsOutput {
    /// A list of property names for a Resource that match a SuggestionQuery.
    public var propertyNameSuggestions: [SageMakerClientTypes.PropertyNameSuggestion]?

    public init(
        propertyNameSuggestions: [SageMakerClientTypes.PropertyNameSuggestion]? = nil
    )
    {
        self.propertyNameSuggestions = propertyNameSuggestions
    }
}

extension SageMakerClientTypes {
    /// Specifies configuration details for a Git repository when the repository is updated.
    public struct GitConfigForUpdate {
        /// The Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that contains the credentials used to access the git repository. The secret must have a staging label of AWSCURRENT and must be in the following format: {"username": UserName, "password": Password}
        public var secretArn: Swift.String?

        public init(
            secretArn: Swift.String? = nil
        )
        {
            self.secretArn = secretArn
        }
    }

}

extension SageMakerClientTypes {
    /// Information about hub content.
    public struct HubContentInfo {
        /// The date and time that the hub content was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The version of the hub content document schema.
        /// This member is required.
        public var documentSchemaVersion: Swift.String?
        /// The Amazon Resource Name (ARN) of the hub content.
        /// This member is required.
        public var hubContentArn: Swift.String?
        /// A description of the hub content.
        public var hubContentDescription: Swift.String?
        /// The display name of the hub content.
        public var hubContentDisplayName: Swift.String?
        /// The name of the hub content.
        /// This member is required.
        public var hubContentName: Swift.String?
        /// The searchable keywords for the hub content.
        public var hubContentSearchKeywords: [Swift.String]?
        /// The status of the hub content.
        /// This member is required.
        public var hubContentStatus: SageMakerClientTypes.HubContentStatus?
        /// The type of hub content.
        /// This member is required.
        public var hubContentType: SageMakerClientTypes.HubContentType?
        /// The version of the hub content.
        /// This member is required.
        public var hubContentVersion: Swift.String?
        /// The date and time when the hub content was originally created, before any updates or revisions.
        public var originalCreationTime: Foundation.Date?
        /// The ARN of the public hub content.
        public var sageMakerPublicHubContentArn: Swift.String?
        /// The support status of the hub content.
        public var supportStatus: SageMakerClientTypes.HubContentSupportStatus?

        public init(
            creationTime: Foundation.Date? = nil,
            documentSchemaVersion: Swift.String? = nil,
            hubContentArn: Swift.String? = nil,
            hubContentDescription: Swift.String? = nil,
            hubContentDisplayName: Swift.String? = nil,
            hubContentName: Swift.String? = nil,
            hubContentSearchKeywords: [Swift.String]? = nil,
            hubContentStatus: SageMakerClientTypes.HubContentStatus? = nil,
            hubContentType: SageMakerClientTypes.HubContentType? = nil,
            hubContentVersion: Swift.String? = nil,
            originalCreationTime: Foundation.Date? = nil,
            sageMakerPublicHubContentArn: Swift.String? = nil,
            supportStatus: SageMakerClientTypes.HubContentSupportStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.documentSchemaVersion = documentSchemaVersion
            self.hubContentArn = hubContentArn
            self.hubContentDescription = hubContentDescription
            self.hubContentDisplayName = hubContentDisplayName
            self.hubContentName = hubContentName
            self.hubContentSearchKeywords = hubContentSearchKeywords
            self.hubContentStatus = hubContentStatus
            self.hubContentType = hubContentType
            self.hubContentVersion = hubContentVersion
            self.originalCreationTime = originalCreationTime
            self.sageMakerPublicHubContentArn = sageMakerPublicHubContentArn
            self.supportStatus = supportStatus
        }
    }

}

extension SageMakerClientTypes {

    public enum HubContentSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case hubContentName
        case hubContentStatus
        case sdkUnknown(Swift.String)

        public static var allCases: [HubContentSortBy] {
            return [
                .creationTime,
                .hubContentName,
                .hubContentStatus
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .hubContentName: return "HubContentName"
            case .hubContentStatus: return "HubContentStatus"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Information about a hub.
    public struct HubInfo {
        /// The date and time that the hub was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the hub.
        /// This member is required.
        public var hubArn: Swift.String?
        /// A description of the hub.
        public var hubDescription: Swift.String?
        /// The display name of the hub.
        public var hubDisplayName: Swift.String?
        /// The name of the hub.
        /// This member is required.
        public var hubName: Swift.String?
        /// The searchable keywords for the hub.
        public var hubSearchKeywords: [Swift.String]?
        /// The status of the hub.
        /// This member is required.
        public var hubStatus: SageMakerClientTypes.HubStatus?
        /// The date and time that the hub was last modified.
        /// This member is required.
        public var lastModifiedTime: Foundation.Date?

        public init(
            creationTime: Foundation.Date? = nil,
            hubArn: Swift.String? = nil,
            hubDescription: Swift.String? = nil,
            hubDisplayName: Swift.String? = nil,
            hubName: Swift.String? = nil,
            hubSearchKeywords: [Swift.String]? = nil,
            hubStatus: SageMakerClientTypes.HubStatus? = nil,
            lastModifiedTime: Foundation.Date? = nil
        )
        {
            self.creationTime = creationTime
            self.hubArn = hubArn
            self.hubDescription = hubDescription
            self.hubDisplayName = hubDisplayName
            self.hubName = hubName
            self.hubSearchKeywords = hubSearchKeywords
            self.hubStatus = hubStatus
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension SageMakerClientTypes {

    public enum HubSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case accountIdOwner
        case creationTime
        case hubName
        case hubStatus
        case sdkUnknown(Swift.String)

        public static var allCases: [HubSortBy] {
            return [
                .accountIdOwner,
                .creationTime,
                .hubName,
                .hubStatus
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .accountIdOwner: return "AccountIdOwner"
            case .creationTime: return "CreationTime"
            case .hubName: return "HubName"
            case .hubStatus: return "HubStatus"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Container for human task user interface information.
    public struct HumanTaskUiSummary {
        /// A timestamp when SageMaker created the human task user interface.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the human task user interface.
        /// This member is required.
        public var humanTaskUiArn: Swift.String?
        /// The name of the human task user interface.
        /// This member is required.
        public var humanTaskUiName: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            humanTaskUiArn: Swift.String? = nil,
            humanTaskUiName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.humanTaskUiArn = humanTaskUiArn
            self.humanTaskUiName = humanTaskUiName
        }
    }

}

extension SageMakerClientTypes {
    /// An entity returned by the [SearchRecord](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_SearchRecord.html) API containing the properties of a hyperparameter tuning job.
    public struct HyperParameterTuningJobSearchEntity {
        /// The container for the summary information about a training job.
        public var bestTrainingJob: SageMakerClientTypes.HyperParameterTrainingJobSummary?
        /// The total amount of resources consumed by a hyperparameter tuning job.
        public var consumedResources: SageMakerClientTypes.HyperParameterTuningJobConsumedResources?
        /// The time that a hyperparameter tuning job was created.
        public var creationTime: Foundation.Date?
        /// The error that was created when a hyperparameter tuning job failed.
        public var failureReason: Swift.String?
        /// The time that a hyperparameter tuning job ended.
        public var hyperParameterTuningEndTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of a hyperparameter tuning job.
        public var hyperParameterTuningJobArn: Swift.String?
        /// Configures a hyperparameter tuning job.
        public var hyperParameterTuningJobConfig: SageMakerClientTypes.HyperParameterTuningJobConfig?
        /// The name of a hyperparameter tuning job.
        public var hyperParameterTuningJobName: Swift.String?
        /// The status of a hyperparameter tuning job.
        public var hyperParameterTuningJobStatus: SageMakerClientTypes.HyperParameterTuningJobStatus?
        /// The time that a hyperparameter tuning job was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// Specifies the number of training jobs that this hyperparameter tuning job launched, categorized by the status of their objective metric. The objective metric status shows whether the final objective metric for the training job has been evaluated by the tuning job and used in the hyperparameter tuning process.
        public var objectiveStatusCounters: SageMakerClientTypes.ObjectiveStatusCounters?
        /// The container for the summary information about a training job.
        public var overallBestTrainingJob: SageMakerClientTypes.HyperParameterTrainingJobSummary?
        /// The tags associated with a hyperparameter tuning job. For more information see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
        public var tags: [SageMakerClientTypes.Tag]?
        /// Defines the training jobs launched by a hyperparameter tuning job.
        public var trainingJobDefinition: SageMakerClientTypes.HyperParameterTrainingJobDefinition?
        /// The job definitions included in a hyperparameter tuning job.
        public var trainingJobDefinitions: [SageMakerClientTypes.HyperParameterTrainingJobDefinition]?
        /// The numbers of training jobs launched by a hyperparameter tuning job, categorized by status.
        public var trainingJobStatusCounters: SageMakerClientTypes.TrainingJobStatusCounters?
        /// Information about either a current or completed hyperparameter tuning job.
        public var tuningJobCompletionDetails: SageMakerClientTypes.HyperParameterTuningJobCompletionDetails?
        /// Specifies the configuration for a hyperparameter tuning job that uses one or more previous hyperparameter tuning jobs as a starting point. The results of previous tuning jobs are used to inform which combinations of hyperparameters to search over in the new tuning job. All training jobs launched by the new hyperparameter tuning job are evaluated by using the objective metric, and the training job that performs the best is compared to the best training jobs from the parent tuning jobs. From these, the training job that performs the best as measured by the objective metric is returned as the overall best training job. All training jobs launched by parent hyperparameter tuning jobs and the new hyperparameter tuning jobs count against the limit of training jobs for the tuning job.
        public var warmStartConfig: SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig?

        public init(
            bestTrainingJob: SageMakerClientTypes.HyperParameterTrainingJobSummary? = nil,
            consumedResources: SageMakerClientTypes.HyperParameterTuningJobConsumedResources? = nil,
            creationTime: Foundation.Date? = nil,
            failureReason: Swift.String? = nil,
            hyperParameterTuningEndTime: Foundation.Date? = nil,
            hyperParameterTuningJobArn: Swift.String? = nil,
            hyperParameterTuningJobConfig: SageMakerClientTypes.HyperParameterTuningJobConfig? = nil,
            hyperParameterTuningJobName: Swift.String? = nil,
            hyperParameterTuningJobStatus: SageMakerClientTypes.HyperParameterTuningJobStatus? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            objectiveStatusCounters: SageMakerClientTypes.ObjectiveStatusCounters? = nil,
            overallBestTrainingJob: SageMakerClientTypes.HyperParameterTrainingJobSummary? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil,
            trainingJobDefinition: SageMakerClientTypes.HyperParameterTrainingJobDefinition? = nil,
            trainingJobDefinitions: [SageMakerClientTypes.HyperParameterTrainingJobDefinition]? = nil,
            trainingJobStatusCounters: SageMakerClientTypes.TrainingJobStatusCounters? = nil,
            tuningJobCompletionDetails: SageMakerClientTypes.HyperParameterTuningJobCompletionDetails? = nil,
            warmStartConfig: SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig? = nil
        )
        {
            self.bestTrainingJob = bestTrainingJob
            self.consumedResources = consumedResources
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.hyperParameterTuningEndTime = hyperParameterTuningEndTime
            self.hyperParameterTuningJobArn = hyperParameterTuningJobArn
            self.hyperParameterTuningJobConfig = hyperParameterTuningJobConfig
            self.hyperParameterTuningJobName = hyperParameterTuningJobName
            self.hyperParameterTuningJobStatus = hyperParameterTuningJobStatus
            self.lastModifiedTime = lastModifiedTime
            self.objectiveStatusCounters = objectiveStatusCounters
            self.overallBestTrainingJob = overallBestTrainingJob
            self.tags = tags
            self.trainingJobDefinition = trainingJobDefinition
            self.trainingJobDefinitions = trainingJobDefinitions
            self.trainingJobStatusCounters = trainingJobStatusCounters
            self.tuningJobCompletionDetails = tuningJobCompletionDetails
            self.warmStartConfig = warmStartConfig
        }
    }

}

extension SageMakerClientTypes {

    public enum HyperParameterTuningJobSortByOptions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationtime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [HyperParameterTuningJobSortByOptions] {
            return [
                .creationtime,
                .name,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Provides summary information about a hyperparameter tuning job.
    public struct HyperParameterTuningJobSummary {
        /// The date and time that the tuning job was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The date and time that the tuning job ended.
        public var hyperParameterTuningEndTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the tuning job.
        /// This member is required.
        public var hyperParameterTuningJobArn: Swift.String?
        /// The name of the tuning job.
        /// This member is required.
        public var hyperParameterTuningJobName: Swift.String?
        /// The status of the tuning job.
        /// This member is required.
        public var hyperParameterTuningJobStatus: SageMakerClientTypes.HyperParameterTuningJobStatus?
        /// The date and time that the tuning job was modified.
        public var lastModifiedTime: Foundation.Date?
        /// The [ObjectiveStatusCounters](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ObjectiveStatusCounters.html) object that specifies the numbers of training jobs, categorized by objective metric status, that this tuning job launched.
        /// This member is required.
        public var objectiveStatusCounters: SageMakerClientTypes.ObjectiveStatusCounters?
        /// The [ResourceLimits](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ResourceLimits.html) object that specifies the maximum number of training jobs and parallel training jobs allowed for this tuning job.
        public var resourceLimits: SageMakerClientTypes.ResourceLimits?
        /// Specifies the search strategy hyperparameter tuning uses to choose which hyperparameters to evaluate at each iteration.
        /// This member is required.
        public var strategy: SageMakerClientTypes.HyperParameterTuningJobStrategyType?
        /// The [TrainingJobStatusCounters](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobStatusCounters.html) object that specifies the numbers of training jobs, categorized by status, that this tuning job launched.
        /// This member is required.
        public var trainingJobStatusCounters: SageMakerClientTypes.TrainingJobStatusCounters?

        public init(
            creationTime: Foundation.Date? = nil,
            hyperParameterTuningEndTime: Foundation.Date? = nil,
            hyperParameterTuningJobArn: Swift.String? = nil,
            hyperParameterTuningJobName: Swift.String? = nil,
            hyperParameterTuningJobStatus: SageMakerClientTypes.HyperParameterTuningJobStatus? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            objectiveStatusCounters: SageMakerClientTypes.ObjectiveStatusCounters? = nil,
            resourceLimits: SageMakerClientTypes.ResourceLimits? = nil,
            strategy: SageMakerClientTypes.HyperParameterTuningJobStrategyType? = nil,
            trainingJobStatusCounters: SageMakerClientTypes.TrainingJobStatusCounters? = nil
        )
        {
            self.creationTime = creationTime
            self.hyperParameterTuningEndTime = hyperParameterTuningEndTime
            self.hyperParameterTuningJobArn = hyperParameterTuningJobArn
            self.hyperParameterTuningJobName = hyperParameterTuningJobName
            self.hyperParameterTuningJobStatus = hyperParameterTuningJobStatus
            self.lastModifiedTime = lastModifiedTime
            self.objectiveStatusCounters = objectiveStatusCounters
            self.resourceLimits = resourceLimits
            self.strategy = strategy
            self.trainingJobStatusCounters = trainingJobStatusCounters
        }
    }

}

extension SageMakerClientTypes {
    /// A SageMaker image. A SageMaker image represents a set of container images that are derived from a common base container image. Each of these container images is represented by a SageMaker ImageVersion.
    public struct Image {
        /// When the image was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The description of the image.
        public var description: Swift.String?
        /// The name of the image as displayed.
        public var displayName: Swift.String?
        /// When a create, update, or delete operation fails, the reason for the failure.
        public var failureReason: Swift.String?
        /// The ARN of the image.
        /// This member is required.
        public var imageArn: Swift.String?
        /// The name of the image.
        /// This member is required.
        public var imageName: Swift.String?
        /// The status of the image.
        /// This member is required.
        public var imageStatus: SageMakerClientTypes.ImageStatus?
        /// When the image was last modified.
        /// This member is required.
        public var lastModifiedTime: Foundation.Date?

        public init(
            creationTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            displayName: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            imageArn: Swift.String? = nil,
            imageName: Swift.String? = nil,
            imageStatus: SageMakerClientTypes.ImageStatus? = nil,
            lastModifiedTime: Foundation.Date? = nil
        )
        {
            self.creationTime = creationTime
            self.description = description
            self.displayName = displayName
            self.failureReason = failureReason
            self.imageArn = imageArn
            self.imageName = imageName
            self.imageStatus = imageStatus
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension SageMakerClientTypes {

    public enum ImageSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case imageName
        case lastModifiedTime
        case sdkUnknown(Swift.String)

        public static var allCases: [ImageSortBy] {
            return [
                .creationTime,
                .imageName,
                .lastModifiedTime
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CREATION_TIME"
            case .imageName: return "IMAGE_NAME"
            case .lastModifiedTime: return "LAST_MODIFIED_TIME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum ImageSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [ImageSortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASCENDING"
            case .descending: return "DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A version of a SageMaker Image. A version represents an existing container image.
    public struct ImageVersion {
        /// When the version was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// When a create or delete operation fails, the reason for the failure.
        public var failureReason: Swift.String?
        /// The ARN of the image the version is based on.
        /// This member is required.
        public var imageArn: Swift.String?
        /// The ARN of the version.
        /// This member is required.
        public var imageVersionArn: Swift.String?
        /// The status of the version.
        /// This member is required.
        public var imageVersionStatus: SageMakerClientTypes.ImageVersionStatus?
        /// When the version was last modified.
        /// This member is required.
        public var lastModifiedTime: Foundation.Date?
        /// The version number.
        /// This member is required.
        public var version: Swift.Int?

        public init(
            creationTime: Foundation.Date? = nil,
            failureReason: Swift.String? = nil,
            imageArn: Swift.String? = nil,
            imageVersionArn: Swift.String? = nil,
            imageVersionStatus: SageMakerClientTypes.ImageVersionStatus? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            version: Swift.Int? = nil
        )
        {
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.imageArn = imageArn
            self.imageVersionArn = imageVersionArn
            self.imageVersionStatus = imageVersionStatus
            self.lastModifiedTime = lastModifiedTime
            self.version = version
        }
    }

}

extension SageMakerClientTypes {

    public enum ImageVersionSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case lastModifiedTime
        case version
        case sdkUnknown(Swift.String)

        public static var allCases: [ImageVersionSortBy] {
            return [
                .creationTime,
                .lastModifiedTime,
                .version
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CREATION_TIME"
            case .lastModifiedTime: return "LAST_MODIFIED_TIME"
            case .version: return "VERSION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum ImageVersionSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [ImageVersionSortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "ASCENDING"
            case .descending: return "DESCENDING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ImportHubContentInput {
    /// The version of the hub content schema to import.
    /// This member is required.
    public var documentSchemaVersion: Swift.String?
    /// A description of the hub content to import.
    public var hubContentDescription: Swift.String?
    /// The display name of the hub content to import.
    public var hubContentDisplayName: Swift.String?
    /// The hub content document that describes information about the hub content such as type, associated containers, scripts, and more.
    /// This member is required.
    public var hubContentDocument: Swift.String?
    /// A string that provides a description of the hub content. This string can include links, tables, and standard markdown formating.
    public var hubContentMarkdown: Swift.String?
    /// The name of the hub content to import.
    /// This member is required.
    public var hubContentName: Swift.String?
    /// The searchable keywords of the hub content.
    public var hubContentSearchKeywords: [Swift.String]?
    /// The type of hub content to import.
    /// This member is required.
    public var hubContentType: SageMakerClientTypes.HubContentType?
    /// The version of the hub content to import.
    public var hubContentVersion: Swift.String?
    /// The name of the hub to import content into.
    /// This member is required.
    public var hubName: Swift.String?
    /// Any tags associated with the hub content.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        documentSchemaVersion: Swift.String? = nil,
        hubContentDescription: Swift.String? = nil,
        hubContentDisplayName: Swift.String? = nil,
        hubContentDocument: Swift.String? = nil,
        hubContentMarkdown: Swift.String? = nil,
        hubContentName: Swift.String? = nil,
        hubContentSearchKeywords: [Swift.String]? = nil,
        hubContentType: SageMakerClientTypes.HubContentType? = nil,
        hubContentVersion: Swift.String? = nil,
        hubName: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.documentSchemaVersion = documentSchemaVersion
        self.hubContentDescription = hubContentDescription
        self.hubContentDisplayName = hubContentDisplayName
        self.hubContentDocument = hubContentDocument
        self.hubContentMarkdown = hubContentMarkdown
        self.hubContentName = hubContentName
        self.hubContentSearchKeywords = hubContentSearchKeywords
        self.hubContentType = hubContentType
        self.hubContentVersion = hubContentVersion
        self.hubName = hubName
        self.tags = tags
    }
}

public struct ImportHubContentOutput {
    /// The ARN of the hub that the content was imported into.
    /// This member is required.
    public var hubArn: Swift.String?
    /// The ARN of the hub content that was imported.
    /// This member is required.
    public var hubContentArn: Swift.String?

    public init(
        hubArn: Swift.String? = nil,
        hubContentArn: Swift.String? = nil
    )
    {
        self.hubArn = hubArn
        self.hubContentArn = hubContentArn
    }
}

extension SageMakerClientTypes {

    public enum InferenceComponentSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationtime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [InferenceComponentSortKey] {
            return [
                .creationtime,
                .name,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A summary of the properties of an inference component.
    public struct InferenceComponentSummary {
        /// The time when the inference component was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the endpoint that hosts the inference component.
        /// This member is required.
        public var endpointArn: Swift.String?
        /// The name of the endpoint that hosts the inference component.
        /// This member is required.
        public var endpointName: Swift.String?
        /// The Amazon Resource Name (ARN) of the inference component.
        /// This member is required.
        public var inferenceComponentArn: Swift.String?
        /// The name of the inference component.
        /// This member is required.
        public var inferenceComponentName: Swift.String?
        /// The status of the inference component.
        public var inferenceComponentStatus: SageMakerClientTypes.InferenceComponentStatus?
        /// The time when the inference component was last updated.
        /// This member is required.
        public var lastModifiedTime: Foundation.Date?
        /// The name of the production variant that hosts the inference component.
        /// This member is required.
        public var variantName: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            endpointArn: Swift.String? = nil,
            endpointName: Swift.String? = nil,
            inferenceComponentArn: Swift.String? = nil,
            inferenceComponentName: Swift.String? = nil,
            inferenceComponentStatus: SageMakerClientTypes.InferenceComponentStatus? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            variantName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.endpointArn = endpointArn
            self.endpointName = endpointName
            self.inferenceComponentArn = inferenceComponentArn
            self.inferenceComponentName = inferenceComponentName
            self.inferenceComponentStatus = inferenceComponentStatus
            self.lastModifiedTime = lastModifiedTime
            self.variantName = variantName
        }
    }

}

extension SageMakerClientTypes {
    /// Lists a summary of properties of an inference experiment.
    public struct InferenceExperimentSummary {
        /// The timestamp at which the inference experiment was completed.
        public var completionTime: Foundation.Date?
        /// The timestamp at which the inference experiment was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The description of the inference experiment.
        public var description: Swift.String?
        /// The timestamp when you last modified the inference experiment.
        /// This member is required.
        public var lastModifiedTime: Foundation.Date?
        /// The name of the inference experiment.
        /// This member is required.
        public var name: Swift.String?
        /// The ARN of the IAM role that Amazon SageMaker can assume to access model artifacts and container images, and manage Amazon SageMaker Inference endpoints for model deployment.
        public var roleArn: Swift.String?
        /// The duration for which the inference experiment ran or will run. The maximum duration that you can set for an inference experiment is 30 days.
        public var schedule: SageMakerClientTypes.InferenceExperimentSchedule?
        /// The status of the inference experiment.
        /// This member is required.
        public var status: SageMakerClientTypes.InferenceExperimentStatus?
        /// The error message for the inference experiment status result.
        public var statusReason: Swift.String?
        /// The type of the inference experiment.
        /// This member is required.
        public var type: SageMakerClientTypes.InferenceExperimentType?

        public init(
            completionTime: Foundation.Date? = nil,
            creationTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            name: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            schedule: SageMakerClientTypes.InferenceExperimentSchedule? = nil,
            status: SageMakerClientTypes.InferenceExperimentStatus? = nil,
            statusReason: Swift.String? = nil,
            type: SageMakerClientTypes.InferenceExperimentType? = nil
        )
        {
            self.completionTime = completionTime
            self.creationTime = creationTime
            self.description = description
            self.lastModifiedTime = lastModifiedTime
            self.name = name
            self.roleArn = roleArn
            self.schedule = schedule
            self.status = status
            self.statusReason = statusReason
            self.type = type
        }
    }

}

extension SageMakerClientTypes {

    public enum InferenceExperimentStopDesiredState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case cancelled
        case completed
        case sdkUnknown(Swift.String)

        public static var allCases: [InferenceExperimentStopDesiredState] {
            return [
                .cancelled,
                .completed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .cancelled: return "Cancelled"
            case .completed: return "Completed"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A structure that contains a list of recommendation jobs.
    public struct InferenceRecommendationsJob {
        /// A timestamp that shows when the job completed.
        public var completionTime: Foundation.Date?
        /// A timestamp that shows when the job was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// If the job fails, provides information why the job failed.
        public var failureReason: Swift.String?
        /// The Amazon Resource Name (ARN) of the recommendation job.
        /// This member is required.
        public var jobArn: Swift.String?
        /// The job description.
        /// This member is required.
        public var jobDescription: Swift.String?
        /// The name of the job.
        /// This member is required.
        public var jobName: Swift.String?
        /// The recommendation job type.
        /// This member is required.
        public var jobType: SageMakerClientTypes.RecommendationJobType?
        /// A timestamp that shows when the job was last modified.
        /// This member is required.
        public var lastModifiedTime: Foundation.Date?
        /// The name of the created model.
        public var modelName: Swift.String?
        /// The Amazon Resource Name (ARN) of a versioned model package.
        public var modelPackageVersionArn: Swift.String?
        /// The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker to perform tasks on your behalf.
        /// This member is required.
        public var roleArn: Swift.String?
        /// The Amazon Simple Storage Service (Amazon S3) path where the sample payload is stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).
        public var samplePayloadUrl: Swift.String?
        /// The status of the job.
        /// This member is required.
        public var status: SageMakerClientTypes.RecommendationJobStatus?

        public init(
            completionTime: Foundation.Date? = nil,
            creationTime: Foundation.Date? = nil,
            failureReason: Swift.String? = nil,
            jobArn: Swift.String? = nil,
            jobDescription: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobType: SageMakerClientTypes.RecommendationJobType? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            modelName: Swift.String? = nil,
            modelPackageVersionArn: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            samplePayloadUrl: Swift.String? = nil,
            status: SageMakerClientTypes.RecommendationJobStatus? = nil
        )
        {
            self.completionTime = completionTime
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.jobArn = jobArn
            self.jobDescription = jobDescription
            self.jobName = jobName
            self.jobType = jobType
            self.lastModifiedTime = lastModifiedTime
            self.modelName = modelName
            self.modelPackageVersionArn = modelPackageVersionArn
            self.roleArn = roleArn
            self.samplePayloadUrl = samplePayloadUrl
            self.status = status
        }
    }

}

extension SageMakerClientTypes {
    /// The details for a specific benchmark from an Inference Recommender job.
    public struct RecommendationJobInferenceBenchmark {
        /// The endpoint configuration made by Inference Recommender during a recommendation job.
        public var endpointConfiguration: SageMakerClientTypes.EndpointOutputConfiguration?
        /// The metrics for an existing endpoint compared in an Inference Recommender job.
        public var endpointMetrics: SageMakerClientTypes.InferenceMetrics?
        /// The reason why a benchmark failed.
        public var failureReason: Swift.String?
        /// A timestamp that shows when the benchmark completed.
        public var invocationEndTime: Foundation.Date?
        /// A timestamp that shows when the benchmark started.
        public var invocationStartTime: Foundation.Date?
        /// The metrics of recommendations.
        public var metrics: SageMakerClientTypes.RecommendationMetrics?
        /// Defines the model configuration. Includes the specification name and environment parameters.
        /// This member is required.
        public var modelConfiguration: SageMakerClientTypes.ModelConfiguration?

        public init(
            endpointConfiguration: SageMakerClientTypes.EndpointOutputConfiguration? = nil,
            endpointMetrics: SageMakerClientTypes.InferenceMetrics? = nil,
            failureReason: Swift.String? = nil,
            invocationEndTime: Foundation.Date? = nil,
            invocationStartTime: Foundation.Date? = nil,
            metrics: SageMakerClientTypes.RecommendationMetrics? = nil,
            modelConfiguration: SageMakerClientTypes.ModelConfiguration? = nil
        )
        {
            self.endpointConfiguration = endpointConfiguration
            self.endpointMetrics = endpointMetrics
            self.failureReason = failureReason
            self.invocationEndTime = invocationEndTime
            self.invocationStartTime = invocationStartTime
            self.metrics = metrics
            self.modelConfiguration = modelConfiguration
        }
    }

}

extension SageMakerClientTypes {

    public enum RecommendationStepType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case benchmark
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationStepType] {
            return [
                .benchmark
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .benchmark: return "BENCHMARK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A returned array object for the Steps response field in the [ListInferenceRecommendationsJobSteps](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListInferenceRecommendationsJobSteps.html) API command.
    public struct InferenceRecommendationsJobStep {
        /// The details for a specific benchmark.
        public var inferenceBenchmark: SageMakerClientTypes.RecommendationJobInferenceBenchmark?
        /// The name of the Inference Recommender job.
        /// This member is required.
        public var jobName: Swift.String?
        /// The current status of the benchmark.
        /// This member is required.
        public var status: SageMakerClientTypes.RecommendationJobStatus?
        /// The type of the subtask. BENCHMARK: Evaluate the performance of your model on different instance types.
        /// This member is required.
        public var stepType: SageMakerClientTypes.RecommendationStepType?

        public init(
            inferenceBenchmark: SageMakerClientTypes.RecommendationJobInferenceBenchmark? = nil,
            jobName: Swift.String? = nil,
            status: SageMakerClientTypes.RecommendationJobStatus? = nil,
            stepType: SageMakerClientTypes.RecommendationStepType? = nil
        )
        {
            self.inferenceBenchmark = inferenceBenchmark
            self.jobName = jobName
            self.status = status
            self.stepType = stepType
        }
    }

}

extension SageMakerClientTypes {
    /// Provides counts for human-labeled tasks in the labeling job.
    public struct LabelCountersForWorkteam {
        /// The total number of data objects labeled by a human worker.
        public var humanLabeled: Swift.Int?
        /// The total number of data objects that need to be labeled by a human worker.
        public var pendingHuman: Swift.Int?
        /// The total number of tasks in the labeling job.
        public var total: Swift.Int?

        public init(
            humanLabeled: Swift.Int? = nil,
            pendingHuman: Swift.Int? = nil,
            total: Swift.Int? = nil
        )
        {
            self.humanLabeled = humanLabeled
            self.pendingHuman = pendingHuman
            self.total = total
        }
    }

}

extension SageMakerClientTypes {
    /// Provides summary information for a work team.
    public struct LabelingJobForWorkteamSummary {
        /// The date and time that the labeling job was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// A unique identifier for a labeling job. You can use this to refer to a specific labeling job.
        /// This member is required.
        public var jobReferenceCode: Swift.String?
        /// Provides information about the progress of a labeling job.
        public var labelCounters: SageMakerClientTypes.LabelCountersForWorkteam?
        /// The name of the labeling job that the work team is assigned to.
        public var labelingJobName: Swift.String?
        /// The configured number of workers per data object.
        public var numberOfHumanWorkersPerDataObject: Swift.Int?
        /// The Amazon Web Services account ID of the account used to start the labeling job.
        /// This member is required.
        public var workRequesterAccountId: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            jobReferenceCode: Swift.String? = nil,
            labelCounters: SageMakerClientTypes.LabelCountersForWorkteam? = nil,
            labelingJobName: Swift.String? = nil,
            numberOfHumanWorkersPerDataObject: Swift.Int? = nil,
            workRequesterAccountId: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.jobReferenceCode = jobReferenceCode
            self.labelCounters = labelCounters
            self.labelingJobName = labelingJobName
            self.numberOfHumanWorkersPerDataObject = numberOfHumanWorkersPerDataObject
            self.workRequesterAccountId = workRequesterAccountId
        }
    }

}

extension SageMakerClientTypes {
    /// Provides summary information about a labeling job.
    public struct LabelingJobSummary {
        /// The Amazon Resource Name (ARN) of the Lambda function used to consolidate the annotations from individual workers into a label for a data object. For more information, see [Annotation Consolidation](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-annotation-consolidation.html).
        public var annotationConsolidationLambdaArn: Swift.String?
        /// The date and time that the job was created (timestamp).
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// If the LabelingJobStatus field is Failed, this field contains a description of the error.
        public var failureReason: Swift.String?
        /// Input configuration for the labeling job.
        public var inputConfig: SageMakerClientTypes.LabelingJobInputConfig?
        /// Counts showing the progress of the labeling job.
        /// This member is required.
        public var labelCounters: SageMakerClientTypes.LabelCounters?
        /// The Amazon Resource Name (ARN) assigned to the labeling job when it was created.
        /// This member is required.
        public var labelingJobArn: Swift.String?
        /// The name of the labeling job.
        /// This member is required.
        public var labelingJobName: Swift.String?
        /// The location of the output produced by the labeling job.
        public var labelingJobOutput: SageMakerClientTypes.LabelingJobOutput?
        /// The current status of the labeling job.
        /// This member is required.
        public var labelingJobStatus: SageMakerClientTypes.LabelingJobStatus?
        /// The date and time that the job was last modified (timestamp).
        /// This member is required.
        public var lastModifiedTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of a Lambda function. The function is run before each data object is sent to a worker.
        /// This member is required.
        public var preHumanTaskLambdaArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the work team assigned to the job.
        /// This member is required.
        public var workteamArn: Swift.String?

        public init(
            annotationConsolidationLambdaArn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            failureReason: Swift.String? = nil,
            inputConfig: SageMakerClientTypes.LabelingJobInputConfig? = nil,
            labelCounters: SageMakerClientTypes.LabelCounters? = nil,
            labelingJobArn: Swift.String? = nil,
            labelingJobName: Swift.String? = nil,
            labelingJobOutput: SageMakerClientTypes.LabelingJobOutput? = nil,
            labelingJobStatus: SageMakerClientTypes.LabelingJobStatus? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            preHumanTaskLambdaArn: Swift.String? = nil,
            workteamArn: Swift.String? = nil
        )
        {
            self.annotationConsolidationLambdaArn = annotationConsolidationLambdaArn
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.inputConfig = inputConfig
            self.labelCounters = labelCounters
            self.labelingJobArn = labelingJobArn
            self.labelingJobName = labelingJobName
            self.labelingJobOutput = labelingJobOutput
            self.labelingJobStatus = labelingJobStatus
            self.lastModifiedTime = lastModifiedTime
            self.preHumanTaskLambdaArn = preHumanTaskLambdaArn
            self.workteamArn = workteamArn
        }
    }

}

extension SageMakerClientTypes {
    /// Metadata for a Lambda step.
    public struct LambdaStepMetadata {
        /// The Amazon Resource Name (ARN) of the Lambda function that was run by this step execution.
        public var arn: Swift.String?
        /// A list of the output parameters of the Lambda step.
        public var outputParameters: [SageMakerClientTypes.OutputParameter]?

        public init(
            arn: Swift.String? = nil,
            outputParameters: [SageMakerClientTypes.OutputParameter]? = nil
        )
        {
            self.arn = arn
            self.outputParameters = outputParameters
        }
    }

}

extension SageMakerClientTypes {
    /// Lists a summary of the properties of a lineage group. A lineage group provides a group of shareable lineage entity resources.
    public struct LineageGroupSummary {
        /// The creation time of the lineage group summary.
        public var creationTime: Foundation.Date?
        /// The display name of the lineage group summary.
        public var displayName: Swift.String?
        /// The last modified time of the lineage group summary.
        public var lastModifiedTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the lineage group resource.
        public var lineageGroupArn: Swift.String?
        /// The name or Amazon Resource Name (ARN) of the lineage group.
        public var lineageGroupName: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            displayName: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            lineageGroupArn: Swift.String? = nil,
            lineageGroupName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.displayName = displayName
            self.lastModifiedTime = lastModifiedTime
            self.lineageGroupArn = lineageGroupArn
            self.lineageGroupName = lineageGroupName
        }
    }

}

extension SageMakerClientTypes {

    public enum LineageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case action
        case artifact
        case context
        case trialComponent
        case sdkUnknown(Swift.String)

        public static var allCases: [LineageType] {
            return [
                .action,
                .artifact,
                .context,
                .trialComponent
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .action: return "Action"
            case .artifact: return "Artifact"
            case .context: return "Context"
            case .trialComponent: return "TrialComponent"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum SortActionsBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [SortActionsBy] {
            return [
                .creationTime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum SortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListActionsInput {
    /// A filter that returns only actions of the specified type.
    public var actionType: Swift.String?
    /// A filter that returns only actions created on or after the specified time.
    public var createdAfter: Foundation.Date?
    /// A filter that returns only actions created on or before the specified time.
    public var createdBefore: Foundation.Date?
    /// The maximum number of actions to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// If the previous call to ListActions didn't return the full set of actions, the call returns a token for getting the next set of actions.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CreationTime.
    public var sortBy: SageMakerClientTypes.SortActionsBy?
    /// The sort order. The default value is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that returns only actions with the specified source URI.
    public var sourceUri: Swift.String?

    public init(
        actionType: Swift.String? = nil,
        createdAfter: Foundation.Date? = nil,
        createdBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortActionsBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        sourceUri: Swift.String? = nil
    )
    {
        self.actionType = actionType
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.sourceUri = sourceUri
    }
}

public struct ListActionsOutput {
    /// A list of actions and their properties.
    public var actionSummaries: [SageMakerClientTypes.ActionSummary]?
    /// A token for getting the next set of actions, if there are any.
    public var nextToken: Swift.String?

    public init(
        actionSummaries: [SageMakerClientTypes.ActionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.actionSummaries = actionSummaries
        self.nextToken = nextToken
    }
}

public struct ListAlgorithmsInput {
    /// A filter that returns only algorithms created after the specified time (timestamp).
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only algorithms created before the specified time (timestamp).
    public var creationTimeBefore: Foundation.Date?
    /// The maximum number of algorithms to return in the response.
    public var maxResults: Swift.Int?
    /// A string in the algorithm name. This filter returns only algorithms whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the response to a previous ListAlgorithms request was truncated, the response includes a NextToken. To retrieve the next set of algorithms, use the token in the next request.
    public var nextToken: Swift.String?
    /// The parameter by which to sort the results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.AlgorithmSortBy?
    /// The sort order for the results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.AlgorithmSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListAlgorithmsOutput {
    /// >An array of AlgorithmSummary objects, each of which lists an algorithm.
    /// This member is required.
    public var algorithmSummaryList: [SageMakerClientTypes.AlgorithmSummary]?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of algorithms, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init(
        algorithmSummaryList: [SageMakerClientTypes.AlgorithmSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.algorithmSummaryList = algorithmSummaryList
        self.nextToken = nextToken
    }
}

public struct ListAliasesInput {
    /// The alias of the image version.
    public var alias: Swift.String?
    /// The name of the image.
    /// This member is required.
    public var imageName: Swift.String?
    /// The maximum number of aliases to return.
    public var maxResults: Swift.Int?
    /// If the previous call to ListAliases didn't return the full set of aliases, the call returns a token for retrieving the next set of aliases.
    public var nextToken: Swift.String?
    /// The version of the image. If image version is not specified, the aliases of all versions of the image are listed.
    public var version: Swift.Int?

    public init(
        alias: Swift.String? = nil,
        imageName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        version: Swift.Int? = nil
    )
    {
        self.alias = alias
        self.imageName = imageName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.version = version
    }
}

public struct ListAliasesOutput {
    /// A token for getting the next set of aliases, if more aliases exist.
    public var nextToken: Swift.String?
    /// A list of SageMaker image version aliases.
    public var sageMakerImageVersionAliases: [Swift.String]?

    public init(
        nextToken: Swift.String? = nil,
        sageMakerImageVersionAliases: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.sageMakerImageVersionAliases = sageMakerImageVersionAliases
    }
}

public struct ListAppImageConfigsInput {
    /// A filter that returns only AppImageConfigs created on or after the specified time.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only AppImageConfigs created on or before the specified time.
    public var creationTimeBefore: Foundation.Date?
    /// The total number of items to return in the response. If the total number of items available is more than the value specified, a NextToken is provided in the response. To resume pagination, provide the NextToken value in the as part of a subsequent call. The default value is 10.
    public var maxResults: Swift.Int?
    /// A filter that returns only AppImageConfigs modified on or after the specified time.
    public var modifiedTimeAfter: Foundation.Date?
    /// A filter that returns only AppImageConfigs modified on or before the specified time.
    public var modifiedTimeBefore: Foundation.Date?
    /// A filter that returns only AppImageConfigs whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the previous call to ListImages didn't return the full set of AppImageConfigs, the call returns a token for getting the next set of AppImageConfigs.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CreationTime.
    public var sortBy: SageMakerClientTypes.AppImageConfigSortKey?
    /// The sort order. The default value is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        modifiedTimeAfter: Foundation.Date? = nil,
        modifiedTimeBefore: Foundation.Date? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.AppImageConfigSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.modifiedTimeAfter = modifiedTimeAfter
        self.modifiedTimeBefore = modifiedTimeBefore
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListAppImageConfigsOutput {
    /// A list of AppImageConfigs and their properties.
    public var appImageConfigs: [SageMakerClientTypes.AppImageConfigDetails]?
    /// A token for getting the next set of AppImageConfigs, if there are any.
    public var nextToken: Swift.String?

    public init(
        appImageConfigs: [SageMakerClientTypes.AppImageConfigDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.appImageConfigs = appImageConfigs
        self.nextToken = nextToken
    }
}

public struct ListAppsInput {
    /// A parameter to search for the domain ID.
    public var domainIdEquals: Swift.String?
    /// This parameter defines the maximum number of results that can be return in a single response. The MaxResults parameter is an upper bound, not a target. If there are more results available than the value specified, a NextToken is provided in the response. The NextToken indicates that the user should get the next set of results by providing this token as a part of a subsequent call. The default value for MaxResults is 10.
    public var maxResults: Swift.Int?
    /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// The parameter by which to sort the results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.AppSortKey?
    /// The sort order for the results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A parameter to search by space name. If UserProfileNameEquals is set, then this value cannot be set.
    public var spaceNameEquals: Swift.String?
    /// A parameter to search by user profile name. If SpaceNameEquals is set, then this value cannot be set.
    public var userProfileNameEquals: Swift.String?

    public init(
        domainIdEquals: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.AppSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        spaceNameEquals: Swift.String? = nil,
        userProfileNameEquals: Swift.String? = nil
    )
    {
        self.domainIdEquals = domainIdEquals
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.spaceNameEquals = spaceNameEquals
        self.userProfileNameEquals = userProfileNameEquals
    }
}

public struct ListAppsOutput {
    /// The list of apps.
    public var apps: [SageMakerClientTypes.AppDetails]?
    /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?

    public init(
        apps: [SageMakerClientTypes.AppDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.apps = apps
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum SortArtifactsBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case sdkUnknown(Swift.String)

        public static var allCases: [SortArtifactsBy] {
            return [
                .creationTime
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListArtifactsInput {
    /// A filter that returns only artifacts of the specified type.
    public var artifactType: Swift.String?
    /// A filter that returns only artifacts created on or after the specified time.
    public var createdAfter: Foundation.Date?
    /// A filter that returns only artifacts created on or before the specified time.
    public var createdBefore: Foundation.Date?
    /// The maximum number of artifacts to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// If the previous call to ListArtifacts didn't return the full set of artifacts, the call returns a token for getting the next set of artifacts.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CreationTime.
    public var sortBy: SageMakerClientTypes.SortArtifactsBy?
    /// The sort order. The default value is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that returns only artifacts with the specified source URI.
    public var sourceUri: Swift.String?

    public init(
        artifactType: Swift.String? = nil,
        createdAfter: Foundation.Date? = nil,
        createdBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortArtifactsBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        sourceUri: Swift.String? = nil
    )
    {
        self.artifactType = artifactType
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.sourceUri = sourceUri
    }
}

public struct ListArtifactsOutput {
    /// A list of artifacts and their properties.
    public var artifactSummaries: [SageMakerClientTypes.ArtifactSummary]?
    /// A token for getting the next set of artifacts, if there are any.
    public var nextToken: Swift.String?

    public init(
        artifactSummaries: [SageMakerClientTypes.ArtifactSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.artifactSummaries = artifactSummaries
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum SortAssociationsBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case destinationArn
        case destinationType
        case sourceArn
        case sourceType
        case sdkUnknown(Swift.String)

        public static var allCases: [SortAssociationsBy] {
            return [
                .creationTime,
                .destinationArn,
                .destinationType,
                .sourceArn,
                .sourceType
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .destinationArn: return "DestinationArn"
            case .destinationType: return "DestinationType"
            case .sourceArn: return "SourceArn"
            case .sourceType: return "SourceType"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListAssociationsInput {
    /// A filter that returns only associations of the specified type.
    public var associationType: SageMakerClientTypes.AssociationEdgeType?
    /// A filter that returns only associations created on or after the specified time.
    public var createdAfter: Foundation.Date?
    /// A filter that returns only associations created on or before the specified time.
    public var createdBefore: Foundation.Date?
    /// A filter that returns only associations with the specified destination Amazon Resource Name (ARN).
    public var destinationArn: Swift.String?
    /// A filter that returns only associations with the specified destination type.
    public var destinationType: Swift.String?
    /// The maximum number of associations to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// If the previous call to ListAssociations didn't return the full set of associations, the call returns a token for getting the next set of associations.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CreationTime.
    public var sortBy: SageMakerClientTypes.SortAssociationsBy?
    /// The sort order. The default value is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that returns only associations with the specified source ARN.
    public var sourceArn: Swift.String?
    /// A filter that returns only associations with the specified source type.
    public var sourceType: Swift.String?

    public init(
        associationType: SageMakerClientTypes.AssociationEdgeType? = nil,
        createdAfter: Foundation.Date? = nil,
        createdBefore: Foundation.Date? = nil,
        destinationArn: Swift.String? = nil,
        destinationType: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortAssociationsBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        sourceArn: Swift.String? = nil,
        sourceType: Swift.String? = nil
    )
    {
        self.associationType = associationType
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.destinationArn = destinationArn
        self.destinationType = destinationType
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.sourceArn = sourceArn
        self.sourceType = sourceType
    }
}

public struct ListAssociationsOutput {
    /// A list of associations and their properties.
    public var associationSummaries: [SageMakerClientTypes.AssociationSummary]?
    /// A token for getting the next set of associations, if there are any.
    public var nextToken: Swift.String?

    public init(
        associationSummaries: [SageMakerClientTypes.AssociationSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.associationSummaries = associationSummaries
        self.nextToken = nextToken
    }
}

public struct ListAutoMLJobsInput {
    /// Request a list of jobs, using a filter for time.
    public var creationTimeAfter: Foundation.Date?
    /// Request a list of jobs, using a filter for time.
    public var creationTimeBefore: Foundation.Date?
    /// Request a list of jobs, using a filter for time.
    public var lastModifiedTimeAfter: Foundation.Date?
    /// Request a list of jobs, using a filter for time.
    public var lastModifiedTimeBefore: Foundation.Date?
    /// Request a list of jobs up to a specified limit.
    public var maxResults: Swift.Int?
    /// Request a list of jobs, using a search filter for name.
    public var nameContains: Swift.String?
    /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// The parameter by which to sort the results. The default is Name.
    public var sortBy: SageMakerClientTypes.AutoMLSortBy?
    /// The sort order for the results. The default is Descending.
    public var sortOrder: SageMakerClientTypes.AutoMLSortOrder?
    /// Request a list of jobs, using a filter for status.
    public var statusEquals: SageMakerClientTypes.AutoMLJobStatus?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.AutoMLSortBy? = nil,
        sortOrder: SageMakerClientTypes.AutoMLSortOrder? = nil,
        statusEquals: SageMakerClientTypes.AutoMLJobStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

public struct ListAutoMLJobsOutput {
    /// Returns a summary list of jobs.
    /// This member is required.
    public var autoMLJobSummaries: [SageMakerClientTypes.AutoMLJobSummary]?
    /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?

    public init(
        autoMLJobSummaries: [SageMakerClientTypes.AutoMLJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoMLJobSummaries = autoMLJobSummaries
        self.nextToken = nextToken
    }
}

public struct ListCandidatesForAutoMLJobInput {
    /// List the candidates created for the job by providing the job's name.
    /// This member is required.
    public var autoMLJobName: Swift.String?
    /// List the candidates for the job and filter by candidate name.
    public var candidateNameEquals: Swift.String?
    /// List the job's candidates up to a specified limit.
    public var maxResults: Swift.Int?
    /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// The parameter by which to sort the results. The default is Descending.
    public var sortBy: SageMakerClientTypes.CandidateSortBy?
    /// The sort order for the results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.AutoMLSortOrder?
    /// List the candidates for the job and filter by status.
    public var statusEquals: SageMakerClientTypes.CandidateStatus?

    public init(
        autoMLJobName: Swift.String? = nil,
        candidateNameEquals: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.CandidateSortBy? = nil,
        sortOrder: SageMakerClientTypes.AutoMLSortOrder? = nil,
        statusEquals: SageMakerClientTypes.CandidateStatus? = nil
    )
    {
        self.autoMLJobName = autoMLJobName
        self.candidateNameEquals = candidateNameEquals
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

public struct ListCandidatesForAutoMLJobOutput {
    /// Summaries about the AutoMLCandidates.
    /// This member is required.
    public var candidates: [SageMakerClientTypes.AutoMLCandidate]?
    /// If the previous response was truncated, you receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?

    public init(
        candidates: [SageMakerClientTypes.AutoMLCandidate]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.candidates = candidates
        self.nextToken = nextToken
    }
}

public struct ListClusterNodesInput {
    /// The string name or the Amazon Resource Name (ARN) of the SageMaker HyperPod cluster in which you want to retrieve the list of nodes.
    /// This member is required.
    public var clusterName: Swift.String?
    /// A filter that returns nodes in a SageMaker HyperPod cluster created after the specified time. Timestamps are formatted according to the ISO 8601 standard. Acceptable formats include:
    ///
    /// * YYYY-MM-DDThh:mm:ss.sssTZD (UTC), for example, 2014-10-01T20:30:00.000Z
    ///
    /// * YYYY-MM-DDThh:mm:ss.sssTZD (with offset), for example, 2014-10-01T12:30:00.000-08:00
    ///
    /// * YYYY-MM-DD, for example, 2014-10-01
    ///
    /// * Unix time in seconds, for example, 1412195400. This is also referred to as Unix Epoch time and represents the number of seconds since midnight, January 1, 1970 UTC.
    ///
    ///
    /// For more information about the timestamp format, see [Timestamp](https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters-types.html#parameter-type-timestamp) in the Amazon Web Services Command Line Interface User Guide.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns nodes in a SageMaker HyperPod cluster created before the specified time. The acceptable formats are the same as the timestamp formats for CreationTimeAfter. For more information about the timestamp format, see [Timestamp](https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters-types.html#parameter-type-timestamp) in the Amazon Web Services Command Line Interface User Guide.
    public var creationTimeBefore: Foundation.Date?
    /// A filter that returns the instance groups whose name contain a specified string.
    public var instanceGroupNameContains: Swift.String?
    /// The maximum number of nodes to return in the response.
    public var maxResults: Swift.Int?
    /// If the result of the previous ListClusterNodes request was truncated, the response includes a NextToken. To retrieve the next set of cluster nodes, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field by which to sort results. The default value is CREATION_TIME.
    public var sortBy: SageMakerClientTypes.ClusterSortBy?
    /// The sort order for results. The default value is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        clusterName: Swift.String? = nil,
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        instanceGroupNameContains: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ClusterSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.clusterName = clusterName
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.instanceGroupNameContains = instanceGroupNameContains
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListClusterNodesOutput {
    /// The summaries of listed instances in a SageMaker HyperPod cluster
    /// This member is required.
    public var clusterNodeSummaries: [SageMakerClientTypes.ClusterNodeSummary]?
    /// The next token specified for listing instances in a SageMaker HyperPod cluster.
    /// This member is required.
    public var nextToken: Swift.String?

    public init(
        clusterNodeSummaries: [SageMakerClientTypes.ClusterNodeSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusterNodeSummaries = clusterNodeSummaries
        self.nextToken = nextToken
    }
}

public struct ListClustersInput {
    /// Set a start time for the time range during which you want to list SageMaker HyperPod clusters. Timestamps are formatted according to the ISO 8601 standard. Acceptable formats include:
    ///
    /// * YYYY-MM-DDThh:mm:ss.sssTZD (UTC), for example, 2014-10-01T20:30:00.000Z
    ///
    /// * YYYY-MM-DDThh:mm:ss.sssTZD (with offset), for example, 2014-10-01T12:30:00.000-08:00
    ///
    /// * YYYY-MM-DD, for example, 2014-10-01
    ///
    /// * Unix time in seconds, for example, 1412195400. This is also referred to as Unix Epoch time and represents the number of seconds since midnight, January 1, 1970 UTC.
    ///
    ///
    /// For more information about the timestamp format, see [Timestamp](https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters-types.html#parameter-type-timestamp) in the Amazon Web Services Command Line Interface User Guide.
    public var creationTimeAfter: Foundation.Date?
    /// Set an end time for the time range during which you want to list SageMaker HyperPod clusters. A filter that returns nodes in a SageMaker HyperPod cluster created before the specified time. The acceptable formats are the same as the timestamp formats for CreationTimeAfter. For more information about the timestamp format, see [Timestamp](https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-parameters-types.html#parameter-type-timestamp) in the Amazon Web Services Command Line Interface User Guide.
    public var creationTimeBefore: Foundation.Date?
    /// Set the maximum number of SageMaker HyperPod clusters to list.
    public var maxResults: Swift.Int?
    /// Set the maximum number of instances to print in the list.
    public var nameContains: Swift.String?
    /// Set the next token to retrieve the list of SageMaker HyperPod clusters.
    public var nextToken: Swift.String?
    /// The field by which to sort results. The default value is CREATION_TIME.
    public var sortBy: SageMakerClientTypes.ClusterSortBy?
    /// The sort order for results. The default value is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ClusterSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListClustersOutput {
    /// The summaries of listed SageMaker HyperPod clusters.
    /// This member is required.
    public var clusterSummaries: [SageMakerClientTypes.ClusterSummary]?
    /// If the result of the previous ListClusters request was truncated, the response includes a NextToken. To retrieve the next set of clusters, use the token in the next request.
    /// This member is required.
    public var nextToken: Swift.String?

    public init(
        clusterSummaries: [SageMakerClientTypes.ClusterSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.clusterSummaries = clusterSummaries
        self.nextToken = nextToken
    }
}

public struct ListCodeRepositoriesInput {
    /// A filter that returns only Git repositories that were created after the specified time.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only Git repositories that were created before the specified time.
    public var creationTimeBefore: Foundation.Date?
    /// A filter that returns only Git repositories that were last modified after the specified time.
    public var lastModifiedTimeAfter: Foundation.Date?
    /// A filter that returns only Git repositories that were last modified before the specified time.
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of Git repositories to return in the response.
    public var maxResults: Swift.Int?
    /// A string in the Git repositories name. This filter returns only repositories whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of a ListCodeRepositoriesOutput request was truncated, the response includes a NextToken. To get the next set of Git repositories, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is Name.
    public var sortBy: SageMakerClientTypes.CodeRepositorySortBy?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.CodeRepositorySortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.CodeRepositorySortBy? = nil,
        sortOrder: SageMakerClientTypes.CodeRepositorySortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListCodeRepositoriesOutput {
    /// Gets a list of summaries of the Git repositories. Each summary specifies the following values for the repository:
    ///
    /// * Name
    ///
    /// * Amazon Resource Name (ARN)
    ///
    /// * Creation time
    ///
    /// * Last modified time
    ///
    /// * Configuration information, including the URL location of the repository and the ARN of the Amazon Web Services Secrets Manager secret that contains the credentials used to access the repository.
    /// This member is required.
    public var codeRepositorySummaryList: [SageMakerClientTypes.CodeRepositorySummary]?
    /// If the result of a ListCodeRepositoriesOutput request was truncated, the response includes a NextToken. To get the next set of Git repositories, use the token in the next request.
    public var nextToken: Swift.String?

    public init(
        codeRepositorySummaryList: [SageMakerClientTypes.CodeRepositorySummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.codeRepositorySummaryList = codeRepositorySummaryList
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum ListCompilationJobsSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [ListCompilationJobsSortBy] {
            return [
                .creationTime,
                .name,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListCompilationJobsInput {
    /// A filter that returns the model compilation jobs that were created after a specified time.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns the model compilation jobs that were created before a specified time.
    public var creationTimeBefore: Foundation.Date?
    /// A filter that returns the model compilation jobs that were modified after a specified time.
    public var lastModifiedTimeAfter: Foundation.Date?
    /// A filter that returns the model compilation jobs that were modified before a specified time.
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of model compilation jobs to return in the response.
    public var maxResults: Swift.Int?
    /// A filter that returns the model compilation jobs whose name contains a specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListCompilationJobs request was truncated, the response includes a NextToken. To retrieve the next set of model compilation jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field by which to sort results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.ListCompilationJobsSortBy?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that retrieves model compilation jobs with a specific CompilationJobStatus status.
    public var statusEquals: SageMakerClientTypes.CompilationJobStatus?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ListCompilationJobsSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.CompilationJobStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

public struct ListCompilationJobsOutput {
    /// An array of [CompilationJobSummary](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CompilationJobSummary.html) objects, each describing a model compilation job.
    /// This member is required.
    public var compilationJobSummaries: [SageMakerClientTypes.CompilationJobSummary]?
    /// If the response is truncated, Amazon SageMaker returns this NextToken. To retrieve the next set of model compilation jobs, use this token in the next request.
    public var nextToken: Swift.String?

    public init(
        compilationJobSummaries: [SageMakerClientTypes.CompilationJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.compilationJobSummaries = compilationJobSummaries
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum SortContextsBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [SortContextsBy] {
            return [
                .creationTime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListContextsInput {
    /// A filter that returns only contexts of the specified type.
    public var contextType: Swift.String?
    /// A filter that returns only contexts created on or after the specified time.
    public var createdAfter: Foundation.Date?
    /// A filter that returns only contexts created on or before the specified time.
    public var createdBefore: Foundation.Date?
    /// The maximum number of contexts to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// If the previous call to ListContexts didn't return the full set of contexts, the call returns a token for getting the next set of contexts.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CreationTime.
    public var sortBy: SageMakerClientTypes.SortContextsBy?
    /// The sort order. The default value is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that returns only contexts with the specified source URI.
    public var sourceUri: Swift.String?

    public init(
        contextType: Swift.String? = nil,
        createdAfter: Foundation.Date? = nil,
        createdBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortContextsBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        sourceUri: Swift.String? = nil
    )
    {
        self.contextType = contextType
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.sourceUri = sourceUri
    }
}

public struct ListContextsOutput {
    /// A list of contexts and their properties.
    public var contextSummaries: [SageMakerClientTypes.ContextSummary]?
    /// A token for getting the next set of contexts, if there are any.
    public var nextToken: Swift.String?

    public init(
        contextSummaries: [SageMakerClientTypes.ContextSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.contextSummaries = contextSummaries
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum MonitoringJobDefinitionSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [MonitoringJobDefinitionSortKey] {
            return [
                .creationTime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListDataQualityJobDefinitionsInput {
    /// A filter that returns only data quality monitoring job definitions created after the specified time.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only data quality monitoring job definitions created before the specified time.
    public var creationTimeBefore: Foundation.Date?
    /// A filter that lists the data quality job definitions associated with the specified endpoint.
    public var endpointName: Swift.String?
    /// The maximum number of data quality monitoring job definitions to return in the response.
    public var maxResults: Swift.Int?
    /// A string in the data quality monitoring job definition name. This filter returns only data quality monitoring job definitions whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListDataQualityJobDefinitions request was truncated, the response includes a NextToken. To retrieve the next set of transform jobs, use the token in the next request.>
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey?
    /// Whether to sort the results in Ascending or Descending order. The default is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        endpointName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.endpointName = endpointName
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

extension SageMakerClientTypes {
    /// Summary information about a monitoring job.
    public struct MonitoringJobDefinitionSummary {
        /// The time that the monitoring job was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The name of the endpoint that the job monitors.
        /// This member is required.
        public var endpointName: Swift.String?
        /// The Amazon Resource Name (ARN) of the monitoring job.
        /// This member is required.
        public var monitoringJobDefinitionArn: Swift.String?
        /// The name of the monitoring job.
        /// This member is required.
        public var monitoringJobDefinitionName: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            endpointName: Swift.String? = nil,
            monitoringJobDefinitionArn: Swift.String? = nil,
            monitoringJobDefinitionName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.endpointName = endpointName
            self.monitoringJobDefinitionArn = monitoringJobDefinitionArn
            self.monitoringJobDefinitionName = monitoringJobDefinitionName
        }
    }

}

public struct ListDataQualityJobDefinitionsOutput {
    /// A list of data quality monitoring job definitions.
    /// This member is required.
    public var jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]?
    /// If the result of the previous ListDataQualityJobDefinitions request was truncated, the response includes a NextToken. To retrieve the next set of data quality monitoring job definitions, use the token in the next request.
    public var nextToken: Swift.String?

    public init(
        jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobDefinitionSummaries = jobDefinitionSummaries
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum ListDeviceFleetsSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationtime
        case lastmodifiedtime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ListDeviceFleetsSortBy] {
            return [
                .creationtime,
                .lastmodifiedtime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CREATION_TIME"
            case .lastmodifiedtime: return "LAST_MODIFIED_TIME"
            case .name: return "NAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListDeviceFleetsInput {
    /// Filter fleets where packaging job was created after specified time.
    public var creationTimeAfter: Foundation.Date?
    /// Filter fleets where the edge packaging job was created before specified time.
    public var creationTimeBefore: Foundation.Date?
    /// Select fleets where the job was updated after X
    public var lastModifiedTimeAfter: Foundation.Date?
    /// Select fleets where the job was updated before X
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of results to select.
    public var maxResults: Swift.Int?
    /// Filter for fleets containing this name in their fleet device name.
    public var nameContains: Swift.String?
    /// The response from the last list when returning a list large enough to need tokening.
    public var nextToken: Swift.String?
    /// The column to sort by.
    public var sortBy: SageMakerClientTypes.ListDeviceFleetsSortBy?
    /// What direction to sort in.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ListDeviceFleetsSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListDeviceFleetsOutput {
    /// Summary of the device fleet.
    /// This member is required.
    public var deviceFleetSummaries: [SageMakerClientTypes.DeviceFleetSummary]?
    /// The response from the last list when returning a list large enough to need tokening.
    public var nextToken: Swift.String?

    public init(
        deviceFleetSummaries: [SageMakerClientTypes.DeviceFleetSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deviceFleetSummaries = deviceFleetSummaries
        self.nextToken = nextToken
    }
}

public struct ListDevicesInput {
    /// Filter for fleets containing this name in their device fleet name.
    public var deviceFleetName: Swift.String?
    /// Select fleets where the job was updated after X
    public var latestHeartbeatAfter: Foundation.Date?
    /// Maximum number of results to select.
    public var maxResults: Swift.Int?
    /// A filter that searches devices that contains this name in any of their models.
    public var modelName: Swift.String?
    /// The response from the last list when returning a list large enough to need tokening.
    public var nextToken: Swift.String?

    public init(
        deviceFleetName: Swift.String? = nil,
        latestHeartbeatAfter: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        modelName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deviceFleetName = deviceFleetName
        self.latestHeartbeatAfter = latestHeartbeatAfter
        self.maxResults = maxResults
        self.modelName = modelName
        self.nextToken = nextToken
    }
}

public struct ListDevicesOutput {
    /// Summary of devices.
    /// This member is required.
    public var deviceSummaries: [SageMakerClientTypes.DeviceSummary]?
    /// The response from the last list when returning a list large enough to need tokening.
    public var nextToken: Swift.String?

    public init(
        deviceSummaries: [SageMakerClientTypes.DeviceSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deviceSummaries = deviceSummaries
        self.nextToken = nextToken
    }
}

public struct ListDomainsInput {
    /// This parameter defines the maximum number of results that can be return in a single response. The MaxResults parameter is an upper bound, not a target. If there are more results available than the value specified, a NextToken is provided in the response. The NextToken indicates that the user should get the next set of results by providing this token as a part of a subsequent call. The default value for MaxResults is 10.
    public var maxResults: Swift.Int?
    /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListDomainsOutput {
    /// The list of domains.
    public var domains: [SageMakerClientTypes.DomainDetails]?
    /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?

    public init(
        domains: [SageMakerClientTypes.DomainDetails]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.domains = domains
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum ListEdgeDeploymentPlansSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationtime
        case devicefleetname
        case lastmodifiedtime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ListEdgeDeploymentPlansSortBy] {
            return [
                .creationtime,
                .devicefleetname,
                .lastmodifiedtime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CREATION_TIME"
            case .devicefleetname: return "DEVICE_FLEET_NAME"
            case .lastmodifiedtime: return "LAST_MODIFIED_TIME"
            case .name: return "NAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListEdgeDeploymentPlansInput {
    /// Selects edge deployment plans created after this time.
    public var creationTimeAfter: Foundation.Date?
    /// Selects edge deployment plans created before this time.
    public var creationTimeBefore: Foundation.Date?
    /// Selects edge deployment plans with a device fleet name containing this name.
    public var deviceFleetNameContains: Swift.String?
    /// Selects edge deployment plans that were last updated after this time.
    public var lastModifiedTimeAfter: Foundation.Date?
    /// Selects edge deployment plans that were last updated before this time.
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of results to select (50 by default).
    public var maxResults: Swift.Int?
    /// Selects edge deployment plans with names containing this name.
    public var nameContains: Swift.String?
    /// The response from the last list when returning a list large enough to need tokening.
    public var nextToken: Swift.String?
    /// The column by which to sort the edge deployment plans. Can be one of NAME, DEVICEFLEETNAME, CREATIONTIME, LASTMODIFIEDTIME.
    public var sortBy: SageMakerClientTypes.ListEdgeDeploymentPlansSortBy?
    /// The direction of the sorting (ascending or descending).
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        deviceFleetNameContains: Swift.String? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ListEdgeDeploymentPlansSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.deviceFleetNameContains = deviceFleetNameContains
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListEdgeDeploymentPlansOutput {
    /// List of summaries of edge deployment plans.
    /// This member is required.
    public var edgeDeploymentPlanSummaries: [SageMakerClientTypes.EdgeDeploymentPlanSummary]?
    /// The token to use when calling the next page of results.
    public var nextToken: Swift.String?

    public init(
        edgeDeploymentPlanSummaries: [SageMakerClientTypes.EdgeDeploymentPlanSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.edgeDeploymentPlanSummaries = edgeDeploymentPlanSummaries
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum ListEdgePackagingJobsSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationtime
        case edgepackagingjobstatus
        case lastmodifiedtime
        case modelname
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ListEdgePackagingJobsSortBy] {
            return [
                .creationtime,
                .edgepackagingjobstatus,
                .lastmodifiedtime,
                .modelname,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CREATION_TIME"
            case .edgepackagingjobstatus: return "STATUS"
            case .lastmodifiedtime: return "LAST_MODIFIED_TIME"
            case .modelname: return "MODEL_NAME"
            case .name: return "NAME"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListEdgePackagingJobsInput {
    /// Select jobs where the job was created after specified time.
    public var creationTimeAfter: Foundation.Date?
    /// Select jobs where the job was created before specified time.
    public var creationTimeBefore: Foundation.Date?
    /// Select jobs where the job was updated after specified time.
    public var lastModifiedTimeAfter: Foundation.Date?
    /// Select jobs where the job was updated before specified time.
    public var lastModifiedTimeBefore: Foundation.Date?
    /// Maximum number of results to select.
    public var maxResults: Swift.Int?
    /// Filter for jobs where the model name contains this string.
    public var modelNameContains: Swift.String?
    /// Filter for jobs containing this name in their packaging job name.
    public var nameContains: Swift.String?
    /// The response from the last list when returning a list large enough to need tokening.
    public var nextToken: Swift.String?
    /// Use to specify what column to sort by.
    public var sortBy: SageMakerClientTypes.ListEdgePackagingJobsSortBy?
    /// What direction to sort by.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// The job status to filter for.
    public var statusEquals: SageMakerClientTypes.EdgePackagingJobStatus?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        modelNameContains: Swift.String? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ListEdgePackagingJobsSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.EdgePackagingJobStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.modelNameContains = modelNameContains
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

public struct ListEdgePackagingJobsOutput {
    /// Summaries of edge packaging jobs.
    /// This member is required.
    public var edgePackagingJobSummaries: [SageMakerClientTypes.EdgePackagingJobSummary]?
    /// Token to use when calling the next page of results.
    public var nextToken: Swift.String?

    public init(
        edgePackagingJobSummaries: [SageMakerClientTypes.EdgePackagingJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.edgePackagingJobSummaries = edgePackagingJobSummaries
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum OrderKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [OrderKey] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListEndpointConfigsInput {
    /// A filter that returns only endpoint configurations with a creation time greater than or equal to the specified time (timestamp).
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only endpoint configurations created before the specified time (timestamp).
    public var creationTimeBefore: Foundation.Date?
    /// The maximum number of training jobs to return in the response.
    public var maxResults: Swift.Int?
    /// A string in the endpoint configuration name. This filter returns only endpoint configurations whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListEndpointConfig request was truncated, the response includes a NextToken. To retrieve the next set of endpoint configurations, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.EndpointConfigSortKey?
    /// The sort order for results. The default is Descending.
    public var sortOrder: SageMakerClientTypes.OrderKey?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.EndpointConfigSortKey? = nil,
        sortOrder: SageMakerClientTypes.OrderKey? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListEndpointConfigsOutput {
    /// An array of endpoint configurations.
    /// This member is required.
    public var endpointConfigs: [SageMakerClientTypes.EndpointConfigSummary]?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of endpoint configurations, use it in the subsequent request
    public var nextToken: Swift.String?

    public init(
        endpointConfigs: [SageMakerClientTypes.EndpointConfigSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.endpointConfigs = endpointConfigs
        self.nextToken = nextToken
    }
}

public struct ListEndpointsInput {
    /// A filter that returns only endpoints with a creation time greater than or equal to the specified time (timestamp).
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only endpoints that were created before the specified time (timestamp).
    public var creationTimeBefore: Foundation.Date?
    /// A filter that returns only endpoints that were modified after the specified timestamp.
    public var lastModifiedTimeAfter: Foundation.Date?
    /// A filter that returns only endpoints that were modified before the specified timestamp.
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of endpoints to return in the response. This value defaults to 10.
    public var maxResults: Swift.Int?
    /// A string in endpoint names. This filter returns only endpoints whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of a ListEndpoints request was truncated, the response includes a NextToken. To retrieve the next set of endpoints, use the token in the next request.
    public var nextToken: Swift.String?
    /// Sorts the list of results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.EndpointSortKey?
    /// The sort order for results. The default is Descending.
    public var sortOrder: SageMakerClientTypes.OrderKey?
    /// A filter that returns only endpoints with the specified status.
    public var statusEquals: SageMakerClientTypes.EndpointStatus?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.EndpointSortKey? = nil,
        sortOrder: SageMakerClientTypes.OrderKey? = nil,
        statusEquals: SageMakerClientTypes.EndpointStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

public struct ListEndpointsOutput {
    /// An array or endpoint objects.
    /// This member is required.
    public var endpoints: [SageMakerClientTypes.EndpointSummary]?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of training jobs, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init(
        endpoints: [SageMakerClientTypes.EndpointSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.endpoints = endpoints
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum SortExperimentsBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [SortExperimentsBy] {
            return [
                .creationTime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListExperimentsInput {
    /// A filter that returns only experiments created after the specified time.
    public var createdAfter: Foundation.Date?
    /// A filter that returns only experiments created before the specified time.
    public var createdBefore: Foundation.Date?
    /// The maximum number of experiments to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// If the previous call to ListExperiments didn't return the full set of experiments, the call returns a token for getting the next set of experiments.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CreationTime.
    public var sortBy: SageMakerClientTypes.SortExperimentsBy?
    /// The sort order. The default value is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        createdAfter: Foundation.Date? = nil,
        createdBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortExperimentsBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListExperimentsOutput {
    /// A list of the summaries of your experiments.
    public var experimentSummaries: [SageMakerClientTypes.ExperimentSummary]?
    /// A token for getting the next set of experiments, if there are any.
    public var nextToken: Swift.String?

    public init(
        experimentSummaries: [SageMakerClientTypes.ExperimentSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.experimentSummaries = experimentSummaries
        self.nextToken = nextToken
    }
}

public struct ListFeatureGroupsInput {
    /// Use this parameter to search for FeatureGroupss created after a specific date and time.
    public var creationTimeAfter: Foundation.Date?
    /// Use this parameter to search for FeatureGroupss created before a specific date and time.
    public var creationTimeBefore: Foundation.Date?
    /// A FeatureGroup status. Filters by FeatureGroup status.
    public var featureGroupStatusEquals: SageMakerClientTypes.FeatureGroupStatus?
    /// The maximum number of results returned by ListFeatureGroups.
    public var maxResults: Swift.Int?
    /// A string that partially matches one or more FeatureGroups names. Filters FeatureGroups by name.
    public var nameContains: Swift.String?
    /// A token to resume pagination of ListFeatureGroups results.
    public var nextToken: Swift.String?
    /// An OfflineStore status. Filters by OfflineStore status.
    public var offlineStoreStatusEquals: SageMakerClientTypes.OfflineStoreStatusValue?
    /// The value on which the feature group list is sorted.
    public var sortBy: SageMakerClientTypes.FeatureGroupSortBy?
    /// The order in which feature groups are listed.
    public var sortOrder: SageMakerClientTypes.FeatureGroupSortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        featureGroupStatusEquals: SageMakerClientTypes.FeatureGroupStatus? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        offlineStoreStatusEquals: SageMakerClientTypes.OfflineStoreStatusValue? = nil,
        sortBy: SageMakerClientTypes.FeatureGroupSortBy? = nil,
        sortOrder: SageMakerClientTypes.FeatureGroupSortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.featureGroupStatusEquals = featureGroupStatusEquals
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.offlineStoreStatusEquals = offlineStoreStatusEquals
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListFeatureGroupsOutput {
    /// A summary of feature groups.
    /// This member is required.
    public var featureGroupSummaries: [SageMakerClientTypes.FeatureGroupSummary]?
    /// A token to resume pagination of ListFeatureGroups results.
    public var nextToken: Swift.String?

    public init(
        featureGroupSummaries: [SageMakerClientTypes.FeatureGroupSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.featureGroupSummaries = featureGroupSummaries
        self.nextToken = nextToken
    }
}

public struct ListFlowDefinitionsInput {
    /// A filter that returns only flow definitions with a creation time greater than or equal to the specified timestamp.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only flow definitions that were created before the specified timestamp.
    public var creationTimeBefore: Foundation.Date?
    /// The total number of items to return. If the total number of available items is more than the value specified in MaxResults, then a NextToken will be provided in the output that you can use to resume pagination.
    public var maxResults: Swift.Int?
    /// A token to resume pagination.
    public var nextToken: Swift.String?
    /// An optional value that specifies whether you want the results sorted in Ascending or Descending order.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortOrder = sortOrder
    }
}

public struct ListFlowDefinitionsOutput {
    /// An array of objects describing the flow definitions.
    /// This member is required.
    public var flowDefinitionSummaries: [SageMakerClientTypes.FlowDefinitionSummary]?
    /// A token to resume pagination.
    public var nextToken: Swift.String?

    public init(
        flowDefinitionSummaries: [SageMakerClientTypes.FlowDefinitionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.flowDefinitionSummaries = flowDefinitionSummaries
        self.nextToken = nextToken
    }
}

public struct ListHubContentsInput {
    /// Only list hub content that was created after the time specified.
    public var creationTimeAfter: Foundation.Date?
    /// Only list hub content that was created before the time specified.
    public var creationTimeBefore: Foundation.Date?
    /// The type of hub content to list.
    /// This member is required.
    public var hubContentType: SageMakerClientTypes.HubContentType?
    /// The name of the hub to list the contents of.
    /// This member is required.
    public var hubName: Swift.String?
    /// The maximum amount of hub content to list.
    public var maxResults: Swift.Int?
    /// The upper bound of the hub content schema verion.
    public var maxSchemaVersion: Swift.String?
    /// Only list hub content if the name contains the specified string.
    public var nameContains: Swift.String?
    /// If the response to a previous ListHubContents request was truncated, the response includes a NextToken. To retrieve the next set of hub content, use the token in the next request.
    public var nextToken: Swift.String?
    /// Sort hub content versions by either name or creation time.
    public var sortBy: SageMakerClientTypes.HubContentSortBy?
    /// Sort hubs by ascending or descending order.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        hubContentType: SageMakerClientTypes.HubContentType? = nil,
        hubName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        maxSchemaVersion: Swift.String? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.HubContentSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.hubContentType = hubContentType
        self.hubName = hubName
        self.maxResults = maxResults
        self.maxSchemaVersion = maxSchemaVersion
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListHubContentsOutput {
    /// The summaries of the listed hub content.
    /// This member is required.
    public var hubContentSummaries: [SageMakerClientTypes.HubContentInfo]?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of hub content, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init(
        hubContentSummaries: [SageMakerClientTypes.HubContentInfo]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.hubContentSummaries = hubContentSummaries
        self.nextToken = nextToken
    }
}

public struct ListHubContentVersionsInput {
    /// Only list hub content versions that were created after the time specified.
    public var creationTimeAfter: Foundation.Date?
    /// Only list hub content versions that were created before the time specified.
    public var creationTimeBefore: Foundation.Date?
    /// The name of the hub content.
    /// This member is required.
    public var hubContentName: Swift.String?
    /// The type of hub content to list versions of.
    /// This member is required.
    public var hubContentType: SageMakerClientTypes.HubContentType?
    /// The name of the hub to list the content versions of.
    /// This member is required.
    public var hubName: Swift.String?
    /// The maximum number of hub content versions to list.
    public var maxResults: Swift.Int?
    /// The upper bound of the hub content schema version.
    public var maxSchemaVersion: Swift.String?
    /// The lower bound of the hub content versions to list.
    public var minVersion: Swift.String?
    /// If the response to a previous ListHubContentVersions request was truncated, the response includes a NextToken. To retrieve the next set of hub content versions, use the token in the next request.
    public var nextToken: Swift.String?
    /// Sort hub content versions by either name or creation time.
    public var sortBy: SageMakerClientTypes.HubContentSortBy?
    /// Sort hub content versions by ascending or descending order.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        hubContentName: Swift.String? = nil,
        hubContentType: SageMakerClientTypes.HubContentType? = nil,
        hubName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        maxSchemaVersion: Swift.String? = nil,
        minVersion: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.HubContentSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.hubContentName = hubContentName
        self.hubContentType = hubContentType
        self.hubName = hubName
        self.maxResults = maxResults
        self.maxSchemaVersion = maxSchemaVersion
        self.minVersion = minVersion
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListHubContentVersionsOutput {
    /// The summaries of the listed hub content versions.
    /// This member is required.
    public var hubContentSummaries: [SageMakerClientTypes.HubContentInfo]?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of hub content versions, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init(
        hubContentSummaries: [SageMakerClientTypes.HubContentInfo]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.hubContentSummaries = hubContentSummaries
        self.nextToken = nextToken
    }
}

public struct ListHubsInput {
    /// Only list hubs that were created after the time specified.
    public var creationTimeAfter: Foundation.Date?
    /// Only list hubs that were created before the time specified.
    public var creationTimeBefore: Foundation.Date?
    /// Only list hubs that were last modified after the time specified.
    public var lastModifiedTimeAfter: Foundation.Date?
    /// Only list hubs that were last modified before the time specified.
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of hubs to list.
    public var maxResults: Swift.Int?
    /// Only list hubs with names that contain the specified string.
    public var nameContains: Swift.String?
    /// If the response to a previous ListHubs request was truncated, the response includes a NextToken. To retrieve the next set of hubs, use the token in the next request.
    public var nextToken: Swift.String?
    /// Sort hubs by either name or creation time.
    public var sortBy: SageMakerClientTypes.HubSortBy?
    /// Sort hubs by ascending or descending order.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.HubSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListHubsOutput {
    /// The summaries of the listed hubs.
    /// This member is required.
    public var hubSummaries: [SageMakerClientTypes.HubInfo]?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of hubs, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init(
        hubSummaries: [SageMakerClientTypes.HubInfo]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.hubSummaries = hubSummaries
        self.nextToken = nextToken
    }
}

public struct ListHumanTaskUisInput {
    /// A filter that returns only human task user interfaces with a creation time greater than or equal to the specified timestamp.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only human task user interfaces that were created before the specified timestamp.
    public var creationTimeBefore: Foundation.Date?
    /// The total number of items to return. If the total number of available items is more than the value specified in MaxResults, then a NextToken will be provided in the output that you can use to resume pagination.
    public var maxResults: Swift.Int?
    /// A token to resume pagination.
    public var nextToken: Swift.String?
    /// An optional value that specifies whether you want the results sorted in Ascending or Descending order.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortOrder = sortOrder
    }
}

public struct ListHumanTaskUisOutput {
    /// An array of objects describing the human task user interfaces.
    /// This member is required.
    public var humanTaskUiSummaries: [SageMakerClientTypes.HumanTaskUiSummary]?
    /// A token to resume pagination.
    public var nextToken: Swift.String?

    public init(
        humanTaskUiSummaries: [SageMakerClientTypes.HumanTaskUiSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.humanTaskUiSummaries = humanTaskUiSummaries
        self.nextToken = nextToken
    }
}

public struct ListHyperParameterTuningJobsInput {
    /// A filter that returns only tuning jobs that were created after the specified time.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only tuning jobs that were created before the specified time.
    public var creationTimeBefore: Foundation.Date?
    /// A filter that returns only tuning jobs that were modified after the specified time.
    public var lastModifiedTimeAfter: Foundation.Date?
    /// A filter that returns only tuning jobs that were modified before the specified time.
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of tuning jobs to return. The default value is 10.
    public var maxResults: Swift.Int?
    /// A string in the tuning job name. This filter returns only tuning jobs whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListHyperParameterTuningJobs request was truncated, the response includes a NextToken. To retrieve the next set of tuning jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is Name.
    public var sortBy: SageMakerClientTypes.HyperParameterTuningJobSortByOptions?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that returns only tuning jobs with the specified status.
    public var statusEquals: SageMakerClientTypes.HyperParameterTuningJobStatus?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.HyperParameterTuningJobSortByOptions? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.HyperParameterTuningJobStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

public struct ListHyperParameterTuningJobsOutput {
    /// A list of [HyperParameterTuningJobSummary](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_HyperParameterTuningJobSummary.html) objects that describe the tuning jobs that the ListHyperParameterTuningJobs request returned.
    /// This member is required.
    public var hyperParameterTuningJobSummaries: [SageMakerClientTypes.HyperParameterTuningJobSummary]?
    /// If the result of this ListHyperParameterTuningJobs request was truncated, the response includes a NextToken. To retrieve the next set of tuning jobs, use the token in the next request.
    public var nextToken: Swift.String?

    public init(
        hyperParameterTuningJobSummaries: [SageMakerClientTypes.HyperParameterTuningJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.hyperParameterTuningJobSummaries = hyperParameterTuningJobSummaries
        self.nextToken = nextToken
    }
}

public struct ListImagesInput {
    /// A filter that returns only images created on or after the specified time.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only images created on or before the specified time.
    public var creationTimeBefore: Foundation.Date?
    /// A filter that returns only images modified on or after the specified time.
    public var lastModifiedTimeAfter: Foundation.Date?
    /// A filter that returns only images modified on or before the specified time.
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of images to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// A filter that returns only images whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the previous call to ListImages didn't return the full set of images, the call returns a token for getting the next set of images.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CREATION_TIME.
    public var sortBy: SageMakerClientTypes.ImageSortBy?
    /// The sort order. The default value is DESCENDING.
    public var sortOrder: SageMakerClientTypes.ImageSortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ImageSortBy? = nil,
        sortOrder: SageMakerClientTypes.ImageSortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListImagesOutput {
    /// A list of images and their properties.
    public var images: [SageMakerClientTypes.Image]?
    /// A token for getting the next set of images, if there are any.
    public var nextToken: Swift.String?

    public init(
        images: [SageMakerClientTypes.Image]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.images = images
        self.nextToken = nextToken
    }
}

public struct ListImageVersionsInput {
    /// A filter that returns only versions created on or after the specified time.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only versions created on or before the specified time.
    public var creationTimeBefore: Foundation.Date?
    /// The name of the image to list the versions of.
    /// This member is required.
    public var imageName: Swift.String?
    /// A filter that returns only versions modified on or after the specified time.
    public var lastModifiedTimeAfter: Foundation.Date?
    /// A filter that returns only versions modified on or before the specified time.
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of versions to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// If the previous call to ListImageVersions didn't return the full set of versions, the call returns a token for getting the next set of versions.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CREATION_TIME.
    public var sortBy: SageMakerClientTypes.ImageVersionSortBy?
    /// The sort order. The default value is DESCENDING.
    public var sortOrder: SageMakerClientTypes.ImageVersionSortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        imageName: Swift.String? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ImageVersionSortBy? = nil,
        sortOrder: SageMakerClientTypes.ImageVersionSortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.imageName = imageName
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListImageVersionsOutput {
    /// A list of versions and their properties.
    public var imageVersions: [SageMakerClientTypes.ImageVersion]?
    /// A token for getting the next set of versions, if there are any.
    public var nextToken: Swift.String?

    public init(
        imageVersions: [SageMakerClientTypes.ImageVersion]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.imageVersions = imageVersions
        self.nextToken = nextToken
    }
}

public struct ListInferenceComponentsInput {
    /// Filters the results to only those inference components that were created after the specified time.
    public var creationTimeAfter: Foundation.Date?
    /// Filters the results to only those inference components that were created before the specified time.
    public var creationTimeBefore: Foundation.Date?
    /// An endpoint name to filter the listed inference components. The response includes only those inference components that are hosted at the specified endpoint.
    public var endpointNameEquals: Swift.String?
    /// Filters the results to only those inference components that were updated after the specified time.
    public var lastModifiedTimeAfter: Foundation.Date?
    /// Filters the results to only those inference components that were updated before the specified time.
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of inference components to return in the response. This value defaults to 10.
    public var maxResults: Swift.Int?
    /// Filters the results to only those inference components with a name that contains the specified string.
    public var nameContains: Swift.String?
    /// A token that you use to get the next set of results following a truncated response. If the response to the previous request was truncated, that response provides the value for this token.
    public var nextToken: Swift.String?
    /// The field by which to sort the inference components in the response. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.InferenceComponentSortKey?
    /// The sort order for results. The default is Descending.
    public var sortOrder: SageMakerClientTypes.OrderKey?
    /// Filters the results to only those inference components with the specified status.
    public var statusEquals: SageMakerClientTypes.InferenceComponentStatus?
    /// A production variant name to filter the listed inference components. The response includes only those inference components that are hosted at the specified variant.
    public var variantNameEquals: Swift.String?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        endpointNameEquals: Swift.String? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.InferenceComponentSortKey? = nil,
        sortOrder: SageMakerClientTypes.OrderKey? = nil,
        statusEquals: SageMakerClientTypes.InferenceComponentStatus? = nil,
        variantNameEquals: Swift.String? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.endpointNameEquals = endpointNameEquals
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
        self.variantNameEquals = variantNameEquals
    }
}

public struct ListInferenceComponentsOutput {
    /// A list of inference components and their properties that matches any of the filters you specified in the request.
    /// This member is required.
    public var inferenceComponents: [SageMakerClientTypes.InferenceComponentSummary]?
    /// The token to use in a subsequent request to get the next set of results following a truncated response.
    public var nextToken: Swift.String?

    public init(
        inferenceComponents: [SageMakerClientTypes.InferenceComponentSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inferenceComponents = inferenceComponents
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum SortInferenceExperimentsBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [SortInferenceExperimentsBy] {
            return [
                .creationTime,
                .name,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListInferenceExperimentsInput {
    /// Selects inference experiments which were created after this timestamp.
    public var creationTimeAfter: Foundation.Date?
    /// Selects inference experiments which were created before this timestamp.
    public var creationTimeBefore: Foundation.Date?
    /// Selects inference experiments which were last modified after this timestamp.
    public var lastModifiedTimeAfter: Foundation.Date?
    /// Selects inference experiments which were last modified before this timestamp.
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of results to select.
    public var maxResults: Swift.Int?
    /// Selects inference experiments whose names contain this name.
    public var nameContains: Swift.String?
    /// The response from the last list when returning a list large enough to need tokening.
    public var nextToken: Swift.String?
    /// The column by which to sort the listed inference experiments.
    public var sortBy: SageMakerClientTypes.SortInferenceExperimentsBy?
    /// The direction of sorting (ascending or descending).
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// Selects inference experiments which are in this status. For the possible statuses, see [DescribeInferenceExperiment](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeInferenceExperiment.html).
    public var statusEquals: SageMakerClientTypes.InferenceExperimentStatus?
    /// Selects inference experiments of this type. For the possible types of inference experiments, see [CreateInferenceExperiment](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateInferenceExperiment.html).
    public var type: SageMakerClientTypes.InferenceExperimentType?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortInferenceExperimentsBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.InferenceExperimentStatus? = nil,
        type: SageMakerClientTypes.InferenceExperimentType? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
        self.type = type
    }
}

public struct ListInferenceExperimentsOutput {
    /// List of inference experiments.
    public var inferenceExperiments: [SageMakerClientTypes.InferenceExperimentSummary]?
    /// The token to use when calling the next page of results.
    public var nextToken: Swift.String?

    public init(
        inferenceExperiments: [SageMakerClientTypes.InferenceExperimentSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inferenceExperiments = inferenceExperiments
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum ListInferenceRecommendationsJobsSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [ListInferenceRecommendationsJobsSortBy] {
            return [
                .creationTime,
                .name,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListInferenceRecommendationsJobsInput {
    /// A filter that returns only jobs created after the specified time (timestamp).
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only jobs created before the specified time (timestamp).
    public var creationTimeBefore: Foundation.Date?
    /// A filter that returns only jobs that were last modified after the specified time (timestamp).
    public var lastModifiedTimeAfter: Foundation.Date?
    /// A filter that returns only jobs that were last modified before the specified time (timestamp).
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of recommendations to return in the response.
    public var maxResults: Swift.Int?
    /// A filter that returns only jobs that were created for this model.
    public var modelNameEquals: Swift.String?
    /// A filter that returns only jobs that were created for this versioned model package.
    public var modelPackageVersionArnEquals: Swift.String?
    /// A string in the job name. This filter returns only recommendations whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the response to a previous ListInferenceRecommendationsJobsRequest request was truncated, the response includes a NextToken. To retrieve the next set of recommendations, use the token in the next request.
    public var nextToken: Swift.String?
    /// The parameter by which to sort the results.
    public var sortBy: SageMakerClientTypes.ListInferenceRecommendationsJobsSortBy?
    /// The sort order for the results.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that retrieves only inference recommendations jobs with a specific status.
    public var statusEquals: SageMakerClientTypes.RecommendationJobStatus?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        modelNameEquals: Swift.String? = nil,
        modelPackageVersionArnEquals: Swift.String? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ListInferenceRecommendationsJobsSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.RecommendationJobStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.modelNameEquals = modelNameEquals
        self.modelPackageVersionArnEquals = modelPackageVersionArnEquals
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

public struct ListInferenceRecommendationsJobsOutput {
    /// The recommendations created from the Amazon SageMaker Inference Recommender job.
    /// This member is required.
    public var inferenceRecommendationsJobs: [SageMakerClientTypes.InferenceRecommendationsJob]?
    /// A token for getting the next set of recommendations, if there are any.
    public var nextToken: Swift.String?

    public init(
        inferenceRecommendationsJobs: [SageMakerClientTypes.InferenceRecommendationsJob]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.inferenceRecommendationsJobs = inferenceRecommendationsJobs
        self.nextToken = nextToken
    }
}

public struct ListInferenceRecommendationsJobStepsInput {
    /// The name for the Inference Recommender job.
    /// This member is required.
    public var jobName: Swift.String?
    /// The maximum number of results to return.
    public var maxResults: Swift.Int?
    /// A token that you can specify to return more results from the list. Specify this field if you have a token that was returned from a previous request.
    public var nextToken: Swift.String?
    /// A filter to return benchmarks of a specified status. If this field is left empty, then all benchmarks are returned.
    public var status: SageMakerClientTypes.RecommendationJobStatus?
    /// A filter to return details about the specified type of subtask. BENCHMARK: Evaluate the performance of your model on different instance types.
    public var stepType: SageMakerClientTypes.RecommendationStepType?

    public init(
        jobName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: SageMakerClientTypes.RecommendationJobStatus? = nil,
        stepType: SageMakerClientTypes.RecommendationStepType? = nil
    )
    {
        self.jobName = jobName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
        self.stepType = stepType
    }
}

public struct ListInferenceRecommendationsJobStepsOutput {
    /// A token that you can specify in your next request to return more results from the list.
    public var nextToken: Swift.String?
    /// A list of all subtask details in Inference Recommender.
    public var steps: [SageMakerClientTypes.InferenceRecommendationsJobStep]?

    public init(
        nextToken: Swift.String? = nil,
        steps: [SageMakerClientTypes.InferenceRecommendationsJobStep]? = nil
    )
    {
        self.nextToken = nextToken
        self.steps = steps
    }
}

extension SageMakerClientTypes {

    public enum SortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [SortBy] {
            return [
                .creationTime,
                .name,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListLabelingJobsInput {
    /// A filter that returns only labeling jobs created after the specified time (timestamp).
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only labeling jobs created before the specified time (timestamp).
    public var creationTimeBefore: Foundation.Date?
    /// A filter that returns only labeling jobs modified after the specified time (timestamp).
    public var lastModifiedTimeAfter: Foundation.Date?
    /// A filter that returns only labeling jobs modified before the specified time (timestamp).
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of labeling jobs to return in each page of the response.
    public var maxResults: Swift.Int?
    /// A string in the labeling job name. This filter returns only labeling jobs whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListLabelingJobs request was truncated, the response includes a NextToken. To retrieve the next set of labeling jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.SortBy?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that retrieves only labeling jobs with a specific status.
    public var statusEquals: SageMakerClientTypes.LabelingJobStatus?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.LabelingJobStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

public struct ListLabelingJobsOutput {
    /// An array of LabelingJobSummary objects, each describing a labeling job.
    public var labelingJobSummaryList: [SageMakerClientTypes.LabelingJobSummary]?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of labeling jobs, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init(
        labelingJobSummaryList: [SageMakerClientTypes.LabelingJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.labelingJobSummaryList = labelingJobSummaryList
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum ListLabelingJobsForWorkteamSortByOptions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case sdkUnknown(Swift.String)

        public static var allCases: [ListLabelingJobsForWorkteamSortByOptions] {
            return [
                .creationTime
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListLabelingJobsForWorkteamInput {
    /// A filter that returns only labeling jobs created after the specified time (timestamp).
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only labeling jobs created before the specified time (timestamp).
    public var creationTimeBefore: Foundation.Date?
    /// A filter the limits jobs to only the ones whose job reference code contains the specified string.
    public var jobReferenceCodeContains: Swift.String?
    /// The maximum number of labeling jobs to return in each page of the response.
    public var maxResults: Swift.Int?
    /// If the result of the previous ListLabelingJobsForWorkteam request was truncated, the response includes a NextToken. To retrieve the next set of labeling jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.ListLabelingJobsForWorkteamSortByOptions?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// The Amazon Resource Name (ARN) of the work team for which you want to see labeling jobs for.
    /// This member is required.
    public var workteamArn: Swift.String?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        jobReferenceCodeContains: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ListLabelingJobsForWorkteamSortByOptions? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        workteamArn: Swift.String? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.jobReferenceCodeContains = jobReferenceCodeContains
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.workteamArn = workteamArn
    }
}

public struct ListLabelingJobsForWorkteamOutput {
    /// An array of LabelingJobSummary objects, each describing a labeling job.
    /// This member is required.
    public var labelingJobSummaryList: [SageMakerClientTypes.LabelingJobForWorkteamSummary]?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of labeling jobs, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init(
        labelingJobSummaryList: [SageMakerClientTypes.LabelingJobForWorkteamSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.labelingJobSummaryList = labelingJobSummaryList
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum SortLineageGroupsBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [SortLineageGroupsBy] {
            return [
                .creationTime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListLineageGroupsInput {
    /// A timestamp to filter against lineage groups created after a certain point in time.
    public var createdAfter: Foundation.Date?
    /// A timestamp to filter against lineage groups created before a certain point in time.
    public var createdBefore: Foundation.Date?
    /// The maximum number of endpoints to return in the response. This value defaults to 10.
    public var maxResults: Swift.Int?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of algorithms, use it in the subsequent request.
    public var nextToken: Swift.String?
    /// The parameter by which to sort the results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.SortLineageGroupsBy?
    /// The sort order for the results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        createdAfter: Foundation.Date? = nil,
        createdBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortLineageGroupsBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListLineageGroupsOutput {
    /// A list of lineage groups and their properties.
    public var lineageGroupSummaries: [SageMakerClientTypes.LineageGroupSummary]?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of algorithms, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init(
        lineageGroupSummaries: [SageMakerClientTypes.LineageGroupSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.lineageGroupSummaries = lineageGroupSummaries
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum SortTrackingServerBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [SortTrackingServerBy] {
            return [
                .creationTime,
                .name,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListMlflowTrackingServersInput {
    /// Use the CreatedAfter filter to only list tracking servers created after a specific date and time. Listed tracking servers are shown with a date and time such as "2024-03-16T01:46:56+00:00". The CreatedAfter parameter takes in a Unix timestamp. To convert a date and time into a Unix timestamp, see [EpochConverter](https://www.epochconverter.com/).
    public var createdAfter: Foundation.Date?
    /// Use the CreatedBefore filter to only list tracking servers created before a specific date and time. Listed tracking servers are shown with a date and time such as "2024-03-16T01:46:56+00:00". The CreatedBefore parameter takes in a Unix timestamp. To convert a date and time into a Unix timestamp, see [EpochConverter](https://www.epochconverter.com/).
    public var createdBefore: Foundation.Date?
    /// The maximum number of tracking servers to list.
    public var maxResults: Swift.Int?
    /// Filter for tracking servers using the specified MLflow version.
    public var mlflowVersion: Swift.String?
    /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// Filter for trackings servers sorting by name, creation time, or creation status.
    public var sortBy: SageMakerClientTypes.SortTrackingServerBy?
    /// Change the order of the listed tracking servers. By default, tracking servers are listed in Descending order by creation time. To change the list order, you can specify SortOrder to be Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// Filter for tracking servers with a specified creation status.
    public var trackingServerStatus: SageMakerClientTypes.TrackingServerStatus?

    public init(
        createdAfter: Foundation.Date? = nil,
        createdBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        mlflowVersion: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortTrackingServerBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        trackingServerStatus: SageMakerClientTypes.TrackingServerStatus? = nil
    )
    {
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.maxResults = maxResults
        self.mlflowVersion = mlflowVersion
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.trackingServerStatus = trackingServerStatus
    }
}

extension SageMakerClientTypes {
    /// The summary of the tracking server to list.
    public struct TrackingServerSummary {
        /// The creation time of a listed tracking server.
        public var creationTime: Foundation.Date?
        /// The activity status of a listed tracking server.
        public var isActive: SageMakerClientTypes.IsTrackingServerActive?
        /// The last modified time of a listed tracking server.
        public var lastModifiedTime: Foundation.Date?
        /// The MLflow version used for a listed tracking server.
        public var mlflowVersion: Swift.String?
        /// The ARN of a listed tracking server.
        public var trackingServerArn: Swift.String?
        /// The name of a listed tracking server.
        public var trackingServerName: Swift.String?
        /// The creation status of a listed tracking server.
        public var trackingServerStatus: SageMakerClientTypes.TrackingServerStatus?

        public init(
            creationTime: Foundation.Date? = nil,
            isActive: SageMakerClientTypes.IsTrackingServerActive? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            mlflowVersion: Swift.String? = nil,
            trackingServerArn: Swift.String? = nil,
            trackingServerName: Swift.String? = nil,
            trackingServerStatus: SageMakerClientTypes.TrackingServerStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.isActive = isActive
            self.lastModifiedTime = lastModifiedTime
            self.mlflowVersion = mlflowVersion
            self.trackingServerArn = trackingServerArn
            self.trackingServerName = trackingServerName
            self.trackingServerStatus = trackingServerStatus
        }
    }

}

public struct ListMlflowTrackingServersOutput {
    /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// A list of tracking servers according to chosen filters.
    public var trackingServerSummaries: [SageMakerClientTypes.TrackingServerSummary]?

    public init(
        nextToken: Swift.String? = nil,
        trackingServerSummaries: [SageMakerClientTypes.TrackingServerSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.trackingServerSummaries = trackingServerSummaries
    }
}

public struct ListModelBiasJobDefinitionsInput {
    /// A filter that returns only model bias jobs created after a specified time.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only model bias jobs created before a specified time.
    public var creationTimeBefore: Foundation.Date?
    /// Name of the endpoint to monitor for model bias.
    public var endpointName: Swift.String?
    /// The maximum number of model bias jobs to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// Filter for model bias jobs whose name contains a specified string.
    public var nameContains: Swift.String?
    /// The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.
    public var nextToken: Swift.String?
    /// Whether to sort results by the Name or CreationTime field. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey?
    /// Whether to sort the results in Ascending or Descending order. The default is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        endpointName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.endpointName = endpointName
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListModelBiasJobDefinitionsOutput {
    /// A JSON array in which each element is a summary for a model bias jobs.
    /// This member is required.
    public var jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]?
    /// The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.
    public var nextToken: Swift.String?

    public init(
        jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobDefinitionSummaries = jobDefinitionSummaries
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    /// Attribute by which to sort returned export jobs.
    public enum ModelCardExportJobSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelCardExportJobSortBy] {
            return [
                .creationTime,
                .name,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum ModelCardExportJobSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelCardExportJobSortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListModelCardExportJobsInput {
    /// Only list model card export jobs that were created after the time specified.
    public var creationTimeAfter: Foundation.Date?
    /// Only list model card export jobs that were created before the time specified.
    public var creationTimeBefore: Foundation.Date?
    /// The maximum number of model card export jobs to list.
    public var maxResults: Swift.Int?
    /// Only list model card export jobs with names that contain the specified string.
    public var modelCardExportJobNameContains: Swift.String?
    /// List export jobs for the model card with the specified name.
    /// This member is required.
    public var modelCardName: Swift.String?
    /// List export jobs for the model card with the specified version.
    public var modelCardVersion: Swift.Int?
    /// If the response to a previous ListModelCardExportJobs request was truncated, the response includes a NextToken. To retrieve the next set of model card export jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// Sort model card export jobs by either name or creation time. Sorts by creation time by default.
    public var sortBy: SageMakerClientTypes.ModelCardExportJobSortBy?
    /// Sort model card export jobs by ascending or descending order.
    public var sortOrder: SageMakerClientTypes.ModelCardExportJobSortOrder?
    /// Only list model card export jobs with the specified status.
    public var statusEquals: SageMakerClientTypes.ModelCardExportJobStatus?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        modelCardExportJobNameContains: Swift.String? = nil,
        modelCardName: Swift.String? = nil,
        modelCardVersion: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ModelCardExportJobSortBy? = nil,
        sortOrder: SageMakerClientTypes.ModelCardExportJobSortOrder? = nil,
        statusEquals: SageMakerClientTypes.ModelCardExportJobStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.modelCardExportJobNameContains = modelCardExportJobNameContains
        self.modelCardName = modelCardName
        self.modelCardVersion = modelCardVersion
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

extension SageMakerClientTypes {
    /// The summary of the Amazon SageMaker Model Card export job.
    public struct ModelCardExportJobSummary {
        /// The date and time that the model card export job was created.
        /// This member is required.
        public var createdAt: Foundation.Date?
        /// The date and time that the model card export job was last modified..
        /// This member is required.
        public var lastModifiedAt: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the model card export job.
        /// This member is required.
        public var modelCardExportJobArn: Swift.String?
        /// The name of the model card export job.
        /// This member is required.
        public var modelCardExportJobName: Swift.String?
        /// The name of the model card that the export job exports.
        /// This member is required.
        public var modelCardName: Swift.String?
        /// The version of the model card that the export job exports.
        /// This member is required.
        public var modelCardVersion: Swift.Int?
        /// The completion status of the model card export job.
        /// This member is required.
        public var status: SageMakerClientTypes.ModelCardExportJobStatus?

        public init(
            createdAt: Foundation.Date? = nil,
            lastModifiedAt: Foundation.Date? = nil,
            modelCardExportJobArn: Swift.String? = nil,
            modelCardExportJobName: Swift.String? = nil,
            modelCardName: Swift.String? = nil,
            modelCardVersion: Swift.Int? = nil,
            status: SageMakerClientTypes.ModelCardExportJobStatus? = nil
        )
        {
            self.createdAt = createdAt
            self.lastModifiedAt = lastModifiedAt
            self.modelCardExportJobArn = modelCardExportJobArn
            self.modelCardExportJobName = modelCardExportJobName
            self.modelCardName = modelCardName
            self.modelCardVersion = modelCardVersion
            self.status = status
        }
    }

}

public struct ListModelCardExportJobsOutput {
    /// The summaries of the listed model card export jobs.
    /// This member is required.
    public var modelCardExportJobSummaries: [SageMakerClientTypes.ModelCardExportJobSummary]?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of model card export jobs, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init(
        modelCardExportJobSummaries: [SageMakerClientTypes.ModelCardExportJobSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.modelCardExportJobSummaries = modelCardExportJobSummaries
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum ModelCardSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelCardSortBy] {
            return [
                .creationTime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum ModelCardSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelCardSortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListModelCardsInput {
    /// Only list model cards that were created after the time specified.
    public var creationTimeAfter: Foundation.Date?
    /// Only list model cards that were created before the time specified.
    public var creationTimeBefore: Foundation.Date?
    /// The maximum number of model cards to list.
    public var maxResults: Swift.Int?
    /// Only list model cards with the specified approval status.
    public var modelCardStatus: SageMakerClientTypes.ModelCardStatus?
    /// Only list model cards with names that contain the specified string.
    public var nameContains: Swift.String?
    /// If the response to a previous ListModelCards request was truncated, the response includes a NextToken. To retrieve the next set of model cards, use the token in the next request.
    public var nextToken: Swift.String?
    /// Sort model cards by either name or creation time. Sorts by creation time by default.
    public var sortBy: SageMakerClientTypes.ModelCardSortBy?
    /// Sort model cards by ascending or descending order.
    public var sortOrder: SageMakerClientTypes.ModelCardSortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        modelCardStatus: SageMakerClientTypes.ModelCardStatus? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ModelCardSortBy? = nil,
        sortOrder: SageMakerClientTypes.ModelCardSortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.modelCardStatus = modelCardStatus
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

extension SageMakerClientTypes {
    /// A summary of the model card.
    public struct ModelCardSummary {
        /// The date and time that the model card was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The date and time that the model card was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the model card.
        /// This member is required.
        public var modelCardArn: Swift.String?
        /// The name of the model card.
        /// This member is required.
        public var modelCardName: Swift.String?
        /// The approval status of the model card within your organization. Different organizations might have different criteria for model card review and approval.
        ///
        /// * Draft: The model card is a work in progress.
        ///
        /// * PendingReview: The model card is pending review.
        ///
        /// * Approved: The model card is approved.
        ///
        /// * Archived: The model card is archived. No more updates should be made to the model card, but it can still be exported.
        /// This member is required.
        public var modelCardStatus: SageMakerClientTypes.ModelCardStatus?

        public init(
            creationTime: Foundation.Date? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            modelCardArn: Swift.String? = nil,
            modelCardName: Swift.String? = nil,
            modelCardStatus: SageMakerClientTypes.ModelCardStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
            self.modelCardArn = modelCardArn
            self.modelCardName = modelCardName
            self.modelCardStatus = modelCardStatus
        }
    }

}

public struct ListModelCardsOutput {
    /// The summaries of the listed model cards.
    /// This member is required.
    public var modelCardSummaries: [SageMakerClientTypes.ModelCardSummary]?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of model cards, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init(
        modelCardSummaries: [SageMakerClientTypes.ModelCardSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.modelCardSummaries = modelCardSummaries
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum ModelCardVersionSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case version
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelCardVersionSortBy] {
            return [
                .version
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .version: return "Version"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListModelCardVersionsInput {
    /// Only list model card versions that were created after the time specified.
    public var creationTimeAfter: Foundation.Date?
    /// Only list model card versions that were created before the time specified.
    public var creationTimeBefore: Foundation.Date?
    /// The maximum number of model card versions to list.
    public var maxResults: Swift.Int?
    /// List model card versions for the model card with the specified name or Amazon Resource Name (ARN).
    /// This member is required.
    public var modelCardName: Swift.String?
    /// Only list model card versions with the specified approval status.
    public var modelCardStatus: SageMakerClientTypes.ModelCardStatus?
    /// If the response to a previous ListModelCardVersions request was truncated, the response includes a NextToken. To retrieve the next set of model card versions, use the token in the next request.
    public var nextToken: Swift.String?
    /// Sort listed model card versions by version. Sorts by version by default.
    public var sortBy: SageMakerClientTypes.ModelCardVersionSortBy?
    /// Sort model card versions by ascending or descending order.
    public var sortOrder: SageMakerClientTypes.ModelCardSortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        modelCardName: Swift.String? = nil,
        modelCardStatus: SageMakerClientTypes.ModelCardStatus? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ModelCardVersionSortBy? = nil,
        sortOrder: SageMakerClientTypes.ModelCardSortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.modelCardName = modelCardName
        self.modelCardStatus = modelCardStatus
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

extension SageMakerClientTypes {
    /// A summary of a specific version of the model card.
    public struct ModelCardVersionSummary {
        /// The date and time that the model card version was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The time date and time that the model card version was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the model card.
        /// This member is required.
        public var modelCardArn: Swift.String?
        /// The name of the model card.
        /// This member is required.
        public var modelCardName: Swift.String?
        /// The approval status of the model card version within your organization. Different organizations might have different criteria for model card review and approval.
        ///
        /// * Draft: The model card is a work in progress.
        ///
        /// * PendingReview: The model card is pending review.
        ///
        /// * Approved: The model card is approved.
        ///
        /// * Archived: The model card is archived. No more updates should be made to the model card, but it can still be exported.
        /// This member is required.
        public var modelCardStatus: SageMakerClientTypes.ModelCardStatus?
        /// A version of the model card.
        /// This member is required.
        public var modelCardVersion: Swift.Int?

        public init(
            creationTime: Foundation.Date? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            modelCardArn: Swift.String? = nil,
            modelCardName: Swift.String? = nil,
            modelCardStatus: SageMakerClientTypes.ModelCardStatus? = nil,
            modelCardVersion: Swift.Int? = nil
        )
        {
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
            self.modelCardArn = modelCardArn
            self.modelCardName = modelCardName
            self.modelCardStatus = modelCardStatus
            self.modelCardVersion = modelCardVersion
        }
    }

}

public struct ListModelCardVersionsOutput {
    /// The summaries of the listed versions of the model card.
    /// This member is required.
    public var modelCardVersionSummaryList: [SageMakerClientTypes.ModelCardVersionSummary]?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of model card versions, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init(
        modelCardVersionSummaryList: [SageMakerClientTypes.ModelCardVersionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.modelCardVersionSummaryList = modelCardVersionSummaryList
        self.nextToken = nextToken
    }
}

public struct ListModelExplainabilityJobDefinitionsInput {
    /// A filter that returns only model explainability jobs created after a specified time.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only model explainability jobs created before a specified time.
    public var creationTimeBefore: Foundation.Date?
    /// Name of the endpoint to monitor for model explainability.
    public var endpointName: Swift.String?
    /// The maximum number of jobs to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// Filter for model explainability jobs whose name contains a specified string.
    public var nameContains: Swift.String?
    /// The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.
    public var nextToken: Swift.String?
    /// Whether to sort results by the Name or CreationTime field. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey?
    /// Whether to sort the results in Ascending or Descending order. The default is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        endpointName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.endpointName = endpointName
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListModelExplainabilityJobDefinitionsOutput {
    /// A JSON array in which each element is a summary for a explainability bias jobs.
    /// This member is required.
    public var jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]?
    /// The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.
    public var nextToken: Swift.String?

    public init(
        jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobDefinitionSummaries = jobDefinitionSummaries
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum ModelMetadataFilterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case domain
        case framework
        case frameworkversion
        case task
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelMetadataFilterType] {
            return [
                .domain,
                .framework,
                .frameworkversion,
                .task
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .domain: return "Domain"
            case .framework: return "Framework"
            case .frameworkversion: return "FrameworkVersion"
            case .task: return "Task"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Part of the search expression. You can specify the name and value (domain, task, framework, framework version, task, and model).
    public struct ModelMetadataFilter {
        /// The name of the of the model to filter by.
        /// This member is required.
        public var name: SageMakerClientTypes.ModelMetadataFilterType?
        /// The value to filter the model metadata.
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: SageMakerClientTypes.ModelMetadataFilterType? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension SageMakerClientTypes {
    /// One or more filters that searches for the specified resource or resources in a search. All resource objects that satisfy the expression's condition are included in the search results
    public struct ModelMetadataSearchExpression {
        /// A list of filter objects.
        public var filters: [SageMakerClientTypes.ModelMetadataFilter]?

        public init(
            filters: [SageMakerClientTypes.ModelMetadataFilter]? = nil
        )
        {
            self.filters = filters
        }
    }

}

public struct ListModelMetadataInput {
    /// The maximum number of models to return in the response.
    public var maxResults: Swift.Int?
    /// If the response to a previous ListModelMetadataResponse request was truncated, the response includes a NextToken. To retrieve the next set of model metadata, use the token in the next request.
    public var nextToken: Swift.String?
    /// One or more filters that searches for the specified resource or resources in a search. All resource objects that satisfy the expression's condition are included in the search results. Specify the Framework, FrameworkVersion, Domain or Task to filter supported. Filter names and values are case-sensitive.
    public var searchExpression: SageMakerClientTypes.ModelMetadataSearchExpression?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        searchExpression: SageMakerClientTypes.ModelMetadataSearchExpression? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.searchExpression = searchExpression
    }
}

extension SageMakerClientTypes {
    /// A summary of the model metadata.
    public struct ModelMetadataSummary {
        /// The machine learning domain of the model.
        /// This member is required.
        public var domain: Swift.String?
        /// The machine learning framework of the model.
        /// This member is required.
        public var framework: Swift.String?
        /// The framework version of the model.
        /// This member is required.
        public var frameworkVersion: Swift.String?
        /// The name of the model.
        /// This member is required.
        public var model: Swift.String?
        /// The machine learning task of the model.
        /// This member is required.
        public var task: Swift.String?

        public init(
            domain: Swift.String? = nil,
            framework: Swift.String? = nil,
            frameworkVersion: Swift.String? = nil,
            model: Swift.String? = nil,
            task: Swift.String? = nil
        )
        {
            self.domain = domain
            self.framework = framework
            self.frameworkVersion = frameworkVersion
            self.model = model
            self.task = task
        }
    }

}

public struct ListModelMetadataOutput {
    /// A structure that holds model metadata.
    /// This member is required.
    public var modelMetadataSummaries: [SageMakerClientTypes.ModelMetadataSummary]?
    /// A token for getting the next set of recommendations, if there are any.
    public var nextToken: Swift.String?

    public init(
        modelMetadataSummaries: [SageMakerClientTypes.ModelMetadataSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.modelMetadataSummaries = modelMetadataSummaries
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum ModelPackageGroupSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelPackageGroupSortBy] {
            return [
                .creationTime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListModelPackageGroupsInput {
    /// A filter that returns only model groups created after the specified time.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only model groups created before the specified time.
    public var creationTimeBefore: Foundation.Date?
    /// A filter that returns either model groups shared with you or model groups in your own account. When the value is CrossAccount, the results show the resources made discoverable to you from other accounts. When the value is SameAccount or null, the results show resources from your account. The default is SameAccount.
    public var crossAccountFilterOption: SageMakerClientTypes.CrossAccountFilterOption?
    /// The maximum number of results to return in the response.
    public var maxResults: Swift.Int?
    /// A string in the model group name. This filter returns only model groups whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListModelPackageGroups request was truncated, the response includes a NextToken. To retrieve the next set of model groups, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.ModelPackageGroupSortBy?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        crossAccountFilterOption: SageMakerClientTypes.CrossAccountFilterOption? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ModelPackageGroupSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.crossAccountFilterOption = crossAccountFilterOption
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

extension SageMakerClientTypes {
    /// Summary information about a model group.
    public struct ModelPackageGroupSummary {
        /// The time that the model group was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the model group.
        /// This member is required.
        public var modelPackageGroupArn: Swift.String?
        /// A description of the model group.
        public var modelPackageGroupDescription: Swift.String?
        /// The name of the model group.
        /// This member is required.
        public var modelPackageGroupName: Swift.String?
        /// The status of the model group.
        /// This member is required.
        public var modelPackageGroupStatus: SageMakerClientTypes.ModelPackageGroupStatus?

        public init(
            creationTime: Foundation.Date? = nil,
            modelPackageGroupArn: Swift.String? = nil,
            modelPackageGroupDescription: Swift.String? = nil,
            modelPackageGroupName: Swift.String? = nil,
            modelPackageGroupStatus: SageMakerClientTypes.ModelPackageGroupStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.modelPackageGroupArn = modelPackageGroupArn
            self.modelPackageGroupDescription = modelPackageGroupDescription
            self.modelPackageGroupName = modelPackageGroupName
            self.modelPackageGroupStatus = modelPackageGroupStatus
        }
    }

}

public struct ListModelPackageGroupsOutput {
    /// A list of summaries of the model groups in your Amazon Web Services account.
    /// This member is required.
    public var modelPackageGroupSummaryList: [SageMakerClientTypes.ModelPackageGroupSummary]?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of model groups, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init(
        modelPackageGroupSummaryList: [SageMakerClientTypes.ModelPackageGroupSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.modelPackageGroupSummaryList = modelPackageGroupSummaryList
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum ModelPackageType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case both
        case unversioned
        case versioned
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelPackageType] {
            return [
                .both,
                .unversioned,
                .versioned
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .both: return "Both"
            case .unversioned: return "Unversioned"
            case .versioned: return "Versioned"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum ModelPackageSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelPackageSortBy] {
            return [
                .creationTime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListModelPackagesInput {
    /// A filter that returns only model packages created after the specified time (timestamp).
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only model packages created before the specified time (timestamp).
    public var creationTimeBefore: Foundation.Date?
    /// The maximum number of model packages to return in the response.
    public var maxResults: Swift.Int?
    /// A filter that returns only the model packages with the specified approval status.
    public var modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
    /// A filter that returns only model versions that belong to the specified model group.
    public var modelPackageGroupName: Swift.String?
    /// A filter that returns only the model packages of the specified type. This can be one of the following values.
    ///
    /// * UNVERSIONED - List only unversioined models. This is the default value if no ModelPackageType is specified.
    ///
    /// * VERSIONED - List only versioned models.
    ///
    /// * BOTH - List both versioned and unversioned models.
    public var modelPackageType: SageMakerClientTypes.ModelPackageType?
    /// A string in the model package name. This filter returns only model packages whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the response to a previous ListModelPackages request was truncated, the response includes a NextToken. To retrieve the next set of model packages, use the token in the next request.
    public var nextToken: Swift.String?
    /// The parameter by which to sort the results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.ModelPackageSortBy?
    /// The sort order for the results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus? = nil,
        modelPackageGroupName: Swift.String? = nil,
        modelPackageType: SageMakerClientTypes.ModelPackageType? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ModelPackageSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.modelApprovalStatus = modelApprovalStatus
        self.modelPackageGroupName = modelPackageGroupName
        self.modelPackageType = modelPackageType
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

extension SageMakerClientTypes {
    /// Provides summary information about a model package.
    public struct ModelPackageSummary {
        /// A timestamp that shows when the model package was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The approval status of the model. This can be one of the following values.
        ///
        /// * APPROVED - The model is approved
        ///
        /// * REJECTED - The model is rejected.
        ///
        /// * PENDING_MANUAL_APPROVAL - The model is waiting for manual approval.
        public var modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
        /// The Amazon Resource Name (ARN) of the model package.
        /// This member is required.
        public var modelPackageArn: Swift.String?
        /// A brief description of the model package.
        public var modelPackageDescription: Swift.String?
        /// If the model package is a versioned model, the model group that the versioned model belongs to.
        public var modelPackageGroupName: Swift.String?
        /// The name of the model package.
        public var modelPackageName: Swift.String?
        /// The overall status of the model package.
        /// This member is required.
        public var modelPackageStatus: SageMakerClientTypes.ModelPackageStatus?
        /// If the model package is a versioned model, the version of the model.
        public var modelPackageVersion: Swift.Int?

        public init(
            creationTime: Foundation.Date? = nil,
            modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus? = nil,
            modelPackageArn: Swift.String? = nil,
            modelPackageDescription: Swift.String? = nil,
            modelPackageGroupName: Swift.String? = nil,
            modelPackageName: Swift.String? = nil,
            modelPackageStatus: SageMakerClientTypes.ModelPackageStatus? = nil,
            modelPackageVersion: Swift.Int? = nil
        )
        {
            self.creationTime = creationTime
            self.modelApprovalStatus = modelApprovalStatus
            self.modelPackageArn = modelPackageArn
            self.modelPackageDescription = modelPackageDescription
            self.modelPackageGroupName = modelPackageGroupName
            self.modelPackageName = modelPackageName
            self.modelPackageStatus = modelPackageStatus
            self.modelPackageVersion = modelPackageVersion
        }
    }

}

public struct ListModelPackagesOutput {
    /// An array of ModelPackageSummary objects, each of which lists a model package.
    /// This member is required.
    public var modelPackageSummaryList: [SageMakerClientTypes.ModelPackageSummary]?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of model packages, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init(
        modelPackageSummaryList: [SageMakerClientTypes.ModelPackageSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.modelPackageSummaryList = modelPackageSummaryList
        self.nextToken = nextToken
    }
}

public struct ListModelQualityJobDefinitionsInput {
    /// A filter that returns only model quality monitoring job definitions created after the specified time.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only model quality monitoring job definitions created before the specified time.
    public var creationTimeBefore: Foundation.Date?
    /// A filter that returns only model quality monitoring job definitions that are associated with the specified endpoint.
    public var endpointName: Swift.String?
    /// The maximum number of results to return in a call to ListModelQualityJobDefinitions.
    public var maxResults: Swift.Int?
    /// A string in the transform job name. This filter returns only model quality monitoring job definitions whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListModelQualityJobDefinitions request was truncated, the response includes a NextToken. To retrieve the next set of model quality monitoring job definitions, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey?
    /// Whether to sort the results in Ascending or Descending order. The default is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        endpointName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.MonitoringJobDefinitionSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.endpointName = endpointName
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListModelQualityJobDefinitionsOutput {
    /// A list of summaries of model quality monitoring job definitions.
    /// This member is required.
    public var jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]?
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of model quality monitoring job definitions, use it in the next request.
    public var nextToken: Swift.String?

    public init(
        jobDefinitionSummaries: [SageMakerClientTypes.MonitoringJobDefinitionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.jobDefinitionSummaries = jobDefinitionSummaries
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum ModelSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationtime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelSortKey] {
            return [
                .creationtime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListModelsInput {
    /// A filter that returns only models with a creation time greater than or equal to the specified time (timestamp).
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only models created before the specified time (timestamp).
    public var creationTimeBefore: Foundation.Date?
    /// The maximum number of models to return in the response.
    public var maxResults: Swift.Int?
    /// A string in the model name. This filter returns only models whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the response to a previous ListModels request was truncated, the response includes a NextToken. To retrieve the next set of models, use the token in the next request.
    public var nextToken: Swift.String?
    /// Sorts the list of results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.ModelSortKey?
    /// The sort order for results. The default is Descending.
    public var sortOrder: SageMakerClientTypes.OrderKey?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ModelSortKey? = nil,
        sortOrder: SageMakerClientTypes.OrderKey? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

extension SageMakerClientTypes {
    /// Provides summary information about a model.
    public struct ModelSummary {
        /// A timestamp that indicates when the model was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the model.
        /// This member is required.
        public var modelArn: Swift.String?
        /// The name of the model that you want a summary for.
        /// This member is required.
        public var modelName: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            modelArn: Swift.String? = nil,
            modelName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.modelArn = modelArn
            self.modelName = modelName
        }
    }

}

public struct ListModelsOutput {
    /// An array of ModelSummary objects, each of which lists a model.
    /// This member is required.
    public var models: [SageMakerClientTypes.ModelSummary]?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of models, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init(
        models: [SageMakerClientTypes.ModelSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.models = models
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum MonitoringAlertHistorySortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationtime
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [MonitoringAlertHistorySortKey] {
            return [
                .creationtime,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum MonitoringAlertStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case inAlert
        case ok
        case sdkUnknown(Swift.String)

        public static var allCases: [MonitoringAlertStatus] {
            return [
                .inAlert,
                .ok
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .inAlert: return "InAlert"
            case .ok: return "OK"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListMonitoringAlertHistoryInput {
    /// A filter that returns only alerts created on or after the specified time.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only alerts created on or before the specified time.
    public var creationTimeBefore: Foundation.Date?
    /// The maximum number of results to display. The default is 100.
    public var maxResults: Swift.Int?
    /// The name of a monitoring alert.
    public var monitoringAlertName: Swift.String?
    /// The name of a monitoring schedule.
    public var monitoringScheduleName: Swift.String?
    /// If the result of the previous ListMonitoringAlertHistory request was truncated, the response includes a NextToken. To retrieve the next set of alerts in the history, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field used to sort results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.MonitoringAlertHistorySortKey?
    /// The sort order, whether Ascending or Descending, of the alert history. The default is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that retrieves only alerts with a specific status.
    public var statusEquals: SageMakerClientTypes.MonitoringAlertStatus?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        monitoringAlertName: Swift.String? = nil,
        monitoringScheduleName: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.MonitoringAlertHistorySortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.MonitoringAlertStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.monitoringAlertName = monitoringAlertName
        self.monitoringScheduleName = monitoringScheduleName
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

extension SageMakerClientTypes {
    /// Provides summary information of an alert's history.
    public struct MonitoringAlertHistorySummary {
        /// The current alert status of an alert.
        /// This member is required.
        public var alertStatus: SageMakerClientTypes.MonitoringAlertStatus?
        /// A timestamp that indicates when the first alert transition occurred in an alert history. An alert transition can be from status InAlert to OK, or from OK to InAlert.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The name of a monitoring alert.
        /// This member is required.
        public var monitoringAlertName: Swift.String?
        /// The name of a monitoring schedule.
        /// This member is required.
        public var monitoringScheduleName: Swift.String?

        public init(
            alertStatus: SageMakerClientTypes.MonitoringAlertStatus? = nil,
            creationTime: Foundation.Date? = nil,
            monitoringAlertName: Swift.String? = nil,
            monitoringScheduleName: Swift.String? = nil
        )
        {
            self.alertStatus = alertStatus
            self.creationTime = creationTime
            self.monitoringAlertName = monitoringAlertName
            self.monitoringScheduleName = monitoringScheduleName
        }
    }

}

public struct ListMonitoringAlertHistoryOutput {
    /// An alert history for a model monitoring schedule.
    public var monitoringAlertHistory: [SageMakerClientTypes.MonitoringAlertHistorySummary]?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of alerts, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init(
        monitoringAlertHistory: [SageMakerClientTypes.MonitoringAlertHistorySummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.monitoringAlertHistory = monitoringAlertHistory
        self.nextToken = nextToken
    }
}

public struct ListMonitoringAlertsInput {
    /// The maximum number of results to display. The default is 100.
    public var maxResults: Swift.Int?
    /// The name of a monitoring schedule.
    /// This member is required.
    public var monitoringScheduleName: Swift.String?
    /// If the result of the previous ListMonitoringAlerts request was truncated, the response includes a NextToken. To retrieve the next set of alerts in the history, use the token in the next request.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        monitoringScheduleName: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.monitoringScheduleName = monitoringScheduleName
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {
    /// An alert action taken to light up an icon on the Amazon SageMaker Model Dashboard when an alert goes into InAlert status.
    public struct ModelDashboardIndicatorAction {
        /// Indicates whether the alert action is turned on.
        public var enabled: Swift.Bool?

        public init(
            enabled: Swift.Bool? = nil
        )
        {
            self.enabled = enabled
        }
    }

}

extension SageMakerClientTypes {
    /// A list of alert actions taken in response to an alert going into InAlert status.
    public struct MonitoringAlertActions {
        /// An alert action taken to light up an icon on the Model Dashboard when an alert goes into InAlert status.
        public var modelDashboardIndicator: SageMakerClientTypes.ModelDashboardIndicatorAction?

        public init(
            modelDashboardIndicator: SageMakerClientTypes.ModelDashboardIndicatorAction? = nil
        )
        {
            self.modelDashboardIndicator = modelDashboardIndicator
        }
    }

}

extension SageMakerClientTypes {
    /// Provides summary information about a monitor alert.
    public struct MonitoringAlertSummary {
        /// A list of alert actions taken in response to an alert going into InAlert status.
        /// This member is required.
        public var actions: SageMakerClientTypes.MonitoringAlertActions?
        /// The current status of an alert.
        /// This member is required.
        public var alertStatus: SageMakerClientTypes.MonitoringAlertStatus?
        /// A timestamp that indicates when a monitor alert was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// Within EvaluationPeriod, how many execution failures will raise an alert.
        /// This member is required.
        public var datapointsToAlert: Swift.Int?
        /// The number of most recent monitoring executions to consider when evaluating alert status.
        /// This member is required.
        public var evaluationPeriod: Swift.Int?
        /// A timestamp that indicates when a monitor alert was last updated.
        /// This member is required.
        public var lastModifiedTime: Foundation.Date?
        /// The name of a monitoring alert.
        /// This member is required.
        public var monitoringAlertName: Swift.String?

        public init(
            actions: SageMakerClientTypes.MonitoringAlertActions? = nil,
            alertStatus: SageMakerClientTypes.MonitoringAlertStatus? = nil,
            creationTime: Foundation.Date? = nil,
            datapointsToAlert: Swift.Int? = nil,
            evaluationPeriod: Swift.Int? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            monitoringAlertName: Swift.String? = nil
        )
        {
            self.actions = actions
            self.alertStatus = alertStatus
            self.creationTime = creationTime
            self.datapointsToAlert = datapointsToAlert
            self.evaluationPeriod = evaluationPeriod
            self.lastModifiedTime = lastModifiedTime
            self.monitoringAlertName = monitoringAlertName
        }
    }

}

public struct ListMonitoringAlertsOutput {
    /// A JSON array where each element is a summary for a monitoring alert.
    public var monitoringAlertSummaries: [SageMakerClientTypes.MonitoringAlertSummary]?
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of alerts, use it in the subsequent request.
    public var nextToken: Swift.String?

    public init(
        monitoringAlertSummaries: [SageMakerClientTypes.MonitoringAlertSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.monitoringAlertSummaries = monitoringAlertSummaries
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum MonitoringExecutionSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case scheduledTime
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [MonitoringExecutionSortKey] {
            return [
                .creationTime,
                .scheduledTime,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .scheduledTime: return "ScheduledTime"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListMonitoringExecutionsInput {
    /// A filter that returns only jobs created after a specified time.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only jobs created before a specified time.
    public var creationTimeBefore: Foundation.Date?
    /// Name of a specific endpoint to fetch jobs for.
    public var endpointName: Swift.String?
    /// A filter that returns only jobs modified before a specified time.
    public var lastModifiedTimeAfter: Foundation.Date?
    /// A filter that returns only jobs modified after a specified time.
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of jobs to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// Gets a list of the monitoring job runs of the specified monitoring job definitions.
    public var monitoringJobDefinitionName: Swift.String?
    /// Name of a specific schedule to fetch jobs for.
    public var monitoringScheduleName: Swift.String?
    /// A filter that returns only the monitoring job runs of the specified monitoring type.
    public var monitoringTypeEquals: SageMakerClientTypes.MonitoringType?
    /// The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.
    public var nextToken: Swift.String?
    /// Filter for jobs scheduled after a specified time.
    public var scheduledTimeAfter: Foundation.Date?
    /// Filter for jobs scheduled before a specified time.
    public var scheduledTimeBefore: Foundation.Date?
    /// Whether to sort the results by the Status, CreationTime, or ScheduledTime field. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.MonitoringExecutionSortKey?
    /// Whether to sort the results in Ascending or Descending order. The default is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that retrieves only jobs with a specific status.
    public var statusEquals: SageMakerClientTypes.ExecutionStatus?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        endpointName: Swift.String? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        monitoringJobDefinitionName: Swift.String? = nil,
        monitoringScheduleName: Swift.String? = nil,
        monitoringTypeEquals: SageMakerClientTypes.MonitoringType? = nil,
        nextToken: Swift.String? = nil,
        scheduledTimeAfter: Foundation.Date? = nil,
        scheduledTimeBefore: Foundation.Date? = nil,
        sortBy: SageMakerClientTypes.MonitoringExecutionSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.ExecutionStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.endpointName = endpointName
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.monitoringJobDefinitionName = monitoringJobDefinitionName
        self.monitoringScheduleName = monitoringScheduleName
        self.monitoringTypeEquals = monitoringTypeEquals
        self.nextToken = nextToken
        self.scheduledTimeAfter = scheduledTimeAfter
        self.scheduledTimeBefore = scheduledTimeBefore
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

public struct ListMonitoringExecutionsOutput {
    /// A JSON array in which each element is a summary for a monitoring execution.
    /// This member is required.
    public var monitoringExecutionSummaries: [SageMakerClientTypes.MonitoringExecutionSummary]?
    /// The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.
    public var nextToken: Swift.String?

    public init(
        monitoringExecutionSummaries: [SageMakerClientTypes.MonitoringExecutionSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.monitoringExecutionSummaries = monitoringExecutionSummaries
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum MonitoringScheduleSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [MonitoringScheduleSortKey] {
            return [
                .creationTime,
                .name,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListMonitoringSchedulesInput {
    /// A filter that returns only monitoring schedules created after a specified time.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only monitoring schedules created before a specified time.
    public var creationTimeBefore: Foundation.Date?
    /// Name of a specific endpoint to fetch schedules for.
    public var endpointName: Swift.String?
    /// A filter that returns only monitoring schedules modified after a specified time.
    public var lastModifiedTimeAfter: Foundation.Date?
    /// A filter that returns only monitoring schedules modified before a specified time.
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of jobs to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// Gets a list of the monitoring schedules for the specified monitoring job definition.
    public var monitoringJobDefinitionName: Swift.String?
    /// A filter that returns only the monitoring schedules for the specified monitoring type.
    public var monitoringTypeEquals: SageMakerClientTypes.MonitoringType?
    /// Filter for monitoring schedules whose name contains a specified string.
    public var nameContains: Swift.String?
    /// The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.
    public var nextToken: Swift.String?
    /// Whether to sort the results by the Status, CreationTime, or ScheduledTime field. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.MonitoringScheduleSortKey?
    /// Whether to sort the results in Ascending or Descending order. The default is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that returns only monitoring schedules modified before a specified time.
    public var statusEquals: SageMakerClientTypes.ScheduleStatus?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        endpointName: Swift.String? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        monitoringJobDefinitionName: Swift.String? = nil,
        monitoringTypeEquals: SageMakerClientTypes.MonitoringType? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.MonitoringScheduleSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.ScheduleStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.endpointName = endpointName
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.monitoringJobDefinitionName = monitoringJobDefinitionName
        self.monitoringTypeEquals = monitoringTypeEquals
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

extension SageMakerClientTypes {
    /// Summarizes the monitoring schedule.
    public struct MonitoringScheduleSummary {
        /// The creation time of the monitoring schedule.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The name of the endpoint using the monitoring schedule.
        public var endpointName: Swift.String?
        /// The last time the monitoring schedule was modified.
        /// This member is required.
        public var lastModifiedTime: Foundation.Date?
        /// The name of the monitoring job definition that the schedule is for.
        public var monitoringJobDefinitionName: Swift.String?
        /// The Amazon Resource Name (ARN) of the monitoring schedule.
        /// This member is required.
        public var monitoringScheduleArn: Swift.String?
        /// The name of the monitoring schedule.
        /// This member is required.
        public var monitoringScheduleName: Swift.String?
        /// The status of the monitoring schedule.
        /// This member is required.
        public var monitoringScheduleStatus: SageMakerClientTypes.ScheduleStatus?
        /// The type of the monitoring job definition that the schedule is for.
        public var monitoringType: SageMakerClientTypes.MonitoringType?

        public init(
            creationTime: Foundation.Date? = nil,
            endpointName: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            monitoringJobDefinitionName: Swift.String? = nil,
            monitoringScheduleArn: Swift.String? = nil,
            monitoringScheduleName: Swift.String? = nil,
            monitoringScheduleStatus: SageMakerClientTypes.ScheduleStatus? = nil,
            monitoringType: SageMakerClientTypes.MonitoringType? = nil
        )
        {
            self.creationTime = creationTime
            self.endpointName = endpointName
            self.lastModifiedTime = lastModifiedTime
            self.monitoringJobDefinitionName = monitoringJobDefinitionName
            self.monitoringScheduleArn = monitoringScheduleArn
            self.monitoringScheduleName = monitoringScheduleName
            self.monitoringScheduleStatus = monitoringScheduleStatus
            self.monitoringType = monitoringType
        }
    }

}

public struct ListMonitoringSchedulesOutput {
    /// A JSON array in which each element is a summary for a monitoring schedule.
    /// This member is required.
    public var monitoringScheduleSummaries: [SageMakerClientTypes.MonitoringScheduleSummary]?
    /// The token returned if the response is truncated. To retrieve the next set of job executions, use it in the next request.
    public var nextToken: Swift.String?

    public init(
        monitoringScheduleSummaries: [SageMakerClientTypes.MonitoringScheduleSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.monitoringScheduleSummaries = monitoringScheduleSummaries
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum NotebookInstanceLifecycleConfigSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case lastModifiedTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [NotebookInstanceLifecycleConfigSortKey] {
            return [
                .creationTime,
                .lastModifiedTime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .lastModifiedTime: return "LastModifiedTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum NotebookInstanceLifecycleConfigSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [NotebookInstanceLifecycleConfigSortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListNotebookInstanceLifecycleConfigsInput {
    /// A filter that returns only lifecycle configurations that were created after the specified time (timestamp).
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only lifecycle configurations that were created before the specified time (timestamp).
    public var creationTimeBefore: Foundation.Date?
    /// A filter that returns only lifecycle configurations that were modified after the specified time (timestamp).
    public var lastModifiedTimeAfter: Foundation.Date?
    /// A filter that returns only lifecycle configurations that were modified before the specified time (timestamp).
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of lifecycle configurations to return in the response.
    public var maxResults: Swift.Int?
    /// A string in the lifecycle configuration name. This filter returns only lifecycle configurations whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of a ListNotebookInstanceLifecycleConfigs request was truncated, the response includes a NextToken. To get the next set of lifecycle configurations, use the token in the next request.
    public var nextToken: Swift.String?
    /// Sorts the list of results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.NotebookInstanceLifecycleConfigSortKey?
    /// The sort order for results.
    public var sortOrder: SageMakerClientTypes.NotebookInstanceLifecycleConfigSortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.NotebookInstanceLifecycleConfigSortKey? = nil,
        sortOrder: SageMakerClientTypes.NotebookInstanceLifecycleConfigSortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

extension SageMakerClientTypes {
    /// Provides a summary of a notebook instance lifecycle configuration.
    public struct NotebookInstanceLifecycleConfigSummary {
        /// A timestamp that tells when the lifecycle configuration was created.
        public var creationTime: Foundation.Date?
        /// A timestamp that tells when the lifecycle configuration was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the lifecycle configuration.
        /// This member is required.
        public var notebookInstanceLifecycleConfigArn: Swift.String?
        /// The name of the lifecycle configuration.
        /// This member is required.
        public var notebookInstanceLifecycleConfigName: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            notebookInstanceLifecycleConfigArn: Swift.String? = nil,
            notebookInstanceLifecycleConfigName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
            self.notebookInstanceLifecycleConfigArn = notebookInstanceLifecycleConfigArn
            self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
        }
    }

}

public struct ListNotebookInstanceLifecycleConfigsOutput {
    /// If the response is truncated, SageMaker returns this token. To get the next set of lifecycle configurations, use it in the next request.
    public var nextToken: Swift.String?
    /// An array of NotebookInstanceLifecycleConfiguration objects, each listing a lifecycle configuration.
    public var notebookInstanceLifecycleConfigs: [SageMakerClientTypes.NotebookInstanceLifecycleConfigSummary]?

    public init(
        nextToken: Swift.String? = nil,
        notebookInstanceLifecycleConfigs: [SageMakerClientTypes.NotebookInstanceLifecycleConfigSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.notebookInstanceLifecycleConfigs = notebookInstanceLifecycleConfigs
    }
}

extension SageMakerClientTypes {

    public enum NotebookInstanceSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [NotebookInstanceSortKey] {
            return [
                .creationTime,
                .name,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum NotebookInstanceSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [NotebookInstanceSortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListNotebookInstancesInput {
    /// A filter that returns only notebook instances with associated with the specified git repository.
    public var additionalCodeRepositoryEquals: Swift.String?
    /// A filter that returns only notebook instances that were created after the specified time (timestamp).
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only notebook instances that were created before the specified time (timestamp).
    public var creationTimeBefore: Foundation.Date?
    /// A string in the name or URL of a Git repository associated with this notebook instance. This filter returns only notebook instances associated with a git repository with a name that contains the specified string.
    public var defaultCodeRepositoryContains: Swift.String?
    /// A filter that returns only notebook instances that were modified after the specified time (timestamp).
    public var lastModifiedTimeAfter: Foundation.Date?
    /// A filter that returns only notebook instances that were modified before the specified time (timestamp).
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of notebook instances to return.
    public var maxResults: Swift.Int?
    /// A string in the notebook instances' name. This filter returns only notebook instances whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the previous call to the ListNotebookInstances is truncated, the response includes a NextToken. You can use this token in your subsequent ListNotebookInstances request to fetch the next set of notebook instances. You might specify a filter or a sort order in your request. When response is truncated, you must use the same values for the filer and sort order in the next request.
    public var nextToken: Swift.String?
    /// A string in the name of a notebook instances lifecycle configuration associated with this notebook instance. This filter returns only notebook instances associated with a lifecycle configuration with a name that contains the specified string.
    public var notebookInstanceLifecycleConfigNameContains: Swift.String?
    /// The field to sort results by. The default is Name.
    public var sortBy: SageMakerClientTypes.NotebookInstanceSortKey?
    /// The sort order for results.
    public var sortOrder: SageMakerClientTypes.NotebookInstanceSortOrder?
    /// A filter that returns only notebook instances with the specified status.
    public var statusEquals: SageMakerClientTypes.NotebookInstanceStatus?

    public init(
        additionalCodeRepositoryEquals: Swift.String? = nil,
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        defaultCodeRepositoryContains: Swift.String? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        notebookInstanceLifecycleConfigNameContains: Swift.String? = nil,
        sortBy: SageMakerClientTypes.NotebookInstanceSortKey? = nil,
        sortOrder: SageMakerClientTypes.NotebookInstanceSortOrder? = nil,
        statusEquals: SageMakerClientTypes.NotebookInstanceStatus? = nil
    )
    {
        self.additionalCodeRepositoryEquals = additionalCodeRepositoryEquals
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.defaultCodeRepositoryContains = defaultCodeRepositoryContains
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.notebookInstanceLifecycleConfigNameContains = notebookInstanceLifecycleConfigNameContains
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

extension SageMakerClientTypes {
    /// Provides summary information for an SageMaker notebook instance.
    public struct NotebookInstanceSummary {
        /// An array of up to three Git repositories associated with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in [Amazon Web Services CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see [Associating Git Repositories with SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
        public var additionalCodeRepositories: [Swift.String]?
        /// A timestamp that shows when the notebook instance was created.
        public var creationTime: Foundation.Date?
        /// The Git repository associated with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in [Amazon Web Services CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see [Associating Git Repositories with SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
        public var defaultCodeRepository: Swift.String?
        /// The type of ML compute instance that the notebook instance is running on.
        public var instanceType: SageMakerClientTypes.InstanceType?
        /// A timestamp that shows when the notebook instance was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the notebook instance.
        /// This member is required.
        public var notebookInstanceArn: Swift.String?
        /// The name of a notebook instance lifecycle configuration associated with this notebook instance. For information about notebook instance lifestyle configurations, see [Step 2.1: (Optional) Customize a Notebook Instance](https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html).
        public var notebookInstanceLifecycleConfigName: Swift.String?
        /// The name of the notebook instance that you want a summary for.
        /// This member is required.
        public var notebookInstanceName: Swift.String?
        /// The status of the notebook instance.
        public var notebookInstanceStatus: SageMakerClientTypes.NotebookInstanceStatus?
        /// The URL that you use to connect to the Jupyter notebook running in your notebook instance.
        public var url: Swift.String?

        public init(
            additionalCodeRepositories: [Swift.String]? = nil,
            creationTime: Foundation.Date? = nil,
            defaultCodeRepository: Swift.String? = nil,
            instanceType: SageMakerClientTypes.InstanceType? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            notebookInstanceArn: Swift.String? = nil,
            notebookInstanceLifecycleConfigName: Swift.String? = nil,
            notebookInstanceName: Swift.String? = nil,
            notebookInstanceStatus: SageMakerClientTypes.NotebookInstanceStatus? = nil,
            url: Swift.String? = nil
        )
        {
            self.additionalCodeRepositories = additionalCodeRepositories
            self.creationTime = creationTime
            self.defaultCodeRepository = defaultCodeRepository
            self.instanceType = instanceType
            self.lastModifiedTime = lastModifiedTime
            self.notebookInstanceArn = notebookInstanceArn
            self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
            self.notebookInstanceName = notebookInstanceName
            self.notebookInstanceStatus = notebookInstanceStatus
            self.url = url
        }
    }

}

public struct ListNotebookInstancesOutput {
    /// If the response to the previous ListNotebookInstances request was truncated, SageMaker returns this token. To retrieve the next set of notebook instances, use the token in the next request.
    public var nextToken: Swift.String?
    /// An array of NotebookInstanceSummary objects, one for each notebook instance.
    public var notebookInstances: [SageMakerClientTypes.NotebookInstanceSummary]?

    public init(
        nextToken: Swift.String? = nil,
        notebookInstances: [SageMakerClientTypes.NotebookInstanceSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.notebookInstances = notebookInstances
    }
}

extension SageMakerClientTypes {

    public enum ListOptimizationJobsSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [ListOptimizationJobsSortBy] {
            return [
                .creationTime,
                .name,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListOptimizationJobsInput {
    /// Filters the results to only those optimization jobs that were created after the specified time.
    public var creationTimeAfter: Foundation.Date?
    /// Filters the results to only those optimization jobs that were created before the specified time.
    public var creationTimeBefore: Foundation.Date?
    /// Filters the results to only those optimization jobs that were updated after the specified time.
    public var lastModifiedTimeAfter: Foundation.Date?
    /// Filters the results to only those optimization jobs that were updated before the specified time.
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of optimization jobs to return in the response. The default is 50.
    public var maxResults: Swift.Int?
    /// Filters the results to only those optimization jobs with a name that contains the specified string.
    public var nameContains: Swift.String?
    /// A token that you use to get the next set of results following a truncated response. If the response to the previous request was truncated, that response provides the value for this token.
    public var nextToken: Swift.String?
    /// Filters the results to only those optimization jobs that apply the specified optimization techniques. You can specify either Quantization or Compilation.
    public var optimizationContains: Swift.String?
    /// The field by which to sort the optimization jobs in the response. The default is CreationTime
    public var sortBy: SageMakerClientTypes.ListOptimizationJobsSortBy?
    /// The sort order for results. The default is Ascending
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// Filters the results to only those optimization jobs with the specified status.
    public var statusEquals: SageMakerClientTypes.OptimizationJobStatus?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        optimizationContains: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ListOptimizationJobsSortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.OptimizationJobStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.optimizationContains = optimizationContains
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

extension SageMakerClientTypes {
    /// Summarizes an optimization job by providing some of its key properties.
    public struct OptimizationJobSummary {
        /// The time when you created the optimization job.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The type of instance that hosts the optimized model that you create with the optimization job.
        /// This member is required.
        public var deploymentInstanceType: SageMakerClientTypes.OptimizationJobDeploymentInstanceType?
        /// The time when the optimization job was last updated.
        public var lastModifiedTime: Foundation.Date?
        /// The time when the optimization job finished processing.
        public var optimizationEndTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the optimization job.
        /// This member is required.
        public var optimizationJobArn: Swift.String?
        /// The name that you assigned to the optimization job.
        /// This member is required.
        public var optimizationJobName: Swift.String?
        /// The current status of the optimization job.
        /// This member is required.
        public var optimizationJobStatus: SageMakerClientTypes.OptimizationJobStatus?
        /// The time when the optimization job started.
        public var optimizationStartTime: Foundation.Date?
        /// The optimization techniques that are applied by the optimization job.
        /// This member is required.
        public var optimizationTypes: [Swift.String]?

        public init(
            creationTime: Foundation.Date? = nil,
            deploymentInstanceType: SageMakerClientTypes.OptimizationJobDeploymentInstanceType? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            optimizationEndTime: Foundation.Date? = nil,
            optimizationJobArn: Swift.String? = nil,
            optimizationJobName: Swift.String? = nil,
            optimizationJobStatus: SageMakerClientTypes.OptimizationJobStatus? = nil,
            optimizationStartTime: Foundation.Date? = nil,
            optimizationTypes: [Swift.String]? = nil
        )
        {
            self.creationTime = creationTime
            self.deploymentInstanceType = deploymentInstanceType
            self.lastModifiedTime = lastModifiedTime
            self.optimizationEndTime = optimizationEndTime
            self.optimizationJobArn = optimizationJobArn
            self.optimizationJobName = optimizationJobName
            self.optimizationJobStatus = optimizationJobStatus
            self.optimizationStartTime = optimizationStartTime
            self.optimizationTypes = optimizationTypes
        }
    }

}

public struct ListOptimizationJobsOutput {
    /// The token to use in a subsequent request to get the next set of results following a truncated response.
    public var nextToken: Swift.String?
    /// A list of optimization jobs and their properties that matches any of the filters you specified in the request.
    /// This member is required.
    public var optimizationJobSummaries: [SageMakerClientTypes.OptimizationJobSummary]?

    public init(
        nextToken: Swift.String? = nil,
        optimizationJobSummaries: [SageMakerClientTypes.OptimizationJobSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.optimizationJobSummaries = optimizationJobSummaries
    }
}

extension SageMakerClientTypes {

    public enum SortPipelineExecutionsBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case pipelineExecutionArn
        case sdkUnknown(Swift.String)

        public static var allCases: [SortPipelineExecutionsBy] {
            return [
                .creationTime,
                .pipelineExecutionArn
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .pipelineExecutionArn: return "PipelineExecutionArn"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListPipelineExecutionsInput {
    /// A filter that returns the pipeline executions that were created after a specified time.
    public var createdAfter: Foundation.Date?
    /// A filter that returns the pipeline executions that were created before a specified time.
    public var createdBefore: Foundation.Date?
    /// The maximum number of pipeline executions to return in the response.
    public var maxResults: Swift.Int?
    /// If the result of the previous ListPipelineExecutions request was truncated, the response includes a NextToken. To retrieve the next set of pipeline executions, use the token in the next request.
    public var nextToken: Swift.String?
    /// The name or Amazon Resource Name (ARN) of the pipeline.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The field by which to sort results. The default is CreatedTime.
    public var sortBy: SageMakerClientTypes.SortPipelineExecutionsBy?
    /// The sort order for results.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        createdAfter: Foundation.Date? = nil,
        createdBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        pipelineName: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortPipelineExecutionsBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.pipelineName = pipelineName
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

extension SageMakerClientTypes {
    /// A pipeline execution summary.
    public struct PipelineExecutionSummary {
        /// The Amazon Resource Name (ARN) of the pipeline execution.
        public var pipelineExecutionArn: Swift.String?
        /// The description of the pipeline execution.
        public var pipelineExecutionDescription: Swift.String?
        /// The display name of the pipeline execution.
        public var pipelineExecutionDisplayName: Swift.String?
        /// A message generated by SageMaker Pipelines describing why the pipeline execution failed.
        public var pipelineExecutionFailureReason: Swift.String?
        /// The status of the pipeline execution.
        public var pipelineExecutionStatus: SageMakerClientTypes.PipelineExecutionStatus?
        /// The start time of the pipeline execution.
        public var startTime: Foundation.Date?

        public init(
            pipelineExecutionArn: Swift.String? = nil,
            pipelineExecutionDescription: Swift.String? = nil,
            pipelineExecutionDisplayName: Swift.String? = nil,
            pipelineExecutionFailureReason: Swift.String? = nil,
            pipelineExecutionStatus: SageMakerClientTypes.PipelineExecutionStatus? = nil,
            startTime: Foundation.Date? = nil
        )
        {
            self.pipelineExecutionArn = pipelineExecutionArn
            self.pipelineExecutionDescription = pipelineExecutionDescription
            self.pipelineExecutionDisplayName = pipelineExecutionDisplayName
            self.pipelineExecutionFailureReason = pipelineExecutionFailureReason
            self.pipelineExecutionStatus = pipelineExecutionStatus
            self.startTime = startTime
        }
    }

}

public struct ListPipelineExecutionsOutput {
    /// If the result of the previous ListPipelineExecutions request was truncated, the response includes a NextToken. To retrieve the next set of pipeline executions, use the token in the next request.
    public var nextToken: Swift.String?
    /// Contains a sorted list of pipeline execution summary objects matching the specified filters. Each run summary includes the Amazon Resource Name (ARN) of the pipeline execution, the run date, and the status. This list can be empty.
    public var pipelineExecutionSummaries: [SageMakerClientTypes.PipelineExecutionSummary]?

    public init(
        nextToken: Swift.String? = nil,
        pipelineExecutionSummaries: [SageMakerClientTypes.PipelineExecutionSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.pipelineExecutionSummaries = pipelineExecutionSummaries
    }
}

public struct ListPipelineExecutionStepsInput {
    /// The maximum number of pipeline execution steps to return in the response.
    public var maxResults: Swift.Int?
    /// If the result of the previous ListPipelineExecutionSteps request was truncated, the response includes a NextToken. To retrieve the next set of pipeline execution steps, use the token in the next request.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    public var pipelineExecutionArn: Swift.String?
    /// The field by which to sort results. The default is CreatedTime.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        pipelineExecutionArn: Swift.String? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.pipelineExecutionArn = pipelineExecutionArn
        self.sortOrder = sortOrder
    }
}

extension SageMakerClientTypes {
    /// Metadata for Model steps.
    public struct ModelStepMetadata {
        /// The Amazon Resource Name (ARN) of the created model.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension SageMakerClientTypes {
    /// Metadata for a processing job step.
    public struct ProcessingJobStepMetadata {
        /// The Amazon Resource Name (ARN) of the processing job.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension SageMakerClientTypes {
    /// Container for the metadata for a Quality check step. For more information, see the topic on [QualityCheck step](https://docs.aws.amazon.com/sagemaker/latest/dg/build-and-manage-steps.html#step-type-quality-check) in the Amazon SageMaker Developer Guide.
    public struct QualityCheckStepMetadata {
        /// The Amazon S3 URI of the baseline constraints file used for the drift check.
        public var baselineUsedForDriftCheckConstraints: Swift.String?
        /// The Amazon S3 URI of the baseline statistics file used for the drift check.
        public var baselineUsedForDriftCheckStatistics: Swift.String?
        /// The Amazon S3 URI of the newly calculated baseline constraints file.
        public var calculatedBaselineConstraints: Swift.String?
        /// The Amazon S3 URI of the newly calculated baseline statistics file.
        public var calculatedBaselineStatistics: Swift.String?
        /// The Amazon Resource Name (ARN) of the Quality check processing job that was run by this step execution.
        public var checkJobArn: Swift.String?
        /// The type of the Quality check step.
        public var checkType: Swift.String?
        /// The model package group name.
        public var modelPackageGroupName: Swift.String?
        /// This flag indicates if a newly calculated baseline can be accessed through step properties BaselineUsedForDriftCheckConstraints and BaselineUsedForDriftCheckStatistics. If it is set to False, the previous baseline of the configured check type must also be available. These can be accessed through the BaselineUsedForDriftCheckConstraints and  BaselineUsedForDriftCheckStatistics properties.
        public var registerNewBaseline: Swift.Bool?
        /// This flag indicates if the drift check against the previous baseline will be skipped or not. If it is set to False, the previous baseline of the configured check type must be available.
        public var skipCheck: Swift.Bool?
        /// The Amazon S3 URI of violation report if violations are detected.
        public var violationReport: Swift.String?

        public init(
            baselineUsedForDriftCheckConstraints: Swift.String? = nil,
            baselineUsedForDriftCheckStatistics: Swift.String? = nil,
            calculatedBaselineConstraints: Swift.String? = nil,
            calculatedBaselineStatistics: Swift.String? = nil,
            checkJobArn: Swift.String? = nil,
            checkType: Swift.String? = nil,
            modelPackageGroupName: Swift.String? = nil,
            registerNewBaseline: Swift.Bool? = nil,
            skipCheck: Swift.Bool? = nil,
            violationReport: Swift.String? = nil
        )
        {
            self.baselineUsedForDriftCheckConstraints = baselineUsedForDriftCheckConstraints
            self.baselineUsedForDriftCheckStatistics = baselineUsedForDriftCheckStatistics
            self.calculatedBaselineConstraints = calculatedBaselineConstraints
            self.calculatedBaselineStatistics = calculatedBaselineStatistics
            self.checkJobArn = checkJobArn
            self.checkType = checkType
            self.modelPackageGroupName = modelPackageGroupName
            self.registerNewBaseline = registerNewBaseline
            self.skipCheck = skipCheck
            self.violationReport = violationReport
        }
    }

}

extension SageMakerClientTypes {
    /// Metadata for a register model job step.
    public struct RegisterModelStepMetadata {
        /// The Amazon Resource Name (ARN) of the model package.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension SageMakerClientTypes {
    /// Metadata for a training job step.
    public struct TrainingJobStepMetadata {
        /// The Amazon Resource Name (ARN) of the training job that was run by this step execution.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension SageMakerClientTypes {
    /// Metadata for a transform job step.
    public struct TransformJobStepMetadata {
        /// The Amazon Resource Name (ARN) of the transform job that was run by this step execution.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension SageMakerClientTypes {
    /// Metadata for a tuning step.
    public struct TuningJobStepMetaData {
        /// The Amazon Resource Name (ARN) of the tuning job that was run by this step execution.
        public var arn: Swift.String?

        public init(
            arn: Swift.String? = nil
        )
        {
            self.arn = arn
        }
    }

}

extension SageMakerClientTypes {
    /// Metadata for a step execution.
    public struct PipelineExecutionStepMetadata {
        /// The Amazon Resource Name (ARN) of the AutoML job that was run by this step.
        public var autoMLJob: SageMakerClientTypes.AutoMLJobStepMetadata?
        /// The URL of the Amazon SQS queue used by this step execution, the pipeline generated token, and a list of output parameters.
        public var callback: SageMakerClientTypes.CallbackStepMetadata?
        /// Container for the metadata for a Clarify check step. The configurations and outcomes of the check step execution. This includes:
        ///
        /// * The type of the check conducted,
        ///
        /// * The Amazon S3 URIs of baseline constraints and statistics files to be used for the drift check.
        ///
        /// * The Amazon S3 URIs of newly calculated baseline constraints and statistics.
        ///
        /// * The model package group name provided.
        ///
        /// * The Amazon S3 URI of the violation report if violations detected.
        ///
        /// * The Amazon Resource Name (ARN) of check processing job initiated by the step execution.
        ///
        /// * The boolean flags indicating if the drift check is skipped.
        ///
        /// * If step property BaselineUsedForDriftCheck is set the same as CalculatedBaseline.
        public var clarifyCheck: SageMakerClientTypes.ClarifyCheckStepMetadata?
        /// The outcome of the condition evaluation that was run by this step execution.
        public var condition: SageMakerClientTypes.ConditionStepMetadata?
        /// The configurations and outcomes of an Amazon EMR step execution.
        public var emr: SageMakerClientTypes.EMRStepMetadata?
        /// The endpoint that was invoked during this step execution.
        public var endpoint: SageMakerClientTypes.EndpointStepMetadata?
        /// The endpoint configuration used to create an endpoint during this step execution.
        public var endpointConfig: SageMakerClientTypes.EndpointConfigStepMetadata?
        /// The configurations and outcomes of a Fail step execution.
        public var fail: SageMakerClientTypes.FailStepMetadata?
        /// The Amazon Resource Name (ARN) of the Lambda function that was run by this step execution and a list of output parameters.
        public var lambda: SageMakerClientTypes.LambdaStepMetadata?
        /// The Amazon Resource Name (ARN) of the model that was created by this step execution.
        public var model: SageMakerClientTypes.ModelStepMetadata?
        /// The Amazon Resource Name (ARN) of the processing job that was run by this step execution.
        public var processingJob: SageMakerClientTypes.ProcessingJobStepMetadata?
        /// The configurations and outcomes of the check step execution. This includes:
        ///
        /// * The type of the check conducted.
        ///
        /// * The Amazon S3 URIs of baseline constraints and statistics files to be used for the drift check.
        ///
        /// * The Amazon S3 URIs of newly calculated baseline constraints and statistics.
        ///
        /// * The model package group name provided.
        ///
        /// * The Amazon S3 URI of the violation report if violations detected.
        ///
        /// * The Amazon Resource Name (ARN) of check processing job initiated by the step execution.
        ///
        /// * The Boolean flags indicating if the drift check is skipped.
        ///
        /// * If step property BaselineUsedForDriftCheck is set the same as CalculatedBaseline.
        public var qualityCheck: SageMakerClientTypes.QualityCheckStepMetadata?
        /// The Amazon Resource Name (ARN) of the model package that the model was registered to by this step execution.
        public var registerModel: SageMakerClientTypes.RegisterModelStepMetadata?
        /// The Amazon Resource Name (ARN) of the training job that was run by this step execution.
        public var trainingJob: SageMakerClientTypes.TrainingJobStepMetadata?
        /// The Amazon Resource Name (ARN) of the transform job that was run by this step execution.
        public var transformJob: SageMakerClientTypes.TransformJobStepMetadata?
        /// The Amazon Resource Name (ARN) of the tuning job that was run by this step execution.
        public var tuningJob: SageMakerClientTypes.TuningJobStepMetaData?

        public init(
            autoMLJob: SageMakerClientTypes.AutoMLJobStepMetadata? = nil,
            callback: SageMakerClientTypes.CallbackStepMetadata? = nil,
            clarifyCheck: SageMakerClientTypes.ClarifyCheckStepMetadata? = nil,
            condition: SageMakerClientTypes.ConditionStepMetadata? = nil,
            emr: SageMakerClientTypes.EMRStepMetadata? = nil,
            endpoint: SageMakerClientTypes.EndpointStepMetadata? = nil,
            endpointConfig: SageMakerClientTypes.EndpointConfigStepMetadata? = nil,
            fail: SageMakerClientTypes.FailStepMetadata? = nil,
            lambda: SageMakerClientTypes.LambdaStepMetadata? = nil,
            model: SageMakerClientTypes.ModelStepMetadata? = nil,
            processingJob: SageMakerClientTypes.ProcessingJobStepMetadata? = nil,
            qualityCheck: SageMakerClientTypes.QualityCheckStepMetadata? = nil,
            registerModel: SageMakerClientTypes.RegisterModelStepMetadata? = nil,
            trainingJob: SageMakerClientTypes.TrainingJobStepMetadata? = nil,
            transformJob: SageMakerClientTypes.TransformJobStepMetadata? = nil,
            tuningJob: SageMakerClientTypes.TuningJobStepMetaData? = nil
        )
        {
            self.autoMLJob = autoMLJob
            self.callback = callback
            self.clarifyCheck = clarifyCheck
            self.condition = condition
            self.emr = emr
            self.endpoint = endpoint
            self.endpointConfig = endpointConfig
            self.fail = fail
            self.lambda = lambda
            self.model = model
            self.processingJob = processingJob
            self.qualityCheck = qualityCheck
            self.registerModel = registerModel
            self.trainingJob = trainingJob
            self.transformJob = transformJob
            self.tuningJob = tuningJob
        }
    }

}

extension SageMakerClientTypes {
    /// The ARN from an execution of the current pipeline.
    public struct SelectiveExecutionResult {
        /// The ARN from an execution of the current pipeline.
        public var sourcePipelineExecutionArn: Swift.String?

        public init(
            sourcePipelineExecutionArn: Swift.String? = nil
        )
        {
            self.sourcePipelineExecutionArn = sourcePipelineExecutionArn
        }
    }

}

extension SageMakerClientTypes {

    public enum StepStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case executing
        case failed
        case starting
        case stopped
        case stopping
        case succeeded
        case sdkUnknown(Swift.String)

        public static var allCases: [StepStatus] {
            return [
                .executing,
                .failed,
                .starting,
                .stopped,
                .stopping,
                .succeeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .executing: return "Executing"
            case .failed: return "Failed"
            case .starting: return "Starting"
            case .stopped: return "Stopped"
            case .stopping: return "Stopping"
            case .succeeded: return "Succeeded"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// An execution of a step in a pipeline.
    public struct PipelineExecutionStep {
        /// The current attempt of the execution step. For more information, see [Retry Policy for SageMaker Pipelines steps](https://docs.aws.amazon.com/sagemaker/latest/dg/pipelines-retry-policy.html).
        public var attemptCount: Swift.Int?
        /// If this pipeline execution step was cached, details on the cache hit.
        public var cacheHitResult: SageMakerClientTypes.CacheHitResult?
        /// The time that the step stopped executing.
        public var endTime: Foundation.Date?
        /// The reason why the step failed execution. This is only returned if the step failed its execution.
        public var failureReason: Swift.String?
        /// Metadata to run the pipeline step.
        public var metadata: SageMakerClientTypes.PipelineExecutionStepMetadata?
        /// The ARN from an execution of the current pipeline from which results are reused for this step.
        public var selectiveExecutionResult: SageMakerClientTypes.SelectiveExecutionResult?
        /// The time that the step started executing.
        public var startTime: Foundation.Date?
        /// The description of the step.
        public var stepDescription: Swift.String?
        /// The display name of the step.
        public var stepDisplayName: Swift.String?
        /// The name of the step that is executed.
        public var stepName: Swift.String?
        /// The status of the step execution.
        public var stepStatus: SageMakerClientTypes.StepStatus?

        public init(
            attemptCount: Swift.Int? = nil,
            cacheHitResult: SageMakerClientTypes.CacheHitResult? = nil,
            endTime: Foundation.Date? = nil,
            failureReason: Swift.String? = nil,
            metadata: SageMakerClientTypes.PipelineExecutionStepMetadata? = nil,
            selectiveExecutionResult: SageMakerClientTypes.SelectiveExecutionResult? = nil,
            startTime: Foundation.Date? = nil,
            stepDescription: Swift.String? = nil,
            stepDisplayName: Swift.String? = nil,
            stepName: Swift.String? = nil,
            stepStatus: SageMakerClientTypes.StepStatus? = nil
        )
        {
            self.attemptCount = attemptCount
            self.cacheHitResult = cacheHitResult
            self.endTime = endTime
            self.failureReason = failureReason
            self.metadata = metadata
            self.selectiveExecutionResult = selectiveExecutionResult
            self.startTime = startTime
            self.stepDescription = stepDescription
            self.stepDisplayName = stepDisplayName
            self.stepName = stepName
            self.stepStatus = stepStatus
        }
    }

}

public struct ListPipelineExecutionStepsOutput {
    /// If the result of the previous ListPipelineExecutionSteps request was truncated, the response includes a NextToken. To retrieve the next set of pipeline execution steps, use the token in the next request.
    public var nextToken: Swift.String?
    /// A list of PipeLineExecutionStep objects. Each PipeLineExecutionStep consists of StepName, StartTime, EndTime, StepStatus, and Metadata. Metadata is an object with properties for each job that contains relevant information about the job created by the step.
    public var pipelineExecutionSteps: [SageMakerClientTypes.PipelineExecutionStep]?

    public init(
        nextToken: Swift.String? = nil,
        pipelineExecutionSteps: [SageMakerClientTypes.PipelineExecutionStep]? = nil
    )
    {
        self.nextToken = nextToken
        self.pipelineExecutionSteps = pipelineExecutionSteps
    }
}

public struct ListPipelineParametersForExecutionInput {
    /// The maximum number of parameters to return in the response.
    public var maxResults: Swift.Int?
    /// If the result of the previous ListPipelineParametersForExecution request was truncated, the response includes a NextToken. To retrieve the next set of parameters, use the token in the next request.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    /// This member is required.
    public var pipelineExecutionArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

extension SageMakerClientTypes {
    /// Assigns a value to a named Pipeline parameter.
    public struct Parameter {
        /// The name of the parameter to assign a value to. This parameter name must match a named parameter in the pipeline definition.
        /// This member is required.
        public var name: Swift.String?
        /// The literal value for the parameter.
        /// This member is required.
        public var value: Swift.String?

        public init(
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

public struct ListPipelineParametersForExecutionOutput {
    /// If the result of the previous ListPipelineParametersForExecution request was truncated, the response includes a NextToken. To retrieve the next set of parameters, use the token in the next request.
    public var nextToken: Swift.String?
    /// Contains a list of pipeline parameters. This list can be empty.
    public var pipelineParameters: [SageMakerClientTypes.Parameter]?

    public init(
        nextToken: Swift.String? = nil,
        pipelineParameters: [SageMakerClientTypes.Parameter]? = nil
    )
    {
        self.nextToken = nextToken
        self.pipelineParameters = pipelineParameters
    }
}

extension SageMakerClientTypes {

    public enum SortPipelinesBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [SortPipelinesBy] {
            return [
                .creationTime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListPipelinesInput {
    /// A filter that returns the pipelines that were created after a specified time.
    public var createdAfter: Foundation.Date?
    /// A filter that returns the pipelines that were created before a specified time.
    public var createdBefore: Foundation.Date?
    /// The maximum number of pipelines to return in the response.
    public var maxResults: Swift.Int?
    /// If the result of the previous ListPipelines request was truncated, the response includes a NextToken. To retrieve the next set of pipelines, use the token in the next request.
    public var nextToken: Swift.String?
    /// The prefix of the pipeline name.
    public var pipelineNamePrefix: Swift.String?
    /// The field by which to sort results. The default is CreatedTime.
    public var sortBy: SageMakerClientTypes.SortPipelinesBy?
    /// The sort order for results.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        createdAfter: Foundation.Date? = nil,
        createdBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        pipelineNamePrefix: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortPipelinesBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.pipelineNamePrefix = pipelineNamePrefix
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

extension SageMakerClientTypes {
    /// A summary of a pipeline.
    public struct PipelineSummary {
        /// The creation time of the pipeline.
        public var creationTime: Foundation.Date?
        /// The last time that a pipeline execution began.
        public var lastExecutionTime: Foundation.Date?
        /// The time that the pipeline was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the pipeline.
        public var pipelineArn: Swift.String?
        /// The description of the pipeline.
        public var pipelineDescription: Swift.String?
        /// The display name of the pipeline.
        public var pipelineDisplayName: Swift.String?
        /// The name of the pipeline.
        public var pipelineName: Swift.String?
        /// The Amazon Resource Name (ARN) that the pipeline used to execute.
        public var roleArn: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            lastExecutionTime: Foundation.Date? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            pipelineArn: Swift.String? = nil,
            pipelineDescription: Swift.String? = nil,
            pipelineDisplayName: Swift.String? = nil,
            pipelineName: Swift.String? = nil,
            roleArn: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.lastExecutionTime = lastExecutionTime
            self.lastModifiedTime = lastModifiedTime
            self.pipelineArn = pipelineArn
            self.pipelineDescription = pipelineDescription
            self.pipelineDisplayName = pipelineDisplayName
            self.pipelineName = pipelineName
            self.roleArn = roleArn
        }
    }

}

public struct ListPipelinesOutput {
    /// If the result of the previous ListPipelines request was truncated, the response includes a NextToken. To retrieve the next set of pipelines, use the token in the next request.
    public var nextToken: Swift.String?
    /// Contains a sorted list of PipelineSummary objects matching the specified filters. Each PipelineSummary consists of PipelineArn, PipelineName, ExperimentName, PipelineDescription, CreationTime, LastModifiedTime, LastRunTime, and RoleArn. This list can be empty.
    public var pipelineSummaries: [SageMakerClientTypes.PipelineSummary]?

    public init(
        nextToken: Swift.String? = nil,
        pipelineSummaries: [SageMakerClientTypes.PipelineSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.pipelineSummaries = pipelineSummaries
    }
}

public struct ListProcessingJobsInput {
    /// A filter that returns only processing jobs created after the specified time.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only processing jobs created after the specified time.
    public var creationTimeBefore: Foundation.Date?
    /// A filter that returns only processing jobs modified after the specified time.
    public var lastModifiedTimeAfter: Foundation.Date?
    /// A filter that returns only processing jobs modified before the specified time.
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of processing jobs to return in the response.
    public var maxResults: Swift.Int?
    /// A string in the processing job name. This filter returns only processing jobs whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListProcessingJobs request was truncated, the response includes a NextToken. To retrieve the next set of processing jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.SortBy?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that retrieves only processing jobs with a specific status.
    public var statusEquals: SageMakerClientTypes.ProcessingJobStatus?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.ProcessingJobStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

extension SageMakerClientTypes {
    /// Summary of information about a processing job.
    public struct ProcessingJobSummary {
        /// The time at which the processing job was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// An optional string, up to one KB in size, that contains metadata from the processing container when the processing job exits.
        public var exitMessage: Swift.String?
        /// A string, up to one KB in size, that contains the reason a processing job failed, if it failed.
        public var failureReason: Swift.String?
        /// A timestamp that indicates the last time the processing job was modified.
        public var lastModifiedTime: Foundation.Date?
        /// The time at which the processing job completed.
        public var processingEndTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the processing job..
        /// This member is required.
        public var processingJobArn: Swift.String?
        /// The name of the processing job.
        /// This member is required.
        public var processingJobName: Swift.String?
        /// The status of the processing job.
        /// This member is required.
        public var processingJobStatus: SageMakerClientTypes.ProcessingJobStatus?

        public init(
            creationTime: Foundation.Date? = nil,
            exitMessage: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            processingEndTime: Foundation.Date? = nil,
            processingJobArn: Swift.String? = nil,
            processingJobName: Swift.String? = nil,
            processingJobStatus: SageMakerClientTypes.ProcessingJobStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.exitMessage = exitMessage
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.processingEndTime = processingEndTime
            self.processingJobArn = processingJobArn
            self.processingJobName = processingJobName
            self.processingJobStatus = processingJobStatus
        }
    }

}

public struct ListProcessingJobsOutput {
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of processing jobs, use it in the subsequent request.
    public var nextToken: Swift.String?
    /// An array of ProcessingJobSummary objects, each listing a processing job.
    /// This member is required.
    public var processingJobSummaries: [SageMakerClientTypes.ProcessingJobSummary]?

    public init(
        nextToken: Swift.String? = nil,
        processingJobSummaries: [SageMakerClientTypes.ProcessingJobSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.processingJobSummaries = processingJobSummaries
    }
}

extension SageMakerClientTypes {

    public enum ProjectSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ProjectSortBy] {
            return [
                .creationTime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum ProjectSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [ProjectSortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListProjectsInput {
    /// A filter that returns the projects that were created after a specified time.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns the projects that were created before a specified time.
    public var creationTimeBefore: Foundation.Date?
    /// The maximum number of projects to return in the response.
    public var maxResults: Swift.Int?
    /// A filter that returns the projects whose name contains a specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListProjects request was truncated, the response includes a NextToken. To retrieve the next set of projects, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field by which to sort results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.ProjectSortBy?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.ProjectSortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ProjectSortBy? = nil,
        sortOrder: SageMakerClientTypes.ProjectSortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

extension SageMakerClientTypes {
    /// Information about a project.
    public struct ProjectSummary {
        /// The time that the project was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the project.
        /// This member is required.
        public var projectArn: Swift.String?
        /// The description of the project.
        public var projectDescription: Swift.String?
        /// The ID of the project.
        /// This member is required.
        public var projectId: Swift.String?
        /// The name of the project.
        /// This member is required.
        public var projectName: Swift.String?
        /// The status of the project.
        /// This member is required.
        public var projectStatus: SageMakerClientTypes.ProjectStatus?

        public init(
            creationTime: Foundation.Date? = nil,
            projectArn: Swift.String? = nil,
            projectDescription: Swift.String? = nil,
            projectId: Swift.String? = nil,
            projectName: Swift.String? = nil,
            projectStatus: SageMakerClientTypes.ProjectStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.projectArn = projectArn
            self.projectDescription = projectDescription
            self.projectId = projectId
            self.projectName = projectName
            self.projectStatus = projectStatus
        }
    }

}

public struct ListProjectsOutput {
    /// If the result of the previous ListCompilationJobs request was truncated, the response includes a NextToken. To retrieve the next set of model compilation jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// A list of summaries of projects.
    /// This member is required.
    public var projectSummaryList: [SageMakerClientTypes.ProjectSummary]?

    public init(
        nextToken: Swift.String? = nil,
        projectSummaryList: [SageMakerClientTypes.ProjectSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.projectSummaryList = projectSummaryList
    }
}

extension SageMakerClientTypes {

    public enum ResourceCatalogSortBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceCatalogSortBy] {
            return [
                .creationTime
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {

    public enum ResourceCatalogSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceCatalogSortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListResourceCatalogsInput {
    /// Use this parameter to search for ResourceCatalogs created after a specific date and time.
    public var creationTimeAfter: Foundation.Date?
    /// Use this parameter to search for ResourceCatalogs created before a specific date and time.
    public var creationTimeBefore: Foundation.Date?
    /// The maximum number of results returned by ListResourceCatalogs.
    public var maxResults: Swift.Int?
    /// A string that partially matches one or more ResourceCatalogs names. Filters ResourceCatalog by name.
    public var nameContains: Swift.String?
    /// A token to resume pagination of ListResourceCatalogs results.
    public var nextToken: Swift.String?
    /// The value on which the resource catalog list is sorted.
    public var sortBy: SageMakerClientTypes.ResourceCatalogSortBy?
    /// The order in which the resource catalogs are listed.
    public var sortOrder: SageMakerClientTypes.ResourceCatalogSortOrder?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ResourceCatalogSortBy? = nil,
        sortOrder: SageMakerClientTypes.ResourceCatalogSortOrder? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

extension SageMakerClientTypes {
    /// A resource catalog containing all of the resources of a specific resource type within a resource owner account. For an example on sharing the Amazon SageMaker Feature Store DefaultFeatureGroupCatalog, see [Share Amazon SageMaker Catalog resource type](https://docs.aws.amazon.com/sagemaker/latest/APIReference/feature-store-cross-account-discoverability-share-sagemaker-catalog.html) in the Amazon SageMaker Developer Guide.
    public struct ResourceCatalog {
        /// The time the ResourceCatalog was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// A free form description of the ResourceCatalog.
        /// This member is required.
        public var description: Swift.String?
        /// The Amazon Resource Name (ARN) of the ResourceCatalog.
        /// This member is required.
        public var resourceCatalogArn: Swift.String?
        /// The name of the ResourceCatalog.
        /// This member is required.
        public var resourceCatalogName: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            description: Swift.String? = nil,
            resourceCatalogArn: Swift.String? = nil,
            resourceCatalogName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.description = description
            self.resourceCatalogArn = resourceCatalogArn
            self.resourceCatalogName = resourceCatalogName
        }
    }

}

public struct ListResourceCatalogsOutput {
    /// A token to resume pagination of ListResourceCatalogs results.
    public var nextToken: Swift.String?
    /// A list of the requested ResourceCatalogs.
    public var resourceCatalogs: [SageMakerClientTypes.ResourceCatalog]?

    public init(
        nextToken: Swift.String? = nil,
        resourceCatalogs: [SageMakerClientTypes.ResourceCatalog]? = nil
    )
    {
        self.nextToken = nextToken
        self.resourceCatalogs = resourceCatalogs
    }
}

extension SageMakerClientTypes {

    public enum SpaceSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationtime
        case lastmodifiedtime
        case sdkUnknown(Swift.String)

        public static var allCases: [SpaceSortKey] {
            return [
                .creationtime,
                .lastmodifiedtime
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .lastmodifiedtime: return "LastModifiedTime"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListSpacesInput {
    /// A parameter to search for the domain ID.
    public var domainIdEquals: Swift.String?
    /// This parameter defines the maximum number of results that can be return in a single response. The MaxResults parameter is an upper bound, not a target. If there are more results available than the value specified, a NextToken is provided in the response. The NextToken indicates that the user should get the next set of results by providing this token as a part of a subsequent call. The default value for MaxResults is 10.
    public var maxResults: Swift.Int?
    /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// The parameter by which to sort the results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.SpaceSortKey?
    /// The sort order for the results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A parameter by which to filter the results.
    public var spaceNameContains: Swift.String?

    public init(
        domainIdEquals: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SpaceSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        spaceNameContains: Swift.String? = nil
    )
    {
        self.domainIdEquals = domainIdEquals
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.spaceNameContains = spaceNameContains
    }
}

extension SageMakerClientTypes {
    /// Specifies summary information about the ownership settings.
    public struct OwnershipSettingsSummary {
        /// The user profile who is the owner of the space.
        public var ownerUserProfileName: Swift.String?

        public init(
            ownerUserProfileName: Swift.String? = nil
        )
        {
            self.ownerUserProfileName = ownerUserProfileName
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies summary information about the space settings.
    public struct SpaceSettingsSummary {
        /// The type of app created within the space.
        public var appType: SageMakerClientTypes.AppType?
        /// The storage settings for a space.
        public var spaceStorageSettings: SageMakerClientTypes.SpaceStorageSettings?

        public init(
            appType: SageMakerClientTypes.AppType? = nil,
            spaceStorageSettings: SageMakerClientTypes.SpaceStorageSettings? = nil
        )
        {
            self.appType = appType
            self.spaceStorageSettings = spaceStorageSettings
        }
    }

}

extension SageMakerClientTypes {
    /// Specifies summary information about the space sharing settings.
    public struct SpaceSharingSettingsSummary {
        /// Specifies the sharing type of the space.
        public var sharingType: SageMakerClientTypes.SharingType?

        public init(
            sharingType: SageMakerClientTypes.SharingType? = nil
        )
        {
            self.sharingType = sharingType
        }
    }

}

extension SageMakerClientTypes {
    /// The space's details.
    public struct SpaceDetails {
        /// The creation time.
        public var creationTime: Foundation.Date?
        /// The ID of the associated domain.
        public var domainId: Swift.String?
        /// The last modified time.
        public var lastModifiedTime: Foundation.Date?
        /// Specifies summary information about the ownership settings.
        public var ownershipSettingsSummary: SageMakerClientTypes.OwnershipSettingsSummary?
        /// The name of the space that appears in the Studio UI.
        public var spaceDisplayName: Swift.String?
        /// The name of the space.
        public var spaceName: Swift.String?
        /// Specifies summary information about the space settings.
        public var spaceSettingsSummary: SageMakerClientTypes.SpaceSettingsSummary?
        /// Specifies summary information about the space sharing settings.
        public var spaceSharingSettingsSummary: SageMakerClientTypes.SpaceSharingSettingsSummary?
        /// The status.
        public var status: SageMakerClientTypes.SpaceStatus?

        public init(
            creationTime: Foundation.Date? = nil,
            domainId: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            ownershipSettingsSummary: SageMakerClientTypes.OwnershipSettingsSummary? = nil,
            spaceDisplayName: Swift.String? = nil,
            spaceName: Swift.String? = nil,
            spaceSettingsSummary: SageMakerClientTypes.SpaceSettingsSummary? = nil,
            spaceSharingSettingsSummary: SageMakerClientTypes.SpaceSharingSettingsSummary? = nil,
            status: SageMakerClientTypes.SpaceStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.domainId = domainId
            self.lastModifiedTime = lastModifiedTime
            self.ownershipSettingsSummary = ownershipSettingsSummary
            self.spaceDisplayName = spaceDisplayName
            self.spaceName = spaceName
            self.spaceSettingsSummary = spaceSettingsSummary
            self.spaceSharingSettingsSummary = spaceSharingSettingsSummary
            self.status = status
        }
    }

}

public struct ListSpacesOutput {
    /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// The list of spaces.
    public var spaces: [SageMakerClientTypes.SpaceDetails]?

    public init(
        nextToken: Swift.String? = nil,
        spaces: [SageMakerClientTypes.SpaceDetails]? = nil
    )
    {
        self.nextToken = nextToken
        self.spaces = spaces
    }
}

public struct ListStageDevicesInput {
    /// The name of the edge deployment plan.
    /// This member is required.
    public var edgeDeploymentPlanName: Swift.String?
    /// Toggle for excluding devices deployed in other stages.
    public var excludeDevicesDeployedInOtherStage: Swift.Bool?
    /// The maximum number of requests to select.
    public var maxResults: Swift.Int?
    /// The response from the last list when returning a list large enough to neeed tokening.
    public var nextToken: Swift.String?
    /// The name of the stage in the deployment.
    /// This member is required.
    public var stageName: Swift.String?

    public init(
        edgeDeploymentPlanName: Swift.String? = nil,
        excludeDevicesDeployedInOtherStage: Swift.Bool? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        stageName: Swift.String? = nil
    )
    {
        self.edgeDeploymentPlanName = edgeDeploymentPlanName
        self.excludeDevicesDeployedInOtherStage = excludeDevicesDeployedInOtherStage
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.stageName = stageName
    }
}

public struct ListStageDevicesOutput {
    /// List of summaries of devices allocated to the stage.
    /// This member is required.
    public var deviceDeploymentSummaries: [SageMakerClientTypes.DeviceDeploymentSummary]?
    /// The token to use when calling the next page of results.
    public var nextToken: Swift.String?

    public init(
        deviceDeploymentSummaries: [SageMakerClientTypes.DeviceDeploymentSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.deviceDeploymentSummaries = deviceDeploymentSummaries
        self.nextToken = nextToken
    }
}

extension SageMakerClientTypes {

    public enum StudioLifecycleConfigSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationtime
        case lastmodifiedtime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [StudioLifecycleConfigSortKey] {
            return [
                .creationtime,
                .lastmodifiedtime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .lastmodifiedtime: return "LastModifiedTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListStudioLifecycleConfigsInput {
    /// A parameter to search for the App Type to which the Lifecycle Configuration is attached.
    public var appTypeEquals: SageMakerClientTypes.StudioLifecycleConfigAppType?
    /// A filter that returns only Lifecycle Configurations created on or after the specified time.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only Lifecycle Configurations created on or before the specified time.
    public var creationTimeBefore: Foundation.Date?
    /// The total number of items to return in the response. If the total number of items available is more than the value specified, a NextToken is provided in the response. To resume pagination, provide the NextToken value in the as part of a subsequent call. The default value is 10.
    public var maxResults: Swift.Int?
    /// A filter that returns only Lifecycle Configurations modified after the specified time.
    public var modifiedTimeAfter: Foundation.Date?
    /// A filter that returns only Lifecycle Configurations modified before the specified time.
    public var modifiedTimeBefore: Foundation.Date?
    /// A string in the Lifecycle Configuration name. This filter returns only Lifecycle Configurations whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the previous call to ListStudioLifecycleConfigs didn't return the full set of Lifecycle Configurations, the call returns a token for getting the next set of Lifecycle Configurations.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CreationTime.
    public var sortBy: SageMakerClientTypes.StudioLifecycleConfigSortKey?
    /// The sort order. The default value is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        appTypeEquals: SageMakerClientTypes.StudioLifecycleConfigAppType? = nil,
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        modifiedTimeAfter: Foundation.Date? = nil,
        modifiedTimeBefore: Foundation.Date? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.StudioLifecycleConfigSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.appTypeEquals = appTypeEquals
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.maxResults = maxResults
        self.modifiedTimeAfter = modifiedTimeAfter
        self.modifiedTimeBefore = modifiedTimeBefore
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

extension SageMakerClientTypes {
    /// Details of the Amazon SageMaker Studio Lifecycle Configuration.
    public struct StudioLifecycleConfigDetails {
        /// The creation time of the Amazon SageMaker Studio Lifecycle Configuration.
        public var creationTime: Foundation.Date?
        /// This value is equivalent to CreationTime because Amazon SageMaker Studio Lifecycle Configurations are immutable.
        public var lastModifiedTime: Foundation.Date?
        /// The App type to which the Lifecycle Configuration is attached.
        public var studioLifecycleConfigAppType: SageMakerClientTypes.StudioLifecycleConfigAppType?
        /// The Amazon Resource Name (ARN) of the Lifecycle Configuration.
        public var studioLifecycleConfigArn: Swift.String?
        /// The name of the Amazon SageMaker Studio Lifecycle Configuration.
        public var studioLifecycleConfigName: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            studioLifecycleConfigAppType: SageMakerClientTypes.StudioLifecycleConfigAppType? = nil,
            studioLifecycleConfigArn: Swift.String? = nil,
            studioLifecycleConfigName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
            self.studioLifecycleConfigAppType = studioLifecycleConfigAppType
            self.studioLifecycleConfigArn = studioLifecycleConfigArn
            self.studioLifecycleConfigName = studioLifecycleConfigName
        }
    }

}

public struct ListStudioLifecycleConfigsOutput {
    /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// A list of Lifecycle Configurations and their properties.
    public var studioLifecycleConfigs: [SageMakerClientTypes.StudioLifecycleConfigDetails]?

    public init(
        nextToken: Swift.String? = nil,
        studioLifecycleConfigs: [SageMakerClientTypes.StudioLifecycleConfigDetails]? = nil
    )
    {
        self.nextToken = nextToken
        self.studioLifecycleConfigs = studioLifecycleConfigs
    }
}

public struct ListSubscribedWorkteamsInput {
    /// The maximum number of work teams to return in each page of the response.
    public var maxResults: Swift.Int?
    /// A string in the work team name. This filter returns only work teams whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListSubscribedWorkteams request was truncated, the response includes a NextToken. To retrieve the next set of labeling jobs, use the token in the next request.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
    }
}

public struct ListSubscribedWorkteamsOutput {
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of work teams, use it in the subsequent request.
    public var nextToken: Swift.String?
    /// An array of Workteam objects, each describing a work team.
    /// This member is required.
    public var subscribedWorkteams: [SageMakerClientTypes.SubscribedWorkteam]?

    public init(
        nextToken: Swift.String? = nil,
        subscribedWorkteams: [SageMakerClientTypes.SubscribedWorkteam]? = nil
    )
    {
        self.nextToken = nextToken
        self.subscribedWorkteams = subscribedWorkteams
    }
}

public struct ListTagsInput {
    /// Maximum number of tags to return.
    public var maxResults: Swift.Int?
    /// If the response to the previous ListTags request is truncated, SageMaker returns this token. To retrieve the next set of tags, use it in the subsequent request.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the resource whose tags you want to retrieve.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resourceArn = resourceArn
    }
}

public struct ListTagsOutput {
    /// If response is truncated, SageMaker includes a token in the response. You can use this token in your subsequent request to fetch next set of tokens.
    public var nextToken: Swift.String?
    /// An array of Tag objects, each with a tag key and a value.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        nextToken: Swift.String? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.nextToken = nextToken
        self.tags = tags
    }
}

public struct ListTrainingJobsInput {
    /// A filter that returns only training jobs created after the specified time (timestamp).
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only training jobs created before the specified time (timestamp).
    public var creationTimeBefore: Foundation.Date?
    /// A filter that returns only training jobs modified after the specified time (timestamp).
    public var lastModifiedTimeAfter: Foundation.Date?
    /// A filter that returns only training jobs modified before the specified time (timestamp).
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of training jobs to return in the response.
    public var maxResults: Swift.Int?
    /// A string in the training job name. This filter returns only training jobs whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListTrainingJobs request was truncated, the response includes a NextToken. To retrieve the next set of training jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.SortBy?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that retrieves only training jobs with a specific status.
    public var statusEquals: SageMakerClientTypes.TrainingJobStatus?
    /// A filter that retrieves only training jobs with a specific warm pool status.
    public var warmPoolStatusEquals: SageMakerClientTypes.WarmPoolResourceStatus?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.TrainingJobStatus? = nil,
        warmPoolStatusEquals: SageMakerClientTypes.WarmPoolResourceStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
        self.warmPoolStatusEquals = warmPoolStatusEquals
    }
}

extension SageMakerClientTypes {
    /// Provides summary information about a training job.
    public struct TrainingJobSummary {
        /// A timestamp that shows when the training job was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// Timestamp when the training job was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// A timestamp that shows when the training job ended. This field is set only if the training job has one of the terminal statuses (Completed, Failed, or Stopped).
        public var trainingEndTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the training job.
        /// This member is required.
        public var trainingJobArn: Swift.String?
        /// The name of the training job that you want a summary for.
        /// This member is required.
        public var trainingJobName: Swift.String?
        /// The status of the training job.
        /// This member is required.
        public var trainingJobStatus: SageMakerClientTypes.TrainingJobStatus?
        /// The status of the warm pool associated with the training job.
        public var warmPoolStatus: SageMakerClientTypes.WarmPoolStatus?

        public init(
            creationTime: Foundation.Date? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            trainingEndTime: Foundation.Date? = nil,
            trainingJobArn: Swift.String? = nil,
            trainingJobName: Swift.String? = nil,
            trainingJobStatus: SageMakerClientTypes.TrainingJobStatus? = nil,
            warmPoolStatus: SageMakerClientTypes.WarmPoolStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
            self.trainingEndTime = trainingEndTime
            self.trainingJobArn = trainingJobArn
            self.trainingJobName = trainingJobName
            self.trainingJobStatus = trainingJobStatus
            self.warmPoolStatus = warmPoolStatus
        }
    }

}

public struct ListTrainingJobsOutput {
    /// If the response is truncated, SageMaker returns this token. To retrieve the next set of training jobs, use it in the subsequent request.
    public var nextToken: Swift.String?
    /// An array of TrainingJobSummary objects, each listing a training job.
    /// This member is required.
    public var trainingJobSummaries: [SageMakerClientTypes.TrainingJobSummary]?

    public init(
        nextToken: Swift.String? = nil,
        trainingJobSummaries: [SageMakerClientTypes.TrainingJobSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.trainingJobSummaries = trainingJobSummaries
    }
}

extension SageMakerClientTypes {

    public enum TrainingJobSortByOptions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationtime
        case finalobjectivemetricvalue
        case name
        case status
        case sdkUnknown(Swift.String)

        public static var allCases: [TrainingJobSortByOptions] {
            return [
                .creationtime,
                .finalobjectivemetricvalue,
                .name,
                .status
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .finalobjectivemetricvalue: return "FinalObjectiveMetricValue"
            case .name: return "Name"
            case .status: return "Status"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListTrainingJobsForHyperParameterTuningJobInput {
    /// The name of the tuning job whose training jobs you want to list.
    /// This member is required.
    public var hyperParameterTuningJobName: Swift.String?
    /// The maximum number of training jobs to return. The default value is 10.
    public var maxResults: Swift.Int?
    /// If the result of the previous ListTrainingJobsForHyperParameterTuningJob request was truncated, the response includes a NextToken. To retrieve the next set of training jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is Name. If the value of this field is FinalObjectiveMetricValue, any training jobs that did not return an objective metric are not listed.
    public var sortBy: SageMakerClientTypes.TrainingJobSortByOptions?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that returns only training jobs with the specified status.
    public var statusEquals: SageMakerClientTypes.TrainingJobStatus?

    public init(
        hyperParameterTuningJobName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.TrainingJobSortByOptions? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.TrainingJobStatus? = nil
    )
    {
        self.hyperParameterTuningJobName = hyperParameterTuningJobName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

public struct ListTrainingJobsForHyperParameterTuningJobOutput {
    /// If the result of this ListTrainingJobsForHyperParameterTuningJob request was truncated, the response includes a NextToken. To retrieve the next set of training jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// A list of [TrainingJobSummary](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_TrainingJobSummary.html) objects that describe the training jobs that the ListTrainingJobsForHyperParameterTuningJob request returned.
    /// This member is required.
    public var trainingJobSummaries: [SageMakerClientTypes.HyperParameterTrainingJobSummary]?

    public init(
        nextToken: Swift.String? = nil,
        trainingJobSummaries: [SageMakerClientTypes.HyperParameterTrainingJobSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.trainingJobSummaries = trainingJobSummaries
    }
}

public struct ListTransformJobsInput {
    /// A filter that returns only transform jobs created after the specified time.
    public var creationTimeAfter: Foundation.Date?
    /// A filter that returns only transform jobs created before the specified time.
    public var creationTimeBefore: Foundation.Date?
    /// A filter that returns only transform jobs modified after the specified time.
    public var lastModifiedTimeAfter: Foundation.Date?
    /// A filter that returns only transform jobs modified before the specified time.
    public var lastModifiedTimeBefore: Foundation.Date?
    /// The maximum number of transform jobs to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// A string in the transform job name. This filter returns only transform jobs whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListTransformJobs request was truncated, the response includes a NextToken. To retrieve the next set of transform jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.SortBy?
    /// The sort order for results. The default is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that retrieves only transform jobs with a specific status.
    public var statusEquals: SageMakerClientTypes.TransformJobStatus?

    public init(
        creationTimeAfter: Foundation.Date? = nil,
        creationTimeBefore: Foundation.Date? = nil,
        lastModifiedTimeAfter: Foundation.Date? = nil,
        lastModifiedTimeBefore: Foundation.Date? = nil,
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        statusEquals: SageMakerClientTypes.TransformJobStatus? = nil
    )
    {
        self.creationTimeAfter = creationTimeAfter
        self.creationTimeBefore = creationTimeBefore
        self.lastModifiedTimeAfter = lastModifiedTimeAfter
        self.lastModifiedTimeBefore = lastModifiedTimeBefore
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.statusEquals = statusEquals
    }
}

extension SageMakerClientTypes {
    /// Provides a summary of a transform job. Multiple TransformJobSummary objects are returned as a list after in response to a [ListTransformJobs](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListTransformJobs.html) call.
    public struct TransformJobSummary {
        /// A timestamp that shows when the transform Job was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// If the transform job failed, the reason it failed.
        public var failureReason: Swift.String?
        /// Indicates when the transform job was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// Indicates when the transform job ends on compute instances. For successful jobs and stopped jobs, this is the exact time recorded after the results are uploaded. For failed jobs, this is when Amazon SageMaker detected that the job failed.
        public var transformEndTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the transform job.
        /// This member is required.
        public var transformJobArn: Swift.String?
        /// The name of the transform job.
        /// This member is required.
        public var transformJobName: Swift.String?
        /// The status of the transform job.
        /// This member is required.
        public var transformJobStatus: SageMakerClientTypes.TransformJobStatus?

        public init(
            creationTime: Foundation.Date? = nil,
            failureReason: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            transformEndTime: Foundation.Date? = nil,
            transformJobArn: Swift.String? = nil,
            transformJobName: Swift.String? = nil,
            transformJobStatus: SageMakerClientTypes.TransformJobStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.transformEndTime = transformEndTime
            self.transformJobArn = transformJobArn
            self.transformJobName = transformJobName
            self.transformJobStatus = transformJobStatus
        }
    }

}

public struct ListTransformJobsOutput {
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of transform jobs, use it in the next request.
    public var nextToken: Swift.String?
    /// An array of TransformJobSummary objects.
    /// This member is required.
    public var transformJobSummaries: [SageMakerClientTypes.TransformJobSummary]?

    public init(
        nextToken: Swift.String? = nil,
        transformJobSummaries: [SageMakerClientTypes.TransformJobSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.transformJobSummaries = transformJobSummaries
    }
}

extension SageMakerClientTypes {

    public enum SortTrialComponentsBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [SortTrialComponentsBy] {
            return [
                .creationTime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListTrialComponentsInput {
    /// A filter that returns only components created after the specified time.
    public var createdAfter: Foundation.Date?
    /// A filter that returns only components created before the specified time.
    public var createdBefore: Foundation.Date?
    /// A filter that returns only components that are part of the specified experiment. If you specify ExperimentName, you can't filter by SourceArn or TrialName.
    public var experimentName: Swift.String?
    /// The maximum number of components to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// If the previous call to ListTrialComponents didn't return the full set of components, the call returns a token for getting the next set of components.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CreationTime.
    public var sortBy: SageMakerClientTypes.SortTrialComponentsBy?
    /// The sort order. The default value is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that returns only components that have the specified source Amazon Resource Name (ARN). If you specify SourceArn, you can't filter by ExperimentName or TrialName.
    public var sourceArn: Swift.String?
    /// A filter that returns only components that are part of the specified trial. If you specify TrialName, you can't filter by ExperimentName or SourceArn.
    public var trialName: Swift.String?

    public init(
        createdAfter: Foundation.Date? = nil,
        createdBefore: Foundation.Date? = nil,
        experimentName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortTrialComponentsBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        sourceArn: Swift.String? = nil,
        trialName: Swift.String? = nil
    )
    {
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.experimentName = experimentName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.sourceArn = sourceArn
        self.trialName = trialName
    }
}

extension SageMakerClientTypes {
    /// A summary of the properties of a trial component. To get all the properties, call the [DescribeTrialComponent](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrialComponent.html) API and provide the TrialComponentName.
    public struct TrialComponentSummary {
        /// Who created the trial component.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// When the component was created.
        public var creationTime: Foundation.Date?
        /// The name of the component as displayed. If DisplayName isn't specified, TrialComponentName is displayed.
        public var displayName: Swift.String?
        /// When the component ended.
        public var endTime: Foundation.Date?
        /// Who last modified the component.
        public var lastModifiedBy: SageMakerClientTypes.UserContext?
        /// When the component was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// When the component started.
        public var startTime: Foundation.Date?
        /// The status of the component. States include:
        ///
        /// * InProgress
        ///
        /// * Completed
        ///
        /// * Failed
        public var status: SageMakerClientTypes.TrialComponentStatus?
        /// The Amazon Resource Name (ARN) of the trial component.
        public var trialComponentArn: Swift.String?
        /// The name of the trial component.
        public var trialComponentName: Swift.String?
        /// The Amazon Resource Name (ARN) and job type of the source of a trial component.
        public var trialComponentSource: SageMakerClientTypes.TrialComponentSource?

        public init(
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: Foundation.Date? = nil,
            displayName: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            startTime: Foundation.Date? = nil,
            status: SageMakerClientTypes.TrialComponentStatus? = nil,
            trialComponentArn: Swift.String? = nil,
            trialComponentName: Swift.String? = nil,
            trialComponentSource: SageMakerClientTypes.TrialComponentSource? = nil
        )
        {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.displayName = displayName
            self.endTime = endTime
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.startTime = startTime
            self.status = status
            self.trialComponentArn = trialComponentArn
            self.trialComponentName = trialComponentName
            self.trialComponentSource = trialComponentSource
        }
    }

}

public struct ListTrialComponentsOutput {
    /// A token for getting the next set of components, if there are any.
    public var nextToken: Swift.String?
    /// A list of the summaries of your trial components.
    public var trialComponentSummaries: [SageMakerClientTypes.TrialComponentSummary]?

    public init(
        nextToken: Swift.String? = nil,
        trialComponentSummaries: [SageMakerClientTypes.TrialComponentSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.trialComponentSummaries = trialComponentSummaries
    }
}

extension SageMakerClientTypes {

    public enum SortTrialsBy: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationTime
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [SortTrialsBy] {
            return [
                .creationTime,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationTime: return "CreationTime"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListTrialsInput {
    /// A filter that returns only trials created after the specified time.
    public var createdAfter: Foundation.Date?
    /// A filter that returns only trials created before the specified time.
    public var createdBefore: Foundation.Date?
    /// A filter that returns only trials that are part of the specified experiment.
    public var experimentName: Swift.String?
    /// The maximum number of trials to return in the response. The default value is 10.
    public var maxResults: Swift.Int?
    /// If the previous call to ListTrials didn't return the full set of trials, the call returns a token for getting the next set of trials.
    public var nextToken: Swift.String?
    /// The property used to sort results. The default value is CreationTime.
    public var sortBy: SageMakerClientTypes.SortTrialsBy?
    /// The sort order. The default value is Descending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A filter that returns only trials that are associated with the specified trial component.
    public var trialComponentName: Swift.String?

    public init(
        createdAfter: Foundation.Date? = nil,
        createdBefore: Foundation.Date? = nil,
        experimentName: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.SortTrialsBy? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        trialComponentName: Swift.String? = nil
    )
    {
        self.createdAfter = createdAfter
        self.createdBefore = createdBefore
        self.experimentName = experimentName
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.trialComponentName = trialComponentName
    }
}

extension SageMakerClientTypes {
    /// A summary of the properties of a trial. To get the complete set of properties, call the [DescribeTrial](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_DescribeTrial.html) API and provide the TrialName.
    public struct TrialSummary {
        /// When the trial was created.
        public var creationTime: Foundation.Date?
        /// The name of the trial as displayed. If DisplayName isn't specified, TrialName is displayed.
        public var displayName: Swift.String?
        /// When the trial was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the trial.
        public var trialArn: Swift.String?
        /// The name of the trial.
        public var trialName: Swift.String?
        /// The source of the trial.
        public var trialSource: SageMakerClientTypes.TrialSource?

        public init(
            creationTime: Foundation.Date? = nil,
            displayName: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            trialArn: Swift.String? = nil,
            trialName: Swift.String? = nil,
            trialSource: SageMakerClientTypes.TrialSource? = nil
        )
        {
            self.creationTime = creationTime
            self.displayName = displayName
            self.lastModifiedTime = lastModifiedTime
            self.trialArn = trialArn
            self.trialName = trialName
            self.trialSource = trialSource
        }
    }

}

public struct ListTrialsOutput {
    /// A token for getting the next set of trials, if there are any.
    public var nextToken: Swift.String?
    /// A list of the summaries of your trials.
    public var trialSummaries: [SageMakerClientTypes.TrialSummary]?

    public init(
        nextToken: Swift.String? = nil,
        trialSummaries: [SageMakerClientTypes.TrialSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.trialSummaries = trialSummaries
    }
}

extension SageMakerClientTypes {

    public enum UserProfileSortKey: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creationtime
        case lastmodifiedtime
        case sdkUnknown(Swift.String)

        public static var allCases: [UserProfileSortKey] {
            return [
                .creationtime,
                .lastmodifiedtime
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creationtime: return "CreationTime"
            case .lastmodifiedtime: return "LastModifiedTime"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListUserProfilesInput {
    /// A parameter by which to filter the results.
    public var domainIdEquals: Swift.String?
    /// This parameter defines the maximum number of results that can be return in a single response. The MaxResults parameter is an upper bound, not a target. If there are more results available than the value specified, a NextToken is provided in the response. The NextToken indicates that the user should get the next set of results by providing this token as a part of a subsequent call. The default value for MaxResults is 10.
    public var maxResults: Swift.Int?
    /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// The parameter by which to sort the results. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.UserProfileSortKey?
    /// The sort order for the results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?
    /// A parameter by which to filter the results.
    public var userProfileNameContains: Swift.String?

    public init(
        domainIdEquals: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.UserProfileSortKey? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil,
        userProfileNameContains: Swift.String? = nil
    )
    {
        self.domainIdEquals = domainIdEquals
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.userProfileNameContains = userProfileNameContains
    }
}

extension SageMakerClientTypes {
    /// The user profile details.
    public struct UserProfileDetails {
        /// The creation time.
        public var creationTime: Foundation.Date?
        /// The domain ID.
        public var domainId: Swift.String?
        /// The last modified time.
        public var lastModifiedTime: Foundation.Date?
        /// The status.
        public var status: SageMakerClientTypes.UserProfileStatus?
        /// The user profile name.
        public var userProfileName: Swift.String?

        public init(
            creationTime: Foundation.Date? = nil,
            domainId: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            status: SageMakerClientTypes.UserProfileStatus? = nil,
            userProfileName: Swift.String? = nil
        )
        {
            self.creationTime = creationTime
            self.domainId = domainId
            self.lastModifiedTime = lastModifiedTime
            self.status = status
            self.userProfileName = userProfileName
        }
    }

}

public struct ListUserProfilesOutput {
    /// If the previous response was truncated, you will receive this token. Use it in your next request to receive the next set of results.
    public var nextToken: Swift.String?
    /// The list of user profiles.
    public var userProfiles: [SageMakerClientTypes.UserProfileDetails]?

    public init(
        nextToken: Swift.String? = nil,
        userProfiles: [SageMakerClientTypes.UserProfileDetails]? = nil
    )
    {
        self.nextToken = nextToken
        self.userProfiles = userProfiles
    }
}

extension SageMakerClientTypes {

    public enum ListWorkforcesSortByOptions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createdate
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ListWorkforcesSortByOptions] {
            return [
                .createdate,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createdate: return "CreateDate"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListWorkforcesInput {
    /// The maximum number of workforces returned in the response.
    public var maxResults: Swift.Int?
    /// A filter you can use to search for workforces using part of the workforce name.
    public var nameContains: Swift.String?
    /// A token to resume pagination.
    public var nextToken: Swift.String?
    /// Sort workforces using the workforce name or creation date.
    public var sortBy: SageMakerClientTypes.ListWorkforcesSortByOptions?
    /// Sort workforces in ascending or descending order.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ListWorkforcesSortByOptions? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListWorkforcesOutput {
    /// A token to resume pagination.
    public var nextToken: Swift.String?
    /// A list containing information about your workforce.
    /// This member is required.
    public var workforces: [SageMakerClientTypes.Workforce]?

    public init(
        nextToken: Swift.String? = nil,
        workforces: [SageMakerClientTypes.Workforce]? = nil
    )
    {
        self.nextToken = nextToken
        self.workforces = workforces
    }
}

extension SageMakerClientTypes {

    public enum ListWorkteamsSortByOptions: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case createdate
        case name
        case sdkUnknown(Swift.String)

        public static var allCases: [ListWorkteamsSortByOptions] {
            return [
                .createdate,
                .name
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .createdate: return "CreateDate"
            case .name: return "Name"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct ListWorkteamsInput {
    /// The maximum number of work teams to return in each page of the response.
    public var maxResults: Swift.Int?
    /// A string in the work team's name. This filter returns only work teams whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous ListWorkteams request was truncated, the response includes a NextToken. To retrieve the next set of labeling jobs, use the token in the next request.
    public var nextToken: Swift.String?
    /// The field to sort results by. The default is CreationTime.
    public var sortBy: SageMakerClientTypes.ListWorkteamsSortByOptions?
    /// The sort order for results. The default is Ascending.
    public var sortOrder: SageMakerClientTypes.SortOrder?

    public init(
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        sortBy: SageMakerClientTypes.ListWorkteamsSortByOptions? = nil,
        sortOrder: SageMakerClientTypes.SortOrder? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.sortBy = sortBy
        self.sortOrder = sortOrder
    }
}

public struct ListWorkteamsOutput {
    /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of work teams, use it in the subsequent request.
    public var nextToken: Swift.String?
    /// An array of Workteam objects, each describing a work team.
    /// This member is required.
    public var workteams: [SageMakerClientTypes.Workteam]?

    public init(
        nextToken: Swift.String? = nil,
        workteams: [SageMakerClientTypes.Workteam]? = nil
    )
    {
        self.nextToken = nextToken
        self.workteams = workteams
    }
}

extension SageMakerClientTypes {
    /// The properties of a model as returned by the [Search](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html) API.
    public struct Model {
        /// The containers in the inference pipeline.
        public var containers: [SageMakerClientTypes.ContainerDefinition]?
        /// A timestamp that indicates when the model was created.
        public var creationTime: Foundation.Date?
        /// A set of recommended deployment configurations for the model.
        public var deploymentRecommendation: SageMakerClientTypes.DeploymentRecommendation?
        /// Isolates the model container. No inbound or outbound network calls can be made to or from the model container.
        public var enableNetworkIsolation: Swift.Bool?
        /// The Amazon Resource Name (ARN) of the IAM role that you specified for the model.
        public var executionRoleArn: Swift.String?
        /// Specifies details about how containers in a multi-container endpoint are run.
        public var inferenceExecutionConfig: SageMakerClientTypes.InferenceExecutionConfig?
        /// The Amazon Resource Name (ARN) of the model.
        public var modelArn: Swift.String?
        /// The name of the model.
        public var modelName: Swift.String?
        /// Describes the container, as part of model definition.
        public var primaryContainer: SageMakerClientTypes.ContainerDefinition?
        /// A list of key-value pairs associated with the model. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference Guide.
        public var tags: [SageMakerClientTypes.Tag]?
        /// Specifies an Amazon Virtual Private Cloud (VPC) that your SageMaker jobs, hosted models, and compute resources have access to. You can control access to and from your resources by configuring a VPC. For more information, see [Give SageMaker Access to Resources in your Amazon VPC](https://docs.aws.amazon.com/sagemaker/latest/dg/infrastructure-give-access.html).
        public var vpcConfig: SageMakerClientTypes.VpcConfig?

        public init(
            containers: [SageMakerClientTypes.ContainerDefinition]? = nil,
            creationTime: Foundation.Date? = nil,
            deploymentRecommendation: SageMakerClientTypes.DeploymentRecommendation? = nil,
            enableNetworkIsolation: Swift.Bool? = nil,
            executionRoleArn: Swift.String? = nil,
            inferenceExecutionConfig: SageMakerClientTypes.InferenceExecutionConfig? = nil,
            modelArn: Swift.String? = nil,
            modelName: Swift.String? = nil,
            primaryContainer: SageMakerClientTypes.ContainerDefinition? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil,
            vpcConfig: SageMakerClientTypes.VpcConfig? = nil
        )
        {
            self.containers = containers
            self.creationTime = creationTime
            self.deploymentRecommendation = deploymentRecommendation
            self.enableNetworkIsolation = enableNetworkIsolation
            self.executionRoleArn = executionRoleArn
            self.inferenceExecutionConfig = inferenceExecutionConfig
            self.modelArn = modelArn
            self.modelName = modelName
            self.primaryContainer = primaryContainer
            self.tags = tags
            self.vpcConfig = vpcConfig
        }
    }

}

extension SageMakerClientTypes {
    /// An Amazon SageMaker Model Card.
    public struct ModelCard {
        /// The content of the model card. Content uses the [model card JSON schema](https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html#model-cards-json-schema) and provided as a string.
        public var content: Swift.String?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// The date and time that the model card was created.
        public var creationTime: Foundation.Date?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
        public var lastModifiedBy: SageMakerClientTypes.UserContext?
        /// The date and time that the model card was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the model card.
        public var modelCardArn: Swift.String?
        /// The unique name of the model card.
        public var modelCardName: Swift.String?
        /// The approval status of the model card within your organization. Different organizations might have different criteria for model card review and approval.
        ///
        /// * Draft: The model card is a work in progress.
        ///
        /// * PendingReview: The model card is pending review.
        ///
        /// * Approved: The model card is approved.
        ///
        /// * Archived: The model card is archived. No more updates should be made to the model card, but it can still be exported.
        public var modelCardStatus: SageMakerClientTypes.ModelCardStatus?
        /// The version of the model card.
        public var modelCardVersion: Swift.Int?
        /// The unique name (ID) of the model.
        public var modelId: Swift.String?
        /// The model package group that contains the model package. Only relevant for model cards created for model packages in the Amazon SageMaker Model Registry.
        public var modelPackageGroupName: Swift.String?
        /// The risk rating of the model. Different organizations might have different criteria for model card risk ratings. For more information, see [Risk ratings](https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards-risk-rating.html).
        public var riskRating: Swift.String?
        /// The security configuration used to protect model card data.
        public var securityConfig: SageMakerClientTypes.ModelCardSecurityConfig?
        /// Key-value pairs used to manage metadata for the model card.
        public var tags: [SageMakerClientTypes.Tag]?

        public init(
            content: Swift.String? = nil,
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: Foundation.Date? = nil,
            lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            modelCardArn: Swift.String? = nil,
            modelCardName: Swift.String? = nil,
            modelCardStatus: SageMakerClientTypes.ModelCardStatus? = nil,
            modelCardVersion: Swift.Int? = nil,
            modelId: Swift.String? = nil,
            modelPackageGroupName: Swift.String? = nil,
            riskRating: Swift.String? = nil,
            securityConfig: SageMakerClientTypes.ModelCardSecurityConfig? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil
        )
        {
            self.content = content
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.modelCardArn = modelCardArn
            self.modelCardName = modelCardName
            self.modelCardStatus = modelCardStatus
            self.modelCardVersion = modelCardVersion
            self.modelId = modelId
            self.modelPackageGroupName = modelPackageGroupName
            self.riskRating = riskRating
            self.securityConfig = securityConfig
            self.tags = tags
        }
    }

}

extension SageMakerClientTypes.ModelCard: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ModelCard(createdBy: \(Swift.String(describing: createdBy)), creationTime: \(Swift.String(describing: creationTime)), lastModifiedBy: \(Swift.String(describing: lastModifiedBy)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), modelCardArn: \(Swift.String(describing: modelCardArn)), modelCardName: \(Swift.String(describing: modelCardName)), modelCardStatus: \(Swift.String(describing: modelCardStatus)), modelCardVersion: \(Swift.String(describing: modelCardVersion)), modelId: \(Swift.String(describing: modelId)), modelPackageGroupName: \(Swift.String(describing: modelPackageGroupName)), riskRating: \(Swift.String(describing: riskRating)), securityConfig: \(Swift.String(describing: securityConfig)), tags: \(Swift.String(describing: tags)), content: \"CONTENT_REDACTED\")"}
}

extension SageMakerClientTypes {
    /// An endpoint that hosts a model displayed in the Amazon SageMaker Model Dashboard.
    public struct ModelDashboardEndpoint {
        /// A timestamp that indicates when the endpoint was created.
        /// This member is required.
        public var creationTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the endpoint.
        /// This member is required.
        public var endpointArn: Swift.String?
        /// The endpoint name.
        /// This member is required.
        public var endpointName: Swift.String?
        /// The endpoint status.
        /// This member is required.
        public var endpointStatus: SageMakerClientTypes.EndpointStatus?
        /// The last time the endpoint was modified.
        /// This member is required.
        public var lastModifiedTime: Foundation.Date?

        public init(
            creationTime: Foundation.Date? = nil,
            endpointArn: Swift.String? = nil,
            endpointName: Swift.String? = nil,
            endpointStatus: SageMakerClientTypes.EndpointStatus? = nil,
            lastModifiedTime: Foundation.Date? = nil
        )
        {
            self.creationTime = creationTime
            self.endpointArn = endpointArn
            self.endpointName = endpointName
            self.endpointStatus = endpointStatus
            self.lastModifiedTime = lastModifiedTime
        }
    }

}

extension SageMakerClientTypes {
    /// A batch transform job. For information about SageMaker batch transform, see [Use Batch Transform](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html).
    public struct TransformJob {
        /// The Amazon Resource Name (ARN) of the AutoML job that created the transform job.
        public var autoMLJobArn: Swift.String?
        /// Specifies the number of records to include in a mini-batch for an HTTP inference request. A record is a single unit of input data that inference can be made on. For example, a single line in a CSV file is a record.
        public var batchStrategy: SageMakerClientTypes.BatchStrategy?
        /// A timestamp that shows when the transform Job was created.
        public var creationTime: Foundation.Date?
        /// Configuration to control how SageMaker captures inference data for batch transform jobs.
        public var dataCaptureConfig: SageMakerClientTypes.BatchDataCaptureConfig?
        /// The data structure used to specify the data to be used for inference in a batch transform job and to associate the data that is relevant to the prediction results in the output. The input filter provided allows you to exclude input data that is not needed for inference in a batch transform job. The output filter provided allows you to include input data relevant to interpreting the predictions in the output from the job. For more information, see [Associate Prediction Results with their Corresponding Input Records](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html).
        public var dataProcessing: SageMakerClientTypes.DataProcessing?
        /// The environment variables to set in the Docker container. We support up to 16 key and values entries in the map.
        public var environment: [Swift.String: Swift.String]?
        /// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
        ///
        /// * [CreateProcessingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html)
        ///
        /// * [CreateTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
        ///
        /// * [CreateTransformJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html)
        public var experimentConfig: SageMakerClientTypes.ExperimentConfig?
        /// If the transform job failed, the reason it failed.
        public var failureReason: Swift.String?
        /// The Amazon Resource Name (ARN) of the labeling job that created the transform job.
        public var labelingJobArn: Swift.String?
        /// The maximum number of parallel requests that can be sent to each instance in a transform job. If MaxConcurrentTransforms is set to 0 or left unset, SageMaker checks the optional execution-parameters to determine the settings for your chosen algorithm. If the execution-parameters endpoint is not enabled, the default value is 1. For built-in algorithms, you don't need to set a value for MaxConcurrentTransforms.
        public var maxConcurrentTransforms: Swift.Int?
        /// The maximum allowed size of the payload, in MB. A payload is the data portion of a record (without metadata). The value in MaxPayloadInMB must be greater than, or equal to, the size of a single record. To estimate the size of a record in MB, divide the size of your dataset by the number of records. To ensure that the records fit within the maximum payload size, we recommend using a slightly larger value. The default value is 6 MB. For cases where the payload might be arbitrarily large and is transmitted using HTTP chunked encoding, set the value to 0. This feature works only in supported algorithms. Currently, SageMaker built-in algorithms do not support HTTP chunked encoding.
        public var maxPayloadInMB: Swift.Int?
        /// Configures the timeout and maximum number of retries for processing a transform job invocation.
        public var modelClientConfig: SageMakerClientTypes.ModelClientConfig?
        /// The name of the model associated with the transform job.
        public var modelName: Swift.String?
        /// A list of tags associated with the transform job.
        public var tags: [SageMakerClientTypes.Tag]?
        /// Indicates when the transform job has been completed, or has stopped or failed. You are billed for the time interval between this time and the value of TransformStartTime.
        public var transformEndTime: Foundation.Date?
        /// Describes the input source of a transform job and the way the transform job consumes it.
        public var transformInput: SageMakerClientTypes.TransformInput?
        /// The Amazon Resource Name (ARN) of the transform job.
        public var transformJobArn: Swift.String?
        /// The name of the transform job.
        public var transformJobName: Swift.String?
        /// The status of the transform job. Transform job statuses are:
        ///
        /// * InProgress - The job is in progress.
        ///
        /// * Completed - The job has completed.
        ///
        /// * Failed - The transform job has failed. To see the reason for the failure, see the FailureReason field in the response to a DescribeTransformJob call.
        ///
        /// * Stopping - The transform job is stopping.
        ///
        /// * Stopped - The transform job has stopped.
        public var transformJobStatus: SageMakerClientTypes.TransformJobStatus?
        /// Describes the results of a transform job.
        public var transformOutput: SageMakerClientTypes.TransformOutput?
        /// Describes the resources, including ML instance types and ML instance count, to use for transform job.
        public var transformResources: SageMakerClientTypes.TransformResources?
        /// Indicates when the transform job starts on ML instances. You are billed for the time interval between this time and the value of TransformEndTime.
        public var transformStartTime: Foundation.Date?

        public init(
            autoMLJobArn: Swift.String? = nil,
            batchStrategy: SageMakerClientTypes.BatchStrategy? = nil,
            creationTime: Foundation.Date? = nil,
            dataCaptureConfig: SageMakerClientTypes.BatchDataCaptureConfig? = nil,
            dataProcessing: SageMakerClientTypes.DataProcessing? = nil,
            environment: [Swift.String: Swift.String]? = nil,
            experimentConfig: SageMakerClientTypes.ExperimentConfig? = nil,
            failureReason: Swift.String? = nil,
            labelingJobArn: Swift.String? = nil,
            maxConcurrentTransforms: Swift.Int? = nil,
            maxPayloadInMB: Swift.Int? = nil,
            modelClientConfig: SageMakerClientTypes.ModelClientConfig? = nil,
            modelName: Swift.String? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil,
            transformEndTime: Foundation.Date? = nil,
            transformInput: SageMakerClientTypes.TransformInput? = nil,
            transformJobArn: Swift.String? = nil,
            transformJobName: Swift.String? = nil,
            transformJobStatus: SageMakerClientTypes.TransformJobStatus? = nil,
            transformOutput: SageMakerClientTypes.TransformOutput? = nil,
            transformResources: SageMakerClientTypes.TransformResources? = nil,
            transformStartTime: Foundation.Date? = nil
        )
        {
            self.autoMLJobArn = autoMLJobArn
            self.batchStrategy = batchStrategy
            self.creationTime = creationTime
            self.dataCaptureConfig = dataCaptureConfig
            self.dataProcessing = dataProcessing
            self.environment = environment
            self.experimentConfig = experimentConfig
            self.failureReason = failureReason
            self.labelingJobArn = labelingJobArn
            self.maxConcurrentTransforms = maxConcurrentTransforms
            self.maxPayloadInMB = maxPayloadInMB
            self.modelClientConfig = modelClientConfig
            self.modelName = modelName
            self.tags = tags
            self.transformEndTime = transformEndTime
            self.transformInput = transformInput
            self.transformJobArn = transformJobArn
            self.transformJobName = transformJobName
            self.transformJobStatus = transformJobStatus
            self.transformOutput = transformOutput
            self.transformResources = transformResources
            self.transformStartTime = transformStartTime
        }
    }

}

extension SageMakerClientTypes {
    /// The model card for a model displayed in the Amazon SageMaker Model Dashboard.
    public struct ModelDashboardModelCard {
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// A timestamp that indicates when the model card was created.
        public var creationTime: Foundation.Date?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
        public var lastModifiedBy: SageMakerClientTypes.UserContext?
        /// A timestamp that indicates when the model card was last updated.
        public var lastModifiedTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) for a model card.
        public var modelCardArn: Swift.String?
        /// The name of a model card.
        public var modelCardName: Swift.String?
        /// The model card status.
        public var modelCardStatus: SageMakerClientTypes.ModelCardStatus?
        /// The model card version.
        public var modelCardVersion: Swift.Int?
        /// For models created in SageMaker, this is the model ARN. For models created outside of SageMaker, this is a user-customized string.
        public var modelId: Swift.String?
        /// A model card's risk rating. Can be low, medium, or high.
        public var riskRating: Swift.String?
        /// The KMS Key ID (KMSKeyId) for encryption of model card information.
        public var securityConfig: SageMakerClientTypes.ModelCardSecurityConfig?
        /// The tags associated with a model card.
        public var tags: [SageMakerClientTypes.Tag]?

        public init(
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: Foundation.Date? = nil,
            lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            modelCardArn: Swift.String? = nil,
            modelCardName: Swift.String? = nil,
            modelCardStatus: SageMakerClientTypes.ModelCardStatus? = nil,
            modelCardVersion: Swift.Int? = nil,
            modelId: Swift.String? = nil,
            riskRating: Swift.String? = nil,
            securityConfig: SageMakerClientTypes.ModelCardSecurityConfig? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil
        )
        {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.modelCardArn = modelCardArn
            self.modelCardName = modelCardName
            self.modelCardStatus = modelCardStatus
            self.modelCardVersion = modelCardVersion
            self.modelId = modelId
            self.riskRating = riskRating
            self.securityConfig = securityConfig
            self.tags = tags
        }
    }

}

extension SageMakerClientTypes {
    /// A monitoring schedule for a model displayed in the Amazon SageMaker Model Dashboard.
    public struct ModelDashboardMonitoringSchedule {
        /// Input object for the batch transform job.
        public var batchTransformInput: SageMakerClientTypes.BatchTransformInput?
        /// A timestamp that indicates when the monitoring schedule was created.
        public var creationTime: Foundation.Date?
        /// The endpoint which is monitored.
        public var endpointName: Swift.String?
        /// If a monitoring job failed, provides the reason.
        public var failureReason: Swift.String?
        /// A timestamp that indicates when the monitoring schedule was last updated.
        public var lastModifiedTime: Foundation.Date?
        /// Summary of information about the last monitoring job to run.
        public var lastMonitoringExecutionSummary: SageMakerClientTypes.MonitoringExecutionSummary?
        /// A JSON array where each element is a summary for a monitoring alert.
        public var monitoringAlertSummaries: [SageMakerClientTypes.MonitoringAlertSummary]?
        /// The Amazon Resource Name (ARN) of a monitoring schedule.
        public var monitoringScheduleArn: Swift.String?
        /// Configures the monitoring schedule and defines the monitoring job.
        public var monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig?
        /// The name of a monitoring schedule.
        public var monitoringScheduleName: Swift.String?
        /// The status of the monitoring schedule.
        public var monitoringScheduleStatus: SageMakerClientTypes.ScheduleStatus?
        /// The monitor type of a model monitor.
        public var monitoringType: SageMakerClientTypes.MonitoringType?

        public init(
            batchTransformInput: SageMakerClientTypes.BatchTransformInput? = nil,
            creationTime: Foundation.Date? = nil,
            endpointName: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            lastMonitoringExecutionSummary: SageMakerClientTypes.MonitoringExecutionSummary? = nil,
            monitoringAlertSummaries: [SageMakerClientTypes.MonitoringAlertSummary]? = nil,
            monitoringScheduleArn: Swift.String? = nil,
            monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig? = nil,
            monitoringScheduleName: Swift.String? = nil,
            monitoringScheduleStatus: SageMakerClientTypes.ScheduleStatus? = nil,
            monitoringType: SageMakerClientTypes.MonitoringType? = nil
        )
        {
            self.batchTransformInput = batchTransformInput
            self.creationTime = creationTime
            self.endpointName = endpointName
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.lastMonitoringExecutionSummary = lastMonitoringExecutionSummary
            self.monitoringAlertSummaries = monitoringAlertSummaries
            self.monitoringScheduleArn = monitoringScheduleArn
            self.monitoringScheduleConfig = monitoringScheduleConfig
            self.monitoringScheduleName = monitoringScheduleName
            self.monitoringScheduleStatus = monitoringScheduleStatus
            self.monitoringType = monitoringType
        }
    }

}

extension SageMakerClientTypes {
    /// A model displayed in the Amazon SageMaker Model Dashboard.
    public struct ModelDashboardModel {
        /// The endpoints that host a model.
        public var endpoints: [SageMakerClientTypes.ModelDashboardEndpoint]?
        /// A batch transform job. For information about SageMaker batch transform, see [Use Batch Transform](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html).
        public var lastBatchTransformJob: SageMakerClientTypes.TransformJob?
        /// A model displayed in the Model Dashboard.
        public var model: SageMakerClientTypes.Model?
        /// The model card for a model.
        public var modelCard: SageMakerClientTypes.ModelDashboardModelCard?
        /// The monitoring schedules for a model.
        public var monitoringSchedules: [SageMakerClientTypes.ModelDashboardMonitoringSchedule]?

        public init(
            endpoints: [SageMakerClientTypes.ModelDashboardEndpoint]? = nil,
            lastBatchTransformJob: SageMakerClientTypes.TransformJob? = nil,
            model: SageMakerClientTypes.Model? = nil,
            modelCard: SageMakerClientTypes.ModelDashboardModelCard? = nil,
            monitoringSchedules: [SageMakerClientTypes.ModelDashboardMonitoringSchedule]? = nil
        )
        {
            self.endpoints = endpoints
            self.lastBatchTransformJob = lastBatchTransformJob
            self.model = model
            self.modelCard = modelCard
            self.monitoringSchedules = monitoringSchedules
        }
    }

}

extension SageMakerClientTypes {
    /// A versioned model that can be deployed for SageMaker inference.
    public struct ModelPackage {
        /// An array of additional Inference Specification objects.
        public var additionalInferenceSpecifications: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]?
        /// A description provided when the model approval is set.
        public var approvalDescription: Swift.String?
        /// Whether the model package is to be certified to be listed on Amazon Web Services Marketplace. For information about listing model packages on Amazon Web Services Marketplace, see [List Your Algorithm or Model Package on Amazon Web Services Marketplace](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-mkt-list.html).
        public var certifyForMarketplace: Swift.Bool?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// The time that the model package was created.
        public var creationTime: Foundation.Date?
        /// The metadata properties for the model package.
        public var customerMetadataProperties: [Swift.String: Swift.String]?
        /// The machine learning domain of your model package and its components. Common machine learning domains include computer vision and natural language processing.
        public var domain: Swift.String?
        /// Represents the drift check baselines that can be used when the model monitor is set using the model package.
        public var driftCheckBaselines: SageMakerClientTypes.DriftCheckBaselines?
        /// Defines how to perform inference generation after a training job is run.
        public var inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, or project.
        public var lastModifiedBy: SageMakerClientTypes.UserContext?
        /// The last time the model package was modified.
        public var lastModifiedTime: Foundation.Date?
        /// Metadata properties of the tracking entity, trial, or trial component.
        public var metadataProperties: SageMakerClientTypes.MetadataProperties?
        /// The approval status of the model. This can be one of the following values.
        ///
        /// * APPROVED - The model is approved
        ///
        /// * REJECTED - The model is rejected.
        ///
        /// * PENDING_MANUAL_APPROVAL - The model is waiting for manual approval.
        public var modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
        /// The model card associated with the model package. Since ModelPackageModelCard is tied to a model package, it is a specific usage of a model card and its schema is simplified compared to the schema of ModelCard. The ModelPackageModelCard schema does not include model_package_details, and model_overview is composed of the model_creator and model_artifact properties. For more information about the model package model card schema, see [Model package model card schema](https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html#model-card-schema). For more information about the model card associated with the model package, see [View the Details of a Model Version](https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html).
        public var modelCard: SageMakerClientTypes.ModelPackageModelCard?
        /// Metrics for the model.
        public var modelMetrics: SageMakerClientTypes.ModelMetrics?
        /// The Amazon Resource Name (ARN) of the model package.
        public var modelPackageArn: Swift.String?
        /// The description of the model package.
        public var modelPackageDescription: Swift.String?
        /// The model group to which the model belongs.
        public var modelPackageGroupName: Swift.String?
        /// The name of the model.
        public var modelPackageName: Swift.String?
        /// The status of the model package. This can be one of the following values.
        ///
        /// * PENDING - The model package is pending being created.
        ///
        /// * IN_PROGRESS - The model package is in the process of being created.
        ///
        /// * COMPLETED - The model package was successfully created.
        ///
        /// * FAILED - The model package failed.
        ///
        /// * DELETING - The model package is in the process of being deleted.
        public var modelPackageStatus: SageMakerClientTypes.ModelPackageStatus?
        /// Specifies the validation and image scan statuses of the model package.
        public var modelPackageStatusDetails: SageMakerClientTypes.ModelPackageStatusDetails?
        /// The version number of a versioned model.
        public var modelPackageVersion: Swift.Int?
        /// The Amazon Simple Storage Service path where the sample payload are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix).
        public var samplePayloadUrl: Swift.String?
        /// An optional Key Management Service key to encrypt, decrypt, and re-encrypt model package information for regulated workloads with highly sensitive data.
        public var securityConfig: SageMakerClientTypes.ModelPackageSecurityConfig?
        /// Indicates if you want to skip model validation.
        public var skipModelValidation: SageMakerClientTypes.SkipModelValidation?
        /// A list of algorithms that were used to create a model package.
        public var sourceAlgorithmSpecification: SageMakerClientTypes.SourceAlgorithmSpecification?
        /// The URI of the source for the model package.
        public var sourceUri: Swift.String?
        /// A list of the tags associated with the model package. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference Guide.
        public var tags: [SageMakerClientTypes.Tag]?
        /// The machine learning task your model package accomplishes. Common machine learning tasks include object detection and image classification.
        public var task: Swift.String?
        /// Specifies batch transform jobs that SageMaker runs to validate your model package.
        public var validationSpecification: SageMakerClientTypes.ModelPackageValidationSpecification?

        public init(
            additionalInferenceSpecifications: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]? = nil,
            approvalDescription: Swift.String? = nil,
            certifyForMarketplace: Swift.Bool? = nil,
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: Foundation.Date? = nil,
            customerMetadataProperties: [Swift.String: Swift.String]? = nil,
            domain: Swift.String? = nil,
            driftCheckBaselines: SageMakerClientTypes.DriftCheckBaselines? = nil,
            inferenceSpecification: SageMakerClientTypes.InferenceSpecification? = nil,
            lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
            modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus? = nil,
            modelCard: SageMakerClientTypes.ModelPackageModelCard? = nil,
            modelMetrics: SageMakerClientTypes.ModelMetrics? = nil,
            modelPackageArn: Swift.String? = nil,
            modelPackageDescription: Swift.String? = nil,
            modelPackageGroupName: Swift.String? = nil,
            modelPackageName: Swift.String? = nil,
            modelPackageStatus: SageMakerClientTypes.ModelPackageStatus? = nil,
            modelPackageStatusDetails: SageMakerClientTypes.ModelPackageStatusDetails? = nil,
            modelPackageVersion: Swift.Int? = nil,
            samplePayloadUrl: Swift.String? = nil,
            securityConfig: SageMakerClientTypes.ModelPackageSecurityConfig? = nil,
            skipModelValidation: SageMakerClientTypes.SkipModelValidation? = nil,
            sourceAlgorithmSpecification: SageMakerClientTypes.SourceAlgorithmSpecification? = nil,
            sourceUri: Swift.String? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil,
            task: Swift.String? = nil,
            validationSpecification: SageMakerClientTypes.ModelPackageValidationSpecification? = nil
        )
        {
            self.additionalInferenceSpecifications = additionalInferenceSpecifications
            self.approvalDescription = approvalDescription
            self.certifyForMarketplace = certifyForMarketplace
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.customerMetadataProperties = customerMetadataProperties
            self.domain = domain
            self.driftCheckBaselines = driftCheckBaselines
            self.inferenceSpecification = inferenceSpecification
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.metadataProperties = metadataProperties
            self.modelApprovalStatus = modelApprovalStatus
            self.modelCard = modelCard
            self.modelMetrics = modelMetrics
            self.modelPackageArn = modelPackageArn
            self.modelPackageDescription = modelPackageDescription
            self.modelPackageGroupName = modelPackageGroupName
            self.modelPackageName = modelPackageName
            self.modelPackageStatus = modelPackageStatus
            self.modelPackageStatusDetails = modelPackageStatusDetails
            self.modelPackageVersion = modelPackageVersion
            self.samplePayloadUrl = samplePayloadUrl
            self.securityConfig = securityConfig
            self.skipModelValidation = skipModelValidation
            self.sourceAlgorithmSpecification = sourceAlgorithmSpecification
            self.sourceUri = sourceUri
            self.tags = tags
            self.task = task
            self.validationSpecification = validationSpecification
        }
    }

}

extension SageMakerClientTypes {
    /// A group of versioned models in the model registry.
    public struct ModelPackageGroup {
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// The time that the model group was created.
        public var creationTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the model group.
        public var modelPackageGroupArn: Swift.String?
        /// The description for the model group.
        public var modelPackageGroupDescription: Swift.String?
        /// The name of the model group.
        public var modelPackageGroupName: Swift.String?
        /// The status of the model group. This can be one of the following values.
        ///
        /// * PENDING - The model group is pending being created.
        ///
        /// * IN_PROGRESS - The model group is in the process of being created.
        ///
        /// * COMPLETED - The model group was successfully created.
        ///
        /// * FAILED - The model group failed.
        ///
        /// * DELETING - The model group is in the process of being deleted.
        ///
        /// * DELETE_FAILED - SageMaker failed to delete the model group.
        public var modelPackageGroupStatus: SageMakerClientTypes.ModelPackageGroupStatus?
        /// A list of the tags associated with the model group. For more information, see [Tagging Amazon Web Services resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html) in the Amazon Web Services General Reference Guide.
        public var tags: [SageMakerClientTypes.Tag]?

        public init(
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: Foundation.Date? = nil,
            modelPackageGroupArn: Swift.String? = nil,
            modelPackageGroupDescription: Swift.String? = nil,
            modelPackageGroupName: Swift.String? = nil,
            modelPackageGroupStatus: SageMakerClientTypes.ModelPackageGroupStatus? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil
        )
        {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.modelPackageGroupArn = modelPackageGroupArn
            self.modelPackageGroupDescription = modelPackageGroupDescription
            self.modelPackageGroupName = modelPackageGroupName
            self.modelPackageGroupStatus = modelPackageGroupStatus
            self.tags = tags
        }
    }

}

extension SageMakerClientTypes {

    public enum ModelVariantAction: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case promote
        case remove
        case retain
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelVariantAction] {
            return [
                .promote,
                .remove,
                .retain
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .promote: return "Promote"
            case .remove: return "Remove"
            case .retain: return "Retain"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// A list of nested [Filter](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Filter.html) objects. A resource must satisfy the conditions of all filters to be included in the results returned from the [Search](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html) API. For example, to filter on a training job's InputDataConfig property with a specific channel name and S3Uri prefix, define the following filters:
    ///
    /// * '{Name:"InputDataConfig.ChannelName", "Operator":"Equals", "Value":"train"}',
    ///
    /// * '{Name:"InputDataConfig.DataSource.S3DataSource.S3Uri", "Operator":"Contains", "Value":"mybucket/catdata"}'
    public struct NestedFilters {
        /// A list of filters. Each filter acts on a property. Filters must contain at least one Filters value. For example, a NestedFilters call might include a filter on the PropertyName parameter of the InputDataConfig property: InputDataConfig.DataSource.S3DataSource.S3Uri.
        /// This member is required.
        public var filters: [SageMakerClientTypes.Filter]?
        /// The name of the property to use in the nested filters. The value must match a listed property name, such as InputDataConfig.
        /// This member is required.
        public var nestedPropertyName: Swift.String?

        public init(
            filters: [SageMakerClientTypes.Filter]? = nil,
            nestedPropertyName: Swift.String? = nil
        )
        {
            self.filters = filters
            self.nestedPropertyName = nestedPropertyName
        }
    }

}

extension SageMakerClientTypes {
    /// Updates the feature group online store configuration.
    public struct OnlineStoreConfigUpdate {
        /// Time to live duration, where the record is hard deleted after the expiration time is reached; ExpiresAt = EventTime + TtlDuration. For information on HardDelete, see the [DeleteRecord](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_DeleteRecord.html) API in the Amazon SageMaker API Reference guide.
        public var ttlDuration: SageMakerClientTypes.TtlDuration?

        public init(
            ttlDuration: SageMakerClientTypes.TtlDuration? = nil
        )
        {
            self.ttlDuration = ttlDuration
        }
    }

}

extension SageMakerClientTypes {
    /// The trial that a trial component is associated with and the experiment the trial is part of. A component might not be associated with a trial. A component can be associated with multiple trials.
    public struct Parent {
        /// The name of the experiment.
        public var experimentName: Swift.String?
        /// The name of the trial.
        public var trialName: Swift.String?

        public init(
            experimentName: Swift.String? = nil,
            trialName: Swift.String? = nil
        )
        {
            self.experimentName = experimentName
            self.trialName = trialName
        }
    }

}

extension SageMakerClientTypes {
    /// A SageMaker Model Building Pipeline instance.
    public struct Pipeline {
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// The creation time of the pipeline.
        public var creationTime: Foundation.Date?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
        public var lastModifiedBy: SageMakerClientTypes.UserContext?
        /// The time that the pipeline was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The time when the pipeline was last run.
        public var lastRunTime: Foundation.Date?
        /// The parallelism configuration applied to the pipeline.
        public var parallelismConfiguration: SageMakerClientTypes.ParallelismConfiguration?
        /// The Amazon Resource Name (ARN) of the pipeline.
        public var pipelineArn: Swift.String?
        /// The description of the pipeline.
        public var pipelineDescription: Swift.String?
        /// The display name of the pipeline.
        public var pipelineDisplayName: Swift.String?
        /// The name of the pipeline.
        public var pipelineName: Swift.String?
        /// The status of the pipeline.
        public var pipelineStatus: SageMakerClientTypes.PipelineStatus?
        /// The Amazon Resource Name (ARN) of the role that created the pipeline.
        public var roleArn: Swift.String?
        /// A list of tags that apply to the pipeline.
        public var tags: [SageMakerClientTypes.Tag]?

        public init(
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: Foundation.Date? = nil,
            lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            lastRunTime: Foundation.Date? = nil,
            parallelismConfiguration: SageMakerClientTypes.ParallelismConfiguration? = nil,
            pipelineArn: Swift.String? = nil,
            pipelineDescription: Swift.String? = nil,
            pipelineDisplayName: Swift.String? = nil,
            pipelineName: Swift.String? = nil,
            pipelineStatus: SageMakerClientTypes.PipelineStatus? = nil,
            roleArn: Swift.String? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil
        )
        {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.lastRunTime = lastRunTime
            self.parallelismConfiguration = parallelismConfiguration
            self.pipelineArn = pipelineArn
            self.pipelineDescription = pipelineDescription
            self.pipelineDisplayName = pipelineDisplayName
            self.pipelineName = pipelineName
            self.pipelineStatus = pipelineStatus
            self.roleArn = roleArn
            self.tags = tags
        }
    }

}

extension SageMakerClientTypes {
    /// An execution of a pipeline.
    public struct PipelineExecution {
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// The creation time of the pipeline execution.
        public var creationTime: Foundation.Date?
        /// If the execution failed, a message describing why.
        public var failureReason: Swift.String?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
        public var lastModifiedBy: SageMakerClientTypes.UserContext?
        /// The time that the pipeline execution was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The parallelism configuration applied to the pipeline execution.
        public var parallelismConfiguration: SageMakerClientTypes.ParallelismConfiguration?
        /// The Amazon Resource Name (ARN) of the pipeline that was executed.
        public var pipelineArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the pipeline execution.
        public var pipelineExecutionArn: Swift.String?
        /// The description of the pipeline execution.
        public var pipelineExecutionDescription: Swift.String?
        /// The display name of the pipeline execution.
        public var pipelineExecutionDisplayName: Swift.String?
        /// The status of the pipeline status.
        public var pipelineExecutionStatus: SageMakerClientTypes.PipelineExecutionStatus?
        /// Specifies the names of the experiment and trial created by a pipeline.
        public var pipelineExperimentConfig: SageMakerClientTypes.PipelineExperimentConfig?
        /// Contains a list of pipeline parameters. This list can be empty.
        public var pipelineParameters: [SageMakerClientTypes.Parameter]?
        /// The selective execution configuration applied to the pipeline run.
        public var selectiveExecutionConfig: SageMakerClientTypes.SelectiveExecutionConfig?

        public init(
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: Foundation.Date? = nil,
            failureReason: Swift.String? = nil,
            lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            parallelismConfiguration: SageMakerClientTypes.ParallelismConfiguration? = nil,
            pipelineArn: Swift.String? = nil,
            pipelineExecutionArn: Swift.String? = nil,
            pipelineExecutionDescription: Swift.String? = nil,
            pipelineExecutionDisplayName: Swift.String? = nil,
            pipelineExecutionStatus: SageMakerClientTypes.PipelineExecutionStatus? = nil,
            pipelineExperimentConfig: SageMakerClientTypes.PipelineExperimentConfig? = nil,
            pipelineParameters: [SageMakerClientTypes.Parameter]? = nil,
            selectiveExecutionConfig: SageMakerClientTypes.SelectiveExecutionConfig? = nil
        )
        {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.parallelismConfiguration = parallelismConfiguration
            self.pipelineArn = pipelineArn
            self.pipelineExecutionArn = pipelineExecutionArn
            self.pipelineExecutionDescription = pipelineExecutionDescription
            self.pipelineExecutionDisplayName = pipelineExecutionDisplayName
            self.pipelineExecutionStatus = pipelineExecutionStatus
            self.pipelineExperimentConfig = pipelineExperimentConfig
            self.pipelineParameters = pipelineParameters
            self.selectiveExecutionConfig = selectiveExecutionConfig
        }
    }

}

extension SageMakerClientTypes {
    /// An Amazon SageMaker processing job that is used to analyze data and evaluate models. For more information, see [Process Data and Evaluate Models](https://docs.aws.amazon.com/sagemaker/latest/dg/processing-job.html).
    public struct ProcessingJob {
        /// Configuration to run a processing job in a specified container image.
        public var appSpecification: SageMakerClientTypes.AppSpecification?
        /// The Amazon Resource Name (ARN) of the AutoML job associated with this processing job.
        public var autoMLJobArn: Swift.String?
        /// The time the processing job was created.
        public var creationTime: Foundation.Date?
        /// Sets the environment variables in the Docker container.
        public var environment: [Swift.String: Swift.String]?
        /// A string, up to one KB in size, that contains metadata from the processing container when the processing job exits.
        public var exitMessage: Swift.String?
        /// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
        ///
        /// * [CreateProcessingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html)
        ///
        /// * [CreateTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
        ///
        /// * [CreateTransformJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html)
        public var experimentConfig: SageMakerClientTypes.ExperimentConfig?
        /// A string, up to one KB in size, that contains the reason a processing job failed, if it failed.
        public var failureReason: Swift.String?
        /// The time the processing job was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The ARN of a monitoring schedule for an endpoint associated with this processing job.
        public var monitoringScheduleArn: Swift.String?
        /// Networking options for a job, such as network traffic encryption between containers, whether to allow inbound and outbound network calls to and from containers, and the VPC subnets and security groups to use for VPC-enabled jobs.
        public var networkConfig: SageMakerClientTypes.NetworkConfig?
        /// The time that the processing job ended.
        public var processingEndTime: Foundation.Date?
        /// List of input configurations for the processing job.
        public var processingInputs: [SageMakerClientTypes.ProcessingInput]?
        /// The ARN of the processing job.
        public var processingJobArn: Swift.String?
        /// The name of the processing job.
        public var processingJobName: Swift.String?
        /// The status of the processing job.
        public var processingJobStatus: SageMakerClientTypes.ProcessingJobStatus?
        /// Configuration for uploading output from the processing container.
        public var processingOutputConfig: SageMakerClientTypes.ProcessingOutputConfig?
        /// Identifies the resources, ML compute instances, and ML storage volumes to deploy for a processing job. In distributed training, you specify more than one instance.
        public var processingResources: SageMakerClientTypes.ProcessingResources?
        /// The time that the processing job started.
        public var processingStartTime: Foundation.Date?
        /// The ARN of the role used to create the processing job.
        public var roleArn: Swift.String?
        /// Configures conditions under which the processing job should be stopped, such as how long the processing job has been running. After the condition is met, the processing job is stopped.
        public var stoppingCondition: SageMakerClientTypes.ProcessingStoppingCondition?
        /// An array of key-value pairs. For more information, see [Using Cost Allocation Tags](https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL) in the Amazon Web Services Billing and Cost Management User Guide.
        public var tags: [SageMakerClientTypes.Tag]?
        /// The ARN of the training job associated with this processing job.
        public var trainingJobArn: Swift.String?

        public init(
            appSpecification: SageMakerClientTypes.AppSpecification? = nil,
            autoMLJobArn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            environment: [Swift.String: Swift.String]? = nil,
            exitMessage: Swift.String? = nil,
            experimentConfig: SageMakerClientTypes.ExperimentConfig? = nil,
            failureReason: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            monitoringScheduleArn: Swift.String? = nil,
            networkConfig: SageMakerClientTypes.NetworkConfig? = nil,
            processingEndTime: Foundation.Date? = nil,
            processingInputs: [SageMakerClientTypes.ProcessingInput]? = nil,
            processingJobArn: Swift.String? = nil,
            processingJobName: Swift.String? = nil,
            processingJobStatus: SageMakerClientTypes.ProcessingJobStatus? = nil,
            processingOutputConfig: SageMakerClientTypes.ProcessingOutputConfig? = nil,
            processingResources: SageMakerClientTypes.ProcessingResources? = nil,
            processingStartTime: Foundation.Date? = nil,
            roleArn: Swift.String? = nil,
            stoppingCondition: SageMakerClientTypes.ProcessingStoppingCondition? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil,
            trainingJobArn: Swift.String? = nil
        )
        {
            self.appSpecification = appSpecification
            self.autoMLJobArn = autoMLJobArn
            self.creationTime = creationTime
            self.environment = environment
            self.exitMessage = exitMessage
            self.experimentConfig = experimentConfig
            self.failureReason = failureReason
            self.lastModifiedTime = lastModifiedTime
            self.monitoringScheduleArn = monitoringScheduleArn
            self.networkConfig = networkConfig
            self.processingEndTime = processingEndTime
            self.processingInputs = processingInputs
            self.processingJobArn = processingJobArn
            self.processingJobName = processingJobName
            self.processingJobStatus = processingJobStatus
            self.processingOutputConfig = processingOutputConfig
            self.processingResources = processingResources
            self.processingStartTime = processingStartTime
            self.roleArn = roleArn
            self.stoppingCondition = stoppingCondition
            self.tags = tags
            self.trainingJobArn = trainingJobArn
        }
    }

}

extension SageMakerClientTypes {
    /// Configuration information for updating the Amazon SageMaker Debugger profile parameters, system and framework metrics configurations, and storage paths.
    public struct ProfilerConfigForUpdate {
        /// To turn off Amazon SageMaker Debugger monitoring and profiling while a training job is in progress, set to True.
        public var disableProfiler: Swift.Bool?
        /// A time interval for capturing system metrics in milliseconds. Available values are 100, 200, 500, 1000 (1 second), 5000 (5 seconds), and 60000 (1 minute) milliseconds. The default value is 500 milliseconds.
        public var profilingIntervalInMilliseconds: Swift.Int?
        /// Configuration information for capturing framework metrics. Available key strings for different profiling options are DetailedProfilingConfig, PythonProfilingConfig, and DataLoaderProfilingConfig. The following codes are configuration structures for the ProfilingParameters parameter. To learn more about how to configure the ProfilingParameters parameter, see [Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
        public var profilingParameters: [Swift.String: Swift.String]?
        /// Path to Amazon S3 storage location for system and framework metrics.
        public var s3OutputPath: Swift.String?

        public init(
            disableProfiler: Swift.Bool? = nil,
            profilingIntervalInMilliseconds: Swift.Int? = nil,
            profilingParameters: [Swift.String: Swift.String]? = nil,
            s3OutputPath: Swift.String? = nil
        )
        {
            self.disableProfiler = disableProfiler
            self.profilingIntervalInMilliseconds = profilingIntervalInMilliseconds
            self.profilingParameters = profilingParameters
            self.s3OutputPath = s3OutputPath
        }
    }

}

extension SageMakerClientTypes {
    /// The properties of a project as returned by the Search API.
    public struct Project {
        /// Who created the project.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// A timestamp specifying when the project was created.
        public var creationTime: Foundation.Date?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
        public var lastModifiedBy: SageMakerClientTypes.UserContext?
        /// A timestamp container for when the project was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the project.
        public var projectArn: Swift.String?
        /// The description of the project.
        public var projectDescription: Swift.String?
        /// The ID of the project.
        public var projectId: Swift.String?
        /// The name of the project.
        public var projectName: Swift.String?
        /// The status of the project.
        public var projectStatus: SageMakerClientTypes.ProjectStatus?
        /// Details of a provisioned service catalog product. For information about service catalog, see [What is Amazon Web Services Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html).
        public var serviceCatalogProvisionedProductDetails: SageMakerClientTypes.ServiceCatalogProvisionedProductDetails?
        /// Details that you specify to provision a service catalog product. For information about service catalog, see [What is Amazon Web Services Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html).
        public var serviceCatalogProvisioningDetails: SageMakerClientTypes.ServiceCatalogProvisioningDetails?
        /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
        public var tags: [SageMakerClientTypes.Tag]?

        public init(
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: Foundation.Date? = nil,
            lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            projectArn: Swift.String? = nil,
            projectDescription: Swift.String? = nil,
            projectId: Swift.String? = nil,
            projectName: Swift.String? = nil,
            projectStatus: SageMakerClientTypes.ProjectStatus? = nil,
            serviceCatalogProvisionedProductDetails: SageMakerClientTypes.ServiceCatalogProvisionedProductDetails? = nil,
            serviceCatalogProvisioningDetails: SageMakerClientTypes.ServiceCatalogProvisioningDetails? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil
        )
        {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.projectArn = projectArn
            self.projectDescription = projectDescription
            self.projectId = projectId
            self.projectName = projectName
            self.projectStatus = projectStatus
            self.serviceCatalogProvisionedProductDetails = serviceCatalogProvisionedProductDetails
            self.serviceCatalogProvisioningDetails = serviceCatalogProvisioningDetails
            self.tags = tags
        }
    }

}

public struct PutModelPackageGroupPolicyInput {
    /// The name of the model group to add a resource policy to.
    /// This member is required.
    public var modelPackageGroupName: Swift.String?
    /// The resource policy for the model group.
    /// This member is required.
    public var resourcePolicy: Swift.String?

    public init(
        modelPackageGroupName: Swift.String? = nil,
        resourcePolicy: Swift.String? = nil
    )
    {
        self.modelPackageGroupName = modelPackageGroupName
        self.resourcePolicy = resourcePolicy
    }
}

public struct PutModelPackageGroupPolicyOutput {
    /// The Amazon Resource Name (ARN) of the model package group.
    /// This member is required.
    public var modelPackageGroupArn: Swift.String?

    public init(
        modelPackageGroupArn: Swift.String? = nil
    )
    {
        self.modelPackageGroupArn = modelPackageGroupArn
    }
}

extension SageMakerClientTypes {
    /// A set of filters to narrow the set of lineage entities connected to the StartArn(s) returned by the QueryLineage API action.
    public struct QueryFilters {
        /// Filter the lineage entities connected to the StartArn(s) after the create date.
        public var createdAfter: Foundation.Date?
        /// Filter the lineage entities connected to the StartArn(s) by created date.
        public var createdBefore: Foundation.Date?
        /// Filter the lineage entities connected to the StartArn(s) by the type of the lineage entity.
        public var lineageTypes: [SageMakerClientTypes.LineageType]?
        /// Filter the lineage entities connected to the StartArn(s) after the last modified date.
        public var modifiedAfter: Foundation.Date?
        /// Filter the lineage entities connected to the StartArn(s) before the last modified date.
        public var modifiedBefore: Foundation.Date?
        /// Filter the lineage entities connected to the StartArn(s) by a set if property key value pairs. If multiple pairs are provided, an entity is included in the results if it matches any of the provided pairs.
        public var properties: [Swift.String: Swift.String]?
        /// Filter the lineage entities connected to the StartArn by type. For example: DataSet, Model, Endpoint, or ModelDeployment.
        public var types: [Swift.String]?

        public init(
            createdAfter: Foundation.Date? = nil,
            createdBefore: Foundation.Date? = nil,
            lineageTypes: [SageMakerClientTypes.LineageType]? = nil,
            modifiedAfter: Foundation.Date? = nil,
            modifiedBefore: Foundation.Date? = nil,
            properties: [Swift.String: Swift.String]? = nil,
            types: [Swift.String]? = nil
        )
        {
            self.createdAfter = createdAfter
            self.createdBefore = createdBefore
            self.lineageTypes = lineageTypes
            self.modifiedAfter = modifiedAfter
            self.modifiedBefore = modifiedBefore
            self.properties = properties
            self.types = types
        }
    }

}

public struct QueryLineageInput {
    /// Associations between lineage entities have a direction. This parameter determines the direction from the StartArn(s) that the query traverses.
    public var direction: SageMakerClientTypes.Direction?
    /// A set of filtering parameters that allow you to specify which entities should be returned.
    ///
    /// * Properties - Key-value pairs to match on the lineage entities' properties.
    ///
    /// * LineageTypes - A set of lineage entity types to match on. For example: TrialComponent, Artifact, or Context.
    ///
    /// * CreatedBefore - Filter entities created before this date.
    ///
    /// * ModifiedBefore - Filter entities modified before this date.
    ///
    /// * ModifiedAfter - Filter entities modified after this date.
    public var filters: SageMakerClientTypes.QueryFilters?
    /// Setting this value to True retrieves not only the entities of interest but also the [Associations](https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking-entities.html) and lineage entities on the path. Set to False to only return lineage entities that match your query.
    public var includeEdges: Swift.Bool?
    /// The maximum depth in lineage relationships from the StartArns that are traversed. Depth is a measure of the number of Associations from the StartArn entity to the matched results.
    public var maxDepth: Swift.Int?
    /// Limits the number of vertices in the results. Use the NextToken in a response to to retrieve the next page of results.
    public var maxResults: Swift.Int?
    /// Limits the number of vertices in the request. Use the NextToken in a response to to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// A list of resource Amazon Resource Name (ARN) that represent the starting point for your lineage query.
    public var startArns: [Swift.String]?

    public init(
        direction: SageMakerClientTypes.Direction? = nil,
        filters: SageMakerClientTypes.QueryFilters? = nil,
        includeEdges: Swift.Bool? = nil,
        maxDepth: Swift.Int? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        startArns: [Swift.String]? = nil
    )
    {
        self.direction = direction
        self.filters = filters
        self.includeEdges = includeEdges
        self.maxDepth = maxDepth
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.startArns = startArns
    }
}

extension SageMakerClientTypes {
    /// A lineage entity connected to the starting entity(ies).
    public struct Vertex {
        /// The Amazon Resource Name (ARN) of the lineage entity resource.
        public var arn: Swift.String?
        /// The type of resource of the lineage entity.
        public var lineageType: SageMakerClientTypes.LineageType?
        /// The type of the lineage entity resource. For example: DataSet, Model, Endpoint, etc...
        public var type: Swift.String?

        public init(
            arn: Swift.String? = nil,
            lineageType: SageMakerClientTypes.LineageType? = nil,
            type: Swift.String? = nil
        )
        {
            self.arn = arn
            self.lineageType = lineageType
            self.type = type
        }
    }

}

public struct QueryLineageOutput {
    /// A list of edges that connect vertices in the response.
    public var edges: [SageMakerClientTypes.Edge]?
    /// Limits the number of vertices in the response. Use the NextToken in a response to to retrieve the next page of results.
    public var nextToken: Swift.String?
    /// A list of vertices connected to the start entity(ies) in the lineage graph.
    public var vertices: [SageMakerClientTypes.Vertex]?

    public init(
        edges: [SageMakerClientTypes.Edge]? = nil,
        nextToken: Swift.String? = nil,
        vertices: [SageMakerClientTypes.Vertex]? = nil
    )
    {
        self.edges = edges
        self.nextToken = nextToken
        self.vertices = vertices
    }
}

public struct RegisterDevicesInput {
    /// The name of the fleet.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// A list of devices to register with SageMaker Edge Manager.
    /// This member is required.
    public var devices: [SageMakerClientTypes.Device]?
    /// The tags associated with devices.
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        deviceFleetName: Swift.String? = nil,
        devices: [SageMakerClientTypes.Device]? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.deviceFleetName = deviceFleetName
        self.devices = devices
        self.tags = tags
    }
}

extension SageMakerClientTypes {
    /// Configuration for remote debugging for the [UpdateTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateTrainingJob.html) API. To learn more about the remote debugging functionality of SageMaker, see [Access a training container through Amazon Web Services Systems Manager (SSM) for remote debugging](https://docs.aws.amazon.com/sagemaker/latest/dg/train-remote-debugging.html).
    public struct RemoteDebugConfigForUpdate {
        /// If set to True, enables remote debugging.
        public var enableRemoteDebug: Swift.Bool?

        public init(
            enableRemoteDebug: Swift.Bool? = nil
        )
        {
            self.enableRemoteDebug = enableRemoteDebug
        }
    }

}

extension SageMakerClientTypes {
    /// Contains input values for a task.
    public struct RenderableTask {
        /// A JSON object that contains values for the variables defined in the template. It is made available to the template under the substitution variable task.input. For example, if you define a variable task.input.text in your template, you can supply the variable in the JSON object as "text": "sample text".
        /// This member is required.
        public var input: Swift.String?

        public init(
            input: Swift.String? = nil
        )
        {
            self.input = input
        }
    }

}

extension SageMakerClientTypes {
    /// A description of an error that occurred while rendering the template.
    public struct RenderingError {
        /// A unique identifier for a specific class of errors.
        /// This member is required.
        public var code: Swift.String?
        /// A human-readable message describing the error.
        /// This member is required.
        public var message: Swift.String?

        public init(
            code: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.message = message
        }
    }

}

public struct RenderUiTemplateInput {
    /// The HumanTaskUiArn of the worker UI that you want to render. Do not provide a HumanTaskUiArn if you use the UiTemplate parameter. See a list of available Human Ui Amazon Resource Names (ARNs) in [UiConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UiConfig.html).
    public var humanTaskUiArn: Swift.String?
    /// The Amazon Resource Name (ARN) that has access to the S3 objects that are used by the template.
    /// This member is required.
    public var roleArn: Swift.String?
    /// A RenderableTask object containing a representative task to render.
    /// This member is required.
    public var task: SageMakerClientTypes.RenderableTask?
    /// A Template object containing the worker UI template to render.
    public var uiTemplate: SageMakerClientTypes.UiTemplate?

    public init(
        humanTaskUiArn: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        task: SageMakerClientTypes.RenderableTask? = nil,
        uiTemplate: SageMakerClientTypes.UiTemplate? = nil
    )
    {
        self.humanTaskUiArn = humanTaskUiArn
        self.roleArn = roleArn
        self.task = task
        self.uiTemplate = uiTemplate
    }
}

public struct RenderUiTemplateOutput {
    /// A list of one or more RenderingError objects if any were encountered while rendering the template. If there were no errors, the list is empty.
    /// This member is required.
    public var errors: [SageMakerClientTypes.RenderingError]?
    /// A Liquid template that renders the HTML for the worker UI.
    /// This member is required.
    public var renderedContent: Swift.String?

    public init(
        errors: [SageMakerClientTypes.RenderingError]? = nil,
        renderedContent: Swift.String? = nil
    )
    {
        self.errors = errors
        self.renderedContent = renderedContent
    }
}

extension SageMakerClientTypes {
    /// The ResourceConfig to update KeepAlivePeriodInSeconds. Other fields in the ResourceConfig cannot be updated.
    public struct ResourceConfigForUpdate {
        /// The KeepAlivePeriodInSeconds value specified in the ResourceConfig to update.
        /// This member is required.
        public var keepAlivePeriodInSeconds: Swift.Int?

        public init(
            keepAlivePeriodInSeconds: Swift.Int? = nil
        )
        {
            self.keepAlivePeriodInSeconds = keepAlivePeriodInSeconds
        }
    }

}

public struct RetryPipelineExecutionInput {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// This configuration, if specified, overrides the parallelism configuration of the parent pipeline.
    public var parallelismConfiguration: SageMakerClientTypes.ParallelismConfiguration?
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    /// This member is required.
    public var pipelineExecutionArn: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        parallelismConfiguration: SageMakerClientTypes.ParallelismConfiguration? = nil,
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.parallelismConfiguration = parallelismConfiguration
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

public struct RetryPipelineExecutionOutput {
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    public var pipelineExecutionArn: Swift.String?

    public init(
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

extension SageMakerClientTypes {

    public enum SearchSortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SearchSortOrder] {
            return [
                .ascending,
                .descending
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "Ascending"
            case .descending: return "Descending"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// The list of key-value pairs used to filter your search results. If a search result contains a key from your list, it is included in the final search response if the value associated with the key in the result matches the value you specified. If the value doesn't match, the result is excluded from the search response. Any resources that don't have a key from the list that you've provided will also be included in the search response.
    public struct VisibilityConditions {
        /// The key that specifies the tag that you're using to filter the search results. It must be in the following format: Tags..
        public var key: Swift.String?
        /// The value for the tag that you're using to filter the search results.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

extension SageMakerClientTypes {
    /// Contains information about a training job.
    public struct TrainingJob {
        /// Information about the algorithm used for training, and algorithm metadata.
        public var algorithmSpecification: SageMakerClientTypes.AlgorithmSpecification?
        /// The Amazon Resource Name (ARN) of the job.
        public var autoMLJobArn: Swift.String?
        /// The billable time in seconds.
        public var billableTimeInSeconds: Swift.Int?
        /// Contains information about the output location for managed spot training checkpoint data.
        public var checkpointConfig: SageMakerClientTypes.CheckpointConfig?
        /// A timestamp that indicates when the training job was created.
        public var creationTime: Foundation.Date?
        /// Configuration information for the Amazon SageMaker Debugger hook parameters, metric and tensor collections, and storage paths. To learn more about how to configure the DebugHookConfig parameter, see [Use the SageMaker and Debugger Configuration API Operations to Create, Update, and Debug Your Training Job](https://docs.aws.amazon.com/sagemaker/latest/dg/debugger-createtrainingjob-api.html).
        public var debugHookConfig: SageMakerClientTypes.DebugHookConfig?
        /// Information about the debug rule configuration.
        public var debugRuleConfigurations: [SageMakerClientTypes.DebugRuleConfiguration]?
        /// Information about the evaluation status of the rules for the training job.
        public var debugRuleEvaluationStatuses: [SageMakerClientTypes.DebugRuleEvaluationStatus]?
        /// To encrypt all communications between ML compute instances in distributed training, choose True. Encryption provides greater security for distributed training, but training might take longer. How long it takes depends on the amount of communication between compute instances, especially if you use a deep learning algorithm in distributed training.
        public var enableInterContainerTrafficEncryption: Swift.Bool?
        /// When true, enables managed spot training using Amazon EC2 Spot instances to run training jobs instead of on-demand instances. For more information, see [Managed Spot Training](https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html).
        public var enableManagedSpotTraining: Swift.Bool?
        /// If the TrainingJob was created with network isolation, the value is set to true. If network isolation is enabled, nodes can't communicate beyond the VPC they run in.
        public var enableNetworkIsolation: Swift.Bool?
        /// The environment variables to set in the Docker container.
        public var environment: [Swift.String: Swift.String]?
        /// Associates a SageMaker job as a trial component with an experiment and trial. Specified when you call the following APIs:
        ///
        /// * [CreateProcessingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateProcessingJob.html)
        ///
        /// * [CreateTrainingJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTrainingJob.html)
        ///
        /// * [CreateTransformJob](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateTransformJob.html)
        public var experimentConfig: SageMakerClientTypes.ExperimentConfig?
        /// If the training job failed, the reason it failed.
        public var failureReason: Swift.String?
        /// A list of final metric values that are set when the training job completes. Used only if the training job was configured to use metrics.
        public var finalMetricDataList: [SageMakerClientTypes.MetricData]?
        /// Algorithm-specific parameters.
        public var hyperParameters: [Swift.String: Swift.String]?
        /// An array of Channel objects that describes each data input channel. Your input must be in the same Amazon Web Services region as your training job.
        public var inputDataConfig: [SageMakerClientTypes.Channel]?
        /// The Amazon Resource Name (ARN) of the labeling job.
        public var labelingJobArn: Swift.String?
        /// A timestamp that indicates when the status of the training job was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// Information about the Amazon S3 location that is configured for storing model artifacts.
        public var modelArtifacts: SageMakerClientTypes.ModelArtifacts?
        /// The S3 path where model artifacts that you configured when creating the job are stored. SageMaker creates subfolders for model artifacts.
        public var outputDataConfig: SageMakerClientTypes.OutputDataConfig?
        /// Configuration information for Amazon SageMaker Debugger system monitoring, framework profiling, and storage paths.
        public var profilerConfig: SageMakerClientTypes.ProfilerConfig?
        /// Resources, including ML compute instances and ML storage volumes, that are configured for model training.
        public var resourceConfig: SageMakerClientTypes.ResourceConfig?
        /// The number of times to retry the job when the job fails due to an InternalServerError.
        public var retryStrategy: SageMakerClientTypes.RetryStrategy?
        /// The Amazon Web Services Identity and Access Management (IAM) role configured for the training job.
        public var roleArn: Swift.String?
        /// Provides detailed information about the state of the training job. For detailed information about the secondary status of the training job, see StatusMessage under [SecondaryStatusTransition](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_SecondaryStatusTransition.html). SageMaker provides primary statuses and secondary statuses that apply to each of them: InProgress
        ///
        /// * Starting - Starting the training job.
        ///
        /// * Downloading - An optional stage for algorithms that support File training input mode. It indicates that data is being downloaded to the ML storage volumes.
        ///
        /// * Training - Training is in progress.
        ///
        /// * Uploading - Training is complete and the model artifacts are being uploaded to the S3 location.
        ///
        ///
        /// Completed
        ///
        /// * Completed - The training job has completed.
        ///
        ///
        /// Failed
        ///
        /// * Failed - The training job has failed. The reason for the failure is returned in the FailureReason field of DescribeTrainingJobResponse.
        ///
        ///
        /// Stopped
        ///
        /// * MaxRuntimeExceeded - The job stopped because it exceeded the maximum allowed runtime.
        ///
        /// * Stopped - The training job has stopped.
        ///
        ///
        /// Stopping
        ///
        /// * Stopping - Stopping the training job.
        ///
        ///
        /// Valid values for SecondaryStatus are subject to change. We no longer support the following secondary statuses:
        ///
        /// * LaunchingMLInstances
        ///
        /// * PreparingTrainingStack
        ///
        /// * DownloadingTrainingImage
        public var secondaryStatus: SageMakerClientTypes.SecondaryStatus?
        /// A history of all of the secondary statuses that the training job has transitioned through.
        public var secondaryStatusTransitions: [SageMakerClientTypes.SecondaryStatusTransition]?
        /// Specifies a limit to how long a model training job can run. It also specifies how long a managed Spot training job has to complete. When the job reaches the time limit, SageMaker ends the training job. Use this API to cap model training costs. To stop a job, SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms can use this 120-second window to save the model artifacts, so the results of training are not lost.
        public var stoppingCondition: SageMakerClientTypes.StoppingCondition?
        /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html).
        public var tags: [SageMakerClientTypes.Tag]?
        /// Configuration of storage locations for the Amazon SageMaker Debugger TensorBoard output data.
        public var tensorBoardOutputConfig: SageMakerClientTypes.TensorBoardOutputConfig?
        /// Indicates the time when the training job ends on training instances. You are billed for the time interval between the value of TrainingStartTime and this time. For successful jobs and stopped jobs, this is the time after model artifacts are uploaded. For failed jobs, this is the time when SageMaker detects a job failure.
        public var trainingEndTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the training job.
        public var trainingJobArn: Swift.String?
        /// The name of the training job.
        public var trainingJobName: Swift.String?
        /// The status of the training job. Training job statuses are:
        ///
        /// * InProgress - The training is in progress.
        ///
        /// * Completed - The training job has completed.
        ///
        /// * Failed - The training job has failed. To see the reason for the failure, see the FailureReason field in the response to a DescribeTrainingJobResponse call.
        ///
        /// * Stopping - The training job is stopping.
        ///
        /// * Stopped - The training job has stopped.
        ///
        ///
        /// For more detailed information, see SecondaryStatus.
        public var trainingJobStatus: SageMakerClientTypes.TrainingJobStatus?
        /// Indicates the time when the training job starts on training instances. You are billed for the time interval between this time and the value of TrainingEndTime. The start time in CloudWatch Logs might be later than this time. The difference is due to the time it takes to download the training data and to the size of the training container.
        public var trainingStartTime: Foundation.Date?
        /// The training time in seconds.
        public var trainingTimeInSeconds: Swift.Int?
        /// The Amazon Resource Name (ARN) of the associated hyperparameter tuning job if the training job was launched by a hyperparameter tuning job.
        public var tuningJobArn: Swift.String?
        /// A [VpcConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VpcConfig.html) object that specifies the VPC that this training job has access to. For more information, see [Protect Training Jobs by Using an Amazon Virtual Private Cloud](https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).
        public var vpcConfig: SageMakerClientTypes.VpcConfig?

        public init(
            algorithmSpecification: SageMakerClientTypes.AlgorithmSpecification? = nil,
            autoMLJobArn: Swift.String? = nil,
            billableTimeInSeconds: Swift.Int? = nil,
            checkpointConfig: SageMakerClientTypes.CheckpointConfig? = nil,
            creationTime: Foundation.Date? = nil,
            debugHookConfig: SageMakerClientTypes.DebugHookConfig? = nil,
            debugRuleConfigurations: [SageMakerClientTypes.DebugRuleConfiguration]? = nil,
            debugRuleEvaluationStatuses: [SageMakerClientTypes.DebugRuleEvaluationStatus]? = nil,
            enableInterContainerTrafficEncryption: Swift.Bool? = nil,
            enableManagedSpotTraining: Swift.Bool? = nil,
            enableNetworkIsolation: Swift.Bool? = nil,
            environment: [Swift.String: Swift.String]? = nil,
            experimentConfig: SageMakerClientTypes.ExperimentConfig? = nil,
            failureReason: Swift.String? = nil,
            finalMetricDataList: [SageMakerClientTypes.MetricData]? = nil,
            hyperParameters: [Swift.String: Swift.String]? = nil,
            inputDataConfig: [SageMakerClientTypes.Channel]? = nil,
            labelingJobArn: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            modelArtifacts: SageMakerClientTypes.ModelArtifacts? = nil,
            outputDataConfig: SageMakerClientTypes.OutputDataConfig? = nil,
            profilerConfig: SageMakerClientTypes.ProfilerConfig? = nil,
            resourceConfig: SageMakerClientTypes.ResourceConfig? = nil,
            retryStrategy: SageMakerClientTypes.RetryStrategy? = nil,
            roleArn: Swift.String? = nil,
            secondaryStatus: SageMakerClientTypes.SecondaryStatus? = nil,
            secondaryStatusTransitions: [SageMakerClientTypes.SecondaryStatusTransition]? = nil,
            stoppingCondition: SageMakerClientTypes.StoppingCondition? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil,
            tensorBoardOutputConfig: SageMakerClientTypes.TensorBoardOutputConfig? = nil,
            trainingEndTime: Foundation.Date? = nil,
            trainingJobArn: Swift.String? = nil,
            trainingJobName: Swift.String? = nil,
            trainingJobStatus: SageMakerClientTypes.TrainingJobStatus? = nil,
            trainingStartTime: Foundation.Date? = nil,
            trainingTimeInSeconds: Swift.Int? = nil,
            tuningJobArn: Swift.String? = nil,
            vpcConfig: SageMakerClientTypes.VpcConfig? = nil
        )
        {
            self.algorithmSpecification = algorithmSpecification
            self.autoMLJobArn = autoMLJobArn
            self.billableTimeInSeconds = billableTimeInSeconds
            self.checkpointConfig = checkpointConfig
            self.creationTime = creationTime
            self.debugHookConfig = debugHookConfig
            self.debugRuleConfigurations = debugRuleConfigurations
            self.debugRuleEvaluationStatuses = debugRuleEvaluationStatuses
            self.enableInterContainerTrafficEncryption = enableInterContainerTrafficEncryption
            self.enableManagedSpotTraining = enableManagedSpotTraining
            self.enableNetworkIsolation = enableNetworkIsolation
            self.environment = environment
            self.experimentConfig = experimentConfig
            self.failureReason = failureReason
            self.finalMetricDataList = finalMetricDataList
            self.hyperParameters = hyperParameters
            self.inputDataConfig = inputDataConfig
            self.labelingJobArn = labelingJobArn
            self.lastModifiedTime = lastModifiedTime
            self.modelArtifacts = modelArtifacts
            self.outputDataConfig = outputDataConfig
            self.profilerConfig = profilerConfig
            self.resourceConfig = resourceConfig
            self.retryStrategy = retryStrategy
            self.roleArn = roleArn
            self.secondaryStatus = secondaryStatus
            self.secondaryStatusTransitions = secondaryStatusTransitions
            self.stoppingCondition = stoppingCondition
            self.tags = tags
            self.tensorBoardOutputConfig = tensorBoardOutputConfig
            self.trainingEndTime = trainingEndTime
            self.trainingJobArn = trainingJobArn
            self.trainingJobName = trainingJobName
            self.trainingJobStatus = trainingJobStatus
            self.trainingStartTime = trainingStartTime
            self.trainingTimeInSeconds = trainingTimeInSeconds
            self.tuningJobArn = tuningJobArn
            self.vpcConfig = vpcConfig
        }
    }

}

extension SageMakerClientTypes {
    /// A short summary of a trial component.
    public struct TrialComponentSimpleSummary {
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// When the component was created.
        public var creationTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the trial component.
        public var trialComponentArn: Swift.String?
        /// The name of the trial component.
        public var trialComponentName: Swift.String?
        /// The Amazon Resource Name (ARN) and job type of the source of a trial component.
        public var trialComponentSource: SageMakerClientTypes.TrialComponentSource?

        public init(
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: Foundation.Date? = nil,
            trialComponentArn: Swift.String? = nil,
            trialComponentName: Swift.String? = nil,
            trialComponentSource: SageMakerClientTypes.TrialComponentSource? = nil
        )
        {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.trialComponentArn = trialComponentArn
            self.trialComponentName = trialComponentName
            self.trialComponentSource = trialComponentSource
        }
    }

}

extension SageMakerClientTypes {
    /// The properties of a trial as returned by the [Search](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html) API.
    public struct Trial {
        /// Who created the trial.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// When the trial was created.
        public var creationTime: Foundation.Date?
        /// The name of the trial as displayed. If DisplayName isn't specified, TrialName is displayed.
        public var displayName: Swift.String?
        /// The name of the experiment the trial is part of.
        public var experimentName: Swift.String?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
        public var lastModifiedBy: SageMakerClientTypes.UserContext?
        /// Who last modified the trial.
        public var lastModifiedTime: Foundation.Date?
        /// Metadata properties of the tracking entity, trial, or trial component.
        public var metadataProperties: SageMakerClientTypes.MetadataProperties?
        /// The source of the trial.
        public var source: SageMakerClientTypes.TrialSource?
        /// The list of tags that are associated with the trial. You can use [Search](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html) API to search on the tags.
        public var tags: [SageMakerClientTypes.Tag]?
        /// The Amazon Resource Name (ARN) of the trial.
        public var trialArn: Swift.String?
        /// A list of the components associated with the trial. For each component, a summary of the component's properties is included.
        public var trialComponentSummaries: [SageMakerClientTypes.TrialComponentSimpleSummary]?
        /// The name of the trial.
        public var trialName: Swift.String?

        public init(
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: Foundation.Date? = nil,
            displayName: Swift.String? = nil,
            experimentName: Swift.String? = nil,
            lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
            source: SageMakerClientTypes.TrialSource? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil,
            trialArn: Swift.String? = nil,
            trialComponentSummaries: [SageMakerClientTypes.TrialComponentSimpleSummary]? = nil,
            trialName: Swift.String? = nil
        )
        {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.displayName = displayName
            self.experimentName = experimentName
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.metadataProperties = metadataProperties
            self.source = source
            self.tags = tags
            self.trialArn = trialArn
            self.trialComponentSummaries = trialComponentSummaries
            self.trialName = trialName
        }
    }

}

extension SageMakerClientTypes {
    /// Detailed information about the source of a trial component. Either ProcessingJob or TrainingJob is returned.
    public struct TrialComponentSourceDetail {
        /// Information about a processing job that's the source of a trial component.
        public var processingJob: SageMakerClientTypes.ProcessingJob?
        /// The Amazon Resource Name (ARN) of the source.
        public var sourceArn: Swift.String?
        /// Information about a training job that's the source of a trial component.
        public var trainingJob: SageMakerClientTypes.TrainingJob?
        /// Information about a transform job that's the source of a trial component.
        public var transformJob: SageMakerClientTypes.TransformJob?

        public init(
            processingJob: SageMakerClientTypes.ProcessingJob? = nil,
            sourceArn: Swift.String? = nil,
            trainingJob: SageMakerClientTypes.TrainingJob? = nil,
            transformJob: SageMakerClientTypes.TransformJob? = nil
        )
        {
            self.processingJob = processingJob
            self.sourceArn = sourceArn
            self.trainingJob = trainingJob
            self.transformJob = transformJob
        }
    }

}

extension SageMakerClientTypes {
    /// The properties of a trial component as returned by the [Search](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html) API.
    public struct TrialComponent {
        /// Who created the trial component.
        public var createdBy: SageMakerClientTypes.UserContext?
        /// When the component was created.
        public var creationTime: Foundation.Date?
        /// The name of the component as displayed. If DisplayName isn't specified, TrialComponentName is displayed.
        public var displayName: Swift.String?
        /// When the component ended.
        public var endTime: Foundation.Date?
        /// The input artifacts of the component.
        public var inputArtifacts: [Swift.String: SageMakerClientTypes.TrialComponentArtifact]?
        /// Information about the user who created or modified an experiment, trial, trial component, lineage group, project, or model card.
        public var lastModifiedBy: SageMakerClientTypes.UserContext?
        /// When the component was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the lineage group resource.
        public var lineageGroupArn: Swift.String?
        /// Metadata properties of the tracking entity, trial, or trial component.
        public var metadataProperties: SageMakerClientTypes.MetadataProperties?
        /// The metrics for the component.
        public var metrics: [SageMakerClientTypes.TrialComponentMetricSummary]?
        /// The output artifacts of the component.
        public var outputArtifacts: [Swift.String: SageMakerClientTypes.TrialComponentArtifact]?
        /// The hyperparameters of the component.
        public var parameters: [Swift.String: SageMakerClientTypes.TrialComponentParameterValue]?
        /// An array of the parents of the component. A parent is a trial the component is associated with and the experiment the trial is part of. A component might not have any parents.
        public var parents: [SageMakerClientTypes.Parent]?
        /// The name of the experiment run.
        public var runName: Swift.String?
        /// The Amazon Resource Name (ARN) and job type of the source of the component.
        public var source: SageMakerClientTypes.TrialComponentSource?
        /// Details of the source of the component.
        public var sourceDetail: SageMakerClientTypes.TrialComponentSourceDetail?
        /// When the component started.
        public var startTime: Foundation.Date?
        /// The status of the trial component.
        public var status: SageMakerClientTypes.TrialComponentStatus?
        /// The list of tags that are associated with the component. You can use [Search](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html) API to search on the tags.
        public var tags: [SageMakerClientTypes.Tag]?
        /// The Amazon Resource Name (ARN) of the trial component.
        public var trialComponentArn: Swift.String?
        /// The name of the trial component.
        public var trialComponentName: Swift.String?

        public init(
            createdBy: SageMakerClientTypes.UserContext? = nil,
            creationTime: Foundation.Date? = nil,
            displayName: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            inputArtifacts: [Swift.String: SageMakerClientTypes.TrialComponentArtifact]? = nil,
            lastModifiedBy: SageMakerClientTypes.UserContext? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            lineageGroupArn: Swift.String? = nil,
            metadataProperties: SageMakerClientTypes.MetadataProperties? = nil,
            metrics: [SageMakerClientTypes.TrialComponentMetricSummary]? = nil,
            outputArtifacts: [Swift.String: SageMakerClientTypes.TrialComponentArtifact]? = nil,
            parameters: [Swift.String: SageMakerClientTypes.TrialComponentParameterValue]? = nil,
            parents: [SageMakerClientTypes.Parent]? = nil,
            runName: Swift.String? = nil,
            source: SageMakerClientTypes.TrialComponentSource? = nil,
            sourceDetail: SageMakerClientTypes.TrialComponentSourceDetail? = nil,
            startTime: Foundation.Date? = nil,
            status: SageMakerClientTypes.TrialComponentStatus? = nil,
            tags: [SageMakerClientTypes.Tag]? = nil,
            trialComponentArn: Swift.String? = nil,
            trialComponentName: Swift.String? = nil
        )
        {
            self.createdBy = createdBy
            self.creationTime = creationTime
            self.displayName = displayName
            self.endTime = endTime
            self.inputArtifacts = inputArtifacts
            self.lastModifiedBy = lastModifiedBy
            self.lastModifiedTime = lastModifiedTime
            self.lineageGroupArn = lineageGroupArn
            self.metadataProperties = metadataProperties
            self.metrics = metrics
            self.outputArtifacts = outputArtifacts
            self.parameters = parameters
            self.parents = parents
            self.runName = runName
            self.source = source
            self.sourceDetail = sourceDetail
            self.startTime = startTime
            self.status = status
            self.tags = tags
            self.trialComponentArn = trialComponentArn
            self.trialComponentName = trialComponentName
        }
    }

}

extension SageMakerClientTypes {
    /// A single resource returned as part of the [Search](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_Search.html) API response.
    public struct SearchRecord {
        /// A hosted endpoint for real-time inference.
        public var endpoint: SageMakerClientTypes.Endpoint?
        /// The properties of an experiment.
        public var experiment: SageMakerClientTypes.Experiment?
        /// Amazon SageMaker Feature Store stores features in a collection called Feature Group. A Feature Group can be visualized as a table which has rows, with a unique identifier for each row where each column in the table is a feature. In principle, a Feature Group is composed of features and values per features.
        public var featureGroup: SageMakerClientTypes.FeatureGroup?
        /// The feature metadata used to search through the features.
        public var featureMetadata: SageMakerClientTypes.FeatureMetadata?
        /// The properties of a hyperparameter tuning job.
        public var hyperParameterTuningJob: SageMakerClientTypes.HyperParameterTuningJobSearchEntity?
        /// A model displayed in the Amazon SageMaker Model Dashboard.
        public var model: SageMakerClientTypes.ModelDashboardModel?
        /// An Amazon SageMaker Model Card that documents details about a machine learning model.
        public var modelCard: SageMakerClientTypes.ModelCard?
        /// A versioned model that can be deployed for SageMaker inference.
        public var modelPackage: SageMakerClientTypes.ModelPackage?
        /// A group of versioned models in the model registry.
        public var modelPackageGroup: SageMakerClientTypes.ModelPackageGroup?
        /// A SageMaker Model Building Pipeline instance.
        public var pipeline: SageMakerClientTypes.Pipeline?
        /// An execution of a pipeline.
        public var pipelineExecution: SageMakerClientTypes.PipelineExecution?
        /// The properties of a project.
        public var project: SageMakerClientTypes.Project?
        /// The properties of a training job.
        public var trainingJob: SageMakerClientTypes.TrainingJob?
        /// The properties of a trial.
        public var trial: SageMakerClientTypes.Trial?
        /// The properties of a trial component.
        public var trialComponent: SageMakerClientTypes.TrialComponent?

        public init(
            endpoint: SageMakerClientTypes.Endpoint? = nil,
            experiment: SageMakerClientTypes.Experiment? = nil,
            featureGroup: SageMakerClientTypes.FeatureGroup? = nil,
            featureMetadata: SageMakerClientTypes.FeatureMetadata? = nil,
            hyperParameterTuningJob: SageMakerClientTypes.HyperParameterTuningJobSearchEntity? = nil,
            model: SageMakerClientTypes.ModelDashboardModel? = nil,
            modelCard: SageMakerClientTypes.ModelCard? = nil,
            modelPackage: SageMakerClientTypes.ModelPackage? = nil,
            modelPackageGroup: SageMakerClientTypes.ModelPackageGroup? = nil,
            pipeline: SageMakerClientTypes.Pipeline? = nil,
            pipelineExecution: SageMakerClientTypes.PipelineExecution? = nil,
            project: SageMakerClientTypes.Project? = nil,
            trainingJob: SageMakerClientTypes.TrainingJob? = nil,
            trial: SageMakerClientTypes.Trial? = nil,
            trialComponent: SageMakerClientTypes.TrialComponent? = nil
        )
        {
            self.endpoint = endpoint
            self.experiment = experiment
            self.featureGroup = featureGroup
            self.featureMetadata = featureMetadata
            self.hyperParameterTuningJob = hyperParameterTuningJob
            self.model = model
            self.modelCard = modelCard
            self.modelPackage = modelPackage
            self.modelPackageGroup = modelPackageGroup
            self.pipeline = pipeline
            self.pipelineExecution = pipelineExecution
            self.project = project
            self.trainingJob = trainingJob
            self.trial = trial
            self.trialComponent = trialComponent
        }
    }

}

public struct SearchOutput {
    /// If the result of the previous Search request was truncated, the response includes a NextToken. To retrieve the next set of results, use the token in the next request.
    public var nextToken: Swift.String?
    /// A list of SearchRecord objects.
    public var results: [SageMakerClientTypes.SearchRecord]?

    public init(
        nextToken: Swift.String? = nil,
        results: [SageMakerClientTypes.SearchRecord]? = nil
    )
    {
        self.nextToken = nextToken
        self.results = results
    }
}

public struct SendPipelineExecutionStepFailureInput {
    /// The pipeline generated token from the Amazon SQS queue.
    /// This member is required.
    public var callbackToken: Swift.String?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.
    public var clientRequestToken: Swift.String?
    /// A message describing why the step failed.
    public var failureReason: Swift.String?

    public init(
        callbackToken: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        failureReason: Swift.String? = nil
    )
    {
        self.callbackToken = callbackToken
        self.clientRequestToken = clientRequestToken
        self.failureReason = failureReason
    }
}

public struct SendPipelineExecutionStepFailureOutput {
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    public var pipelineExecutionArn: Swift.String?

    public init(
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

public struct SendPipelineExecutionStepSuccessInput {
    /// The pipeline generated token from the Amazon SQS queue.
    /// This member is required.
    public var callbackToken: Swift.String?
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than one time.
    public var clientRequestToken: Swift.String?
    /// A list of the output parameters of the callback step.
    public var outputParameters: [SageMakerClientTypes.OutputParameter]?

    public init(
        callbackToken: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        outputParameters: [SageMakerClientTypes.OutputParameter]? = nil
    )
    {
        self.callbackToken = callbackToken
        self.clientRequestToken = clientRequestToken
        self.outputParameters = outputParameters
    }
}

public struct SendPipelineExecutionStepSuccessOutput {
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    public var pipelineExecutionArn: Swift.String?

    public init(
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

public struct StartEdgeDeploymentStageInput {
    /// The name of the edge deployment plan to start.
    /// This member is required.
    public var edgeDeploymentPlanName: Swift.String?
    /// The name of the stage to start.
    /// This member is required.
    public var stageName: Swift.String?

    public init(
        edgeDeploymentPlanName: Swift.String? = nil,
        stageName: Swift.String? = nil
    )
    {
        self.edgeDeploymentPlanName = edgeDeploymentPlanName
        self.stageName = stageName
    }
}

public struct StartInferenceExperimentInput {
    /// The name of the inference experiment to start.
    /// This member is required.
    public var name: Swift.String?

    public init(
        name: Swift.String? = nil
    )
    {
        self.name = name
    }
}

public struct StartInferenceExperimentOutput {
    /// The ARN of the started inference experiment to start.
    /// This member is required.
    public var inferenceExperimentArn: Swift.String?

    public init(
        inferenceExperimentArn: Swift.String? = nil
    )
    {
        self.inferenceExperimentArn = inferenceExperimentArn
    }
}

public struct StartMlflowTrackingServerInput {
    /// The name of the tracking server to start.
    /// This member is required.
    public var trackingServerName: Swift.String?

    public init(
        trackingServerName: Swift.String? = nil
    )
    {
        self.trackingServerName = trackingServerName
    }
}

public struct StartMlflowTrackingServerOutput {
    /// The ARN of the started tracking server.
    public var trackingServerArn: Swift.String?

    public init(
        trackingServerArn: Swift.String? = nil
    )
    {
        self.trackingServerArn = trackingServerArn
    }
}

public struct StartMonitoringScheduleInput {
    /// The name of the schedule to start.
    /// This member is required.
    public var monitoringScheduleName: Swift.String?

    public init(
        monitoringScheduleName: Swift.String? = nil
    )
    {
        self.monitoringScheduleName = monitoringScheduleName
    }
}

public struct StartNotebookInstanceInput {
    /// The name of the notebook instance to start.
    /// This member is required.
    public var notebookInstanceName: Swift.String?

    public init(
        notebookInstanceName: Swift.String? = nil
    )
    {
        self.notebookInstanceName = notebookInstanceName
    }
}

public struct StartPipelineExecutionInput {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// This configuration, if specified, overrides the parallelism configuration of the parent pipeline for this specific run.
    public var parallelismConfiguration: SageMakerClientTypes.ParallelismConfiguration?
    /// The description of the pipeline execution.
    public var pipelineExecutionDescription: Swift.String?
    /// The display name of the pipeline execution.
    public var pipelineExecutionDisplayName: Swift.String?
    /// The name or Amazon Resource Name (ARN) of the pipeline.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// Contains a list of pipeline parameters. This list can be empty.
    public var pipelineParameters: [SageMakerClientTypes.Parameter]?
    /// The selective execution configuration applied to the pipeline run.
    public var selectiveExecutionConfig: SageMakerClientTypes.SelectiveExecutionConfig?

    public init(
        clientRequestToken: Swift.String? = nil,
        parallelismConfiguration: SageMakerClientTypes.ParallelismConfiguration? = nil,
        pipelineExecutionDescription: Swift.String? = nil,
        pipelineExecutionDisplayName: Swift.String? = nil,
        pipelineName: Swift.String? = nil,
        pipelineParameters: [SageMakerClientTypes.Parameter]? = nil,
        selectiveExecutionConfig: SageMakerClientTypes.SelectiveExecutionConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.parallelismConfiguration = parallelismConfiguration
        self.pipelineExecutionDescription = pipelineExecutionDescription
        self.pipelineExecutionDisplayName = pipelineExecutionDisplayName
        self.pipelineName = pipelineName
        self.pipelineParameters = pipelineParameters
        self.selectiveExecutionConfig = selectiveExecutionConfig
    }
}

public struct StartPipelineExecutionOutput {
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    public var pipelineExecutionArn: Swift.String?

    public init(
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

public struct StopAutoMLJobInput {
    /// The name of the object you are requesting.
    /// This member is required.
    public var autoMLJobName: Swift.String?

    public init(
        autoMLJobName: Swift.String? = nil
    )
    {
        self.autoMLJobName = autoMLJobName
    }
}

public struct StopCompilationJobInput {
    /// The name of the model compilation job to stop.
    /// This member is required.
    public var compilationJobName: Swift.String?

    public init(
        compilationJobName: Swift.String? = nil
    )
    {
        self.compilationJobName = compilationJobName
    }
}

public struct StopEdgeDeploymentStageInput {
    /// The name of the edge deployment plan to stop.
    /// This member is required.
    public var edgeDeploymentPlanName: Swift.String?
    /// The name of the stage to stop.
    /// This member is required.
    public var stageName: Swift.String?

    public init(
        edgeDeploymentPlanName: Swift.String? = nil,
        stageName: Swift.String? = nil
    )
    {
        self.edgeDeploymentPlanName = edgeDeploymentPlanName
        self.stageName = stageName
    }
}

public struct StopEdgePackagingJobInput {
    /// The name of the edge packaging job.
    /// This member is required.
    public var edgePackagingJobName: Swift.String?

    public init(
        edgePackagingJobName: Swift.String? = nil
    )
    {
        self.edgePackagingJobName = edgePackagingJobName
    }
}

public struct StopHyperParameterTuningJobInput {
    /// The name of the tuning job to stop.
    /// This member is required.
    public var hyperParameterTuningJobName: Swift.String?

    public init(
        hyperParameterTuningJobName: Swift.String? = nil
    )
    {
        self.hyperParameterTuningJobName = hyperParameterTuningJobName
    }
}

public struct StopInferenceExperimentInput {
    /// An array of ModelVariantConfig objects. There is one for each variant that you want to deploy after the inference experiment stops. Each ModelVariantConfig describes the infrastructure configuration for deploying the corresponding variant.
    public var desiredModelVariants: [SageMakerClientTypes.ModelVariantConfig]?
    /// The desired state of the experiment after stopping. The possible states are the following:
    ///
    /// * Completed: The experiment completed successfully
    ///
    /// * Cancelled: The experiment was canceled
    public var desiredState: SageMakerClientTypes.InferenceExperimentStopDesiredState?
    /// Array of key-value pairs, with names of variants mapped to actions. The possible actions are the following:
    ///
    /// * Promote - Promote the shadow variant to a production variant
    ///
    /// * Remove - Delete the variant
    ///
    /// * Retain - Keep the variant as it is
    /// This member is required.
    public var modelVariantActions: [Swift.String: SageMakerClientTypes.ModelVariantAction]?
    /// The name of the inference experiment to stop.
    /// This member is required.
    public var name: Swift.String?
    /// The reason for stopping the experiment.
    public var reason: Swift.String?

    public init(
        desiredModelVariants: [SageMakerClientTypes.ModelVariantConfig]? = nil,
        desiredState: SageMakerClientTypes.InferenceExperimentStopDesiredState? = nil,
        modelVariantActions: [Swift.String: SageMakerClientTypes.ModelVariantAction]? = nil,
        name: Swift.String? = nil,
        reason: Swift.String? = nil
    )
    {
        self.desiredModelVariants = desiredModelVariants
        self.desiredState = desiredState
        self.modelVariantActions = modelVariantActions
        self.name = name
        self.reason = reason
    }
}

public struct StopInferenceExperimentOutput {
    /// The ARN of the stopped inference experiment.
    /// This member is required.
    public var inferenceExperimentArn: Swift.String?

    public init(
        inferenceExperimentArn: Swift.String? = nil
    )
    {
        self.inferenceExperimentArn = inferenceExperimentArn
    }
}

public struct StopInferenceRecommendationsJobInput {
    /// The name of the job you want to stop.
    /// This member is required.
    public var jobName: Swift.String?

    public init(
        jobName: Swift.String? = nil
    )
    {
        self.jobName = jobName
    }
}

public struct StopLabelingJobInput {
    /// The name of the labeling job to stop.
    /// This member is required.
    public var labelingJobName: Swift.String?

    public init(
        labelingJobName: Swift.String? = nil
    )
    {
        self.labelingJobName = labelingJobName
    }
}

public struct StopMlflowTrackingServerInput {
    /// The name of the tracking server to stop.
    /// This member is required.
    public var trackingServerName: Swift.String?

    public init(
        trackingServerName: Swift.String? = nil
    )
    {
        self.trackingServerName = trackingServerName
    }
}

public struct StopMlflowTrackingServerOutput {
    /// The ARN of the stopped tracking server.
    public var trackingServerArn: Swift.String?

    public init(
        trackingServerArn: Swift.String? = nil
    )
    {
        self.trackingServerArn = trackingServerArn
    }
}

public struct StopMonitoringScheduleInput {
    /// The name of the schedule to stop.
    /// This member is required.
    public var monitoringScheduleName: Swift.String?

    public init(
        monitoringScheduleName: Swift.String? = nil
    )
    {
        self.monitoringScheduleName = monitoringScheduleName
    }
}

public struct StopNotebookInstanceInput {
    /// The name of the notebook instance to terminate.
    /// This member is required.
    public var notebookInstanceName: Swift.String?

    public init(
        notebookInstanceName: Swift.String? = nil
    )
    {
        self.notebookInstanceName = notebookInstanceName
    }
}

public struct StopOptimizationJobInput {
    /// The name that you assigned to the optimization job.
    /// This member is required.
    public var optimizationJobName: Swift.String?

    public init(
        optimizationJobName: Swift.String? = nil
    )
    {
        self.optimizationJobName = optimizationJobName
    }
}

public struct StopPipelineExecutionInput {
    /// A unique, case-sensitive identifier that you provide to ensure the idempotency of the operation. An idempotent operation completes no more than once.
    /// This member is required.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    /// This member is required.
    public var pipelineExecutionArn: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

public struct StopPipelineExecutionOutput {
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    public var pipelineExecutionArn: Swift.String?

    public init(
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

public struct StopProcessingJobInput {
    /// The name of the processing job to stop.
    /// This member is required.
    public var processingJobName: Swift.String?

    public init(
        processingJobName: Swift.String? = nil
    )
    {
        self.processingJobName = processingJobName
    }
}

public struct StopTrainingJobInput {
    /// The name of the training job to stop.
    /// This member is required.
    public var trainingJobName: Swift.String?

    public init(
        trainingJobName: Swift.String? = nil
    )
    {
        self.trainingJobName = trainingJobName
    }
}

public struct StopTransformJobInput {
    /// The name of the batch transform job to stop.
    /// This member is required.
    public var transformJobName: Swift.String?

    public init(
        transformJobName: Swift.String? = nil
    )
    {
        self.transformJobName = transformJobName
    }
}

public struct UpdateActionInput {
    /// The name of the action to update.
    /// This member is required.
    public var actionName: Swift.String?
    /// The new description for the action.
    public var description: Swift.String?
    /// The new list of properties. Overwrites the current property list.
    public var properties: [Swift.String: Swift.String]?
    /// A list of properties to remove.
    public var propertiesToRemove: [Swift.String]?
    /// The new status for the action.
    public var status: SageMakerClientTypes.ActionStatus?

    public init(
        actionName: Swift.String? = nil,
        description: Swift.String? = nil,
        properties: [Swift.String: Swift.String]? = nil,
        propertiesToRemove: [Swift.String]? = nil,
        status: SageMakerClientTypes.ActionStatus? = nil
    )
    {
        self.actionName = actionName
        self.description = description
        self.properties = properties
        self.propertiesToRemove = propertiesToRemove
        self.status = status
    }
}

public struct UpdateActionOutput {
    /// The Amazon Resource Name (ARN) of the action.
    public var actionArn: Swift.String?

    public init(
        actionArn: Swift.String? = nil
    )
    {
        self.actionArn = actionArn
    }
}

public struct UpdateAppImageConfigInput {
    /// The name of the AppImageConfig to update.
    /// This member is required.
    public var appImageConfigName: Swift.String?
    /// The Code Editor app running on the image.
    public var codeEditorAppImageConfig: SageMakerClientTypes.CodeEditorAppImageConfig?
    /// The JupyterLab app running on the image.
    public var jupyterLabAppImageConfig: SageMakerClientTypes.JupyterLabAppImageConfig?
    /// The new KernelGateway app to run on the image.
    public var kernelGatewayImageConfig: SageMakerClientTypes.KernelGatewayImageConfig?

    public init(
        appImageConfigName: Swift.String? = nil,
        codeEditorAppImageConfig: SageMakerClientTypes.CodeEditorAppImageConfig? = nil,
        jupyterLabAppImageConfig: SageMakerClientTypes.JupyterLabAppImageConfig? = nil,
        kernelGatewayImageConfig: SageMakerClientTypes.KernelGatewayImageConfig? = nil
    )
    {
        self.appImageConfigName = appImageConfigName
        self.codeEditorAppImageConfig = codeEditorAppImageConfig
        self.jupyterLabAppImageConfig = jupyterLabAppImageConfig
        self.kernelGatewayImageConfig = kernelGatewayImageConfig
    }
}

public struct UpdateAppImageConfigOutput {
    /// The ARN for the AppImageConfig.
    public var appImageConfigArn: Swift.String?

    public init(
        appImageConfigArn: Swift.String? = nil
    )
    {
        self.appImageConfigArn = appImageConfigArn
    }
}

public struct UpdateArtifactInput {
    /// The Amazon Resource Name (ARN) of the artifact to update.
    /// This member is required.
    public var artifactArn: Swift.String?
    /// The new name for the artifact.
    public var artifactName: Swift.String?
    /// The new list of properties. Overwrites the current property list.
    public var properties: [Swift.String: Swift.String]?
    /// A list of properties to remove.
    public var propertiesToRemove: [Swift.String]?

    public init(
        artifactArn: Swift.String? = nil,
        artifactName: Swift.String? = nil,
        properties: [Swift.String: Swift.String]? = nil,
        propertiesToRemove: [Swift.String]? = nil
    )
    {
        self.artifactArn = artifactArn
        self.artifactName = artifactName
        self.properties = properties
        self.propertiesToRemove = propertiesToRemove
    }
}

public struct UpdateArtifactOutput {
    /// The Amazon Resource Name (ARN) of the artifact.
    public var artifactArn: Swift.String?

    public init(
        artifactArn: Swift.String? = nil
    )
    {
        self.artifactArn = artifactArn
    }
}

public struct UpdateClusterInput {
    /// Specify the name of the SageMaker HyperPod cluster you want to update.
    /// This member is required.
    public var clusterName: Swift.String?
    /// Specify the instance groups to update.
    /// This member is required.
    public var instanceGroups: [SageMakerClientTypes.ClusterInstanceGroupSpecification]?
    /// The node recovery mode to be applied to the SageMaker HyperPod cluster.
    public var nodeRecovery: SageMakerClientTypes.ClusterNodeRecovery?

    public init(
        clusterName: Swift.String? = nil,
        instanceGroups: [SageMakerClientTypes.ClusterInstanceGroupSpecification]? = nil,
        nodeRecovery: SageMakerClientTypes.ClusterNodeRecovery? = nil
    )
    {
        self.clusterName = clusterName
        self.instanceGroups = instanceGroups
        self.nodeRecovery = nodeRecovery
    }
}

public struct UpdateClusterOutput {
    /// The Amazon Resource Name (ARN) of the updated SageMaker HyperPod cluster.
    /// This member is required.
    public var clusterArn: Swift.String?

    public init(
        clusterArn: Swift.String? = nil
    )
    {
        self.clusterArn = clusterArn
    }
}

public struct UpdateClusterSoftwareInput {
    /// Specify the name or the Amazon Resource Name (ARN) of the SageMaker HyperPod cluster you want to update for security patching.
    /// This member is required.
    public var clusterName: Swift.String?

    public init(
        clusterName: Swift.String? = nil
    )
    {
        self.clusterName = clusterName
    }
}

public struct UpdateClusterSoftwareOutput {
    /// The Amazon Resource Name (ARN) of the SageMaker HyperPod cluster being updated for security patching.
    /// This member is required.
    public var clusterArn: Swift.String?

    public init(
        clusterArn: Swift.String? = nil
    )
    {
        self.clusterArn = clusterArn
    }
}

public struct UpdateCodeRepositoryInput {
    /// The name of the Git repository to update.
    /// This member is required.
    public var codeRepositoryName: Swift.String?
    /// The configuration of the git repository, including the URL and the Amazon Resource Name (ARN) of the Amazon Web Services Secrets Manager secret that contains the credentials used to access the repository. The secret must have a staging label of AWSCURRENT and must be in the following format: {"username": UserName, "password": Password}
    public var gitConfig: SageMakerClientTypes.GitConfigForUpdate?

    public init(
        codeRepositoryName: Swift.String? = nil,
        gitConfig: SageMakerClientTypes.GitConfigForUpdate? = nil
    )
    {
        self.codeRepositoryName = codeRepositoryName
        self.gitConfig = gitConfig
    }
}

public struct UpdateCodeRepositoryOutput {
    /// The ARN of the Git repository.
    /// This member is required.
    public var codeRepositoryArn: Swift.String?

    public init(
        codeRepositoryArn: Swift.String? = nil
    )
    {
        self.codeRepositoryArn = codeRepositoryArn
    }
}

public struct UpdateContextInput {
    /// The name of the context to update.
    /// This member is required.
    public var contextName: Swift.String?
    /// The new description for the context.
    public var description: Swift.String?
    /// The new list of properties. Overwrites the current property list.
    public var properties: [Swift.String: Swift.String]?
    /// A list of properties to remove.
    public var propertiesToRemove: [Swift.String]?

    public init(
        contextName: Swift.String? = nil,
        description: Swift.String? = nil,
        properties: [Swift.String: Swift.String]? = nil,
        propertiesToRemove: [Swift.String]? = nil
    )
    {
        self.contextName = contextName
        self.description = description
        self.properties = properties
        self.propertiesToRemove = propertiesToRemove
    }
}

public struct UpdateContextOutput {
    /// The Amazon Resource Name (ARN) of the context.
    public var contextArn: Swift.String?

    public init(
        contextArn: Swift.String? = nil
    )
    {
        self.contextArn = contextArn
    }
}

public struct UpdateDeviceFleetInput {
    /// Description of the fleet.
    public var description: Swift.String?
    /// The name of the fleet.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// Whether to create an Amazon Web Services IoT Role Alias during device fleet creation. The name of the role alias generated will match this pattern: "SageMakerEdge-{DeviceFleetName}". For example, if your device fleet is called "demo-fleet", the name of the role alias will be "SageMakerEdge-demo-fleet".
    public var enableIotRoleAlias: Swift.Bool?
    /// Output configuration for storing sample data collected by the fleet.
    /// This member is required.
    public var outputConfig: SageMakerClientTypes.EdgeOutputConfig?
    /// The Amazon Resource Name (ARN) of the device.
    public var roleArn: Swift.String?

    public init(
        description: Swift.String? = nil,
        deviceFleetName: Swift.String? = nil,
        enableIotRoleAlias: Swift.Bool? = nil,
        outputConfig: SageMakerClientTypes.EdgeOutputConfig? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.description = description
        self.deviceFleetName = deviceFleetName
        self.enableIotRoleAlias = enableIotRoleAlias
        self.outputConfig = outputConfig
        self.roleArn = roleArn
    }
}

public struct UpdateDevicesInput {
    /// The name of the fleet the devices belong to.
    /// This member is required.
    public var deviceFleetName: Swift.String?
    /// List of devices to register with Edge Manager agent.
    /// This member is required.
    public var devices: [SageMakerClientTypes.Device]?

    public init(
        deviceFleetName: Swift.String? = nil,
        devices: [SageMakerClientTypes.Device]? = nil
    )
    {
        self.deviceFleetName = deviceFleetName
        self.devices = devices
    }
}

public struct UpdateDomainInput {
    /// Specifies the VPC used for non-EFS traffic.
    ///
    /// * PublicInternetOnly - Non-EFS traffic is through a VPC managed by Amazon SageMaker, which allows direct internet access.
    ///
    /// * VpcOnly - All Studio traffic is through the specified VPC and subnets.
    ///
    ///
    /// This configuration can only be modified if there are no apps in the InService, Pending, or Deleting state. The configuration cannot be updated if DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn is already set or DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn is provided as part of the same request.
    public var appNetworkAccessType: SageMakerClientTypes.AppNetworkAccessType?
    /// The entity that creates and manages the required security groups for inter-app communication in VPCOnly mode. Required when CreateDomain.AppNetworkAccessType is VPCOnly and DomainSettings.RStudioServerProDomainSettings.DomainExecutionRoleArn is provided. If setting up the domain for use with RStudio, this value must be set to Service.
    public var appSecurityGroupManagement: SageMakerClientTypes.AppSecurityGroupManagement?
    /// The default settings used to create a space within the domain.
    public var defaultSpaceSettings: SageMakerClientTypes.DefaultSpaceSettings?
    /// A collection of settings.
    public var defaultUserSettings: SageMakerClientTypes.UserSettings?
    /// The ID of the domain to be updated.
    /// This member is required.
    public var domainId: Swift.String?
    /// A collection of DomainSettings configuration values to update.
    public var domainSettingsForUpdate: SageMakerClientTypes.DomainSettingsForUpdate?
    /// The VPC subnets that Studio uses for communication. If removing subnets, ensure there are no apps in the InService, Pending, or Deleting state.
    public var subnetIds: [Swift.String]?

    public init(
        appNetworkAccessType: SageMakerClientTypes.AppNetworkAccessType? = nil,
        appSecurityGroupManagement: SageMakerClientTypes.AppSecurityGroupManagement? = nil,
        defaultSpaceSettings: SageMakerClientTypes.DefaultSpaceSettings? = nil,
        defaultUserSettings: SageMakerClientTypes.UserSettings? = nil,
        domainId: Swift.String? = nil,
        domainSettingsForUpdate: SageMakerClientTypes.DomainSettingsForUpdate? = nil,
        subnetIds: [Swift.String]? = nil
    )
    {
        self.appNetworkAccessType = appNetworkAccessType
        self.appSecurityGroupManagement = appSecurityGroupManagement
        self.defaultSpaceSettings = defaultSpaceSettings
        self.defaultUserSettings = defaultUserSettings
        self.domainId = domainId
        self.domainSettingsForUpdate = domainSettingsForUpdate
        self.subnetIds = subnetIds
    }
}

public struct UpdateDomainOutput {
    /// The Amazon Resource Name (ARN) of the domain.
    public var domainArn: Swift.String?

    public init(
        domainArn: Swift.String? = nil
    )
    {
        self.domainArn = domainArn
    }
}

extension SageMakerClientTypes {

    public enum VariantPropertyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case datacaptureconfig
        case desiredinstancecount
        case desiredweight
        case sdkUnknown(Swift.String)

        public static var allCases: [VariantPropertyType] {
            return [
                .datacaptureconfig,
                .desiredinstancecount,
                .desiredweight
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .datacaptureconfig: return "DataCaptureConfig"
            case .desiredinstancecount: return "DesiredInstanceCount"
            case .desiredweight: return "DesiredWeight"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension SageMakerClientTypes {
    /// Specifies a production variant property type for an Endpoint. If you are updating an endpoint with the RetainAllVariantProperties option of [UpdateEndpointInput](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html) set to true, the VariantProperty objects listed in the ExcludeRetainedVariantProperties parameter of [UpdateEndpointInput](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_UpdateEndpoint.html) override the existing variant properties of the endpoint.
    public struct VariantProperty {
        /// The type of variant property. The supported values are:
        ///
        /// * DesiredInstanceCount: Overrides the existing variant instance counts using the InitialInstanceCount values in the ProductionVariants of [CreateEndpointConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html).
        ///
        /// * DesiredWeight: Overrides the existing variant weights using the InitialVariantWeight values in the ProductionVariants of [CreateEndpointConfig](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateEndpointConfig.html).
        ///
        /// * DataCaptureConfig: (Not currently supported.)
        /// This member is required.
        public var variantPropertyType: SageMakerClientTypes.VariantPropertyType?

        public init(
            variantPropertyType: SageMakerClientTypes.VariantPropertyType? = nil
        )
        {
            self.variantPropertyType = variantPropertyType
        }
    }

}

public struct UpdateEndpointInput {
    /// The deployment configuration for an endpoint, which contains the desired deployment strategy and rollback configurations.
    public var deploymentConfig: SageMakerClientTypes.DeploymentConfig?
    /// The name of the new endpoint configuration.
    /// This member is required.
    public var endpointConfigName: Swift.String?
    /// The name of the endpoint whose configuration you want to update.
    /// This member is required.
    public var endpointName: Swift.String?
    /// When you are updating endpoint resources with RetainAllVariantProperties, whose value is set to true, ExcludeRetainedVariantProperties specifies the list of type [VariantProperty](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VariantProperty.html) to override with the values provided by EndpointConfig. If you don't specify a value for ExcludeRetainedVariantProperties, no variant properties are overridden.
    public var excludeRetainedVariantProperties: [SageMakerClientTypes.VariantProperty]?
    /// When updating endpoint resources, enables or disables the retention of [variant properties](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_VariantProperty.html), such as the instance count or the variant weight. To retain the variant properties of an endpoint when updating it, set RetainAllVariantProperties to true. To use the variant properties specified in a new EndpointConfig call when updating an endpoint, set RetainAllVariantProperties to false. The default is false.
    public var retainAllVariantProperties: Swift.Bool?
    /// Specifies whether to reuse the last deployment configuration. The default value is false (the configuration is not reused).
    public var retainDeploymentConfig: Swift.Bool?

    public init(
        deploymentConfig: SageMakerClientTypes.DeploymentConfig? = nil,
        endpointConfigName: Swift.String? = nil,
        endpointName: Swift.String? = nil,
        excludeRetainedVariantProperties: [SageMakerClientTypes.VariantProperty]? = nil,
        retainAllVariantProperties: Swift.Bool? = nil,
        retainDeploymentConfig: Swift.Bool? = nil
    )
    {
        self.deploymentConfig = deploymentConfig
        self.endpointConfigName = endpointConfigName
        self.endpointName = endpointName
        self.excludeRetainedVariantProperties = excludeRetainedVariantProperties
        self.retainAllVariantProperties = retainAllVariantProperties
        self.retainDeploymentConfig = retainDeploymentConfig
    }
}

public struct UpdateEndpointOutput {
    /// The Amazon Resource Name (ARN) of the endpoint.
    /// This member is required.
    public var endpointArn: Swift.String?

    public init(
        endpointArn: Swift.String? = nil
    )
    {
        self.endpointArn = endpointArn
    }
}

public struct UpdateEndpointWeightsAndCapacitiesInput {
    /// An object that provides new capacity and weight values for a variant.
    /// This member is required.
    public var desiredWeightsAndCapacities: [SageMakerClientTypes.DesiredWeightAndCapacity]?
    /// The name of an existing SageMaker endpoint.
    /// This member is required.
    public var endpointName: Swift.String?

    public init(
        desiredWeightsAndCapacities: [SageMakerClientTypes.DesiredWeightAndCapacity]? = nil,
        endpointName: Swift.String? = nil
    )
    {
        self.desiredWeightsAndCapacities = desiredWeightsAndCapacities
        self.endpointName = endpointName
    }
}

public struct UpdateEndpointWeightsAndCapacitiesOutput {
    /// The Amazon Resource Name (ARN) of the updated endpoint.
    /// This member is required.
    public var endpointArn: Swift.String?

    public init(
        endpointArn: Swift.String? = nil
    )
    {
        self.endpointArn = endpointArn
    }
}

public struct UpdateExperimentInput {
    /// The description of the experiment.
    public var description: Swift.String?
    /// The name of the experiment as displayed. The name doesn't need to be unique. If DisplayName isn't specified, ExperimentName is displayed.
    public var displayName: Swift.String?
    /// The name of the experiment to update.
    /// This member is required.
    public var experimentName: Swift.String?

    public init(
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        experimentName: Swift.String? = nil
    )
    {
        self.description = description
        self.displayName = displayName
        self.experimentName = experimentName
    }
}

public struct UpdateExperimentOutput {
    /// The Amazon Resource Name (ARN) of the experiment.
    public var experimentArn: Swift.String?

    public init(
        experimentArn: Swift.String? = nil
    )
    {
        self.experimentArn = experimentArn
    }
}

extension SageMakerClientTypes {
    /// The new throughput configuration for the feature group. You can switch between on-demand and provisioned modes or update the read / write capacity of provisioned feature groups. You can switch a feature group to on-demand only once in a 24 hour period.
    public struct ThroughputConfigUpdate {
        /// For provisioned feature groups with online store enabled, this indicates the read throughput you are billed for and can consume without throttling.
        public var provisionedReadCapacityUnits: Swift.Int?
        /// For provisioned feature groups, this indicates the write throughput you are billed for and can consume without throttling.
        public var provisionedWriteCapacityUnits: Swift.Int?
        /// Target throughput mode of the feature group. Throughput update is an asynchronous operation, and the outcome should be monitored by polling LastUpdateStatus field in DescribeFeatureGroup response. You cannot update a feature group's throughput while another update is in progress.
        public var throughputMode: SageMakerClientTypes.ThroughputMode?

        public init(
            provisionedReadCapacityUnits: Swift.Int? = nil,
            provisionedWriteCapacityUnits: Swift.Int? = nil,
            throughputMode: SageMakerClientTypes.ThroughputMode? = nil
        )
        {
            self.provisionedReadCapacityUnits = provisionedReadCapacityUnits
            self.provisionedWriteCapacityUnits = provisionedWriteCapacityUnits
            self.throughputMode = throughputMode
        }
    }

}

public struct UpdateFeatureGroupInput {
    /// Updates the feature group. Updating a feature group is an asynchronous operation. When you get an HTTP 200 response, you've made a valid request. It takes some time after you've made a valid request for Feature Store to update the feature group.
    public var featureAdditions: [SageMakerClientTypes.FeatureDefinition]?
    /// The name or Amazon Resource Name (ARN) of the feature group that you're updating.
    /// This member is required.
    public var featureGroupName: Swift.String?
    /// Updates the feature group online store configuration.
    public var onlineStoreConfig: SageMakerClientTypes.OnlineStoreConfigUpdate?
    /// The new throughput configuration for the feature group. You can switch between on-demand and provisioned modes or update the read / write capacity of provisioned feature groups. You can switch a feature group to on-demand only once in a 24 hour period.
    public var throughputConfig: SageMakerClientTypes.ThroughputConfigUpdate?

    public init(
        featureAdditions: [SageMakerClientTypes.FeatureDefinition]? = nil,
        featureGroupName: Swift.String? = nil,
        onlineStoreConfig: SageMakerClientTypes.OnlineStoreConfigUpdate? = nil,
        throughputConfig: SageMakerClientTypes.ThroughputConfigUpdate? = nil
    )
    {
        self.featureAdditions = featureAdditions
        self.featureGroupName = featureGroupName
        self.onlineStoreConfig = onlineStoreConfig
        self.throughputConfig = throughputConfig
    }
}

public struct UpdateFeatureGroupOutput {
    /// The Amazon Resource Number (ARN) of the feature group that you're updating.
    /// This member is required.
    public var featureGroupArn: Swift.String?

    public init(
        featureGroupArn: Swift.String? = nil
    )
    {
        self.featureGroupArn = featureGroupArn
    }
}

public struct UpdateFeatureMetadataInput {
    /// A description that you can write to better describe the feature.
    public var description: Swift.String?
    /// The name or Amazon Resource Name (ARN) of the feature group containing the feature that you're updating.
    /// This member is required.
    public var featureGroupName: Swift.String?
    /// The name of the feature that you're updating.
    /// This member is required.
    public var featureName: Swift.String?
    /// A list of key-value pairs that you can add to better describe the feature.
    public var parameterAdditions: [SageMakerClientTypes.FeatureParameter]?
    /// A list of parameter keys that you can specify to remove parameters that describe your feature.
    public var parameterRemovals: [Swift.String]?

    public init(
        description: Swift.String? = nil,
        featureGroupName: Swift.String? = nil,
        featureName: Swift.String? = nil,
        parameterAdditions: [SageMakerClientTypes.FeatureParameter]? = nil,
        parameterRemovals: [Swift.String]? = nil
    )
    {
        self.description = description
        self.featureGroupName = featureGroupName
        self.featureName = featureName
        self.parameterAdditions = parameterAdditions
        self.parameterRemovals = parameterRemovals
    }
}

public struct UpdateHubInput {
    /// A description of the updated hub.
    public var hubDescription: Swift.String?
    /// The display name of the hub.
    public var hubDisplayName: Swift.String?
    /// The name of the hub to update.
    /// This member is required.
    public var hubName: Swift.String?
    /// The searchable keywords for the hub.
    public var hubSearchKeywords: [Swift.String]?

    public init(
        hubDescription: Swift.String? = nil,
        hubDisplayName: Swift.String? = nil,
        hubName: Swift.String? = nil,
        hubSearchKeywords: [Swift.String]? = nil
    )
    {
        self.hubDescription = hubDescription
        self.hubDisplayName = hubDisplayName
        self.hubName = hubName
        self.hubSearchKeywords = hubSearchKeywords
    }
}

public struct UpdateHubOutput {
    /// The Amazon Resource Name (ARN) of the updated hub.
    /// This member is required.
    public var hubArn: Swift.String?

    public init(
        hubArn: Swift.String? = nil
    )
    {
        self.hubArn = hubArn
    }
}

public struct UpdateImageInput {
    /// A list of properties to delete. Only the Description and DisplayName properties can be deleted.
    public var deleteProperties: [Swift.String]?
    /// The new description for the image.
    public var description: Swift.String?
    /// The new display name for the image.
    public var displayName: Swift.String?
    /// The name of the image to update.
    /// This member is required.
    public var imageName: Swift.String?
    /// The new ARN for the IAM role that enables Amazon SageMaker to perform tasks on your behalf.
    public var roleArn: Swift.String?

    public init(
        deleteProperties: [Swift.String]? = nil,
        description: Swift.String? = nil,
        displayName: Swift.String? = nil,
        imageName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.deleteProperties = deleteProperties
        self.description = description
        self.displayName = displayName
        self.imageName = imageName
        self.roleArn = roleArn
    }
}

public struct UpdateImageOutput {
    /// The ARN of the image.
    public var imageArn: Swift.String?

    public init(
        imageArn: Swift.String? = nil
    )
    {
        self.imageArn = imageArn
    }
}

public struct UpdateImageVersionInput {
    /// The alias of the image version.
    public var alias: Swift.String?
    /// A list of aliases to add.
    public var aliasesToAdd: [Swift.String]?
    /// A list of aliases to delete.
    public var aliasesToDelete: [Swift.String]?
    /// Indicates Horovod compatibility.
    public var horovod: Swift.Bool?
    /// The name of the image.
    /// This member is required.
    public var imageName: Swift.String?
    /// Indicates SageMaker job type compatibility.
    ///
    /// * TRAINING: The image version is compatible with SageMaker training jobs.
    ///
    /// * INFERENCE: The image version is compatible with SageMaker inference jobs.
    ///
    /// * NOTEBOOK_KERNEL: The image version is compatible with SageMaker notebook kernels.
    public var jobType: SageMakerClientTypes.JobType?
    /// The machine learning framework vended in the image version.
    public var mlFramework: Swift.String?
    /// Indicates CPU or GPU compatibility.
    ///
    /// * CPU: The image version is compatible with CPU.
    ///
    /// * GPU: The image version is compatible with GPU.
    public var processor: SageMakerClientTypes.Processor?
    /// The supported programming language and its version.
    public var programmingLang: Swift.String?
    /// The maintainer description of the image version.
    public var releaseNotes: Swift.String?
    /// The availability of the image version specified by the maintainer.
    ///
    /// * NOT_PROVIDED: The maintainers did not provide a status for image version stability.
    ///
    /// * STABLE: The image version is stable.
    ///
    /// * TO_BE_ARCHIVED: The image version is set to be archived. Custom image versions that are set to be archived are automatically archived after three months.
    ///
    /// * ARCHIVED: The image version is archived. Archived image versions are not searchable and are no longer actively supported.
    public var vendorGuidance: SageMakerClientTypes.VendorGuidance?
    /// The version of the image.
    public var version: Swift.Int?

    public init(
        alias: Swift.String? = nil,
        aliasesToAdd: [Swift.String]? = nil,
        aliasesToDelete: [Swift.String]? = nil,
        horovod: Swift.Bool? = nil,
        imageName: Swift.String? = nil,
        jobType: SageMakerClientTypes.JobType? = nil,
        mlFramework: Swift.String? = nil,
        processor: SageMakerClientTypes.Processor? = nil,
        programmingLang: Swift.String? = nil,
        releaseNotes: Swift.String? = nil,
        vendorGuidance: SageMakerClientTypes.VendorGuidance? = nil,
        version: Swift.Int? = nil
    )
    {
        self.alias = alias
        self.aliasesToAdd = aliasesToAdd
        self.aliasesToDelete = aliasesToDelete
        self.horovod = horovod
        self.imageName = imageName
        self.jobType = jobType
        self.mlFramework = mlFramework
        self.processor = processor
        self.programmingLang = programmingLang
        self.releaseNotes = releaseNotes
        self.vendorGuidance = vendorGuidance
        self.version = version
    }
}

public struct UpdateImageVersionOutput {
    /// The ARN of the image version.
    public var imageVersionArn: Swift.String?

    public init(
        imageVersionArn: Swift.String? = nil
    )
    {
        self.imageVersionArn = imageVersionArn
    }
}

public struct UpdateInferenceComponentInput {
    /// The name of the inference component.
    /// This member is required.
    public var inferenceComponentName: Swift.String?
    /// Runtime settings for a model that is deployed with an inference component.
    public var runtimeConfig: SageMakerClientTypes.InferenceComponentRuntimeConfig?
    /// Details about the resources to deploy with this inference component, including the model, container, and compute resources.
    public var specification: SageMakerClientTypes.InferenceComponentSpecification?

    public init(
        inferenceComponentName: Swift.String? = nil,
        runtimeConfig: SageMakerClientTypes.InferenceComponentRuntimeConfig? = nil,
        specification: SageMakerClientTypes.InferenceComponentSpecification? = nil
    )
    {
        self.inferenceComponentName = inferenceComponentName
        self.runtimeConfig = runtimeConfig
        self.specification = specification
    }
}

public struct UpdateInferenceComponentOutput {
    /// The Amazon Resource Name (ARN) of the inference component.
    /// This member is required.
    public var inferenceComponentArn: Swift.String?

    public init(
        inferenceComponentArn: Swift.String? = nil
    )
    {
        self.inferenceComponentArn = inferenceComponentArn
    }
}

public struct UpdateInferenceComponentRuntimeConfigInput {
    /// Runtime settings for a model that is deployed with an inference component.
    /// This member is required.
    public var desiredRuntimeConfig: SageMakerClientTypes.InferenceComponentRuntimeConfig?
    /// The name of the inference component to update.
    /// This member is required.
    public var inferenceComponentName: Swift.String?

    public init(
        desiredRuntimeConfig: SageMakerClientTypes.InferenceComponentRuntimeConfig? = nil,
        inferenceComponentName: Swift.String? = nil
    )
    {
        self.desiredRuntimeConfig = desiredRuntimeConfig
        self.inferenceComponentName = inferenceComponentName
    }
}

public struct UpdateInferenceComponentRuntimeConfigOutput {
    /// The Amazon Resource Name (ARN) of the inference component.
    /// This member is required.
    public var inferenceComponentArn: Swift.String?

    public init(
        inferenceComponentArn: Swift.String? = nil
    )
    {
        self.inferenceComponentArn = inferenceComponentArn
    }
}

public struct UpdateInferenceExperimentInput {
    /// The Amazon S3 location and configuration for storing inference request and response data.
    public var dataStorageConfig: SageMakerClientTypes.InferenceExperimentDataStorageConfig?
    /// The description of the inference experiment.
    public var description: Swift.String?
    /// An array of ModelVariantConfig objects. There is one for each variant, whose infrastructure configuration you want to update.
    public var modelVariants: [SageMakerClientTypes.ModelVariantConfig]?
    /// The name of the inference experiment to be updated.
    /// This member is required.
    public var name: Swift.String?
    /// The duration for which the inference experiment will run. If the status of the inference experiment is Created, then you can update both the start and end dates. If the status of the inference experiment is Running, then you can update only the end date.
    public var schedule: SageMakerClientTypes.InferenceExperimentSchedule?
    /// The configuration of ShadowMode inference experiment type. Use this field to specify a production variant which takes all the inference requests, and a shadow variant to which Amazon SageMaker replicates a percentage of the inference requests. For the shadow variant also specify the percentage of requests that Amazon SageMaker replicates.
    public var shadowModeConfig: SageMakerClientTypes.ShadowModeConfig?

    public init(
        dataStorageConfig: SageMakerClientTypes.InferenceExperimentDataStorageConfig? = nil,
        description: Swift.String? = nil,
        modelVariants: [SageMakerClientTypes.ModelVariantConfig]? = nil,
        name: Swift.String? = nil,
        schedule: SageMakerClientTypes.InferenceExperimentSchedule? = nil,
        shadowModeConfig: SageMakerClientTypes.ShadowModeConfig? = nil
    )
    {
        self.dataStorageConfig = dataStorageConfig
        self.description = description
        self.modelVariants = modelVariants
        self.name = name
        self.schedule = schedule
        self.shadowModeConfig = shadowModeConfig
    }
}

public struct UpdateInferenceExperimentOutput {
    /// The ARN of the updated inference experiment.
    /// This member is required.
    public var inferenceExperimentArn: Swift.String?

    public init(
        inferenceExperimentArn: Swift.String? = nil
    )
    {
        self.inferenceExperimentArn = inferenceExperimentArn
    }
}

public struct UpdateMlflowTrackingServerInput {
    /// The new S3 URI for the general purpose bucket to use as the artifact store for the MLflow Tracking Server.
    public var artifactStoreUri: Swift.String?
    /// Whether to enable or disable automatic registration of new MLflow models to the SageMaker Model Registry. To enable automatic model registration, set this value to True. To disable automatic model registration, set this value to False. If not specified, AutomaticModelRegistration defaults to False
    public var automaticModelRegistration: Swift.Bool?
    /// The name of the MLflow Tracking Server to update.
    /// This member is required.
    public var trackingServerName: Swift.String?
    /// The new size for the MLflow Tracking Server.
    public var trackingServerSize: SageMakerClientTypes.TrackingServerSize?
    /// The new weekly maintenance window start day and time to update. The maintenance window day and time should be in Coordinated Universal Time (UTC) 24-hour standard time. For example: TUE:03:30.
    public var weeklyMaintenanceWindowStart: Swift.String?

    public init(
        artifactStoreUri: Swift.String? = nil,
        automaticModelRegistration: Swift.Bool? = nil,
        trackingServerName: Swift.String? = nil,
        trackingServerSize: SageMakerClientTypes.TrackingServerSize? = nil,
        weeklyMaintenanceWindowStart: Swift.String? = nil
    )
    {
        self.artifactStoreUri = artifactStoreUri
        self.automaticModelRegistration = automaticModelRegistration
        self.trackingServerName = trackingServerName
        self.trackingServerSize = trackingServerSize
        self.weeklyMaintenanceWindowStart = weeklyMaintenanceWindowStart
    }
}

public struct UpdateMlflowTrackingServerOutput {
    /// The ARN of the updated MLflow Tracking Server.
    public var trackingServerArn: Swift.String?

    public init(
        trackingServerArn: Swift.String? = nil
    )
    {
        self.trackingServerArn = trackingServerArn
    }
}

public struct UpdateModelCardInput {
    /// The updated model card content. Content must be in [model card JSON schema](https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html#model-cards-json-schema) and provided as a string. When updating model card content, be sure to include the full content and not just updated content.
    public var content: Swift.String?
    /// The name or Amazon Resource Name (ARN) of the model card to update.
    /// This member is required.
    public var modelCardName: Swift.String?
    /// The approval status of the model card within your organization. Different organizations might have different criteria for model card review and approval.
    ///
    /// * Draft: The model card is a work in progress.
    ///
    /// * PendingReview: The model card is pending review.
    ///
    /// * Approved: The model card is approved.
    ///
    /// * Archived: The model card is archived. No more updates should be made to the model card, but it can still be exported.
    public var modelCardStatus: SageMakerClientTypes.ModelCardStatus?

    public init(
        content: Swift.String? = nil,
        modelCardName: Swift.String? = nil,
        modelCardStatus: SageMakerClientTypes.ModelCardStatus? = nil
    )
    {
        self.content = content
        self.modelCardName = modelCardName
        self.modelCardStatus = modelCardStatus
    }
}

extension UpdateModelCardInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateModelCardInput(modelCardName: \(Swift.String(describing: modelCardName)), modelCardStatus: \(Swift.String(describing: modelCardStatus)), content: \"CONTENT_REDACTED\")"}
}

public struct UpdateModelCardOutput {
    /// The Amazon Resource Name (ARN) of the updated model card.
    /// This member is required.
    public var modelCardArn: Swift.String?

    public init(
        modelCardArn: Swift.String? = nil
    )
    {
        self.modelCardArn = modelCardArn
    }
}

public struct UpdateModelPackageInput {
    /// An array of additional Inference Specification objects to be added to the existing array additional Inference Specification. Total number of additional Inference Specifications can not exceed 15. Each additional Inference Specification specifies artifacts based on this model package that can be used on inference endpoints. Generally used with SageMaker Neo to store the compiled artifacts.
    public var additionalInferenceSpecificationsToAdd: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]?
    /// A description for the approval status of the model.
    public var approvalDescription: Swift.String?
    /// The metadata properties associated with the model package versions.
    public var customerMetadataProperties: [Swift.String: Swift.String]?
    /// The metadata properties associated with the model package versions to remove.
    public var customerMetadataPropertiesToRemove: [Swift.String]?
    /// Specifies details about inference jobs that you can run with models based on this model package, including the following information:
    ///
    /// * The Amazon ECR paths of containers that contain the inference code and model artifacts.
    ///
    /// * The instance types that the model package supports for transform jobs and real-time endpoints used for inference.
    ///
    /// * The input and output content formats that the model package supports for inference.
    public var inferenceSpecification: SageMakerClientTypes.InferenceSpecification?
    /// The approval status of the model.
    public var modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus?
    /// The model card associated with the model package. Since ModelPackageModelCard is tied to a model package, it is a specific usage of a model card and its schema is simplified compared to the schema of ModelCard. The ModelPackageModelCard schema does not include model_package_details, and model_overview is composed of the model_creator and model_artifact properties. For more information about the model package model card schema, see [Model package model card schema](https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html#model-card-schema). For more information about the model card associated with the model package, see [View the Details of a Model Version](https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry-details.html).
    public var modelCard: SageMakerClientTypes.ModelPackageModelCard?
    /// The Amazon Resource Name (ARN) of the model package.
    /// This member is required.
    public var modelPackageArn: Swift.String?
    /// The URI of the source for the model package.
    public var sourceUri: Swift.String?

    public init(
        additionalInferenceSpecificationsToAdd: [SageMakerClientTypes.AdditionalInferenceSpecificationDefinition]? = nil,
        approvalDescription: Swift.String? = nil,
        customerMetadataProperties: [Swift.String: Swift.String]? = nil,
        customerMetadataPropertiesToRemove: [Swift.String]? = nil,
        inferenceSpecification: SageMakerClientTypes.InferenceSpecification? = nil,
        modelApprovalStatus: SageMakerClientTypes.ModelApprovalStatus? = nil,
        modelCard: SageMakerClientTypes.ModelPackageModelCard? = nil,
        modelPackageArn: Swift.String? = nil,
        sourceUri: Swift.String? = nil
    )
    {
        self.additionalInferenceSpecificationsToAdd = additionalInferenceSpecificationsToAdd
        self.approvalDescription = approvalDescription
        self.customerMetadataProperties = customerMetadataProperties
        self.customerMetadataPropertiesToRemove = customerMetadataPropertiesToRemove
        self.inferenceSpecification = inferenceSpecification
        self.modelApprovalStatus = modelApprovalStatus
        self.modelCard = modelCard
        self.modelPackageArn = modelPackageArn
        self.sourceUri = sourceUri
    }
}

public struct UpdateModelPackageOutput {
    /// The Amazon Resource Name (ARN) of the model.
    /// This member is required.
    public var modelPackageArn: Swift.String?

    public init(
        modelPackageArn: Swift.String? = nil
    )
    {
        self.modelPackageArn = modelPackageArn
    }
}

public struct UpdateMonitoringAlertInput {
    /// Within EvaluationPeriod, how many execution failures will raise an alert.
    /// This member is required.
    public var datapointsToAlert: Swift.Int?
    /// The number of most recent monitoring executions to consider when evaluating alert status.
    /// This member is required.
    public var evaluationPeriod: Swift.Int?
    /// The name of a monitoring alert.
    /// This member is required.
    public var monitoringAlertName: Swift.String?
    /// The name of a monitoring schedule.
    /// This member is required.
    public var monitoringScheduleName: Swift.String?

    public init(
        datapointsToAlert: Swift.Int? = nil,
        evaluationPeriod: Swift.Int? = nil,
        monitoringAlertName: Swift.String? = nil,
        monitoringScheduleName: Swift.String? = nil
    )
    {
        self.datapointsToAlert = datapointsToAlert
        self.evaluationPeriod = evaluationPeriod
        self.monitoringAlertName = monitoringAlertName
        self.monitoringScheduleName = monitoringScheduleName
    }
}

public struct UpdateMonitoringAlertOutput {
    /// The name of a monitoring alert.
    public var monitoringAlertName: Swift.String?
    /// The Amazon Resource Name (ARN) of the monitoring schedule.
    /// This member is required.
    public var monitoringScheduleArn: Swift.String?

    public init(
        monitoringAlertName: Swift.String? = nil,
        monitoringScheduleArn: Swift.String? = nil
    )
    {
        self.monitoringAlertName = monitoringAlertName
        self.monitoringScheduleArn = monitoringScheduleArn
    }
}

public struct UpdateMonitoringScheduleInput {
    /// The configuration object that specifies the monitoring schedule and defines the monitoring job.
    /// This member is required.
    public var monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig?
    /// The name of the monitoring schedule. The name must be unique within an Amazon Web Services Region within an Amazon Web Services account.
    /// This member is required.
    public var monitoringScheduleName: Swift.String?

    public init(
        monitoringScheduleConfig: SageMakerClientTypes.MonitoringScheduleConfig? = nil,
        monitoringScheduleName: Swift.String? = nil
    )
    {
        self.monitoringScheduleConfig = monitoringScheduleConfig
        self.monitoringScheduleName = monitoringScheduleName
    }
}

public struct UpdateMonitoringScheduleOutput {
    /// The Amazon Resource Name (ARN) of the monitoring schedule.
    /// This member is required.
    public var monitoringScheduleArn: Swift.String?

    public init(
        monitoringScheduleArn: Swift.String? = nil
    )
    {
        self.monitoringScheduleArn = monitoringScheduleArn
    }
}

public struct UpdateNotebookInstanceInput {
    /// A list of the Elastic Inference (EI) instance types to associate with this notebook instance. Currently only one EI instance type can be associated with a notebook instance. For more information, see [Using Elastic Inference in Amazon SageMaker](https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html).
    public var acceleratorTypes: [SageMakerClientTypes.NotebookInstanceAcceleratorType]?
    /// An array of up to three Git repositories to associate with the notebook instance. These can be either the names of Git repositories stored as resources in your account, or the URL of Git repositories in [Amazon Web Services CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. These repositories are cloned at the same level as the default repository of your notebook instance. For more information, see [Associating Git Repositories with SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
    public var additionalCodeRepositories: [Swift.String]?
    /// The Git repository to associate with the notebook instance as its default code repository. This can be either the name of a Git repository stored as a resource in your account, or the URL of a Git repository in [Amazon Web Services CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository. When you open a notebook instance, it opens in the directory that contains this repository. For more information, see [Associating Git Repositories with SageMaker Notebook Instances](https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
    public var defaultCodeRepository: Swift.String?
    /// A list of the Elastic Inference (EI) instance types to remove from this notebook instance. This operation is idempotent. If you specify an accelerator type that is not associated with the notebook instance when you call this method, it does not throw an error.
    public var disassociateAcceleratorTypes: Swift.Bool?
    /// A list of names or URLs of the default Git repositories to remove from this notebook instance. This operation is idempotent. If you specify a Git repository that is not associated with the notebook instance when you call this method, it does not throw an error.
    public var disassociateAdditionalCodeRepositories: Swift.Bool?
    /// The name or URL of the default Git repository to remove from this notebook instance. This operation is idempotent. If you specify a Git repository that is not associated with the notebook instance when you call this method, it does not throw an error.
    public var disassociateDefaultCodeRepository: Swift.Bool?
    /// Set to true to remove the notebook instance lifecycle configuration currently associated with the notebook instance. This operation is idempotent. If you specify a lifecycle configuration that is not associated with the notebook instance when you call this method, it does not throw an error.
    public var disassociateLifecycleConfig: Swift.Bool?
    /// Information on the IMDS configuration of the notebook instance
    public var instanceMetadataServiceConfiguration: SageMakerClientTypes.InstanceMetadataServiceConfiguration?
    /// The Amazon ML compute instance type.
    public var instanceType: SageMakerClientTypes.InstanceType?
    /// The name of a lifecycle configuration to associate with the notebook instance. For information about lifestyle configurations, see [Step 2.1: (Optional) Customize a Notebook Instance](https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html).
    public var lifecycleConfigName: Swift.String?
    /// The name of the notebook instance to update.
    /// This member is required.
    public var notebookInstanceName: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that SageMaker can assume to access the notebook instance. For more information, see [SageMaker Roles](https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html). To be able to pass this role to SageMaker, the caller of this API must have the iam:PassRole permission.
    public var roleArn: Swift.String?
    /// Whether root access is enabled or disabled for users of the notebook instance. The default value is Enabled. If you set this to Disabled, users don't have root access on the notebook instance, but lifecycle configuration scripts still run with root permissions.
    public var rootAccess: SageMakerClientTypes.RootAccess?
    /// The size, in GB, of the ML storage volume to attach to the notebook instance. The default value is 5 GB. ML storage volumes are encrypted, so SageMaker can't determine the amount of available free space on the volume. Because of this, you can increase the volume size when you update a notebook instance, but you can't decrease the volume size. If you want to decrease the size of the ML storage volume in use, create a new notebook instance with the desired size.
    public var volumeSizeInGB: Swift.Int?

    public init(
        acceleratorTypes: [SageMakerClientTypes.NotebookInstanceAcceleratorType]? = nil,
        additionalCodeRepositories: [Swift.String]? = nil,
        defaultCodeRepository: Swift.String? = nil,
        disassociateAcceleratorTypes: Swift.Bool? = nil,
        disassociateAdditionalCodeRepositories: Swift.Bool? = nil,
        disassociateDefaultCodeRepository: Swift.Bool? = nil,
        disassociateLifecycleConfig: Swift.Bool? = nil,
        instanceMetadataServiceConfiguration: SageMakerClientTypes.InstanceMetadataServiceConfiguration? = nil,
        instanceType: SageMakerClientTypes.InstanceType? = nil,
        lifecycleConfigName: Swift.String? = nil,
        notebookInstanceName: Swift.String? = nil,
        roleArn: Swift.String? = nil,
        rootAccess: SageMakerClientTypes.RootAccess? = nil,
        volumeSizeInGB: Swift.Int? = nil
    )
    {
        self.acceleratorTypes = acceleratorTypes
        self.additionalCodeRepositories = additionalCodeRepositories
        self.defaultCodeRepository = defaultCodeRepository
        self.disassociateAcceleratorTypes = disassociateAcceleratorTypes
        self.disassociateAdditionalCodeRepositories = disassociateAdditionalCodeRepositories
        self.disassociateDefaultCodeRepository = disassociateDefaultCodeRepository
        self.disassociateLifecycleConfig = disassociateLifecycleConfig
        self.instanceMetadataServiceConfiguration = instanceMetadataServiceConfiguration
        self.instanceType = instanceType
        self.lifecycleConfigName = lifecycleConfigName
        self.notebookInstanceName = notebookInstanceName
        self.roleArn = roleArn
        self.rootAccess = rootAccess
        self.volumeSizeInGB = volumeSizeInGB
    }
}

public struct UpdateNotebookInstanceOutput {

    public init() { }
}

public struct UpdateNotebookInstanceLifecycleConfigInput {
    /// The name of the lifecycle configuration.
    /// This member is required.
    public var notebookInstanceLifecycleConfigName: Swift.String?
    /// The shell script that runs only once, when you create a notebook instance. The shell script must be a base64-encoded string.
    public var onCreate: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?
    /// The shell script that runs every time you start a notebook instance, including when you create the notebook instance. The shell script must be a base64-encoded string.
    public var onStart: [SageMakerClientTypes.NotebookInstanceLifecycleHook]?

    public init(
        notebookInstanceLifecycleConfigName: Swift.String? = nil,
        onCreate: [SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil,
        onStart: [SageMakerClientTypes.NotebookInstanceLifecycleHook]? = nil
    )
    {
        self.notebookInstanceLifecycleConfigName = notebookInstanceLifecycleConfigName
        self.onCreate = onCreate
        self.onStart = onStart
    }
}

public struct UpdateNotebookInstanceLifecycleConfigOutput {

    public init() { }
}

public struct UpdatePipelineInput {
    /// If specified, it applies to all executions of this pipeline by default.
    public var parallelismConfiguration: SageMakerClientTypes.ParallelismConfiguration?
    /// The JSON pipeline definition.
    public var pipelineDefinition: Swift.String?
    /// The location of the pipeline definition stored in Amazon S3. If specified, SageMaker will retrieve the pipeline definition from this location.
    public var pipelineDefinitionS3Location: SageMakerClientTypes.PipelineDefinitionS3Location?
    /// The description of the pipeline.
    public var pipelineDescription: Swift.String?
    /// The display name of the pipeline.
    public var pipelineDisplayName: Swift.String?
    /// The name of the pipeline to update.
    /// This member is required.
    public var pipelineName: Swift.String?
    /// The Amazon Resource Name (ARN) that the pipeline uses to execute.
    public var roleArn: Swift.String?

    public init(
        parallelismConfiguration: SageMakerClientTypes.ParallelismConfiguration? = nil,
        pipelineDefinition: Swift.String? = nil,
        pipelineDefinitionS3Location: SageMakerClientTypes.PipelineDefinitionS3Location? = nil,
        pipelineDescription: Swift.String? = nil,
        pipelineDisplayName: Swift.String? = nil,
        pipelineName: Swift.String? = nil,
        roleArn: Swift.String? = nil
    )
    {
        self.parallelismConfiguration = parallelismConfiguration
        self.pipelineDefinition = pipelineDefinition
        self.pipelineDefinitionS3Location = pipelineDefinitionS3Location
        self.pipelineDescription = pipelineDescription
        self.pipelineDisplayName = pipelineDisplayName
        self.pipelineName = pipelineName
        self.roleArn = roleArn
    }
}

public struct UpdatePipelineOutput {
    /// The Amazon Resource Name (ARN) of the updated pipeline.
    public var pipelineArn: Swift.String?

    public init(
        pipelineArn: Swift.String? = nil
    )
    {
        self.pipelineArn = pipelineArn
    }
}

public struct UpdatePipelineExecutionInput {
    /// This configuration, if specified, overrides the parallelism configuration of the parent pipeline for this specific run.
    public var parallelismConfiguration: SageMakerClientTypes.ParallelismConfiguration?
    /// The Amazon Resource Name (ARN) of the pipeline execution.
    /// This member is required.
    public var pipelineExecutionArn: Swift.String?
    /// The description of the pipeline execution.
    public var pipelineExecutionDescription: Swift.String?
    /// The display name of the pipeline execution.
    public var pipelineExecutionDisplayName: Swift.String?

    public init(
        parallelismConfiguration: SageMakerClientTypes.ParallelismConfiguration? = nil,
        pipelineExecutionArn: Swift.String? = nil,
        pipelineExecutionDescription: Swift.String? = nil,
        pipelineExecutionDisplayName: Swift.String? = nil
    )
    {
        self.parallelismConfiguration = parallelismConfiguration
        self.pipelineExecutionArn = pipelineExecutionArn
        self.pipelineExecutionDescription = pipelineExecutionDescription
        self.pipelineExecutionDisplayName = pipelineExecutionDisplayName
    }
}

public struct UpdatePipelineExecutionOutput {
    /// The Amazon Resource Name (ARN) of the updated pipeline execution.
    public var pipelineExecutionArn: Swift.String?

    public init(
        pipelineExecutionArn: Swift.String? = nil
    )
    {
        self.pipelineExecutionArn = pipelineExecutionArn
    }
}

extension SageMakerClientTypes {
    /// Details that you specify to provision a service catalog product. For information about service catalog, see [What is Amazon Web Services Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html).
    public struct ServiceCatalogProvisioningUpdateDetails {
        /// The ID of the provisioning artifact.
        public var provisioningArtifactId: Swift.String?
        /// A list of key value pairs that you specify when you provision a product.
        public var provisioningParameters: [SageMakerClientTypes.ProvisioningParameter]?

        public init(
            provisioningArtifactId: Swift.String? = nil,
            provisioningParameters: [SageMakerClientTypes.ProvisioningParameter]? = nil
        )
        {
            self.provisioningArtifactId = provisioningArtifactId
            self.provisioningParameters = provisioningParameters
        }
    }

}

public struct UpdateProjectInput {
    /// The description for the project.
    public var projectDescription: Swift.String?
    /// The name of the project.
    /// This member is required.
    public var projectName: Swift.String?
    /// The product ID and provisioning artifact ID to provision a service catalog. The provisioning artifact ID will default to the latest provisioning artifact ID of the product, if you don't provide the provisioning artifact ID. For more information, see [What is Amazon Web Services Service Catalog](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/introduction.html).
    public var serviceCatalogProvisioningUpdateDetails: SageMakerClientTypes.ServiceCatalogProvisioningUpdateDetails?
    /// An array of key-value pairs. You can use tags to categorize your Amazon Web Services resources in different ways, for example, by purpose, owner, or environment. For more information, see [Tagging Amazon Web Services Resources](https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html). In addition, the project must have tag update constraints set in order to include this parameter in the request. For more information, see [Amazon Web Services Service Catalog Tag Update Constraints](https://docs.aws.amazon.com/servicecatalog/latest/adminguide/constraints-resourceupdate.html).
    public var tags: [SageMakerClientTypes.Tag]?

    public init(
        projectDescription: Swift.String? = nil,
        projectName: Swift.String? = nil,
        serviceCatalogProvisioningUpdateDetails: SageMakerClientTypes.ServiceCatalogProvisioningUpdateDetails? = nil,
        tags: [SageMakerClientTypes.Tag]? = nil
    )
    {
        self.projectDescription = projectDescription
        self.projectName = projectName
        self.serviceCatalogProvisioningUpdateDetails = serviceCatalogProvisioningUpdateDetails
        self.tags = tags
    }
}

public struct UpdateProjectOutput {
    /// The Amazon Resource Name (ARN) of the project.
    /// This member is required.
    public var projectArn: Swift.String?

    public init(
        projectArn: Swift.String? = nil
    )
    {
        self.projectArn = projectArn
    }
}

public struct UpdateSpaceInput {
    /// The ID of the associated domain.
    /// This member is required.
    public var domainId: Swift.String?
    /// The name of the space that appears in the Amazon SageMaker Studio UI.
    public var spaceDisplayName: Swift.String?
    /// The name of the space.
    /// This member is required.
    public var spaceName: Swift.String?
    /// A collection of space settings.
    public var spaceSettings: SageMakerClientTypes.SpaceSettings?

    public init(
        domainId: Swift.String? = nil,
        spaceDisplayName: Swift.String? = nil,
        spaceName: Swift.String? = nil,
        spaceSettings: SageMakerClientTypes.SpaceSettings? = nil
    )
    {
        self.domainId = domainId
        self.spaceDisplayName = spaceDisplayName
        self.spaceName = spaceName
        self.spaceSettings = spaceSettings
    }
}

public struct UpdateSpaceOutput {
    /// The space's Amazon Resource Name (ARN).
    public var spaceArn: Swift.String?

    public init(
        spaceArn: Swift.String? = nil
    )
    {
        self.spaceArn = spaceArn
    }
}

public struct UpdateTrainingJobInput {
    /// Configuration information for Amazon SageMaker Debugger system monitoring, framework profiling, and storage paths.
    public var profilerConfig: SageMakerClientTypes.ProfilerConfigForUpdate?
    /// Configuration information for Amazon SageMaker Debugger rules for profiling system and framework metrics.
    public var profilerRuleConfigurations: [SageMakerClientTypes.ProfilerRuleConfiguration]?
    /// Configuration for remote debugging while the training job is running. You can update the remote debugging configuration when the SecondaryStatus of the job is Downloading or Training.To learn more about the remote debugging functionality of SageMaker, see [Access a training container through Amazon Web Services Systems Manager (SSM) for remote debugging](https://docs.aws.amazon.com/sagemaker/latest/dg/train-remote-debugging.html).
    public var remoteDebugConfig: SageMakerClientTypes.RemoteDebugConfigForUpdate?
    /// The training job ResourceConfig to update warm pool retention length.
    public var resourceConfig: SageMakerClientTypes.ResourceConfigForUpdate?
    /// The name of a training job to update the Debugger profiling configuration.
    /// This member is required.
    public var trainingJobName: Swift.String?

    public init(
        profilerConfig: SageMakerClientTypes.ProfilerConfigForUpdate? = nil,
        profilerRuleConfigurations: [SageMakerClientTypes.ProfilerRuleConfiguration]? = nil,
        remoteDebugConfig: SageMakerClientTypes.RemoteDebugConfigForUpdate? = nil,
        resourceConfig: SageMakerClientTypes.ResourceConfigForUpdate? = nil,
        trainingJobName: Swift.String? = nil
    )
    {
        self.profilerConfig = profilerConfig
        self.profilerRuleConfigurations = profilerRuleConfigurations
        self.remoteDebugConfig = remoteDebugConfig
        self.resourceConfig = resourceConfig
        self.trainingJobName = trainingJobName
    }
}

public struct UpdateTrainingJobOutput {
    /// The Amazon Resource Name (ARN) of the training job.
    /// This member is required.
    public var trainingJobArn: Swift.String?

    public init(
        trainingJobArn: Swift.String? = nil
    )
    {
        self.trainingJobArn = trainingJobArn
    }
}

public struct UpdateTrialInput {
    /// The name of the trial as displayed. The name doesn't need to be unique. If DisplayName isn't specified, TrialName is displayed.
    public var displayName: Swift.String?
    /// The name of the trial to update.
    /// This member is required.
    public var trialName: Swift.String?

    public init(
        displayName: Swift.String? = nil,
        trialName: Swift.String? = nil
    )
    {
        self.displayName = displayName
        self.trialName = trialName
    }
}

public struct UpdateTrialOutput {
    /// The Amazon Resource Name (ARN) of the trial.
    public var trialArn: Swift.String?

    public init(
        trialArn: Swift.String? = nil
    )
    {
        self.trialArn = trialArn
    }
}

public struct UpdateTrialComponentInput {
    /// The name of the component as displayed. The name doesn't need to be unique. If DisplayName isn't specified, TrialComponentName is displayed.
    public var displayName: Swift.String?
    /// When the component ended.
    public var endTime: Foundation.Date?
    /// Replaces all of the component's input artifacts with the specified artifacts or adds new input artifacts. Existing input artifacts are replaced if the trial component is updated with an identical input artifact key.
    public var inputArtifacts: [Swift.String: SageMakerClientTypes.TrialComponentArtifact]?
    /// The input artifacts to remove from the component.
    public var inputArtifactsToRemove: [Swift.String]?
    /// Replaces all of the component's output artifacts with the specified artifacts or adds new output artifacts. Existing output artifacts are replaced if the trial component is updated with an identical output artifact key.
    public var outputArtifacts: [Swift.String: SageMakerClientTypes.TrialComponentArtifact]?
    /// The output artifacts to remove from the component.
    public var outputArtifactsToRemove: [Swift.String]?
    /// Replaces all of the component's hyperparameters with the specified hyperparameters or add new hyperparameters. Existing hyperparameters are replaced if the trial component is updated with an identical hyperparameter key.
    public var parameters: [Swift.String: SageMakerClientTypes.TrialComponentParameterValue]?
    /// The hyperparameters to remove from the component.
    public var parametersToRemove: [Swift.String]?
    /// When the component started.
    public var startTime: Foundation.Date?
    /// The new status of the component.
    public var status: SageMakerClientTypes.TrialComponentStatus?
    /// The name of the component to update.
    /// This member is required.
    public var trialComponentName: Swift.String?

    public init(
        displayName: Swift.String? = nil,
        endTime: Foundation.Date? = nil,
        inputArtifacts: [Swift.String: SageMakerClientTypes.TrialComponentArtifact]? = nil,
        inputArtifactsToRemove: [Swift.String]? = nil,
        outputArtifacts: [Swift.String: SageMakerClientTypes.TrialComponentArtifact]? = nil,
        outputArtifactsToRemove: [Swift.String]? = nil,
        parameters: [Swift.String: SageMakerClientTypes.TrialComponentParameterValue]? = nil,
        parametersToRemove: [Swift.String]? = nil,
        startTime: Foundation.Date? = nil,
        status: SageMakerClientTypes.TrialComponentStatus? = nil,
        trialComponentName: Swift.String? = nil
    )
    {
        self.displayName = displayName
        self.endTime = endTime
        self.inputArtifacts = inputArtifacts
        self.inputArtifactsToRemove = inputArtifactsToRemove
        self.outputArtifacts = outputArtifacts
        self.outputArtifactsToRemove = outputArtifactsToRemove
        self.parameters = parameters
        self.parametersToRemove = parametersToRemove
        self.startTime = startTime
        self.status = status
        self.trialComponentName = trialComponentName
    }
}

public struct UpdateTrialComponentOutput {
    /// The Amazon Resource Name (ARN) of the trial component.
    public var trialComponentArn: Swift.String?

    public init(
        trialComponentArn: Swift.String? = nil
    )
    {
        self.trialComponentArn = trialComponentArn
    }
}

public struct UpdateUserProfileInput {
    /// The domain ID.
    /// This member is required.
    public var domainId: Swift.String?
    /// The user profile name.
    /// This member is required.
    public var userProfileName: Swift.String?
    /// A collection of settings.
    public var userSettings: SageMakerClientTypes.UserSettings?

    public init(
        domainId: Swift.String? = nil,
        userProfileName: Swift.String? = nil,
        userSettings: SageMakerClientTypes.UserSettings? = nil
    )
    {
        self.domainId = domainId
        self.userProfileName = userProfileName
        self.userSettings = userSettings
    }
}

public struct UpdateUserProfileOutput {
    /// The user profile Amazon Resource Name (ARN).
    public var userProfileArn: Swift.String?

    public init(
        userProfileArn: Swift.String? = nil
    )
    {
        self.userProfileArn = userProfileArn
    }
}

public struct UpdateWorkforceInput {
    /// Use this parameter to update your OIDC Identity Provider (IdP) configuration for a workforce made using your own IdP.
    public var oidcConfig: SageMakerClientTypes.OidcConfig?
    /// A list of one to ten worker IP address ranges ([CIDRs](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html)) that can be used to access tasks assigned to this workforce. Maximum: Ten CIDR values
    public var sourceIpConfig: SageMakerClientTypes.SourceIpConfig?
    /// The name of the private workforce that you want to update. You can find your workforce name by using the [ListWorkforces](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_ListWorkforces.html) operation.
    /// This member is required.
    public var workforceName: Swift.String?
    /// Use this parameter to update your VPC configuration for a workforce.
    public var workforceVpcConfig: SageMakerClientTypes.WorkforceVpcConfigRequest?

    public init(
        oidcConfig: SageMakerClientTypes.OidcConfig? = nil,
        sourceIpConfig: SageMakerClientTypes.SourceIpConfig? = nil,
        workforceName: Swift.String? = nil,
        workforceVpcConfig: SageMakerClientTypes.WorkforceVpcConfigRequest? = nil
    )
    {
        self.oidcConfig = oidcConfig
        self.sourceIpConfig = sourceIpConfig
        self.workforceName = workforceName
        self.workforceVpcConfig = workforceVpcConfig
    }
}

public struct UpdateWorkforceOutput {
    /// A single private workforce. You can create one private work force in each Amazon Web Services Region. By default, any workforce-related API operation used in a specific region will apply to the workforce created in that region. To learn how to create a private workforce, see [Create a Private Workforce](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html).
    /// This member is required.
    public var workforce: SageMakerClientTypes.Workforce?

    public init(
        workforce: SageMakerClientTypes.Workforce? = nil
    )
    {
        self.workforce = workforce
    }
}

public struct UpdateWorkteamInput {
    /// An updated description for the work team.
    public var description: Swift.String?
    /// A list of MemberDefinition objects that contains objects that identify the workers that make up the work team. Workforces can be created using Amazon Cognito or your own OIDC Identity Provider (IdP). For private workforces created using Amazon Cognito use CognitoMemberDefinition. For workforces created using your own OIDC identity provider (IdP) use OidcMemberDefinition. You should not provide input for both of these parameters in a single request. For workforces created using Amazon Cognito, private work teams correspond to Amazon Cognito user groups within the user pool used to create a workforce. All of the CognitoMemberDefinition objects that make up the member definition must have the same ClientId and UserPool values. To add a Amazon Cognito user group to an existing worker pool, see [Adding groups to a User Pool]. For more information about user pools, see [Amazon Cognito User Pools](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html). For workforces created using your own OIDC IdP, specify the user groups that you want to include in your private work team in OidcMemberDefinition by listing those groups in Groups. Be aware that user groups that are already in the work team must also be listed in Groups when you make this request to remain on the work team. If you do not include these user groups, they will no longer be associated with the work team you update.
    public var memberDefinitions: [SageMakerClientTypes.MemberDefinition]?
    /// Configures SNS topic notifications for available or expiring work items
    public var notificationConfiguration: SageMakerClientTypes.NotificationConfiguration?
    /// Use this optional parameter to constrain access to an Amazon S3 resource based on the IP address using supported IAM global condition keys. The Amazon S3 resource is accessed in the worker portal using a Amazon S3 presigned URL.
    public var workerAccessConfiguration: SageMakerClientTypes.WorkerAccessConfiguration?
    /// The name of the work team to update.
    /// This member is required.
    public var workteamName: Swift.String?

    public init(
        description: Swift.String? = nil,
        memberDefinitions: [SageMakerClientTypes.MemberDefinition]? = nil,
        notificationConfiguration: SageMakerClientTypes.NotificationConfiguration? = nil,
        workerAccessConfiguration: SageMakerClientTypes.WorkerAccessConfiguration? = nil,
        workteamName: Swift.String? = nil
    )
    {
        self.description = description
        self.memberDefinitions = memberDefinitions
        self.notificationConfiguration = notificationConfiguration
        self.workerAccessConfiguration = workerAccessConfiguration
        self.workteamName = workteamName
    }
}

public struct UpdateWorkteamOutput {
    /// A Workteam object that describes the updated work team.
    /// This member is required.
    public var workteam: SageMakerClientTypes.Workteam?

    public init(
        workteam: SageMakerClientTypes.Workteam? = nil
    )
    {
        self.workteam = workteam
    }
}

extension SageMakerClientTypes {
    /// A multi-expression that searches for the specified resource or resources in a search. All resource objects that satisfy the expression's condition are included in the search results. You must specify at least one subexpression, filter, or nested filter. A SearchExpression can contain up to twenty elements. A SearchExpression contains the following components:
    ///
    /// * A list of Filter objects. Each filter defines a simple Boolean expression comprised of a resource property name, Boolean operator, and value.
    ///
    /// * A list of NestedFilter objects. Each nested filter defines a list of Boolean expressions using a list of resource properties. A nested filter is satisfied if a single object in the list satisfies all Boolean expressions.
    ///
    /// * A list of SearchExpression objects. A search expression object can be nested in a list of search expression objects.
    ///
    /// * A Boolean operator: And or Or.
    public struct SearchExpression {
        /// A list of filter objects.
        public var filters: [SageMakerClientTypes.Filter]?
        /// A list of nested filter objects.
        public var nestedFilters: [SageMakerClientTypes.NestedFilters]?
        /// A Boolean operator used to evaluate the search expression. If you want every conditional statement in all lists to be satisfied for the entire search expression to be true, specify And. If only a single conditional statement needs to be true for the entire search expression to be true, specify Or. The default value is And.
        public var `operator`: SageMakerClientTypes.BooleanOperator?
        /// A list of search expression objects.
        public var subExpressions: [SageMakerClientTypes.SearchExpression]?

        public init(
            filters: [SageMakerClientTypes.Filter]? = nil,
            nestedFilters: [SageMakerClientTypes.NestedFilters]? = nil,
            `operator`: SageMakerClientTypes.BooleanOperator? = nil,
            subExpressions: [SageMakerClientTypes.SearchExpression]? = nil
        )
        {
            self.filters = filters
            self.nestedFilters = nestedFilters
            self.`operator` = `operator`
            self.subExpressions = subExpressions
        }
    }

}

public struct SearchInput {
    /// A cross account filter option. When the value is "CrossAccount" the search results will only include resources made discoverable to you from other accounts. When the value is "SameAccount" or null the search results will only include resources from your account. Default is null. For more information on searching for resources made discoverable to your account, see [ Search discoverable resources](https://docs.aws.amazon.com/sagemaker/latest/dg/feature-store-cross-account-discoverability-use.html) in the SageMaker Developer Guide. The maximum number of ResourceCatalogs viewable is 1000.
    public var crossAccountFilterOption: SageMakerClientTypes.CrossAccountFilterOption?
    /// The maximum number of results to return.
    public var maxResults: Swift.Int?
    /// If more than MaxResults resources match the specified SearchExpression, the response includes a NextToken. The NextToken can be passed to the next SearchRequest to continue retrieving results.
    public var nextToken: Swift.String?
    /// The name of the SageMaker resource to search for.
    /// This member is required.
    public var resource: SageMakerClientTypes.ResourceType?
    /// A Boolean conditional statement. Resources must satisfy this condition to be included in search results. You must provide at least one subexpression, filter, or nested filter. The maximum number of recursive SubExpressions, NestedFilters, and Filters that can be included in a SearchExpression object is 50.
    public var searchExpression: SageMakerClientTypes.SearchExpression?
    /// The name of the resource property used to sort the SearchResults. The default is LastModifiedTime.
    public var sortBy: Swift.String?
    /// How SearchResults are ordered. Valid values are Ascending or Descending. The default is Descending.
    public var sortOrder: SageMakerClientTypes.SearchSortOrder?
    /// Limits the results of your search request to the resources that you can access.
    public var visibilityConditions: [SageMakerClientTypes.VisibilityConditions]?

    public init(
        crossAccountFilterOption: SageMakerClientTypes.CrossAccountFilterOption? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        resource: SageMakerClientTypes.ResourceType? = nil,
        searchExpression: SageMakerClientTypes.SearchExpression? = nil,
        sortBy: Swift.String? = nil,
        sortOrder: SageMakerClientTypes.SearchSortOrder? = nil,
        visibilityConditions: [SageMakerClientTypes.VisibilityConditions]? = nil
    )
    {
        self.crossAccountFilterOption = crossAccountFilterOption
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.resource = resource
        self.searchExpression = searchExpression
        self.sortBy = sortBy
        self.sortOrder = sortOrder
        self.visibilityConditions = visibilityConditions
    }
}

extension AddAssociationInput {

    static func urlPathProvider(_ value: AddAssociationInput) -> Swift.String? {
        return "/"
    }
}

extension AddTagsInput {

    static func urlPathProvider(_ value: AddTagsInput) -> Swift.String? {
        return "/"
    }
}

extension AssociateTrialComponentInput {

    static func urlPathProvider(_ value: AssociateTrialComponentInput) -> Swift.String? {
        return "/"
    }
}

extension BatchDescribeModelPackageInput {

    static func urlPathProvider(_ value: BatchDescribeModelPackageInput) -> Swift.String? {
        return "/"
    }
}

extension CreateActionInput {

    static func urlPathProvider(_ value: CreateActionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateAlgorithmInput {

    static func urlPathProvider(_ value: CreateAlgorithmInput) -> Swift.String? {
        return "/"
    }
}

extension CreateAppInput {

    static func urlPathProvider(_ value: CreateAppInput) -> Swift.String? {
        return "/"
    }
}

extension CreateAppImageConfigInput {

    static func urlPathProvider(_ value: CreateAppImageConfigInput) -> Swift.String? {
        return "/"
    }
}

extension CreateArtifactInput {

    static func urlPathProvider(_ value: CreateArtifactInput) -> Swift.String? {
        return "/"
    }
}

extension CreateAutoMLJobInput {

    static func urlPathProvider(_ value: CreateAutoMLJobInput) -> Swift.String? {
        return "/"
    }
}

extension CreateAutoMLJobV2Input {

    static func urlPathProvider(_ value: CreateAutoMLJobV2Input) -> Swift.String? {
        return "/"
    }
}

extension CreateClusterInput {

    static func urlPathProvider(_ value: CreateClusterInput) -> Swift.String? {
        return "/"
    }
}

extension CreateCodeRepositoryInput {

    static func urlPathProvider(_ value: CreateCodeRepositoryInput) -> Swift.String? {
        return "/"
    }
}

extension CreateCompilationJobInput {

    static func urlPathProvider(_ value: CreateCompilationJobInput) -> Swift.String? {
        return "/"
    }
}

extension CreateContextInput {

    static func urlPathProvider(_ value: CreateContextInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDataQualityJobDefinitionInput {

    static func urlPathProvider(_ value: CreateDataQualityJobDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDeviceFleetInput {

    static func urlPathProvider(_ value: CreateDeviceFleetInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDomainInput {

    static func urlPathProvider(_ value: CreateDomainInput) -> Swift.String? {
        return "/"
    }
}

extension CreateEdgeDeploymentPlanInput {

    static func urlPathProvider(_ value: CreateEdgeDeploymentPlanInput) -> Swift.String? {
        return "/"
    }
}

extension CreateEdgeDeploymentStageInput {

    static func urlPathProvider(_ value: CreateEdgeDeploymentStageInput) -> Swift.String? {
        return "/"
    }
}

extension CreateEdgePackagingJobInput {

    static func urlPathProvider(_ value: CreateEdgePackagingJobInput) -> Swift.String? {
        return "/"
    }
}

extension CreateEndpointInput {

    static func urlPathProvider(_ value: CreateEndpointInput) -> Swift.String? {
        return "/"
    }
}

extension CreateEndpointConfigInput {

    static func urlPathProvider(_ value: CreateEndpointConfigInput) -> Swift.String? {
        return "/"
    }
}

extension CreateExperimentInput {

    static func urlPathProvider(_ value: CreateExperimentInput) -> Swift.String? {
        return "/"
    }
}

extension CreateFeatureGroupInput {

    static func urlPathProvider(_ value: CreateFeatureGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateFlowDefinitionInput {

    static func urlPathProvider(_ value: CreateFlowDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateHubInput {

    static func urlPathProvider(_ value: CreateHubInput) -> Swift.String? {
        return "/"
    }
}

extension CreateHubContentReferenceInput {

    static func urlPathProvider(_ value: CreateHubContentReferenceInput) -> Swift.String? {
        return "/"
    }
}

extension CreateHumanTaskUiInput {

    static func urlPathProvider(_ value: CreateHumanTaskUiInput) -> Swift.String? {
        return "/"
    }
}

extension CreateHyperParameterTuningJobInput {

    static func urlPathProvider(_ value: CreateHyperParameterTuningJobInput) -> Swift.String? {
        return "/"
    }
}

extension CreateImageInput {

    static func urlPathProvider(_ value: CreateImageInput) -> Swift.String? {
        return "/"
    }
}

extension CreateImageVersionInput {

    static func urlPathProvider(_ value: CreateImageVersionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateInferenceComponentInput {

    static func urlPathProvider(_ value: CreateInferenceComponentInput) -> Swift.String? {
        return "/"
    }
}

extension CreateInferenceExperimentInput {

    static func urlPathProvider(_ value: CreateInferenceExperimentInput) -> Swift.String? {
        return "/"
    }
}

extension CreateInferenceRecommendationsJobInput {

    static func urlPathProvider(_ value: CreateInferenceRecommendationsJobInput) -> Swift.String? {
        return "/"
    }
}

extension CreateLabelingJobInput {

    static func urlPathProvider(_ value: CreateLabelingJobInput) -> Swift.String? {
        return "/"
    }
}

extension CreateMlflowTrackingServerInput {

    static func urlPathProvider(_ value: CreateMlflowTrackingServerInput) -> Swift.String? {
        return "/"
    }
}

extension CreateModelInput {

    static func urlPathProvider(_ value: CreateModelInput) -> Swift.String? {
        return "/"
    }
}

extension CreateModelBiasJobDefinitionInput {

    static func urlPathProvider(_ value: CreateModelBiasJobDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateModelCardInput {

    static func urlPathProvider(_ value: CreateModelCardInput) -> Swift.String? {
        return "/"
    }
}

extension CreateModelCardExportJobInput {

    static func urlPathProvider(_ value: CreateModelCardExportJobInput) -> Swift.String? {
        return "/"
    }
}

extension CreateModelExplainabilityJobDefinitionInput {

    static func urlPathProvider(_ value: CreateModelExplainabilityJobDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateModelPackageInput {

    static func urlPathProvider(_ value: CreateModelPackageInput) -> Swift.String? {
        return "/"
    }
}

extension CreateModelPackageGroupInput {

    static func urlPathProvider(_ value: CreateModelPackageGroupInput) -> Swift.String? {
        return "/"
    }
}

extension CreateModelQualityJobDefinitionInput {

    static func urlPathProvider(_ value: CreateModelQualityJobDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension CreateMonitoringScheduleInput {

    static func urlPathProvider(_ value: CreateMonitoringScheduleInput) -> Swift.String? {
        return "/"
    }
}

extension CreateNotebookInstanceInput {

    static func urlPathProvider(_ value: CreateNotebookInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension CreateNotebookInstanceLifecycleConfigInput {

    static func urlPathProvider(_ value: CreateNotebookInstanceLifecycleConfigInput) -> Swift.String? {
        return "/"
    }
}

extension CreateOptimizationJobInput {

    static func urlPathProvider(_ value: CreateOptimizationJobInput) -> Swift.String? {
        return "/"
    }
}

extension CreatePipelineInput {

    static func urlPathProvider(_ value: CreatePipelineInput) -> Swift.String? {
        return "/"
    }
}

extension CreatePresignedDomainUrlInput {

    static func urlPathProvider(_ value: CreatePresignedDomainUrlInput) -> Swift.String? {
        return "/"
    }
}

extension CreatePresignedMlflowTrackingServerUrlInput {

    static func urlPathProvider(_ value: CreatePresignedMlflowTrackingServerUrlInput) -> Swift.String? {
        return "/"
    }
}

extension CreatePresignedNotebookInstanceUrlInput {

    static func urlPathProvider(_ value: CreatePresignedNotebookInstanceUrlInput) -> Swift.String? {
        return "/"
    }
}

extension CreateProcessingJobInput {

    static func urlPathProvider(_ value: CreateProcessingJobInput) -> Swift.String? {
        return "/"
    }
}

extension CreateProjectInput {

    static func urlPathProvider(_ value: CreateProjectInput) -> Swift.String? {
        return "/"
    }
}

extension CreateSpaceInput {

    static func urlPathProvider(_ value: CreateSpaceInput) -> Swift.String? {
        return "/"
    }
}

extension CreateStudioLifecycleConfigInput {

    static func urlPathProvider(_ value: CreateStudioLifecycleConfigInput) -> Swift.String? {
        return "/"
    }
}

extension CreateTrainingJobInput {

    static func urlPathProvider(_ value: CreateTrainingJobInput) -> Swift.String? {
        return "/"
    }
}

extension CreateTransformJobInput {

    static func urlPathProvider(_ value: CreateTransformJobInput) -> Swift.String? {
        return "/"
    }
}

extension CreateTrialInput {

    static func urlPathProvider(_ value: CreateTrialInput) -> Swift.String? {
        return "/"
    }
}

extension CreateTrialComponentInput {

    static func urlPathProvider(_ value: CreateTrialComponentInput) -> Swift.String? {
        return "/"
    }
}

extension CreateUserProfileInput {

    static func urlPathProvider(_ value: CreateUserProfileInput) -> Swift.String? {
        return "/"
    }
}

extension CreateWorkforceInput {

    static func urlPathProvider(_ value: CreateWorkforceInput) -> Swift.String? {
        return "/"
    }
}

extension CreateWorkteamInput {

    static func urlPathProvider(_ value: CreateWorkteamInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteActionInput {

    static func urlPathProvider(_ value: DeleteActionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAlgorithmInput {

    static func urlPathProvider(_ value: DeleteAlgorithmInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAppInput {

    static func urlPathProvider(_ value: DeleteAppInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAppImageConfigInput {

    static func urlPathProvider(_ value: DeleteAppImageConfigInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteArtifactInput {

    static func urlPathProvider(_ value: DeleteArtifactInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteAssociationInput {

    static func urlPathProvider(_ value: DeleteAssociationInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteClusterInput {

    static func urlPathProvider(_ value: DeleteClusterInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteCodeRepositoryInput {

    static func urlPathProvider(_ value: DeleteCodeRepositoryInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteCompilationJobInput {

    static func urlPathProvider(_ value: DeleteCompilationJobInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteContextInput {

    static func urlPathProvider(_ value: DeleteContextInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDataQualityJobDefinitionInput {

    static func urlPathProvider(_ value: DeleteDataQualityJobDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDeviceFleetInput {

    static func urlPathProvider(_ value: DeleteDeviceFleetInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDomainInput {

    static func urlPathProvider(_ value: DeleteDomainInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteEdgeDeploymentPlanInput {

    static func urlPathProvider(_ value: DeleteEdgeDeploymentPlanInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteEdgeDeploymentStageInput {

    static func urlPathProvider(_ value: DeleteEdgeDeploymentStageInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteEndpointInput {

    static func urlPathProvider(_ value: DeleteEndpointInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteEndpointConfigInput {

    static func urlPathProvider(_ value: DeleteEndpointConfigInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteExperimentInput {

    static func urlPathProvider(_ value: DeleteExperimentInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteFeatureGroupInput {

    static func urlPathProvider(_ value: DeleteFeatureGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteFlowDefinitionInput {

    static func urlPathProvider(_ value: DeleteFlowDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteHubInput {

    static func urlPathProvider(_ value: DeleteHubInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteHubContentInput {

    static func urlPathProvider(_ value: DeleteHubContentInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteHubContentReferenceInput {

    static func urlPathProvider(_ value: DeleteHubContentReferenceInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteHumanTaskUiInput {

    static func urlPathProvider(_ value: DeleteHumanTaskUiInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteHyperParameterTuningJobInput {

    static func urlPathProvider(_ value: DeleteHyperParameterTuningJobInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteImageInput {

    static func urlPathProvider(_ value: DeleteImageInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteImageVersionInput {

    static func urlPathProvider(_ value: DeleteImageVersionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteInferenceComponentInput {

    static func urlPathProvider(_ value: DeleteInferenceComponentInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteInferenceExperimentInput {

    static func urlPathProvider(_ value: DeleteInferenceExperimentInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteMlflowTrackingServerInput {

    static func urlPathProvider(_ value: DeleteMlflowTrackingServerInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteModelInput {

    static func urlPathProvider(_ value: DeleteModelInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteModelBiasJobDefinitionInput {

    static func urlPathProvider(_ value: DeleteModelBiasJobDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteModelCardInput {

    static func urlPathProvider(_ value: DeleteModelCardInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteModelExplainabilityJobDefinitionInput {

    static func urlPathProvider(_ value: DeleteModelExplainabilityJobDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteModelPackageInput {

    static func urlPathProvider(_ value: DeleteModelPackageInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteModelPackageGroupInput {

    static func urlPathProvider(_ value: DeleteModelPackageGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteModelPackageGroupPolicyInput {

    static func urlPathProvider(_ value: DeleteModelPackageGroupPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteModelQualityJobDefinitionInput {

    static func urlPathProvider(_ value: DeleteModelQualityJobDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteMonitoringScheduleInput {

    static func urlPathProvider(_ value: DeleteMonitoringScheduleInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteNotebookInstanceInput {

    static func urlPathProvider(_ value: DeleteNotebookInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteNotebookInstanceLifecycleConfigInput {

    static func urlPathProvider(_ value: DeleteNotebookInstanceLifecycleConfigInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteOptimizationJobInput {

    static func urlPathProvider(_ value: DeleteOptimizationJobInput) -> Swift.String? {
        return "/"
    }
}

extension DeletePipelineInput {

    static func urlPathProvider(_ value: DeletePipelineInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteProjectInput {

    static func urlPathProvider(_ value: DeleteProjectInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteSpaceInput {

    static func urlPathProvider(_ value: DeleteSpaceInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteStudioLifecycleConfigInput {

    static func urlPathProvider(_ value: DeleteStudioLifecycleConfigInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteTagsInput {

    static func urlPathProvider(_ value: DeleteTagsInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteTrialInput {

    static func urlPathProvider(_ value: DeleteTrialInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteTrialComponentInput {

    static func urlPathProvider(_ value: DeleteTrialComponentInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteUserProfileInput {

    static func urlPathProvider(_ value: DeleteUserProfileInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteWorkforceInput {

    static func urlPathProvider(_ value: DeleteWorkforceInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteWorkteamInput {

    static func urlPathProvider(_ value: DeleteWorkteamInput) -> Swift.String? {
        return "/"
    }
}

extension DeregisterDevicesInput {

    static func urlPathProvider(_ value: DeregisterDevicesInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeActionInput {

    static func urlPathProvider(_ value: DescribeActionInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAlgorithmInput {

    static func urlPathProvider(_ value: DescribeAlgorithmInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAppInput {

    static func urlPathProvider(_ value: DescribeAppInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAppImageConfigInput {

    static func urlPathProvider(_ value: DescribeAppImageConfigInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeArtifactInput {

    static func urlPathProvider(_ value: DescribeArtifactInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAutoMLJobInput {

    static func urlPathProvider(_ value: DescribeAutoMLJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeAutoMLJobV2Input {

    static func urlPathProvider(_ value: DescribeAutoMLJobV2Input) -> Swift.String? {
        return "/"
    }
}

extension DescribeClusterInput {

    static func urlPathProvider(_ value: DescribeClusterInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeClusterNodeInput {

    static func urlPathProvider(_ value: DescribeClusterNodeInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeCodeRepositoryInput {

    static func urlPathProvider(_ value: DescribeCodeRepositoryInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeCompilationJobInput {

    static func urlPathProvider(_ value: DescribeCompilationJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeContextInput {

    static func urlPathProvider(_ value: DescribeContextInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDataQualityJobDefinitionInput {

    static func urlPathProvider(_ value: DescribeDataQualityJobDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDeviceInput {

    static func urlPathProvider(_ value: DescribeDeviceInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDeviceFleetInput {

    static func urlPathProvider(_ value: DescribeDeviceFleetInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDomainInput {

    static func urlPathProvider(_ value: DescribeDomainInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEdgeDeploymentPlanInput {

    static func urlPathProvider(_ value: DescribeEdgeDeploymentPlanInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEdgePackagingJobInput {

    static func urlPathProvider(_ value: DescribeEdgePackagingJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEndpointInput {

    static func urlPathProvider(_ value: DescribeEndpointInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEndpointConfigInput {

    static func urlPathProvider(_ value: DescribeEndpointConfigInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeExperimentInput {

    static func urlPathProvider(_ value: DescribeExperimentInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFeatureGroupInput {

    static func urlPathProvider(_ value: DescribeFeatureGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFeatureMetadataInput {

    static func urlPathProvider(_ value: DescribeFeatureMetadataInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFlowDefinitionInput {

    static func urlPathProvider(_ value: DescribeFlowDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeHubInput {

    static func urlPathProvider(_ value: DescribeHubInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeHubContentInput {

    static func urlPathProvider(_ value: DescribeHubContentInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeHumanTaskUiInput {

    static func urlPathProvider(_ value: DescribeHumanTaskUiInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeHyperParameterTuningJobInput {

    static func urlPathProvider(_ value: DescribeHyperParameterTuningJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeImageInput {

    static func urlPathProvider(_ value: DescribeImageInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeImageVersionInput {

    static func urlPathProvider(_ value: DescribeImageVersionInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeInferenceComponentInput {

    static func urlPathProvider(_ value: DescribeInferenceComponentInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeInferenceExperimentInput {

    static func urlPathProvider(_ value: DescribeInferenceExperimentInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeInferenceRecommendationsJobInput {

    static func urlPathProvider(_ value: DescribeInferenceRecommendationsJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeLabelingJobInput {

    static func urlPathProvider(_ value: DescribeLabelingJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeLineageGroupInput {

    static func urlPathProvider(_ value: DescribeLineageGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeMlflowTrackingServerInput {

    static func urlPathProvider(_ value: DescribeMlflowTrackingServerInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeModelInput {

    static func urlPathProvider(_ value: DescribeModelInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeModelBiasJobDefinitionInput {

    static func urlPathProvider(_ value: DescribeModelBiasJobDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeModelCardInput {

    static func urlPathProvider(_ value: DescribeModelCardInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeModelCardExportJobInput {

    static func urlPathProvider(_ value: DescribeModelCardExportJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeModelExplainabilityJobDefinitionInput {

    static func urlPathProvider(_ value: DescribeModelExplainabilityJobDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeModelPackageInput {

    static func urlPathProvider(_ value: DescribeModelPackageInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeModelPackageGroupInput {

    static func urlPathProvider(_ value: DescribeModelPackageGroupInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeModelQualityJobDefinitionInput {

    static func urlPathProvider(_ value: DescribeModelQualityJobDefinitionInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeMonitoringScheduleInput {

    static func urlPathProvider(_ value: DescribeMonitoringScheduleInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeNotebookInstanceInput {

    static func urlPathProvider(_ value: DescribeNotebookInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeNotebookInstanceLifecycleConfigInput {

    static func urlPathProvider(_ value: DescribeNotebookInstanceLifecycleConfigInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeOptimizationJobInput {

    static func urlPathProvider(_ value: DescribeOptimizationJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribePipelineInput {

    static func urlPathProvider(_ value: DescribePipelineInput) -> Swift.String? {
        return "/"
    }
}

extension DescribePipelineDefinitionForExecutionInput {

    static func urlPathProvider(_ value: DescribePipelineDefinitionForExecutionInput) -> Swift.String? {
        return "/"
    }
}

extension DescribePipelineExecutionInput {

    static func urlPathProvider(_ value: DescribePipelineExecutionInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeProcessingJobInput {

    static func urlPathProvider(_ value: DescribeProcessingJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeProjectInput {

    static func urlPathProvider(_ value: DescribeProjectInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeSpaceInput {

    static func urlPathProvider(_ value: DescribeSpaceInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeStudioLifecycleConfigInput {

    static func urlPathProvider(_ value: DescribeStudioLifecycleConfigInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeSubscribedWorkteamInput {

    static func urlPathProvider(_ value: DescribeSubscribedWorkteamInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTrainingJobInput {

    static func urlPathProvider(_ value: DescribeTrainingJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTransformJobInput {

    static func urlPathProvider(_ value: DescribeTransformJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTrialInput {

    static func urlPathProvider(_ value: DescribeTrialInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTrialComponentInput {

    static func urlPathProvider(_ value: DescribeTrialComponentInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeUserProfileInput {

    static func urlPathProvider(_ value: DescribeUserProfileInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeWorkforceInput {

    static func urlPathProvider(_ value: DescribeWorkforceInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeWorkteamInput {

    static func urlPathProvider(_ value: DescribeWorkteamInput) -> Swift.String? {
        return "/"
    }
}

extension DisableSagemakerServicecatalogPortfolioInput {

    static func urlPathProvider(_ value: DisableSagemakerServicecatalogPortfolioInput) -> Swift.String? {
        return "/"
    }
}

extension DisassociateTrialComponentInput {

    static func urlPathProvider(_ value: DisassociateTrialComponentInput) -> Swift.String? {
        return "/"
    }
}

extension EnableSagemakerServicecatalogPortfolioInput {

    static func urlPathProvider(_ value: EnableSagemakerServicecatalogPortfolioInput) -> Swift.String? {
        return "/"
    }
}

extension GetDeviceFleetReportInput {

    static func urlPathProvider(_ value: GetDeviceFleetReportInput) -> Swift.String? {
        return "/"
    }
}

extension GetLineageGroupPolicyInput {

    static func urlPathProvider(_ value: GetLineageGroupPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension GetModelPackageGroupPolicyInput {

    static func urlPathProvider(_ value: GetModelPackageGroupPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension GetSagemakerServicecatalogPortfolioStatusInput {

    static func urlPathProvider(_ value: GetSagemakerServicecatalogPortfolioStatusInput) -> Swift.String? {
        return "/"
    }
}

extension GetScalingConfigurationRecommendationInput {

    static func urlPathProvider(_ value: GetScalingConfigurationRecommendationInput) -> Swift.String? {
        return "/"
    }
}

extension GetSearchSuggestionsInput {

    static func urlPathProvider(_ value: GetSearchSuggestionsInput) -> Swift.String? {
        return "/"
    }
}

extension ImportHubContentInput {

    static func urlPathProvider(_ value: ImportHubContentInput) -> Swift.String? {
        return "/"
    }
}

extension ListActionsInput {

    static func urlPathProvider(_ value: ListActionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListAlgorithmsInput {

    static func urlPathProvider(_ value: ListAlgorithmsInput) -> Swift.String? {
        return "/"
    }
}

extension ListAliasesInput {

    static func urlPathProvider(_ value: ListAliasesInput) -> Swift.String? {
        return "/"
    }
}

extension ListAppImageConfigsInput {

    static func urlPathProvider(_ value: ListAppImageConfigsInput) -> Swift.String? {
        return "/"
    }
}

extension ListAppsInput {

    static func urlPathProvider(_ value: ListAppsInput) -> Swift.String? {
        return "/"
    }
}

extension ListArtifactsInput {

    static func urlPathProvider(_ value: ListArtifactsInput) -> Swift.String? {
        return "/"
    }
}

extension ListAssociationsInput {

    static func urlPathProvider(_ value: ListAssociationsInput) -> Swift.String? {
        return "/"
    }
}

extension ListAutoMLJobsInput {

    static func urlPathProvider(_ value: ListAutoMLJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListCandidatesForAutoMLJobInput {

    static func urlPathProvider(_ value: ListCandidatesForAutoMLJobInput) -> Swift.String? {
        return "/"
    }
}

extension ListClusterNodesInput {

    static func urlPathProvider(_ value: ListClusterNodesInput) -> Swift.String? {
        return "/"
    }
}

extension ListClustersInput {

    static func urlPathProvider(_ value: ListClustersInput) -> Swift.String? {
        return "/"
    }
}

extension ListCodeRepositoriesInput {

    static func urlPathProvider(_ value: ListCodeRepositoriesInput) -> Swift.String? {
        return "/"
    }
}

extension ListCompilationJobsInput {

    static func urlPathProvider(_ value: ListCompilationJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListContextsInput {

    static func urlPathProvider(_ value: ListContextsInput) -> Swift.String? {
        return "/"
    }
}

extension ListDataQualityJobDefinitionsInput {

    static func urlPathProvider(_ value: ListDataQualityJobDefinitionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListDeviceFleetsInput {

    static func urlPathProvider(_ value: ListDeviceFleetsInput) -> Swift.String? {
        return "/"
    }
}

extension ListDevicesInput {

    static func urlPathProvider(_ value: ListDevicesInput) -> Swift.String? {
        return "/"
    }
}

extension ListDomainsInput {

    static func urlPathProvider(_ value: ListDomainsInput) -> Swift.String? {
        return "/"
    }
}

extension ListEdgeDeploymentPlansInput {

    static func urlPathProvider(_ value: ListEdgeDeploymentPlansInput) -> Swift.String? {
        return "/"
    }
}

extension ListEdgePackagingJobsInput {

    static func urlPathProvider(_ value: ListEdgePackagingJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListEndpointConfigsInput {

    static func urlPathProvider(_ value: ListEndpointConfigsInput) -> Swift.String? {
        return "/"
    }
}

extension ListEndpointsInput {

    static func urlPathProvider(_ value: ListEndpointsInput) -> Swift.String? {
        return "/"
    }
}

extension ListExperimentsInput {

    static func urlPathProvider(_ value: ListExperimentsInput) -> Swift.String? {
        return "/"
    }
}

extension ListFeatureGroupsInput {

    static func urlPathProvider(_ value: ListFeatureGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListFlowDefinitionsInput {

    static func urlPathProvider(_ value: ListFlowDefinitionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListHubContentsInput {

    static func urlPathProvider(_ value: ListHubContentsInput) -> Swift.String? {
        return "/"
    }
}

extension ListHubContentVersionsInput {

    static func urlPathProvider(_ value: ListHubContentVersionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListHubsInput {

    static func urlPathProvider(_ value: ListHubsInput) -> Swift.String? {
        return "/"
    }
}

extension ListHumanTaskUisInput {

    static func urlPathProvider(_ value: ListHumanTaskUisInput) -> Swift.String? {
        return "/"
    }
}

extension ListHyperParameterTuningJobsInput {

    static func urlPathProvider(_ value: ListHyperParameterTuningJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListImagesInput {

    static func urlPathProvider(_ value: ListImagesInput) -> Swift.String? {
        return "/"
    }
}

extension ListImageVersionsInput {

    static func urlPathProvider(_ value: ListImageVersionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListInferenceComponentsInput {

    static func urlPathProvider(_ value: ListInferenceComponentsInput) -> Swift.String? {
        return "/"
    }
}

extension ListInferenceExperimentsInput {

    static func urlPathProvider(_ value: ListInferenceExperimentsInput) -> Swift.String? {
        return "/"
    }
}

extension ListInferenceRecommendationsJobsInput {

    static func urlPathProvider(_ value: ListInferenceRecommendationsJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListInferenceRecommendationsJobStepsInput {

    static func urlPathProvider(_ value: ListInferenceRecommendationsJobStepsInput) -> Swift.String? {
        return "/"
    }
}

extension ListLabelingJobsInput {

    static func urlPathProvider(_ value: ListLabelingJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListLabelingJobsForWorkteamInput {

    static func urlPathProvider(_ value: ListLabelingJobsForWorkteamInput) -> Swift.String? {
        return "/"
    }
}

extension ListLineageGroupsInput {

    static func urlPathProvider(_ value: ListLineageGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListMlflowTrackingServersInput {

    static func urlPathProvider(_ value: ListMlflowTrackingServersInput) -> Swift.String? {
        return "/"
    }
}

extension ListModelBiasJobDefinitionsInput {

    static func urlPathProvider(_ value: ListModelBiasJobDefinitionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListModelCardExportJobsInput {

    static func urlPathProvider(_ value: ListModelCardExportJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListModelCardsInput {

    static func urlPathProvider(_ value: ListModelCardsInput) -> Swift.String? {
        return "/"
    }
}

extension ListModelCardVersionsInput {

    static func urlPathProvider(_ value: ListModelCardVersionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListModelExplainabilityJobDefinitionsInput {

    static func urlPathProvider(_ value: ListModelExplainabilityJobDefinitionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListModelMetadataInput {

    static func urlPathProvider(_ value: ListModelMetadataInput) -> Swift.String? {
        return "/"
    }
}

extension ListModelPackageGroupsInput {

    static func urlPathProvider(_ value: ListModelPackageGroupsInput) -> Swift.String? {
        return "/"
    }
}

extension ListModelPackagesInput {

    static func urlPathProvider(_ value: ListModelPackagesInput) -> Swift.String? {
        return "/"
    }
}

extension ListModelQualityJobDefinitionsInput {

    static func urlPathProvider(_ value: ListModelQualityJobDefinitionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListModelsInput {

    static func urlPathProvider(_ value: ListModelsInput) -> Swift.String? {
        return "/"
    }
}

extension ListMonitoringAlertHistoryInput {

    static func urlPathProvider(_ value: ListMonitoringAlertHistoryInput) -> Swift.String? {
        return "/"
    }
}

extension ListMonitoringAlertsInput {

    static func urlPathProvider(_ value: ListMonitoringAlertsInput) -> Swift.String? {
        return "/"
    }
}

extension ListMonitoringExecutionsInput {

    static func urlPathProvider(_ value: ListMonitoringExecutionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListMonitoringSchedulesInput {

    static func urlPathProvider(_ value: ListMonitoringSchedulesInput) -> Swift.String? {
        return "/"
    }
}

extension ListNotebookInstanceLifecycleConfigsInput {

    static func urlPathProvider(_ value: ListNotebookInstanceLifecycleConfigsInput) -> Swift.String? {
        return "/"
    }
}

extension ListNotebookInstancesInput {

    static func urlPathProvider(_ value: ListNotebookInstancesInput) -> Swift.String? {
        return "/"
    }
}

extension ListOptimizationJobsInput {

    static func urlPathProvider(_ value: ListOptimizationJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListPipelineExecutionsInput {

    static func urlPathProvider(_ value: ListPipelineExecutionsInput) -> Swift.String? {
        return "/"
    }
}

extension ListPipelineExecutionStepsInput {

    static func urlPathProvider(_ value: ListPipelineExecutionStepsInput) -> Swift.String? {
        return "/"
    }
}

extension ListPipelineParametersForExecutionInput {

    static func urlPathProvider(_ value: ListPipelineParametersForExecutionInput) -> Swift.String? {
        return "/"
    }
}

extension ListPipelinesInput {

    static func urlPathProvider(_ value: ListPipelinesInput) -> Swift.String? {
        return "/"
    }
}

extension ListProcessingJobsInput {

    static func urlPathProvider(_ value: ListProcessingJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListProjectsInput {

    static func urlPathProvider(_ value: ListProjectsInput) -> Swift.String? {
        return "/"
    }
}

extension ListResourceCatalogsInput {

    static func urlPathProvider(_ value: ListResourceCatalogsInput) -> Swift.String? {
        return "/"
    }
}

extension ListSpacesInput {

    static func urlPathProvider(_ value: ListSpacesInput) -> Swift.String? {
        return "/"
    }
}

extension ListStageDevicesInput {

    static func urlPathProvider(_ value: ListStageDevicesInput) -> Swift.String? {
        return "/"
    }
}

extension ListStudioLifecycleConfigsInput {

    static func urlPathProvider(_ value: ListStudioLifecycleConfigsInput) -> Swift.String? {
        return "/"
    }
}

extension ListSubscribedWorkteamsInput {

    static func urlPathProvider(_ value: ListSubscribedWorkteamsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsInput {

    static func urlPathProvider(_ value: ListTagsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTrainingJobsInput {

    static func urlPathProvider(_ value: ListTrainingJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTrainingJobsForHyperParameterTuningJobInput {

    static func urlPathProvider(_ value: ListTrainingJobsForHyperParameterTuningJobInput) -> Swift.String? {
        return "/"
    }
}

extension ListTransformJobsInput {

    static func urlPathProvider(_ value: ListTransformJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTrialComponentsInput {

    static func urlPathProvider(_ value: ListTrialComponentsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTrialsInput {

    static func urlPathProvider(_ value: ListTrialsInput) -> Swift.String? {
        return "/"
    }
}

extension ListUserProfilesInput {

    static func urlPathProvider(_ value: ListUserProfilesInput) -> Swift.String? {
        return "/"
    }
}

extension ListWorkforcesInput {

    static func urlPathProvider(_ value: ListWorkforcesInput) -> Swift.String? {
        return "/"
    }
}

extension ListWorkteamsInput {

    static func urlPathProvider(_ value: ListWorkteamsInput) -> Swift.String? {
        return "/"
    }
}

extension PutModelPackageGroupPolicyInput {

    static func urlPathProvider(_ value: PutModelPackageGroupPolicyInput) -> Swift.String? {
        return "/"
    }
}

extension QueryLineageInput {

    static func urlPathProvider(_ value: QueryLineageInput) -> Swift.String? {
        return "/"
    }
}

extension RegisterDevicesInput {

    static func urlPathProvider(_ value: RegisterDevicesInput) -> Swift.String? {
        return "/"
    }
}

extension RenderUiTemplateInput {

    static func urlPathProvider(_ value: RenderUiTemplateInput) -> Swift.String? {
        return "/"
    }
}

extension RetryPipelineExecutionInput {

    static func urlPathProvider(_ value: RetryPipelineExecutionInput) -> Swift.String? {
        return "/"
    }
}

extension SearchInput {

    static func urlPathProvider(_ value: SearchInput) -> Swift.String? {
        return "/"
    }
}

extension SendPipelineExecutionStepFailureInput {

    static func urlPathProvider(_ value: SendPipelineExecutionStepFailureInput) -> Swift.String? {
        return "/"
    }
}

extension SendPipelineExecutionStepSuccessInput {

    static func urlPathProvider(_ value: SendPipelineExecutionStepSuccessInput) -> Swift.String? {
        return "/"
    }
}

extension StartEdgeDeploymentStageInput {

    static func urlPathProvider(_ value: StartEdgeDeploymentStageInput) -> Swift.String? {
        return "/"
    }
}

extension StartInferenceExperimentInput {

    static func urlPathProvider(_ value: StartInferenceExperimentInput) -> Swift.String? {
        return "/"
    }
}

extension StartMlflowTrackingServerInput {

    static func urlPathProvider(_ value: StartMlflowTrackingServerInput) -> Swift.String? {
        return "/"
    }
}

extension StartMonitoringScheduleInput {

    static func urlPathProvider(_ value: StartMonitoringScheduleInput) -> Swift.String? {
        return "/"
    }
}

extension StartNotebookInstanceInput {

    static func urlPathProvider(_ value: StartNotebookInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension StartPipelineExecutionInput {

    static func urlPathProvider(_ value: StartPipelineExecutionInput) -> Swift.String? {
        return "/"
    }
}

extension StopAutoMLJobInput {

    static func urlPathProvider(_ value: StopAutoMLJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopCompilationJobInput {

    static func urlPathProvider(_ value: StopCompilationJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopEdgeDeploymentStageInput {

    static func urlPathProvider(_ value: StopEdgeDeploymentStageInput) -> Swift.String? {
        return "/"
    }
}

extension StopEdgePackagingJobInput {

    static func urlPathProvider(_ value: StopEdgePackagingJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopHyperParameterTuningJobInput {

    static func urlPathProvider(_ value: StopHyperParameterTuningJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopInferenceExperimentInput {

    static func urlPathProvider(_ value: StopInferenceExperimentInput) -> Swift.String? {
        return "/"
    }
}

extension StopInferenceRecommendationsJobInput {

    static func urlPathProvider(_ value: StopInferenceRecommendationsJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopLabelingJobInput {

    static func urlPathProvider(_ value: StopLabelingJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopMlflowTrackingServerInput {

    static func urlPathProvider(_ value: StopMlflowTrackingServerInput) -> Swift.String? {
        return "/"
    }
}

extension StopMonitoringScheduleInput {

    static func urlPathProvider(_ value: StopMonitoringScheduleInput) -> Swift.String? {
        return "/"
    }
}

extension StopNotebookInstanceInput {

    static func urlPathProvider(_ value: StopNotebookInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension StopOptimizationJobInput {

    static func urlPathProvider(_ value: StopOptimizationJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopPipelineExecutionInput {

    static func urlPathProvider(_ value: StopPipelineExecutionInput) -> Swift.String? {
        return "/"
    }
}

extension StopProcessingJobInput {

    static func urlPathProvider(_ value: StopProcessingJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopTrainingJobInput {

    static func urlPathProvider(_ value: StopTrainingJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopTransformJobInput {

    static func urlPathProvider(_ value: StopTransformJobInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateActionInput {

    static func urlPathProvider(_ value: UpdateActionInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateAppImageConfigInput {

    static func urlPathProvider(_ value: UpdateAppImageConfigInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateArtifactInput {

    static func urlPathProvider(_ value: UpdateArtifactInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateClusterInput {

    static func urlPathProvider(_ value: UpdateClusterInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateClusterSoftwareInput {

    static func urlPathProvider(_ value: UpdateClusterSoftwareInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateCodeRepositoryInput {

    static func urlPathProvider(_ value: UpdateCodeRepositoryInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateContextInput {

    static func urlPathProvider(_ value: UpdateContextInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateDeviceFleetInput {

    static func urlPathProvider(_ value: UpdateDeviceFleetInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateDevicesInput {

    static func urlPathProvider(_ value: UpdateDevicesInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateDomainInput {

    static func urlPathProvider(_ value: UpdateDomainInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateEndpointInput {

    static func urlPathProvider(_ value: UpdateEndpointInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateEndpointWeightsAndCapacitiesInput {

    static func urlPathProvider(_ value: UpdateEndpointWeightsAndCapacitiesInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateExperimentInput {

    static func urlPathProvider(_ value: UpdateExperimentInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateFeatureGroupInput {

    static func urlPathProvider(_ value: UpdateFeatureGroupInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateFeatureMetadataInput {

    static func urlPathProvider(_ value: UpdateFeatureMetadataInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateHubInput {

    static func urlPathProvider(_ value: UpdateHubInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateImageInput {

    static func urlPathProvider(_ value: UpdateImageInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateImageVersionInput {

    static func urlPathProvider(_ value: UpdateImageVersionInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateInferenceComponentInput {

    static func urlPathProvider(_ value: UpdateInferenceComponentInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateInferenceComponentRuntimeConfigInput {

    static func urlPathProvider(_ value: UpdateInferenceComponentRuntimeConfigInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateInferenceExperimentInput {

    static func urlPathProvider(_ value: UpdateInferenceExperimentInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateMlflowTrackingServerInput {

    static func urlPathProvider(_ value: UpdateMlflowTrackingServerInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateModelCardInput {

    static func urlPathProvider(_ value: UpdateModelCardInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateModelPackageInput {

    static func urlPathProvider(_ value: UpdateModelPackageInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateMonitoringAlertInput {

    static func urlPathProvider(_ value: UpdateMonitoringAlertInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateMonitoringScheduleInput {

    static func urlPathProvider(_ value: UpdateMonitoringScheduleInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateNotebookInstanceInput {

    static func urlPathProvider(_ value: UpdateNotebookInstanceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateNotebookInstanceLifecycleConfigInput {

    static func urlPathProvider(_ value: UpdateNotebookInstanceLifecycleConfigInput) -> Swift.String? {
        return "/"
    }
}

extension UpdatePipelineInput {

    static func urlPathProvider(_ value: UpdatePipelineInput) -> Swift.String? {
        return "/"
    }
}

extension UpdatePipelineExecutionInput {

    static func urlPathProvider(_ value: UpdatePipelineExecutionInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateProjectInput {

    static func urlPathProvider(_ value: UpdateProjectInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateSpaceInput {

    static func urlPathProvider(_ value: UpdateSpaceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateTrainingJobInput {

    static func urlPathProvider(_ value: UpdateTrainingJobInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateTrialInput {

    static func urlPathProvider(_ value: UpdateTrialInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateTrialComponentInput {

    static func urlPathProvider(_ value: UpdateTrialComponentInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateUserProfileInput {

    static func urlPathProvider(_ value: UpdateUserProfileInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateWorkforceInput {

    static func urlPathProvider(_ value: UpdateWorkforceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateWorkteamInput {

    static func urlPathProvider(_ value: UpdateWorkteamInput) -> Swift.String? {
        return "/"
    }
}

extension AddAssociationInput {

    static func write(value: AddAssociationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssociationType"].write(value.associationType)
        try writer["DestinationArn"].write(value.destinationArn)
        try writer["SourceArn"].write(value.sourceArn)
    }
}

extension AddTagsInput {

    static func write(value: AddTagsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension AssociateTrialComponentInput {

    static func write(value: AssociateTrialComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TrialComponentName"].write(value.trialComponentName)
        try writer["TrialName"].write(value.trialName)
    }
}

extension BatchDescribeModelPackageInput {

    static func write(value: BatchDescribeModelPackageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelPackageArnList"].writeList(value.modelPackageArnList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateActionInput {

    static func write(value: CreateActionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActionName"].write(value.actionName)
        try writer["ActionType"].write(value.actionType)
        try writer["Description"].write(value.description)
        try writer["MetadataProperties"].write(value.metadataProperties, with: SageMakerClientTypes.MetadataProperties.write(value:to:))
        try writer["Properties"].writeMap(value.properties, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Source"].write(value.source, with: SageMakerClientTypes.ActionSource.write(value:to:))
        try writer["Status"].write(value.status)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateAlgorithmInput {

    static func write(value: CreateAlgorithmInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlgorithmDescription"].write(value.algorithmDescription)
        try writer["AlgorithmName"].write(value.algorithmName)
        try writer["CertifyForMarketplace"].write(value.certifyForMarketplace)
        try writer["InferenceSpecification"].write(value.inferenceSpecification, with: SageMakerClientTypes.InferenceSpecification.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TrainingSpecification"].write(value.trainingSpecification, with: SageMakerClientTypes.TrainingSpecification.write(value:to:))
        try writer["ValidationSpecification"].write(value.validationSpecification, with: SageMakerClientTypes.AlgorithmValidationSpecification.write(value:to:))
    }
}

extension CreateAppInput {

    static func write(value: CreateAppInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppName"].write(value.appName)
        try writer["AppType"].write(value.appType)
        try writer["DomainId"].write(value.domainId)
        try writer["ResourceSpec"].write(value.resourceSpec, with: SageMakerClientTypes.ResourceSpec.write(value:to:))
        try writer["SpaceName"].write(value.spaceName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserProfileName"].write(value.userProfileName)
    }
}

extension CreateAppImageConfigInput {

    static func write(value: CreateAppImageConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppImageConfigName"].write(value.appImageConfigName)
        try writer["CodeEditorAppImageConfig"].write(value.codeEditorAppImageConfig, with: SageMakerClientTypes.CodeEditorAppImageConfig.write(value:to:))
        try writer["JupyterLabAppImageConfig"].write(value.jupyterLabAppImageConfig, with: SageMakerClientTypes.JupyterLabAppImageConfig.write(value:to:))
        try writer["KernelGatewayImageConfig"].write(value.kernelGatewayImageConfig, with: SageMakerClientTypes.KernelGatewayImageConfig.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateArtifactInput {

    static func write(value: CreateArtifactInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ArtifactName"].write(value.artifactName)
        try writer["ArtifactType"].write(value.artifactType)
        try writer["MetadataProperties"].write(value.metadataProperties, with: SageMakerClientTypes.MetadataProperties.write(value:to:))
        try writer["Properties"].writeMap(value.properties, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Source"].write(value.source, with: SageMakerClientTypes.ArtifactSource.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateAutoMLJobInput {

    static func write(value: CreateAutoMLJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoMLJobConfig"].write(value.autoMLJobConfig, with: SageMakerClientTypes.AutoMLJobConfig.write(value:to:))
        try writer["AutoMLJobName"].write(value.autoMLJobName)
        try writer["AutoMLJobObjective"].write(value.autoMLJobObjective, with: SageMakerClientTypes.AutoMLJobObjective.write(value:to:))
        try writer["GenerateCandidateDefinitionsOnly"].write(value.generateCandidateDefinitionsOnly)
        try writer["InputDataConfig"].writeList(value.inputDataConfig, memberWritingClosure: SageMakerClientTypes.AutoMLChannel.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ModelDeployConfig"].write(value.modelDeployConfig, with: SageMakerClientTypes.ModelDeployConfig.write(value:to:))
        try writer["OutputDataConfig"].write(value.outputDataConfig, with: SageMakerClientTypes.AutoMLOutputDataConfig.write(value:to:))
        try writer["ProblemType"].write(value.problemType)
        try writer["RoleArn"].write(value.roleArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateAutoMLJobV2Input {

    static func write(value: CreateAutoMLJobV2Input?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoMLComputeConfig"].write(value.autoMLComputeConfig, with: SageMakerClientTypes.AutoMLComputeConfig.write(value:to:))
        try writer["AutoMLJobInputDataConfig"].writeList(value.autoMLJobInputDataConfig, memberWritingClosure: SageMakerClientTypes.AutoMLJobChannel.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AutoMLJobName"].write(value.autoMLJobName)
        try writer["AutoMLJobObjective"].write(value.autoMLJobObjective, with: SageMakerClientTypes.AutoMLJobObjective.write(value:to:))
        try writer["AutoMLProblemTypeConfig"].write(value.autoMLProblemTypeConfig, with: SageMakerClientTypes.AutoMLProblemTypeConfig.write(value:to:))
        try writer["DataSplitConfig"].write(value.dataSplitConfig, with: SageMakerClientTypes.AutoMLDataSplitConfig.write(value:to:))
        try writer["ModelDeployConfig"].write(value.modelDeployConfig, with: SageMakerClientTypes.ModelDeployConfig.write(value:to:))
        try writer["OutputDataConfig"].write(value.outputDataConfig, with: SageMakerClientTypes.AutoMLOutputDataConfig.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
        try writer["SecurityConfig"].write(value.securityConfig, with: SageMakerClientTypes.AutoMLSecurityConfig.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateClusterInput {

    static func write(value: CreateClusterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterName"].write(value.clusterName)
        try writer["InstanceGroups"].writeList(value.instanceGroups, memberWritingClosure: SageMakerClientTypes.ClusterInstanceGroupSpecification.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["NodeRecovery"].write(value.nodeRecovery)
        try writer["Orchestrator"].write(value.orchestrator, with: SageMakerClientTypes.ClusterOrchestrator.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VpcConfig"].write(value.vpcConfig, with: SageMakerClientTypes.VpcConfig.write(value:to:))
    }
}

extension CreateCodeRepositoryInput {

    static func write(value: CreateCodeRepositoryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CodeRepositoryName"].write(value.codeRepositoryName)
        try writer["GitConfig"].write(value.gitConfig, with: SageMakerClientTypes.GitConfig.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateCompilationJobInput {

    static func write(value: CreateCompilationJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CompilationJobName"].write(value.compilationJobName)
        try writer["InputConfig"].write(value.inputConfig, with: SageMakerClientTypes.InputConfig.write(value:to:))
        try writer["ModelPackageVersionArn"].write(value.modelPackageVersionArn)
        try writer["OutputConfig"].write(value.outputConfig, with: SageMakerClientTypes.OutputConfig.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
        try writer["StoppingCondition"].write(value.stoppingCondition, with: SageMakerClientTypes.StoppingCondition.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VpcConfig"].write(value.vpcConfig, with: SageMakerClientTypes.NeoVpcConfig.write(value:to:))
    }
}

extension CreateContextInput {

    static func write(value: CreateContextInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContextName"].write(value.contextName)
        try writer["ContextType"].write(value.contextType)
        try writer["Description"].write(value.description)
        try writer["Properties"].writeMap(value.properties, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Source"].write(value.source, with: SageMakerClientTypes.ContextSource.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateDataQualityJobDefinitionInput {

    static func write(value: CreateDataQualityJobDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataQualityAppSpecification"].write(value.dataQualityAppSpecification, with: SageMakerClientTypes.DataQualityAppSpecification.write(value:to:))
        try writer["DataQualityBaselineConfig"].write(value.dataQualityBaselineConfig, with: SageMakerClientTypes.DataQualityBaselineConfig.write(value:to:))
        try writer["DataQualityJobInput"].write(value.dataQualityJobInput, with: SageMakerClientTypes.DataQualityJobInput.write(value:to:))
        try writer["DataQualityJobOutputConfig"].write(value.dataQualityJobOutputConfig, with: SageMakerClientTypes.MonitoringOutputConfig.write(value:to:))
        try writer["JobDefinitionName"].write(value.jobDefinitionName)
        try writer["JobResources"].write(value.jobResources, with: SageMakerClientTypes.MonitoringResources.write(value:to:))
        try writer["NetworkConfig"].write(value.networkConfig, with: SageMakerClientTypes.MonitoringNetworkConfig.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
        try writer["StoppingCondition"].write(value.stoppingCondition, with: SageMakerClientTypes.MonitoringStoppingCondition.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateDeviceFleetInput {

    static func write(value: CreateDeviceFleetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["DeviceFleetName"].write(value.deviceFleetName)
        try writer["EnableIotRoleAlias"].write(value.enableIotRoleAlias)
        try writer["OutputConfig"].write(value.outputConfig, with: SageMakerClientTypes.EdgeOutputConfig.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateDomainInput {

    static func write(value: CreateDomainInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppNetworkAccessType"].write(value.appNetworkAccessType)
        try writer["AppSecurityGroupManagement"].write(value.appSecurityGroupManagement)
        try writer["AuthMode"].write(value.authMode)
        try writer["DefaultSpaceSettings"].write(value.defaultSpaceSettings, with: SageMakerClientTypes.DefaultSpaceSettings.write(value:to:))
        try writer["DefaultUserSettings"].write(value.defaultUserSettings, with: SageMakerClientTypes.UserSettings.write(value:to:))
        try writer["DomainName"].write(value.domainName)
        try writer["DomainSettings"].write(value.domainSettings, with: SageMakerClientTypes.DomainSettings.write(value:to:))
        try writer["HomeEfsFileSystemKmsKeyId"].write(value.homeEfsFileSystemKmsKeyId)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VpcId"].write(value.vpcId)
    }
}

extension CreateEdgeDeploymentPlanInput {

    static func write(value: CreateEdgeDeploymentPlanInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeviceFleetName"].write(value.deviceFleetName)
        try writer["EdgeDeploymentPlanName"].write(value.edgeDeploymentPlanName)
        try writer["ModelConfigs"].writeList(value.modelConfigs, memberWritingClosure: SageMakerClientTypes.EdgeDeploymentModelConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Stages"].writeList(value.stages, memberWritingClosure: SageMakerClientTypes.DeploymentStage.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateEdgeDeploymentStageInput {

    static func write(value: CreateEdgeDeploymentStageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EdgeDeploymentPlanName"].write(value.edgeDeploymentPlanName)
        try writer["Stages"].writeList(value.stages, memberWritingClosure: SageMakerClientTypes.DeploymentStage.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateEdgePackagingJobInput {

    static func write(value: CreateEdgePackagingJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CompilationJobName"].write(value.compilationJobName)
        try writer["EdgePackagingJobName"].write(value.edgePackagingJobName)
        try writer["ModelName"].write(value.modelName)
        try writer["ModelVersion"].write(value.modelVersion)
        try writer["OutputConfig"].write(value.outputConfig, with: SageMakerClientTypes.EdgeOutputConfig.write(value:to:))
        try writer["ResourceKey"].write(value.resourceKey)
        try writer["RoleArn"].write(value.roleArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateEndpointInput {

    static func write(value: CreateEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeploymentConfig"].write(value.deploymentConfig, with: SageMakerClientTypes.DeploymentConfig.write(value:to:))
        try writer["EndpointConfigName"].write(value.endpointConfigName)
        try writer["EndpointName"].write(value.endpointName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateEndpointConfigInput {

    static func write(value: CreateEndpointConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AsyncInferenceConfig"].write(value.asyncInferenceConfig, with: SageMakerClientTypes.AsyncInferenceConfig.write(value:to:))
        try writer["DataCaptureConfig"].write(value.dataCaptureConfig, with: SageMakerClientTypes.DataCaptureConfig.write(value:to:))
        try writer["EnableNetworkIsolation"].write(value.enableNetworkIsolation)
        try writer["EndpointConfigName"].write(value.endpointConfigName)
        try writer["ExecutionRoleArn"].write(value.executionRoleArn)
        try writer["ExplainerConfig"].write(value.explainerConfig, with: SageMakerClientTypes.ExplainerConfig.write(value:to:))
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["ProductionVariants"].writeList(value.productionVariants, memberWritingClosure: SageMakerClientTypes.ProductionVariant.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ShadowProductionVariants"].writeList(value.shadowProductionVariants, memberWritingClosure: SageMakerClientTypes.ProductionVariant.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VpcConfig"].write(value.vpcConfig, with: SageMakerClientTypes.VpcConfig.write(value:to:))
    }
}

extension CreateExperimentInput {

    static func write(value: CreateExperimentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["DisplayName"].write(value.displayName)
        try writer["ExperimentName"].write(value.experimentName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateFeatureGroupInput {

    static func write(value: CreateFeatureGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["EventTimeFeatureName"].write(value.eventTimeFeatureName)
        try writer["FeatureDefinitions"].writeList(value.featureDefinitions, memberWritingClosure: SageMakerClientTypes.FeatureDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FeatureGroupName"].write(value.featureGroupName)
        try writer["OfflineStoreConfig"].write(value.offlineStoreConfig, with: SageMakerClientTypes.OfflineStoreConfig.write(value:to:))
        try writer["OnlineStoreConfig"].write(value.onlineStoreConfig, with: SageMakerClientTypes.OnlineStoreConfig.write(value:to:))
        try writer["RecordIdentifierFeatureName"].write(value.recordIdentifierFeatureName)
        try writer["RoleArn"].write(value.roleArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ThroughputConfig"].write(value.throughputConfig, with: SageMakerClientTypes.ThroughputConfig.write(value:to:))
    }
}

extension CreateFlowDefinitionInput {

    static func write(value: CreateFlowDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FlowDefinitionName"].write(value.flowDefinitionName)
        try writer["HumanLoopActivationConfig"].write(value.humanLoopActivationConfig, with: SageMakerClientTypes.HumanLoopActivationConfig.write(value:to:))
        try writer["HumanLoopConfig"].write(value.humanLoopConfig, with: SageMakerClientTypes.HumanLoopConfig.write(value:to:))
        try writer["HumanLoopRequestSource"].write(value.humanLoopRequestSource, with: SageMakerClientTypes.HumanLoopRequestSource.write(value:to:))
        try writer["OutputConfig"].write(value.outputConfig, with: SageMakerClientTypes.FlowDefinitionOutputConfig.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateHubInput {

    static func write(value: CreateHubInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HubDescription"].write(value.hubDescription)
        try writer["HubDisplayName"].write(value.hubDisplayName)
        try writer["HubName"].write(value.hubName)
        try writer["HubSearchKeywords"].writeList(value.hubSearchKeywords, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["S3StorageConfig"].write(value.s3StorageConfig, with: SageMakerClientTypes.HubS3StorageConfig.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateHubContentReferenceInput {

    static func write(value: CreateHubContentReferenceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HubContentName"].write(value.hubContentName)
        try writer["HubName"].write(value.hubName)
        try writer["MinVersion"].write(value.minVersion)
        try writer["SageMakerPublicHubContentArn"].write(value.sageMakerPublicHubContentArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateHumanTaskUiInput {

    static func write(value: CreateHumanTaskUiInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HumanTaskUiName"].write(value.humanTaskUiName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UiTemplate"].write(value.uiTemplate, with: SageMakerClientTypes.UiTemplate.write(value:to:))
    }
}

extension CreateHyperParameterTuningJobInput {

    static func write(value: CreateHyperParameterTuningJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Autotune"].write(value.autotune, with: SageMakerClientTypes.Autotune.write(value:to:))
        try writer["HyperParameterTuningJobConfig"].write(value.hyperParameterTuningJobConfig, with: SageMakerClientTypes.HyperParameterTuningJobConfig.write(value:to:))
        try writer["HyperParameterTuningJobName"].write(value.hyperParameterTuningJobName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TrainingJobDefinition"].write(value.trainingJobDefinition, with: SageMakerClientTypes.HyperParameterTrainingJobDefinition.write(value:to:))
        try writer["TrainingJobDefinitions"].writeList(value.trainingJobDefinitions, memberWritingClosure: SageMakerClientTypes.HyperParameterTrainingJobDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["WarmStartConfig"].write(value.warmStartConfig, with: SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig.write(value:to:))
    }
}

extension CreateImageInput {

    static func write(value: CreateImageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["DisplayName"].write(value.displayName)
        try writer["ImageName"].write(value.imageName)
        try writer["RoleArn"].write(value.roleArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateImageVersionInput {

    static func write(value: CreateImageVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Aliases"].writeList(value.aliases, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["BaseImage"].write(value.baseImage)
        try writer["ClientToken"].write(value.clientToken)
        try writer["Horovod"].write(value.horovod)
        try writer["ImageName"].write(value.imageName)
        try writer["JobType"].write(value.jobType)
        try writer["MLFramework"].write(value.mlFramework)
        try writer["Processor"].write(value.processor)
        try writer["ProgrammingLang"].write(value.programmingLang)
        try writer["ReleaseNotes"].write(value.releaseNotes)
        try writer["VendorGuidance"].write(value.vendorGuidance)
    }
}

extension CreateInferenceComponentInput {

    static func write(value: CreateInferenceComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndpointName"].write(value.endpointName)
        try writer["InferenceComponentName"].write(value.inferenceComponentName)
        try writer["RuntimeConfig"].write(value.runtimeConfig, with: SageMakerClientTypes.InferenceComponentRuntimeConfig.write(value:to:))
        try writer["Specification"].write(value.specification, with: SageMakerClientTypes.InferenceComponentSpecification.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VariantName"].write(value.variantName)
    }
}

extension CreateInferenceExperimentInput {

    static func write(value: CreateInferenceExperimentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataStorageConfig"].write(value.dataStorageConfig, with: SageMakerClientTypes.InferenceExperimentDataStorageConfig.write(value:to:))
        try writer["Description"].write(value.description)
        try writer["EndpointName"].write(value.endpointName)
        try writer["KmsKey"].write(value.kmsKey)
        try writer["ModelVariants"].writeList(value.modelVariants, memberWritingClosure: SageMakerClientTypes.ModelVariantConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
        try writer["RoleArn"].write(value.roleArn)
        try writer["Schedule"].write(value.schedule, with: SageMakerClientTypes.InferenceExperimentSchedule.write(value:to:))
        try writer["ShadowModeConfig"].write(value.shadowModeConfig, with: SageMakerClientTypes.ShadowModeConfig.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Type"].write(value.type)
    }
}

extension CreateInferenceRecommendationsJobInput {

    static func write(value: CreateInferenceRecommendationsJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InputConfig"].write(value.inputConfig, with: SageMakerClientTypes.RecommendationJobInputConfig.write(value:to:))
        try writer["JobDescription"].write(value.jobDescription)
        try writer["JobName"].write(value.jobName)
        try writer["JobType"].write(value.jobType)
        try writer["OutputConfig"].write(value.outputConfig, with: SageMakerClientTypes.RecommendationJobOutputConfig.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
        try writer["StoppingConditions"].write(value.stoppingConditions, with: SageMakerClientTypes.RecommendationJobStoppingConditions.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateLabelingJobInput {

    static func write(value: CreateLabelingJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HumanTaskConfig"].write(value.humanTaskConfig, with: SageMakerClientTypes.HumanTaskConfig.write(value:to:))
        try writer["InputConfig"].write(value.inputConfig, with: SageMakerClientTypes.LabelingJobInputConfig.write(value:to:))
        try writer["LabelAttributeName"].write(value.labelAttributeName)
        try writer["LabelCategoryConfigS3Uri"].write(value.labelCategoryConfigS3Uri)
        try writer["LabelingJobAlgorithmsConfig"].write(value.labelingJobAlgorithmsConfig, with: SageMakerClientTypes.LabelingJobAlgorithmsConfig.write(value:to:))
        try writer["LabelingJobName"].write(value.labelingJobName)
        try writer["OutputConfig"].write(value.outputConfig, with: SageMakerClientTypes.LabelingJobOutputConfig.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
        try writer["StoppingConditions"].write(value.stoppingConditions, with: SageMakerClientTypes.LabelingJobStoppingConditions.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateMlflowTrackingServerInput {

    static func write(value: CreateMlflowTrackingServerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ArtifactStoreUri"].write(value.artifactStoreUri)
        try writer["AutomaticModelRegistration"].write(value.automaticModelRegistration)
        try writer["MlflowVersion"].write(value.mlflowVersion)
        try writer["RoleArn"].write(value.roleArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TrackingServerName"].write(value.trackingServerName)
        try writer["TrackingServerSize"].write(value.trackingServerSize)
        try writer["WeeklyMaintenanceWindowStart"].write(value.weeklyMaintenanceWindowStart)
    }
}

extension CreateModelInput {

    static func write(value: CreateModelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Containers"].writeList(value.containers, memberWritingClosure: SageMakerClientTypes.ContainerDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EnableNetworkIsolation"].write(value.enableNetworkIsolation)
        try writer["ExecutionRoleArn"].write(value.executionRoleArn)
        try writer["InferenceExecutionConfig"].write(value.inferenceExecutionConfig, with: SageMakerClientTypes.InferenceExecutionConfig.write(value:to:))
        try writer["ModelName"].write(value.modelName)
        try writer["PrimaryContainer"].write(value.primaryContainer, with: SageMakerClientTypes.ContainerDefinition.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VpcConfig"].write(value.vpcConfig, with: SageMakerClientTypes.VpcConfig.write(value:to:))
    }
}

extension CreateModelBiasJobDefinitionInput {

    static func write(value: CreateModelBiasJobDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobDefinitionName"].write(value.jobDefinitionName)
        try writer["JobResources"].write(value.jobResources, with: SageMakerClientTypes.MonitoringResources.write(value:to:))
        try writer["ModelBiasAppSpecification"].write(value.modelBiasAppSpecification, with: SageMakerClientTypes.ModelBiasAppSpecification.write(value:to:))
        try writer["ModelBiasBaselineConfig"].write(value.modelBiasBaselineConfig, with: SageMakerClientTypes.ModelBiasBaselineConfig.write(value:to:))
        try writer["ModelBiasJobInput"].write(value.modelBiasJobInput, with: SageMakerClientTypes.ModelBiasJobInput.write(value:to:))
        try writer["ModelBiasJobOutputConfig"].write(value.modelBiasJobOutputConfig, with: SageMakerClientTypes.MonitoringOutputConfig.write(value:to:))
        try writer["NetworkConfig"].write(value.networkConfig, with: SageMakerClientTypes.MonitoringNetworkConfig.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
        try writer["StoppingCondition"].write(value.stoppingCondition, with: SageMakerClientTypes.MonitoringStoppingCondition.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateModelCardInput {

    static func write(value: CreateModelCardInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Content"].write(value.content)
        try writer["ModelCardName"].write(value.modelCardName)
        try writer["ModelCardStatus"].write(value.modelCardStatus)
        try writer["SecurityConfig"].write(value.securityConfig, with: SageMakerClientTypes.ModelCardSecurityConfig.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateModelCardExportJobInput {

    static func write(value: CreateModelCardExportJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelCardExportJobName"].write(value.modelCardExportJobName)
        try writer["ModelCardName"].write(value.modelCardName)
        try writer["ModelCardVersion"].write(value.modelCardVersion)
        try writer["OutputConfig"].write(value.outputConfig, with: SageMakerClientTypes.ModelCardExportOutputConfig.write(value:to:))
    }
}

extension CreateModelExplainabilityJobDefinitionInput {

    static func write(value: CreateModelExplainabilityJobDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobDefinitionName"].write(value.jobDefinitionName)
        try writer["JobResources"].write(value.jobResources, with: SageMakerClientTypes.MonitoringResources.write(value:to:))
        try writer["ModelExplainabilityAppSpecification"].write(value.modelExplainabilityAppSpecification, with: SageMakerClientTypes.ModelExplainabilityAppSpecification.write(value:to:))
        try writer["ModelExplainabilityBaselineConfig"].write(value.modelExplainabilityBaselineConfig, with: SageMakerClientTypes.ModelExplainabilityBaselineConfig.write(value:to:))
        try writer["ModelExplainabilityJobInput"].write(value.modelExplainabilityJobInput, with: SageMakerClientTypes.ModelExplainabilityJobInput.write(value:to:))
        try writer["ModelExplainabilityJobOutputConfig"].write(value.modelExplainabilityJobOutputConfig, with: SageMakerClientTypes.MonitoringOutputConfig.write(value:to:))
        try writer["NetworkConfig"].write(value.networkConfig, with: SageMakerClientTypes.MonitoringNetworkConfig.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
        try writer["StoppingCondition"].write(value.stoppingCondition, with: SageMakerClientTypes.MonitoringStoppingCondition.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateModelPackageInput {

    static func write(value: CreateModelPackageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdditionalInferenceSpecifications"].writeList(value.additionalInferenceSpecifications, memberWritingClosure: SageMakerClientTypes.AdditionalInferenceSpecificationDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CertifyForMarketplace"].write(value.certifyForMarketplace)
        try writer["ClientToken"].write(value.clientToken)
        try writer["CustomerMetadataProperties"].writeMap(value.customerMetadataProperties, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Domain"].write(value.domain)
        try writer["DriftCheckBaselines"].write(value.driftCheckBaselines, with: SageMakerClientTypes.DriftCheckBaselines.write(value:to:))
        try writer["InferenceSpecification"].write(value.inferenceSpecification, with: SageMakerClientTypes.InferenceSpecification.write(value:to:))
        try writer["MetadataProperties"].write(value.metadataProperties, with: SageMakerClientTypes.MetadataProperties.write(value:to:))
        try writer["ModelApprovalStatus"].write(value.modelApprovalStatus)
        try writer["ModelCard"].write(value.modelCard, with: SageMakerClientTypes.ModelPackageModelCard.write(value:to:))
        try writer["ModelMetrics"].write(value.modelMetrics, with: SageMakerClientTypes.ModelMetrics.write(value:to:))
        try writer["ModelPackageDescription"].write(value.modelPackageDescription)
        try writer["ModelPackageGroupName"].write(value.modelPackageGroupName)
        try writer["ModelPackageName"].write(value.modelPackageName)
        try writer["SamplePayloadUrl"].write(value.samplePayloadUrl)
        try writer["SecurityConfig"].write(value.securityConfig, with: SageMakerClientTypes.ModelPackageSecurityConfig.write(value:to:))
        try writer["SkipModelValidation"].write(value.skipModelValidation)
        try writer["SourceAlgorithmSpecification"].write(value.sourceAlgorithmSpecification, with: SageMakerClientTypes.SourceAlgorithmSpecification.write(value:to:))
        try writer["SourceUri"].write(value.sourceUri)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Task"].write(value.task)
        try writer["ValidationSpecification"].write(value.validationSpecification, with: SageMakerClientTypes.ModelPackageValidationSpecification.write(value:to:))
    }
}

extension CreateModelPackageGroupInput {

    static func write(value: CreateModelPackageGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelPackageGroupDescription"].write(value.modelPackageGroupDescription)
        try writer["ModelPackageGroupName"].write(value.modelPackageGroupName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateModelQualityJobDefinitionInput {

    static func write(value: CreateModelQualityJobDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobDefinitionName"].write(value.jobDefinitionName)
        try writer["JobResources"].write(value.jobResources, with: SageMakerClientTypes.MonitoringResources.write(value:to:))
        try writer["ModelQualityAppSpecification"].write(value.modelQualityAppSpecification, with: SageMakerClientTypes.ModelQualityAppSpecification.write(value:to:))
        try writer["ModelQualityBaselineConfig"].write(value.modelQualityBaselineConfig, with: SageMakerClientTypes.ModelQualityBaselineConfig.write(value:to:))
        try writer["ModelQualityJobInput"].write(value.modelQualityJobInput, with: SageMakerClientTypes.ModelQualityJobInput.write(value:to:))
        try writer["ModelQualityJobOutputConfig"].write(value.modelQualityJobOutputConfig, with: SageMakerClientTypes.MonitoringOutputConfig.write(value:to:))
        try writer["NetworkConfig"].write(value.networkConfig, with: SageMakerClientTypes.MonitoringNetworkConfig.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
        try writer["StoppingCondition"].write(value.stoppingCondition, with: SageMakerClientTypes.MonitoringStoppingCondition.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateMonitoringScheduleInput {

    static func write(value: CreateMonitoringScheduleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MonitoringScheduleConfig"].write(value.monitoringScheduleConfig, with: SageMakerClientTypes.MonitoringScheduleConfig.write(value:to:))
        try writer["MonitoringScheduleName"].write(value.monitoringScheduleName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateNotebookInstanceInput {

    static func write(value: CreateNotebookInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AcceleratorTypes"].writeList(value.acceleratorTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerClientTypes.NotebookInstanceAcceleratorType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AdditionalCodeRepositories"].writeList(value.additionalCodeRepositories, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DefaultCodeRepository"].write(value.defaultCodeRepository)
        try writer["DirectInternetAccess"].write(value.directInternetAccess)
        try writer["InstanceMetadataServiceConfiguration"].write(value.instanceMetadataServiceConfiguration, with: SageMakerClientTypes.InstanceMetadataServiceConfiguration.write(value:to:))
        try writer["InstanceType"].write(value.instanceType)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["LifecycleConfigName"].write(value.lifecycleConfigName)
        try writer["NotebookInstanceName"].write(value.notebookInstanceName)
        try writer["PlatformIdentifier"].write(value.platformIdentifier)
        try writer["RoleArn"].write(value.roleArn)
        try writer["RootAccess"].write(value.rootAccess)
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SubnetId"].write(value.subnetId)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VolumeSizeInGB"].write(value.volumeSizeInGB)
    }
}

extension CreateNotebookInstanceLifecycleConfigInput {

    static func write(value: CreateNotebookInstanceLifecycleConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NotebookInstanceLifecycleConfigName"].write(value.notebookInstanceLifecycleConfigName)
        try writer["OnCreate"].writeList(value.onCreate, memberWritingClosure: SageMakerClientTypes.NotebookInstanceLifecycleHook.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OnStart"].writeList(value.onStart, memberWritingClosure: SageMakerClientTypes.NotebookInstanceLifecycleHook.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateOptimizationJobInput {

    static func write(value: CreateOptimizationJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeploymentInstanceType"].write(value.deploymentInstanceType)
        try writer["ModelSource"].write(value.modelSource, with: SageMakerClientTypes.OptimizationJobModelSource.write(value:to:))
        try writer["OptimizationConfigs"].writeList(value.optimizationConfigs, memberWritingClosure: SageMakerClientTypes.OptimizationConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OptimizationEnvironment"].writeMap(value.optimizationEnvironment, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["OptimizationJobName"].write(value.optimizationJobName)
        try writer["OutputConfig"].write(value.outputConfig, with: SageMakerClientTypes.OptimizationJobOutputConfig.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
        try writer["StoppingCondition"].write(value.stoppingCondition, with: SageMakerClientTypes.StoppingCondition.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VpcConfig"].write(value.vpcConfig, with: SageMakerClientTypes.OptimizationVpcConfig.write(value:to:))
    }
}

extension CreatePipelineInput {

    static func write(value: CreatePipelineInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["ParallelismConfiguration"].write(value.parallelismConfiguration, with: SageMakerClientTypes.ParallelismConfiguration.write(value:to:))
        try writer["PipelineDefinition"].write(value.pipelineDefinition)
        try writer["PipelineDefinitionS3Location"].write(value.pipelineDefinitionS3Location, with: SageMakerClientTypes.PipelineDefinitionS3Location.write(value:to:))
        try writer["PipelineDescription"].write(value.pipelineDescription)
        try writer["PipelineDisplayName"].write(value.pipelineDisplayName)
        try writer["PipelineName"].write(value.pipelineName)
        try writer["RoleArn"].write(value.roleArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreatePresignedDomainUrlInput {

    static func write(value: CreatePresignedDomainUrlInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainId"].write(value.domainId)
        try writer["ExpiresInSeconds"].write(value.expiresInSeconds)
        try writer["LandingUri"].write(value.landingUri)
        try writer["SessionExpirationDurationInSeconds"].write(value.sessionExpirationDurationInSeconds)
        try writer["SpaceName"].write(value.spaceName)
        try writer["UserProfileName"].write(value.userProfileName)
    }
}

extension CreatePresignedMlflowTrackingServerUrlInput {

    static func write(value: CreatePresignedMlflowTrackingServerUrlInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExpiresInSeconds"].write(value.expiresInSeconds)
        try writer["SessionExpirationDurationInSeconds"].write(value.sessionExpirationDurationInSeconds)
        try writer["TrackingServerName"].write(value.trackingServerName)
    }
}

extension CreatePresignedNotebookInstanceUrlInput {

    static func write(value: CreatePresignedNotebookInstanceUrlInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NotebookInstanceName"].write(value.notebookInstanceName)
        try writer["SessionExpirationDurationInSeconds"].write(value.sessionExpirationDurationInSeconds)
    }
}

extension CreateProcessingJobInput {

    static func write(value: CreateProcessingJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppSpecification"].write(value.appSpecification, with: SageMakerClientTypes.AppSpecification.write(value:to:))
        try writer["Environment"].writeMap(value.environment, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ExperimentConfig"].write(value.experimentConfig, with: SageMakerClientTypes.ExperimentConfig.write(value:to:))
        try writer["NetworkConfig"].write(value.networkConfig, with: SageMakerClientTypes.NetworkConfig.write(value:to:))
        try writer["ProcessingInputs"].writeList(value.processingInputs, memberWritingClosure: SageMakerClientTypes.ProcessingInput.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ProcessingJobName"].write(value.processingJobName)
        try writer["ProcessingOutputConfig"].write(value.processingOutputConfig, with: SageMakerClientTypes.ProcessingOutputConfig.write(value:to:))
        try writer["ProcessingResources"].write(value.processingResources, with: SageMakerClientTypes.ProcessingResources.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
        try writer["StoppingCondition"].write(value.stoppingCondition, with: SageMakerClientTypes.ProcessingStoppingCondition.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateProjectInput {

    static func write(value: CreateProjectInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProjectDescription"].write(value.projectDescription)
        try writer["ProjectName"].write(value.projectName)
        try writer["ServiceCatalogProvisioningDetails"].write(value.serviceCatalogProvisioningDetails, with: SageMakerClientTypes.ServiceCatalogProvisioningDetails.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateSpaceInput {

    static func write(value: CreateSpaceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainId"].write(value.domainId)
        try writer["OwnershipSettings"].write(value.ownershipSettings, with: SageMakerClientTypes.OwnershipSettings.write(value:to:))
        try writer["SpaceDisplayName"].write(value.spaceDisplayName)
        try writer["SpaceName"].write(value.spaceName)
        try writer["SpaceSettings"].write(value.spaceSettings, with: SageMakerClientTypes.SpaceSettings.write(value:to:))
        try writer["SpaceSharingSettings"].write(value.spaceSharingSettings, with: SageMakerClientTypes.SpaceSharingSettings.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateStudioLifecycleConfigInput {

    static func write(value: CreateStudioLifecycleConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["StudioLifecycleConfigAppType"].write(value.studioLifecycleConfigAppType)
        try writer["StudioLifecycleConfigContent"].write(value.studioLifecycleConfigContent)
        try writer["StudioLifecycleConfigName"].write(value.studioLifecycleConfigName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateTrainingJobInput {

    static func write(value: CreateTrainingJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlgorithmSpecification"].write(value.algorithmSpecification, with: SageMakerClientTypes.AlgorithmSpecification.write(value:to:))
        try writer["CheckpointConfig"].write(value.checkpointConfig, with: SageMakerClientTypes.CheckpointConfig.write(value:to:))
        try writer["DebugHookConfig"].write(value.debugHookConfig, with: SageMakerClientTypes.DebugHookConfig.write(value:to:))
        try writer["DebugRuleConfigurations"].writeList(value.debugRuleConfigurations, memberWritingClosure: SageMakerClientTypes.DebugRuleConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EnableInterContainerTrafficEncryption"].write(value.enableInterContainerTrafficEncryption)
        try writer["EnableManagedSpotTraining"].write(value.enableManagedSpotTraining)
        try writer["EnableNetworkIsolation"].write(value.enableNetworkIsolation)
        try writer["Environment"].writeMap(value.environment, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ExperimentConfig"].write(value.experimentConfig, with: SageMakerClientTypes.ExperimentConfig.write(value:to:))
        try writer["HyperParameters"].writeMap(value.hyperParameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["InfraCheckConfig"].write(value.infraCheckConfig, with: SageMakerClientTypes.InfraCheckConfig.write(value:to:))
        try writer["InputDataConfig"].writeList(value.inputDataConfig, memberWritingClosure: SageMakerClientTypes.Channel.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OutputDataConfig"].write(value.outputDataConfig, with: SageMakerClientTypes.OutputDataConfig.write(value:to:))
        try writer["ProfilerConfig"].write(value.profilerConfig, with: SageMakerClientTypes.ProfilerConfig.write(value:to:))
        try writer["ProfilerRuleConfigurations"].writeList(value.profilerRuleConfigurations, memberWritingClosure: SageMakerClientTypes.ProfilerRuleConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["RemoteDebugConfig"].write(value.remoteDebugConfig, with: SageMakerClientTypes.RemoteDebugConfig.write(value:to:))
        try writer["ResourceConfig"].write(value.resourceConfig, with: SageMakerClientTypes.ResourceConfig.write(value:to:))
        try writer["RetryStrategy"].write(value.retryStrategy, with: SageMakerClientTypes.RetryStrategy.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
        try writer["SessionChainingConfig"].write(value.sessionChainingConfig, with: SageMakerClientTypes.SessionChainingConfig.write(value:to:))
        try writer["StoppingCondition"].write(value.stoppingCondition, with: SageMakerClientTypes.StoppingCondition.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TensorBoardOutputConfig"].write(value.tensorBoardOutputConfig, with: SageMakerClientTypes.TensorBoardOutputConfig.write(value:to:))
        try writer["TrainingJobName"].write(value.trainingJobName)
        try writer["VpcConfig"].write(value.vpcConfig, with: SageMakerClientTypes.VpcConfig.write(value:to:))
    }
}

extension CreateTransformJobInput {

    static func write(value: CreateTransformJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BatchStrategy"].write(value.batchStrategy)
        try writer["DataCaptureConfig"].write(value.dataCaptureConfig, with: SageMakerClientTypes.BatchDataCaptureConfig.write(value:to:))
        try writer["DataProcessing"].write(value.dataProcessing, with: SageMakerClientTypes.DataProcessing.write(value:to:))
        try writer["Environment"].writeMap(value.environment, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ExperimentConfig"].write(value.experimentConfig, with: SageMakerClientTypes.ExperimentConfig.write(value:to:))
        try writer["MaxConcurrentTransforms"].write(value.maxConcurrentTransforms)
        try writer["MaxPayloadInMB"].write(value.maxPayloadInMB)
        try writer["ModelClientConfig"].write(value.modelClientConfig, with: SageMakerClientTypes.ModelClientConfig.write(value:to:))
        try writer["ModelName"].write(value.modelName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TransformInput"].write(value.transformInput, with: SageMakerClientTypes.TransformInput.write(value:to:))
        try writer["TransformJobName"].write(value.transformJobName)
        try writer["TransformOutput"].write(value.transformOutput, with: SageMakerClientTypes.TransformOutput.write(value:to:))
        try writer["TransformResources"].write(value.transformResources, with: SageMakerClientTypes.TransformResources.write(value:to:))
    }
}

extension CreateTrialInput {

    static func write(value: CreateTrialInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DisplayName"].write(value.displayName)
        try writer["ExperimentName"].write(value.experimentName)
        try writer["MetadataProperties"].write(value.metadataProperties, with: SageMakerClientTypes.MetadataProperties.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TrialName"].write(value.trialName)
    }
}

extension CreateTrialComponentInput {

    static func write(value: CreateTrialComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DisplayName"].write(value.displayName)
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["InputArtifacts"].writeMap(value.inputArtifacts, valueWritingClosure: SageMakerClientTypes.TrialComponentArtifact.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["MetadataProperties"].write(value.metadataProperties, with: SageMakerClientTypes.MetadataProperties.write(value:to:))
        try writer["OutputArtifacts"].writeMap(value.outputArtifacts, valueWritingClosure: SageMakerClientTypes.TrialComponentArtifact.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Parameters"].writeMap(value.parameters, valueWritingClosure: SageMakerClientTypes.TrialComponentParameterValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["Status"].write(value.status, with: SageMakerClientTypes.TrialComponentStatus.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TrialComponentName"].write(value.trialComponentName)
    }
}

extension CreateUserProfileInput {

    static func write(value: CreateUserProfileInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainId"].write(value.domainId)
        try writer["SingleSignOnUserIdentifier"].write(value.singleSignOnUserIdentifier)
        try writer["SingleSignOnUserValue"].write(value.singleSignOnUserValue)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["UserProfileName"].write(value.userProfileName)
        try writer["UserSettings"].write(value.userSettings, with: SageMakerClientTypes.UserSettings.write(value:to:))
    }
}

extension CreateWorkforceInput {

    static func write(value: CreateWorkforceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CognitoConfig"].write(value.cognitoConfig, with: SageMakerClientTypes.CognitoConfig.write(value:to:))
        try writer["OidcConfig"].write(value.oidcConfig, with: SageMakerClientTypes.OidcConfig.write(value:to:))
        try writer["SourceIpConfig"].write(value.sourceIpConfig, with: SageMakerClientTypes.SourceIpConfig.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["WorkforceName"].write(value.workforceName)
        try writer["WorkforceVpcConfig"].write(value.workforceVpcConfig, with: SageMakerClientTypes.WorkforceVpcConfigRequest.write(value:to:))
    }
}

extension CreateWorkteamInput {

    static func write(value: CreateWorkteamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["MemberDefinitions"].writeList(value.memberDefinitions, memberWritingClosure: SageMakerClientTypes.MemberDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["NotificationConfiguration"].write(value.notificationConfiguration, with: SageMakerClientTypes.NotificationConfiguration.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["WorkerAccessConfiguration"].write(value.workerAccessConfiguration, with: SageMakerClientTypes.WorkerAccessConfiguration.write(value:to:))
        try writer["WorkforceName"].write(value.workforceName)
        try writer["WorkteamName"].write(value.workteamName)
    }
}

extension DeleteActionInput {

    static func write(value: DeleteActionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActionName"].write(value.actionName)
    }
}

extension DeleteAlgorithmInput {

    static func write(value: DeleteAlgorithmInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlgorithmName"].write(value.algorithmName)
    }
}

extension DeleteAppInput {

    static func write(value: DeleteAppInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppName"].write(value.appName)
        try writer["AppType"].write(value.appType)
        try writer["DomainId"].write(value.domainId)
        try writer["SpaceName"].write(value.spaceName)
        try writer["UserProfileName"].write(value.userProfileName)
    }
}

extension DeleteAppImageConfigInput {

    static func write(value: DeleteAppImageConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppImageConfigName"].write(value.appImageConfigName)
    }
}

extension DeleteArtifactInput {

    static func write(value: DeleteArtifactInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ArtifactArn"].write(value.artifactArn)
        try writer["Source"].write(value.source, with: SageMakerClientTypes.ArtifactSource.write(value:to:))
    }
}

extension DeleteAssociationInput {

    static func write(value: DeleteAssociationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DestinationArn"].write(value.destinationArn)
        try writer["SourceArn"].write(value.sourceArn)
    }
}

extension DeleteClusterInput {

    static func write(value: DeleteClusterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterName"].write(value.clusterName)
    }
}

extension DeleteCodeRepositoryInput {

    static func write(value: DeleteCodeRepositoryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CodeRepositoryName"].write(value.codeRepositoryName)
    }
}

extension DeleteCompilationJobInput {

    static func write(value: DeleteCompilationJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CompilationJobName"].write(value.compilationJobName)
    }
}

extension DeleteContextInput {

    static func write(value: DeleteContextInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContextName"].write(value.contextName)
    }
}

extension DeleteDataQualityJobDefinitionInput {

    static func write(value: DeleteDataQualityJobDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobDefinitionName"].write(value.jobDefinitionName)
    }
}

extension DeleteDeviceFleetInput {

    static func write(value: DeleteDeviceFleetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeviceFleetName"].write(value.deviceFleetName)
    }
}

extension DeleteDomainInput {

    static func write(value: DeleteDomainInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainId"].write(value.domainId)
        try writer["RetentionPolicy"].write(value.retentionPolicy, with: SageMakerClientTypes.RetentionPolicy.write(value:to:))
    }
}

extension DeleteEdgeDeploymentPlanInput {

    static func write(value: DeleteEdgeDeploymentPlanInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EdgeDeploymentPlanName"].write(value.edgeDeploymentPlanName)
    }
}

extension DeleteEdgeDeploymentStageInput {

    static func write(value: DeleteEdgeDeploymentStageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EdgeDeploymentPlanName"].write(value.edgeDeploymentPlanName)
        try writer["StageName"].write(value.stageName)
    }
}

extension DeleteEndpointInput {

    static func write(value: DeleteEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndpointName"].write(value.endpointName)
    }
}

extension DeleteEndpointConfigInput {

    static func write(value: DeleteEndpointConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndpointConfigName"].write(value.endpointConfigName)
    }
}

extension DeleteExperimentInput {

    static func write(value: DeleteExperimentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExperimentName"].write(value.experimentName)
    }
}

extension DeleteFeatureGroupInput {

    static func write(value: DeleteFeatureGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FeatureGroupName"].write(value.featureGroupName)
    }
}

extension DeleteFlowDefinitionInput {

    static func write(value: DeleteFlowDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FlowDefinitionName"].write(value.flowDefinitionName)
    }
}

extension DeleteHubInput {

    static func write(value: DeleteHubInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HubName"].write(value.hubName)
    }
}

extension DeleteHubContentInput {

    static func write(value: DeleteHubContentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HubContentName"].write(value.hubContentName)
        try writer["HubContentType"].write(value.hubContentType)
        try writer["HubContentVersion"].write(value.hubContentVersion)
        try writer["HubName"].write(value.hubName)
    }
}

extension DeleteHubContentReferenceInput {

    static func write(value: DeleteHubContentReferenceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HubContentName"].write(value.hubContentName)
        try writer["HubContentType"].write(value.hubContentType)
        try writer["HubName"].write(value.hubName)
    }
}

extension DeleteHumanTaskUiInput {

    static func write(value: DeleteHumanTaskUiInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HumanTaskUiName"].write(value.humanTaskUiName)
    }
}

extension DeleteHyperParameterTuningJobInput {

    static func write(value: DeleteHyperParameterTuningJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HyperParameterTuningJobName"].write(value.hyperParameterTuningJobName)
    }
}

extension DeleteImageInput {

    static func write(value: DeleteImageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ImageName"].write(value.imageName)
    }
}

extension DeleteImageVersionInput {

    static func write(value: DeleteImageVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Alias"].write(value.alias)
        try writer["ImageName"].write(value.imageName)
        try writer["Version"].write(value.version)
    }
}

extension DeleteInferenceComponentInput {

    static func write(value: DeleteInferenceComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InferenceComponentName"].write(value.inferenceComponentName)
    }
}

extension DeleteInferenceExperimentInput {

    static func write(value: DeleteInferenceExperimentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DeleteMlflowTrackingServerInput {

    static func write(value: DeleteMlflowTrackingServerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TrackingServerName"].write(value.trackingServerName)
    }
}

extension DeleteModelInput {

    static func write(value: DeleteModelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelName"].write(value.modelName)
    }
}

extension DeleteModelBiasJobDefinitionInput {

    static func write(value: DeleteModelBiasJobDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobDefinitionName"].write(value.jobDefinitionName)
    }
}

extension DeleteModelCardInput {

    static func write(value: DeleteModelCardInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelCardName"].write(value.modelCardName)
    }
}

extension DeleteModelExplainabilityJobDefinitionInput {

    static func write(value: DeleteModelExplainabilityJobDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobDefinitionName"].write(value.jobDefinitionName)
    }
}

extension DeleteModelPackageInput {

    static func write(value: DeleteModelPackageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelPackageName"].write(value.modelPackageName)
    }
}

extension DeleteModelPackageGroupInput {

    static func write(value: DeleteModelPackageGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelPackageGroupName"].write(value.modelPackageGroupName)
    }
}

extension DeleteModelPackageGroupPolicyInput {

    static func write(value: DeleteModelPackageGroupPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelPackageGroupName"].write(value.modelPackageGroupName)
    }
}

extension DeleteModelQualityJobDefinitionInput {

    static func write(value: DeleteModelQualityJobDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobDefinitionName"].write(value.jobDefinitionName)
    }
}

extension DeleteMonitoringScheduleInput {

    static func write(value: DeleteMonitoringScheduleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MonitoringScheduleName"].write(value.monitoringScheduleName)
    }
}

extension DeleteNotebookInstanceInput {

    static func write(value: DeleteNotebookInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NotebookInstanceName"].write(value.notebookInstanceName)
    }
}

extension DeleteNotebookInstanceLifecycleConfigInput {

    static func write(value: DeleteNotebookInstanceLifecycleConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NotebookInstanceLifecycleConfigName"].write(value.notebookInstanceLifecycleConfigName)
    }
}

extension DeleteOptimizationJobInput {

    static func write(value: DeleteOptimizationJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OptimizationJobName"].write(value.optimizationJobName)
    }
}

extension DeletePipelineInput {

    static func write(value: DeletePipelineInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["PipelineName"].write(value.pipelineName)
    }
}

extension DeleteProjectInput {

    static func write(value: DeleteProjectInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProjectName"].write(value.projectName)
    }
}

extension DeleteSpaceInput {

    static func write(value: DeleteSpaceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainId"].write(value.domainId)
        try writer["SpaceName"].write(value.spaceName)
    }
}

extension DeleteStudioLifecycleConfigInput {

    static func write(value: DeleteStudioLifecycleConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["StudioLifecycleConfigName"].write(value.studioLifecycleConfigName)
    }
}

extension DeleteTagsInput {

    static func write(value: DeleteTagsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DeleteTrialInput {

    static func write(value: DeleteTrialInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TrialName"].write(value.trialName)
    }
}

extension DeleteTrialComponentInput {

    static func write(value: DeleteTrialComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TrialComponentName"].write(value.trialComponentName)
    }
}

extension DeleteUserProfileInput {

    static func write(value: DeleteUserProfileInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainId"].write(value.domainId)
        try writer["UserProfileName"].write(value.userProfileName)
    }
}

extension DeleteWorkforceInput {

    static func write(value: DeleteWorkforceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["WorkforceName"].write(value.workforceName)
    }
}

extension DeleteWorkteamInput {

    static func write(value: DeleteWorkteamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["WorkteamName"].write(value.workteamName)
    }
}

extension DeregisterDevicesInput {

    static func write(value: DeregisterDevicesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeviceFleetName"].write(value.deviceFleetName)
        try writer["DeviceNames"].writeList(value.deviceNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension DescribeActionInput {

    static func write(value: DescribeActionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActionName"].write(value.actionName)
    }
}

extension DescribeAlgorithmInput {

    static func write(value: DescribeAlgorithmInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlgorithmName"].write(value.algorithmName)
    }
}

extension DescribeAppInput {

    static func write(value: DescribeAppInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppName"].write(value.appName)
        try writer["AppType"].write(value.appType)
        try writer["DomainId"].write(value.domainId)
        try writer["SpaceName"].write(value.spaceName)
        try writer["UserProfileName"].write(value.userProfileName)
    }
}

extension DescribeAppImageConfigInput {

    static func write(value: DescribeAppImageConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppImageConfigName"].write(value.appImageConfigName)
    }
}

extension DescribeArtifactInput {

    static func write(value: DescribeArtifactInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ArtifactArn"].write(value.artifactArn)
    }
}

extension DescribeAutoMLJobInput {

    static func write(value: DescribeAutoMLJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoMLJobName"].write(value.autoMLJobName)
    }
}

extension DescribeAutoMLJobV2Input {

    static func write(value: DescribeAutoMLJobV2Input?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoMLJobName"].write(value.autoMLJobName)
    }
}

extension DescribeClusterInput {

    static func write(value: DescribeClusterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterName"].write(value.clusterName)
    }
}

extension DescribeClusterNodeInput {

    static func write(value: DescribeClusterNodeInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterName"].write(value.clusterName)
        try writer["NodeId"].write(value.nodeId)
    }
}

extension DescribeCodeRepositoryInput {

    static func write(value: DescribeCodeRepositoryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CodeRepositoryName"].write(value.codeRepositoryName)
    }
}

extension DescribeCompilationJobInput {

    static func write(value: DescribeCompilationJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CompilationJobName"].write(value.compilationJobName)
    }
}

extension DescribeContextInput {

    static func write(value: DescribeContextInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContextName"].write(value.contextName)
    }
}

extension DescribeDataQualityJobDefinitionInput {

    static func write(value: DescribeDataQualityJobDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobDefinitionName"].write(value.jobDefinitionName)
    }
}

extension DescribeDeviceInput {

    static func write(value: DescribeDeviceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeviceFleetName"].write(value.deviceFleetName)
        try writer["DeviceName"].write(value.deviceName)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeDeviceFleetInput {

    static func write(value: DescribeDeviceFleetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeviceFleetName"].write(value.deviceFleetName)
    }
}

extension DescribeDomainInput {

    static func write(value: DescribeDomainInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainId"].write(value.domainId)
    }
}

extension DescribeEdgeDeploymentPlanInput {

    static func write(value: DescribeEdgeDeploymentPlanInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EdgeDeploymentPlanName"].write(value.edgeDeploymentPlanName)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeEdgePackagingJobInput {

    static func write(value: DescribeEdgePackagingJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EdgePackagingJobName"].write(value.edgePackagingJobName)
    }
}

extension DescribeEndpointInput {

    static func write(value: DescribeEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndpointName"].write(value.endpointName)
    }
}

extension DescribeEndpointConfigInput {

    static func write(value: DescribeEndpointConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndpointConfigName"].write(value.endpointConfigName)
    }
}

extension DescribeExperimentInput {

    static func write(value: DescribeExperimentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExperimentName"].write(value.experimentName)
    }
}

extension DescribeFeatureGroupInput {

    static func write(value: DescribeFeatureGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FeatureGroupName"].write(value.featureGroupName)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension DescribeFeatureMetadataInput {

    static func write(value: DescribeFeatureMetadataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FeatureGroupName"].write(value.featureGroupName)
        try writer["FeatureName"].write(value.featureName)
    }
}

extension DescribeFlowDefinitionInput {

    static func write(value: DescribeFlowDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FlowDefinitionName"].write(value.flowDefinitionName)
    }
}

extension DescribeHubInput {

    static func write(value: DescribeHubInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HubName"].write(value.hubName)
    }
}

extension DescribeHubContentInput {

    static func write(value: DescribeHubContentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HubContentName"].write(value.hubContentName)
        try writer["HubContentType"].write(value.hubContentType)
        try writer["HubContentVersion"].write(value.hubContentVersion)
        try writer["HubName"].write(value.hubName)
    }
}

extension DescribeHumanTaskUiInput {

    static func write(value: DescribeHumanTaskUiInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HumanTaskUiName"].write(value.humanTaskUiName)
    }
}

extension DescribeHyperParameterTuningJobInput {

    static func write(value: DescribeHyperParameterTuningJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HyperParameterTuningJobName"].write(value.hyperParameterTuningJobName)
    }
}

extension DescribeImageInput {

    static func write(value: DescribeImageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ImageName"].write(value.imageName)
    }
}

extension DescribeImageVersionInput {

    static func write(value: DescribeImageVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Alias"].write(value.alias)
        try writer["ImageName"].write(value.imageName)
        try writer["Version"].write(value.version)
    }
}

extension DescribeInferenceComponentInput {

    static func write(value: DescribeInferenceComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InferenceComponentName"].write(value.inferenceComponentName)
    }
}

extension DescribeInferenceExperimentInput {

    static func write(value: DescribeInferenceExperimentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension DescribeInferenceRecommendationsJobInput {

    static func write(value: DescribeInferenceRecommendationsJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobName"].write(value.jobName)
    }
}

extension DescribeLabelingJobInput {

    static func write(value: DescribeLabelingJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LabelingJobName"].write(value.labelingJobName)
    }
}

extension DescribeLineageGroupInput {

    static func write(value: DescribeLineageGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LineageGroupName"].write(value.lineageGroupName)
    }
}

extension DescribeMlflowTrackingServerInput {

    static func write(value: DescribeMlflowTrackingServerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TrackingServerName"].write(value.trackingServerName)
    }
}

extension DescribeModelInput {

    static func write(value: DescribeModelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelName"].write(value.modelName)
    }
}

extension DescribeModelBiasJobDefinitionInput {

    static func write(value: DescribeModelBiasJobDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobDefinitionName"].write(value.jobDefinitionName)
    }
}

extension DescribeModelCardInput {

    static func write(value: DescribeModelCardInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelCardName"].write(value.modelCardName)
        try writer["ModelCardVersion"].write(value.modelCardVersion)
    }
}

extension DescribeModelCardExportJobInput {

    static func write(value: DescribeModelCardExportJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelCardExportJobArn"].write(value.modelCardExportJobArn)
    }
}

extension DescribeModelExplainabilityJobDefinitionInput {

    static func write(value: DescribeModelExplainabilityJobDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobDefinitionName"].write(value.jobDefinitionName)
    }
}

extension DescribeModelPackageInput {

    static func write(value: DescribeModelPackageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelPackageName"].write(value.modelPackageName)
    }
}

extension DescribeModelPackageGroupInput {

    static func write(value: DescribeModelPackageGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelPackageGroupName"].write(value.modelPackageGroupName)
    }
}

extension DescribeModelQualityJobDefinitionInput {

    static func write(value: DescribeModelQualityJobDefinitionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobDefinitionName"].write(value.jobDefinitionName)
    }
}

extension DescribeMonitoringScheduleInput {

    static func write(value: DescribeMonitoringScheduleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MonitoringScheduleName"].write(value.monitoringScheduleName)
    }
}

extension DescribeNotebookInstanceInput {

    static func write(value: DescribeNotebookInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NotebookInstanceName"].write(value.notebookInstanceName)
    }
}

extension DescribeNotebookInstanceLifecycleConfigInput {

    static func write(value: DescribeNotebookInstanceLifecycleConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NotebookInstanceLifecycleConfigName"].write(value.notebookInstanceLifecycleConfigName)
    }
}

extension DescribeOptimizationJobInput {

    static func write(value: DescribeOptimizationJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OptimizationJobName"].write(value.optimizationJobName)
    }
}

extension DescribePipelineInput {

    static func write(value: DescribePipelineInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PipelineName"].write(value.pipelineName)
    }
}

extension DescribePipelineDefinitionForExecutionInput {

    static func write(value: DescribePipelineDefinitionForExecutionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PipelineExecutionArn"].write(value.pipelineExecutionArn)
    }
}

extension DescribePipelineExecutionInput {

    static func write(value: DescribePipelineExecutionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PipelineExecutionArn"].write(value.pipelineExecutionArn)
    }
}

extension DescribeProcessingJobInput {

    static func write(value: DescribeProcessingJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProcessingJobName"].write(value.processingJobName)
    }
}

extension DescribeProjectInput {

    static func write(value: DescribeProjectInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProjectName"].write(value.projectName)
    }
}

extension DescribeSpaceInput {

    static func write(value: DescribeSpaceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainId"].write(value.domainId)
        try writer["SpaceName"].write(value.spaceName)
    }
}

extension DescribeStudioLifecycleConfigInput {

    static func write(value: DescribeStudioLifecycleConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["StudioLifecycleConfigName"].write(value.studioLifecycleConfigName)
    }
}

extension DescribeSubscribedWorkteamInput {

    static func write(value: DescribeSubscribedWorkteamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["WorkteamArn"].write(value.workteamArn)
    }
}

extension DescribeTrainingJobInput {

    static func write(value: DescribeTrainingJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TrainingJobName"].write(value.trainingJobName)
    }
}

extension DescribeTransformJobInput {

    static func write(value: DescribeTransformJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TransformJobName"].write(value.transformJobName)
    }
}

extension DescribeTrialInput {

    static func write(value: DescribeTrialInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TrialName"].write(value.trialName)
    }
}

extension DescribeTrialComponentInput {

    static func write(value: DescribeTrialComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TrialComponentName"].write(value.trialComponentName)
    }
}

extension DescribeUserProfileInput {

    static func write(value: DescribeUserProfileInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainId"].write(value.domainId)
        try writer["UserProfileName"].write(value.userProfileName)
    }
}

extension DescribeWorkforceInput {

    static func write(value: DescribeWorkforceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["WorkforceName"].write(value.workforceName)
    }
}

extension DescribeWorkteamInput {

    static func write(value: DescribeWorkteamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["WorkteamName"].write(value.workteamName)
    }
}

extension DisableSagemakerServicecatalogPortfolioInput {

    static func write(value: DisableSagemakerServicecatalogPortfolioInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension DisassociateTrialComponentInput {

    static func write(value: DisassociateTrialComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TrialComponentName"].write(value.trialComponentName)
        try writer["TrialName"].write(value.trialName)
    }
}

extension EnableSagemakerServicecatalogPortfolioInput {

    static func write(value: EnableSagemakerServicecatalogPortfolioInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension GetDeviceFleetReportInput {

    static func write(value: GetDeviceFleetReportInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeviceFleetName"].write(value.deviceFleetName)
    }
}

extension GetLineageGroupPolicyInput {

    static func write(value: GetLineageGroupPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LineageGroupName"].write(value.lineageGroupName)
    }
}

extension GetModelPackageGroupPolicyInput {

    static func write(value: GetModelPackageGroupPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelPackageGroupName"].write(value.modelPackageGroupName)
    }
}

extension GetSagemakerServicecatalogPortfolioStatusInput {

    static func write(value: GetSagemakerServicecatalogPortfolioStatusInput?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }
}

extension GetScalingConfigurationRecommendationInput {

    static func write(value: GetScalingConfigurationRecommendationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndpointName"].write(value.endpointName)
        try writer["InferenceRecommendationsJobName"].write(value.inferenceRecommendationsJobName)
        try writer["RecommendationId"].write(value.recommendationId)
        try writer["ScalingPolicyObjective"].write(value.scalingPolicyObjective, with: SageMakerClientTypes.ScalingPolicyObjective.write(value:to:))
        try writer["TargetCpuUtilizationPerCore"].write(value.targetCpuUtilizationPerCore)
    }
}

extension GetSearchSuggestionsInput {

    static func write(value: GetSearchSuggestionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Resource"].write(value.resource)
        try writer["SuggestionQuery"].write(value.suggestionQuery, with: SageMakerClientTypes.SuggestionQuery.write(value:to:))
    }
}

extension ImportHubContentInput {

    static func write(value: ImportHubContentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DocumentSchemaVersion"].write(value.documentSchemaVersion)
        try writer["HubContentDescription"].write(value.hubContentDescription)
        try writer["HubContentDisplayName"].write(value.hubContentDisplayName)
        try writer["HubContentDocument"].write(value.hubContentDocument)
        try writer["HubContentMarkdown"].write(value.hubContentMarkdown)
        try writer["HubContentName"].write(value.hubContentName)
        try writer["HubContentSearchKeywords"].writeList(value.hubContentSearchKeywords, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["HubContentType"].write(value.hubContentType)
        try writer["HubContentVersion"].write(value.hubContentVersion)
        try writer["HubName"].write(value.hubName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ListActionsInput {

    static func write(value: ListActionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActionType"].write(value.actionType)
        try writer["CreatedAfter"].writeTimestamp(value.createdAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreatedBefore"].writeTimestamp(value.createdBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["SourceUri"].write(value.sourceUri)
    }
}

extension ListAlgorithmsInput {

    static func write(value: ListAlgorithmsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListAliasesInput {

    static func write(value: ListAliasesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Alias"].write(value.alias)
        try writer["ImageName"].write(value.imageName)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["Version"].write(value.version)
    }
}

extension ListAppImageConfigsInput {

    static func write(value: ListAppImageConfigsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["ModifiedTimeAfter"].writeTimestamp(value.modifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["ModifiedTimeBefore"].writeTimestamp(value.modifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListAppsInput {

    static func write(value: ListAppsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainIdEquals"].write(value.domainIdEquals)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["SpaceNameEquals"].write(value.spaceNameEquals)
        try writer["UserProfileNameEquals"].write(value.userProfileNameEquals)
    }
}

extension ListArtifactsInput {

    static func write(value: ListArtifactsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ArtifactType"].write(value.artifactType)
        try writer["CreatedAfter"].writeTimestamp(value.createdAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreatedBefore"].writeTimestamp(value.createdBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["SourceUri"].write(value.sourceUri)
    }
}

extension ListAssociationsInput {

    static func write(value: ListAssociationsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssociationType"].write(value.associationType)
        try writer["CreatedAfter"].writeTimestamp(value.createdAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreatedBefore"].writeTimestamp(value.createdBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["DestinationArn"].write(value.destinationArn)
        try writer["DestinationType"].write(value.destinationType)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["SourceArn"].write(value.sourceArn)
        try writer["SourceType"].write(value.sourceType)
    }
}

extension ListAutoMLJobsInput {

    static func write(value: ListAutoMLJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
    }
}

extension ListCandidatesForAutoMLJobInput {

    static func write(value: ListCandidatesForAutoMLJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoMLJobName"].write(value.autoMLJobName)
        try writer["CandidateNameEquals"].write(value.candidateNameEquals)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
    }
}

extension ListClusterNodesInput {

    static func write(value: ListClusterNodesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterName"].write(value.clusterName)
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["InstanceGroupNameContains"].write(value.instanceGroupNameContains)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListClustersInput {

    static func write(value: ListClustersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListCodeRepositoriesInput {

    static func write(value: ListCodeRepositoriesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListCompilationJobsInput {

    static func write(value: ListCompilationJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
    }
}

extension ListContextsInput {

    static func write(value: ListContextsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContextType"].write(value.contextType)
        try writer["CreatedAfter"].writeTimestamp(value.createdAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreatedBefore"].writeTimestamp(value.createdBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["SourceUri"].write(value.sourceUri)
    }
}

extension ListDataQualityJobDefinitionsInput {

    static func write(value: ListDataQualityJobDefinitionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["EndpointName"].write(value.endpointName)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListDeviceFleetsInput {

    static func write(value: ListDeviceFleetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListDevicesInput {

    static func write(value: ListDevicesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeviceFleetName"].write(value.deviceFleetName)
        try writer["LatestHeartbeatAfter"].writeTimestamp(value.latestHeartbeatAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["ModelName"].write(value.modelName)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListDomainsInput {

    static func write(value: ListDomainsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListEdgeDeploymentPlansInput {

    static func write(value: ListEdgeDeploymentPlansInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["DeviceFleetNameContains"].write(value.deviceFleetNameContains)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListEdgePackagingJobsInput {

    static func write(value: ListEdgePackagingJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["ModelNameContains"].write(value.modelNameContains)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
    }
}

extension ListEndpointConfigsInput {

    static func write(value: ListEndpointConfigsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListEndpointsInput {

    static func write(value: ListEndpointsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
    }
}

extension ListExperimentsInput {

    static func write(value: ListExperimentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreatedAfter"].writeTimestamp(value.createdAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreatedBefore"].writeTimestamp(value.createdBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListFeatureGroupsInput {

    static func write(value: ListFeatureGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["FeatureGroupStatusEquals"].write(value.featureGroupStatusEquals)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["OfflineStoreStatusEquals"].write(value.offlineStoreStatusEquals)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListFlowDefinitionsInput {

    static func write(value: ListFlowDefinitionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListHubContentsInput {

    static func write(value: ListHubContentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["HubContentType"].write(value.hubContentType)
        try writer["HubName"].write(value.hubName)
        try writer["MaxResults"].write(value.maxResults)
        try writer["MaxSchemaVersion"].write(value.maxSchemaVersion)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListHubContentVersionsInput {

    static func write(value: ListHubContentVersionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["HubContentName"].write(value.hubContentName)
        try writer["HubContentType"].write(value.hubContentType)
        try writer["HubName"].write(value.hubName)
        try writer["MaxResults"].write(value.maxResults)
        try writer["MaxSchemaVersion"].write(value.maxSchemaVersion)
        try writer["MinVersion"].write(value.minVersion)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListHubsInput {

    static func write(value: ListHubsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListHumanTaskUisInput {

    static func write(value: ListHumanTaskUisInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListHyperParameterTuningJobsInput {

    static func write(value: ListHyperParameterTuningJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
    }
}

extension ListImagesInput {

    static func write(value: ListImagesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListImageVersionsInput {

    static func write(value: ListImageVersionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["ImageName"].write(value.imageName)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListInferenceComponentsInput {

    static func write(value: ListInferenceComponentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["EndpointNameEquals"].write(value.endpointNameEquals)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
        try writer["VariantNameEquals"].write(value.variantNameEquals)
    }
}

extension ListInferenceExperimentsInput {

    static func write(value: ListInferenceExperimentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
        try writer["Type"].write(value.type)
    }
}

extension ListInferenceRecommendationsJobsInput {

    static func write(value: ListInferenceRecommendationsJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["ModelNameEquals"].write(value.modelNameEquals)
        try writer["ModelPackageVersionArnEquals"].write(value.modelPackageVersionArnEquals)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
    }
}

extension ListInferenceRecommendationsJobStepsInput {

    static func write(value: ListInferenceRecommendationsJobStepsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobName"].write(value.jobName)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["Status"].write(value.status)
        try writer["StepType"].write(value.stepType)
    }
}

extension ListLabelingJobsInput {

    static func write(value: ListLabelingJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
    }
}

extension ListLabelingJobsForWorkteamInput {

    static func write(value: ListLabelingJobsForWorkteamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["JobReferenceCodeContains"].write(value.jobReferenceCodeContains)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["WorkteamArn"].write(value.workteamArn)
    }
}

extension ListLineageGroupsInput {

    static func write(value: ListLineageGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreatedAfter"].writeTimestamp(value.createdAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreatedBefore"].writeTimestamp(value.createdBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListMlflowTrackingServersInput {

    static func write(value: ListMlflowTrackingServersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreatedAfter"].writeTimestamp(value.createdAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreatedBefore"].writeTimestamp(value.createdBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["MlflowVersion"].write(value.mlflowVersion)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["TrackingServerStatus"].write(value.trackingServerStatus)
    }
}

extension ListModelBiasJobDefinitionsInput {

    static func write(value: ListModelBiasJobDefinitionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["EndpointName"].write(value.endpointName)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListModelCardExportJobsInput {

    static func write(value: ListModelCardExportJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["ModelCardExportJobNameContains"].write(value.modelCardExportJobNameContains)
        try writer["ModelCardName"].write(value.modelCardName)
        try writer["ModelCardVersion"].write(value.modelCardVersion)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
    }
}

extension ListModelCardsInput {

    static func write(value: ListModelCardsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["ModelCardStatus"].write(value.modelCardStatus)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListModelCardVersionsInput {

    static func write(value: ListModelCardVersionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["ModelCardName"].write(value.modelCardName)
        try writer["ModelCardStatus"].write(value.modelCardStatus)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListModelExplainabilityJobDefinitionsInput {

    static func write(value: ListModelExplainabilityJobDefinitionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["EndpointName"].write(value.endpointName)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListModelMetadataInput {

    static func write(value: ListModelMetadataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SearchExpression"].write(value.searchExpression, with: SageMakerClientTypes.ModelMetadataSearchExpression.write(value:to:))
    }
}

extension ListModelPackageGroupsInput {

    static func write(value: ListModelPackageGroupsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CrossAccountFilterOption"].write(value.crossAccountFilterOption)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListModelPackagesInput {

    static func write(value: ListModelPackagesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["ModelApprovalStatus"].write(value.modelApprovalStatus)
        try writer["ModelPackageGroupName"].write(value.modelPackageGroupName)
        try writer["ModelPackageType"].write(value.modelPackageType)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListModelQualityJobDefinitionsInput {

    static func write(value: ListModelQualityJobDefinitionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["EndpointName"].write(value.endpointName)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListModelsInput {

    static func write(value: ListModelsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListMonitoringAlertHistoryInput {

    static func write(value: ListMonitoringAlertHistoryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["MonitoringAlertName"].write(value.monitoringAlertName)
        try writer["MonitoringScheduleName"].write(value.monitoringScheduleName)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
    }
}

extension ListMonitoringAlertsInput {

    static func write(value: ListMonitoringAlertsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["MonitoringScheduleName"].write(value.monitoringScheduleName)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListMonitoringExecutionsInput {

    static func write(value: ListMonitoringExecutionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["EndpointName"].write(value.endpointName)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["MonitoringJobDefinitionName"].write(value.monitoringJobDefinitionName)
        try writer["MonitoringScheduleName"].write(value.monitoringScheduleName)
        try writer["MonitoringTypeEquals"].write(value.monitoringTypeEquals)
        try writer["NextToken"].write(value.nextToken)
        try writer["ScheduledTimeAfter"].writeTimestamp(value.scheduledTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["ScheduledTimeBefore"].writeTimestamp(value.scheduledTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
    }
}

extension ListMonitoringSchedulesInput {

    static func write(value: ListMonitoringSchedulesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["EndpointName"].write(value.endpointName)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["MonitoringJobDefinitionName"].write(value.monitoringJobDefinitionName)
        try writer["MonitoringTypeEquals"].write(value.monitoringTypeEquals)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
    }
}

extension ListNotebookInstanceLifecycleConfigsInput {

    static func write(value: ListNotebookInstanceLifecycleConfigsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListNotebookInstancesInput {

    static func write(value: ListNotebookInstancesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdditionalCodeRepositoryEquals"].write(value.additionalCodeRepositoryEquals)
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["DefaultCodeRepositoryContains"].write(value.defaultCodeRepositoryContains)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["NotebookInstanceLifecycleConfigNameContains"].write(value.notebookInstanceLifecycleConfigNameContains)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
    }
}

extension ListOptimizationJobsInput {

    static func write(value: ListOptimizationJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["OptimizationContains"].write(value.optimizationContains)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
    }
}

extension ListPipelineExecutionsInput {

    static func write(value: ListPipelineExecutionsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreatedAfter"].writeTimestamp(value.createdAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreatedBefore"].writeTimestamp(value.createdBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["PipelineName"].write(value.pipelineName)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListPipelineExecutionStepsInput {

    static func write(value: ListPipelineExecutionStepsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["PipelineExecutionArn"].write(value.pipelineExecutionArn)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListPipelineParametersForExecutionInput {

    static func write(value: ListPipelineParametersForExecutionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["PipelineExecutionArn"].write(value.pipelineExecutionArn)
    }
}

extension ListPipelinesInput {

    static func write(value: ListPipelinesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreatedAfter"].writeTimestamp(value.createdAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreatedBefore"].writeTimestamp(value.createdBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["PipelineNamePrefix"].write(value.pipelineNamePrefix)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListProcessingJobsInput {

    static func write(value: ListProcessingJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
    }
}

extension ListProjectsInput {

    static func write(value: ListProjectsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListResourceCatalogsInput {

    static func write(value: ListResourceCatalogsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListSpacesInput {

    static func write(value: ListSpacesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainIdEquals"].write(value.domainIdEquals)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["SpaceNameContains"].write(value.spaceNameContains)
    }
}

extension ListStageDevicesInput {

    static func write(value: ListStageDevicesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EdgeDeploymentPlanName"].write(value.edgeDeploymentPlanName)
        try writer["ExcludeDevicesDeployedInOtherStage"].write(value.excludeDevicesDeployedInOtherStage)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["StageName"].write(value.stageName)
    }
}

extension ListStudioLifecycleConfigsInput {

    static func write(value: ListStudioLifecycleConfigsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppTypeEquals"].write(value.appTypeEquals)
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["ModifiedTimeAfter"].writeTimestamp(value.modifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["ModifiedTimeBefore"].writeTimestamp(value.modifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListSubscribedWorkteamsInput {

    static func write(value: ListSubscribedWorkteamsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListTagsInput {

    static func write(value: ListTagsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension ListTrainingJobsInput {

    static func write(value: ListTrainingJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
        try writer["WarmPoolStatusEquals"].write(value.warmPoolStatusEquals)
    }
}

extension ListTrainingJobsForHyperParameterTuningJobInput {

    static func write(value: ListTrainingJobsForHyperParameterTuningJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HyperParameterTuningJobName"].write(value.hyperParameterTuningJobName)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
    }
}

extension ListTransformJobsInput {

    static func write(value: ListTransformJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeAfter"].writeTimestamp(value.lastModifiedTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LastModifiedTimeBefore"].writeTimestamp(value.lastModifiedTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["StatusEquals"].write(value.statusEquals)
    }
}

extension ListTrialComponentsInput {

    static func write(value: ListTrialComponentsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreatedAfter"].writeTimestamp(value.createdAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreatedBefore"].writeTimestamp(value.createdBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["ExperimentName"].write(value.experimentName)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["SourceArn"].write(value.sourceArn)
        try writer["TrialName"].write(value.trialName)
    }
}

extension ListTrialsInput {

    static func write(value: ListTrialsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreatedAfter"].writeTimestamp(value.createdAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreatedBefore"].writeTimestamp(value.createdBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["ExperimentName"].write(value.experimentName)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["TrialComponentName"].write(value.trialComponentName)
    }
}

extension ListUserProfilesInput {

    static func write(value: ListUserProfilesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainIdEquals"].write(value.domainIdEquals)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["UserProfileNameContains"].write(value.userProfileNameContains)
    }
}

extension ListWorkforcesInput {

    static func write(value: ListWorkforcesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension ListWorkteamsInput {

    static func write(value: ListWorkteamsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NameContains"].write(value.nameContains)
        try writer["NextToken"].write(value.nextToken)
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
    }
}

extension PutModelPackageGroupPolicyInput {

    static func write(value: PutModelPackageGroupPolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelPackageGroupName"].write(value.modelPackageGroupName)
        try writer["ResourcePolicy"].write(value.resourcePolicy)
    }
}

extension QueryLineageInput {

    static func write(value: QueryLineageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Direction"].write(value.direction)
        try writer["Filters"].write(value.filters, with: SageMakerClientTypes.QueryFilters.write(value:to:))
        try writer["IncludeEdges"].write(value.includeEdges)
        try writer["MaxDepth"].write(value.maxDepth)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["StartArns"].writeList(value.startArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension RegisterDevicesInput {

    static func write(value: RegisterDevicesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeviceFleetName"].write(value.deviceFleetName)
        try writer["Devices"].writeList(value.devices, memberWritingClosure: SageMakerClientTypes.Device.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension RenderUiTemplateInput {

    static func write(value: RenderUiTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HumanTaskUiArn"].write(value.humanTaskUiArn)
        try writer["RoleArn"].write(value.roleArn)
        try writer["Task"].write(value.task, with: SageMakerClientTypes.RenderableTask.write(value:to:))
        try writer["UiTemplate"].write(value.uiTemplate, with: SageMakerClientTypes.UiTemplate.write(value:to:))
    }
}

extension RetryPipelineExecutionInput {

    static func write(value: RetryPipelineExecutionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["ParallelismConfiguration"].write(value.parallelismConfiguration, with: SageMakerClientTypes.ParallelismConfiguration.write(value:to:))
        try writer["PipelineExecutionArn"].write(value.pipelineExecutionArn)
    }
}

extension SearchInput {

    static func write(value: SearchInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CrossAccountFilterOption"].write(value.crossAccountFilterOption)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
        try writer["Resource"].write(value.resource)
        try writer["SearchExpression"].write(value.searchExpression, with: SageMakerClientTypes.SearchExpression.write(value:to:))
        try writer["SortBy"].write(value.sortBy)
        try writer["SortOrder"].write(value.sortOrder)
        try writer["VisibilityConditions"].writeList(value.visibilityConditions, memberWritingClosure: SageMakerClientTypes.VisibilityConditions.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension SendPipelineExecutionStepFailureInput {

    static func write(value: SendPipelineExecutionStepFailureInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CallbackToken"].write(value.callbackToken)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["FailureReason"].write(value.failureReason)
    }
}

extension SendPipelineExecutionStepSuccessInput {

    static func write(value: SendPipelineExecutionStepSuccessInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CallbackToken"].write(value.callbackToken)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["OutputParameters"].writeList(value.outputParameters, memberWritingClosure: SageMakerClientTypes.OutputParameter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension StartEdgeDeploymentStageInput {

    static func write(value: StartEdgeDeploymentStageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EdgeDeploymentPlanName"].write(value.edgeDeploymentPlanName)
        try writer["StageName"].write(value.stageName)
    }
}

extension StartInferenceExperimentInput {

    static func write(value: StartInferenceExperimentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
    }
}

extension StartMlflowTrackingServerInput {

    static func write(value: StartMlflowTrackingServerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TrackingServerName"].write(value.trackingServerName)
    }
}

extension StartMonitoringScheduleInput {

    static func write(value: StartMonitoringScheduleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MonitoringScheduleName"].write(value.monitoringScheduleName)
    }
}

extension StartNotebookInstanceInput {

    static func write(value: StartNotebookInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NotebookInstanceName"].write(value.notebookInstanceName)
    }
}

extension StartPipelineExecutionInput {

    static func write(value: StartPipelineExecutionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["ParallelismConfiguration"].write(value.parallelismConfiguration, with: SageMakerClientTypes.ParallelismConfiguration.write(value:to:))
        try writer["PipelineExecutionDescription"].write(value.pipelineExecutionDescription)
        try writer["PipelineExecutionDisplayName"].write(value.pipelineExecutionDisplayName)
        try writer["PipelineName"].write(value.pipelineName)
        try writer["PipelineParameters"].writeList(value.pipelineParameters, memberWritingClosure: SageMakerClientTypes.Parameter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SelectiveExecutionConfig"].write(value.selectiveExecutionConfig, with: SageMakerClientTypes.SelectiveExecutionConfig.write(value:to:))
    }
}

extension StopAutoMLJobInput {

    static func write(value: StopAutoMLJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoMLJobName"].write(value.autoMLJobName)
    }
}

extension StopCompilationJobInput {

    static func write(value: StopCompilationJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CompilationJobName"].write(value.compilationJobName)
    }
}

extension StopEdgeDeploymentStageInput {

    static func write(value: StopEdgeDeploymentStageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EdgeDeploymentPlanName"].write(value.edgeDeploymentPlanName)
        try writer["StageName"].write(value.stageName)
    }
}

extension StopEdgePackagingJobInput {

    static func write(value: StopEdgePackagingJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EdgePackagingJobName"].write(value.edgePackagingJobName)
    }
}

extension StopHyperParameterTuningJobInput {

    static func write(value: StopHyperParameterTuningJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HyperParameterTuningJobName"].write(value.hyperParameterTuningJobName)
    }
}

extension StopInferenceExperimentInput {

    static func write(value: StopInferenceExperimentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DesiredModelVariants"].writeList(value.desiredModelVariants, memberWritingClosure: SageMakerClientTypes.ModelVariantConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DesiredState"].write(value.desiredState)
        try writer["ModelVariantActions"].writeMap(value.modelVariantActions, valueWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerClientTypes.ModelVariantAction>().write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Name"].write(value.name)
        try writer["Reason"].write(value.reason)
    }
}

extension StopInferenceRecommendationsJobInput {

    static func write(value: StopInferenceRecommendationsJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobName"].write(value.jobName)
    }
}

extension StopLabelingJobInput {

    static func write(value: StopLabelingJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LabelingJobName"].write(value.labelingJobName)
    }
}

extension StopMlflowTrackingServerInput {

    static func write(value: StopMlflowTrackingServerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TrackingServerName"].write(value.trackingServerName)
    }
}

extension StopMonitoringScheduleInput {

    static func write(value: StopMonitoringScheduleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MonitoringScheduleName"].write(value.monitoringScheduleName)
    }
}

extension StopNotebookInstanceInput {

    static func write(value: StopNotebookInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NotebookInstanceName"].write(value.notebookInstanceName)
    }
}

extension StopOptimizationJobInput {

    static func write(value: StopOptimizationJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OptimizationJobName"].write(value.optimizationJobName)
    }
}

extension StopPipelineExecutionInput {

    static func write(value: StopPipelineExecutionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["PipelineExecutionArn"].write(value.pipelineExecutionArn)
    }
}

extension StopProcessingJobInput {

    static func write(value: StopProcessingJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProcessingJobName"].write(value.processingJobName)
    }
}

extension StopTrainingJobInput {

    static func write(value: StopTrainingJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TrainingJobName"].write(value.trainingJobName)
    }
}

extension StopTransformJobInput {

    static func write(value: StopTransformJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TransformJobName"].write(value.transformJobName)
    }
}

extension UpdateActionInput {

    static func write(value: UpdateActionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActionName"].write(value.actionName)
        try writer["Description"].write(value.description)
        try writer["Properties"].writeMap(value.properties, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["PropertiesToRemove"].writeList(value.propertiesToRemove, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Status"].write(value.status)
    }
}

extension UpdateAppImageConfigInput {

    static func write(value: UpdateAppImageConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppImageConfigName"].write(value.appImageConfigName)
        try writer["CodeEditorAppImageConfig"].write(value.codeEditorAppImageConfig, with: SageMakerClientTypes.CodeEditorAppImageConfig.write(value:to:))
        try writer["JupyterLabAppImageConfig"].write(value.jupyterLabAppImageConfig, with: SageMakerClientTypes.JupyterLabAppImageConfig.write(value:to:))
        try writer["KernelGatewayImageConfig"].write(value.kernelGatewayImageConfig, with: SageMakerClientTypes.KernelGatewayImageConfig.write(value:to:))
    }
}

extension UpdateArtifactInput {

    static func write(value: UpdateArtifactInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ArtifactArn"].write(value.artifactArn)
        try writer["ArtifactName"].write(value.artifactName)
        try writer["Properties"].writeMap(value.properties, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["PropertiesToRemove"].writeList(value.propertiesToRemove, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateClusterInput {

    static func write(value: UpdateClusterInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterName"].write(value.clusterName)
        try writer["InstanceGroups"].writeList(value.instanceGroups, memberWritingClosure: SageMakerClientTypes.ClusterInstanceGroupSpecification.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["NodeRecovery"].write(value.nodeRecovery)
    }
}

extension UpdateClusterSoftwareInput {

    static func write(value: UpdateClusterSoftwareInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterName"].write(value.clusterName)
    }
}

extension UpdateCodeRepositoryInput {

    static func write(value: UpdateCodeRepositoryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CodeRepositoryName"].write(value.codeRepositoryName)
        try writer["GitConfig"].write(value.gitConfig, with: SageMakerClientTypes.GitConfigForUpdate.write(value:to:))
    }
}

extension UpdateContextInput {

    static func write(value: UpdateContextInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContextName"].write(value.contextName)
        try writer["Description"].write(value.description)
        try writer["Properties"].writeMap(value.properties, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["PropertiesToRemove"].writeList(value.propertiesToRemove, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateDeviceFleetInput {

    static func write(value: UpdateDeviceFleetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["DeviceFleetName"].write(value.deviceFleetName)
        try writer["EnableIotRoleAlias"].write(value.enableIotRoleAlias)
        try writer["OutputConfig"].write(value.outputConfig, with: SageMakerClientTypes.EdgeOutputConfig.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
    }
}

extension UpdateDevicesInput {

    static func write(value: UpdateDevicesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeviceFleetName"].write(value.deviceFleetName)
        try writer["Devices"].writeList(value.devices, memberWritingClosure: SageMakerClientTypes.Device.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateDomainInput {

    static func write(value: UpdateDomainInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppNetworkAccessType"].write(value.appNetworkAccessType)
        try writer["AppSecurityGroupManagement"].write(value.appSecurityGroupManagement)
        try writer["DefaultSpaceSettings"].write(value.defaultSpaceSettings, with: SageMakerClientTypes.DefaultSpaceSettings.write(value:to:))
        try writer["DefaultUserSettings"].write(value.defaultUserSettings, with: SageMakerClientTypes.UserSettings.write(value:to:))
        try writer["DomainId"].write(value.domainId)
        try writer["DomainSettingsForUpdate"].write(value.domainSettingsForUpdate, with: SageMakerClientTypes.DomainSettingsForUpdate.write(value:to:))
        try writer["SubnetIds"].writeList(value.subnetIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateEndpointInput {

    static func write(value: UpdateEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeploymentConfig"].write(value.deploymentConfig, with: SageMakerClientTypes.DeploymentConfig.write(value:to:))
        try writer["EndpointConfigName"].write(value.endpointConfigName)
        try writer["EndpointName"].write(value.endpointName)
        try writer["ExcludeRetainedVariantProperties"].writeList(value.excludeRetainedVariantProperties, memberWritingClosure: SageMakerClientTypes.VariantProperty.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["RetainAllVariantProperties"].write(value.retainAllVariantProperties)
        try writer["RetainDeploymentConfig"].write(value.retainDeploymentConfig)
    }
}

extension UpdateEndpointWeightsAndCapacitiesInput {

    static func write(value: UpdateEndpointWeightsAndCapacitiesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DesiredWeightsAndCapacities"].writeList(value.desiredWeightsAndCapacities, memberWritingClosure: SageMakerClientTypes.DesiredWeightAndCapacity.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EndpointName"].write(value.endpointName)
    }
}

extension UpdateExperimentInput {

    static func write(value: UpdateExperimentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["DisplayName"].write(value.displayName)
        try writer["ExperimentName"].write(value.experimentName)
    }
}

extension UpdateFeatureGroupInput {

    static func write(value: UpdateFeatureGroupInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FeatureAdditions"].writeList(value.featureAdditions, memberWritingClosure: SageMakerClientTypes.FeatureDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FeatureGroupName"].write(value.featureGroupName)
        try writer["OnlineStoreConfig"].write(value.onlineStoreConfig, with: SageMakerClientTypes.OnlineStoreConfigUpdate.write(value:to:))
        try writer["ThroughputConfig"].write(value.throughputConfig, with: SageMakerClientTypes.ThroughputConfigUpdate.write(value:to:))
    }
}

extension UpdateFeatureMetadataInput {

    static func write(value: UpdateFeatureMetadataInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["FeatureGroupName"].write(value.featureGroupName)
        try writer["FeatureName"].write(value.featureName)
        try writer["ParameterAdditions"].writeList(value.parameterAdditions, memberWritingClosure: SageMakerClientTypes.FeatureParameter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ParameterRemovals"].writeList(value.parameterRemovals, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateHubInput {

    static func write(value: UpdateHubInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HubDescription"].write(value.hubDescription)
        try writer["HubDisplayName"].write(value.hubDisplayName)
        try writer["HubName"].write(value.hubName)
        try writer["HubSearchKeywords"].writeList(value.hubSearchKeywords, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateImageInput {

    static func write(value: UpdateImageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeleteProperties"].writeList(value.deleteProperties, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Description"].write(value.description)
        try writer["DisplayName"].write(value.displayName)
        try writer["ImageName"].write(value.imageName)
        try writer["RoleArn"].write(value.roleArn)
    }
}

extension UpdateImageVersionInput {

    static func write(value: UpdateImageVersionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Alias"].write(value.alias)
        try writer["AliasesToAdd"].writeList(value.aliasesToAdd, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AliasesToDelete"].writeList(value.aliasesToDelete, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Horovod"].write(value.horovod)
        try writer["ImageName"].write(value.imageName)
        try writer["JobType"].write(value.jobType)
        try writer["MLFramework"].write(value.mlFramework)
        try writer["Processor"].write(value.processor)
        try writer["ProgrammingLang"].write(value.programmingLang)
        try writer["ReleaseNotes"].write(value.releaseNotes)
        try writer["VendorGuidance"].write(value.vendorGuidance)
        try writer["Version"].write(value.version)
    }
}

extension UpdateInferenceComponentInput {

    static func write(value: UpdateInferenceComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InferenceComponentName"].write(value.inferenceComponentName)
        try writer["RuntimeConfig"].write(value.runtimeConfig, with: SageMakerClientTypes.InferenceComponentRuntimeConfig.write(value:to:))
        try writer["Specification"].write(value.specification, with: SageMakerClientTypes.InferenceComponentSpecification.write(value:to:))
    }
}

extension UpdateInferenceComponentRuntimeConfigInput {

    static func write(value: UpdateInferenceComponentRuntimeConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DesiredRuntimeConfig"].write(value.desiredRuntimeConfig, with: SageMakerClientTypes.InferenceComponentRuntimeConfig.write(value:to:))
        try writer["InferenceComponentName"].write(value.inferenceComponentName)
    }
}

extension UpdateInferenceExperimentInput {

    static func write(value: UpdateInferenceExperimentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataStorageConfig"].write(value.dataStorageConfig, with: SageMakerClientTypes.InferenceExperimentDataStorageConfig.write(value:to:))
        try writer["Description"].write(value.description)
        try writer["ModelVariants"].writeList(value.modelVariants, memberWritingClosure: SageMakerClientTypes.ModelVariantConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Name"].write(value.name)
        try writer["Schedule"].write(value.schedule, with: SageMakerClientTypes.InferenceExperimentSchedule.write(value:to:))
        try writer["ShadowModeConfig"].write(value.shadowModeConfig, with: SageMakerClientTypes.ShadowModeConfig.write(value:to:))
    }
}

extension UpdateMlflowTrackingServerInput {

    static func write(value: UpdateMlflowTrackingServerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ArtifactStoreUri"].write(value.artifactStoreUri)
        try writer["AutomaticModelRegistration"].write(value.automaticModelRegistration)
        try writer["TrackingServerName"].write(value.trackingServerName)
        try writer["TrackingServerSize"].write(value.trackingServerSize)
        try writer["WeeklyMaintenanceWindowStart"].write(value.weeklyMaintenanceWindowStart)
    }
}

extension UpdateModelCardInput {

    static func write(value: UpdateModelCardInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Content"].write(value.content)
        try writer["ModelCardName"].write(value.modelCardName)
        try writer["ModelCardStatus"].write(value.modelCardStatus)
    }
}

extension UpdateModelPackageInput {

    static func write(value: UpdateModelPackageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdditionalInferenceSpecificationsToAdd"].writeList(value.additionalInferenceSpecificationsToAdd, memberWritingClosure: SageMakerClientTypes.AdditionalInferenceSpecificationDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ApprovalDescription"].write(value.approvalDescription)
        try writer["CustomerMetadataProperties"].writeMap(value.customerMetadataProperties, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["CustomerMetadataPropertiesToRemove"].writeList(value.customerMetadataPropertiesToRemove, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InferenceSpecification"].write(value.inferenceSpecification, with: SageMakerClientTypes.InferenceSpecification.write(value:to:))
        try writer["ModelApprovalStatus"].write(value.modelApprovalStatus)
        try writer["ModelCard"].write(value.modelCard, with: SageMakerClientTypes.ModelPackageModelCard.write(value:to:))
        try writer["ModelPackageArn"].write(value.modelPackageArn)
        try writer["SourceUri"].write(value.sourceUri)
    }
}

extension UpdateMonitoringAlertInput {

    static func write(value: UpdateMonitoringAlertInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DatapointsToAlert"].write(value.datapointsToAlert)
        try writer["EvaluationPeriod"].write(value.evaluationPeriod)
        try writer["MonitoringAlertName"].write(value.monitoringAlertName)
        try writer["MonitoringScheduleName"].write(value.monitoringScheduleName)
    }
}

extension UpdateMonitoringScheduleInput {

    static func write(value: UpdateMonitoringScheduleInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MonitoringScheduleConfig"].write(value.monitoringScheduleConfig, with: SageMakerClientTypes.MonitoringScheduleConfig.write(value:to:))
        try writer["MonitoringScheduleName"].write(value.monitoringScheduleName)
    }
}

extension UpdateNotebookInstanceInput {

    static func write(value: UpdateNotebookInstanceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AcceleratorTypes"].writeList(value.acceleratorTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerClientTypes.NotebookInstanceAcceleratorType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["AdditionalCodeRepositories"].writeList(value.additionalCodeRepositories, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DefaultCodeRepository"].write(value.defaultCodeRepository)
        try writer["DisassociateAcceleratorTypes"].write(value.disassociateAcceleratorTypes)
        try writer["DisassociateAdditionalCodeRepositories"].write(value.disassociateAdditionalCodeRepositories)
        try writer["DisassociateDefaultCodeRepository"].write(value.disassociateDefaultCodeRepository)
        try writer["DisassociateLifecycleConfig"].write(value.disassociateLifecycleConfig)
        try writer["InstanceMetadataServiceConfiguration"].write(value.instanceMetadataServiceConfiguration, with: SageMakerClientTypes.InstanceMetadataServiceConfiguration.write(value:to:))
        try writer["InstanceType"].write(value.instanceType)
        try writer["LifecycleConfigName"].write(value.lifecycleConfigName)
        try writer["NotebookInstanceName"].write(value.notebookInstanceName)
        try writer["RoleArn"].write(value.roleArn)
        try writer["RootAccess"].write(value.rootAccess)
        try writer["VolumeSizeInGB"].write(value.volumeSizeInGB)
    }
}

extension UpdateNotebookInstanceLifecycleConfigInput {

    static func write(value: UpdateNotebookInstanceLifecycleConfigInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NotebookInstanceLifecycleConfigName"].write(value.notebookInstanceLifecycleConfigName)
        try writer["OnCreate"].writeList(value.onCreate, memberWritingClosure: SageMakerClientTypes.NotebookInstanceLifecycleHook.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OnStart"].writeList(value.onStart, memberWritingClosure: SageMakerClientTypes.NotebookInstanceLifecycleHook.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdatePipelineInput {

    static func write(value: UpdatePipelineInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ParallelismConfiguration"].write(value.parallelismConfiguration, with: SageMakerClientTypes.ParallelismConfiguration.write(value:to:))
        try writer["PipelineDefinition"].write(value.pipelineDefinition)
        try writer["PipelineDefinitionS3Location"].write(value.pipelineDefinitionS3Location, with: SageMakerClientTypes.PipelineDefinitionS3Location.write(value:to:))
        try writer["PipelineDescription"].write(value.pipelineDescription)
        try writer["PipelineDisplayName"].write(value.pipelineDisplayName)
        try writer["PipelineName"].write(value.pipelineName)
        try writer["RoleArn"].write(value.roleArn)
    }
}

extension UpdatePipelineExecutionInput {

    static func write(value: UpdatePipelineExecutionInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ParallelismConfiguration"].write(value.parallelismConfiguration, with: SageMakerClientTypes.ParallelismConfiguration.write(value:to:))
        try writer["PipelineExecutionArn"].write(value.pipelineExecutionArn)
        try writer["PipelineExecutionDescription"].write(value.pipelineExecutionDescription)
        try writer["PipelineExecutionDisplayName"].write(value.pipelineExecutionDisplayName)
    }
}

extension UpdateProjectInput {

    static func write(value: UpdateProjectInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProjectDescription"].write(value.projectDescription)
        try writer["ProjectName"].write(value.projectName)
        try writer["ServiceCatalogProvisioningUpdateDetails"].write(value.serviceCatalogProvisioningUpdateDetails, with: SageMakerClientTypes.ServiceCatalogProvisioningUpdateDetails.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: SageMakerClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateSpaceInput {

    static func write(value: UpdateSpaceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainId"].write(value.domainId)
        try writer["SpaceDisplayName"].write(value.spaceDisplayName)
        try writer["SpaceName"].write(value.spaceName)
        try writer["SpaceSettings"].write(value.spaceSettings, with: SageMakerClientTypes.SpaceSettings.write(value:to:))
    }
}

extension UpdateTrainingJobInput {

    static func write(value: UpdateTrainingJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProfilerConfig"].write(value.profilerConfig, with: SageMakerClientTypes.ProfilerConfigForUpdate.write(value:to:))
        try writer["ProfilerRuleConfigurations"].writeList(value.profilerRuleConfigurations, memberWritingClosure: SageMakerClientTypes.ProfilerRuleConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["RemoteDebugConfig"].write(value.remoteDebugConfig, with: SageMakerClientTypes.RemoteDebugConfigForUpdate.write(value:to:))
        try writer["ResourceConfig"].write(value.resourceConfig, with: SageMakerClientTypes.ResourceConfigForUpdate.write(value:to:))
        try writer["TrainingJobName"].write(value.trainingJobName)
    }
}

extension UpdateTrialInput {

    static func write(value: UpdateTrialInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DisplayName"].write(value.displayName)
        try writer["TrialName"].write(value.trialName)
    }
}

extension UpdateTrialComponentInput {

    static func write(value: UpdateTrialComponentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DisplayName"].write(value.displayName)
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["InputArtifacts"].writeMap(value.inputArtifacts, valueWritingClosure: SageMakerClientTypes.TrialComponentArtifact.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["InputArtifactsToRemove"].writeList(value.inputArtifactsToRemove, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OutputArtifacts"].writeMap(value.outputArtifacts, valueWritingClosure: SageMakerClientTypes.TrialComponentArtifact.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["OutputArtifactsToRemove"].writeList(value.outputArtifactsToRemove, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Parameters"].writeMap(value.parameters, valueWritingClosure: SageMakerClientTypes.TrialComponentParameterValue.write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ParametersToRemove"].writeList(value.parametersToRemove, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["Status"].write(value.status, with: SageMakerClientTypes.TrialComponentStatus.write(value:to:))
        try writer["TrialComponentName"].write(value.trialComponentName)
    }
}

extension UpdateUserProfileInput {

    static func write(value: UpdateUserProfileInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DomainId"].write(value.domainId)
        try writer["UserProfileName"].write(value.userProfileName)
        try writer["UserSettings"].write(value.userSettings, with: SageMakerClientTypes.UserSettings.write(value:to:))
    }
}

extension UpdateWorkforceInput {

    static func write(value: UpdateWorkforceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OidcConfig"].write(value.oidcConfig, with: SageMakerClientTypes.OidcConfig.write(value:to:))
        try writer["SourceIpConfig"].write(value.sourceIpConfig, with: SageMakerClientTypes.SourceIpConfig.write(value:to:))
        try writer["WorkforceName"].write(value.workforceName)
        try writer["WorkforceVpcConfig"].write(value.workforceVpcConfig, with: SageMakerClientTypes.WorkforceVpcConfigRequest.write(value:to:))
    }
}

extension UpdateWorkteamInput {

    static func write(value: UpdateWorkteamInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["MemberDefinitions"].writeList(value.memberDefinitions, memberWritingClosure: SageMakerClientTypes.MemberDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["NotificationConfiguration"].write(value.notificationConfiguration, with: SageMakerClientTypes.NotificationConfiguration.write(value:to:))
        try writer["WorkerAccessConfiguration"].write(value.workerAccessConfiguration, with: SageMakerClientTypes.WorkerAccessConfiguration.write(value:to:))
        try writer["WorkteamName"].write(value.workteamName)
    }
}

extension AddAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddAssociationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AddAssociationOutput()
        value.destinationArn = try reader["DestinationArn"].readIfPresent()
        value.sourceArn = try reader["SourceArn"].readIfPresent()
        return value
    }
}

extension AddTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AddTagsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AddTagsOutput()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension AssociateTrialComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> AssociateTrialComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = AssociateTrialComponentOutput()
        value.trialArn = try reader["TrialArn"].readIfPresent()
        value.trialComponentArn = try reader["TrialComponentArn"].readIfPresent()
        return value
    }
}

extension BatchDescribeModelPackageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchDescribeModelPackageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchDescribeModelPackageOutput()
        value.batchDescribeModelPackageErrorMap = try reader["BatchDescribeModelPackageErrorMap"].readMapIfPresent(valueReadingClosure: SageMakerClientTypes.BatchDescribeModelPackageError.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.modelPackageSummaries = try reader["ModelPackageSummaries"].readMapIfPresent(valueReadingClosure: SageMakerClientTypes.BatchDescribeModelPackageSummary.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension CreateActionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateActionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateActionOutput()
        value.actionArn = try reader["ActionArn"].readIfPresent()
        return value
    }
}

extension CreateAlgorithmOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAlgorithmOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAlgorithmOutput()
        value.algorithmArn = try reader["AlgorithmArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateAppOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAppOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAppOutput()
        value.appArn = try reader["AppArn"].readIfPresent()
        return value
    }
}

extension CreateAppImageConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAppImageConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAppImageConfigOutput()
        value.appImageConfigArn = try reader["AppImageConfigArn"].readIfPresent()
        return value
    }
}

extension CreateArtifactOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateArtifactOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateArtifactOutput()
        value.artifactArn = try reader["ArtifactArn"].readIfPresent()
        return value
    }
}

extension CreateAutoMLJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAutoMLJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAutoMLJobOutput()
        value.autoMLJobArn = try reader["AutoMLJobArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateAutoMLJobV2Output {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateAutoMLJobV2Output {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateAutoMLJobV2Output()
        value.autoMLJobArn = try reader["AutoMLJobArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateClusterOutput()
        value.clusterArn = try reader["ClusterArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateCodeRepositoryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCodeRepositoryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateCodeRepositoryOutput()
        value.codeRepositoryArn = try reader["CodeRepositoryArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateCompilationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateCompilationJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateCompilationJobOutput()
        value.compilationJobArn = try reader["CompilationJobArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateContextOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateContextOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateContextOutput()
        value.contextArn = try reader["ContextArn"].readIfPresent()
        return value
    }
}

extension CreateDataQualityJobDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDataQualityJobDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDataQualityJobDefinitionOutput()
        value.jobDefinitionArn = try reader["JobDefinitionArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateDeviceFleetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDeviceFleetOutput {
        return CreateDeviceFleetOutput()
    }
}

extension CreateDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDomainOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDomainOutput()
        value.domainArn = try reader["DomainArn"].readIfPresent()
        value.url = try reader["Url"].readIfPresent()
        return value
    }
}

extension CreateEdgeDeploymentPlanOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEdgeDeploymentPlanOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEdgeDeploymentPlanOutput()
        value.edgeDeploymentPlanArn = try reader["EdgeDeploymentPlanArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateEdgeDeploymentStageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEdgeDeploymentStageOutput {
        return CreateEdgeDeploymentStageOutput()
    }
}

extension CreateEdgePackagingJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEdgePackagingJobOutput {
        return CreateEdgePackagingJobOutput()
    }
}

extension CreateEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEndpointOutput()
        value.endpointArn = try reader["EndpointArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateEndpointConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEndpointConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEndpointConfigOutput()
        value.endpointConfigArn = try reader["EndpointConfigArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateExperimentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateExperimentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateExperimentOutput()
        value.experimentArn = try reader["ExperimentArn"].readIfPresent()
        return value
    }
}

extension CreateFeatureGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateFeatureGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateFeatureGroupOutput()
        value.featureGroupArn = try reader["FeatureGroupArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateFlowDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateFlowDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateFlowDefinitionOutput()
        value.flowDefinitionArn = try reader["FlowDefinitionArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateHubOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateHubOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateHubOutput()
        value.hubArn = try reader["HubArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateHubContentReferenceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateHubContentReferenceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateHubContentReferenceOutput()
        value.hubArn = try reader["HubArn"].readIfPresent() ?? ""
        value.hubContentArn = try reader["HubContentArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateHumanTaskUiOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateHumanTaskUiOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateHumanTaskUiOutput()
        value.humanTaskUiArn = try reader["HumanTaskUiArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateHyperParameterTuningJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateHyperParameterTuningJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateHyperParameterTuningJobOutput()
        value.hyperParameterTuningJobArn = try reader["HyperParameterTuningJobArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateImageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateImageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateImageOutput()
        value.imageArn = try reader["ImageArn"].readIfPresent()
        return value
    }
}

extension CreateImageVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateImageVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateImageVersionOutput()
        value.imageVersionArn = try reader["ImageVersionArn"].readIfPresent()
        return value
    }
}

extension CreateInferenceComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateInferenceComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateInferenceComponentOutput()
        value.inferenceComponentArn = try reader["InferenceComponentArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateInferenceExperimentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateInferenceExperimentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateInferenceExperimentOutput()
        value.inferenceExperimentArn = try reader["InferenceExperimentArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateInferenceRecommendationsJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateInferenceRecommendationsJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateInferenceRecommendationsJobOutput()
        value.jobArn = try reader["JobArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateLabelingJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateLabelingJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateLabelingJobOutput()
        value.labelingJobArn = try reader["LabelingJobArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateMlflowTrackingServerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateMlflowTrackingServerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateMlflowTrackingServerOutput()
        value.trackingServerArn = try reader["TrackingServerArn"].readIfPresent()
        return value
    }
}

extension CreateModelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateModelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateModelOutput()
        value.modelArn = try reader["ModelArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateModelBiasJobDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateModelBiasJobDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateModelBiasJobDefinitionOutput()
        value.jobDefinitionArn = try reader["JobDefinitionArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateModelCardOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateModelCardOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateModelCardOutput()
        value.modelCardArn = try reader["ModelCardArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateModelCardExportJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateModelCardExportJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateModelCardExportJobOutput()
        value.modelCardExportJobArn = try reader["ModelCardExportJobArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateModelExplainabilityJobDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateModelExplainabilityJobDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateModelExplainabilityJobDefinitionOutput()
        value.jobDefinitionArn = try reader["JobDefinitionArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateModelPackageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateModelPackageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateModelPackageOutput()
        value.modelPackageArn = try reader["ModelPackageArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateModelPackageGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateModelPackageGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateModelPackageGroupOutput()
        value.modelPackageGroupArn = try reader["ModelPackageGroupArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateModelQualityJobDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateModelQualityJobDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateModelQualityJobDefinitionOutput()
        value.jobDefinitionArn = try reader["JobDefinitionArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateMonitoringScheduleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateMonitoringScheduleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateMonitoringScheduleOutput()
        value.monitoringScheduleArn = try reader["MonitoringScheduleArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateNotebookInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateNotebookInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateNotebookInstanceOutput()
        value.notebookInstanceArn = try reader["NotebookInstanceArn"].readIfPresent()
        return value
    }
}

extension CreateNotebookInstanceLifecycleConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateNotebookInstanceLifecycleConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateNotebookInstanceLifecycleConfigOutput()
        value.notebookInstanceLifecycleConfigArn = try reader["NotebookInstanceLifecycleConfigArn"].readIfPresent()
        return value
    }
}

extension CreateOptimizationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateOptimizationJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateOptimizationJobOutput()
        value.optimizationJobArn = try reader["OptimizationJobArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreatePipelineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePipelineOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePipelineOutput()
        value.pipelineArn = try reader["PipelineArn"].readIfPresent()
        return value
    }
}

extension CreatePresignedDomainUrlOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePresignedDomainUrlOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePresignedDomainUrlOutput()
        value.authorizedUrl = try reader["AuthorizedUrl"].readIfPresent()
        return value
    }
}

extension CreatePresignedMlflowTrackingServerUrlOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePresignedMlflowTrackingServerUrlOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePresignedMlflowTrackingServerUrlOutput()
        value.authorizedUrl = try reader["AuthorizedUrl"].readIfPresent()
        return value
    }
}

extension CreatePresignedNotebookInstanceUrlOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreatePresignedNotebookInstanceUrlOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreatePresignedNotebookInstanceUrlOutput()
        value.authorizedUrl = try reader["AuthorizedUrl"].readIfPresent()
        return value
    }
}

extension CreateProcessingJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateProcessingJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateProcessingJobOutput()
        value.processingJobArn = try reader["ProcessingJobArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateProjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateProjectOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateProjectOutput()
        value.projectArn = try reader["ProjectArn"].readIfPresent() ?? ""
        value.projectId = try reader["ProjectId"].readIfPresent() ?? ""
        return value
    }
}

extension CreateSpaceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateSpaceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateSpaceOutput()
        value.spaceArn = try reader["SpaceArn"].readIfPresent()
        return value
    }
}

extension CreateStudioLifecycleConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateStudioLifecycleConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateStudioLifecycleConfigOutput()
        value.studioLifecycleConfigArn = try reader["StudioLifecycleConfigArn"].readIfPresent()
        return value
    }
}

extension CreateTrainingJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateTrainingJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateTrainingJobOutput()
        value.trainingJobArn = try reader["TrainingJobArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateTransformJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateTransformJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateTransformJobOutput()
        value.transformJobArn = try reader["TransformJobArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateTrialOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateTrialOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateTrialOutput()
        value.trialArn = try reader["TrialArn"].readIfPresent()
        return value
    }
}

extension CreateTrialComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateTrialComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateTrialComponentOutput()
        value.trialComponentArn = try reader["TrialComponentArn"].readIfPresent()
        return value
    }
}

extension CreateUserProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateUserProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateUserProfileOutput()
        value.userProfileArn = try reader["UserProfileArn"].readIfPresent()
        return value
    }
}

extension CreateWorkforceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateWorkforceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateWorkforceOutput()
        value.workforceArn = try reader["WorkforceArn"].readIfPresent() ?? ""
        return value
    }
}

extension CreateWorkteamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateWorkteamOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateWorkteamOutput()
        value.workteamArn = try reader["WorkteamArn"].readIfPresent()
        return value
    }
}

extension DeleteActionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteActionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteActionOutput()
        value.actionArn = try reader["ActionArn"].readIfPresent()
        return value
    }
}

extension DeleteAlgorithmOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAlgorithmOutput {
        return DeleteAlgorithmOutput()
    }
}

extension DeleteAppOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAppOutput {
        return DeleteAppOutput()
    }
}

extension DeleteAppImageConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAppImageConfigOutput {
        return DeleteAppImageConfigOutput()
    }
}

extension DeleteArtifactOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteArtifactOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteArtifactOutput()
        value.artifactArn = try reader["ArtifactArn"].readIfPresent()
        return value
    }
}

extension DeleteAssociationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteAssociationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteAssociationOutput()
        value.destinationArn = try reader["DestinationArn"].readIfPresent()
        value.sourceArn = try reader["SourceArn"].readIfPresent()
        return value
    }
}

extension DeleteClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteClusterOutput()
        value.clusterArn = try reader["ClusterArn"].readIfPresent() ?? ""
        return value
    }
}

extension DeleteCodeRepositoryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCodeRepositoryOutput {
        return DeleteCodeRepositoryOutput()
    }
}

extension DeleteCompilationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteCompilationJobOutput {
        return DeleteCompilationJobOutput()
    }
}

extension DeleteContextOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteContextOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteContextOutput()
        value.contextArn = try reader["ContextArn"].readIfPresent()
        return value
    }
}

extension DeleteDataQualityJobDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDataQualityJobDefinitionOutput {
        return DeleteDataQualityJobDefinitionOutput()
    }
}

extension DeleteDeviceFleetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDeviceFleetOutput {
        return DeleteDeviceFleetOutput()
    }
}

extension DeleteDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDomainOutput {
        return DeleteDomainOutput()
    }
}

extension DeleteEdgeDeploymentPlanOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEdgeDeploymentPlanOutput {
        return DeleteEdgeDeploymentPlanOutput()
    }
}

extension DeleteEdgeDeploymentStageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEdgeDeploymentStageOutput {
        return DeleteEdgeDeploymentStageOutput()
    }
}

extension DeleteEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEndpointOutput {
        return DeleteEndpointOutput()
    }
}

extension DeleteEndpointConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEndpointConfigOutput {
        return DeleteEndpointConfigOutput()
    }
}

extension DeleteExperimentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteExperimentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteExperimentOutput()
        value.experimentArn = try reader["ExperimentArn"].readIfPresent()
        return value
    }
}

extension DeleteFeatureGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteFeatureGroupOutput {
        return DeleteFeatureGroupOutput()
    }
}

extension DeleteFlowDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteFlowDefinitionOutput {
        return DeleteFlowDefinitionOutput()
    }
}

extension DeleteHubOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteHubOutput {
        return DeleteHubOutput()
    }
}

extension DeleteHubContentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteHubContentOutput {
        return DeleteHubContentOutput()
    }
}

extension DeleteHubContentReferenceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteHubContentReferenceOutput {
        return DeleteHubContentReferenceOutput()
    }
}

extension DeleteHumanTaskUiOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteHumanTaskUiOutput {
        return DeleteHumanTaskUiOutput()
    }
}

extension DeleteHyperParameterTuningJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteHyperParameterTuningJobOutput {
        return DeleteHyperParameterTuningJobOutput()
    }
}

extension DeleteImageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteImageOutput {
        return DeleteImageOutput()
    }
}

extension DeleteImageVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteImageVersionOutput {
        return DeleteImageVersionOutput()
    }
}

extension DeleteInferenceComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteInferenceComponentOutput {
        return DeleteInferenceComponentOutput()
    }
}

extension DeleteInferenceExperimentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteInferenceExperimentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteInferenceExperimentOutput()
        value.inferenceExperimentArn = try reader["InferenceExperimentArn"].readIfPresent() ?? ""
        return value
    }
}

extension DeleteMlflowTrackingServerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteMlflowTrackingServerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteMlflowTrackingServerOutput()
        value.trackingServerArn = try reader["TrackingServerArn"].readIfPresent()
        return value
    }
}

extension DeleteModelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteModelOutput {
        return DeleteModelOutput()
    }
}

extension DeleteModelBiasJobDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteModelBiasJobDefinitionOutput {
        return DeleteModelBiasJobDefinitionOutput()
    }
}

extension DeleteModelCardOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteModelCardOutput {
        return DeleteModelCardOutput()
    }
}

extension DeleteModelExplainabilityJobDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteModelExplainabilityJobDefinitionOutput {
        return DeleteModelExplainabilityJobDefinitionOutput()
    }
}

extension DeleteModelPackageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteModelPackageOutput {
        return DeleteModelPackageOutput()
    }
}

extension DeleteModelPackageGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteModelPackageGroupOutput {
        return DeleteModelPackageGroupOutput()
    }
}

extension DeleteModelPackageGroupPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteModelPackageGroupPolicyOutput {
        return DeleteModelPackageGroupPolicyOutput()
    }
}

extension DeleteModelQualityJobDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteModelQualityJobDefinitionOutput {
        return DeleteModelQualityJobDefinitionOutput()
    }
}

extension DeleteMonitoringScheduleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteMonitoringScheduleOutput {
        return DeleteMonitoringScheduleOutput()
    }
}

extension DeleteNotebookInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteNotebookInstanceOutput {
        return DeleteNotebookInstanceOutput()
    }
}

extension DeleteNotebookInstanceLifecycleConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteNotebookInstanceLifecycleConfigOutput {
        return DeleteNotebookInstanceLifecycleConfigOutput()
    }
}

extension DeleteOptimizationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteOptimizationJobOutput {
        return DeleteOptimizationJobOutput()
    }
}

extension DeletePipelineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeletePipelineOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeletePipelineOutput()
        value.pipelineArn = try reader["PipelineArn"].readIfPresent()
        return value
    }
}

extension DeleteProjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteProjectOutput {
        return DeleteProjectOutput()
    }
}

extension DeleteSpaceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteSpaceOutput {
        return DeleteSpaceOutput()
    }
}

extension DeleteStudioLifecycleConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteStudioLifecycleConfigOutput {
        return DeleteStudioLifecycleConfigOutput()
    }
}

extension DeleteTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTagsOutput {
        return DeleteTagsOutput()
    }
}

extension DeleteTrialOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTrialOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteTrialOutput()
        value.trialArn = try reader["TrialArn"].readIfPresent()
        return value
    }
}

extension DeleteTrialComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTrialComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteTrialComponentOutput()
        value.trialComponentArn = try reader["TrialComponentArn"].readIfPresent()
        return value
    }
}

extension DeleteUserProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteUserProfileOutput {
        return DeleteUserProfileOutput()
    }
}

extension DeleteWorkforceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteWorkforceOutput {
        return DeleteWorkforceOutput()
    }
}

extension DeleteWorkteamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteWorkteamOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DeleteWorkteamOutput()
        value.success = try reader["Success"].readIfPresent() ?? false
        return value
    }
}

extension DeregisterDevicesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeregisterDevicesOutput {
        return DeregisterDevicesOutput()
    }
}

extension DescribeActionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeActionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeActionOutput()
        value.actionArn = try reader["ActionArn"].readIfPresent()
        value.actionName = try reader["ActionName"].readIfPresent()
        value.actionType = try reader["ActionType"].readIfPresent()
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lineageGroupArn = try reader["LineageGroupArn"].readIfPresent()
        value.metadataProperties = try reader["MetadataProperties"].readIfPresent(with: SageMakerClientTypes.MetadataProperties.read(from:))
        value.properties = try reader["Properties"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.source = try reader["Source"].readIfPresent(with: SageMakerClientTypes.ActionSource.read(from:))
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension DescribeAlgorithmOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAlgorithmOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAlgorithmOutput()
        value.algorithmArn = try reader["AlgorithmArn"].readIfPresent() ?? ""
        value.algorithmDescription = try reader["AlgorithmDescription"].readIfPresent()
        value.algorithmName = try reader["AlgorithmName"].readIfPresent() ?? ""
        value.algorithmStatus = try reader["AlgorithmStatus"].readIfPresent() ?? .sdkUnknown("")
        value.algorithmStatusDetails = try reader["AlgorithmStatusDetails"].readIfPresent(with: SageMakerClientTypes.AlgorithmStatusDetails.read(from:))
        value.certifyForMarketplace = try reader["CertifyForMarketplace"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.inferenceSpecification = try reader["InferenceSpecification"].readIfPresent(with: SageMakerClientTypes.InferenceSpecification.read(from:))
        value.productId = try reader["ProductId"].readIfPresent()
        value.trainingSpecification = try reader["TrainingSpecification"].readIfPresent(with: SageMakerClientTypes.TrainingSpecification.read(from:))
        value.validationSpecification = try reader["ValidationSpecification"].readIfPresent(with: SageMakerClientTypes.AlgorithmValidationSpecification.read(from:))
        return value
    }
}

extension DescribeAppOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAppOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAppOutput()
        value.appArn = try reader["AppArn"].readIfPresent()
        value.appName = try reader["AppName"].readIfPresent()
        value.appType = try reader["AppType"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.domainId = try reader["DomainId"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.lastHealthCheckTimestamp = try reader["LastHealthCheckTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUserActivityTimestamp = try reader["LastUserActivityTimestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.resourceSpec = try reader["ResourceSpec"].readIfPresent(with: SageMakerClientTypes.ResourceSpec.read(from:))
        value.spaceName = try reader["SpaceName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.userProfileName = try reader["UserProfileName"].readIfPresent()
        return value
    }
}

extension DescribeAppImageConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAppImageConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAppImageConfigOutput()
        value.appImageConfigArn = try reader["AppImageConfigArn"].readIfPresent()
        value.appImageConfigName = try reader["AppImageConfigName"].readIfPresent()
        value.codeEditorAppImageConfig = try reader["CodeEditorAppImageConfig"].readIfPresent(with: SageMakerClientTypes.CodeEditorAppImageConfig.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.jupyterLabAppImageConfig = try reader["JupyterLabAppImageConfig"].readIfPresent(with: SageMakerClientTypes.JupyterLabAppImageConfig.read(from:))
        value.kernelGatewayImageConfig = try reader["KernelGatewayImageConfig"].readIfPresent(with: SageMakerClientTypes.KernelGatewayImageConfig.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DescribeArtifactOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeArtifactOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeArtifactOutput()
        value.artifactArn = try reader["ArtifactArn"].readIfPresent()
        value.artifactName = try reader["ArtifactName"].readIfPresent()
        value.artifactType = try reader["ArtifactType"].readIfPresent()
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lineageGroupArn = try reader["LineageGroupArn"].readIfPresent()
        value.metadataProperties = try reader["MetadataProperties"].readIfPresent(with: SageMakerClientTypes.MetadataProperties.read(from:))
        value.properties = try reader["Properties"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.source = try reader["Source"].readIfPresent(with: SageMakerClientTypes.ArtifactSource.read(from:))
        return value
    }
}

extension DescribeAutoMLJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAutoMLJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAutoMLJobOutput()
        value.autoMLJobArn = try reader["AutoMLJobArn"].readIfPresent() ?? ""
        value.autoMLJobArtifacts = try reader["AutoMLJobArtifacts"].readIfPresent(with: SageMakerClientTypes.AutoMLJobArtifacts.read(from:))
        value.autoMLJobConfig = try reader["AutoMLJobConfig"].readIfPresent(with: SageMakerClientTypes.AutoMLJobConfig.read(from:))
        value.autoMLJobName = try reader["AutoMLJobName"].readIfPresent() ?? ""
        value.autoMLJobObjective = try reader["AutoMLJobObjective"].readIfPresent(with: SageMakerClientTypes.AutoMLJobObjective.read(from:))
        value.autoMLJobSecondaryStatus = try reader["AutoMLJobSecondaryStatus"].readIfPresent() ?? .sdkUnknown("")
        value.autoMLJobStatus = try reader["AutoMLJobStatus"].readIfPresent() ?? .sdkUnknown("")
        value.bestCandidate = try reader["BestCandidate"].readIfPresent(with: SageMakerClientTypes.AutoMLCandidate.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.generateCandidateDefinitionsOnly = try reader["GenerateCandidateDefinitionsOnly"].readIfPresent()
        value.inputDataConfig = try reader["InputDataConfig"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AutoMLChannel.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.modelDeployConfig = try reader["ModelDeployConfig"].readIfPresent(with: SageMakerClientTypes.ModelDeployConfig.read(from:))
        value.modelDeployResult = try reader["ModelDeployResult"].readIfPresent(with: SageMakerClientTypes.ModelDeployResult.read(from:))
        value.outputDataConfig = try reader["OutputDataConfig"].readIfPresent(with: SageMakerClientTypes.AutoMLOutputDataConfig.read(from:))
        value.partialFailureReasons = try reader["PartialFailureReasons"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AutoMLPartialFailureReason.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.problemType = try reader["ProblemType"].readIfPresent()
        value.resolvedAttributes = try reader["ResolvedAttributes"].readIfPresent(with: SageMakerClientTypes.ResolvedAttributes.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent() ?? ""
        return value
    }
}

extension DescribeAutoMLJobV2Output {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeAutoMLJobV2Output {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeAutoMLJobV2Output()
        value.autoMLComputeConfig = try reader["AutoMLComputeConfig"].readIfPresent(with: SageMakerClientTypes.AutoMLComputeConfig.read(from:))
        value.autoMLJobArn = try reader["AutoMLJobArn"].readIfPresent() ?? ""
        value.autoMLJobArtifacts = try reader["AutoMLJobArtifacts"].readIfPresent(with: SageMakerClientTypes.AutoMLJobArtifacts.read(from:))
        value.autoMLJobInputDataConfig = try reader["AutoMLJobInputDataConfig"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AutoMLJobChannel.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.autoMLJobName = try reader["AutoMLJobName"].readIfPresent() ?? ""
        value.autoMLJobObjective = try reader["AutoMLJobObjective"].readIfPresent(with: SageMakerClientTypes.AutoMLJobObjective.read(from:))
        value.autoMLJobSecondaryStatus = try reader["AutoMLJobSecondaryStatus"].readIfPresent() ?? .sdkUnknown("")
        value.autoMLJobStatus = try reader["AutoMLJobStatus"].readIfPresent() ?? .sdkUnknown("")
        value.autoMLProblemTypeConfig = try reader["AutoMLProblemTypeConfig"].readIfPresent(with: SageMakerClientTypes.AutoMLProblemTypeConfig.read(from:))
        value.autoMLProblemTypeConfigName = try reader["AutoMLProblemTypeConfigName"].readIfPresent()
        value.bestCandidate = try reader["BestCandidate"].readIfPresent(with: SageMakerClientTypes.AutoMLCandidate.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.dataSplitConfig = try reader["DataSplitConfig"].readIfPresent(with: SageMakerClientTypes.AutoMLDataSplitConfig.read(from:))
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.modelDeployConfig = try reader["ModelDeployConfig"].readIfPresent(with: SageMakerClientTypes.ModelDeployConfig.read(from:))
        value.modelDeployResult = try reader["ModelDeployResult"].readIfPresent(with: SageMakerClientTypes.ModelDeployResult.read(from:))
        value.outputDataConfig = try reader["OutputDataConfig"].readIfPresent(with: SageMakerClientTypes.AutoMLOutputDataConfig.read(from:))
        value.partialFailureReasons = try reader["PartialFailureReasons"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AutoMLPartialFailureReason.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.resolvedAttributes = try reader["ResolvedAttributes"].readIfPresent(with: SageMakerClientTypes.AutoMLResolvedAttributes.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent() ?? ""
        value.securityConfig = try reader["SecurityConfig"].readIfPresent(with: SageMakerClientTypes.AutoMLSecurityConfig.read(from:))
        return value
    }
}

extension DescribeClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeClusterOutput()
        value.clusterArn = try reader["ClusterArn"].readIfPresent() ?? ""
        value.clusterName = try reader["ClusterName"].readIfPresent()
        value.clusterStatus = try reader["ClusterStatus"].readIfPresent() ?? .sdkUnknown("")
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.failureMessage = try reader["FailureMessage"].readIfPresent()
        value.instanceGroups = try reader["InstanceGroups"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ClusterInstanceGroupDetails.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nodeRecovery = try reader["NodeRecovery"].readIfPresent()
        value.orchestrator = try reader["Orchestrator"].readIfPresent(with: SageMakerClientTypes.ClusterOrchestrator.read(from:))
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: SageMakerClientTypes.VpcConfig.read(from:))
        return value
    }
}

extension DescribeClusterNodeOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeClusterNodeOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeClusterNodeOutput()
        value.nodeDetails = try reader["NodeDetails"].readIfPresent(with: SageMakerClientTypes.ClusterNodeDetails.read(from:))
        return value
    }
}

extension DescribeCodeRepositoryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCodeRepositoryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeCodeRepositoryOutput()
        value.codeRepositoryArn = try reader["CodeRepositoryArn"].readIfPresent() ?? ""
        value.codeRepositoryName = try reader["CodeRepositoryName"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.gitConfig = try reader["GitConfig"].readIfPresent(with: SageMakerClientTypes.GitConfig.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension DescribeCompilationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeCompilationJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeCompilationJobOutput()
        value.compilationEndTime = try reader["CompilationEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.compilationJobArn = try reader["CompilationJobArn"].readIfPresent() ?? ""
        value.compilationJobName = try reader["CompilationJobName"].readIfPresent() ?? ""
        value.compilationJobStatus = try reader["CompilationJobStatus"].readIfPresent() ?? .sdkUnknown("")
        value.compilationStartTime = try reader["CompilationStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.derivedInformation = try reader["DerivedInformation"].readIfPresent(with: SageMakerClientTypes.DerivedInformation.read(from:))
        value.failureReason = try reader["FailureReason"].readIfPresent() ?? ""
        value.inferenceImage = try reader["InferenceImage"].readIfPresent()
        value.inputConfig = try reader["InputConfig"].readIfPresent(with: SageMakerClientTypes.InputConfig.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.modelArtifacts = try reader["ModelArtifacts"].readIfPresent(with: SageMakerClientTypes.ModelArtifacts.read(from:))
        value.modelDigests = try reader["ModelDigests"].readIfPresent(with: SageMakerClientTypes.ModelDigests.read(from:))
        value.modelPackageVersionArn = try reader["ModelPackageVersionArn"].readIfPresent()
        value.outputConfig = try reader["OutputConfig"].readIfPresent(with: SageMakerClientTypes.OutputConfig.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent() ?? ""
        value.stoppingCondition = try reader["StoppingCondition"].readIfPresent(with: SageMakerClientTypes.StoppingCondition.read(from:))
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: SageMakerClientTypes.NeoVpcConfig.read(from:))
        return value
    }
}

extension DescribeContextOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeContextOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeContextOutput()
        value.contextArn = try reader["ContextArn"].readIfPresent()
        value.contextName = try reader["ContextName"].readIfPresent()
        value.contextType = try reader["ContextType"].readIfPresent()
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lineageGroupArn = try reader["LineageGroupArn"].readIfPresent()
        value.properties = try reader["Properties"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.source = try reader["Source"].readIfPresent(with: SageMakerClientTypes.ContextSource.read(from:))
        return value
    }
}

extension DescribeDataQualityJobDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDataQualityJobDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDataQualityJobDefinitionOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.dataQualityAppSpecification = try reader["DataQualityAppSpecification"].readIfPresent(with: SageMakerClientTypes.DataQualityAppSpecification.read(from:))
        value.dataQualityBaselineConfig = try reader["DataQualityBaselineConfig"].readIfPresent(with: SageMakerClientTypes.DataQualityBaselineConfig.read(from:))
        value.dataQualityJobInput = try reader["DataQualityJobInput"].readIfPresent(with: SageMakerClientTypes.DataQualityJobInput.read(from:))
        value.dataQualityJobOutputConfig = try reader["DataQualityJobOutputConfig"].readIfPresent(with: SageMakerClientTypes.MonitoringOutputConfig.read(from:))
        value.jobDefinitionArn = try reader["JobDefinitionArn"].readIfPresent() ?? ""
        value.jobDefinitionName = try reader["JobDefinitionName"].readIfPresent() ?? ""
        value.jobResources = try reader["JobResources"].readIfPresent(with: SageMakerClientTypes.MonitoringResources.read(from:))
        value.networkConfig = try reader["NetworkConfig"].readIfPresent(with: SageMakerClientTypes.MonitoringNetworkConfig.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent() ?? ""
        value.stoppingCondition = try reader["StoppingCondition"].readIfPresent(with: SageMakerClientTypes.MonitoringStoppingCondition.read(from:))
        return value
    }
}

extension DescribeDeviceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDeviceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDeviceOutput()
        value.agentVersion = try reader["AgentVersion"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.deviceArn = try reader["DeviceArn"].readIfPresent()
        value.deviceFleetName = try reader["DeviceFleetName"].readIfPresent() ?? ""
        value.deviceName = try reader["DeviceName"].readIfPresent() ?? ""
        value.iotThingName = try reader["IotThingName"].readIfPresent()
        value.latestHeartbeat = try reader["LatestHeartbeat"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.maxModels = try reader["MaxModels"].readIfPresent()
        value.models = try reader["Models"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.EdgeModel.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.registrationTime = try reader["RegistrationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension DescribeDeviceFleetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDeviceFleetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDeviceFleetOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["Description"].readIfPresent()
        value.deviceFleetArn = try reader["DeviceFleetArn"].readIfPresent() ?? ""
        value.deviceFleetName = try reader["DeviceFleetName"].readIfPresent() ?? ""
        value.iotRoleAlias = try reader["IotRoleAlias"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.outputConfig = try reader["OutputConfig"].readIfPresent(with: SageMakerClientTypes.EdgeOutputConfig.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent()
        return value
    }
}

extension DescribeDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDomainOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDomainOutput()
        value.appNetworkAccessType = try reader["AppNetworkAccessType"].readIfPresent()
        value.appSecurityGroupManagement = try reader["AppSecurityGroupManagement"].readIfPresent()
        value.authMode = try reader["AuthMode"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.defaultSpaceSettings = try reader["DefaultSpaceSettings"].readIfPresent(with: SageMakerClientTypes.DefaultSpaceSettings.read(from:))
        value.defaultUserSettings = try reader["DefaultUserSettings"].readIfPresent(with: SageMakerClientTypes.UserSettings.read(from:))
        value.domainArn = try reader["DomainArn"].readIfPresent()
        value.domainId = try reader["DomainId"].readIfPresent()
        value.domainName = try reader["DomainName"].readIfPresent()
        value.domainSettings = try reader["DomainSettings"].readIfPresent(with: SageMakerClientTypes.DomainSettings.read(from:))
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.homeEfsFileSystemId = try reader["HomeEfsFileSystemId"].readIfPresent()
        value.homeEfsFileSystemKmsKeyId = try reader["HomeEfsFileSystemKmsKeyId"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.securityGroupIdForDomainBoundary = try reader["SecurityGroupIdForDomainBoundary"].readIfPresent()
        value.singleSignOnApplicationArn = try reader["SingleSignOnApplicationArn"].readIfPresent()
        value.singleSignOnManagedApplicationInstanceId = try reader["SingleSignOnManagedApplicationInstanceId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.subnetIds = try reader["SubnetIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.url = try reader["Url"].readIfPresent()
        value.vpcId = try reader["VpcId"].readIfPresent()
        return value
    }
}

extension DescribeEdgeDeploymentPlanOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEdgeDeploymentPlanOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEdgeDeploymentPlanOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.deviceFleetName = try reader["DeviceFleetName"].readIfPresent() ?? ""
        value.edgeDeploymentFailed = try reader["EdgeDeploymentFailed"].readIfPresent()
        value.edgeDeploymentPending = try reader["EdgeDeploymentPending"].readIfPresent()
        value.edgeDeploymentPlanArn = try reader["EdgeDeploymentPlanArn"].readIfPresent() ?? ""
        value.edgeDeploymentPlanName = try reader["EdgeDeploymentPlanName"].readIfPresent() ?? ""
        value.edgeDeploymentSuccess = try reader["EdgeDeploymentSuccess"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.modelConfigs = try reader["ModelConfigs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.EdgeDeploymentModelConfig.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.stages = try reader["Stages"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.DeploymentStageStatusSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension DescribeEdgePackagingJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEdgePackagingJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEdgePackagingJobOutput()
        value.compilationJobName = try reader["CompilationJobName"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.edgePackagingJobArn = try reader["EdgePackagingJobArn"].readIfPresent() ?? ""
        value.edgePackagingJobName = try reader["EdgePackagingJobName"].readIfPresent() ?? ""
        value.edgePackagingJobStatus = try reader["EdgePackagingJobStatus"].readIfPresent() ?? .sdkUnknown("")
        value.edgePackagingJobStatusMessage = try reader["EdgePackagingJobStatusMessage"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.modelArtifact = try reader["ModelArtifact"].readIfPresent()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.modelSignature = try reader["ModelSignature"].readIfPresent()
        value.modelVersion = try reader["ModelVersion"].readIfPresent()
        value.outputConfig = try reader["OutputConfig"].readIfPresent(with: SageMakerClientTypes.EdgeOutputConfig.read(from:))
        value.presetDeploymentOutput = try reader["PresetDeploymentOutput"].readIfPresent(with: SageMakerClientTypes.EdgePresetDeploymentOutput.read(from:))
        value.resourceKey = try reader["ResourceKey"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        return value
    }
}

extension DescribeEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEndpointOutput()
        value.asyncInferenceConfig = try reader["AsyncInferenceConfig"].readIfPresent(with: SageMakerClientTypes.AsyncInferenceConfig.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.dataCaptureConfig = try reader["DataCaptureConfig"].readIfPresent(with: SageMakerClientTypes.DataCaptureConfigSummary.read(from:))
        value.endpointArn = try reader["EndpointArn"].readIfPresent() ?? ""
        value.endpointConfigName = try reader["EndpointConfigName"].readIfPresent()
        value.endpointName = try reader["EndpointName"].readIfPresent() ?? ""
        value.endpointStatus = try reader["EndpointStatus"].readIfPresent() ?? .sdkUnknown("")
        value.explainerConfig = try reader["ExplainerConfig"].readIfPresent(with: SageMakerClientTypes.ExplainerConfig.read(from:))
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.lastDeploymentConfig = try reader["LastDeploymentConfig"].readIfPresent(with: SageMakerClientTypes.DeploymentConfig.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.pendingDeploymentSummary = try reader["PendingDeploymentSummary"].readIfPresent(with: SageMakerClientTypes.PendingDeploymentSummary.read(from:))
        value.productionVariants = try reader["ProductionVariants"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ProductionVariantSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.shadowProductionVariants = try reader["ShadowProductionVariants"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ProductionVariantSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeEndpointConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEndpointConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEndpointConfigOutput()
        value.asyncInferenceConfig = try reader["AsyncInferenceConfig"].readIfPresent(with: SageMakerClientTypes.AsyncInferenceConfig.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.dataCaptureConfig = try reader["DataCaptureConfig"].readIfPresent(with: SageMakerClientTypes.DataCaptureConfig.read(from:))
        value.enableNetworkIsolation = try reader["EnableNetworkIsolation"].readIfPresent()
        value.endpointConfigArn = try reader["EndpointConfigArn"].readIfPresent() ?? ""
        value.endpointConfigName = try reader["EndpointConfigName"].readIfPresent() ?? ""
        value.executionRoleArn = try reader["ExecutionRoleArn"].readIfPresent()
        value.explainerConfig = try reader["ExplainerConfig"].readIfPresent(with: SageMakerClientTypes.ExplainerConfig.read(from:))
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.productionVariants = try reader["ProductionVariants"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ProductionVariant.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.shadowProductionVariants = try reader["ShadowProductionVariants"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ProductionVariant.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: SageMakerClientTypes.VpcConfig.read(from:))
        return value
    }
}

extension DescribeExperimentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeExperimentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeExperimentOutput()
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.experimentArn = try reader["ExperimentArn"].readIfPresent()
        value.experimentName = try reader["ExperimentName"].readIfPresent()
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.source = try reader["Source"].readIfPresent(with: SageMakerClientTypes.ExperimentSource.read(from:))
        return value
    }
}

extension DescribeFeatureGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFeatureGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFeatureGroupOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["Description"].readIfPresent()
        value.eventTimeFeatureName = try reader["EventTimeFeatureName"].readIfPresent() ?? ""
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.featureDefinitions = try reader["FeatureDefinitions"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.FeatureDefinition.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.featureGroupArn = try reader["FeatureGroupArn"].readIfPresent() ?? ""
        value.featureGroupName = try reader["FeatureGroupName"].readIfPresent() ?? ""
        value.featureGroupStatus = try reader["FeatureGroupStatus"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdateStatus = try reader["LastUpdateStatus"].readIfPresent(with: SageMakerClientTypes.LastUpdateStatus.read(from:))
        value.nextToken = try reader["NextToken"].readIfPresent() ?? ""
        value.offlineStoreConfig = try reader["OfflineStoreConfig"].readIfPresent(with: SageMakerClientTypes.OfflineStoreConfig.read(from:))
        value.offlineStoreStatus = try reader["OfflineStoreStatus"].readIfPresent(with: SageMakerClientTypes.OfflineStoreStatus.read(from:))
        value.onlineStoreConfig = try reader["OnlineStoreConfig"].readIfPresent(with: SageMakerClientTypes.OnlineStoreConfig.read(from:))
        value.onlineStoreTotalSizeBytes = try reader["OnlineStoreTotalSizeBytes"].readIfPresent()
        value.recordIdentifierFeatureName = try reader["RecordIdentifierFeatureName"].readIfPresent() ?? ""
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.throughputConfig = try reader["ThroughputConfig"].readIfPresent(with: SageMakerClientTypes.ThroughputConfigDescription.read(from:))
        return value
    }
}

extension DescribeFeatureMetadataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFeatureMetadataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFeatureMetadataOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["Description"].readIfPresent()
        value.featureGroupArn = try reader["FeatureGroupArn"].readIfPresent() ?? ""
        value.featureGroupName = try reader["FeatureGroupName"].readIfPresent() ?? ""
        value.featureName = try reader["FeatureName"].readIfPresent() ?? ""
        value.featureType = try reader["FeatureType"].readIfPresent() ?? .sdkUnknown("")
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.FeatureParameter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeFlowDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFlowDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFlowDefinitionOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.flowDefinitionArn = try reader["FlowDefinitionArn"].readIfPresent() ?? ""
        value.flowDefinitionName = try reader["FlowDefinitionName"].readIfPresent() ?? ""
        value.flowDefinitionStatus = try reader["FlowDefinitionStatus"].readIfPresent() ?? .sdkUnknown("")
        value.humanLoopActivationConfig = try reader["HumanLoopActivationConfig"].readIfPresent(with: SageMakerClientTypes.HumanLoopActivationConfig.read(from:))
        value.humanLoopConfig = try reader["HumanLoopConfig"].readIfPresent(with: SageMakerClientTypes.HumanLoopConfig.read(from:))
        value.humanLoopRequestSource = try reader["HumanLoopRequestSource"].readIfPresent(with: SageMakerClientTypes.HumanLoopRequestSource.read(from:))
        value.outputConfig = try reader["OutputConfig"].readIfPresent(with: SageMakerClientTypes.FlowDefinitionOutputConfig.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent() ?? ""
        return value
    }
}

extension DescribeHubOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeHubOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeHubOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.hubArn = try reader["HubArn"].readIfPresent() ?? ""
        value.hubDescription = try reader["HubDescription"].readIfPresent()
        value.hubDisplayName = try reader["HubDisplayName"].readIfPresent()
        value.hubName = try reader["HubName"].readIfPresent() ?? ""
        value.hubSearchKeywords = try reader["HubSearchKeywords"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.hubStatus = try reader["HubStatus"].readIfPresent() ?? .sdkUnknown("")
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.s3StorageConfig = try reader["S3StorageConfig"].readIfPresent(with: SageMakerClientTypes.HubS3StorageConfig.read(from:))
        return value
    }
}

extension DescribeHubContentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeHubContentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeHubContentOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.documentSchemaVersion = try reader["DocumentSchemaVersion"].readIfPresent() ?? ""
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.hubArn = try reader["HubArn"].readIfPresent() ?? ""
        value.hubContentArn = try reader["HubContentArn"].readIfPresent() ?? ""
        value.hubContentDependencies = try reader["HubContentDependencies"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.HubContentDependency.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.hubContentDescription = try reader["HubContentDescription"].readIfPresent()
        value.hubContentDisplayName = try reader["HubContentDisplayName"].readIfPresent()
        value.hubContentDocument = try reader["HubContentDocument"].readIfPresent() ?? ""
        value.hubContentMarkdown = try reader["HubContentMarkdown"].readIfPresent()
        value.hubContentName = try reader["HubContentName"].readIfPresent() ?? ""
        value.hubContentSearchKeywords = try reader["HubContentSearchKeywords"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.hubContentStatus = try reader["HubContentStatus"].readIfPresent() ?? .sdkUnknown("")
        value.hubContentType = try reader["HubContentType"].readIfPresent() ?? .sdkUnknown("")
        value.hubContentVersion = try reader["HubContentVersion"].readIfPresent() ?? ""
        value.hubName = try reader["HubName"].readIfPresent() ?? ""
        value.referenceMinVersion = try reader["ReferenceMinVersion"].readIfPresent()
        value.sageMakerPublicHubContentArn = try reader["SageMakerPublicHubContentArn"].readIfPresent()
        value.supportStatus = try reader["SupportStatus"].readIfPresent()
        return value
    }
}

extension DescribeHumanTaskUiOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeHumanTaskUiOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeHumanTaskUiOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.humanTaskUiArn = try reader["HumanTaskUiArn"].readIfPresent() ?? ""
        value.humanTaskUiName = try reader["HumanTaskUiName"].readIfPresent() ?? ""
        value.humanTaskUiStatus = try reader["HumanTaskUiStatus"].readIfPresent()
        value.uiTemplate = try reader["UiTemplate"].readIfPresent(with: SageMakerClientTypes.UiTemplateInfo.read(from:))
        return value
    }
}

extension DescribeHyperParameterTuningJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeHyperParameterTuningJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeHyperParameterTuningJobOutput()
        value.autotune = try reader["Autotune"].readIfPresent(with: SageMakerClientTypes.Autotune.read(from:))
        value.bestTrainingJob = try reader["BestTrainingJob"].readIfPresent(with: SageMakerClientTypes.HyperParameterTrainingJobSummary.read(from:))
        value.consumedResources = try reader["ConsumedResources"].readIfPresent(with: SageMakerClientTypes.HyperParameterTuningJobConsumedResources.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.hyperParameterTuningEndTime = try reader["HyperParameterTuningEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.hyperParameterTuningJobArn = try reader["HyperParameterTuningJobArn"].readIfPresent() ?? ""
        value.hyperParameterTuningJobConfig = try reader["HyperParameterTuningJobConfig"].readIfPresent(with: SageMakerClientTypes.HyperParameterTuningJobConfig.read(from:))
        value.hyperParameterTuningJobName = try reader["HyperParameterTuningJobName"].readIfPresent() ?? ""
        value.hyperParameterTuningJobStatus = try reader["HyperParameterTuningJobStatus"].readIfPresent() ?? .sdkUnknown("")
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.objectiveStatusCounters = try reader["ObjectiveStatusCounters"].readIfPresent(with: SageMakerClientTypes.ObjectiveStatusCounters.read(from:))
        value.overallBestTrainingJob = try reader["OverallBestTrainingJob"].readIfPresent(with: SageMakerClientTypes.HyperParameterTrainingJobSummary.read(from:))
        value.trainingJobDefinition = try reader["TrainingJobDefinition"].readIfPresent(with: SageMakerClientTypes.HyperParameterTrainingJobDefinition.read(from:))
        value.trainingJobDefinitions = try reader["TrainingJobDefinitions"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.HyperParameterTrainingJobDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.trainingJobStatusCounters = try reader["TrainingJobStatusCounters"].readIfPresent(with: SageMakerClientTypes.TrainingJobStatusCounters.read(from:))
        value.tuningJobCompletionDetails = try reader["TuningJobCompletionDetails"].readIfPresent(with: SageMakerClientTypes.HyperParameterTuningJobCompletionDetails.read(from:))
        value.warmStartConfig = try reader["WarmStartConfig"].readIfPresent(with: SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig.read(from:))
        return value
    }
}

extension DescribeImageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeImageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeImageOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.imageArn = try reader["ImageArn"].readIfPresent()
        value.imageName = try reader["ImageName"].readIfPresent()
        value.imageStatus = try reader["ImageStatus"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.roleArn = try reader["RoleArn"].readIfPresent()
        return value
    }
}

extension DescribeImageVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeImageVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeImageVersionOutput()
        value.baseImage = try reader["BaseImage"].readIfPresent()
        value.containerImage = try reader["ContainerImage"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.horovod = try reader["Horovod"].readIfPresent()
        value.imageArn = try reader["ImageArn"].readIfPresent()
        value.imageVersionArn = try reader["ImageVersionArn"].readIfPresent()
        value.imageVersionStatus = try reader["ImageVersionStatus"].readIfPresent()
        value.jobType = try reader["JobType"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.mlFramework = try reader["MLFramework"].readIfPresent()
        value.processor = try reader["Processor"].readIfPresent()
        value.programmingLang = try reader["ProgrammingLang"].readIfPresent()
        value.releaseNotes = try reader["ReleaseNotes"].readIfPresent()
        value.vendorGuidance = try reader["VendorGuidance"].readIfPresent()
        value.version = try reader["Version"].readIfPresent()
        return value
    }
}

extension DescribeInferenceComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeInferenceComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeInferenceComponentOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.endpointArn = try reader["EndpointArn"].readIfPresent() ?? ""
        value.endpointName = try reader["EndpointName"].readIfPresent() ?? ""
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.inferenceComponentArn = try reader["InferenceComponentArn"].readIfPresent() ?? ""
        value.inferenceComponentName = try reader["InferenceComponentName"].readIfPresent() ?? ""
        value.inferenceComponentStatus = try reader["InferenceComponentStatus"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.runtimeConfig = try reader["RuntimeConfig"].readIfPresent(with: SageMakerClientTypes.InferenceComponentRuntimeConfigSummary.read(from:))
        value.specification = try reader["Specification"].readIfPresent(with: SageMakerClientTypes.InferenceComponentSpecificationSummary.read(from:))
        value.variantName = try reader["VariantName"].readIfPresent()
        return value
    }
}

extension DescribeInferenceExperimentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeInferenceExperimentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeInferenceExperimentOutput()
        value.arn = try reader["Arn"].readIfPresent() ?? ""
        value.completionTime = try reader["CompletionTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.dataStorageConfig = try reader["DataStorageConfig"].readIfPresent(with: SageMakerClientTypes.InferenceExperimentDataStorageConfig.read(from:))
        value.description = try reader["Description"].readIfPresent()
        value.endpointMetadata = try reader["EndpointMetadata"].readIfPresent(with: SageMakerClientTypes.EndpointMetadata.read(from:))
        value.kmsKey = try reader["KmsKey"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.modelVariants = try reader["ModelVariants"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ModelVariantConfigSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.schedule = try reader["Schedule"].readIfPresent(with: SageMakerClientTypes.InferenceExperimentSchedule.read(from:))
        value.shadowModeConfig = try reader["ShadowModeConfig"].readIfPresent(with: SageMakerClientTypes.ShadowModeConfig.read(from:))
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.statusReason = try reader["StatusReason"].readIfPresent()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension DescribeInferenceRecommendationsJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeInferenceRecommendationsJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeInferenceRecommendationsJobOutput()
        value.completionTime = try reader["CompletionTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.endpointPerformances = try reader["EndpointPerformances"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.EndpointPerformance.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.inferenceRecommendations = try reader["InferenceRecommendations"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.InferenceRecommendation.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inputConfig = try reader["InputConfig"].readIfPresent(with: SageMakerClientTypes.RecommendationJobInputConfig.read(from:))
        value.jobArn = try reader["JobArn"].readIfPresent() ?? ""
        value.jobDescription = try reader["JobDescription"].readIfPresent()
        value.jobName = try reader["JobName"].readIfPresent() ?? ""
        value.jobType = try reader["JobType"].readIfPresent() ?? .sdkUnknown("")
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.roleArn = try reader["RoleArn"].readIfPresent() ?? ""
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.stoppingConditions = try reader["StoppingConditions"].readIfPresent(with: SageMakerClientTypes.RecommendationJobStoppingConditions.read(from:))
        return value
    }
}

extension DescribeLabelingJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeLabelingJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeLabelingJobOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.humanTaskConfig = try reader["HumanTaskConfig"].readIfPresent(with: SageMakerClientTypes.HumanTaskConfig.read(from:))
        value.inputConfig = try reader["InputConfig"].readIfPresent(with: SageMakerClientTypes.LabelingJobInputConfig.read(from:))
        value.jobReferenceCode = try reader["JobReferenceCode"].readIfPresent() ?? ""
        value.labelAttributeName = try reader["LabelAttributeName"].readIfPresent()
        value.labelCategoryConfigS3Uri = try reader["LabelCategoryConfigS3Uri"].readIfPresent()
        value.labelCounters = try reader["LabelCounters"].readIfPresent(with: SageMakerClientTypes.LabelCounters.read(from:))
        value.labelingJobAlgorithmsConfig = try reader["LabelingJobAlgorithmsConfig"].readIfPresent(with: SageMakerClientTypes.LabelingJobAlgorithmsConfig.read(from:))
        value.labelingJobArn = try reader["LabelingJobArn"].readIfPresent() ?? ""
        value.labelingJobName = try reader["LabelingJobName"].readIfPresent() ?? ""
        value.labelingJobOutput = try reader["LabelingJobOutput"].readIfPresent(with: SageMakerClientTypes.LabelingJobOutput.read(from:))
        value.labelingJobStatus = try reader["LabelingJobStatus"].readIfPresent() ?? .sdkUnknown("")
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.outputConfig = try reader["OutputConfig"].readIfPresent(with: SageMakerClientTypes.LabelingJobOutputConfig.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent() ?? ""
        value.stoppingConditions = try reader["StoppingConditions"].readIfPresent(with: SageMakerClientTypes.LabelingJobStoppingConditions.read(from:))
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeLineageGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeLineageGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeLineageGroupOutput()
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lineageGroupArn = try reader["LineageGroupArn"].readIfPresent()
        value.lineageGroupName = try reader["LineageGroupName"].readIfPresent()
        return value
    }
}

extension DescribeMlflowTrackingServerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeMlflowTrackingServerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeMlflowTrackingServerOutput()
        value.artifactStoreUri = try reader["ArtifactStoreUri"].readIfPresent()
        value.automaticModelRegistration = try reader["AutomaticModelRegistration"].readIfPresent()
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.isActive = try reader["IsActive"].readIfPresent()
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.mlflowVersion = try reader["MlflowVersion"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.trackingServerArn = try reader["TrackingServerArn"].readIfPresent()
        value.trackingServerName = try reader["TrackingServerName"].readIfPresent()
        value.trackingServerSize = try reader["TrackingServerSize"].readIfPresent()
        value.trackingServerStatus = try reader["TrackingServerStatus"].readIfPresent()
        value.trackingServerUrl = try reader["TrackingServerUrl"].readIfPresent()
        value.weeklyMaintenanceWindowStart = try reader["WeeklyMaintenanceWindowStart"].readIfPresent()
        return value
    }
}

extension DescribeModelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeModelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeModelOutput()
        value.containers = try reader["Containers"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ContainerDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.deploymentRecommendation = try reader["DeploymentRecommendation"].readIfPresent(with: SageMakerClientTypes.DeploymentRecommendation.read(from:))
        value.enableNetworkIsolation = try reader["EnableNetworkIsolation"].readIfPresent()
        value.executionRoleArn = try reader["ExecutionRoleArn"].readIfPresent()
        value.inferenceExecutionConfig = try reader["InferenceExecutionConfig"].readIfPresent(with: SageMakerClientTypes.InferenceExecutionConfig.read(from:))
        value.modelArn = try reader["ModelArn"].readIfPresent() ?? ""
        value.modelName = try reader["ModelName"].readIfPresent() ?? ""
        value.primaryContainer = try reader["PrimaryContainer"].readIfPresent(with: SageMakerClientTypes.ContainerDefinition.read(from:))
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: SageMakerClientTypes.VpcConfig.read(from:))
        return value
    }
}

extension DescribeModelBiasJobDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeModelBiasJobDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeModelBiasJobDefinitionOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.jobDefinitionArn = try reader["JobDefinitionArn"].readIfPresent() ?? ""
        value.jobDefinitionName = try reader["JobDefinitionName"].readIfPresent() ?? ""
        value.jobResources = try reader["JobResources"].readIfPresent(with: SageMakerClientTypes.MonitoringResources.read(from:))
        value.modelBiasAppSpecification = try reader["ModelBiasAppSpecification"].readIfPresent(with: SageMakerClientTypes.ModelBiasAppSpecification.read(from:))
        value.modelBiasBaselineConfig = try reader["ModelBiasBaselineConfig"].readIfPresent(with: SageMakerClientTypes.ModelBiasBaselineConfig.read(from:))
        value.modelBiasJobInput = try reader["ModelBiasJobInput"].readIfPresent(with: SageMakerClientTypes.ModelBiasJobInput.read(from:))
        value.modelBiasJobOutputConfig = try reader["ModelBiasJobOutputConfig"].readIfPresent(with: SageMakerClientTypes.MonitoringOutputConfig.read(from:))
        value.networkConfig = try reader["NetworkConfig"].readIfPresent(with: SageMakerClientTypes.MonitoringNetworkConfig.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent() ?? ""
        value.stoppingCondition = try reader["StoppingCondition"].readIfPresent(with: SageMakerClientTypes.MonitoringStoppingCondition.read(from:))
        return value
    }
}

extension DescribeModelCardOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeModelCardOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeModelCardOutput()
        value.content = try reader["Content"].readIfPresent() ?? ""
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.modelCardArn = try reader["ModelCardArn"].readIfPresent() ?? ""
        value.modelCardName = try reader["ModelCardName"].readIfPresent() ?? ""
        value.modelCardProcessingStatus = try reader["ModelCardProcessingStatus"].readIfPresent()
        value.modelCardStatus = try reader["ModelCardStatus"].readIfPresent() ?? .sdkUnknown("")
        value.modelCardVersion = try reader["ModelCardVersion"].readIfPresent() ?? 0
        value.securityConfig = try reader["SecurityConfig"].readIfPresent(with: SageMakerClientTypes.ModelCardSecurityConfig.read(from:))
        return value
    }
}

extension DescribeModelCardExportJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeModelCardExportJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeModelCardExportJobOutput()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.exportArtifacts = try reader["ExportArtifacts"].readIfPresent(with: SageMakerClientTypes.ModelCardExportArtifacts.read(from:))
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.lastModifiedAt = try reader["LastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.modelCardExportJobArn = try reader["ModelCardExportJobArn"].readIfPresent() ?? ""
        value.modelCardExportJobName = try reader["ModelCardExportJobName"].readIfPresent() ?? ""
        value.modelCardName = try reader["ModelCardName"].readIfPresent() ?? ""
        value.modelCardVersion = try reader["ModelCardVersion"].readIfPresent() ?? 0
        value.outputConfig = try reader["OutputConfig"].readIfPresent(with: SageMakerClientTypes.ModelCardExportOutputConfig.read(from:))
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension DescribeModelExplainabilityJobDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeModelExplainabilityJobDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeModelExplainabilityJobDefinitionOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.jobDefinitionArn = try reader["JobDefinitionArn"].readIfPresent() ?? ""
        value.jobDefinitionName = try reader["JobDefinitionName"].readIfPresent() ?? ""
        value.jobResources = try reader["JobResources"].readIfPresent(with: SageMakerClientTypes.MonitoringResources.read(from:))
        value.modelExplainabilityAppSpecification = try reader["ModelExplainabilityAppSpecification"].readIfPresent(with: SageMakerClientTypes.ModelExplainabilityAppSpecification.read(from:))
        value.modelExplainabilityBaselineConfig = try reader["ModelExplainabilityBaselineConfig"].readIfPresent(with: SageMakerClientTypes.ModelExplainabilityBaselineConfig.read(from:))
        value.modelExplainabilityJobInput = try reader["ModelExplainabilityJobInput"].readIfPresent(with: SageMakerClientTypes.ModelExplainabilityJobInput.read(from:))
        value.modelExplainabilityJobOutputConfig = try reader["ModelExplainabilityJobOutputConfig"].readIfPresent(with: SageMakerClientTypes.MonitoringOutputConfig.read(from:))
        value.networkConfig = try reader["NetworkConfig"].readIfPresent(with: SageMakerClientTypes.MonitoringNetworkConfig.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent() ?? ""
        value.stoppingCondition = try reader["StoppingCondition"].readIfPresent(with: SageMakerClientTypes.MonitoringStoppingCondition.read(from:))
        return value
    }
}

extension DescribeModelPackageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeModelPackageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeModelPackageOutput()
        value.additionalInferenceSpecifications = try reader["AdditionalInferenceSpecifications"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AdditionalInferenceSpecificationDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.approvalDescription = try reader["ApprovalDescription"].readIfPresent()
        value.certifyForMarketplace = try reader["CertifyForMarketplace"].readIfPresent()
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.customerMetadataProperties = try reader["CustomerMetadataProperties"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.domain = try reader["Domain"].readIfPresent()
        value.driftCheckBaselines = try reader["DriftCheckBaselines"].readIfPresent(with: SageMakerClientTypes.DriftCheckBaselines.read(from:))
        value.inferenceSpecification = try reader["InferenceSpecification"].readIfPresent(with: SageMakerClientTypes.InferenceSpecification.read(from:))
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.metadataProperties = try reader["MetadataProperties"].readIfPresent(with: SageMakerClientTypes.MetadataProperties.read(from:))
        value.modelApprovalStatus = try reader["ModelApprovalStatus"].readIfPresent()
        value.modelCard = try reader["ModelCard"].readIfPresent(with: SageMakerClientTypes.ModelPackageModelCard.read(from:))
        value.modelMetrics = try reader["ModelMetrics"].readIfPresent(with: SageMakerClientTypes.ModelMetrics.read(from:))
        value.modelPackageArn = try reader["ModelPackageArn"].readIfPresent() ?? ""
        value.modelPackageDescription = try reader["ModelPackageDescription"].readIfPresent()
        value.modelPackageGroupName = try reader["ModelPackageGroupName"].readIfPresent()
        value.modelPackageName = try reader["ModelPackageName"].readIfPresent() ?? ""
        value.modelPackageStatus = try reader["ModelPackageStatus"].readIfPresent() ?? .sdkUnknown("")
        value.modelPackageStatusDetails = try reader["ModelPackageStatusDetails"].readIfPresent(with: SageMakerClientTypes.ModelPackageStatusDetails.read(from:))
        value.modelPackageVersion = try reader["ModelPackageVersion"].readIfPresent()
        value.samplePayloadUrl = try reader["SamplePayloadUrl"].readIfPresent()
        value.securityConfig = try reader["SecurityConfig"].readIfPresent(with: SageMakerClientTypes.ModelPackageSecurityConfig.read(from:))
        value.skipModelValidation = try reader["SkipModelValidation"].readIfPresent()
        value.sourceAlgorithmSpecification = try reader["SourceAlgorithmSpecification"].readIfPresent(with: SageMakerClientTypes.SourceAlgorithmSpecification.read(from:))
        value.sourceUri = try reader["SourceUri"].readIfPresent()
        value.task = try reader["Task"].readIfPresent()
        value.validationSpecification = try reader["ValidationSpecification"].readIfPresent(with: SageMakerClientTypes.ModelPackageValidationSpecification.read(from:))
        return value
    }
}

extension DescribeModelPackageGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeModelPackageGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeModelPackageGroupOutput()
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.modelPackageGroupArn = try reader["ModelPackageGroupArn"].readIfPresent() ?? ""
        value.modelPackageGroupDescription = try reader["ModelPackageGroupDescription"].readIfPresent()
        value.modelPackageGroupName = try reader["ModelPackageGroupName"].readIfPresent() ?? ""
        value.modelPackageGroupStatus = try reader["ModelPackageGroupStatus"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension DescribeModelQualityJobDefinitionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeModelQualityJobDefinitionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeModelQualityJobDefinitionOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.jobDefinitionArn = try reader["JobDefinitionArn"].readIfPresent() ?? ""
        value.jobDefinitionName = try reader["JobDefinitionName"].readIfPresent() ?? ""
        value.jobResources = try reader["JobResources"].readIfPresent(with: SageMakerClientTypes.MonitoringResources.read(from:))
        value.modelQualityAppSpecification = try reader["ModelQualityAppSpecification"].readIfPresent(with: SageMakerClientTypes.ModelQualityAppSpecification.read(from:))
        value.modelQualityBaselineConfig = try reader["ModelQualityBaselineConfig"].readIfPresent(with: SageMakerClientTypes.ModelQualityBaselineConfig.read(from:))
        value.modelQualityJobInput = try reader["ModelQualityJobInput"].readIfPresent(with: SageMakerClientTypes.ModelQualityJobInput.read(from:))
        value.modelQualityJobOutputConfig = try reader["ModelQualityJobOutputConfig"].readIfPresent(with: SageMakerClientTypes.MonitoringOutputConfig.read(from:))
        value.networkConfig = try reader["NetworkConfig"].readIfPresent(with: SageMakerClientTypes.MonitoringNetworkConfig.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent() ?? ""
        value.stoppingCondition = try reader["StoppingCondition"].readIfPresent(with: SageMakerClientTypes.MonitoringStoppingCondition.read(from:))
        return value
    }
}

extension DescribeMonitoringScheduleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeMonitoringScheduleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeMonitoringScheduleOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.endpointName = try reader["EndpointName"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastMonitoringExecutionSummary = try reader["LastMonitoringExecutionSummary"].readIfPresent(with: SageMakerClientTypes.MonitoringExecutionSummary.read(from:))
        value.monitoringScheduleArn = try reader["MonitoringScheduleArn"].readIfPresent() ?? ""
        value.monitoringScheduleConfig = try reader["MonitoringScheduleConfig"].readIfPresent(with: SageMakerClientTypes.MonitoringScheduleConfig.read(from:))
        value.monitoringScheduleName = try reader["MonitoringScheduleName"].readIfPresent() ?? ""
        value.monitoringScheduleStatus = try reader["MonitoringScheduleStatus"].readIfPresent() ?? .sdkUnknown("")
        value.monitoringType = try reader["MonitoringType"].readIfPresent()
        return value
    }
}

extension DescribeNotebookInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeNotebookInstanceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeNotebookInstanceOutput()
        value.acceleratorTypes = try reader["AcceleratorTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SageMakerClientTypes.NotebookInstanceAcceleratorType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.additionalCodeRepositories = try reader["AdditionalCodeRepositories"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.defaultCodeRepository = try reader["DefaultCodeRepository"].readIfPresent()
        value.directInternetAccess = try reader["DirectInternetAccess"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.instanceMetadataServiceConfiguration = try reader["InstanceMetadataServiceConfiguration"].readIfPresent(with: SageMakerClientTypes.InstanceMetadataServiceConfiguration.read(from:))
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.networkInterfaceId = try reader["NetworkInterfaceId"].readIfPresent()
        value.notebookInstanceArn = try reader["NotebookInstanceArn"].readIfPresent()
        value.notebookInstanceLifecycleConfigName = try reader["NotebookInstanceLifecycleConfigName"].readIfPresent()
        value.notebookInstanceName = try reader["NotebookInstanceName"].readIfPresent()
        value.notebookInstanceStatus = try reader["NotebookInstanceStatus"].readIfPresent()
        value.platformIdentifier = try reader["PlatformIdentifier"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.rootAccess = try reader["RootAccess"].readIfPresent()
        value.securityGroups = try reader["SecurityGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.subnetId = try reader["SubnetId"].readIfPresent()
        value.url = try reader["Url"].readIfPresent()
        value.volumeSizeInGB = try reader["VolumeSizeInGB"].readIfPresent()
        return value
    }
}

extension DescribeNotebookInstanceLifecycleConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeNotebookInstanceLifecycleConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeNotebookInstanceLifecycleConfigOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.notebookInstanceLifecycleConfigArn = try reader["NotebookInstanceLifecycleConfigArn"].readIfPresent()
        value.notebookInstanceLifecycleConfigName = try reader["NotebookInstanceLifecycleConfigName"].readIfPresent()
        value.onCreate = try reader["OnCreate"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.NotebookInstanceLifecycleHook.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.onStart = try reader["OnStart"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.NotebookInstanceLifecycleHook.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DescribeOptimizationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeOptimizationJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeOptimizationJobOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.deploymentInstanceType = try reader["DeploymentInstanceType"].readIfPresent() ?? .sdkUnknown("")
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.modelSource = try reader["ModelSource"].readIfPresent(with: SageMakerClientTypes.OptimizationJobModelSource.read(from:))
        value.optimizationConfigs = try reader["OptimizationConfigs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.OptimizationConfig.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.optimizationEndTime = try reader["OptimizationEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.optimizationEnvironment = try reader["OptimizationEnvironment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.optimizationJobArn = try reader["OptimizationJobArn"].readIfPresent() ?? ""
        value.optimizationJobName = try reader["OptimizationJobName"].readIfPresent() ?? ""
        value.optimizationJobStatus = try reader["OptimizationJobStatus"].readIfPresent() ?? .sdkUnknown("")
        value.optimizationOutput = try reader["OptimizationOutput"].readIfPresent(with: SageMakerClientTypes.OptimizationOutput.read(from:))
        value.optimizationStartTime = try reader["OptimizationStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.outputConfig = try reader["OutputConfig"].readIfPresent(with: SageMakerClientTypes.OptimizationJobOutputConfig.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent() ?? ""
        value.stoppingCondition = try reader["StoppingCondition"].readIfPresent(with: SageMakerClientTypes.StoppingCondition.read(from:))
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: SageMakerClientTypes.OptimizationVpcConfig.read(from:))
        return value
    }
}

extension DescribePipelineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribePipelineOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribePipelineOutput()
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastRunTime = try reader["LastRunTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.parallelismConfiguration = try reader["ParallelismConfiguration"].readIfPresent(with: SageMakerClientTypes.ParallelismConfiguration.read(from:))
        value.pipelineArn = try reader["PipelineArn"].readIfPresent()
        value.pipelineDefinition = try reader["PipelineDefinition"].readIfPresent()
        value.pipelineDescription = try reader["PipelineDescription"].readIfPresent()
        value.pipelineDisplayName = try reader["PipelineDisplayName"].readIfPresent()
        value.pipelineName = try reader["PipelineName"].readIfPresent()
        value.pipelineStatus = try reader["PipelineStatus"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        return value
    }
}

extension DescribePipelineDefinitionForExecutionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribePipelineDefinitionForExecutionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribePipelineDefinitionForExecutionOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.pipelineDefinition = try reader["PipelineDefinition"].readIfPresent()
        return value
    }
}

extension DescribePipelineExecutionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribePipelineExecutionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribePipelineExecutionOutput()
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.parallelismConfiguration = try reader["ParallelismConfiguration"].readIfPresent(with: SageMakerClientTypes.ParallelismConfiguration.read(from:))
        value.pipelineArn = try reader["PipelineArn"].readIfPresent()
        value.pipelineExecutionArn = try reader["PipelineExecutionArn"].readIfPresent()
        value.pipelineExecutionDescription = try reader["PipelineExecutionDescription"].readIfPresent()
        value.pipelineExecutionDisplayName = try reader["PipelineExecutionDisplayName"].readIfPresent()
        value.pipelineExecutionStatus = try reader["PipelineExecutionStatus"].readIfPresent()
        value.pipelineExperimentConfig = try reader["PipelineExperimentConfig"].readIfPresent(with: SageMakerClientTypes.PipelineExperimentConfig.read(from:))
        value.selectiveExecutionConfig = try reader["SelectiveExecutionConfig"].readIfPresent(with: SageMakerClientTypes.SelectiveExecutionConfig.read(from:))
        return value
    }
}

extension DescribeProcessingJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeProcessingJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeProcessingJobOutput()
        value.appSpecification = try reader["AppSpecification"].readIfPresent(with: SageMakerClientTypes.AppSpecification.read(from:))
        value.autoMLJobArn = try reader["AutoMLJobArn"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.environment = try reader["Environment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.exitMessage = try reader["ExitMessage"].readIfPresent()
        value.experimentConfig = try reader["ExperimentConfig"].readIfPresent(with: SageMakerClientTypes.ExperimentConfig.read(from:))
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.monitoringScheduleArn = try reader["MonitoringScheduleArn"].readIfPresent()
        value.networkConfig = try reader["NetworkConfig"].readIfPresent(with: SageMakerClientTypes.NetworkConfig.read(from:))
        value.processingEndTime = try reader["ProcessingEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.processingInputs = try reader["ProcessingInputs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ProcessingInput.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.processingJobArn = try reader["ProcessingJobArn"].readIfPresent() ?? ""
        value.processingJobName = try reader["ProcessingJobName"].readIfPresent() ?? ""
        value.processingJobStatus = try reader["ProcessingJobStatus"].readIfPresent() ?? .sdkUnknown("")
        value.processingOutputConfig = try reader["ProcessingOutputConfig"].readIfPresent(with: SageMakerClientTypes.ProcessingOutputConfig.read(from:))
        value.processingResources = try reader["ProcessingResources"].readIfPresent(with: SageMakerClientTypes.ProcessingResources.read(from:))
        value.processingStartTime = try reader["ProcessingStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.stoppingCondition = try reader["StoppingCondition"].readIfPresent(with: SageMakerClientTypes.ProcessingStoppingCondition.read(from:))
        value.trainingJobArn = try reader["TrainingJobArn"].readIfPresent()
        return value
    }
}

extension DescribeProjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeProjectOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeProjectOutput()
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.projectArn = try reader["ProjectArn"].readIfPresent() ?? ""
        value.projectDescription = try reader["ProjectDescription"].readIfPresent()
        value.projectId = try reader["ProjectId"].readIfPresent() ?? ""
        value.projectName = try reader["ProjectName"].readIfPresent() ?? ""
        value.projectStatus = try reader["ProjectStatus"].readIfPresent() ?? .sdkUnknown("")
        value.serviceCatalogProvisionedProductDetails = try reader["ServiceCatalogProvisionedProductDetails"].readIfPresent(with: SageMakerClientTypes.ServiceCatalogProvisionedProductDetails.read(from:))
        value.serviceCatalogProvisioningDetails = try reader["ServiceCatalogProvisioningDetails"].readIfPresent(with: SageMakerClientTypes.ServiceCatalogProvisioningDetails.read(from:))
        return value
    }
}

extension DescribeSpaceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeSpaceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeSpaceOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.domainId = try reader["DomainId"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.homeEfsFileSystemUid = try reader["HomeEfsFileSystemUid"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.ownershipSettings = try reader["OwnershipSettings"].readIfPresent(with: SageMakerClientTypes.OwnershipSettings.read(from:))
        value.spaceArn = try reader["SpaceArn"].readIfPresent()
        value.spaceDisplayName = try reader["SpaceDisplayName"].readIfPresent()
        value.spaceName = try reader["SpaceName"].readIfPresent()
        value.spaceSettings = try reader["SpaceSettings"].readIfPresent(with: SageMakerClientTypes.SpaceSettings.read(from:))
        value.spaceSharingSettings = try reader["SpaceSharingSettings"].readIfPresent(with: SageMakerClientTypes.SpaceSharingSettings.read(from:))
        value.status = try reader["Status"].readIfPresent()
        value.url = try reader["Url"].readIfPresent()
        return value
    }
}

extension DescribeStudioLifecycleConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeStudioLifecycleConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeStudioLifecycleConfigOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.studioLifecycleConfigAppType = try reader["StudioLifecycleConfigAppType"].readIfPresent()
        value.studioLifecycleConfigArn = try reader["StudioLifecycleConfigArn"].readIfPresent()
        value.studioLifecycleConfigContent = try reader["StudioLifecycleConfigContent"].readIfPresent()
        value.studioLifecycleConfigName = try reader["StudioLifecycleConfigName"].readIfPresent()
        return value
    }
}

extension DescribeSubscribedWorkteamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeSubscribedWorkteamOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeSubscribedWorkteamOutput()
        value.subscribedWorkteam = try reader["SubscribedWorkteam"].readIfPresent(with: SageMakerClientTypes.SubscribedWorkteam.read(from:))
        return value
    }
}

extension DescribeTrainingJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTrainingJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTrainingJobOutput()
        value.algorithmSpecification = try reader["AlgorithmSpecification"].readIfPresent(with: SageMakerClientTypes.AlgorithmSpecification.read(from:))
        value.autoMLJobArn = try reader["AutoMLJobArn"].readIfPresent()
        value.billableTimeInSeconds = try reader["BillableTimeInSeconds"].readIfPresent()
        value.checkpointConfig = try reader["CheckpointConfig"].readIfPresent(with: SageMakerClientTypes.CheckpointConfig.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.debugHookConfig = try reader["DebugHookConfig"].readIfPresent(with: SageMakerClientTypes.DebugHookConfig.read(from:))
        value.debugRuleConfigurations = try reader["DebugRuleConfigurations"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.DebugRuleConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.debugRuleEvaluationStatuses = try reader["DebugRuleEvaluationStatuses"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.DebugRuleEvaluationStatus.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.enableInterContainerTrafficEncryption = try reader["EnableInterContainerTrafficEncryption"].readIfPresent()
        value.enableManagedSpotTraining = try reader["EnableManagedSpotTraining"].readIfPresent()
        value.enableNetworkIsolation = try reader["EnableNetworkIsolation"].readIfPresent()
        value.environment = try reader["Environment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.experimentConfig = try reader["ExperimentConfig"].readIfPresent(with: SageMakerClientTypes.ExperimentConfig.read(from:))
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.finalMetricDataList = try reader["FinalMetricDataList"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.MetricData.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.hyperParameters = try reader["HyperParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.infraCheckConfig = try reader["InfraCheckConfig"].readIfPresent(with: SageMakerClientTypes.InfraCheckConfig.read(from:))
        value.inputDataConfig = try reader["InputDataConfig"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Channel.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.labelingJobArn = try reader["LabelingJobArn"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.modelArtifacts = try reader["ModelArtifacts"].readIfPresent(with: SageMakerClientTypes.ModelArtifacts.read(from:))
        value.outputDataConfig = try reader["OutputDataConfig"].readIfPresent(with: SageMakerClientTypes.OutputDataConfig.read(from:))
        value.profilerConfig = try reader["ProfilerConfig"].readIfPresent(with: SageMakerClientTypes.ProfilerConfig.read(from:))
        value.profilerRuleConfigurations = try reader["ProfilerRuleConfigurations"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ProfilerRuleConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.profilerRuleEvaluationStatuses = try reader["ProfilerRuleEvaluationStatuses"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ProfilerRuleEvaluationStatus.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.profilingStatus = try reader["ProfilingStatus"].readIfPresent()
        value.remoteDebugConfig = try reader["RemoteDebugConfig"].readIfPresent(with: SageMakerClientTypes.RemoteDebugConfig.read(from:))
        value.resourceConfig = try reader["ResourceConfig"].readIfPresent(with: SageMakerClientTypes.ResourceConfig.read(from:))
        value.retryStrategy = try reader["RetryStrategy"].readIfPresent(with: SageMakerClientTypes.RetryStrategy.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.secondaryStatus = try reader["SecondaryStatus"].readIfPresent() ?? .sdkUnknown("")
        value.secondaryStatusTransitions = try reader["SecondaryStatusTransitions"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.SecondaryStatusTransition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.stoppingCondition = try reader["StoppingCondition"].readIfPresent(with: SageMakerClientTypes.StoppingCondition.read(from:))
        value.tensorBoardOutputConfig = try reader["TensorBoardOutputConfig"].readIfPresent(with: SageMakerClientTypes.TensorBoardOutputConfig.read(from:))
        value.trainingEndTime = try reader["TrainingEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trainingJobArn = try reader["TrainingJobArn"].readIfPresent() ?? ""
        value.trainingJobName = try reader["TrainingJobName"].readIfPresent() ?? ""
        value.trainingJobStatus = try reader["TrainingJobStatus"].readIfPresent() ?? .sdkUnknown("")
        value.trainingStartTime = try reader["TrainingStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trainingTimeInSeconds = try reader["TrainingTimeInSeconds"].readIfPresent()
        value.tuningJobArn = try reader["TuningJobArn"].readIfPresent()
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: SageMakerClientTypes.VpcConfig.read(from:))
        value.warmPoolStatus = try reader["WarmPoolStatus"].readIfPresent(with: SageMakerClientTypes.WarmPoolStatus.read(from:))
        return value
    }
}

extension DescribeTransformJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTransformJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTransformJobOutput()
        value.autoMLJobArn = try reader["AutoMLJobArn"].readIfPresent()
        value.batchStrategy = try reader["BatchStrategy"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.dataCaptureConfig = try reader["DataCaptureConfig"].readIfPresent(with: SageMakerClientTypes.BatchDataCaptureConfig.read(from:))
        value.dataProcessing = try reader["DataProcessing"].readIfPresent(with: SageMakerClientTypes.DataProcessing.read(from:))
        value.environment = try reader["Environment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.experimentConfig = try reader["ExperimentConfig"].readIfPresent(with: SageMakerClientTypes.ExperimentConfig.read(from:))
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.labelingJobArn = try reader["LabelingJobArn"].readIfPresent()
        value.maxConcurrentTransforms = try reader["MaxConcurrentTransforms"].readIfPresent()
        value.maxPayloadInMB = try reader["MaxPayloadInMB"].readIfPresent()
        value.modelClientConfig = try reader["ModelClientConfig"].readIfPresent(with: SageMakerClientTypes.ModelClientConfig.read(from:))
        value.modelName = try reader["ModelName"].readIfPresent() ?? ""
        value.transformEndTime = try reader["TransformEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.transformInput = try reader["TransformInput"].readIfPresent(with: SageMakerClientTypes.TransformInput.read(from:))
        value.transformJobArn = try reader["TransformJobArn"].readIfPresent() ?? ""
        value.transformJobName = try reader["TransformJobName"].readIfPresent() ?? ""
        value.transformJobStatus = try reader["TransformJobStatus"].readIfPresent() ?? .sdkUnknown("")
        value.transformOutput = try reader["TransformOutput"].readIfPresent(with: SageMakerClientTypes.TransformOutput.read(from:))
        value.transformResources = try reader["TransformResources"].readIfPresent(with: SageMakerClientTypes.TransformResources.read(from:))
        value.transformStartTime = try reader["TransformStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension DescribeTrialOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTrialOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTrialOutput()
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.experimentName = try reader["ExperimentName"].readIfPresent()
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.metadataProperties = try reader["MetadataProperties"].readIfPresent(with: SageMakerClientTypes.MetadataProperties.read(from:))
        value.source = try reader["Source"].readIfPresent(with: SageMakerClientTypes.TrialSource.read(from:))
        value.trialArn = try reader["TrialArn"].readIfPresent()
        value.trialName = try reader["TrialName"].readIfPresent()
        return value
    }
}

extension DescribeTrialComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTrialComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTrialComponentOutput()
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.inputArtifacts = try reader["InputArtifacts"].readMapIfPresent(valueReadingClosure: SageMakerClientTypes.TrialComponentArtifact.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lineageGroupArn = try reader["LineageGroupArn"].readIfPresent()
        value.metadataProperties = try reader["MetadataProperties"].readIfPresent(with: SageMakerClientTypes.MetadataProperties.read(from:))
        value.metrics = try reader["Metrics"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.TrialComponentMetricSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.outputArtifacts = try reader["OutputArtifacts"].readMapIfPresent(valueReadingClosure: SageMakerClientTypes.TrialComponentArtifact.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.parameters = try reader["Parameters"].readMapIfPresent(valueReadingClosure: SageMakerClientTypes.TrialComponentParameterValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.source = try reader["Source"].readIfPresent(with: SageMakerClientTypes.TrialComponentSource.read(from:))
        value.sources = try reader["Sources"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.TrialComponentSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["Status"].readIfPresent(with: SageMakerClientTypes.TrialComponentStatus.read(from:))
        value.trialComponentArn = try reader["TrialComponentArn"].readIfPresent()
        value.trialComponentName = try reader["TrialComponentName"].readIfPresent()
        return value
    }
}

extension DescribeUserProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeUserProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeUserProfileOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.domainId = try reader["DomainId"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.homeEfsFileSystemUid = try reader["HomeEfsFileSystemUid"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.singleSignOnUserIdentifier = try reader["SingleSignOnUserIdentifier"].readIfPresent()
        value.singleSignOnUserValue = try reader["SingleSignOnUserValue"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.userProfileArn = try reader["UserProfileArn"].readIfPresent()
        value.userProfileName = try reader["UserProfileName"].readIfPresent()
        value.userSettings = try reader["UserSettings"].readIfPresent(with: SageMakerClientTypes.UserSettings.read(from:))
        return value
    }
}

extension DescribeWorkforceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeWorkforceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeWorkforceOutput()
        value.workforce = try reader["Workforce"].readIfPresent(with: SageMakerClientTypes.Workforce.read(from:))
        return value
    }
}

extension DescribeWorkteamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeWorkteamOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeWorkteamOutput()
        value.workteam = try reader["Workteam"].readIfPresent(with: SageMakerClientTypes.Workteam.read(from:))
        return value
    }
}

extension DisableSagemakerServicecatalogPortfolioOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisableSagemakerServicecatalogPortfolioOutput {
        return DisableSagemakerServicecatalogPortfolioOutput()
    }
}

extension DisassociateTrialComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DisassociateTrialComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DisassociateTrialComponentOutput()
        value.trialArn = try reader["TrialArn"].readIfPresent()
        value.trialComponentArn = try reader["TrialComponentArn"].readIfPresent()
        return value
    }
}

extension EnableSagemakerServicecatalogPortfolioOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> EnableSagemakerServicecatalogPortfolioOutput {
        return EnableSagemakerServicecatalogPortfolioOutput()
    }
}

extension GetDeviceFleetReportOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDeviceFleetReportOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDeviceFleetReportOutput()
        value.agentVersions = try reader["AgentVersions"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AgentVersion.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.description = try reader["Description"].readIfPresent()
        value.deviceFleetArn = try reader["DeviceFleetArn"].readIfPresent() ?? ""
        value.deviceFleetName = try reader["DeviceFleetName"].readIfPresent() ?? ""
        value.deviceStats = try reader["DeviceStats"].readIfPresent(with: SageMakerClientTypes.DeviceStats.read(from:))
        value.modelStats = try reader["ModelStats"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.EdgeModelStat.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.outputConfig = try reader["OutputConfig"].readIfPresent(with: SageMakerClientTypes.EdgeOutputConfig.read(from:))
        value.reportGenerated = try reader["ReportGenerated"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension GetLineageGroupPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetLineageGroupPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetLineageGroupPolicyOutput()
        value.lineageGroupArn = try reader["LineageGroupArn"].readIfPresent()
        value.resourcePolicy = try reader["ResourcePolicy"].readIfPresent()
        return value
    }
}

extension GetModelPackageGroupPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetModelPackageGroupPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetModelPackageGroupPolicyOutput()
        value.resourcePolicy = try reader["ResourcePolicy"].readIfPresent() ?? ""
        return value
    }
}

extension GetSagemakerServicecatalogPortfolioStatusOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSagemakerServicecatalogPortfolioStatusOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSagemakerServicecatalogPortfolioStatusOutput()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension GetScalingConfigurationRecommendationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetScalingConfigurationRecommendationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetScalingConfigurationRecommendationOutput()
        value.dynamicScalingConfiguration = try reader["DynamicScalingConfiguration"].readIfPresent(with: SageMakerClientTypes.DynamicScalingConfiguration.read(from:))
        value.endpointName = try reader["EndpointName"].readIfPresent()
        value.inferenceRecommendationsJobName = try reader["InferenceRecommendationsJobName"].readIfPresent()
        value.metric = try reader["Metric"].readIfPresent(with: SageMakerClientTypes.ScalingPolicyMetric.read(from:))
        value.recommendationId = try reader["RecommendationId"].readIfPresent()
        value.scalingPolicyObjective = try reader["ScalingPolicyObjective"].readIfPresent(with: SageMakerClientTypes.ScalingPolicyObjective.read(from:))
        value.targetCpuUtilizationPerCore = try reader["TargetCpuUtilizationPerCore"].readIfPresent()
        return value
    }
}

extension GetSearchSuggestionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetSearchSuggestionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetSearchSuggestionsOutput()
        value.propertyNameSuggestions = try reader["PropertyNameSuggestions"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.PropertyNameSuggestion.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ImportHubContentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ImportHubContentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ImportHubContentOutput()
        value.hubArn = try reader["HubArn"].readIfPresent() ?? ""
        value.hubContentArn = try reader["HubContentArn"].readIfPresent() ?? ""
        return value
    }
}

extension ListActionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListActionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListActionsOutput()
        value.actionSummaries = try reader["ActionSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ActionSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListAlgorithmsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAlgorithmsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAlgorithmsOutput()
        value.algorithmSummaryList = try reader["AlgorithmSummaryList"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AlgorithmSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListAliasesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAliasesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAliasesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.sageMakerImageVersionAliases = try reader["SageMakerImageVersionAliases"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListAppImageConfigsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAppImageConfigsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAppImageConfigsOutput()
        value.appImageConfigs = try reader["AppImageConfigs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AppImageConfigDetails.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListAppsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAppsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAppsOutput()
        value.apps = try reader["Apps"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AppDetails.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListArtifactsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListArtifactsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListArtifactsOutput()
        value.artifactSummaries = try reader["ArtifactSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ArtifactSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListAssociationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAssociationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAssociationsOutput()
        value.associationSummaries = try reader["AssociationSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AssociationSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListAutoMLJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListAutoMLJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListAutoMLJobsOutput()
        value.autoMLJobSummaries = try reader["AutoMLJobSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AutoMLJobSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListCandidatesForAutoMLJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListCandidatesForAutoMLJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListCandidatesForAutoMLJobOutput()
        value.candidates = try reader["Candidates"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AutoMLCandidate.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListClusterNodesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListClusterNodesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListClusterNodesOutput()
        value.clusterNodeSummaries = try reader["ClusterNodeSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ClusterNodeSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent() ?? ""
        return value
    }
}

extension ListClustersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListClustersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListClustersOutput()
        value.clusterSummaries = try reader["ClusterSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ClusterSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent() ?? ""
        return value
    }
}

extension ListCodeRepositoriesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListCodeRepositoriesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListCodeRepositoriesOutput()
        value.codeRepositorySummaryList = try reader["CodeRepositorySummaryList"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.CodeRepositorySummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListCompilationJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListCompilationJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListCompilationJobsOutput()
        value.compilationJobSummaries = try reader["CompilationJobSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.CompilationJobSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListContextsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListContextsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListContextsOutput()
        value.contextSummaries = try reader["ContextSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ContextSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDataQualityJobDefinitionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDataQualityJobDefinitionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDataQualityJobDefinitionsOutput()
        value.jobDefinitionSummaries = try reader["JobDefinitionSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.MonitoringJobDefinitionSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDeviceFleetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDeviceFleetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDeviceFleetsOutput()
        value.deviceFleetSummaries = try reader["DeviceFleetSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.DeviceFleetSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDevicesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDevicesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDevicesOutput()
        value.deviceSummaries = try reader["DeviceSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.DeviceSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDomainsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDomainsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDomainsOutput()
        value.domains = try reader["Domains"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.DomainDetails.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListEdgeDeploymentPlansOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEdgeDeploymentPlansOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEdgeDeploymentPlansOutput()
        value.edgeDeploymentPlanSummaries = try reader["EdgeDeploymentPlanSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.EdgeDeploymentPlanSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListEdgePackagingJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEdgePackagingJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEdgePackagingJobsOutput()
        value.edgePackagingJobSummaries = try reader["EdgePackagingJobSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.EdgePackagingJobSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListEndpointConfigsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEndpointConfigsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEndpointConfigsOutput()
        value.endpointConfigs = try reader["EndpointConfigs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.EndpointConfigSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListEndpointsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEndpointsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEndpointsOutput()
        value.endpoints = try reader["Endpoints"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.EndpointSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListExperimentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListExperimentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListExperimentsOutput()
        value.experimentSummaries = try reader["ExperimentSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ExperimentSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListFeatureGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListFeatureGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListFeatureGroupsOutput()
        value.featureGroupSummaries = try reader["FeatureGroupSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.FeatureGroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListFlowDefinitionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListFlowDefinitionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListFlowDefinitionsOutput()
        value.flowDefinitionSummaries = try reader["FlowDefinitionSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.FlowDefinitionSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListHubContentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListHubContentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListHubContentsOutput()
        value.hubContentSummaries = try reader["HubContentSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.HubContentInfo.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListHubContentVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListHubContentVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListHubContentVersionsOutput()
        value.hubContentSummaries = try reader["HubContentSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.HubContentInfo.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListHubsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListHubsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListHubsOutput()
        value.hubSummaries = try reader["HubSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.HubInfo.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListHumanTaskUisOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListHumanTaskUisOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListHumanTaskUisOutput()
        value.humanTaskUiSummaries = try reader["HumanTaskUiSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.HumanTaskUiSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListHyperParameterTuningJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListHyperParameterTuningJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListHyperParameterTuningJobsOutput()
        value.hyperParameterTuningJobSummaries = try reader["HyperParameterTuningJobSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.HyperParameterTuningJobSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListImagesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListImagesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListImagesOutput()
        value.images = try reader["Images"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Image.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListImageVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListImageVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListImageVersionsOutput()
        value.imageVersions = try reader["ImageVersions"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ImageVersion.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListInferenceComponentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListInferenceComponentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListInferenceComponentsOutput()
        value.inferenceComponents = try reader["InferenceComponents"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.InferenceComponentSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListInferenceExperimentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListInferenceExperimentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListInferenceExperimentsOutput()
        value.inferenceExperiments = try reader["InferenceExperiments"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.InferenceExperimentSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListInferenceRecommendationsJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListInferenceRecommendationsJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListInferenceRecommendationsJobsOutput()
        value.inferenceRecommendationsJobs = try reader["InferenceRecommendationsJobs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.InferenceRecommendationsJob.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListInferenceRecommendationsJobStepsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListInferenceRecommendationsJobStepsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListInferenceRecommendationsJobStepsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.steps = try reader["Steps"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.InferenceRecommendationsJobStep.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListLabelingJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListLabelingJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListLabelingJobsOutput()
        value.labelingJobSummaryList = try reader["LabelingJobSummaryList"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.LabelingJobSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListLabelingJobsForWorkteamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListLabelingJobsForWorkteamOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListLabelingJobsForWorkteamOutput()
        value.labelingJobSummaryList = try reader["LabelingJobSummaryList"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.LabelingJobForWorkteamSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListLineageGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListLineageGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListLineageGroupsOutput()
        value.lineageGroupSummaries = try reader["LineageGroupSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.LineageGroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListMlflowTrackingServersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMlflowTrackingServersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListMlflowTrackingServersOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.trackingServerSummaries = try reader["TrackingServerSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.TrackingServerSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListModelBiasJobDefinitionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListModelBiasJobDefinitionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListModelBiasJobDefinitionsOutput()
        value.jobDefinitionSummaries = try reader["JobDefinitionSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.MonitoringJobDefinitionSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListModelCardExportJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListModelCardExportJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListModelCardExportJobsOutput()
        value.modelCardExportJobSummaries = try reader["ModelCardExportJobSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ModelCardExportJobSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListModelCardsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListModelCardsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListModelCardsOutput()
        value.modelCardSummaries = try reader["ModelCardSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ModelCardSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListModelCardVersionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListModelCardVersionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListModelCardVersionsOutput()
        value.modelCardVersionSummaryList = try reader["ModelCardVersionSummaryList"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ModelCardVersionSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListModelExplainabilityJobDefinitionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListModelExplainabilityJobDefinitionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListModelExplainabilityJobDefinitionsOutput()
        value.jobDefinitionSummaries = try reader["JobDefinitionSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.MonitoringJobDefinitionSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListModelMetadataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListModelMetadataOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListModelMetadataOutput()
        value.modelMetadataSummaries = try reader["ModelMetadataSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ModelMetadataSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListModelPackageGroupsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListModelPackageGroupsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListModelPackageGroupsOutput()
        value.modelPackageGroupSummaryList = try reader["ModelPackageGroupSummaryList"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ModelPackageGroupSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListModelPackagesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListModelPackagesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListModelPackagesOutput()
        value.modelPackageSummaryList = try reader["ModelPackageSummaryList"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ModelPackageSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListModelQualityJobDefinitionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListModelQualityJobDefinitionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListModelQualityJobDefinitionsOutput()
        value.jobDefinitionSummaries = try reader["JobDefinitionSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.MonitoringJobDefinitionSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListModelsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListModelsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListModelsOutput()
        value.models = try reader["Models"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ModelSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListMonitoringAlertHistoryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMonitoringAlertHistoryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListMonitoringAlertHistoryOutput()
        value.monitoringAlertHistory = try reader["MonitoringAlertHistory"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.MonitoringAlertHistorySummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListMonitoringAlertsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMonitoringAlertsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListMonitoringAlertsOutput()
        value.monitoringAlertSummaries = try reader["MonitoringAlertSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.MonitoringAlertSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListMonitoringExecutionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMonitoringExecutionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListMonitoringExecutionsOutput()
        value.monitoringExecutionSummaries = try reader["MonitoringExecutionSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.MonitoringExecutionSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListMonitoringSchedulesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListMonitoringSchedulesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListMonitoringSchedulesOutput()
        value.monitoringScheduleSummaries = try reader["MonitoringScheduleSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.MonitoringScheduleSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListNotebookInstanceLifecycleConfigsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListNotebookInstanceLifecycleConfigsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListNotebookInstanceLifecycleConfigsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.notebookInstanceLifecycleConfigs = try reader["NotebookInstanceLifecycleConfigs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.NotebookInstanceLifecycleConfigSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListNotebookInstancesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListNotebookInstancesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListNotebookInstancesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.notebookInstances = try reader["NotebookInstances"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.NotebookInstanceSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListOptimizationJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListOptimizationJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListOptimizationJobsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.optimizationJobSummaries = try reader["OptimizationJobSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.OptimizationJobSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListPipelineExecutionsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPipelineExecutionsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPipelineExecutionsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.pipelineExecutionSummaries = try reader["PipelineExecutionSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.PipelineExecutionSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPipelineExecutionStepsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPipelineExecutionStepsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPipelineExecutionStepsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.pipelineExecutionSteps = try reader["PipelineExecutionSteps"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.PipelineExecutionStep.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPipelineParametersForExecutionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPipelineParametersForExecutionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPipelineParametersForExecutionOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.pipelineParameters = try reader["PipelineParameters"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Parameter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListPipelinesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPipelinesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPipelinesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.pipelineSummaries = try reader["PipelineSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.PipelineSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListProcessingJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListProcessingJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListProcessingJobsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.processingJobSummaries = try reader["ProcessingJobSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ProcessingJobSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListProjectsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListProjectsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListProjectsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.projectSummaryList = try reader["ProjectSummaryList"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ProjectSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListResourceCatalogsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListResourceCatalogsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListResourceCatalogsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.resourceCatalogs = try reader["ResourceCatalogs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ResourceCatalog.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSpacesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSpacesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSpacesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.spaces = try reader["Spaces"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.SpaceDetails.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListStageDevicesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListStageDevicesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListStageDevicesOutput()
        value.deviceDeploymentSummaries = try reader["DeviceDeploymentSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.DeviceDeploymentSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListStudioLifecycleConfigsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListStudioLifecycleConfigsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListStudioLifecycleConfigsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.studioLifecycleConfigs = try reader["StudioLifecycleConfigs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.StudioLifecycleConfigDetails.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSubscribedWorkteamsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSubscribedWorkteamsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSubscribedWorkteamsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.subscribedWorkteams = try reader["SubscribedWorkteams"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.SubscribedWorkteam.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListTagsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTrainingJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTrainingJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTrainingJobsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.trainingJobSummaries = try reader["TrainingJobSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.TrainingJobSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListTrainingJobsForHyperParameterTuningJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTrainingJobsForHyperParameterTuningJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTrainingJobsForHyperParameterTuningJobOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.trainingJobSummaries = try reader["TrainingJobSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.HyperParameterTrainingJobSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListTransformJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTransformJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTransformJobsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.transformJobSummaries = try reader["TransformJobSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.TransformJobSummary.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListTrialComponentsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTrialComponentsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTrialComponentsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.trialComponentSummaries = try reader["TrialComponentSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.TrialComponentSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTrialsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTrialsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTrialsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.trialSummaries = try reader["TrialSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.TrialSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListUserProfilesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListUserProfilesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListUserProfilesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.userProfiles = try reader["UserProfiles"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.UserProfileDetails.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListWorkforcesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListWorkforcesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListWorkforcesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.workforces = try reader["Workforces"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Workforce.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ListWorkteamsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListWorkteamsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListWorkteamsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.workteams = try reader["Workteams"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Workteam.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension PutModelPackageGroupPolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutModelPackageGroupPolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutModelPackageGroupPolicyOutput()
        value.modelPackageGroupArn = try reader["ModelPackageGroupArn"].readIfPresent() ?? ""
        return value
    }
}

extension QueryLineageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> QueryLineageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = QueryLineageOutput()
        value.edges = try reader["Edges"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Edge.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.vertices = try reader["Vertices"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Vertex.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension RegisterDevicesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RegisterDevicesOutput {
        return RegisterDevicesOutput()
    }
}

extension RenderUiTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RenderUiTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RenderUiTemplateOutput()
        value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.RenderingError.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.renderedContent = try reader["RenderedContent"].readIfPresent() ?? ""
        return value
    }
}

extension RetryPipelineExecutionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> RetryPipelineExecutionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = RetryPipelineExecutionOutput()
        value.pipelineExecutionArn = try reader["PipelineExecutionArn"].readIfPresent()
        return value
    }
}

extension SearchOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SearchOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SearchOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.results = try reader["Results"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.SearchRecord.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SendPipelineExecutionStepFailureOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SendPipelineExecutionStepFailureOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SendPipelineExecutionStepFailureOutput()
        value.pipelineExecutionArn = try reader["PipelineExecutionArn"].readIfPresent()
        return value
    }
}

extension SendPipelineExecutionStepSuccessOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> SendPipelineExecutionStepSuccessOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = SendPipelineExecutionStepSuccessOutput()
        value.pipelineExecutionArn = try reader["PipelineExecutionArn"].readIfPresent()
        return value
    }
}

extension StartEdgeDeploymentStageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartEdgeDeploymentStageOutput {
        return StartEdgeDeploymentStageOutput()
    }
}

extension StartInferenceExperimentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartInferenceExperimentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartInferenceExperimentOutput()
        value.inferenceExperimentArn = try reader["InferenceExperimentArn"].readIfPresent() ?? ""
        return value
    }
}

extension StartMlflowTrackingServerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartMlflowTrackingServerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartMlflowTrackingServerOutput()
        value.trackingServerArn = try reader["TrackingServerArn"].readIfPresent()
        return value
    }
}

extension StartMonitoringScheduleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartMonitoringScheduleOutput {
        return StartMonitoringScheduleOutput()
    }
}

extension StartNotebookInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartNotebookInstanceOutput {
        return StartNotebookInstanceOutput()
    }
}

extension StartPipelineExecutionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartPipelineExecutionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartPipelineExecutionOutput()
        value.pipelineExecutionArn = try reader["PipelineExecutionArn"].readIfPresent()
        return value
    }
}

extension StopAutoMLJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopAutoMLJobOutput {
        return StopAutoMLJobOutput()
    }
}

extension StopCompilationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopCompilationJobOutput {
        return StopCompilationJobOutput()
    }
}

extension StopEdgeDeploymentStageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopEdgeDeploymentStageOutput {
        return StopEdgeDeploymentStageOutput()
    }
}

extension StopEdgePackagingJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopEdgePackagingJobOutput {
        return StopEdgePackagingJobOutput()
    }
}

extension StopHyperParameterTuningJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopHyperParameterTuningJobOutput {
        return StopHyperParameterTuningJobOutput()
    }
}

extension StopInferenceExperimentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopInferenceExperimentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopInferenceExperimentOutput()
        value.inferenceExperimentArn = try reader["InferenceExperimentArn"].readIfPresent() ?? ""
        return value
    }
}

extension StopInferenceRecommendationsJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopInferenceRecommendationsJobOutput {
        return StopInferenceRecommendationsJobOutput()
    }
}

extension StopLabelingJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopLabelingJobOutput {
        return StopLabelingJobOutput()
    }
}

extension StopMlflowTrackingServerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopMlflowTrackingServerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopMlflowTrackingServerOutput()
        value.trackingServerArn = try reader["TrackingServerArn"].readIfPresent()
        return value
    }
}

extension StopMonitoringScheduleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopMonitoringScheduleOutput {
        return StopMonitoringScheduleOutput()
    }
}

extension StopNotebookInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopNotebookInstanceOutput {
        return StopNotebookInstanceOutput()
    }
}

extension StopOptimizationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopOptimizationJobOutput {
        return StopOptimizationJobOutput()
    }
}

extension StopPipelineExecutionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopPipelineExecutionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopPipelineExecutionOutput()
        value.pipelineExecutionArn = try reader["PipelineExecutionArn"].readIfPresent()
        return value
    }
}

extension StopProcessingJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopProcessingJobOutput {
        return StopProcessingJobOutput()
    }
}

extension StopTrainingJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopTrainingJobOutput {
        return StopTrainingJobOutput()
    }
}

extension StopTransformJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopTransformJobOutput {
        return StopTransformJobOutput()
    }
}

extension UpdateActionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateActionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateActionOutput()
        value.actionArn = try reader["ActionArn"].readIfPresent()
        return value
    }
}

extension UpdateAppImageConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateAppImageConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateAppImageConfigOutput()
        value.appImageConfigArn = try reader["AppImageConfigArn"].readIfPresent()
        return value
    }
}

extension UpdateArtifactOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateArtifactOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateArtifactOutput()
        value.artifactArn = try reader["ArtifactArn"].readIfPresent()
        return value
    }
}

extension UpdateClusterOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateClusterOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateClusterOutput()
        value.clusterArn = try reader["ClusterArn"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateClusterSoftwareOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateClusterSoftwareOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateClusterSoftwareOutput()
        value.clusterArn = try reader["ClusterArn"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateCodeRepositoryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateCodeRepositoryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateCodeRepositoryOutput()
        value.codeRepositoryArn = try reader["CodeRepositoryArn"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateContextOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateContextOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateContextOutput()
        value.contextArn = try reader["ContextArn"].readIfPresent()
        return value
    }
}

extension UpdateDeviceFleetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDeviceFleetOutput {
        return UpdateDeviceFleetOutput()
    }
}

extension UpdateDevicesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDevicesOutput {
        return UpdateDevicesOutput()
    }
}

extension UpdateDomainOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateDomainOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateDomainOutput()
        value.domainArn = try reader["DomainArn"].readIfPresent()
        return value
    }
}

extension UpdateEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateEndpointOutput()
        value.endpointArn = try reader["EndpointArn"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateEndpointWeightsAndCapacitiesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEndpointWeightsAndCapacitiesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateEndpointWeightsAndCapacitiesOutput()
        value.endpointArn = try reader["EndpointArn"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateExperimentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateExperimentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateExperimentOutput()
        value.experimentArn = try reader["ExperimentArn"].readIfPresent()
        return value
    }
}

extension UpdateFeatureGroupOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateFeatureGroupOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateFeatureGroupOutput()
        value.featureGroupArn = try reader["FeatureGroupArn"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateFeatureMetadataOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateFeatureMetadataOutput {
        return UpdateFeatureMetadataOutput()
    }
}

extension UpdateHubOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateHubOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateHubOutput()
        value.hubArn = try reader["HubArn"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateImageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateImageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateImageOutput()
        value.imageArn = try reader["ImageArn"].readIfPresent()
        return value
    }
}

extension UpdateImageVersionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateImageVersionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateImageVersionOutput()
        value.imageVersionArn = try reader["ImageVersionArn"].readIfPresent()
        return value
    }
}

extension UpdateInferenceComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateInferenceComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateInferenceComponentOutput()
        value.inferenceComponentArn = try reader["InferenceComponentArn"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateInferenceComponentRuntimeConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateInferenceComponentRuntimeConfigOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateInferenceComponentRuntimeConfigOutput()
        value.inferenceComponentArn = try reader["InferenceComponentArn"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateInferenceExperimentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateInferenceExperimentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateInferenceExperimentOutput()
        value.inferenceExperimentArn = try reader["InferenceExperimentArn"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateMlflowTrackingServerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateMlflowTrackingServerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateMlflowTrackingServerOutput()
        value.trackingServerArn = try reader["TrackingServerArn"].readIfPresent()
        return value
    }
}

extension UpdateModelCardOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateModelCardOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateModelCardOutput()
        value.modelCardArn = try reader["ModelCardArn"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateModelPackageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateModelPackageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateModelPackageOutput()
        value.modelPackageArn = try reader["ModelPackageArn"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateMonitoringAlertOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateMonitoringAlertOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateMonitoringAlertOutput()
        value.monitoringAlertName = try reader["MonitoringAlertName"].readIfPresent()
        value.monitoringScheduleArn = try reader["MonitoringScheduleArn"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateMonitoringScheduleOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateMonitoringScheduleOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateMonitoringScheduleOutput()
        value.monitoringScheduleArn = try reader["MonitoringScheduleArn"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateNotebookInstanceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateNotebookInstanceOutput {
        return UpdateNotebookInstanceOutput()
    }
}

extension UpdateNotebookInstanceLifecycleConfigOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateNotebookInstanceLifecycleConfigOutput {
        return UpdateNotebookInstanceLifecycleConfigOutput()
    }
}

extension UpdatePipelineOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePipelineOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdatePipelineOutput()
        value.pipelineArn = try reader["PipelineArn"].readIfPresent()
        return value
    }
}

extension UpdatePipelineExecutionOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdatePipelineExecutionOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdatePipelineExecutionOutput()
        value.pipelineExecutionArn = try reader["PipelineExecutionArn"].readIfPresent()
        return value
    }
}

extension UpdateProjectOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateProjectOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateProjectOutput()
        value.projectArn = try reader["ProjectArn"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateSpaceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateSpaceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateSpaceOutput()
        value.spaceArn = try reader["SpaceArn"].readIfPresent()
        return value
    }
}

extension UpdateTrainingJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateTrainingJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateTrainingJobOutput()
        value.trainingJobArn = try reader["TrainingJobArn"].readIfPresent() ?? ""
        return value
    }
}

extension UpdateTrialOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateTrialOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateTrialOutput()
        value.trialArn = try reader["TrialArn"].readIfPresent()
        return value
    }
}

extension UpdateTrialComponentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateTrialComponentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateTrialComponentOutput()
        value.trialComponentArn = try reader["TrialComponentArn"].readIfPresent()
        return value
    }
}

extension UpdateUserProfileOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateUserProfileOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateUserProfileOutput()
        value.userProfileArn = try reader["UserProfileArn"].readIfPresent()
        return value
    }
}

extension UpdateWorkforceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateWorkforceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateWorkforceOutput()
        value.workforce = try reader["Workforce"].readIfPresent(with: SageMakerClientTypes.Workforce.read(from:))
        return value
    }
}

extension UpdateWorkteamOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateWorkteamOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateWorkteamOutput()
        value.workteam = try reader["Workteam"].readIfPresent(with: SageMakerClientTypes.Workteam.read(from:))
        return value
    }
}

enum AddAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AddTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum AssociateTrialComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchDescribeModelPackageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateActionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAlgorithmOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAppOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAppImageConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateArtifactOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAutoMLJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateAutoMLJobV2OutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCodeRepositoryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateCompilationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateContextOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDataQualityJobDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDeviceFleetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEdgeDeploymentPlanOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEdgeDeploymentStageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEdgePackagingJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEndpointConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateExperimentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateFeatureGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateFlowDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateHubOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateHubContentReferenceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateHumanTaskUiOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateHyperParameterTuningJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateImageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateImageVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateInferenceComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateInferenceExperimentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateInferenceRecommendationsJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateLabelingJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateMlflowTrackingServerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateModelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateModelBiasJobDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateModelCardOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateModelCardExportJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateModelExplainabilityJobDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateModelPackageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateModelPackageGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateModelQualityJobDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateMonitoringScheduleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateNotebookInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateNotebookInstanceLifecycleConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateOptimizationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePipelineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePresignedDomainUrlOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePresignedMlflowTrackingServerUrlOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreatePresignedNotebookInstanceUrlOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateProcessingJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateProjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateSpaceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateStudioLifecycleConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateTrainingJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateTransformJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateTrialOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateTrialComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateUserProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateWorkforceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateWorkteamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteActionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAlgorithmOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAppOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAppImageConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteArtifactOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteAssociationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCodeRepositoryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteCompilationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteContextOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDataQualityJobDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDeviceFleetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEdgeDeploymentPlanOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEdgeDeploymentStageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEndpointConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteExperimentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteFeatureGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteFlowDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteHubOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteHubContentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteHubContentReferenceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteHumanTaskUiOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteHyperParameterTuningJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteImageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteImageVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteInferenceComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteInferenceExperimentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteMlflowTrackingServerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteModelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteModelBiasJobDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteModelCardOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteModelExplainabilityJobDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteModelPackageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteModelPackageGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteModelPackageGroupPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteModelQualityJobDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteMonitoringScheduleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteNotebookInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteNotebookInstanceLifecycleConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteOptimizationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeletePipelineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteProjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteSpaceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteStudioLifecycleConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTrialOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTrialComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteUserProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteWorkforceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteWorkteamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeregisterDevicesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeActionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAlgorithmOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAppOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAppImageConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeArtifactOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAutoMLJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeAutoMLJobV2OutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeClusterNodeOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCodeRepositoryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeCompilationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeContextOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDataQualityJobDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDeviceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDeviceFleetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEdgeDeploymentPlanOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEdgePackagingJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEndpointConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeExperimentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFeatureGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFeatureMetadataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFlowDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeHubOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeHubContentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeHumanTaskUiOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeHyperParameterTuningJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeImageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeImageVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeInferenceComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeInferenceExperimentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeInferenceRecommendationsJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeLabelingJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeLineageGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeMlflowTrackingServerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeModelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeModelBiasJobDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeModelCardOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeModelCardExportJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeModelExplainabilityJobDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeModelPackageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeModelPackageGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeModelQualityJobDefinitionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeMonitoringScheduleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeNotebookInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeNotebookInstanceLifecycleConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeOptimizationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribePipelineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribePipelineDefinitionForExecutionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribePipelineExecutionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeProcessingJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeProjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeSpaceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeStudioLifecycleConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeSubscribedWorkteamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTrainingJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTransformJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTrialOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTrialComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeUserProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeWorkforceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeWorkteamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisableSagemakerServicecatalogPortfolioOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DisassociateTrialComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum EnableSagemakerServicecatalogPortfolioOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDeviceFleetReportOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetLineageGroupPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetModelPackageGroupPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSagemakerServicecatalogPortfolioStatusOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetScalingConfigurationRecommendationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetSearchSuggestionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ImportHubContentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListActionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAlgorithmsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAliasesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAppImageConfigsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAppsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListArtifactsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAssociationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListAutoMLJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListCandidatesForAutoMLJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListClusterNodesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListClustersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListCodeRepositoriesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListCompilationJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListContextsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDataQualityJobDefinitionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDeviceFleetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDevicesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDomainsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEdgeDeploymentPlansOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEdgePackagingJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEndpointConfigsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEndpointsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListExperimentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListFeatureGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListFlowDefinitionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListHubContentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListHubContentVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListHubsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListHumanTaskUisOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListHyperParameterTuningJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListImagesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListImageVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListInferenceComponentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListInferenceExperimentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListInferenceRecommendationsJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListInferenceRecommendationsJobStepsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListLabelingJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListLabelingJobsForWorkteamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListLineageGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMlflowTrackingServersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListModelBiasJobDefinitionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListModelCardExportJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListModelCardsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListModelCardVersionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListModelExplainabilityJobDefinitionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListModelMetadataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListModelPackageGroupsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListModelPackagesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListModelQualityJobDefinitionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListModelsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMonitoringAlertHistoryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMonitoringAlertsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMonitoringExecutionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListMonitoringSchedulesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListNotebookInstanceLifecycleConfigsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListNotebookInstancesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListOptimizationJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPipelineExecutionsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPipelineExecutionStepsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPipelineParametersForExecutionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPipelinesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListProcessingJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListProjectsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListResourceCatalogsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSpacesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListStageDevicesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListStudioLifecycleConfigsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSubscribedWorkteamsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTrainingJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTrainingJobsForHyperParameterTuningJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTransformJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTrialComponentsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTrialsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListUserProfilesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListWorkforcesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListWorkteamsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutModelPackageGroupPolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum QueryLineageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RegisterDevicesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RenderUiTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum RetryPipelineExecutionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SearchOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SendPipelineExecutionStepFailureOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum SendPipelineExecutionStepSuccessOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartEdgeDeploymentStageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartInferenceExperimentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartMlflowTrackingServerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartMonitoringScheduleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartNotebookInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartPipelineExecutionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopAutoMLJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopCompilationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopEdgeDeploymentStageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopEdgePackagingJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopHyperParameterTuningJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopInferenceExperimentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopInferenceRecommendationsJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopLabelingJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopMlflowTrackingServerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopMonitoringScheduleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopNotebookInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopOptimizationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopPipelineExecutionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopProcessingJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopTrainingJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopTransformJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateActionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateAppImageConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateArtifactOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateClusterOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateClusterSoftwareOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateCodeRepositoryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateContextOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDeviceFleetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDevicesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateDomainOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEndpointWeightsAndCapacitiesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateExperimentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateFeatureGroupOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateFeatureMetadataOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateHubOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateImageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateImageVersionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateInferenceComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateInferenceComponentRuntimeConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateInferenceExperimentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateMlflowTrackingServerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateModelCardOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateModelPackageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateMonitoringAlertOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateMonitoringScheduleOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateNotebookInstanceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateNotebookInstanceLifecycleConfigOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePipelineOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdatePipelineExecutionOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateProjectOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateSpaceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateTrainingJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateTrialOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateTrialComponentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateUserProfileOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceInUse": return try ResourceInUse.makeError(baseError: baseError)
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            case "ResourceNotFound": return try ResourceNotFound.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateWorkforceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateWorkteamOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ResourceLimitExceeded": return try ResourceLimitExceeded.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension ResourceLimitExceeded {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceLimitExceeded {
        let reader = baseError.errorBodyReader
        var value = ResourceLimitExceeded()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFound {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFound {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFound()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceInUse {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceInUse {
        let reader = baseError.errorBodyReader
        var value = ResourceInUse()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension SageMakerClientTypes.Tag {

    static func write(value: SageMakerClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.BatchDescribeModelPackageSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.BatchDescribeModelPackageSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.BatchDescribeModelPackageSummary()
        value.modelPackageGroupName = try reader["ModelPackageGroupName"].readIfPresent() ?? ""
        value.modelPackageVersion = try reader["ModelPackageVersion"].readIfPresent()
        value.modelPackageArn = try reader["ModelPackageArn"].readIfPresent() ?? ""
        value.modelPackageDescription = try reader["ModelPackageDescription"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.inferenceSpecification = try reader["InferenceSpecification"].readIfPresent(with: SageMakerClientTypes.InferenceSpecification.read(from:))
        value.modelPackageStatus = try reader["ModelPackageStatus"].readIfPresent() ?? .sdkUnknown("")
        value.modelApprovalStatus = try reader["ModelApprovalStatus"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.InferenceSpecification {

    static func write(value: SageMakerClientTypes.InferenceSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Containers"].writeList(value.containers, memberWritingClosure: SageMakerClientTypes.ModelPackageContainerDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SupportedContentTypes"].writeList(value.supportedContentTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SupportedRealtimeInferenceInstanceTypes"].writeList(value.supportedRealtimeInferenceInstanceTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerClientTypes.ProductionVariantInstanceType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SupportedResponseMIMETypes"].writeList(value.supportedResponseMIMETypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SupportedTransformInstanceTypes"].writeList(value.supportedTransformInstanceTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerClientTypes.TransformInstanceType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InferenceSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InferenceSpecification()
        value.containers = try reader["Containers"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ModelPackageContainerDefinition.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.supportedTransformInstanceTypes = try reader["SupportedTransformInstanceTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SageMakerClientTypes.TransformInstanceType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.supportedRealtimeInferenceInstanceTypes = try reader["SupportedRealtimeInferenceInstanceTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SageMakerClientTypes.ProductionVariantInstanceType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.supportedContentTypes = try reader["SupportedContentTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.supportedResponseMIMETypes = try reader["SupportedResponseMIMETypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ModelPackageContainerDefinition {

    static func write(value: SageMakerClientTypes.ModelPackageContainerDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdditionalS3DataSource"].write(value.additionalS3DataSource, with: SageMakerClientTypes.AdditionalS3DataSource.write(value:to:))
        try writer["ContainerHostname"].write(value.containerHostname)
        try writer["Environment"].writeMap(value.environment, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Framework"].write(value.framework)
        try writer["FrameworkVersion"].write(value.frameworkVersion)
        try writer["Image"].write(value.image)
        try writer["ImageDigest"].write(value.imageDigest)
        try writer["ModelDataSource"].write(value.modelDataSource, with: SageMakerClientTypes.ModelDataSource.write(value:to:))
        try writer["ModelDataUrl"].write(value.modelDataUrl)
        try writer["ModelInput"].write(value.modelInput, with: SageMakerClientTypes.ModelInput.write(value:to:))
        try writer["NearestModelName"].write(value.nearestModelName)
        try writer["ProductId"].write(value.productId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelPackageContainerDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelPackageContainerDefinition()
        value.containerHostname = try reader["ContainerHostname"].readIfPresent()
        value.image = try reader["Image"].readIfPresent() ?? ""
        value.imageDigest = try reader["ImageDigest"].readIfPresent()
        value.modelDataUrl = try reader["ModelDataUrl"].readIfPresent()
        value.modelDataSource = try reader["ModelDataSource"].readIfPresent(with: SageMakerClientTypes.ModelDataSource.read(from:))
        value.productId = try reader["ProductId"].readIfPresent()
        value.environment = try reader["Environment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.modelInput = try reader["ModelInput"].readIfPresent(with: SageMakerClientTypes.ModelInput.read(from:))
        value.framework = try reader["Framework"].readIfPresent()
        value.frameworkVersion = try reader["FrameworkVersion"].readIfPresent()
        value.nearestModelName = try reader["NearestModelName"].readIfPresent()
        value.additionalS3DataSource = try reader["AdditionalS3DataSource"].readIfPresent(with: SageMakerClientTypes.AdditionalS3DataSource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.AdditionalS3DataSource {

    static func write(value: SageMakerClientTypes.AdditionalS3DataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CompressionType"].write(value.compressionType)
        try writer["S3DataType"].write(value.s3DataType)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AdditionalS3DataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AdditionalS3DataSource()
        value.s3DataType = try reader["S3DataType"].readIfPresent() ?? .sdkUnknown("")
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.compressionType = try reader["CompressionType"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ModelInput {

    static func write(value: SageMakerClientTypes.ModelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataInputConfig"].write(value.dataInputConfig)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelInput()
        value.dataInputConfig = try reader["DataInputConfig"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.ModelDataSource {

    static func write(value: SageMakerClientTypes.ModelDataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3DataSource"].write(value.s3DataSource, with: SageMakerClientTypes.S3ModelDataSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelDataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelDataSource()
        value.s3DataSource = try reader["S3DataSource"].readIfPresent(with: SageMakerClientTypes.S3ModelDataSource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.S3ModelDataSource {

    static func write(value: SageMakerClientTypes.S3ModelDataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CompressionType"].write(value.compressionType)
        try writer["HubAccessConfig"].write(value.hubAccessConfig, with: SageMakerClientTypes.InferenceHubAccessConfig.write(value:to:))
        try writer["ManifestS3Uri"].write(value.manifestS3Uri)
        try writer["ModelAccessConfig"].write(value.modelAccessConfig, with: SageMakerClientTypes.ModelAccessConfig.write(value:to:))
        try writer["S3DataType"].write(value.s3DataType)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.S3ModelDataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.S3ModelDataSource()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.s3DataType = try reader["S3DataType"].readIfPresent() ?? .sdkUnknown("")
        value.compressionType = try reader["CompressionType"].readIfPresent() ?? .sdkUnknown("")
        value.modelAccessConfig = try reader["ModelAccessConfig"].readIfPresent(with: SageMakerClientTypes.ModelAccessConfig.read(from:))
        value.hubAccessConfig = try reader["HubAccessConfig"].readIfPresent(with: SageMakerClientTypes.InferenceHubAccessConfig.read(from:))
        value.manifestS3Uri = try reader["ManifestS3Uri"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.InferenceHubAccessConfig {

    static func write(value: SageMakerClientTypes.InferenceHubAccessConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HubContentArn"].write(value.hubContentArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InferenceHubAccessConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InferenceHubAccessConfig()
        value.hubContentArn = try reader["HubContentArn"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.ModelAccessConfig {

    static func write(value: SageMakerClientTypes.ModelAccessConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AcceptEula"].write(value.acceptEula)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelAccessConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelAccessConfig()
        value.acceptEula = try reader["AcceptEula"].readIfPresent() ?? false
        return value
    }
}

extension SageMakerClientTypes.BatchDescribeModelPackageError {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.BatchDescribeModelPackageError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.BatchDescribeModelPackageError()
        value.errorCode = try reader["ErrorCode"].readIfPresent() ?? ""
        value.errorResponse = try reader["ErrorResponse"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.ActionSource {

    static func write(value: SageMakerClientTypes.ActionSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SourceId"].write(value.sourceId)
        try writer["SourceType"].write(value.sourceType)
        try writer["SourceUri"].write(value.sourceUri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ActionSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ActionSource()
        value.sourceUri = try reader["SourceUri"].readIfPresent() ?? ""
        value.sourceType = try reader["SourceType"].readIfPresent()
        value.sourceId = try reader["SourceId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.UserContext {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.UserContext {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.UserContext()
        value.userProfileArn = try reader["UserProfileArn"].readIfPresent()
        value.userProfileName = try reader["UserProfileName"].readIfPresent()
        value.domainId = try reader["DomainId"].readIfPresent()
        value.iamIdentity = try reader["IamIdentity"].readIfPresent(with: SageMakerClientTypes.IamIdentity.read(from:))
        return value
    }
}

extension SageMakerClientTypes.IamIdentity {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.IamIdentity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.IamIdentity()
        value.arn = try reader["Arn"].readIfPresent()
        value.principalId = try reader["PrincipalId"].readIfPresent()
        value.sourceIdentity = try reader["SourceIdentity"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.MetadataProperties {

    static func write(value: SageMakerClientTypes.MetadataProperties?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CommitId"].write(value.commitId)
        try writer["GeneratedBy"].write(value.generatedBy)
        try writer["ProjectId"].write(value.projectId)
        try writer["Repository"].write(value.repository)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MetadataProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MetadataProperties()
        value.commitId = try reader["CommitId"].readIfPresent()
        value.repository = try reader["Repository"].readIfPresent()
        value.generatedBy = try reader["GeneratedBy"].readIfPresent()
        value.projectId = try reader["ProjectId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TrainingSpecification {

    static func write(value: SageMakerClientTypes.TrainingSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdditionalS3DataSource"].write(value.additionalS3DataSource, with: SageMakerClientTypes.AdditionalS3DataSource.write(value:to:))
        try writer["MetricDefinitions"].writeList(value.metricDefinitions, memberWritingClosure: SageMakerClientTypes.MetricDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SupportedHyperParameters"].writeList(value.supportedHyperParameters, memberWritingClosure: SageMakerClientTypes.HyperParameterSpecification.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SupportedTrainingInstanceTypes"].writeList(value.supportedTrainingInstanceTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerClientTypes.TrainingInstanceType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SupportedTuningJobObjectiveMetrics"].writeList(value.supportedTuningJobObjectiveMetrics, memberWritingClosure: SageMakerClientTypes.HyperParameterTuningJobObjective.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SupportsDistributedTraining"].write(value.supportsDistributedTraining)
        try writer["TrainingChannels"].writeList(value.trainingChannels, memberWritingClosure: SageMakerClientTypes.ChannelSpecification.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TrainingImage"].write(value.trainingImage)
        try writer["TrainingImageDigest"].write(value.trainingImageDigest)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrainingSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrainingSpecification()
        value.trainingImage = try reader["TrainingImage"].readIfPresent() ?? ""
        value.trainingImageDigest = try reader["TrainingImageDigest"].readIfPresent()
        value.supportedHyperParameters = try reader["SupportedHyperParameters"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.HyperParameterSpecification.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.supportedTrainingInstanceTypes = try reader["SupportedTrainingInstanceTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SageMakerClientTypes.TrainingInstanceType>().read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.supportsDistributedTraining = try reader["SupportsDistributedTraining"].readIfPresent()
        value.metricDefinitions = try reader["MetricDefinitions"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.MetricDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.trainingChannels = try reader["TrainingChannels"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ChannelSpecification.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.supportedTuningJobObjectiveMetrics = try reader["SupportedTuningJobObjectiveMetrics"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.HyperParameterTuningJobObjective.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.additionalS3DataSource = try reader["AdditionalS3DataSource"].readIfPresent(with: SageMakerClientTypes.AdditionalS3DataSource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.HyperParameterTuningJobObjective {

    static func write(value: SageMakerClientTypes.HyperParameterTuningJobObjective?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MetricName"].write(value.metricName)
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HyperParameterTuningJobObjective {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HyperParameterTuningJobObjective()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.metricName = try reader["MetricName"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.ChannelSpecification {

    static func write(value: SageMakerClientTypes.ChannelSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["IsRequired"].write(value.isRequired)
        try writer["Name"].write(value.name)
        try writer["SupportedCompressionTypes"].writeList(value.supportedCompressionTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerClientTypes.CompressionType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SupportedContentTypes"].writeList(value.supportedContentTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SupportedInputModes"].writeList(value.supportedInputModes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerClientTypes.TrainingInputMode>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ChannelSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ChannelSpecification()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.description = try reader["Description"].readIfPresent()
        value.isRequired = try reader["IsRequired"].readIfPresent()
        value.supportedContentTypes = try reader["SupportedContentTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.supportedCompressionTypes = try reader["SupportedCompressionTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SageMakerClientTypes.CompressionType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.supportedInputModes = try reader["SupportedInputModes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SageMakerClientTypes.TrainingInputMode>().read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SageMakerClientTypes.MetricDefinition {

    static func write(value: SageMakerClientTypes.MetricDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Regex"].write(value.regex)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MetricDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MetricDefinition()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.regex = try reader["Regex"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.HyperParameterSpecification {

    static func write(value: SageMakerClientTypes.HyperParameterSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DefaultValue"].write(value.defaultValue)
        try writer["Description"].write(value.description)
        try writer["IsRequired"].write(value.isRequired)
        try writer["IsTunable"].write(value.isTunable)
        try writer["Name"].write(value.name)
        try writer["Range"].write(value.range, with: SageMakerClientTypes.ParameterRange.write(value:to:))
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HyperParameterSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HyperParameterSpecification()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.description = try reader["Description"].readIfPresent()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.range = try reader["Range"].readIfPresent(with: SageMakerClientTypes.ParameterRange.read(from:))
        value.isTunable = try reader["IsTunable"].readIfPresent()
        value.isRequired = try reader["IsRequired"].readIfPresent()
        value.defaultValue = try reader["DefaultValue"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ParameterRange {

    static func write(value: SageMakerClientTypes.ParameterRange?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CategoricalParameterRangeSpecification"].write(value.categoricalParameterRangeSpecification, with: SageMakerClientTypes.CategoricalParameterRangeSpecification.write(value:to:))
        try writer["ContinuousParameterRangeSpecification"].write(value.continuousParameterRangeSpecification, with: SageMakerClientTypes.ContinuousParameterRangeSpecification.write(value:to:))
        try writer["IntegerParameterRangeSpecification"].write(value.integerParameterRangeSpecification, with: SageMakerClientTypes.IntegerParameterRangeSpecification.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ParameterRange {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ParameterRange()
        value.integerParameterRangeSpecification = try reader["IntegerParameterRangeSpecification"].readIfPresent(with: SageMakerClientTypes.IntegerParameterRangeSpecification.read(from:))
        value.continuousParameterRangeSpecification = try reader["ContinuousParameterRangeSpecification"].readIfPresent(with: SageMakerClientTypes.ContinuousParameterRangeSpecification.read(from:))
        value.categoricalParameterRangeSpecification = try reader["CategoricalParameterRangeSpecification"].readIfPresent(with: SageMakerClientTypes.CategoricalParameterRangeSpecification.read(from:))
        return value
    }
}

extension SageMakerClientTypes.CategoricalParameterRangeSpecification {

    static func write(value: SageMakerClientTypes.CategoricalParameterRangeSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CategoricalParameterRangeSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CategoricalParameterRangeSpecification()
        value.values = try reader["Values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SageMakerClientTypes.ContinuousParameterRangeSpecification {

    static func write(value: SageMakerClientTypes.ContinuousParameterRangeSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxValue"].write(value.maxValue)
        try writer["MinValue"].write(value.minValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ContinuousParameterRangeSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ContinuousParameterRangeSpecification()
        value.minValue = try reader["MinValue"].readIfPresent() ?? ""
        value.maxValue = try reader["MaxValue"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.IntegerParameterRangeSpecification {

    static func write(value: SageMakerClientTypes.IntegerParameterRangeSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxValue"].write(value.maxValue)
        try writer["MinValue"].write(value.minValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.IntegerParameterRangeSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.IntegerParameterRangeSpecification()
        value.minValue = try reader["MinValue"].readIfPresent() ?? ""
        value.maxValue = try reader["MaxValue"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.AlgorithmValidationSpecification {

    static func write(value: SageMakerClientTypes.AlgorithmValidationSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ValidationProfiles"].writeList(value.validationProfiles, memberWritingClosure: SageMakerClientTypes.AlgorithmValidationProfile.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ValidationRole"].write(value.validationRole)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AlgorithmValidationSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AlgorithmValidationSpecification()
        value.validationRole = try reader["ValidationRole"].readIfPresent() ?? ""
        value.validationProfiles = try reader["ValidationProfiles"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AlgorithmValidationProfile.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SageMakerClientTypes.AlgorithmValidationProfile {

    static func write(value: SageMakerClientTypes.AlgorithmValidationProfile?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProfileName"].write(value.profileName)
        try writer["TrainingJobDefinition"].write(value.trainingJobDefinition, with: SageMakerClientTypes.TrainingJobDefinition.write(value:to:))
        try writer["TransformJobDefinition"].write(value.transformJobDefinition, with: SageMakerClientTypes.TransformJobDefinition.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AlgorithmValidationProfile {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AlgorithmValidationProfile()
        value.profileName = try reader["ProfileName"].readIfPresent() ?? ""
        value.trainingJobDefinition = try reader["TrainingJobDefinition"].readIfPresent(with: SageMakerClientTypes.TrainingJobDefinition.read(from:))
        value.transformJobDefinition = try reader["TransformJobDefinition"].readIfPresent(with: SageMakerClientTypes.TransformJobDefinition.read(from:))
        return value
    }
}

extension SageMakerClientTypes.TransformJobDefinition {

    static func write(value: SageMakerClientTypes.TransformJobDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BatchStrategy"].write(value.batchStrategy)
        try writer["Environment"].writeMap(value.environment, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["MaxConcurrentTransforms"].write(value.maxConcurrentTransforms)
        try writer["MaxPayloadInMB"].write(value.maxPayloadInMB)
        try writer["TransformInput"].write(value.transformInput, with: SageMakerClientTypes.TransformInput.write(value:to:))
        try writer["TransformOutput"].write(value.transformOutput, with: SageMakerClientTypes.TransformOutput.write(value:to:))
        try writer["TransformResources"].write(value.transformResources, with: SageMakerClientTypes.TransformResources.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TransformJobDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TransformJobDefinition()
        value.maxConcurrentTransforms = try reader["MaxConcurrentTransforms"].readIfPresent()
        value.maxPayloadInMB = try reader["MaxPayloadInMB"].readIfPresent()
        value.batchStrategy = try reader["BatchStrategy"].readIfPresent()
        value.environment = try reader["Environment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.transformInput = try reader["TransformInput"].readIfPresent(with: SageMakerClientTypes.TransformInput.read(from:))
        value.transformOutput = try reader["TransformOutput"].readIfPresent(with: SageMakerClientTypes.TransformOutput.read(from:))
        value.transformResources = try reader["TransformResources"].readIfPresent(with: SageMakerClientTypes.TransformResources.read(from:))
        return value
    }
}

extension SageMakerClientTypes.TransformResources {

    static func write(value: SageMakerClientTypes.TransformResources?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InstanceCount"].write(value.instanceCount)
        try writer["InstanceType"].write(value.instanceType)
        try writer["VolumeKmsKeyId"].write(value.volumeKmsKeyId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TransformResources {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TransformResources()
        value.instanceType = try reader["InstanceType"].readIfPresent() ?? .sdkUnknown("")
        value.instanceCount = try reader["InstanceCount"].readIfPresent() ?? 0
        value.volumeKmsKeyId = try reader["VolumeKmsKeyId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TransformOutput {

    static func write(value: SageMakerClientTypes.TransformOutput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Accept"].write(value.accept)
        try writer["AssembleWith"].write(value.assembleWith)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["S3OutputPath"].write(value.s3OutputPath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TransformOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TransformOutput()
        value.s3OutputPath = try reader["S3OutputPath"].readIfPresent() ?? ""
        value.accept = try reader["Accept"].readIfPresent()
        value.assembleWith = try reader["AssembleWith"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TransformInput {

    static func write(value: SageMakerClientTypes.TransformInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CompressionType"].write(value.compressionType)
        try writer["ContentType"].write(value.contentType)
        try writer["DataSource"].write(value.dataSource, with: SageMakerClientTypes.TransformDataSource.write(value:to:))
        try writer["SplitType"].write(value.splitType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TransformInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TransformInput()
        value.dataSource = try reader["DataSource"].readIfPresent(with: SageMakerClientTypes.TransformDataSource.read(from:))
        value.contentType = try reader["ContentType"].readIfPresent()
        value.compressionType = try reader["CompressionType"].readIfPresent()
        value.splitType = try reader["SplitType"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TransformDataSource {

    static func write(value: SageMakerClientTypes.TransformDataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3DataSource"].write(value.s3DataSource, with: SageMakerClientTypes.TransformS3DataSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TransformDataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TransformDataSource()
        value.s3DataSource = try reader["S3DataSource"].readIfPresent(with: SageMakerClientTypes.TransformS3DataSource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.TransformS3DataSource {

    static func write(value: SageMakerClientTypes.TransformS3DataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3DataType"].write(value.s3DataType)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TransformS3DataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TransformS3DataSource()
        value.s3DataType = try reader["S3DataType"].readIfPresent() ?? .sdkUnknown("")
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.TrainingJobDefinition {

    static func write(value: SageMakerClientTypes.TrainingJobDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HyperParameters"].writeMap(value.hyperParameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["InputDataConfig"].writeList(value.inputDataConfig, memberWritingClosure: SageMakerClientTypes.Channel.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OutputDataConfig"].write(value.outputDataConfig, with: SageMakerClientTypes.OutputDataConfig.write(value:to:))
        try writer["ResourceConfig"].write(value.resourceConfig, with: SageMakerClientTypes.ResourceConfig.write(value:to:))
        try writer["StoppingCondition"].write(value.stoppingCondition, with: SageMakerClientTypes.StoppingCondition.write(value:to:))
        try writer["TrainingInputMode"].write(value.trainingInputMode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrainingJobDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrainingJobDefinition()
        value.trainingInputMode = try reader["TrainingInputMode"].readIfPresent() ?? .sdkUnknown("")
        value.hyperParameters = try reader["HyperParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.inputDataConfig = try reader["InputDataConfig"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Channel.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.outputDataConfig = try reader["OutputDataConfig"].readIfPresent(with: SageMakerClientTypes.OutputDataConfig.read(from:))
        value.resourceConfig = try reader["ResourceConfig"].readIfPresent(with: SageMakerClientTypes.ResourceConfig.read(from:))
        value.stoppingCondition = try reader["StoppingCondition"].readIfPresent(with: SageMakerClientTypes.StoppingCondition.read(from:))
        return value
    }
}

extension SageMakerClientTypes.StoppingCondition {

    static func write(value: SageMakerClientTypes.StoppingCondition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxPendingTimeInSeconds"].write(value.maxPendingTimeInSeconds)
        try writer["MaxRuntimeInSeconds"].write(value.maxRuntimeInSeconds)
        try writer["MaxWaitTimeInSeconds"].write(value.maxWaitTimeInSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.StoppingCondition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.StoppingCondition()
        value.maxRuntimeInSeconds = try reader["MaxRuntimeInSeconds"].readIfPresent()
        value.maxWaitTimeInSeconds = try reader["MaxWaitTimeInSeconds"].readIfPresent()
        value.maxPendingTimeInSeconds = try reader["MaxPendingTimeInSeconds"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ResourceConfig {

    static func write(value: SageMakerClientTypes.ResourceConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InstanceCount"].write(value.instanceCount)
        try writer["InstanceGroups"].writeList(value.instanceGroups, memberWritingClosure: SageMakerClientTypes.InstanceGroup.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InstanceType"].write(value.instanceType)
        try writer["KeepAlivePeriodInSeconds"].write(value.keepAlivePeriodInSeconds)
        try writer["VolumeKmsKeyId"].write(value.volumeKmsKeyId)
        try writer["VolumeSizeInGB"].write(value.volumeSizeInGB)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ResourceConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ResourceConfig()
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.instanceCount = try reader["InstanceCount"].readIfPresent()
        value.volumeSizeInGB = try reader["VolumeSizeInGB"].readIfPresent() ?? 0
        value.volumeKmsKeyId = try reader["VolumeKmsKeyId"].readIfPresent()
        value.keepAlivePeriodInSeconds = try reader["KeepAlivePeriodInSeconds"].readIfPresent()
        value.instanceGroups = try reader["InstanceGroups"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.InstanceGroup.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.InstanceGroup {

    static func write(value: SageMakerClientTypes.InstanceGroup?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InstanceCount"].write(value.instanceCount)
        try writer["InstanceGroupName"].write(value.instanceGroupName)
        try writer["InstanceType"].write(value.instanceType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InstanceGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InstanceGroup()
        value.instanceType = try reader["InstanceType"].readIfPresent() ?? .sdkUnknown("")
        value.instanceCount = try reader["InstanceCount"].readIfPresent() ?? 0
        value.instanceGroupName = try reader["InstanceGroupName"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.OutputDataConfig {

    static func write(value: SageMakerClientTypes.OutputDataConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CompressionType"].write(value.compressionType)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["S3OutputPath"].write(value.s3OutputPath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.OutputDataConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.OutputDataConfig()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.s3OutputPath = try reader["S3OutputPath"].readIfPresent() ?? ""
        value.compressionType = try reader["CompressionType"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.Channel {

    static func write(value: SageMakerClientTypes.Channel?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChannelName"].write(value.channelName)
        try writer["CompressionType"].write(value.compressionType)
        try writer["ContentType"].write(value.contentType)
        try writer["DataSource"].write(value.dataSource, with: SageMakerClientTypes.DataSource.write(value:to:))
        try writer["InputMode"].write(value.inputMode)
        try writer["RecordWrapperType"].write(value.recordWrapperType)
        try writer["ShuffleConfig"].write(value.shuffleConfig, with: SageMakerClientTypes.ShuffleConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Channel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Channel()
        value.channelName = try reader["ChannelName"].readIfPresent() ?? ""
        value.dataSource = try reader["DataSource"].readIfPresent(with: SageMakerClientTypes.DataSource.read(from:))
        value.contentType = try reader["ContentType"].readIfPresent()
        value.compressionType = try reader["CompressionType"].readIfPresent()
        value.recordWrapperType = try reader["RecordWrapperType"].readIfPresent()
        value.inputMode = try reader["InputMode"].readIfPresent()
        value.shuffleConfig = try reader["ShuffleConfig"].readIfPresent(with: SageMakerClientTypes.ShuffleConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ShuffleConfig {

    static func write(value: SageMakerClientTypes.ShuffleConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Seed"].write(value.seed)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ShuffleConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ShuffleConfig()
        value.seed = try reader["Seed"].readIfPresent() ?? 0
        return value
    }
}

extension SageMakerClientTypes.DataSource {

    static func write(value: SageMakerClientTypes.DataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FileSystemDataSource"].write(value.fileSystemDataSource, with: SageMakerClientTypes.FileSystemDataSource.write(value:to:))
        try writer["S3DataSource"].write(value.s3DataSource, with: SageMakerClientTypes.S3DataSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DataSource()
        value.s3DataSource = try reader["S3DataSource"].readIfPresent(with: SageMakerClientTypes.S3DataSource.read(from:))
        value.fileSystemDataSource = try reader["FileSystemDataSource"].readIfPresent(with: SageMakerClientTypes.FileSystemDataSource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.FileSystemDataSource {

    static func write(value: SageMakerClientTypes.FileSystemDataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DirectoryPath"].write(value.directoryPath)
        try writer["FileSystemAccessMode"].write(value.fileSystemAccessMode)
        try writer["FileSystemId"].write(value.fileSystemId)
        try writer["FileSystemType"].write(value.fileSystemType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.FileSystemDataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.FileSystemDataSource()
        value.fileSystemId = try reader["FileSystemId"].readIfPresent() ?? ""
        value.fileSystemAccessMode = try reader["FileSystemAccessMode"].readIfPresent() ?? .sdkUnknown("")
        value.fileSystemType = try reader["FileSystemType"].readIfPresent() ?? .sdkUnknown("")
        value.directoryPath = try reader["DirectoryPath"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.S3DataSource {

    static func write(value: SageMakerClientTypes.S3DataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AttributeNames"].writeList(value.attributeNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InstanceGroupNames"].writeList(value.instanceGroupNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["S3DataDistributionType"].write(value.s3DataDistributionType)
        try writer["S3DataType"].write(value.s3DataType)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.S3DataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.S3DataSource()
        value.s3DataType = try reader["S3DataType"].readIfPresent() ?? .sdkUnknown("")
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.s3DataDistributionType = try reader["S3DataDistributionType"].readIfPresent()
        value.attributeNames = try reader["AttributeNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.instanceGroupNames = try reader["InstanceGroupNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.AlgorithmStatusDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AlgorithmStatusDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AlgorithmStatusDetails()
        value.validationStatuses = try reader["ValidationStatuses"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AlgorithmStatusItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.imageScanStatuses = try reader["ImageScanStatuses"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AlgorithmStatusItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.AlgorithmStatusItem {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AlgorithmStatusItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AlgorithmStatusItem()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.failureReason = try reader["FailureReason"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ResourceSpec {

    static func write(value: SageMakerClientTypes.ResourceSpec?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InstanceType"].write(value.instanceType)
        try writer["LifecycleConfigArn"].write(value.lifecycleConfigArn)
        try writer["SageMakerImageArn"].write(value.sageMakerImageArn)
        try writer["SageMakerImageVersionAlias"].write(value.sageMakerImageVersionAlias)
        try writer["SageMakerImageVersionArn"].write(value.sageMakerImageVersionArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ResourceSpec {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ResourceSpec()
        value.sageMakerImageArn = try reader["SageMakerImageArn"].readIfPresent()
        value.sageMakerImageVersionArn = try reader["SageMakerImageVersionArn"].readIfPresent()
        value.sageMakerImageVersionAlias = try reader["SageMakerImageVersionAlias"].readIfPresent()
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.lifecycleConfigArn = try reader["LifecycleConfigArn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.KernelGatewayImageConfig {

    static func write(value: SageMakerClientTypes.KernelGatewayImageConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FileSystemConfig"].write(value.fileSystemConfig, with: SageMakerClientTypes.FileSystemConfig.write(value:to:))
        try writer["KernelSpecs"].writeList(value.kernelSpecs, memberWritingClosure: SageMakerClientTypes.KernelSpec.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.KernelGatewayImageConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.KernelGatewayImageConfig()
        value.kernelSpecs = try reader["KernelSpecs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.KernelSpec.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.fileSystemConfig = try reader["FileSystemConfig"].readIfPresent(with: SageMakerClientTypes.FileSystemConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.FileSystemConfig {

    static func write(value: SageMakerClientTypes.FileSystemConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DefaultGid"].write(value.defaultGid)
        try writer["DefaultUid"].write(value.defaultUid)
        try writer["MountPath"].write(value.mountPath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.FileSystemConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.FileSystemConfig()
        value.mountPath = try reader["MountPath"].readIfPresent()
        value.defaultUid = try reader["DefaultUid"].readIfPresent()
        value.defaultGid = try reader["DefaultGid"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.KernelSpec {

    static func write(value: SageMakerClientTypes.KernelSpec?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DisplayName"].write(value.displayName)
        try writer["Name"].write(value.name)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.KernelSpec {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.KernelSpec()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.displayName = try reader["DisplayName"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.JupyterLabAppImageConfig {

    static func write(value: SageMakerClientTypes.JupyterLabAppImageConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContainerConfig"].write(value.containerConfig, with: SageMakerClientTypes.ContainerConfig.write(value:to:))
        try writer["FileSystemConfig"].write(value.fileSystemConfig, with: SageMakerClientTypes.FileSystemConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.JupyterLabAppImageConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.JupyterLabAppImageConfig()
        value.fileSystemConfig = try reader["FileSystemConfig"].readIfPresent(with: SageMakerClientTypes.FileSystemConfig.read(from:))
        value.containerConfig = try reader["ContainerConfig"].readIfPresent(with: SageMakerClientTypes.ContainerConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ContainerConfig {

    static func write(value: SageMakerClientTypes.ContainerConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContainerArguments"].writeList(value.containerArguments, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ContainerEntrypoint"].writeList(value.containerEntrypoint, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ContainerEnvironmentVariables"].writeMap(value.containerEnvironmentVariables, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ContainerConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ContainerConfig()
        value.containerArguments = try reader["ContainerArguments"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.containerEntrypoint = try reader["ContainerEntrypoint"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.containerEnvironmentVariables = try reader["ContainerEnvironmentVariables"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.CodeEditorAppImageConfig {

    static func write(value: SageMakerClientTypes.CodeEditorAppImageConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContainerConfig"].write(value.containerConfig, with: SageMakerClientTypes.ContainerConfig.write(value:to:))
        try writer["FileSystemConfig"].write(value.fileSystemConfig, with: SageMakerClientTypes.FileSystemConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CodeEditorAppImageConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CodeEditorAppImageConfig()
        value.fileSystemConfig = try reader["FileSystemConfig"].readIfPresent(with: SageMakerClientTypes.FileSystemConfig.read(from:))
        value.containerConfig = try reader["ContainerConfig"].readIfPresent(with: SageMakerClientTypes.ContainerConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ArtifactSource {

    static func write(value: SageMakerClientTypes.ArtifactSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SourceTypes"].writeList(value.sourceTypes, memberWritingClosure: SageMakerClientTypes.ArtifactSourceType.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SourceUri"].write(value.sourceUri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ArtifactSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ArtifactSource()
        value.sourceUri = try reader["SourceUri"].readIfPresent() ?? ""
        value.sourceTypes = try reader["SourceTypes"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ArtifactSourceType.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ArtifactSourceType {

    static func write(value: SageMakerClientTypes.ArtifactSourceType?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SourceIdType"].write(value.sourceIdType)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ArtifactSourceType {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ArtifactSourceType()
        value.sourceIdType = try reader["SourceIdType"].readIfPresent() ?? .sdkUnknown("")
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.AutoMLChannel {

    static func write(value: SageMakerClientTypes.AutoMLChannel?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChannelType"].write(value.channelType)
        try writer["CompressionType"].write(value.compressionType)
        try writer["ContentType"].write(value.contentType)
        try writer["DataSource"].write(value.dataSource, with: SageMakerClientTypes.AutoMLDataSource.write(value:to:))
        try writer["SampleWeightAttributeName"].write(value.sampleWeightAttributeName)
        try writer["TargetAttributeName"].write(value.targetAttributeName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLChannel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLChannel()
        value.dataSource = try reader["DataSource"].readIfPresent(with: SageMakerClientTypes.AutoMLDataSource.read(from:))
        value.compressionType = try reader["CompressionType"].readIfPresent()
        value.targetAttributeName = try reader["TargetAttributeName"].readIfPresent() ?? ""
        value.contentType = try reader["ContentType"].readIfPresent()
        value.channelType = try reader["ChannelType"].readIfPresent()
        value.sampleWeightAttributeName = try reader["SampleWeightAttributeName"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.AutoMLDataSource {

    static func write(value: SageMakerClientTypes.AutoMLDataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3DataSource"].write(value.s3DataSource, with: SageMakerClientTypes.AutoMLS3DataSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLDataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLDataSource()
        value.s3DataSource = try reader["S3DataSource"].readIfPresent(with: SageMakerClientTypes.AutoMLS3DataSource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.AutoMLS3DataSource {

    static func write(value: SageMakerClientTypes.AutoMLS3DataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3DataType"].write(value.s3DataType)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLS3DataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLS3DataSource()
        value.s3DataType = try reader["S3DataType"].readIfPresent() ?? .sdkUnknown("")
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.AutoMLOutputDataConfig {

    static func write(value: SageMakerClientTypes.AutoMLOutputDataConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["S3OutputPath"].write(value.s3OutputPath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLOutputDataConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLOutputDataConfig()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.s3OutputPath = try reader["S3OutputPath"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.AutoMLJobObjective {

    static func write(value: SageMakerClientTypes.AutoMLJobObjective?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MetricName"].write(value.metricName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLJobObjective {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLJobObjective()
        value.metricName = try reader["MetricName"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.AutoMLJobConfig {

    static func write(value: SageMakerClientTypes.AutoMLJobConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CandidateGenerationConfig"].write(value.candidateGenerationConfig, with: SageMakerClientTypes.AutoMLCandidateGenerationConfig.write(value:to:))
        try writer["CompletionCriteria"].write(value.completionCriteria, with: SageMakerClientTypes.AutoMLJobCompletionCriteria.write(value:to:))
        try writer["DataSplitConfig"].write(value.dataSplitConfig, with: SageMakerClientTypes.AutoMLDataSplitConfig.write(value:to:))
        try writer["Mode"].write(value.mode)
        try writer["SecurityConfig"].write(value.securityConfig, with: SageMakerClientTypes.AutoMLSecurityConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLJobConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLJobConfig()
        value.completionCriteria = try reader["CompletionCriteria"].readIfPresent(with: SageMakerClientTypes.AutoMLJobCompletionCriteria.read(from:))
        value.securityConfig = try reader["SecurityConfig"].readIfPresent(with: SageMakerClientTypes.AutoMLSecurityConfig.read(from:))
        value.candidateGenerationConfig = try reader["CandidateGenerationConfig"].readIfPresent(with: SageMakerClientTypes.AutoMLCandidateGenerationConfig.read(from:))
        value.dataSplitConfig = try reader["DataSplitConfig"].readIfPresent(with: SageMakerClientTypes.AutoMLDataSplitConfig.read(from:))
        value.mode = try reader["Mode"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.AutoMLDataSplitConfig {

    static func write(value: SageMakerClientTypes.AutoMLDataSplitConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ValidationFraction"].write(value.validationFraction)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLDataSplitConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLDataSplitConfig()
        value.validationFraction = try reader["ValidationFraction"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.AutoMLCandidateGenerationConfig {

    static func write(value: SageMakerClientTypes.AutoMLCandidateGenerationConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlgorithmsConfig"].writeList(value.algorithmsConfig, memberWritingClosure: SageMakerClientTypes.AutoMLAlgorithmConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FeatureSpecificationS3Uri"].write(value.featureSpecificationS3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLCandidateGenerationConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLCandidateGenerationConfig()
        value.featureSpecificationS3Uri = try reader["FeatureSpecificationS3Uri"].readIfPresent()
        value.algorithmsConfig = try reader["AlgorithmsConfig"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AutoMLAlgorithmConfig.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.AutoMLAlgorithmConfig {

    static func write(value: SageMakerClientTypes.AutoMLAlgorithmConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoMLAlgorithms"].writeList(value.autoMLAlgorithms, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerClientTypes.AutoMLAlgorithm>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLAlgorithmConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLAlgorithmConfig()
        value.autoMLAlgorithms = try reader["AutoMLAlgorithms"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SageMakerClientTypes.AutoMLAlgorithm>().read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SageMakerClientTypes.AutoMLSecurityConfig {

    static func write(value: SageMakerClientTypes.AutoMLSecurityConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnableInterContainerTrafficEncryption"].write(value.enableInterContainerTrafficEncryption)
        try writer["VolumeKmsKeyId"].write(value.volumeKmsKeyId)
        try writer["VpcConfig"].write(value.vpcConfig, with: SageMakerClientTypes.VpcConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLSecurityConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLSecurityConfig()
        value.volumeKmsKeyId = try reader["VolumeKmsKeyId"].readIfPresent()
        value.enableInterContainerTrafficEncryption = try reader["EnableInterContainerTrafficEncryption"].readIfPresent()
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: SageMakerClientTypes.VpcConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.VpcConfig {

    static func write(value: SageMakerClientTypes.VpcConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Subnets"].writeList(value.subnets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.VpcConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.VpcConfig()
        value.securityGroupIds = try reader["SecurityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.subnets = try reader["Subnets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SageMakerClientTypes.AutoMLJobCompletionCriteria {

    static func write(value: SageMakerClientTypes.AutoMLJobCompletionCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxAutoMLJobRuntimeInSeconds"].write(value.maxAutoMLJobRuntimeInSeconds)
        try writer["MaxCandidates"].write(value.maxCandidates)
        try writer["MaxRuntimePerTrainingJobInSeconds"].write(value.maxRuntimePerTrainingJobInSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLJobCompletionCriteria {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLJobCompletionCriteria()
        value.maxCandidates = try reader["MaxCandidates"].readIfPresent()
        value.maxRuntimePerTrainingJobInSeconds = try reader["MaxRuntimePerTrainingJobInSeconds"].readIfPresent()
        value.maxAutoMLJobRuntimeInSeconds = try reader["MaxAutoMLJobRuntimeInSeconds"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.AutoMLPartialFailureReason {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLPartialFailureReason {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLPartialFailureReason()
        value.partialFailureMessage = try reader["PartialFailureMessage"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.AutoMLCandidate {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLCandidate {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLCandidate()
        value.candidateName = try reader["CandidateName"].readIfPresent() ?? ""
        value.finalAutoMLJobObjectiveMetric = try reader["FinalAutoMLJobObjectiveMetric"].readIfPresent(with: SageMakerClientTypes.FinalAutoMLJobObjectiveMetric.read(from:))
        value.objectiveStatus = try reader["ObjectiveStatus"].readIfPresent() ?? .sdkUnknown("")
        value.candidateSteps = try reader["CandidateSteps"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AutoMLCandidateStep.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.candidateStatus = try reader["CandidateStatus"].readIfPresent() ?? .sdkUnknown("")
        value.inferenceContainers = try reader["InferenceContainers"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AutoMLContainerDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.candidateProperties = try reader["CandidateProperties"].readIfPresent(with: SageMakerClientTypes.CandidateProperties.read(from:))
        value.inferenceContainerDefinitions = try reader["InferenceContainerDefinitions"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.listReadingClosure(memberReadingClosure: SageMakerClientTypes.AutoMLContainerDefinition.read(from:), memberNodeInfo: "member", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.AutoMLContainerDefinition {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLContainerDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLContainerDefinition()
        value.image = try reader["Image"].readIfPresent() ?? ""
        value.modelDataUrl = try reader["ModelDataUrl"].readIfPresent() ?? ""
        value.environment = try reader["Environment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.CandidateProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CandidateProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CandidateProperties()
        value.candidateArtifactLocations = try reader["CandidateArtifactLocations"].readIfPresent(with: SageMakerClientTypes.CandidateArtifactLocations.read(from:))
        value.candidateMetrics = try reader["CandidateMetrics"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.MetricDatum.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.MetricDatum {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MetricDatum {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MetricDatum()
        value.metricName = try reader["MetricName"].readIfPresent()
        value.standardMetricName = try reader["StandardMetricName"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        value.`set` = try reader["Set"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.CandidateArtifactLocations {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CandidateArtifactLocations {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CandidateArtifactLocations()
        value.explainability = try reader["Explainability"].readIfPresent() ?? ""
        value.modelInsights = try reader["ModelInsights"].readIfPresent()
        value.backtestResults = try reader["BacktestResults"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.AutoMLCandidateStep {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLCandidateStep {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLCandidateStep()
        value.candidateStepType = try reader["CandidateStepType"].readIfPresent() ?? .sdkUnknown("")
        value.candidateStepArn = try reader["CandidateStepArn"].readIfPresent() ?? ""
        value.candidateStepName = try reader["CandidateStepName"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.FinalAutoMLJobObjectiveMetric {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.FinalAutoMLJobObjectiveMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.FinalAutoMLJobObjectiveMetric()
        value.type = try reader["Type"].readIfPresent()
        value.metricName = try reader["MetricName"].readIfPresent() ?? .sdkUnknown("")
        value.value = try reader["Value"].readIfPresent() ?? 0.0
        value.standardMetricName = try reader["StandardMetricName"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.AutoMLJobArtifacts {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLJobArtifacts {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLJobArtifacts()
        value.candidateDefinitionNotebookLocation = try reader["CandidateDefinitionNotebookLocation"].readIfPresent()
        value.dataExplorationNotebookLocation = try reader["DataExplorationNotebookLocation"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ResolvedAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ResolvedAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ResolvedAttributes()
        value.autoMLJobObjective = try reader["AutoMLJobObjective"].readIfPresent(with: SageMakerClientTypes.AutoMLJobObjective.read(from:))
        value.problemType = try reader["ProblemType"].readIfPresent()
        value.completionCriteria = try reader["CompletionCriteria"].readIfPresent(with: SageMakerClientTypes.AutoMLJobCompletionCriteria.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ModelDeployConfig {

    static func write(value: SageMakerClientTypes.ModelDeployConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoGenerateEndpointName"].write(value.autoGenerateEndpointName)
        try writer["EndpointName"].write(value.endpointName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelDeployConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelDeployConfig()
        value.autoGenerateEndpointName = try reader["AutoGenerateEndpointName"].readIfPresent()
        value.endpointName = try reader["EndpointName"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ModelDeployResult {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelDeployResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelDeployResult()
        value.endpointName = try reader["EndpointName"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.AutoMLJobChannel {

    static func write(value: SageMakerClientTypes.AutoMLJobChannel?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChannelType"].write(value.channelType)
        try writer["CompressionType"].write(value.compressionType)
        try writer["ContentType"].write(value.contentType)
        try writer["DataSource"].write(value.dataSource, with: SageMakerClientTypes.AutoMLDataSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLJobChannel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLJobChannel()
        value.channelType = try reader["ChannelType"].readIfPresent()
        value.contentType = try reader["ContentType"].readIfPresent()
        value.compressionType = try reader["CompressionType"].readIfPresent()
        value.dataSource = try reader["DataSource"].readIfPresent(with: SageMakerClientTypes.AutoMLDataSource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.AutoMLProblemTypeConfig {

    static func write(value: SageMakerClientTypes.AutoMLProblemTypeConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .imageclassificationjobconfig(imageclassificationjobconfig):
                try writer["ImageClassificationJobConfig"].write(imageclassificationjobconfig, with: SageMakerClientTypes.ImageClassificationJobConfig.write(value:to:))
            case let .tabularjobconfig(tabularjobconfig):
                try writer["TabularJobConfig"].write(tabularjobconfig, with: SageMakerClientTypes.TabularJobConfig.write(value:to:))
            case let .textclassificationjobconfig(textclassificationjobconfig):
                try writer["TextClassificationJobConfig"].write(textclassificationjobconfig, with: SageMakerClientTypes.TextClassificationJobConfig.write(value:to:))
            case let .textgenerationjobconfig(textgenerationjobconfig):
                try writer["TextGenerationJobConfig"].write(textgenerationjobconfig, with: SageMakerClientTypes.TextGenerationJobConfig.write(value:to:))
            case let .timeseriesforecastingjobconfig(timeseriesforecastingjobconfig):
                try writer["TimeSeriesForecastingJobConfig"].write(timeseriesforecastingjobconfig, with: SageMakerClientTypes.TimeSeriesForecastingJobConfig.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLProblemTypeConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "ImageClassificationJobConfig":
                return .imageclassificationjobconfig(try reader["ImageClassificationJobConfig"].read(with: SageMakerClientTypes.ImageClassificationJobConfig.read(from:)))
            case "TextClassificationJobConfig":
                return .textclassificationjobconfig(try reader["TextClassificationJobConfig"].read(with: SageMakerClientTypes.TextClassificationJobConfig.read(from:)))
            case "TimeSeriesForecastingJobConfig":
                return .timeseriesforecastingjobconfig(try reader["TimeSeriesForecastingJobConfig"].read(with: SageMakerClientTypes.TimeSeriesForecastingJobConfig.read(from:)))
            case "TabularJobConfig":
                return .tabularjobconfig(try reader["TabularJobConfig"].read(with: SageMakerClientTypes.TabularJobConfig.read(from:)))
            case "TextGenerationJobConfig":
                return .textgenerationjobconfig(try reader["TextGenerationJobConfig"].read(with: SageMakerClientTypes.TextGenerationJobConfig.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension SageMakerClientTypes.TextGenerationJobConfig {

    static func write(value: SageMakerClientTypes.TextGenerationJobConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BaseModelName"].write(value.baseModelName)
        try writer["CompletionCriteria"].write(value.completionCriteria, with: SageMakerClientTypes.AutoMLJobCompletionCriteria.write(value:to:))
        try writer["ModelAccessConfig"].write(value.modelAccessConfig, with: SageMakerClientTypes.ModelAccessConfig.write(value:to:))
        try writer["TextGenerationHyperParameters"].writeMap(value.textGenerationHyperParameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TextGenerationJobConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TextGenerationJobConfig()
        value.completionCriteria = try reader["CompletionCriteria"].readIfPresent(with: SageMakerClientTypes.AutoMLJobCompletionCriteria.read(from:))
        value.baseModelName = try reader["BaseModelName"].readIfPresent()
        value.textGenerationHyperParameters = try reader["TextGenerationHyperParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.modelAccessConfig = try reader["ModelAccessConfig"].readIfPresent(with: SageMakerClientTypes.ModelAccessConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.TabularJobConfig {

    static func write(value: SageMakerClientTypes.TabularJobConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CandidateGenerationConfig"].write(value.candidateGenerationConfig, with: SageMakerClientTypes.CandidateGenerationConfig.write(value:to:))
        try writer["CompletionCriteria"].write(value.completionCriteria, with: SageMakerClientTypes.AutoMLJobCompletionCriteria.write(value:to:))
        try writer["FeatureSpecificationS3Uri"].write(value.featureSpecificationS3Uri)
        try writer["GenerateCandidateDefinitionsOnly"].write(value.generateCandidateDefinitionsOnly)
        try writer["Mode"].write(value.mode)
        try writer["ProblemType"].write(value.problemType)
        try writer["SampleWeightAttributeName"].write(value.sampleWeightAttributeName)
        try writer["TargetAttributeName"].write(value.targetAttributeName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TabularJobConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TabularJobConfig()
        value.candidateGenerationConfig = try reader["CandidateGenerationConfig"].readIfPresent(with: SageMakerClientTypes.CandidateGenerationConfig.read(from:))
        value.completionCriteria = try reader["CompletionCriteria"].readIfPresent(with: SageMakerClientTypes.AutoMLJobCompletionCriteria.read(from:))
        value.featureSpecificationS3Uri = try reader["FeatureSpecificationS3Uri"].readIfPresent()
        value.mode = try reader["Mode"].readIfPresent()
        value.generateCandidateDefinitionsOnly = try reader["GenerateCandidateDefinitionsOnly"].readIfPresent()
        value.problemType = try reader["ProblemType"].readIfPresent()
        value.targetAttributeName = try reader["TargetAttributeName"].readIfPresent() ?? ""
        value.sampleWeightAttributeName = try reader["SampleWeightAttributeName"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.CandidateGenerationConfig {

    static func write(value: SageMakerClientTypes.CandidateGenerationConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlgorithmsConfig"].writeList(value.algorithmsConfig, memberWritingClosure: SageMakerClientTypes.AutoMLAlgorithmConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CandidateGenerationConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CandidateGenerationConfig()
        value.algorithmsConfig = try reader["AlgorithmsConfig"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AutoMLAlgorithmConfig.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.TimeSeriesForecastingJobConfig {

    static func write(value: SageMakerClientTypes.TimeSeriesForecastingJobConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CandidateGenerationConfig"].write(value.candidateGenerationConfig, with: SageMakerClientTypes.CandidateGenerationConfig.write(value:to:))
        try writer["CompletionCriteria"].write(value.completionCriteria, with: SageMakerClientTypes.AutoMLJobCompletionCriteria.write(value:to:))
        try writer["FeatureSpecificationS3Uri"].write(value.featureSpecificationS3Uri)
        try writer["ForecastFrequency"].write(value.forecastFrequency)
        try writer["ForecastHorizon"].write(value.forecastHorizon)
        try writer["ForecastQuantiles"].writeList(value.forecastQuantiles, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["HolidayConfig"].writeList(value.holidayConfig, memberWritingClosure: SageMakerClientTypes.HolidayConfigAttributes.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TimeSeriesConfig"].write(value.timeSeriesConfig, with: SageMakerClientTypes.TimeSeriesConfig.write(value:to:))
        try writer["Transformations"].write(value.transformations, with: SageMakerClientTypes.TimeSeriesTransformations.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TimeSeriesForecastingJobConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TimeSeriesForecastingJobConfig()
        value.featureSpecificationS3Uri = try reader["FeatureSpecificationS3Uri"].readIfPresent()
        value.completionCriteria = try reader["CompletionCriteria"].readIfPresent(with: SageMakerClientTypes.AutoMLJobCompletionCriteria.read(from:))
        value.forecastFrequency = try reader["ForecastFrequency"].readIfPresent() ?? ""
        value.forecastHorizon = try reader["ForecastHorizon"].readIfPresent() ?? 0
        value.forecastQuantiles = try reader["ForecastQuantiles"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.transformations = try reader["Transformations"].readIfPresent(with: SageMakerClientTypes.TimeSeriesTransformations.read(from:))
        value.timeSeriesConfig = try reader["TimeSeriesConfig"].readIfPresent(with: SageMakerClientTypes.TimeSeriesConfig.read(from:))
        value.holidayConfig = try reader["HolidayConfig"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.HolidayConfigAttributes.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.candidateGenerationConfig = try reader["CandidateGenerationConfig"].readIfPresent(with: SageMakerClientTypes.CandidateGenerationConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.HolidayConfigAttributes {

    static func write(value: SageMakerClientTypes.HolidayConfigAttributes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CountryCode"].write(value.countryCode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HolidayConfigAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HolidayConfigAttributes()
        value.countryCode = try reader["CountryCode"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TimeSeriesConfig {

    static func write(value: SageMakerClientTypes.TimeSeriesConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["GroupingAttributeNames"].writeList(value.groupingAttributeNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ItemIdentifierAttributeName"].write(value.itemIdentifierAttributeName)
        try writer["TargetAttributeName"].write(value.targetAttributeName)
        try writer["TimestampAttributeName"].write(value.timestampAttributeName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TimeSeriesConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TimeSeriesConfig()
        value.targetAttributeName = try reader["TargetAttributeName"].readIfPresent() ?? ""
        value.timestampAttributeName = try reader["TimestampAttributeName"].readIfPresent() ?? ""
        value.itemIdentifierAttributeName = try reader["ItemIdentifierAttributeName"].readIfPresent() ?? ""
        value.groupingAttributeNames = try reader["GroupingAttributeNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.TimeSeriesTransformations {

    static func write(value: SageMakerClientTypes.TimeSeriesTransformations?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Aggregation"].writeMap(value.aggregation, valueWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerClientTypes.AggregationTransformationValue>().write(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Filling"].writeMap(value.filling, valueWritingClosure: SmithyReadWrite.mapWritingClosure(valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TimeSeriesTransformations {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TimeSeriesTransformations()
        value.filling = try reader["Filling"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.mapReadingClosure(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.aggregation = try reader["Aggregation"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosureBox<SageMakerClientTypes.AggregationTransformationValue>().read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.TextClassificationJobConfig {

    static func write(value: SageMakerClientTypes.TextClassificationJobConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CompletionCriteria"].write(value.completionCriteria, with: SageMakerClientTypes.AutoMLJobCompletionCriteria.write(value:to:))
        try writer["ContentColumn"].write(value.contentColumn)
        try writer["TargetLabelColumn"].write(value.targetLabelColumn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TextClassificationJobConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TextClassificationJobConfig()
        value.completionCriteria = try reader["CompletionCriteria"].readIfPresent(with: SageMakerClientTypes.AutoMLJobCompletionCriteria.read(from:))
        value.contentColumn = try reader["ContentColumn"].readIfPresent() ?? ""
        value.targetLabelColumn = try reader["TargetLabelColumn"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.ImageClassificationJobConfig {

    static func write(value: SageMakerClientTypes.ImageClassificationJobConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CompletionCriteria"].write(value.completionCriteria, with: SageMakerClientTypes.AutoMLJobCompletionCriteria.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ImageClassificationJobConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ImageClassificationJobConfig()
        value.completionCriteria = try reader["CompletionCriteria"].readIfPresent(with: SageMakerClientTypes.AutoMLJobCompletionCriteria.read(from:))
        return value
    }
}

extension SageMakerClientTypes.AutoMLResolvedAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLResolvedAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLResolvedAttributes()
        value.autoMLJobObjective = try reader["AutoMLJobObjective"].readIfPresent(with: SageMakerClientTypes.AutoMLJobObjective.read(from:))
        value.completionCriteria = try reader["CompletionCriteria"].readIfPresent(with: SageMakerClientTypes.AutoMLJobCompletionCriteria.read(from:))
        value.autoMLProblemTypeResolvedAttributes = try reader["AutoMLProblemTypeResolvedAttributes"].readIfPresent(with: SageMakerClientTypes.AutoMLProblemTypeResolvedAttributes.read(from:))
        return value
    }
}

extension SageMakerClientTypes.AutoMLProblemTypeResolvedAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLProblemTypeResolvedAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "TabularResolvedAttributes":
                return .tabularresolvedattributes(try reader["TabularResolvedAttributes"].read(with: SageMakerClientTypes.TabularResolvedAttributes.read(from:)))
            case "TextGenerationResolvedAttributes":
                return .textgenerationresolvedattributes(try reader["TextGenerationResolvedAttributes"].read(with: SageMakerClientTypes.TextGenerationResolvedAttributes.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension SageMakerClientTypes.TextGenerationResolvedAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TextGenerationResolvedAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TextGenerationResolvedAttributes()
        value.baseModelName = try reader["BaseModelName"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TabularResolvedAttributes {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TabularResolvedAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TabularResolvedAttributes()
        value.problemType = try reader["ProblemType"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.AutoMLComputeConfig {

    static func write(value: SageMakerClientTypes.AutoMLComputeConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EmrServerlessComputeConfig"].write(value.emrServerlessComputeConfig, with: SageMakerClientTypes.EmrServerlessComputeConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLComputeConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLComputeConfig()
        value.emrServerlessComputeConfig = try reader["EmrServerlessComputeConfig"].readIfPresent(with: SageMakerClientTypes.EmrServerlessComputeConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.EmrServerlessComputeConfig {

    static func write(value: SageMakerClientTypes.EmrServerlessComputeConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExecutionRoleARN"].write(value.executionRoleARN)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EmrServerlessComputeConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EmrServerlessComputeConfig()
        value.executionRoleARN = try reader["ExecutionRoleARN"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.ClusterInstanceGroupDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ClusterInstanceGroupDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ClusterInstanceGroupDetails()
        value.currentCount = try reader["CurrentCount"].readIfPresent()
        value.targetCount = try reader["TargetCount"].readIfPresent()
        value.instanceGroupName = try reader["InstanceGroupName"].readIfPresent()
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.lifeCycleConfig = try reader["LifeCycleConfig"].readIfPresent(with: SageMakerClientTypes.ClusterLifeCycleConfig.read(from:))
        value.executionRole = try reader["ExecutionRole"].readIfPresent()
        value.threadsPerCore = try reader["ThreadsPerCore"].readIfPresent()
        value.instanceStorageConfigs = try reader["InstanceStorageConfigs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ClusterInstanceStorageConfig.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.onStartDeepHealthChecks = try reader["OnStartDeepHealthChecks"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SageMakerClientTypes.DeepHealthCheckType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ClusterInstanceStorageConfig {

    static func write(value: SageMakerClientTypes.ClusterInstanceStorageConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .ebsvolumeconfig(ebsvolumeconfig):
                try writer["EbsVolumeConfig"].write(ebsvolumeconfig, with: SageMakerClientTypes.ClusterEbsVolumeConfig.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ClusterInstanceStorageConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "EbsVolumeConfig":
                return .ebsvolumeconfig(try reader["EbsVolumeConfig"].read(with: SageMakerClientTypes.ClusterEbsVolumeConfig.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension SageMakerClientTypes.ClusterEbsVolumeConfig {

    static func write(value: SageMakerClientTypes.ClusterEbsVolumeConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["VolumeSizeInGB"].write(value.volumeSizeInGB)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ClusterEbsVolumeConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ClusterEbsVolumeConfig()
        value.volumeSizeInGB = try reader["VolumeSizeInGB"].readIfPresent() ?? 0
        return value
    }
}

extension SageMakerClientTypes.ClusterLifeCycleConfig {

    static func write(value: SageMakerClientTypes.ClusterLifeCycleConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OnCreate"].write(value.onCreate)
        try writer["SourceS3Uri"].write(value.sourceS3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ClusterLifeCycleConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ClusterLifeCycleConfig()
        value.sourceS3Uri = try reader["SourceS3Uri"].readIfPresent() ?? ""
        value.onCreate = try reader["OnCreate"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.ClusterOrchestrator {

    static func write(value: SageMakerClientTypes.ClusterOrchestrator?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Eks"].write(value.eks, with: SageMakerClientTypes.ClusterOrchestratorEksConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ClusterOrchestrator {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ClusterOrchestrator()
        value.eks = try reader["Eks"].readIfPresent(with: SageMakerClientTypes.ClusterOrchestratorEksConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ClusterOrchestratorEksConfig {

    static func write(value: SageMakerClientTypes.ClusterOrchestratorEksConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterArn"].write(value.clusterArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ClusterOrchestratorEksConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ClusterOrchestratorEksConfig()
        value.clusterArn = try reader["ClusterArn"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.ClusterNodeDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ClusterNodeDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ClusterNodeDetails()
        value.instanceGroupName = try reader["InstanceGroupName"].readIfPresent()
        value.instanceId = try reader["InstanceId"].readIfPresent()
        value.instanceStatus = try reader["InstanceStatus"].readIfPresent(with: SageMakerClientTypes.ClusterInstanceStatusDetails.read(from:))
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.launchTime = try reader["LaunchTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lifeCycleConfig = try reader["LifeCycleConfig"].readIfPresent(with: SageMakerClientTypes.ClusterLifeCycleConfig.read(from:))
        value.threadsPerCore = try reader["ThreadsPerCore"].readIfPresent()
        value.instanceStorageConfigs = try reader["InstanceStorageConfigs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ClusterInstanceStorageConfig.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.privatePrimaryIp = try reader["PrivatePrimaryIp"].readIfPresent()
        value.privateDnsHostname = try reader["PrivateDnsHostname"].readIfPresent()
        value.placement = try reader["Placement"].readIfPresent(with: SageMakerClientTypes.ClusterInstancePlacement.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ClusterInstancePlacement {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ClusterInstancePlacement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ClusterInstancePlacement()
        value.availabilityZone = try reader["AvailabilityZone"].readIfPresent()
        value.availabilityZoneId = try reader["AvailabilityZoneId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ClusterInstanceStatusDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ClusterInstanceStatusDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ClusterInstanceStatusDetails()
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.GitConfig {

    static func write(value: SageMakerClientTypes.GitConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Branch"].write(value.branch)
        try writer["RepositoryUrl"].write(value.repositoryUrl)
        try writer["SecretArn"].write(value.secretArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.GitConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.GitConfig()
        value.repositoryUrl = try reader["RepositoryUrl"].readIfPresent() ?? ""
        value.branch = try reader["Branch"].readIfPresent()
        value.secretArn = try reader["SecretArn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ModelArtifacts {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelArtifacts {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelArtifacts()
        value.s3ModelArtifacts = try reader["S3ModelArtifacts"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.ModelDigests {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelDigests {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelDigests()
        value.artifactDigest = try reader["ArtifactDigest"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.InputConfig {

    static func write(value: SageMakerClientTypes.InputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataInputConfig"].write(value.dataInputConfig)
        try writer["Framework"].write(value.framework)
        try writer["FrameworkVersion"].write(value.frameworkVersion)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InputConfig()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.dataInputConfig = try reader["DataInputConfig"].readIfPresent()
        value.framework = try reader["Framework"].readIfPresent() ?? .sdkUnknown("")
        value.frameworkVersion = try reader["FrameworkVersion"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.OutputConfig {

    static func write(value: SageMakerClientTypes.OutputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CompilerOptions"].write(value.compilerOptions)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["S3OutputLocation"].write(value.s3OutputLocation)
        try writer["TargetDevice"].write(value.targetDevice)
        try writer["TargetPlatform"].write(value.targetPlatform, with: SageMakerClientTypes.TargetPlatform.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.OutputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.OutputConfig()
        value.s3OutputLocation = try reader["S3OutputLocation"].readIfPresent() ?? ""
        value.targetDevice = try reader["TargetDevice"].readIfPresent()
        value.targetPlatform = try reader["TargetPlatform"].readIfPresent(with: SageMakerClientTypes.TargetPlatform.read(from:))
        value.compilerOptions = try reader["CompilerOptions"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TargetPlatform {

    static func write(value: SageMakerClientTypes.TargetPlatform?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Accelerator"].write(value.accelerator)
        try writer["Arch"].write(value.arch)
        try writer["Os"].write(value.os)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TargetPlatform {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TargetPlatform()
        value.os = try reader["Os"].readIfPresent() ?? .sdkUnknown("")
        value.arch = try reader["Arch"].readIfPresent() ?? .sdkUnknown("")
        value.accelerator = try reader["Accelerator"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.NeoVpcConfig {

    static func write(value: SageMakerClientTypes.NeoVpcConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Subnets"].writeList(value.subnets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.NeoVpcConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.NeoVpcConfig()
        value.securityGroupIds = try reader["SecurityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.subnets = try reader["Subnets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SageMakerClientTypes.DerivedInformation {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DerivedInformation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DerivedInformation()
        value.derivedDataInputConfig = try reader["DerivedDataInputConfig"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ContextSource {

    static func write(value: SageMakerClientTypes.ContextSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SourceId"].write(value.sourceId)
        try writer["SourceType"].write(value.sourceType)
        try writer["SourceUri"].write(value.sourceUri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ContextSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ContextSource()
        value.sourceUri = try reader["SourceUri"].readIfPresent() ?? ""
        value.sourceType = try reader["SourceType"].readIfPresent()
        value.sourceId = try reader["SourceId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.DataQualityBaselineConfig {

    static func write(value: SageMakerClientTypes.DataQualityBaselineConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BaseliningJobName"].write(value.baseliningJobName)
        try writer["ConstraintsResource"].write(value.constraintsResource, with: SageMakerClientTypes.MonitoringConstraintsResource.write(value:to:))
        try writer["StatisticsResource"].write(value.statisticsResource, with: SageMakerClientTypes.MonitoringStatisticsResource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DataQualityBaselineConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DataQualityBaselineConfig()
        value.baseliningJobName = try reader["BaseliningJobName"].readIfPresent()
        value.constraintsResource = try reader["ConstraintsResource"].readIfPresent(with: SageMakerClientTypes.MonitoringConstraintsResource.read(from:))
        value.statisticsResource = try reader["StatisticsResource"].readIfPresent(with: SageMakerClientTypes.MonitoringStatisticsResource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.MonitoringStatisticsResource {

    static func write(value: SageMakerClientTypes.MonitoringStatisticsResource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringStatisticsResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringStatisticsResource()
        value.s3Uri = try reader["S3Uri"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.MonitoringConstraintsResource {

    static func write(value: SageMakerClientTypes.MonitoringConstraintsResource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringConstraintsResource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringConstraintsResource()
        value.s3Uri = try reader["S3Uri"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.DataQualityAppSpecification {

    static func write(value: SageMakerClientTypes.DataQualityAppSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContainerArguments"].writeList(value.containerArguments, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ContainerEntrypoint"].writeList(value.containerEntrypoint, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Environment"].writeMap(value.environment, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ImageUri"].write(value.imageUri)
        try writer["PostAnalyticsProcessorSourceUri"].write(value.postAnalyticsProcessorSourceUri)
        try writer["RecordPreprocessorSourceUri"].write(value.recordPreprocessorSourceUri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DataQualityAppSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DataQualityAppSpecification()
        value.imageUri = try reader["ImageUri"].readIfPresent() ?? ""
        value.containerEntrypoint = try reader["ContainerEntrypoint"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.containerArguments = try reader["ContainerArguments"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.recordPreprocessorSourceUri = try reader["RecordPreprocessorSourceUri"].readIfPresent()
        value.postAnalyticsProcessorSourceUri = try reader["PostAnalyticsProcessorSourceUri"].readIfPresent()
        value.environment = try reader["Environment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.DataQualityJobInput {

    static func write(value: SageMakerClientTypes.DataQualityJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BatchTransformInput"].write(value.batchTransformInput, with: SageMakerClientTypes.BatchTransformInput.write(value:to:))
        try writer["EndpointInput"].write(value.endpointInput, with: SageMakerClientTypes.EndpointInput.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DataQualityJobInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DataQualityJobInput()
        value.endpointInput = try reader["EndpointInput"].readIfPresent(with: SageMakerClientTypes.EndpointInput.read(from:))
        value.batchTransformInput = try reader["BatchTransformInput"].readIfPresent(with: SageMakerClientTypes.BatchTransformInput.read(from:))
        return value
    }
}

extension SageMakerClientTypes.BatchTransformInput {

    static func write(value: SageMakerClientTypes.BatchTransformInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataCapturedDestinationS3Uri"].write(value.dataCapturedDestinationS3Uri)
        try writer["DatasetFormat"].write(value.datasetFormat, with: SageMakerClientTypes.MonitoringDatasetFormat.write(value:to:))
        try writer["EndTimeOffset"].write(value.endTimeOffset)
        try writer["ExcludeFeaturesAttribute"].write(value.excludeFeaturesAttribute)
        try writer["FeaturesAttribute"].write(value.featuresAttribute)
        try writer["InferenceAttribute"].write(value.inferenceAttribute)
        try writer["LocalPath"].write(value.localPath)
        try writer["ProbabilityAttribute"].write(value.probabilityAttribute)
        try writer["ProbabilityThresholdAttribute"].write(value.probabilityThresholdAttribute)
        try writer["S3DataDistributionType"].write(value.s3DataDistributionType)
        try writer["S3InputMode"].write(value.s3InputMode)
        try writer["StartTimeOffset"].write(value.startTimeOffset)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.BatchTransformInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.BatchTransformInput()
        value.dataCapturedDestinationS3Uri = try reader["DataCapturedDestinationS3Uri"].readIfPresent() ?? ""
        value.datasetFormat = try reader["DatasetFormat"].readIfPresent(with: SageMakerClientTypes.MonitoringDatasetFormat.read(from:))
        value.localPath = try reader["LocalPath"].readIfPresent() ?? ""
        value.s3InputMode = try reader["S3InputMode"].readIfPresent()
        value.s3DataDistributionType = try reader["S3DataDistributionType"].readIfPresent()
        value.featuresAttribute = try reader["FeaturesAttribute"].readIfPresent()
        value.inferenceAttribute = try reader["InferenceAttribute"].readIfPresent()
        value.probabilityAttribute = try reader["ProbabilityAttribute"].readIfPresent()
        value.probabilityThresholdAttribute = try reader["ProbabilityThresholdAttribute"].readIfPresent()
        value.startTimeOffset = try reader["StartTimeOffset"].readIfPresent()
        value.endTimeOffset = try reader["EndTimeOffset"].readIfPresent()
        value.excludeFeaturesAttribute = try reader["ExcludeFeaturesAttribute"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.MonitoringDatasetFormat {

    static func write(value: SageMakerClientTypes.MonitoringDatasetFormat?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Csv"].write(value.csv, with: SageMakerClientTypes.MonitoringCsvDatasetFormat.write(value:to:))
        try writer["Json"].write(value.json, with: SageMakerClientTypes.MonitoringJsonDatasetFormat.write(value:to:))
        try writer["Parquet"].write(value.parquet, with: SageMakerClientTypes.MonitoringParquetDatasetFormat.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringDatasetFormat {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringDatasetFormat()
        value.csv = try reader["Csv"].readIfPresent(with: SageMakerClientTypes.MonitoringCsvDatasetFormat.read(from:))
        value.json = try reader["Json"].readIfPresent(with: SageMakerClientTypes.MonitoringJsonDatasetFormat.read(from:))
        value.parquet = try reader["Parquet"].readIfPresent(with: SageMakerClientTypes.MonitoringParquetDatasetFormat.read(from:))
        return value
    }
}

extension SageMakerClientTypes.MonitoringParquetDatasetFormat {

    static func write(value: SageMakerClientTypes.MonitoringParquetDatasetFormat?, to writer: SmithyJSON.Writer) throws {
        guard value != nil else { return }
        _ = writer[""]  // create an empty structure
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringParquetDatasetFormat {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        return SageMakerClientTypes.MonitoringParquetDatasetFormat()
    }
}

extension SageMakerClientTypes.MonitoringJsonDatasetFormat {

    static func write(value: SageMakerClientTypes.MonitoringJsonDatasetFormat?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Line"].write(value.line)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringJsonDatasetFormat {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringJsonDatasetFormat()
        value.line = try reader["Line"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.MonitoringCsvDatasetFormat {

    static func write(value: SageMakerClientTypes.MonitoringCsvDatasetFormat?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Header"].write(value.header)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringCsvDatasetFormat {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringCsvDatasetFormat()
        value.header = try reader["Header"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.EndpointInput {

    static func write(value: SageMakerClientTypes.EndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndTimeOffset"].write(value.endTimeOffset)
        try writer["EndpointName"].write(value.endpointName)
        try writer["ExcludeFeaturesAttribute"].write(value.excludeFeaturesAttribute)
        try writer["FeaturesAttribute"].write(value.featuresAttribute)
        try writer["InferenceAttribute"].write(value.inferenceAttribute)
        try writer["LocalPath"].write(value.localPath)
        try writer["ProbabilityAttribute"].write(value.probabilityAttribute)
        try writer["ProbabilityThresholdAttribute"].write(value.probabilityThresholdAttribute)
        try writer["S3DataDistributionType"].write(value.s3DataDistributionType)
        try writer["S3InputMode"].write(value.s3InputMode)
        try writer["StartTimeOffset"].write(value.startTimeOffset)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EndpointInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EndpointInput()
        value.endpointName = try reader["EndpointName"].readIfPresent() ?? ""
        value.localPath = try reader["LocalPath"].readIfPresent() ?? ""
        value.s3InputMode = try reader["S3InputMode"].readIfPresent()
        value.s3DataDistributionType = try reader["S3DataDistributionType"].readIfPresent()
        value.featuresAttribute = try reader["FeaturesAttribute"].readIfPresent()
        value.inferenceAttribute = try reader["InferenceAttribute"].readIfPresent()
        value.probabilityAttribute = try reader["ProbabilityAttribute"].readIfPresent()
        value.probabilityThresholdAttribute = try reader["ProbabilityThresholdAttribute"].readIfPresent()
        value.startTimeOffset = try reader["StartTimeOffset"].readIfPresent()
        value.endTimeOffset = try reader["EndTimeOffset"].readIfPresent()
        value.excludeFeaturesAttribute = try reader["ExcludeFeaturesAttribute"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.MonitoringOutputConfig {

    static func write(value: SageMakerClientTypes.MonitoringOutputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["MonitoringOutputs"].writeList(value.monitoringOutputs, memberWritingClosure: SageMakerClientTypes.MonitoringOutput.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringOutputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringOutputConfig()
        value.monitoringOutputs = try reader["MonitoringOutputs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.MonitoringOutput.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.MonitoringOutput {

    static func write(value: SageMakerClientTypes.MonitoringOutput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Output"].write(value.s3Output, with: SageMakerClientTypes.MonitoringS3Output.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringOutput()
        value.s3Output = try reader["S3Output"].readIfPresent(with: SageMakerClientTypes.MonitoringS3Output.read(from:))
        return value
    }
}

extension SageMakerClientTypes.MonitoringS3Output {

    static func write(value: SageMakerClientTypes.MonitoringS3Output?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LocalPath"].write(value.localPath)
        try writer["S3UploadMode"].write(value.s3UploadMode)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringS3Output {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringS3Output()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.localPath = try reader["LocalPath"].readIfPresent() ?? ""
        value.s3UploadMode = try reader["S3UploadMode"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.MonitoringResources {

    static func write(value: SageMakerClientTypes.MonitoringResources?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterConfig"].write(value.clusterConfig, with: SageMakerClientTypes.MonitoringClusterConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringResources {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringResources()
        value.clusterConfig = try reader["ClusterConfig"].readIfPresent(with: SageMakerClientTypes.MonitoringClusterConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.MonitoringClusterConfig {

    static func write(value: SageMakerClientTypes.MonitoringClusterConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InstanceCount"].write(value.instanceCount)
        try writer["InstanceType"].write(value.instanceType)
        try writer["VolumeKmsKeyId"].write(value.volumeKmsKeyId)
        try writer["VolumeSizeInGB"].write(value.volumeSizeInGB)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringClusterConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringClusterConfig()
        value.instanceCount = try reader["InstanceCount"].readIfPresent() ?? 0
        value.instanceType = try reader["InstanceType"].readIfPresent() ?? .sdkUnknown("")
        value.volumeSizeInGB = try reader["VolumeSizeInGB"].readIfPresent() ?? 0
        value.volumeKmsKeyId = try reader["VolumeKmsKeyId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.MonitoringNetworkConfig {

    static func write(value: SageMakerClientTypes.MonitoringNetworkConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnableInterContainerTrafficEncryption"].write(value.enableInterContainerTrafficEncryption)
        try writer["EnableNetworkIsolation"].write(value.enableNetworkIsolation)
        try writer["VpcConfig"].write(value.vpcConfig, with: SageMakerClientTypes.VpcConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringNetworkConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringNetworkConfig()
        value.enableInterContainerTrafficEncryption = try reader["EnableInterContainerTrafficEncryption"].readIfPresent()
        value.enableNetworkIsolation = try reader["EnableNetworkIsolation"].readIfPresent()
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: SageMakerClientTypes.VpcConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.MonitoringStoppingCondition {

    static func write(value: SageMakerClientTypes.MonitoringStoppingCondition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxRuntimeInSeconds"].write(value.maxRuntimeInSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringStoppingCondition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringStoppingCondition()
        value.maxRuntimeInSeconds = try reader["MaxRuntimeInSeconds"].readIfPresent() ?? 0
        return value
    }
}

extension SageMakerClientTypes.EdgeModel {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EdgeModel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EdgeModel()
        value.modelName = try reader["ModelName"].readIfPresent() ?? ""
        value.modelVersion = try reader["ModelVersion"].readIfPresent() ?? ""
        value.latestSampleTime = try reader["LatestSampleTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.latestInference = try reader["LatestInference"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.EdgeOutputConfig {

    static func write(value: SageMakerClientTypes.EdgeOutputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["PresetDeploymentConfig"].write(value.presetDeploymentConfig)
        try writer["PresetDeploymentType"].write(value.presetDeploymentType)
        try writer["S3OutputLocation"].write(value.s3OutputLocation)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EdgeOutputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EdgeOutputConfig()
        value.s3OutputLocation = try reader["S3OutputLocation"].readIfPresent() ?? ""
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.presetDeploymentType = try reader["PresetDeploymentType"].readIfPresent()
        value.presetDeploymentConfig = try reader["PresetDeploymentConfig"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.UserSettings {

    static func write(value: SageMakerClientTypes.UserSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoMountHomeEFS"].write(value.autoMountHomeEFS)
        try writer["CanvasAppSettings"].write(value.canvasAppSettings, with: SageMakerClientTypes.CanvasAppSettings.write(value:to:))
        try writer["CodeEditorAppSettings"].write(value.codeEditorAppSettings, with: SageMakerClientTypes.CodeEditorAppSettings.write(value:to:))
        try writer["CustomFileSystemConfigs"].writeList(value.customFileSystemConfigs, memberWritingClosure: SageMakerClientTypes.CustomFileSystemConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CustomPosixUserConfig"].write(value.customPosixUserConfig, with: SageMakerClientTypes.CustomPosixUserConfig.write(value:to:))
        try writer["DefaultLandingUri"].write(value.defaultLandingUri)
        try writer["ExecutionRole"].write(value.executionRole)
        try writer["JupyterLabAppSettings"].write(value.jupyterLabAppSettings, with: SageMakerClientTypes.JupyterLabAppSettings.write(value:to:))
        try writer["JupyterServerAppSettings"].write(value.jupyterServerAppSettings, with: SageMakerClientTypes.JupyterServerAppSettings.write(value:to:))
        try writer["KernelGatewayAppSettings"].write(value.kernelGatewayAppSettings, with: SageMakerClientTypes.KernelGatewayAppSettings.write(value:to:))
        try writer["RSessionAppSettings"].write(value.rSessionAppSettings, with: SageMakerClientTypes.RSessionAppSettings.write(value:to:))
        try writer["RStudioServerProAppSettings"].write(value.rStudioServerProAppSettings, with: SageMakerClientTypes.RStudioServerProAppSettings.write(value:to:))
        try writer["SecurityGroups"].writeList(value.securityGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SharingSettings"].write(value.sharingSettings, with: SageMakerClientTypes.SharingSettings.write(value:to:))
        try writer["SpaceStorageSettings"].write(value.spaceStorageSettings, with: SageMakerClientTypes.DefaultSpaceStorageSettings.write(value:to:))
        try writer["StudioWebPortal"].write(value.studioWebPortal)
        try writer["StudioWebPortalSettings"].write(value.studioWebPortalSettings, with: SageMakerClientTypes.StudioWebPortalSettings.write(value:to:))
        try writer["TensorBoardAppSettings"].write(value.tensorBoardAppSettings, with: SageMakerClientTypes.TensorBoardAppSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.UserSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.UserSettings()
        value.executionRole = try reader["ExecutionRole"].readIfPresent()
        value.securityGroups = try reader["SecurityGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.sharingSettings = try reader["SharingSettings"].readIfPresent(with: SageMakerClientTypes.SharingSettings.read(from:))
        value.jupyterServerAppSettings = try reader["JupyterServerAppSettings"].readIfPresent(with: SageMakerClientTypes.JupyterServerAppSettings.read(from:))
        value.kernelGatewayAppSettings = try reader["KernelGatewayAppSettings"].readIfPresent(with: SageMakerClientTypes.KernelGatewayAppSettings.read(from:))
        value.tensorBoardAppSettings = try reader["TensorBoardAppSettings"].readIfPresent(with: SageMakerClientTypes.TensorBoardAppSettings.read(from:))
        value.rStudioServerProAppSettings = try reader["RStudioServerProAppSettings"].readIfPresent(with: SageMakerClientTypes.RStudioServerProAppSettings.read(from:))
        value.rSessionAppSettings = try reader["RSessionAppSettings"].readIfPresent(with: SageMakerClientTypes.RSessionAppSettings.read(from:))
        value.canvasAppSettings = try reader["CanvasAppSettings"].readIfPresent(with: SageMakerClientTypes.CanvasAppSettings.read(from:))
        value.codeEditorAppSettings = try reader["CodeEditorAppSettings"].readIfPresent(with: SageMakerClientTypes.CodeEditorAppSettings.read(from:))
        value.jupyterLabAppSettings = try reader["JupyterLabAppSettings"].readIfPresent(with: SageMakerClientTypes.JupyterLabAppSettings.read(from:))
        value.spaceStorageSettings = try reader["SpaceStorageSettings"].readIfPresent(with: SageMakerClientTypes.DefaultSpaceStorageSettings.read(from:))
        value.defaultLandingUri = try reader["DefaultLandingUri"].readIfPresent()
        value.studioWebPortal = try reader["StudioWebPortal"].readIfPresent()
        value.customPosixUserConfig = try reader["CustomPosixUserConfig"].readIfPresent(with: SageMakerClientTypes.CustomPosixUserConfig.read(from:))
        value.customFileSystemConfigs = try reader["CustomFileSystemConfigs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.CustomFileSystemConfig.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.studioWebPortalSettings = try reader["StudioWebPortalSettings"].readIfPresent(with: SageMakerClientTypes.StudioWebPortalSettings.read(from:))
        value.autoMountHomeEFS = try reader["AutoMountHomeEFS"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.StudioWebPortalSettings {

    static func write(value: SageMakerClientTypes.StudioWebPortalSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HiddenAppTypes"].writeList(value.hiddenAppTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerClientTypes.AppType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["HiddenMlTools"].writeList(value.hiddenMlTools, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerClientTypes.MlTools>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.StudioWebPortalSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.StudioWebPortalSettings()
        value.hiddenMlTools = try reader["HiddenMlTools"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SageMakerClientTypes.MlTools>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.hiddenAppTypes = try reader["HiddenAppTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SageMakerClientTypes.AppType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.CustomFileSystemConfig {

    static func write(value: SageMakerClientTypes.CustomFileSystemConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .efsfilesystemconfig(efsfilesystemconfig):
                try writer["EFSFileSystemConfig"].write(efsfilesystemconfig, with: SageMakerClientTypes.EFSFileSystemConfig.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CustomFileSystemConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "EFSFileSystemConfig":
                return .efsfilesystemconfig(try reader["EFSFileSystemConfig"].read(with: SageMakerClientTypes.EFSFileSystemConfig.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension SageMakerClientTypes.EFSFileSystemConfig {

    static func write(value: SageMakerClientTypes.EFSFileSystemConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FileSystemId"].write(value.fileSystemId)
        try writer["FileSystemPath"].write(value.fileSystemPath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EFSFileSystemConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EFSFileSystemConfig()
        value.fileSystemId = try reader["FileSystemId"].readIfPresent() ?? ""
        value.fileSystemPath = try reader["FileSystemPath"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.CustomPosixUserConfig {

    static func write(value: SageMakerClientTypes.CustomPosixUserConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Gid"].write(value.gid)
        try writer["Uid"].write(value.uid)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CustomPosixUserConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CustomPosixUserConfig()
        value.uid = try reader["Uid"].readIfPresent() ?? 0
        value.gid = try reader["Gid"].readIfPresent() ?? 0
        return value
    }
}

extension SageMakerClientTypes.DefaultSpaceStorageSettings {

    static func write(value: SageMakerClientTypes.DefaultSpaceStorageSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DefaultEbsStorageSettings"].write(value.defaultEbsStorageSettings, with: SageMakerClientTypes.DefaultEbsStorageSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DefaultSpaceStorageSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DefaultSpaceStorageSettings()
        value.defaultEbsStorageSettings = try reader["DefaultEbsStorageSettings"].readIfPresent(with: SageMakerClientTypes.DefaultEbsStorageSettings.read(from:))
        return value
    }
}

extension SageMakerClientTypes.DefaultEbsStorageSettings {

    static func write(value: SageMakerClientTypes.DefaultEbsStorageSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DefaultEbsVolumeSizeInGb"].write(value.defaultEbsVolumeSizeInGb)
        try writer["MaximumEbsVolumeSizeInGb"].write(value.maximumEbsVolumeSizeInGb)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DefaultEbsStorageSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DefaultEbsStorageSettings()
        value.defaultEbsVolumeSizeInGb = try reader["DefaultEbsVolumeSizeInGb"].readIfPresent() ?? 0
        value.maximumEbsVolumeSizeInGb = try reader["MaximumEbsVolumeSizeInGb"].readIfPresent() ?? 0
        return value
    }
}

extension SageMakerClientTypes.JupyterLabAppSettings {

    static func write(value: SageMakerClientTypes.JupyterLabAppSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppLifecycleManagement"].write(value.appLifecycleManagement, with: SageMakerClientTypes.AppLifecycleManagement.write(value:to:))
        try writer["CodeRepositories"].writeList(value.codeRepositories, memberWritingClosure: SageMakerClientTypes.CodeRepository.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CustomImages"].writeList(value.customImages, memberWritingClosure: SageMakerClientTypes.CustomImage.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DefaultResourceSpec"].write(value.defaultResourceSpec, with: SageMakerClientTypes.ResourceSpec.write(value:to:))
        try writer["EmrSettings"].write(value.emrSettings, with: SageMakerClientTypes.EmrSettings.write(value:to:))
        try writer["LifecycleConfigArns"].writeList(value.lifecycleConfigArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.JupyterLabAppSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.JupyterLabAppSettings()
        value.defaultResourceSpec = try reader["DefaultResourceSpec"].readIfPresent(with: SageMakerClientTypes.ResourceSpec.read(from:))
        value.customImages = try reader["CustomImages"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.CustomImage.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lifecycleConfigArns = try reader["LifecycleConfigArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.codeRepositories = try reader["CodeRepositories"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.CodeRepository.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.appLifecycleManagement = try reader["AppLifecycleManagement"].readIfPresent(with: SageMakerClientTypes.AppLifecycleManagement.read(from:))
        value.emrSettings = try reader["EmrSettings"].readIfPresent(with: SageMakerClientTypes.EmrSettings.read(from:))
        return value
    }
}

extension SageMakerClientTypes.EmrSettings {

    static func write(value: SageMakerClientTypes.EmrSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AssumableRoleArns"].writeList(value.assumableRoleArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ExecutionRoleArns"].writeList(value.executionRoleArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EmrSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EmrSettings()
        value.assumableRoleArns = try reader["AssumableRoleArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.executionRoleArns = try reader["ExecutionRoleArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.AppLifecycleManagement {

    static func write(value: SageMakerClientTypes.AppLifecycleManagement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IdleSettings"].write(value.idleSettings, with: SageMakerClientTypes.IdleSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AppLifecycleManagement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AppLifecycleManagement()
        value.idleSettings = try reader["IdleSettings"].readIfPresent(with: SageMakerClientTypes.IdleSettings.read(from:))
        return value
    }
}

extension SageMakerClientTypes.IdleSettings {

    static func write(value: SageMakerClientTypes.IdleSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IdleTimeoutInMinutes"].write(value.idleTimeoutInMinutes)
        try writer["LifecycleManagement"].write(value.lifecycleManagement)
        try writer["MaxIdleTimeoutInMinutes"].write(value.maxIdleTimeoutInMinutes)
        try writer["MinIdleTimeoutInMinutes"].write(value.minIdleTimeoutInMinutes)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.IdleSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.IdleSettings()
        value.lifecycleManagement = try reader["LifecycleManagement"].readIfPresent()
        value.idleTimeoutInMinutes = try reader["IdleTimeoutInMinutes"].readIfPresent()
        value.minIdleTimeoutInMinutes = try reader["MinIdleTimeoutInMinutes"].readIfPresent()
        value.maxIdleTimeoutInMinutes = try reader["MaxIdleTimeoutInMinutes"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.CodeRepository {

    static func write(value: SageMakerClientTypes.CodeRepository?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RepositoryUrl"].write(value.repositoryUrl)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CodeRepository {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CodeRepository()
        value.repositoryUrl = try reader["RepositoryUrl"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.CustomImage {

    static func write(value: SageMakerClientTypes.CustomImage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppImageConfigName"].write(value.appImageConfigName)
        try writer["ImageName"].write(value.imageName)
        try writer["ImageVersionNumber"].write(value.imageVersionNumber)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CustomImage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CustomImage()
        value.imageName = try reader["ImageName"].readIfPresent() ?? ""
        value.imageVersionNumber = try reader["ImageVersionNumber"].readIfPresent()
        value.appImageConfigName = try reader["AppImageConfigName"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.CodeEditorAppSettings {

    static func write(value: SageMakerClientTypes.CodeEditorAppSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppLifecycleManagement"].write(value.appLifecycleManagement, with: SageMakerClientTypes.AppLifecycleManagement.write(value:to:))
        try writer["CustomImages"].writeList(value.customImages, memberWritingClosure: SageMakerClientTypes.CustomImage.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DefaultResourceSpec"].write(value.defaultResourceSpec, with: SageMakerClientTypes.ResourceSpec.write(value:to:))
        try writer["LifecycleConfigArns"].writeList(value.lifecycleConfigArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CodeEditorAppSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CodeEditorAppSettings()
        value.defaultResourceSpec = try reader["DefaultResourceSpec"].readIfPresent(with: SageMakerClientTypes.ResourceSpec.read(from:))
        value.customImages = try reader["CustomImages"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.CustomImage.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lifecycleConfigArns = try reader["LifecycleConfigArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.appLifecycleManagement = try reader["AppLifecycleManagement"].readIfPresent(with: SageMakerClientTypes.AppLifecycleManagement.read(from:))
        return value
    }
}

extension SageMakerClientTypes.CanvasAppSettings {

    static func write(value: SageMakerClientTypes.CanvasAppSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DirectDeploySettings"].write(value.directDeploySettings, with: SageMakerClientTypes.DirectDeploySettings.write(value:to:))
        try writer["EmrServerlessSettings"].write(value.emrServerlessSettings, with: SageMakerClientTypes.EmrServerlessSettings.write(value:to:))
        try writer["GenerativeAiSettings"].write(value.generativeAiSettings, with: SageMakerClientTypes.GenerativeAiSettings.write(value:to:))
        try writer["IdentityProviderOAuthSettings"].writeList(value.identityProviderOAuthSettings, memberWritingClosure: SageMakerClientTypes.IdentityProviderOAuthSetting.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KendraSettings"].write(value.kendraSettings, with: SageMakerClientTypes.KendraSettings.write(value:to:))
        try writer["ModelRegisterSettings"].write(value.modelRegisterSettings, with: SageMakerClientTypes.ModelRegisterSettings.write(value:to:))
        try writer["TimeSeriesForecastingSettings"].write(value.timeSeriesForecastingSettings, with: SageMakerClientTypes.TimeSeriesForecastingSettings.write(value:to:))
        try writer["WorkspaceSettings"].write(value.workspaceSettings, with: SageMakerClientTypes.WorkspaceSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CanvasAppSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CanvasAppSettings()
        value.timeSeriesForecastingSettings = try reader["TimeSeriesForecastingSettings"].readIfPresent(with: SageMakerClientTypes.TimeSeriesForecastingSettings.read(from:))
        value.modelRegisterSettings = try reader["ModelRegisterSettings"].readIfPresent(with: SageMakerClientTypes.ModelRegisterSettings.read(from:))
        value.workspaceSettings = try reader["WorkspaceSettings"].readIfPresent(with: SageMakerClientTypes.WorkspaceSettings.read(from:))
        value.identityProviderOAuthSettings = try reader["IdentityProviderOAuthSettings"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.IdentityProviderOAuthSetting.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.directDeploySettings = try reader["DirectDeploySettings"].readIfPresent(with: SageMakerClientTypes.DirectDeploySettings.read(from:))
        value.kendraSettings = try reader["KendraSettings"].readIfPresent(with: SageMakerClientTypes.KendraSettings.read(from:))
        value.generativeAiSettings = try reader["GenerativeAiSettings"].readIfPresent(with: SageMakerClientTypes.GenerativeAiSettings.read(from:))
        value.emrServerlessSettings = try reader["EmrServerlessSettings"].readIfPresent(with: SageMakerClientTypes.EmrServerlessSettings.read(from:))
        return value
    }
}

extension SageMakerClientTypes.EmrServerlessSettings {

    static func write(value: SageMakerClientTypes.EmrServerlessSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExecutionRoleArn"].write(value.executionRoleArn)
        try writer["Status"].write(value.status)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EmrServerlessSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EmrServerlessSettings()
        value.executionRoleArn = try reader["ExecutionRoleArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.GenerativeAiSettings {

    static func write(value: SageMakerClientTypes.GenerativeAiSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AmazonBedrockRoleArn"].write(value.amazonBedrockRoleArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.GenerativeAiSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.GenerativeAiSettings()
        value.amazonBedrockRoleArn = try reader["AmazonBedrockRoleArn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.KendraSettings {

    static func write(value: SageMakerClientTypes.KendraSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Status"].write(value.status)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.KendraSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.KendraSettings()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.DirectDeploySettings {

    static func write(value: SageMakerClientTypes.DirectDeploySettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Status"].write(value.status)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DirectDeploySettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DirectDeploySettings()
        value.status = try reader["Status"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.IdentityProviderOAuthSetting {

    static func write(value: SageMakerClientTypes.IdentityProviderOAuthSetting?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataSourceName"].write(value.dataSourceName)
        try writer["SecretArn"].write(value.secretArn)
        try writer["Status"].write(value.status)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.IdentityProviderOAuthSetting {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.IdentityProviderOAuthSetting()
        value.dataSourceName = try reader["DataSourceName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.secretArn = try reader["SecretArn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.WorkspaceSettings {

    static func write(value: SageMakerClientTypes.WorkspaceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3ArtifactPath"].write(value.s3ArtifactPath)
        try writer["S3KmsKeyId"].write(value.s3KmsKeyId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.WorkspaceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.WorkspaceSettings()
        value.s3ArtifactPath = try reader["S3ArtifactPath"].readIfPresent()
        value.s3KmsKeyId = try reader["S3KmsKeyId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ModelRegisterSettings {

    static func write(value: SageMakerClientTypes.ModelRegisterSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CrossAccountModelRegisterRoleArn"].write(value.crossAccountModelRegisterRoleArn)
        try writer["Status"].write(value.status)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelRegisterSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelRegisterSettings()
        value.status = try reader["Status"].readIfPresent()
        value.crossAccountModelRegisterRoleArn = try reader["CrossAccountModelRegisterRoleArn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TimeSeriesForecastingSettings {

    static func write(value: SageMakerClientTypes.TimeSeriesForecastingSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AmazonForecastRoleArn"].write(value.amazonForecastRoleArn)
        try writer["Status"].write(value.status)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TimeSeriesForecastingSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TimeSeriesForecastingSettings()
        value.status = try reader["Status"].readIfPresent()
        value.amazonForecastRoleArn = try reader["AmazonForecastRoleArn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.RSessionAppSettings {

    static func write(value: SageMakerClientTypes.RSessionAppSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomImages"].writeList(value.customImages, memberWritingClosure: SageMakerClientTypes.CustomImage.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DefaultResourceSpec"].write(value.defaultResourceSpec, with: SageMakerClientTypes.ResourceSpec.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RSessionAppSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RSessionAppSettings()
        value.defaultResourceSpec = try reader["DefaultResourceSpec"].readIfPresent(with: SageMakerClientTypes.ResourceSpec.read(from:))
        value.customImages = try reader["CustomImages"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.CustomImage.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.RStudioServerProAppSettings {

    static func write(value: SageMakerClientTypes.RStudioServerProAppSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessStatus"].write(value.accessStatus)
        try writer["UserGroup"].write(value.userGroup)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RStudioServerProAppSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RStudioServerProAppSettings()
        value.accessStatus = try reader["AccessStatus"].readIfPresent()
        value.userGroup = try reader["UserGroup"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TensorBoardAppSettings {

    static func write(value: SageMakerClientTypes.TensorBoardAppSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DefaultResourceSpec"].write(value.defaultResourceSpec, with: SageMakerClientTypes.ResourceSpec.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TensorBoardAppSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TensorBoardAppSettings()
        value.defaultResourceSpec = try reader["DefaultResourceSpec"].readIfPresent(with: SageMakerClientTypes.ResourceSpec.read(from:))
        return value
    }
}

extension SageMakerClientTypes.KernelGatewayAppSettings {

    static func write(value: SageMakerClientTypes.KernelGatewayAppSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomImages"].writeList(value.customImages, memberWritingClosure: SageMakerClientTypes.CustomImage.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DefaultResourceSpec"].write(value.defaultResourceSpec, with: SageMakerClientTypes.ResourceSpec.write(value:to:))
        try writer["LifecycleConfigArns"].writeList(value.lifecycleConfigArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.KernelGatewayAppSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.KernelGatewayAppSettings()
        value.defaultResourceSpec = try reader["DefaultResourceSpec"].readIfPresent(with: SageMakerClientTypes.ResourceSpec.read(from:))
        value.customImages = try reader["CustomImages"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.CustomImage.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lifecycleConfigArns = try reader["LifecycleConfigArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.JupyterServerAppSettings {

    static func write(value: SageMakerClientTypes.JupyterServerAppSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CodeRepositories"].writeList(value.codeRepositories, memberWritingClosure: SageMakerClientTypes.CodeRepository.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DefaultResourceSpec"].write(value.defaultResourceSpec, with: SageMakerClientTypes.ResourceSpec.write(value:to:))
        try writer["LifecycleConfigArns"].writeList(value.lifecycleConfigArns, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.JupyterServerAppSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.JupyterServerAppSettings()
        value.defaultResourceSpec = try reader["DefaultResourceSpec"].readIfPresent(with: SageMakerClientTypes.ResourceSpec.read(from:))
        value.lifecycleConfigArns = try reader["LifecycleConfigArns"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.codeRepositories = try reader["CodeRepositories"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.CodeRepository.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.SharingSettings {

    static func write(value: SageMakerClientTypes.SharingSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NotebookOutputOption"].write(value.notebookOutputOption)
        try writer["S3KmsKeyId"].write(value.s3KmsKeyId)
        try writer["S3OutputPath"].write(value.s3OutputPath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SharingSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SharingSettings()
        value.notebookOutputOption = try reader["NotebookOutputOption"].readIfPresent()
        value.s3OutputPath = try reader["S3OutputPath"].readIfPresent()
        value.s3KmsKeyId = try reader["S3KmsKeyId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.DomainSettings {

    static func write(value: SageMakerClientTypes.DomainSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AmazonQSettings"].write(value.amazonQSettings, with: SageMakerClientTypes.AmazonQSettings.write(value:to:))
        try writer["DockerSettings"].write(value.dockerSettings, with: SageMakerClientTypes.DockerSettings.write(value:to:))
        try writer["ExecutionRoleIdentityConfig"].write(value.executionRoleIdentityConfig)
        try writer["RStudioServerProDomainSettings"].write(value.rStudioServerProDomainSettings, with: SageMakerClientTypes.RStudioServerProDomainSettings.write(value:to:))
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DomainSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DomainSettings()
        value.securityGroupIds = try reader["SecurityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.rStudioServerProDomainSettings = try reader["RStudioServerProDomainSettings"].readIfPresent(with: SageMakerClientTypes.RStudioServerProDomainSettings.read(from:))
        value.executionRoleIdentityConfig = try reader["ExecutionRoleIdentityConfig"].readIfPresent()
        value.dockerSettings = try reader["DockerSettings"].readIfPresent(with: SageMakerClientTypes.DockerSettings.read(from:))
        value.amazonQSettings = try reader["AmazonQSettings"].readIfPresent(with: SageMakerClientTypes.AmazonQSettings.read(from:))
        return value
    }
}

extension SageMakerClientTypes.AmazonQSettings {

    static func write(value: SageMakerClientTypes.AmazonQSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["QProfileArn"].write(value.qProfileArn)
        try writer["Status"].write(value.status)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AmazonQSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AmazonQSettings()
        value.status = try reader["Status"].readIfPresent()
        value.qProfileArn = try reader["QProfileArn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.DockerSettings {

    static func write(value: SageMakerClientTypes.DockerSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnableDockerAccess"].write(value.enableDockerAccess)
        try writer["VpcOnlyTrustedAccounts"].writeList(value.vpcOnlyTrustedAccounts, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DockerSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DockerSettings()
        value.enableDockerAccess = try reader["EnableDockerAccess"].readIfPresent()
        value.vpcOnlyTrustedAccounts = try reader["VpcOnlyTrustedAccounts"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.RStudioServerProDomainSettings {

    static func write(value: SageMakerClientTypes.RStudioServerProDomainSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DefaultResourceSpec"].write(value.defaultResourceSpec, with: SageMakerClientTypes.ResourceSpec.write(value:to:))
        try writer["DomainExecutionRoleArn"].write(value.domainExecutionRoleArn)
        try writer["RStudioConnectUrl"].write(value.rStudioConnectUrl)
        try writer["RStudioPackageManagerUrl"].write(value.rStudioPackageManagerUrl)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RStudioServerProDomainSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RStudioServerProDomainSettings()
        value.domainExecutionRoleArn = try reader["DomainExecutionRoleArn"].readIfPresent() ?? ""
        value.rStudioConnectUrl = try reader["RStudioConnectUrl"].readIfPresent()
        value.rStudioPackageManagerUrl = try reader["RStudioPackageManagerUrl"].readIfPresent()
        value.defaultResourceSpec = try reader["DefaultResourceSpec"].readIfPresent(with: SageMakerClientTypes.ResourceSpec.read(from:))
        return value
    }
}

extension SageMakerClientTypes.DefaultSpaceSettings {

    static func write(value: SageMakerClientTypes.DefaultSpaceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CustomFileSystemConfigs"].writeList(value.customFileSystemConfigs, memberWritingClosure: SageMakerClientTypes.CustomFileSystemConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CustomPosixUserConfig"].write(value.customPosixUserConfig, with: SageMakerClientTypes.CustomPosixUserConfig.write(value:to:))
        try writer["ExecutionRole"].write(value.executionRole)
        try writer["JupyterLabAppSettings"].write(value.jupyterLabAppSettings, with: SageMakerClientTypes.JupyterLabAppSettings.write(value:to:))
        try writer["JupyterServerAppSettings"].write(value.jupyterServerAppSettings, with: SageMakerClientTypes.JupyterServerAppSettings.write(value:to:))
        try writer["KernelGatewayAppSettings"].write(value.kernelGatewayAppSettings, with: SageMakerClientTypes.KernelGatewayAppSettings.write(value:to:))
        try writer["SecurityGroups"].writeList(value.securityGroups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SpaceStorageSettings"].write(value.spaceStorageSettings, with: SageMakerClientTypes.DefaultSpaceStorageSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DefaultSpaceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DefaultSpaceSettings()
        value.executionRole = try reader["ExecutionRole"].readIfPresent()
        value.securityGroups = try reader["SecurityGroups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.jupyterServerAppSettings = try reader["JupyterServerAppSettings"].readIfPresent(with: SageMakerClientTypes.JupyterServerAppSettings.read(from:))
        value.kernelGatewayAppSettings = try reader["KernelGatewayAppSettings"].readIfPresent(with: SageMakerClientTypes.KernelGatewayAppSettings.read(from:))
        value.jupyterLabAppSettings = try reader["JupyterLabAppSettings"].readIfPresent(with: SageMakerClientTypes.JupyterLabAppSettings.read(from:))
        value.spaceStorageSettings = try reader["SpaceStorageSettings"].readIfPresent(with: SageMakerClientTypes.DefaultSpaceStorageSettings.read(from:))
        value.customPosixUserConfig = try reader["CustomPosixUserConfig"].readIfPresent(with: SageMakerClientTypes.CustomPosixUserConfig.read(from:))
        value.customFileSystemConfigs = try reader["CustomFileSystemConfigs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.CustomFileSystemConfig.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.EdgeDeploymentModelConfig {

    static func write(value: SageMakerClientTypes.EdgeDeploymentModelConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EdgePackagingJobName"].write(value.edgePackagingJobName)
        try writer["ModelHandle"].write(value.modelHandle)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EdgeDeploymentModelConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EdgeDeploymentModelConfig()
        value.modelHandle = try reader["ModelHandle"].readIfPresent() ?? ""
        value.edgePackagingJobName = try reader["EdgePackagingJobName"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.DeploymentStageStatusSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DeploymentStageStatusSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DeploymentStageStatusSummary()
        value.stageName = try reader["StageName"].readIfPresent() ?? ""
        value.deviceSelectionConfig = try reader["DeviceSelectionConfig"].readIfPresent(with: SageMakerClientTypes.DeviceSelectionConfig.read(from:))
        value.deploymentConfig = try reader["DeploymentConfig"].readIfPresent(with: SageMakerClientTypes.EdgeDeploymentConfig.read(from:))
        value.deploymentStatus = try reader["DeploymentStatus"].readIfPresent(with: SageMakerClientTypes.EdgeDeploymentStatus.read(from:))
        return value
    }
}

extension SageMakerClientTypes.EdgeDeploymentStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EdgeDeploymentStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EdgeDeploymentStatus()
        value.stageStatus = try reader["StageStatus"].readIfPresent() ?? .sdkUnknown("")
        value.edgeDeploymentSuccessInStage = try reader["EdgeDeploymentSuccessInStage"].readIfPresent() ?? 0
        value.edgeDeploymentPendingInStage = try reader["EdgeDeploymentPendingInStage"].readIfPresent() ?? 0
        value.edgeDeploymentFailedInStage = try reader["EdgeDeploymentFailedInStage"].readIfPresent() ?? 0
        value.edgeDeploymentStatusMessage = try reader["EdgeDeploymentStatusMessage"].readIfPresent()
        value.edgeDeploymentStageStartTime = try reader["EdgeDeploymentStageStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.EdgeDeploymentConfig {

    static func write(value: SageMakerClientTypes.EdgeDeploymentConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FailureHandlingPolicy"].write(value.failureHandlingPolicy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EdgeDeploymentConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EdgeDeploymentConfig()
        value.failureHandlingPolicy = try reader["FailureHandlingPolicy"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.DeviceSelectionConfig {

    static func write(value: SageMakerClientTypes.DeviceSelectionConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeviceNameContains"].write(value.deviceNameContains)
        try writer["DeviceNames"].writeList(value.deviceNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DeviceSubsetType"].write(value.deviceSubsetType)
        try writer["Percentage"].write(value.percentage)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DeviceSelectionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DeviceSelectionConfig()
        value.deviceSubsetType = try reader["DeviceSubsetType"].readIfPresent() ?? .sdkUnknown("")
        value.percentage = try reader["Percentage"].readIfPresent()
        value.deviceNames = try reader["DeviceNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.deviceNameContains = try reader["DeviceNameContains"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.EdgePresetDeploymentOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EdgePresetDeploymentOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EdgePresetDeploymentOutput()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.artifact = try reader["Artifact"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ProductionVariantSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProductionVariantSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProductionVariantSummary()
        value.variantName = try reader["VariantName"].readIfPresent() ?? ""
        value.deployedImages = try reader["DeployedImages"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.DeployedImage.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.currentWeight = try reader["CurrentWeight"].readIfPresent()
        value.desiredWeight = try reader["DesiredWeight"].readIfPresent()
        value.currentInstanceCount = try reader["CurrentInstanceCount"].readIfPresent()
        value.desiredInstanceCount = try reader["DesiredInstanceCount"].readIfPresent()
        value.variantStatus = try reader["VariantStatus"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ProductionVariantStatus.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.currentServerlessConfig = try reader["CurrentServerlessConfig"].readIfPresent(with: SageMakerClientTypes.ProductionVariantServerlessConfig.read(from:))
        value.desiredServerlessConfig = try reader["DesiredServerlessConfig"].readIfPresent(with: SageMakerClientTypes.ProductionVariantServerlessConfig.read(from:))
        value.managedInstanceScaling = try reader["ManagedInstanceScaling"].readIfPresent(with: SageMakerClientTypes.ProductionVariantManagedInstanceScaling.read(from:))
        value.routingConfig = try reader["RoutingConfig"].readIfPresent(with: SageMakerClientTypes.ProductionVariantRoutingConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ProductionVariantRoutingConfig {

    static func write(value: SageMakerClientTypes.ProductionVariantRoutingConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RoutingStrategy"].write(value.routingStrategy)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProductionVariantRoutingConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProductionVariantRoutingConfig()
        value.routingStrategy = try reader["RoutingStrategy"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.ProductionVariantManagedInstanceScaling {

    static func write(value: SageMakerClientTypes.ProductionVariantManagedInstanceScaling?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxInstanceCount"].write(value.maxInstanceCount)
        try writer["MinInstanceCount"].write(value.minInstanceCount)
        try writer["Status"].write(value.status)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProductionVariantManagedInstanceScaling {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProductionVariantManagedInstanceScaling()
        value.status = try reader["Status"].readIfPresent()
        value.minInstanceCount = try reader["MinInstanceCount"].readIfPresent()
        value.maxInstanceCount = try reader["MaxInstanceCount"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ProductionVariantServerlessConfig {

    static func write(value: SageMakerClientTypes.ProductionVariantServerlessConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxConcurrency"].write(value.maxConcurrency)
        try writer["MemorySizeInMB"].write(value.memorySizeInMB)
        try writer["ProvisionedConcurrency"].write(value.provisionedConcurrency)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProductionVariantServerlessConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProductionVariantServerlessConfig()
        value.memorySizeInMB = try reader["MemorySizeInMB"].readIfPresent() ?? 0
        value.maxConcurrency = try reader["MaxConcurrency"].readIfPresent() ?? 0
        value.provisionedConcurrency = try reader["ProvisionedConcurrency"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ProductionVariantStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProductionVariantStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProductionVariantStatus()
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.DeployedImage {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DeployedImage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DeployedImage()
        value.specifiedImage = try reader["SpecifiedImage"].readIfPresent()
        value.resolvedImage = try reader["ResolvedImage"].readIfPresent()
        value.resolutionTime = try reader["ResolutionTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.DataCaptureConfigSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DataCaptureConfigSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DataCaptureConfigSummary()
        value.enableCapture = try reader["EnableCapture"].readIfPresent() ?? false
        value.captureStatus = try reader["CaptureStatus"].readIfPresent() ?? .sdkUnknown("")
        value.currentSamplingPercentage = try reader["CurrentSamplingPercentage"].readIfPresent() ?? 0
        value.destinationS3Uri = try reader["DestinationS3Uri"].readIfPresent() ?? ""
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.DeploymentConfig {

    static func write(value: SageMakerClientTypes.DeploymentConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoRollbackConfiguration"].write(value.autoRollbackConfiguration, with: SageMakerClientTypes.AutoRollbackConfig.write(value:to:))
        try writer["BlueGreenUpdatePolicy"].write(value.blueGreenUpdatePolicy, with: SageMakerClientTypes.BlueGreenUpdatePolicy.write(value:to:))
        try writer["RollingUpdatePolicy"].write(value.rollingUpdatePolicy, with: SageMakerClientTypes.RollingUpdatePolicy.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DeploymentConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DeploymentConfig()
        value.blueGreenUpdatePolicy = try reader["BlueGreenUpdatePolicy"].readIfPresent(with: SageMakerClientTypes.BlueGreenUpdatePolicy.read(from:))
        value.rollingUpdatePolicy = try reader["RollingUpdatePolicy"].readIfPresent(with: SageMakerClientTypes.RollingUpdatePolicy.read(from:))
        value.autoRollbackConfiguration = try reader["AutoRollbackConfiguration"].readIfPresent(with: SageMakerClientTypes.AutoRollbackConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.AutoRollbackConfig {

    static func write(value: SageMakerClientTypes.AutoRollbackConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Alarms"].writeList(value.alarms, memberWritingClosure: SageMakerClientTypes.Alarm.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoRollbackConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoRollbackConfig()
        value.alarms = try reader["Alarms"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Alarm.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.Alarm {

    static func write(value: SageMakerClientTypes.Alarm?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlarmName"].write(value.alarmName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Alarm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Alarm()
        value.alarmName = try reader["AlarmName"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.RollingUpdatePolicy {

    static func write(value: SageMakerClientTypes.RollingUpdatePolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaximumBatchSize"].write(value.maximumBatchSize, with: SageMakerClientTypes.CapacitySize.write(value:to:))
        try writer["MaximumExecutionTimeoutInSeconds"].write(value.maximumExecutionTimeoutInSeconds)
        try writer["RollbackMaximumBatchSize"].write(value.rollbackMaximumBatchSize, with: SageMakerClientTypes.CapacitySize.write(value:to:))
        try writer["WaitIntervalInSeconds"].write(value.waitIntervalInSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RollingUpdatePolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RollingUpdatePolicy()
        value.maximumBatchSize = try reader["MaximumBatchSize"].readIfPresent(with: SageMakerClientTypes.CapacitySize.read(from:))
        value.waitIntervalInSeconds = try reader["WaitIntervalInSeconds"].readIfPresent() ?? 0
        value.maximumExecutionTimeoutInSeconds = try reader["MaximumExecutionTimeoutInSeconds"].readIfPresent()
        value.rollbackMaximumBatchSize = try reader["RollbackMaximumBatchSize"].readIfPresent(with: SageMakerClientTypes.CapacitySize.read(from:))
        return value
    }
}

extension SageMakerClientTypes.CapacitySize {

    static func write(value: SageMakerClientTypes.CapacitySize?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Type"].write(value.type)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CapacitySize {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CapacitySize()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.value = try reader["Value"].readIfPresent() ?? 0
        return value
    }
}

extension SageMakerClientTypes.BlueGreenUpdatePolicy {

    static func write(value: SageMakerClientTypes.BlueGreenUpdatePolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaximumExecutionTimeoutInSeconds"].write(value.maximumExecutionTimeoutInSeconds)
        try writer["TerminationWaitInSeconds"].write(value.terminationWaitInSeconds)
        try writer["TrafficRoutingConfiguration"].write(value.trafficRoutingConfiguration, with: SageMakerClientTypes.TrafficRoutingConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.BlueGreenUpdatePolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.BlueGreenUpdatePolicy()
        value.trafficRoutingConfiguration = try reader["TrafficRoutingConfiguration"].readIfPresent(with: SageMakerClientTypes.TrafficRoutingConfig.read(from:))
        value.terminationWaitInSeconds = try reader["TerminationWaitInSeconds"].readIfPresent()
        value.maximumExecutionTimeoutInSeconds = try reader["MaximumExecutionTimeoutInSeconds"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TrafficRoutingConfig {

    static func write(value: SageMakerClientTypes.TrafficRoutingConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CanarySize"].write(value.canarySize, with: SageMakerClientTypes.CapacitySize.write(value:to:))
        try writer["LinearStepSize"].write(value.linearStepSize, with: SageMakerClientTypes.CapacitySize.write(value:to:))
        try writer["Type"].write(value.type)
        try writer["WaitIntervalInSeconds"].write(value.waitIntervalInSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrafficRoutingConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrafficRoutingConfig()
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.waitIntervalInSeconds = try reader["WaitIntervalInSeconds"].readIfPresent() ?? 0
        value.canarySize = try reader["CanarySize"].readIfPresent(with: SageMakerClientTypes.CapacitySize.read(from:))
        value.linearStepSize = try reader["LinearStepSize"].readIfPresent(with: SageMakerClientTypes.CapacitySize.read(from:))
        return value
    }
}

extension SageMakerClientTypes.AsyncInferenceConfig {

    static func write(value: SageMakerClientTypes.AsyncInferenceConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientConfig"].write(value.clientConfig, with: SageMakerClientTypes.AsyncInferenceClientConfig.write(value:to:))
        try writer["OutputConfig"].write(value.outputConfig, with: SageMakerClientTypes.AsyncInferenceOutputConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AsyncInferenceConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AsyncInferenceConfig()
        value.clientConfig = try reader["ClientConfig"].readIfPresent(with: SageMakerClientTypes.AsyncInferenceClientConfig.read(from:))
        value.outputConfig = try reader["OutputConfig"].readIfPresent(with: SageMakerClientTypes.AsyncInferenceOutputConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.AsyncInferenceOutputConfig {

    static func write(value: SageMakerClientTypes.AsyncInferenceOutputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["NotificationConfig"].write(value.notificationConfig, with: SageMakerClientTypes.AsyncInferenceNotificationConfig.write(value:to:))
        try writer["S3FailurePath"].write(value.s3FailurePath)
        try writer["S3OutputPath"].write(value.s3OutputPath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AsyncInferenceOutputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AsyncInferenceOutputConfig()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.s3OutputPath = try reader["S3OutputPath"].readIfPresent()
        value.notificationConfig = try reader["NotificationConfig"].readIfPresent(with: SageMakerClientTypes.AsyncInferenceNotificationConfig.read(from:))
        value.s3FailurePath = try reader["S3FailurePath"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.AsyncInferenceNotificationConfig {

    static func write(value: SageMakerClientTypes.AsyncInferenceNotificationConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ErrorTopic"].write(value.errorTopic)
        try writer["IncludeInferenceResponseIn"].writeList(value.includeInferenceResponseIn, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerClientTypes.AsyncNotificationTopicTypes>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SuccessTopic"].write(value.successTopic)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AsyncInferenceNotificationConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AsyncInferenceNotificationConfig()
        value.successTopic = try reader["SuccessTopic"].readIfPresent()
        value.errorTopic = try reader["ErrorTopic"].readIfPresent()
        value.includeInferenceResponseIn = try reader["IncludeInferenceResponseIn"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SageMakerClientTypes.AsyncNotificationTopicTypes>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.AsyncInferenceClientConfig {

    static func write(value: SageMakerClientTypes.AsyncInferenceClientConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxConcurrentInvocationsPerInstance"].write(value.maxConcurrentInvocationsPerInstance)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AsyncInferenceClientConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AsyncInferenceClientConfig()
        value.maxConcurrentInvocationsPerInstance = try reader["MaxConcurrentInvocationsPerInstance"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.PendingDeploymentSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.PendingDeploymentSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.PendingDeploymentSummary()
        value.endpointConfigName = try reader["EndpointConfigName"].readIfPresent() ?? ""
        value.productionVariants = try reader["ProductionVariants"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.PendingProductionVariantSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.shadowProductionVariants = try reader["ShadowProductionVariants"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.PendingProductionVariantSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.PendingProductionVariantSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.PendingProductionVariantSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.PendingProductionVariantSummary()
        value.variantName = try reader["VariantName"].readIfPresent() ?? ""
        value.deployedImages = try reader["DeployedImages"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.DeployedImage.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.currentWeight = try reader["CurrentWeight"].readIfPresent()
        value.desiredWeight = try reader["DesiredWeight"].readIfPresent()
        value.currentInstanceCount = try reader["CurrentInstanceCount"].readIfPresent()
        value.desiredInstanceCount = try reader["DesiredInstanceCount"].readIfPresent()
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.acceleratorType = try reader["AcceleratorType"].readIfPresent()
        value.variantStatus = try reader["VariantStatus"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ProductionVariantStatus.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.currentServerlessConfig = try reader["CurrentServerlessConfig"].readIfPresent(with: SageMakerClientTypes.ProductionVariantServerlessConfig.read(from:))
        value.desiredServerlessConfig = try reader["DesiredServerlessConfig"].readIfPresent(with: SageMakerClientTypes.ProductionVariantServerlessConfig.read(from:))
        value.managedInstanceScaling = try reader["ManagedInstanceScaling"].readIfPresent(with: SageMakerClientTypes.ProductionVariantManagedInstanceScaling.read(from:))
        value.routingConfig = try reader["RoutingConfig"].readIfPresent(with: SageMakerClientTypes.ProductionVariantRoutingConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ExplainerConfig {

    static func write(value: SageMakerClientTypes.ExplainerConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClarifyExplainerConfig"].write(value.clarifyExplainerConfig, with: SageMakerClientTypes.ClarifyExplainerConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ExplainerConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ExplainerConfig()
        value.clarifyExplainerConfig = try reader["ClarifyExplainerConfig"].readIfPresent(with: SageMakerClientTypes.ClarifyExplainerConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ClarifyExplainerConfig {

    static func write(value: SageMakerClientTypes.ClarifyExplainerConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnableExplanations"].write(value.enableExplanations)
        try writer["InferenceConfig"].write(value.inferenceConfig, with: SageMakerClientTypes.ClarifyInferenceConfig.write(value:to:))
        try writer["ShapConfig"].write(value.shapConfig, with: SageMakerClientTypes.ClarifyShapConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ClarifyExplainerConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ClarifyExplainerConfig()
        value.enableExplanations = try reader["EnableExplanations"].readIfPresent()
        value.inferenceConfig = try reader["InferenceConfig"].readIfPresent(with: SageMakerClientTypes.ClarifyInferenceConfig.read(from:))
        value.shapConfig = try reader["ShapConfig"].readIfPresent(with: SageMakerClientTypes.ClarifyShapConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ClarifyShapConfig {

    static func write(value: SageMakerClientTypes.ClarifyShapConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NumberOfSamples"].write(value.numberOfSamples)
        try writer["Seed"].write(value.seed)
        try writer["ShapBaselineConfig"].write(value.shapBaselineConfig, with: SageMakerClientTypes.ClarifyShapBaselineConfig.write(value:to:))
        try writer["TextConfig"].write(value.textConfig, with: SageMakerClientTypes.ClarifyTextConfig.write(value:to:))
        try writer["UseLogit"].write(value.useLogit)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ClarifyShapConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ClarifyShapConfig()
        value.shapBaselineConfig = try reader["ShapBaselineConfig"].readIfPresent(with: SageMakerClientTypes.ClarifyShapBaselineConfig.read(from:))
        value.numberOfSamples = try reader["NumberOfSamples"].readIfPresent()
        value.useLogit = try reader["UseLogit"].readIfPresent()
        value.seed = try reader["Seed"].readIfPresent()
        value.textConfig = try reader["TextConfig"].readIfPresent(with: SageMakerClientTypes.ClarifyTextConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ClarifyTextConfig {

    static func write(value: SageMakerClientTypes.ClarifyTextConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Granularity"].write(value.granularity)
        try writer["Language"].write(value.language)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ClarifyTextConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ClarifyTextConfig()
        value.language = try reader["Language"].readIfPresent() ?? .sdkUnknown("")
        value.granularity = try reader["Granularity"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.ClarifyShapBaselineConfig {

    static func write(value: SageMakerClientTypes.ClarifyShapBaselineConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MimeType"].write(value.mimeType)
        try writer["ShapBaseline"].write(value.shapBaseline)
        try writer["ShapBaselineUri"].write(value.shapBaselineUri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ClarifyShapBaselineConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ClarifyShapBaselineConfig()
        value.mimeType = try reader["MimeType"].readIfPresent()
        value.shapBaseline = try reader["ShapBaseline"].readIfPresent()
        value.shapBaselineUri = try reader["ShapBaselineUri"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ClarifyInferenceConfig {

    static func write(value: SageMakerClientTypes.ClarifyInferenceConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContentTemplate"].write(value.contentTemplate)
        try writer["FeatureHeaders"].writeList(value.featureHeaders, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FeatureTypes"].writeList(value.featureTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerClientTypes.ClarifyFeatureType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["FeaturesAttribute"].write(value.featuresAttribute)
        try writer["LabelAttribute"].write(value.labelAttribute)
        try writer["LabelHeaders"].writeList(value.labelHeaders, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["LabelIndex"].write(value.labelIndex)
        try writer["MaxPayloadInMB"].write(value.maxPayloadInMB)
        try writer["MaxRecordCount"].write(value.maxRecordCount)
        try writer["ProbabilityAttribute"].write(value.probabilityAttribute)
        try writer["ProbabilityIndex"].write(value.probabilityIndex)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ClarifyInferenceConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ClarifyInferenceConfig()
        value.featuresAttribute = try reader["FeaturesAttribute"].readIfPresent()
        value.contentTemplate = try reader["ContentTemplate"].readIfPresent()
        value.maxRecordCount = try reader["MaxRecordCount"].readIfPresent()
        value.maxPayloadInMB = try reader["MaxPayloadInMB"].readIfPresent()
        value.probabilityIndex = try reader["ProbabilityIndex"].readIfPresent()
        value.labelIndex = try reader["LabelIndex"].readIfPresent()
        value.probabilityAttribute = try reader["ProbabilityAttribute"].readIfPresent()
        value.labelAttribute = try reader["LabelAttribute"].readIfPresent()
        value.labelHeaders = try reader["LabelHeaders"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.featureHeaders = try reader["FeatureHeaders"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.featureTypes = try reader["FeatureTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SageMakerClientTypes.ClarifyFeatureType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ProductionVariant {

    static func write(value: SageMakerClientTypes.ProductionVariant?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AcceleratorType"].write(value.acceleratorType)
        try writer["ContainerStartupHealthCheckTimeoutInSeconds"].write(value.containerStartupHealthCheckTimeoutInSeconds)
        try writer["CoreDumpConfig"].write(value.coreDumpConfig, with: SageMakerClientTypes.ProductionVariantCoreDumpConfig.write(value:to:))
        try writer["EnableSSMAccess"].write(value.enableSSMAccess)
        try writer["InferenceAmiVersion"].write(value.inferenceAmiVersion)
        try writer["InitialInstanceCount"].write(value.initialInstanceCount)
        try writer["InitialVariantWeight"].write(value.initialVariantWeight)
        try writer["InstanceType"].write(value.instanceType)
        try writer["ManagedInstanceScaling"].write(value.managedInstanceScaling, with: SageMakerClientTypes.ProductionVariantManagedInstanceScaling.write(value:to:))
        try writer["ModelDataDownloadTimeoutInSeconds"].write(value.modelDataDownloadTimeoutInSeconds)
        try writer["ModelName"].write(value.modelName)
        try writer["RoutingConfig"].write(value.routingConfig, with: SageMakerClientTypes.ProductionVariantRoutingConfig.write(value:to:))
        try writer["ServerlessConfig"].write(value.serverlessConfig, with: SageMakerClientTypes.ProductionVariantServerlessConfig.write(value:to:))
        try writer["VariantName"].write(value.variantName)
        try writer["VolumeSizeInGB"].write(value.volumeSizeInGB)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProductionVariant {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProductionVariant()
        value.variantName = try reader["VariantName"].readIfPresent() ?? ""
        value.modelName = try reader["ModelName"].readIfPresent()
        value.initialInstanceCount = try reader["InitialInstanceCount"].readIfPresent()
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.initialVariantWeight = try reader["InitialVariantWeight"].readIfPresent()
        value.acceleratorType = try reader["AcceleratorType"].readIfPresent()
        value.coreDumpConfig = try reader["CoreDumpConfig"].readIfPresent(with: SageMakerClientTypes.ProductionVariantCoreDumpConfig.read(from:))
        value.serverlessConfig = try reader["ServerlessConfig"].readIfPresent(with: SageMakerClientTypes.ProductionVariantServerlessConfig.read(from:))
        value.volumeSizeInGB = try reader["VolumeSizeInGB"].readIfPresent()
        value.modelDataDownloadTimeoutInSeconds = try reader["ModelDataDownloadTimeoutInSeconds"].readIfPresent()
        value.containerStartupHealthCheckTimeoutInSeconds = try reader["ContainerStartupHealthCheckTimeoutInSeconds"].readIfPresent()
        value.enableSSMAccess = try reader["EnableSSMAccess"].readIfPresent()
        value.managedInstanceScaling = try reader["ManagedInstanceScaling"].readIfPresent(with: SageMakerClientTypes.ProductionVariantManagedInstanceScaling.read(from:))
        value.routingConfig = try reader["RoutingConfig"].readIfPresent(with: SageMakerClientTypes.ProductionVariantRoutingConfig.read(from:))
        value.inferenceAmiVersion = try reader["InferenceAmiVersion"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ProductionVariantCoreDumpConfig {

    static func write(value: SageMakerClientTypes.ProductionVariantCoreDumpConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DestinationS3Uri"].write(value.destinationS3Uri)
        try writer["KmsKeyId"].write(value.kmsKeyId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProductionVariantCoreDumpConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProductionVariantCoreDumpConfig()
        value.destinationS3Uri = try reader["DestinationS3Uri"].readIfPresent() ?? ""
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.DataCaptureConfig {

    static func write(value: SageMakerClientTypes.DataCaptureConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CaptureContentTypeHeader"].write(value.captureContentTypeHeader, with: SageMakerClientTypes.CaptureContentTypeHeader.write(value:to:))
        try writer["CaptureOptions"].writeList(value.captureOptions, memberWritingClosure: SageMakerClientTypes.CaptureOption.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DestinationS3Uri"].write(value.destinationS3Uri)
        try writer["EnableCapture"].write(value.enableCapture)
        try writer["InitialSamplingPercentage"].write(value.initialSamplingPercentage)
        try writer["KmsKeyId"].write(value.kmsKeyId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DataCaptureConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DataCaptureConfig()
        value.enableCapture = try reader["EnableCapture"].readIfPresent()
        value.initialSamplingPercentage = try reader["InitialSamplingPercentage"].readIfPresent() ?? 0
        value.destinationS3Uri = try reader["DestinationS3Uri"].readIfPresent() ?? ""
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.captureOptions = try reader["CaptureOptions"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.CaptureOption.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.captureContentTypeHeader = try reader["CaptureContentTypeHeader"].readIfPresent(with: SageMakerClientTypes.CaptureContentTypeHeader.read(from:))
        return value
    }
}

extension SageMakerClientTypes.CaptureContentTypeHeader {

    static func write(value: SageMakerClientTypes.CaptureContentTypeHeader?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CsvContentTypes"].writeList(value.csvContentTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["JsonContentTypes"].writeList(value.jsonContentTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CaptureContentTypeHeader {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CaptureContentTypeHeader()
        value.csvContentTypes = try reader["CsvContentTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.jsonContentTypes = try reader["JsonContentTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.CaptureOption {

    static func write(value: SageMakerClientTypes.CaptureOption?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CaptureMode"].write(value.captureMode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CaptureOption {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CaptureOption()
        value.captureMode = try reader["CaptureMode"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.ExperimentSource {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ExperimentSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ExperimentSource()
        value.sourceArn = try reader["SourceArn"].readIfPresent() ?? ""
        value.sourceType = try reader["SourceType"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.FeatureDefinition {

    static func write(value: SageMakerClientTypes.FeatureDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CollectionConfig"].write(value.collectionConfig, with: SageMakerClientTypes.CollectionConfig.write(value:to:))
        try writer["CollectionType"].write(value.collectionType)
        try writer["FeatureName"].write(value.featureName)
        try writer["FeatureType"].write(value.featureType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.FeatureDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.FeatureDefinition()
        value.featureName = try reader["FeatureName"].readIfPresent() ?? ""
        value.featureType = try reader["FeatureType"].readIfPresent() ?? .sdkUnknown("")
        value.collectionType = try reader["CollectionType"].readIfPresent()
        value.collectionConfig = try reader["CollectionConfig"].readIfPresent(with: SageMakerClientTypes.CollectionConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.CollectionConfig {

    static func write(value: SageMakerClientTypes.CollectionConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .vectorconfig(vectorconfig):
                try writer["VectorConfig"].write(vectorconfig, with: SageMakerClientTypes.VectorConfig.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CollectionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "VectorConfig":
                return .vectorconfig(try reader["VectorConfig"].read(with: SageMakerClientTypes.VectorConfig.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension SageMakerClientTypes.VectorConfig {

    static func write(value: SageMakerClientTypes.VectorConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Dimension"].write(value.dimension)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.VectorConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.VectorConfig()
        value.dimension = try reader["Dimension"].readIfPresent() ?? 0
        return value
    }
}

extension SageMakerClientTypes.OnlineStoreConfig {

    static func write(value: SageMakerClientTypes.OnlineStoreConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnableOnlineStore"].write(value.enableOnlineStore)
        try writer["SecurityConfig"].write(value.securityConfig, with: SageMakerClientTypes.OnlineStoreSecurityConfig.write(value:to:))
        try writer["StorageType"].write(value.storageType)
        try writer["TtlDuration"].write(value.ttlDuration, with: SageMakerClientTypes.TtlDuration.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.OnlineStoreConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.OnlineStoreConfig()
        value.securityConfig = try reader["SecurityConfig"].readIfPresent(with: SageMakerClientTypes.OnlineStoreSecurityConfig.read(from:))
        value.enableOnlineStore = try reader["EnableOnlineStore"].readIfPresent()
        value.ttlDuration = try reader["TtlDuration"].readIfPresent(with: SageMakerClientTypes.TtlDuration.read(from:))
        value.storageType = try reader["StorageType"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TtlDuration {

    static func write(value: SageMakerClientTypes.TtlDuration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Unit"].write(value.unit)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TtlDuration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TtlDuration()
        value.unit = try reader["Unit"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.OnlineStoreSecurityConfig {

    static func write(value: SageMakerClientTypes.OnlineStoreSecurityConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.OnlineStoreSecurityConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.OnlineStoreSecurityConfig()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.OfflineStoreConfig {

    static func write(value: SageMakerClientTypes.OfflineStoreConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataCatalogConfig"].write(value.dataCatalogConfig, with: SageMakerClientTypes.DataCatalogConfig.write(value:to:))
        try writer["DisableGlueTableCreation"].write(value.disableGlueTableCreation)
        try writer["S3StorageConfig"].write(value.s3StorageConfig, with: SageMakerClientTypes.S3StorageConfig.write(value:to:))
        try writer["TableFormat"].write(value.tableFormat)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.OfflineStoreConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.OfflineStoreConfig()
        value.s3StorageConfig = try reader["S3StorageConfig"].readIfPresent(with: SageMakerClientTypes.S3StorageConfig.read(from:))
        value.disableGlueTableCreation = try reader["DisableGlueTableCreation"].readIfPresent()
        value.dataCatalogConfig = try reader["DataCatalogConfig"].readIfPresent(with: SageMakerClientTypes.DataCatalogConfig.read(from:))
        value.tableFormat = try reader["TableFormat"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.DataCatalogConfig {

    static func write(value: SageMakerClientTypes.DataCatalogConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Catalog"].write(value.catalog)
        try writer["Database"].write(value.database)
        try writer["TableName"].write(value.tableName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DataCatalogConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DataCatalogConfig()
        value.tableName = try reader["TableName"].readIfPresent() ?? ""
        value.catalog = try reader["Catalog"].readIfPresent() ?? ""
        value.database = try reader["Database"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.S3StorageConfig {

    static func write(value: SageMakerClientTypes.S3StorageConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["ResolvedOutputS3Uri"].write(value.resolvedOutputS3Uri)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.S3StorageConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.S3StorageConfig()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.resolvedOutputS3Uri = try reader["ResolvedOutputS3Uri"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ThroughputConfigDescription {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ThroughputConfigDescription {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ThroughputConfigDescription()
        value.throughputMode = try reader["ThroughputMode"].readIfPresent() ?? .sdkUnknown("")
        value.provisionedReadCapacityUnits = try reader["ProvisionedReadCapacityUnits"].readIfPresent()
        value.provisionedWriteCapacityUnits = try reader["ProvisionedWriteCapacityUnits"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.OfflineStoreStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.OfflineStoreStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.OfflineStoreStatus()
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.blockedReason = try reader["BlockedReason"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.LastUpdateStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.LastUpdateStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.LastUpdateStatus()
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.failureReason = try reader["FailureReason"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.FeatureParameter {

    static func write(value: SageMakerClientTypes.FeatureParameter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.FeatureParameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.FeatureParameter()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.HumanLoopRequestSource {

    static func write(value: SageMakerClientTypes.HumanLoopRequestSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AwsManagedHumanLoopRequestSource"].write(value.awsManagedHumanLoopRequestSource)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HumanLoopRequestSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HumanLoopRequestSource()
        value.awsManagedHumanLoopRequestSource = try reader["AwsManagedHumanLoopRequestSource"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.HumanLoopActivationConfig {

    static func write(value: SageMakerClientTypes.HumanLoopActivationConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HumanLoopActivationConditionsConfig"].write(value.humanLoopActivationConditionsConfig, with: SageMakerClientTypes.HumanLoopActivationConditionsConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HumanLoopActivationConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HumanLoopActivationConfig()
        value.humanLoopActivationConditionsConfig = try reader["HumanLoopActivationConditionsConfig"].readIfPresent(with: SageMakerClientTypes.HumanLoopActivationConditionsConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.HumanLoopActivationConditionsConfig {

    static func write(value: SageMakerClientTypes.HumanLoopActivationConditionsConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HumanLoopActivationConditions"].write(value.humanLoopActivationConditions)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HumanLoopActivationConditionsConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HumanLoopActivationConditionsConfig()
        value.humanLoopActivationConditions = try reader["HumanLoopActivationConditions"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.HumanLoopConfig {

    static func write(value: SageMakerClientTypes.HumanLoopConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HumanTaskUiArn"].write(value.humanTaskUiArn)
        try writer["PublicWorkforceTaskPrice"].write(value.publicWorkforceTaskPrice, with: SageMakerClientTypes.PublicWorkforceTaskPrice.write(value:to:))
        try writer["TaskAvailabilityLifetimeInSeconds"].write(value.taskAvailabilityLifetimeInSeconds)
        try writer["TaskCount"].write(value.taskCount)
        try writer["TaskDescription"].write(value.taskDescription)
        try writer["TaskKeywords"].writeList(value.taskKeywords, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TaskTimeLimitInSeconds"].write(value.taskTimeLimitInSeconds)
        try writer["TaskTitle"].write(value.taskTitle)
        try writer["WorkteamArn"].write(value.workteamArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HumanLoopConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HumanLoopConfig()
        value.workteamArn = try reader["WorkteamArn"].readIfPresent() ?? ""
        value.humanTaskUiArn = try reader["HumanTaskUiArn"].readIfPresent() ?? ""
        value.taskTitle = try reader["TaskTitle"].readIfPresent() ?? ""
        value.taskDescription = try reader["TaskDescription"].readIfPresent() ?? ""
        value.taskCount = try reader["TaskCount"].readIfPresent() ?? 0
        value.taskAvailabilityLifetimeInSeconds = try reader["TaskAvailabilityLifetimeInSeconds"].readIfPresent()
        value.taskTimeLimitInSeconds = try reader["TaskTimeLimitInSeconds"].readIfPresent()
        value.taskKeywords = try reader["TaskKeywords"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.publicWorkforceTaskPrice = try reader["PublicWorkforceTaskPrice"].readIfPresent(with: SageMakerClientTypes.PublicWorkforceTaskPrice.read(from:))
        return value
    }
}

extension SageMakerClientTypes.PublicWorkforceTaskPrice {

    static func write(value: SageMakerClientTypes.PublicWorkforceTaskPrice?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AmountInUsd"].write(value.amountInUsd, with: SageMakerClientTypes.USD.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.PublicWorkforceTaskPrice {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.PublicWorkforceTaskPrice()
        value.amountInUsd = try reader["AmountInUsd"].readIfPresent(with: SageMakerClientTypes.USD.read(from:))
        return value
    }
}

extension SageMakerClientTypes.USD {

    static func write(value: SageMakerClientTypes.USD?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Cents"].write(value.cents)
        try writer["Dollars"].write(value.dollars)
        try writer["TenthFractionsOfACent"].write(value.tenthFractionsOfACent)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.USD {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.USD()
        value.dollars = try reader["Dollars"].readIfPresent()
        value.cents = try reader["Cents"].readIfPresent()
        value.tenthFractionsOfACent = try reader["TenthFractionsOfACent"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.FlowDefinitionOutputConfig {

    static func write(value: SageMakerClientTypes.FlowDefinitionOutputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["S3OutputPath"].write(value.s3OutputPath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.FlowDefinitionOutputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.FlowDefinitionOutputConfig()
        value.s3OutputPath = try reader["S3OutputPath"].readIfPresent() ?? ""
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.HubS3StorageConfig {

    static func write(value: SageMakerClientTypes.HubS3StorageConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3OutputPath"].write(value.s3OutputPath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HubS3StorageConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HubS3StorageConfig()
        value.s3OutputPath = try reader["S3OutputPath"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.HubContentDependency {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HubContentDependency {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HubContentDependency()
        value.dependencyOriginPath = try reader["DependencyOriginPath"].readIfPresent()
        value.dependencyCopyPath = try reader["DependencyCopyPath"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.UiTemplateInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.UiTemplateInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.UiTemplateInfo()
        value.url = try reader["Url"].readIfPresent()
        value.contentSha256 = try reader["ContentSha256"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.HyperParameterTuningJobConfig {

    static func write(value: SageMakerClientTypes.HyperParameterTuningJobConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HyperParameterTuningJobObjective"].write(value.hyperParameterTuningJobObjective, with: SageMakerClientTypes.HyperParameterTuningJobObjective.write(value:to:))
        try writer["ParameterRanges"].write(value.parameterRanges, with: SageMakerClientTypes.ParameterRanges.write(value:to:))
        try writer["RandomSeed"].write(value.randomSeed)
        try writer["ResourceLimits"].write(value.resourceLimits, with: SageMakerClientTypes.ResourceLimits.write(value:to:))
        try writer["Strategy"].write(value.strategy)
        try writer["StrategyConfig"].write(value.strategyConfig, with: SageMakerClientTypes.HyperParameterTuningJobStrategyConfig.write(value:to:))
        try writer["TrainingJobEarlyStoppingType"].write(value.trainingJobEarlyStoppingType)
        try writer["TuningJobCompletionCriteria"].write(value.tuningJobCompletionCriteria, with: SageMakerClientTypes.TuningJobCompletionCriteria.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HyperParameterTuningJobConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HyperParameterTuningJobConfig()
        value.strategy = try reader["Strategy"].readIfPresent() ?? .sdkUnknown("")
        value.strategyConfig = try reader["StrategyConfig"].readIfPresent(with: SageMakerClientTypes.HyperParameterTuningJobStrategyConfig.read(from:))
        value.hyperParameterTuningJobObjective = try reader["HyperParameterTuningJobObjective"].readIfPresent(with: SageMakerClientTypes.HyperParameterTuningJobObjective.read(from:))
        value.resourceLimits = try reader["ResourceLimits"].readIfPresent(with: SageMakerClientTypes.ResourceLimits.read(from:))
        value.parameterRanges = try reader["ParameterRanges"].readIfPresent(with: SageMakerClientTypes.ParameterRanges.read(from:))
        value.trainingJobEarlyStoppingType = try reader["TrainingJobEarlyStoppingType"].readIfPresent()
        value.tuningJobCompletionCriteria = try reader["TuningJobCompletionCriteria"].readIfPresent(with: SageMakerClientTypes.TuningJobCompletionCriteria.read(from:))
        value.randomSeed = try reader["RandomSeed"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TuningJobCompletionCriteria {

    static func write(value: SageMakerClientTypes.TuningJobCompletionCriteria?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BestObjectiveNotImproving"].write(value.bestObjectiveNotImproving, with: SageMakerClientTypes.BestObjectiveNotImproving.write(value:to:))
        try writer["ConvergenceDetected"].write(value.convergenceDetected, with: SageMakerClientTypes.ConvergenceDetected.write(value:to:))
        try writer["TargetObjectiveMetricValue"].write(value.targetObjectiveMetricValue)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TuningJobCompletionCriteria {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TuningJobCompletionCriteria()
        value.targetObjectiveMetricValue = try reader["TargetObjectiveMetricValue"].readIfPresent()
        value.bestObjectiveNotImproving = try reader["BestObjectiveNotImproving"].readIfPresent(with: SageMakerClientTypes.BestObjectiveNotImproving.read(from:))
        value.convergenceDetected = try reader["ConvergenceDetected"].readIfPresent(with: SageMakerClientTypes.ConvergenceDetected.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ConvergenceDetected {

    static func write(value: SageMakerClientTypes.ConvergenceDetected?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CompleteOnConvergence"].write(value.completeOnConvergence)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ConvergenceDetected {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ConvergenceDetected()
        value.completeOnConvergence = try reader["CompleteOnConvergence"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.BestObjectiveNotImproving {

    static func write(value: SageMakerClientTypes.BestObjectiveNotImproving?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxNumberOfTrainingJobsNotImproving"].write(value.maxNumberOfTrainingJobsNotImproving)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.BestObjectiveNotImproving {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.BestObjectiveNotImproving()
        value.maxNumberOfTrainingJobsNotImproving = try reader["MaxNumberOfTrainingJobsNotImproving"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ParameterRanges {

    static func write(value: SageMakerClientTypes.ParameterRanges?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoParameters"].writeList(value.autoParameters, memberWritingClosure: SageMakerClientTypes.AutoParameter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["CategoricalParameterRanges"].writeList(value.categoricalParameterRanges, memberWritingClosure: SageMakerClientTypes.CategoricalParameterRange.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ContinuousParameterRanges"].writeList(value.continuousParameterRanges, memberWritingClosure: SageMakerClientTypes.ContinuousParameterRange.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["IntegerParameterRanges"].writeList(value.integerParameterRanges, memberWritingClosure: SageMakerClientTypes.IntegerParameterRange.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ParameterRanges {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ParameterRanges()
        value.integerParameterRanges = try reader["IntegerParameterRanges"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.IntegerParameterRange.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.continuousParameterRanges = try reader["ContinuousParameterRanges"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ContinuousParameterRange.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.categoricalParameterRanges = try reader["CategoricalParameterRanges"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.CategoricalParameterRange.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.autoParameters = try reader["AutoParameters"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AutoParameter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.AutoParameter {

    static func write(value: SageMakerClientTypes.AutoParameter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["ValueHint"].write(value.valueHint)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoParameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoParameter()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.valueHint = try reader["ValueHint"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.CategoricalParameterRange {

    static func write(value: SageMakerClientTypes.CategoricalParameterRange?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Values"].writeList(value.values, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CategoricalParameterRange {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CategoricalParameterRange()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.values = try reader["Values"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SageMakerClientTypes.ContinuousParameterRange {

    static func write(value: SageMakerClientTypes.ContinuousParameterRange?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxValue"].write(value.maxValue)
        try writer["MinValue"].write(value.minValue)
        try writer["Name"].write(value.name)
        try writer["ScalingType"].write(value.scalingType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ContinuousParameterRange {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ContinuousParameterRange()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.minValue = try reader["MinValue"].readIfPresent() ?? ""
        value.maxValue = try reader["MaxValue"].readIfPresent() ?? ""
        value.scalingType = try reader["ScalingType"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.IntegerParameterRange {

    static func write(value: SageMakerClientTypes.IntegerParameterRange?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxValue"].write(value.maxValue)
        try writer["MinValue"].write(value.minValue)
        try writer["Name"].write(value.name)
        try writer["ScalingType"].write(value.scalingType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.IntegerParameterRange {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.IntegerParameterRange()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.minValue = try reader["MinValue"].readIfPresent() ?? ""
        value.maxValue = try reader["MaxValue"].readIfPresent() ?? ""
        value.scalingType = try reader["ScalingType"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ResourceLimits {

    static func write(value: SageMakerClientTypes.ResourceLimits?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxNumberOfTrainingJobs"].write(value.maxNumberOfTrainingJobs)
        try writer["MaxParallelTrainingJobs"].write(value.maxParallelTrainingJobs)
        try writer["MaxRuntimeInSeconds"].write(value.maxRuntimeInSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ResourceLimits {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ResourceLimits()
        value.maxNumberOfTrainingJobs = try reader["MaxNumberOfTrainingJobs"].readIfPresent()
        value.maxParallelTrainingJobs = try reader["MaxParallelTrainingJobs"].readIfPresent() ?? 0
        value.maxRuntimeInSeconds = try reader["MaxRuntimeInSeconds"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.HyperParameterTuningJobStrategyConfig {

    static func write(value: SageMakerClientTypes.HyperParameterTuningJobStrategyConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HyperbandStrategyConfig"].write(value.hyperbandStrategyConfig, with: SageMakerClientTypes.HyperbandStrategyConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HyperParameterTuningJobStrategyConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HyperParameterTuningJobStrategyConfig()
        value.hyperbandStrategyConfig = try reader["HyperbandStrategyConfig"].readIfPresent(with: SageMakerClientTypes.HyperbandStrategyConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.HyperbandStrategyConfig {

    static func write(value: SageMakerClientTypes.HyperbandStrategyConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResource"].write(value.maxResource)
        try writer["MinResource"].write(value.minResource)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HyperbandStrategyConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HyperbandStrategyConfig()
        value.minResource = try reader["MinResource"].readIfPresent()
        value.maxResource = try reader["MaxResource"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.HyperParameterTrainingJobDefinition {

    static func write(value: SageMakerClientTypes.HyperParameterTrainingJobDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlgorithmSpecification"].write(value.algorithmSpecification, with: SageMakerClientTypes.HyperParameterAlgorithmSpecification.write(value:to:))
        try writer["CheckpointConfig"].write(value.checkpointConfig, with: SageMakerClientTypes.CheckpointConfig.write(value:to:))
        try writer["DefinitionName"].write(value.definitionName)
        try writer["EnableInterContainerTrafficEncryption"].write(value.enableInterContainerTrafficEncryption)
        try writer["EnableManagedSpotTraining"].write(value.enableManagedSpotTraining)
        try writer["EnableNetworkIsolation"].write(value.enableNetworkIsolation)
        try writer["Environment"].writeMap(value.environment, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["HyperParameterRanges"].write(value.hyperParameterRanges, with: SageMakerClientTypes.ParameterRanges.write(value:to:))
        try writer["HyperParameterTuningResourceConfig"].write(value.hyperParameterTuningResourceConfig, with: SageMakerClientTypes.HyperParameterTuningResourceConfig.write(value:to:))
        try writer["InputDataConfig"].writeList(value.inputDataConfig, memberWritingClosure: SageMakerClientTypes.Channel.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["OutputDataConfig"].write(value.outputDataConfig, with: SageMakerClientTypes.OutputDataConfig.write(value:to:))
        try writer["ResourceConfig"].write(value.resourceConfig, with: SageMakerClientTypes.ResourceConfig.write(value:to:))
        try writer["RetryStrategy"].write(value.retryStrategy, with: SageMakerClientTypes.RetryStrategy.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
        try writer["StaticHyperParameters"].writeMap(value.staticHyperParameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["StoppingCondition"].write(value.stoppingCondition, with: SageMakerClientTypes.StoppingCondition.write(value:to:))
        try writer["TuningObjective"].write(value.tuningObjective, with: SageMakerClientTypes.HyperParameterTuningJobObjective.write(value:to:))
        try writer["VpcConfig"].write(value.vpcConfig, with: SageMakerClientTypes.VpcConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HyperParameterTrainingJobDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HyperParameterTrainingJobDefinition()
        value.definitionName = try reader["DefinitionName"].readIfPresent()
        value.tuningObjective = try reader["TuningObjective"].readIfPresent(with: SageMakerClientTypes.HyperParameterTuningJobObjective.read(from:))
        value.hyperParameterRanges = try reader["HyperParameterRanges"].readIfPresent(with: SageMakerClientTypes.ParameterRanges.read(from:))
        value.staticHyperParameters = try reader["StaticHyperParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.algorithmSpecification = try reader["AlgorithmSpecification"].readIfPresent(with: SageMakerClientTypes.HyperParameterAlgorithmSpecification.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent() ?? ""
        value.inputDataConfig = try reader["InputDataConfig"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Channel.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: SageMakerClientTypes.VpcConfig.read(from:))
        value.outputDataConfig = try reader["OutputDataConfig"].readIfPresent(with: SageMakerClientTypes.OutputDataConfig.read(from:))
        value.resourceConfig = try reader["ResourceConfig"].readIfPresent(with: SageMakerClientTypes.ResourceConfig.read(from:))
        value.hyperParameterTuningResourceConfig = try reader["HyperParameterTuningResourceConfig"].readIfPresent(with: SageMakerClientTypes.HyperParameterTuningResourceConfig.read(from:))
        value.stoppingCondition = try reader["StoppingCondition"].readIfPresent(with: SageMakerClientTypes.StoppingCondition.read(from:))
        value.enableNetworkIsolation = try reader["EnableNetworkIsolation"].readIfPresent()
        value.enableInterContainerTrafficEncryption = try reader["EnableInterContainerTrafficEncryption"].readIfPresent()
        value.enableManagedSpotTraining = try reader["EnableManagedSpotTraining"].readIfPresent()
        value.checkpointConfig = try reader["CheckpointConfig"].readIfPresent(with: SageMakerClientTypes.CheckpointConfig.read(from:))
        value.retryStrategy = try reader["RetryStrategy"].readIfPresent(with: SageMakerClientTypes.RetryStrategy.read(from:))
        value.environment = try reader["Environment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.RetryStrategy {

    static func write(value: SageMakerClientTypes.RetryStrategy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaximumRetryAttempts"].write(value.maximumRetryAttempts)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RetryStrategy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RetryStrategy()
        value.maximumRetryAttempts = try reader["MaximumRetryAttempts"].readIfPresent() ?? 0
        return value
    }
}

extension SageMakerClientTypes.CheckpointConfig {

    static func write(value: SageMakerClientTypes.CheckpointConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LocalPath"].write(value.localPath)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CheckpointConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CheckpointConfig()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.localPath = try reader["LocalPath"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.HyperParameterTuningResourceConfig {

    static func write(value: SageMakerClientTypes.HyperParameterTuningResourceConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AllocationStrategy"].write(value.allocationStrategy)
        try writer["InstanceConfigs"].writeList(value.instanceConfigs, memberWritingClosure: SageMakerClientTypes.HyperParameterTuningInstanceConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InstanceCount"].write(value.instanceCount)
        try writer["InstanceType"].write(value.instanceType)
        try writer["VolumeKmsKeyId"].write(value.volumeKmsKeyId)
        try writer["VolumeSizeInGB"].write(value.volumeSizeInGB)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HyperParameterTuningResourceConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HyperParameterTuningResourceConfig()
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.instanceCount = try reader["InstanceCount"].readIfPresent()
        value.volumeSizeInGB = try reader["VolumeSizeInGB"].readIfPresent()
        value.volumeKmsKeyId = try reader["VolumeKmsKeyId"].readIfPresent()
        value.allocationStrategy = try reader["AllocationStrategy"].readIfPresent()
        value.instanceConfigs = try reader["InstanceConfigs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.HyperParameterTuningInstanceConfig.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.HyperParameterTuningInstanceConfig {

    static func write(value: SageMakerClientTypes.HyperParameterTuningInstanceConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InstanceCount"].write(value.instanceCount)
        try writer["InstanceType"].write(value.instanceType)
        try writer["VolumeSizeInGB"].write(value.volumeSizeInGB)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HyperParameterTuningInstanceConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HyperParameterTuningInstanceConfig()
        value.instanceType = try reader["InstanceType"].readIfPresent() ?? .sdkUnknown("")
        value.instanceCount = try reader["InstanceCount"].readIfPresent() ?? 0
        value.volumeSizeInGB = try reader["VolumeSizeInGB"].readIfPresent() ?? 0
        return value
    }
}

extension SageMakerClientTypes.HyperParameterAlgorithmSpecification {

    static func write(value: SageMakerClientTypes.HyperParameterAlgorithmSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlgorithmName"].write(value.algorithmName)
        try writer["MetricDefinitions"].writeList(value.metricDefinitions, memberWritingClosure: SageMakerClientTypes.MetricDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TrainingImage"].write(value.trainingImage)
        try writer["TrainingInputMode"].write(value.trainingInputMode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HyperParameterAlgorithmSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HyperParameterAlgorithmSpecification()
        value.trainingImage = try reader["TrainingImage"].readIfPresent()
        value.trainingInputMode = try reader["TrainingInputMode"].readIfPresent() ?? .sdkUnknown("")
        value.algorithmName = try reader["AlgorithmName"].readIfPresent()
        value.metricDefinitions = try reader["MetricDefinitions"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.MetricDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.TrainingJobStatusCounters {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrainingJobStatusCounters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrainingJobStatusCounters()
        value.completed = try reader["Completed"].readIfPresent()
        value.inProgress = try reader["InProgress"].readIfPresent()
        value.retryableError = try reader["RetryableError"].readIfPresent()
        value.nonRetryableError = try reader["NonRetryableError"].readIfPresent()
        value.stopped = try reader["Stopped"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ObjectiveStatusCounters {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ObjectiveStatusCounters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ObjectiveStatusCounters()
        value.succeeded = try reader["Succeeded"].readIfPresent()
        value.pending = try reader["Pending"].readIfPresent()
        value.failed = try reader["Failed"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.HyperParameterTrainingJobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HyperParameterTrainingJobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HyperParameterTrainingJobSummary()
        value.trainingJobDefinitionName = try reader["TrainingJobDefinitionName"].readIfPresent()
        value.trainingJobName = try reader["TrainingJobName"].readIfPresent() ?? ""
        value.trainingJobArn = try reader["TrainingJobArn"].readIfPresent() ?? ""
        value.tuningJobName = try reader["TuningJobName"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.trainingStartTime = try reader["TrainingStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trainingEndTime = try reader["TrainingEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trainingJobStatus = try reader["TrainingJobStatus"].readIfPresent() ?? .sdkUnknown("")
        value.tunedHyperParameters = try reader["TunedHyperParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false) ?? [:]
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.finalHyperParameterTuningJobObjectiveMetric = try reader["FinalHyperParameterTuningJobObjectiveMetric"].readIfPresent(with: SageMakerClientTypes.FinalHyperParameterTuningJobObjectiveMetric.read(from:))
        value.objectiveStatus = try reader["ObjectiveStatus"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.FinalHyperParameterTuningJobObjectiveMetric {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.FinalHyperParameterTuningJobObjectiveMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.FinalHyperParameterTuningJobObjectiveMetric()
        value.type = try reader["Type"].readIfPresent()
        value.metricName = try reader["MetricName"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? 0.0
        return value
    }
}

extension SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig {

    static func write(value: SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ParentHyperParameterTuningJobs"].writeList(value.parentHyperParameterTuningJobs, memberWritingClosure: SageMakerClientTypes.ParentHyperParameterTuningJob.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["WarmStartType"].write(value.warmStartType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig()
        value.parentHyperParameterTuningJobs = try reader["ParentHyperParameterTuningJobs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ParentHyperParameterTuningJob.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.warmStartType = try reader["WarmStartType"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.ParentHyperParameterTuningJob {

    static func write(value: SageMakerClientTypes.ParentHyperParameterTuningJob?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HyperParameterTuningJobName"].write(value.hyperParameterTuningJobName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ParentHyperParameterTuningJob {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ParentHyperParameterTuningJob()
        value.hyperParameterTuningJobName = try reader["HyperParameterTuningJobName"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.Autotune {

    static func write(value: SageMakerClientTypes.Autotune?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Mode"].write(value.mode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Autotune {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Autotune()
        value.mode = try reader["Mode"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.HyperParameterTuningJobCompletionDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HyperParameterTuningJobCompletionDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HyperParameterTuningJobCompletionDetails()
        value.numberOfTrainingJobsObjectiveNotImproving = try reader["NumberOfTrainingJobsObjectiveNotImproving"].readIfPresent()
        value.convergenceDetectedTime = try reader["ConvergenceDetectedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.HyperParameterTuningJobConsumedResources {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HyperParameterTuningJobConsumedResources {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HyperParameterTuningJobConsumedResources()
        value.runtimeInSeconds = try reader["RuntimeInSeconds"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.InferenceComponentSpecificationSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InferenceComponentSpecificationSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InferenceComponentSpecificationSummary()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.container = try reader["Container"].readIfPresent(with: SageMakerClientTypes.InferenceComponentContainerSpecificationSummary.read(from:))
        value.startupParameters = try reader["StartupParameters"].readIfPresent(with: SageMakerClientTypes.InferenceComponentStartupParameters.read(from:))
        value.computeResourceRequirements = try reader["ComputeResourceRequirements"].readIfPresent(with: SageMakerClientTypes.InferenceComponentComputeResourceRequirements.read(from:))
        return value
    }
}

extension SageMakerClientTypes.InferenceComponentComputeResourceRequirements {

    static func write(value: SageMakerClientTypes.InferenceComponentComputeResourceRequirements?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxMemoryRequiredInMb"].write(value.maxMemoryRequiredInMb)
        try writer["MinMemoryRequiredInMb"].write(value.minMemoryRequiredInMb)
        try writer["NumberOfAcceleratorDevicesRequired"].write(value.numberOfAcceleratorDevicesRequired)
        try writer["NumberOfCpuCoresRequired"].write(value.numberOfCpuCoresRequired)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InferenceComponentComputeResourceRequirements {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InferenceComponentComputeResourceRequirements()
        value.numberOfCpuCoresRequired = try reader["NumberOfCpuCoresRequired"].readIfPresent()
        value.numberOfAcceleratorDevicesRequired = try reader["NumberOfAcceleratorDevicesRequired"].readIfPresent()
        value.minMemoryRequiredInMb = try reader["MinMemoryRequiredInMb"].readIfPresent() ?? 0
        value.maxMemoryRequiredInMb = try reader["MaxMemoryRequiredInMb"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.InferenceComponentStartupParameters {

    static func write(value: SageMakerClientTypes.InferenceComponentStartupParameters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContainerStartupHealthCheckTimeoutInSeconds"].write(value.containerStartupHealthCheckTimeoutInSeconds)
        try writer["ModelDataDownloadTimeoutInSeconds"].write(value.modelDataDownloadTimeoutInSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InferenceComponentStartupParameters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InferenceComponentStartupParameters()
        value.modelDataDownloadTimeoutInSeconds = try reader["ModelDataDownloadTimeoutInSeconds"].readIfPresent()
        value.containerStartupHealthCheckTimeoutInSeconds = try reader["ContainerStartupHealthCheckTimeoutInSeconds"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.InferenceComponentContainerSpecificationSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InferenceComponentContainerSpecificationSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InferenceComponentContainerSpecificationSummary()
        value.deployedImage = try reader["DeployedImage"].readIfPresent(with: SageMakerClientTypes.DeployedImage.read(from:))
        value.artifactUrl = try reader["ArtifactUrl"].readIfPresent()
        value.environment = try reader["Environment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.InferenceComponentRuntimeConfigSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InferenceComponentRuntimeConfigSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InferenceComponentRuntimeConfigSummary()
        value.desiredCopyCount = try reader["DesiredCopyCount"].readIfPresent()
        value.currentCopyCount = try reader["CurrentCopyCount"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.InferenceExperimentSchedule {

    static func write(value: SageMakerClientTypes.InferenceExperimentSchedule?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndTime"].writeTimestamp(value.endTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["StartTime"].writeTimestamp(value.startTime, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InferenceExperimentSchedule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InferenceExperimentSchedule()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.EndpointMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EndpointMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EndpointMetadata()
        value.endpointName = try reader["EndpointName"].readIfPresent() ?? ""
        value.endpointConfigName = try reader["EndpointConfigName"].readIfPresent()
        value.endpointStatus = try reader["EndpointStatus"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ModelVariantConfigSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelVariantConfigSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelVariantConfigSummary()
        value.modelName = try reader["ModelName"].readIfPresent() ?? ""
        value.variantName = try reader["VariantName"].readIfPresent() ?? ""
        value.infrastructureConfig = try reader["InfrastructureConfig"].readIfPresent(with: SageMakerClientTypes.ModelInfrastructureConfig.read(from:))
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.ModelInfrastructureConfig {

    static func write(value: SageMakerClientTypes.ModelInfrastructureConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InfrastructureType"].write(value.infrastructureType)
        try writer["RealTimeInferenceConfig"].write(value.realTimeInferenceConfig, with: SageMakerClientTypes.RealTimeInferenceConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelInfrastructureConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelInfrastructureConfig()
        value.infrastructureType = try reader["InfrastructureType"].readIfPresent() ?? .sdkUnknown("")
        value.realTimeInferenceConfig = try reader["RealTimeInferenceConfig"].readIfPresent(with: SageMakerClientTypes.RealTimeInferenceConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.RealTimeInferenceConfig {

    static func write(value: SageMakerClientTypes.RealTimeInferenceConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InstanceCount"].write(value.instanceCount)
        try writer["InstanceType"].write(value.instanceType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RealTimeInferenceConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RealTimeInferenceConfig()
        value.instanceType = try reader["InstanceType"].readIfPresent() ?? .sdkUnknown("")
        value.instanceCount = try reader["InstanceCount"].readIfPresent() ?? 0
        return value
    }
}

extension SageMakerClientTypes.InferenceExperimentDataStorageConfig {

    static func write(value: SageMakerClientTypes.InferenceExperimentDataStorageConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContentType"].write(value.contentType, with: SageMakerClientTypes.CaptureContentTypeHeader.write(value:to:))
        try writer["Destination"].write(value.destination)
        try writer["KmsKey"].write(value.kmsKey)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InferenceExperimentDataStorageConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InferenceExperimentDataStorageConfig()
        value.destination = try reader["Destination"].readIfPresent() ?? ""
        value.kmsKey = try reader["KmsKey"].readIfPresent()
        value.contentType = try reader["ContentType"].readIfPresent(with: SageMakerClientTypes.CaptureContentTypeHeader.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ShadowModeConfig {

    static func write(value: SageMakerClientTypes.ShadowModeConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ShadowModelVariants"].writeList(value.shadowModelVariants, memberWritingClosure: SageMakerClientTypes.ShadowModelVariantConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SourceModelVariantName"].write(value.sourceModelVariantName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ShadowModeConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ShadowModeConfig()
        value.sourceModelVariantName = try reader["SourceModelVariantName"].readIfPresent() ?? ""
        value.shadowModelVariants = try reader["ShadowModelVariants"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ShadowModelVariantConfig.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SageMakerClientTypes.ShadowModelVariantConfig {

    static func write(value: SageMakerClientTypes.ShadowModelVariantConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SamplingPercentage"].write(value.samplingPercentage)
        try writer["ShadowModelVariantName"].write(value.shadowModelVariantName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ShadowModelVariantConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ShadowModelVariantConfig()
        value.shadowModelVariantName = try reader["ShadowModelVariantName"].readIfPresent() ?? ""
        value.samplingPercentage = try reader["SamplingPercentage"].readIfPresent() ?? 0
        return value
    }
}

extension SageMakerClientTypes.RecommendationJobInputConfig {

    static func write(value: SageMakerClientTypes.RecommendationJobInputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContainerConfig"].write(value.containerConfig, with: SageMakerClientTypes.RecommendationJobContainerConfig.write(value:to:))
        try writer["EndpointConfigurations"].writeList(value.endpointConfigurations, memberWritingClosure: SageMakerClientTypes.EndpointInputConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Endpoints"].writeList(value.endpoints, memberWritingClosure: SageMakerClientTypes.EndpointInfo.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["JobDurationInSeconds"].write(value.jobDurationInSeconds)
        try writer["ModelName"].write(value.modelName)
        try writer["ModelPackageVersionArn"].write(value.modelPackageVersionArn)
        try writer["ResourceLimit"].write(value.resourceLimit, with: SageMakerClientTypes.RecommendationJobResourceLimit.write(value:to:))
        try writer["TrafficPattern"].write(value.trafficPattern, with: SageMakerClientTypes.TrafficPattern.write(value:to:))
        try writer["VolumeKmsKeyId"].write(value.volumeKmsKeyId)
        try writer["VpcConfig"].write(value.vpcConfig, with: SageMakerClientTypes.RecommendationJobVpcConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RecommendationJobInputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RecommendationJobInputConfig()
        value.modelPackageVersionArn = try reader["ModelPackageVersionArn"].readIfPresent()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.jobDurationInSeconds = try reader["JobDurationInSeconds"].readIfPresent()
        value.trafficPattern = try reader["TrafficPattern"].readIfPresent(with: SageMakerClientTypes.TrafficPattern.read(from:))
        value.resourceLimit = try reader["ResourceLimit"].readIfPresent(with: SageMakerClientTypes.RecommendationJobResourceLimit.read(from:))
        value.endpointConfigurations = try reader["EndpointConfigurations"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.EndpointInputConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.volumeKmsKeyId = try reader["VolumeKmsKeyId"].readIfPresent()
        value.containerConfig = try reader["ContainerConfig"].readIfPresent(with: SageMakerClientTypes.RecommendationJobContainerConfig.read(from:))
        value.endpoints = try reader["Endpoints"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.EndpointInfo.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: SageMakerClientTypes.RecommendationJobVpcConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.RecommendationJobVpcConfig {

    static func write(value: SageMakerClientTypes.RecommendationJobVpcConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Subnets"].writeList(value.subnets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RecommendationJobVpcConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RecommendationJobVpcConfig()
        value.securityGroupIds = try reader["SecurityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.subnets = try reader["Subnets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SageMakerClientTypes.EndpointInfo {

    static func write(value: SageMakerClientTypes.EndpointInfo?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndpointName"].write(value.endpointName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EndpointInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EndpointInfo()
        value.endpointName = try reader["EndpointName"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.RecommendationJobContainerConfig {

    static func write(value: SageMakerClientTypes.RecommendationJobContainerConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataInputConfig"].write(value.dataInputConfig)
        try writer["Domain"].write(value.domain)
        try writer["Framework"].write(value.framework)
        try writer["FrameworkVersion"].write(value.frameworkVersion)
        try writer["NearestModelName"].write(value.nearestModelName)
        try writer["PayloadConfig"].write(value.payloadConfig, with: SageMakerClientTypes.RecommendationJobPayloadConfig.write(value:to:))
        try writer["SupportedEndpointType"].write(value.supportedEndpointType)
        try writer["SupportedInstanceTypes"].writeList(value.supportedInstanceTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SupportedResponseMIMETypes"].writeList(value.supportedResponseMIMETypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Task"].write(value.task)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RecommendationJobContainerConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RecommendationJobContainerConfig()
        value.domain = try reader["Domain"].readIfPresent()
        value.task = try reader["Task"].readIfPresent()
        value.framework = try reader["Framework"].readIfPresent()
        value.frameworkVersion = try reader["FrameworkVersion"].readIfPresent()
        value.payloadConfig = try reader["PayloadConfig"].readIfPresent(with: SageMakerClientTypes.RecommendationJobPayloadConfig.read(from:))
        value.nearestModelName = try reader["NearestModelName"].readIfPresent()
        value.supportedInstanceTypes = try reader["SupportedInstanceTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.supportedEndpointType = try reader["SupportedEndpointType"].readIfPresent()
        value.dataInputConfig = try reader["DataInputConfig"].readIfPresent()
        value.supportedResponseMIMETypes = try reader["SupportedResponseMIMETypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.RecommendationJobPayloadConfig {

    static func write(value: SageMakerClientTypes.RecommendationJobPayloadConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SamplePayloadUrl"].write(value.samplePayloadUrl)
        try writer["SupportedContentTypes"].writeList(value.supportedContentTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RecommendationJobPayloadConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RecommendationJobPayloadConfig()
        value.samplePayloadUrl = try reader["SamplePayloadUrl"].readIfPresent()
        value.supportedContentTypes = try reader["SupportedContentTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.EndpointInputConfiguration {

    static func write(value: SageMakerClientTypes.EndpointInputConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnvironmentParameterRanges"].write(value.environmentParameterRanges, with: SageMakerClientTypes.EnvironmentParameterRanges.write(value:to:))
        try writer["InferenceSpecificationName"].write(value.inferenceSpecificationName)
        try writer["InstanceType"].write(value.instanceType)
        try writer["ServerlessConfig"].write(value.serverlessConfig, with: SageMakerClientTypes.ProductionVariantServerlessConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EndpointInputConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EndpointInputConfiguration()
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.serverlessConfig = try reader["ServerlessConfig"].readIfPresent(with: SageMakerClientTypes.ProductionVariantServerlessConfig.read(from:))
        value.inferenceSpecificationName = try reader["InferenceSpecificationName"].readIfPresent()
        value.environmentParameterRanges = try reader["EnvironmentParameterRanges"].readIfPresent(with: SageMakerClientTypes.EnvironmentParameterRanges.read(from:))
        return value
    }
}

extension SageMakerClientTypes.EnvironmentParameterRanges {

    static func write(value: SageMakerClientTypes.EnvironmentParameterRanges?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CategoricalParameterRanges"].writeList(value.categoricalParameterRanges, memberWritingClosure: SageMakerClientTypes.CategoricalParameter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EnvironmentParameterRanges {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EnvironmentParameterRanges()
        value.categoricalParameterRanges = try reader["CategoricalParameterRanges"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.CategoricalParameter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.CategoricalParameter {

    static func write(value: SageMakerClientTypes.CategoricalParameter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].writeList(value.value, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CategoricalParameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CategoricalParameter()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.value = try reader["Value"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SageMakerClientTypes.RecommendationJobResourceLimit {

    static func write(value: SageMakerClientTypes.RecommendationJobResourceLimit?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxNumberOfTests"].write(value.maxNumberOfTests)
        try writer["MaxParallelOfTests"].write(value.maxParallelOfTests)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RecommendationJobResourceLimit {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RecommendationJobResourceLimit()
        value.maxNumberOfTests = try reader["MaxNumberOfTests"].readIfPresent()
        value.maxParallelOfTests = try reader["MaxParallelOfTests"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TrafficPattern {

    static func write(value: SageMakerClientTypes.TrafficPattern?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Phases"].writeList(value.phases, memberWritingClosure: SageMakerClientTypes.Phase.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Stairs"].write(value.stairs, with: SageMakerClientTypes.Stairs.write(value:to:))
        try writer["TrafficType"].write(value.trafficType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrafficPattern {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrafficPattern()
        value.trafficType = try reader["TrafficType"].readIfPresent()
        value.phases = try reader["Phases"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Phase.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.stairs = try reader["Stairs"].readIfPresent(with: SageMakerClientTypes.Stairs.read(from:))
        return value
    }
}

extension SageMakerClientTypes.Stairs {

    static func write(value: SageMakerClientTypes.Stairs?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DurationInSeconds"].write(value.durationInSeconds)
        try writer["NumberOfSteps"].write(value.numberOfSteps)
        try writer["UsersPerStep"].write(value.usersPerStep)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Stairs {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Stairs()
        value.durationInSeconds = try reader["DurationInSeconds"].readIfPresent()
        value.numberOfSteps = try reader["NumberOfSteps"].readIfPresent()
        value.usersPerStep = try reader["UsersPerStep"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.Phase {

    static func write(value: SageMakerClientTypes.Phase?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DurationInSeconds"].write(value.durationInSeconds)
        try writer["InitialNumberOfUsers"].write(value.initialNumberOfUsers)
        try writer["SpawnRate"].write(value.spawnRate)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Phase {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Phase()
        value.initialNumberOfUsers = try reader["InitialNumberOfUsers"].readIfPresent()
        value.spawnRate = try reader["SpawnRate"].readIfPresent()
        value.durationInSeconds = try reader["DurationInSeconds"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.RecommendationJobStoppingConditions {

    static func write(value: SageMakerClientTypes.RecommendationJobStoppingConditions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FlatInvocations"].write(value.flatInvocations)
        try writer["MaxInvocations"].write(value.maxInvocations)
        try writer["ModelLatencyThresholds"].writeList(value.modelLatencyThresholds, memberWritingClosure: SageMakerClientTypes.ModelLatencyThreshold.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RecommendationJobStoppingConditions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RecommendationJobStoppingConditions()
        value.maxInvocations = try reader["MaxInvocations"].readIfPresent()
        value.modelLatencyThresholds = try reader["ModelLatencyThresholds"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ModelLatencyThreshold.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.flatInvocations = try reader["FlatInvocations"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ModelLatencyThreshold {

    static func write(value: SageMakerClientTypes.ModelLatencyThreshold?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Percentile"].write(value.percentile)
        try writer["ValueInMilliseconds"].write(value.valueInMilliseconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelLatencyThreshold {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelLatencyThreshold()
        value.percentile = try reader["Percentile"].readIfPresent()
        value.valueInMilliseconds = try reader["ValueInMilliseconds"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.InferenceRecommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InferenceRecommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InferenceRecommendation()
        value.recommendationId = try reader["RecommendationId"].readIfPresent()
        value.metrics = try reader["Metrics"].readIfPresent(with: SageMakerClientTypes.RecommendationMetrics.read(from:))
        value.endpointConfiguration = try reader["EndpointConfiguration"].readIfPresent(with: SageMakerClientTypes.EndpointOutputConfiguration.read(from:))
        value.modelConfiguration = try reader["ModelConfiguration"].readIfPresent(with: SageMakerClientTypes.ModelConfiguration.read(from:))
        value.invocationEndTime = try reader["InvocationEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.invocationStartTime = try reader["InvocationStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.ModelConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelConfiguration()
        value.inferenceSpecificationName = try reader["InferenceSpecificationName"].readIfPresent()
        value.environmentParameters = try reader["EnvironmentParameters"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.EnvironmentParameter.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.compilationJobName = try reader["CompilationJobName"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.EnvironmentParameter {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EnvironmentParameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EnvironmentParameter()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.valueType = try reader["ValueType"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.EndpointOutputConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EndpointOutputConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EndpointOutputConfiguration()
        value.endpointName = try reader["EndpointName"].readIfPresent() ?? ""
        value.variantName = try reader["VariantName"].readIfPresent() ?? ""
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.initialInstanceCount = try reader["InitialInstanceCount"].readIfPresent()
        value.serverlessConfig = try reader["ServerlessConfig"].readIfPresent(with: SageMakerClientTypes.ProductionVariantServerlessConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.RecommendationMetrics {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RecommendationMetrics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RecommendationMetrics()
        value.costPerHour = try reader["CostPerHour"].readIfPresent()
        value.costPerInference = try reader["CostPerInference"].readIfPresent()
        value.maxInvocations = try reader["MaxInvocations"].readIfPresent()
        value.modelLatency = try reader["ModelLatency"].readIfPresent()
        value.cpuUtilization = try reader["CpuUtilization"].readIfPresent()
        value.memoryUtilization = try reader["MemoryUtilization"].readIfPresent()
        value.modelSetupTime = try reader["ModelSetupTime"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.EndpointPerformance {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EndpointPerformance {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EndpointPerformance()
        value.metrics = try reader["Metrics"].readIfPresent(with: SageMakerClientTypes.InferenceMetrics.read(from:))
        value.endpointInfo = try reader["EndpointInfo"].readIfPresent(with: SageMakerClientTypes.EndpointInfo.read(from:))
        return value
    }
}

extension SageMakerClientTypes.InferenceMetrics {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InferenceMetrics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InferenceMetrics()
        value.maxInvocations = try reader["MaxInvocations"].readIfPresent() ?? 0
        value.modelLatency = try reader["ModelLatency"].readIfPresent() ?? 0
        return value
    }
}

extension SageMakerClientTypes.LabelCounters {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.LabelCounters {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.LabelCounters()
        value.totalLabeled = try reader["TotalLabeled"].readIfPresent()
        value.humanLabeled = try reader["HumanLabeled"].readIfPresent()
        value.machineLabeled = try reader["MachineLabeled"].readIfPresent()
        value.failedNonRetryableError = try reader["FailedNonRetryableError"].readIfPresent()
        value.unlabeled = try reader["Unlabeled"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.LabelingJobInputConfig {

    static func write(value: SageMakerClientTypes.LabelingJobInputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataAttributes"].write(value.dataAttributes, with: SageMakerClientTypes.LabelingJobDataAttributes.write(value:to:))
        try writer["DataSource"].write(value.dataSource, with: SageMakerClientTypes.LabelingJobDataSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.LabelingJobInputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.LabelingJobInputConfig()
        value.dataSource = try reader["DataSource"].readIfPresent(with: SageMakerClientTypes.LabelingJobDataSource.read(from:))
        value.dataAttributes = try reader["DataAttributes"].readIfPresent(with: SageMakerClientTypes.LabelingJobDataAttributes.read(from:))
        return value
    }
}

extension SageMakerClientTypes.LabelingJobDataAttributes {

    static func write(value: SageMakerClientTypes.LabelingJobDataAttributes?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContentClassifiers"].writeList(value.contentClassifiers, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerClientTypes.ContentClassifier>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.LabelingJobDataAttributes {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.LabelingJobDataAttributes()
        value.contentClassifiers = try reader["ContentClassifiers"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SageMakerClientTypes.ContentClassifier>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.LabelingJobDataSource {

    static func write(value: SageMakerClientTypes.LabelingJobDataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3DataSource"].write(value.s3DataSource, with: SageMakerClientTypes.LabelingJobS3DataSource.write(value:to:))
        try writer["SnsDataSource"].write(value.snsDataSource, with: SageMakerClientTypes.LabelingJobSnsDataSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.LabelingJobDataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.LabelingJobDataSource()
        value.s3DataSource = try reader["S3DataSource"].readIfPresent(with: SageMakerClientTypes.LabelingJobS3DataSource.read(from:))
        value.snsDataSource = try reader["SnsDataSource"].readIfPresent(with: SageMakerClientTypes.LabelingJobSnsDataSource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.LabelingJobSnsDataSource {

    static func write(value: SageMakerClientTypes.LabelingJobSnsDataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SnsTopicArn"].write(value.snsTopicArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.LabelingJobSnsDataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.LabelingJobSnsDataSource()
        value.snsTopicArn = try reader["SnsTopicArn"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.LabelingJobS3DataSource {

    static func write(value: SageMakerClientTypes.LabelingJobS3DataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ManifestS3Uri"].write(value.manifestS3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.LabelingJobS3DataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.LabelingJobS3DataSource()
        value.manifestS3Uri = try reader["ManifestS3Uri"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.LabelingJobOutputConfig {

    static func write(value: SageMakerClientTypes.LabelingJobOutputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["S3OutputPath"].write(value.s3OutputPath)
        try writer["SnsTopicArn"].write(value.snsTopicArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.LabelingJobOutputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.LabelingJobOutputConfig()
        value.s3OutputPath = try reader["S3OutputPath"].readIfPresent() ?? ""
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.snsTopicArn = try reader["SnsTopicArn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.LabelingJobStoppingConditions {

    static func write(value: SageMakerClientTypes.LabelingJobStoppingConditions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxHumanLabeledObjectCount"].write(value.maxHumanLabeledObjectCount)
        try writer["MaxPercentageOfInputDatasetLabeled"].write(value.maxPercentageOfInputDatasetLabeled)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.LabelingJobStoppingConditions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.LabelingJobStoppingConditions()
        value.maxHumanLabeledObjectCount = try reader["MaxHumanLabeledObjectCount"].readIfPresent()
        value.maxPercentageOfInputDatasetLabeled = try reader["MaxPercentageOfInputDatasetLabeled"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.LabelingJobAlgorithmsConfig {

    static func write(value: SageMakerClientTypes.LabelingJobAlgorithmsConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InitialActiveLearningModelArn"].write(value.initialActiveLearningModelArn)
        try writer["LabelingJobAlgorithmSpecificationArn"].write(value.labelingJobAlgorithmSpecificationArn)
        try writer["LabelingJobResourceConfig"].write(value.labelingJobResourceConfig, with: SageMakerClientTypes.LabelingJobResourceConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.LabelingJobAlgorithmsConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.LabelingJobAlgorithmsConfig()
        value.labelingJobAlgorithmSpecificationArn = try reader["LabelingJobAlgorithmSpecificationArn"].readIfPresent() ?? ""
        value.initialActiveLearningModelArn = try reader["InitialActiveLearningModelArn"].readIfPresent()
        value.labelingJobResourceConfig = try reader["LabelingJobResourceConfig"].readIfPresent(with: SageMakerClientTypes.LabelingJobResourceConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.LabelingJobResourceConfig {

    static func write(value: SageMakerClientTypes.LabelingJobResourceConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["VolumeKmsKeyId"].write(value.volumeKmsKeyId)
        try writer["VpcConfig"].write(value.vpcConfig, with: SageMakerClientTypes.VpcConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.LabelingJobResourceConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.LabelingJobResourceConfig()
        value.volumeKmsKeyId = try reader["VolumeKmsKeyId"].readIfPresent()
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: SageMakerClientTypes.VpcConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.HumanTaskConfig {

    static func write(value: SageMakerClientTypes.HumanTaskConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnnotationConsolidationConfig"].write(value.annotationConsolidationConfig, with: SageMakerClientTypes.AnnotationConsolidationConfig.write(value:to:))
        try writer["MaxConcurrentTaskCount"].write(value.maxConcurrentTaskCount)
        try writer["NumberOfHumanWorkersPerDataObject"].write(value.numberOfHumanWorkersPerDataObject)
        try writer["PreHumanTaskLambdaArn"].write(value.preHumanTaskLambdaArn)
        try writer["PublicWorkforceTaskPrice"].write(value.publicWorkforceTaskPrice, with: SageMakerClientTypes.PublicWorkforceTaskPrice.write(value:to:))
        try writer["TaskAvailabilityLifetimeInSeconds"].write(value.taskAvailabilityLifetimeInSeconds)
        try writer["TaskDescription"].write(value.taskDescription)
        try writer["TaskKeywords"].writeList(value.taskKeywords, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TaskTimeLimitInSeconds"].write(value.taskTimeLimitInSeconds)
        try writer["TaskTitle"].write(value.taskTitle)
        try writer["UiConfig"].write(value.uiConfig, with: SageMakerClientTypes.UiConfig.write(value:to:))
        try writer["WorkteamArn"].write(value.workteamArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HumanTaskConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HumanTaskConfig()
        value.workteamArn = try reader["WorkteamArn"].readIfPresent() ?? ""
        value.uiConfig = try reader["UiConfig"].readIfPresent(with: SageMakerClientTypes.UiConfig.read(from:))
        value.preHumanTaskLambdaArn = try reader["PreHumanTaskLambdaArn"].readIfPresent() ?? ""
        value.taskKeywords = try reader["TaskKeywords"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.taskTitle = try reader["TaskTitle"].readIfPresent() ?? ""
        value.taskDescription = try reader["TaskDescription"].readIfPresent() ?? ""
        value.numberOfHumanWorkersPerDataObject = try reader["NumberOfHumanWorkersPerDataObject"].readIfPresent() ?? 0
        value.taskTimeLimitInSeconds = try reader["TaskTimeLimitInSeconds"].readIfPresent() ?? 0
        value.taskAvailabilityLifetimeInSeconds = try reader["TaskAvailabilityLifetimeInSeconds"].readIfPresent()
        value.maxConcurrentTaskCount = try reader["MaxConcurrentTaskCount"].readIfPresent()
        value.annotationConsolidationConfig = try reader["AnnotationConsolidationConfig"].readIfPresent(with: SageMakerClientTypes.AnnotationConsolidationConfig.read(from:))
        value.publicWorkforceTaskPrice = try reader["PublicWorkforceTaskPrice"].readIfPresent(with: SageMakerClientTypes.PublicWorkforceTaskPrice.read(from:))
        return value
    }
}

extension SageMakerClientTypes.AnnotationConsolidationConfig {

    static func write(value: SageMakerClientTypes.AnnotationConsolidationConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnnotationConsolidationLambdaArn"].write(value.annotationConsolidationLambdaArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AnnotationConsolidationConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AnnotationConsolidationConfig()
        value.annotationConsolidationLambdaArn = try reader["AnnotationConsolidationLambdaArn"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.UiConfig {

    static func write(value: SageMakerClientTypes.UiConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HumanTaskUiArn"].write(value.humanTaskUiArn)
        try writer["UiTemplateS3Uri"].write(value.uiTemplateS3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.UiConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.UiConfig()
        value.uiTemplateS3Uri = try reader["UiTemplateS3Uri"].readIfPresent()
        value.humanTaskUiArn = try reader["HumanTaskUiArn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.LabelingJobOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.LabelingJobOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.LabelingJobOutput()
        value.outputDatasetS3Uri = try reader["OutputDatasetS3Uri"].readIfPresent() ?? ""
        value.finalActiveLearningModelArn = try reader["FinalActiveLearningModelArn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ContainerDefinition {

    static func write(value: SageMakerClientTypes.ContainerDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AdditionalModelDataSources"].writeList(value.additionalModelDataSources, memberWritingClosure: SageMakerClientTypes.AdditionalModelDataSource.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ContainerHostname"].write(value.containerHostname)
        try writer["Environment"].writeMap(value.environment, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Image"].write(value.image)
        try writer["ImageConfig"].write(value.imageConfig, with: SageMakerClientTypes.ImageConfig.write(value:to:))
        try writer["InferenceSpecificationName"].write(value.inferenceSpecificationName)
        try writer["Mode"].write(value.mode)
        try writer["ModelDataSource"].write(value.modelDataSource, with: SageMakerClientTypes.ModelDataSource.write(value:to:))
        try writer["ModelDataUrl"].write(value.modelDataUrl)
        try writer["ModelPackageName"].write(value.modelPackageName)
        try writer["MultiModelConfig"].write(value.multiModelConfig, with: SageMakerClientTypes.MultiModelConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ContainerDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ContainerDefinition()
        value.containerHostname = try reader["ContainerHostname"].readIfPresent()
        value.image = try reader["Image"].readIfPresent()
        value.imageConfig = try reader["ImageConfig"].readIfPresent(with: SageMakerClientTypes.ImageConfig.read(from:))
        value.mode = try reader["Mode"].readIfPresent()
        value.modelDataUrl = try reader["ModelDataUrl"].readIfPresent()
        value.modelDataSource = try reader["ModelDataSource"].readIfPresent(with: SageMakerClientTypes.ModelDataSource.read(from:))
        value.additionalModelDataSources = try reader["AdditionalModelDataSources"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AdditionalModelDataSource.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.environment = try reader["Environment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.modelPackageName = try reader["ModelPackageName"].readIfPresent()
        value.inferenceSpecificationName = try reader["InferenceSpecificationName"].readIfPresent()
        value.multiModelConfig = try reader["MultiModelConfig"].readIfPresent(with: SageMakerClientTypes.MultiModelConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.MultiModelConfig {

    static func write(value: SageMakerClientTypes.MultiModelConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelCacheSetting"].write(value.modelCacheSetting)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MultiModelConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MultiModelConfig()
        value.modelCacheSetting = try reader["ModelCacheSetting"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.AdditionalModelDataSource {

    static func write(value: SageMakerClientTypes.AdditionalModelDataSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ChannelName"].write(value.channelName)
        try writer["S3DataSource"].write(value.s3DataSource, with: SageMakerClientTypes.S3ModelDataSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AdditionalModelDataSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AdditionalModelDataSource()
        value.channelName = try reader["ChannelName"].readIfPresent() ?? ""
        value.s3DataSource = try reader["S3DataSource"].readIfPresent(with: SageMakerClientTypes.S3ModelDataSource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ImageConfig {

    static func write(value: SageMakerClientTypes.ImageConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RepositoryAccessMode"].write(value.repositoryAccessMode)
        try writer["RepositoryAuthConfig"].write(value.repositoryAuthConfig, with: SageMakerClientTypes.RepositoryAuthConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ImageConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ImageConfig()
        value.repositoryAccessMode = try reader["RepositoryAccessMode"].readIfPresent() ?? .sdkUnknown("")
        value.repositoryAuthConfig = try reader["RepositoryAuthConfig"].readIfPresent(with: SageMakerClientTypes.RepositoryAuthConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.RepositoryAuthConfig {

    static func write(value: SageMakerClientTypes.RepositoryAuthConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RepositoryCredentialsProviderArn"].write(value.repositoryCredentialsProviderArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RepositoryAuthConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RepositoryAuthConfig()
        value.repositoryCredentialsProviderArn = try reader["RepositoryCredentialsProviderArn"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.InferenceExecutionConfig {

    static func write(value: SageMakerClientTypes.InferenceExecutionConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Mode"].write(value.mode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InferenceExecutionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InferenceExecutionConfig()
        value.mode = try reader["Mode"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.DeploymentRecommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DeploymentRecommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DeploymentRecommendation()
        value.recommendationStatus = try reader["RecommendationStatus"].readIfPresent() ?? .sdkUnknown("")
        value.realTimeInferenceRecommendations = try reader["RealTimeInferenceRecommendations"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.RealTimeInferenceRecommendation.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.RealTimeInferenceRecommendation {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RealTimeInferenceRecommendation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RealTimeInferenceRecommendation()
        value.recommendationId = try reader["RecommendationId"].readIfPresent() ?? ""
        value.instanceType = try reader["InstanceType"].readIfPresent() ?? .sdkUnknown("")
        value.environment = try reader["Environment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ModelBiasBaselineConfig {

    static func write(value: SageMakerClientTypes.ModelBiasBaselineConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BaseliningJobName"].write(value.baseliningJobName)
        try writer["ConstraintsResource"].write(value.constraintsResource, with: SageMakerClientTypes.MonitoringConstraintsResource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelBiasBaselineConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelBiasBaselineConfig()
        value.baseliningJobName = try reader["BaseliningJobName"].readIfPresent()
        value.constraintsResource = try reader["ConstraintsResource"].readIfPresent(with: SageMakerClientTypes.MonitoringConstraintsResource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ModelBiasAppSpecification {

    static func write(value: SageMakerClientTypes.ModelBiasAppSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigUri"].write(value.configUri)
        try writer["Environment"].writeMap(value.environment, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ImageUri"].write(value.imageUri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelBiasAppSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelBiasAppSpecification()
        value.imageUri = try reader["ImageUri"].readIfPresent() ?? ""
        value.configUri = try reader["ConfigUri"].readIfPresent() ?? ""
        value.environment = try reader["Environment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ModelBiasJobInput {

    static func write(value: SageMakerClientTypes.ModelBiasJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BatchTransformInput"].write(value.batchTransformInput, with: SageMakerClientTypes.BatchTransformInput.write(value:to:))
        try writer["EndpointInput"].write(value.endpointInput, with: SageMakerClientTypes.EndpointInput.write(value:to:))
        try writer["GroundTruthS3Input"].write(value.groundTruthS3Input, with: SageMakerClientTypes.MonitoringGroundTruthS3Input.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelBiasJobInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelBiasJobInput()
        value.endpointInput = try reader["EndpointInput"].readIfPresent(with: SageMakerClientTypes.EndpointInput.read(from:))
        value.batchTransformInput = try reader["BatchTransformInput"].readIfPresent(with: SageMakerClientTypes.BatchTransformInput.read(from:))
        value.groundTruthS3Input = try reader["GroundTruthS3Input"].readIfPresent(with: SageMakerClientTypes.MonitoringGroundTruthS3Input.read(from:))
        return value
    }
}

extension SageMakerClientTypes.MonitoringGroundTruthS3Input {

    static func write(value: SageMakerClientTypes.MonitoringGroundTruthS3Input?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringGroundTruthS3Input {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringGroundTruthS3Input()
        value.s3Uri = try reader["S3Uri"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ModelCardSecurityConfig {

    static func write(value: SageMakerClientTypes.ModelCardSecurityConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelCardSecurityConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelCardSecurityConfig()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ModelCardExportOutputConfig {

    static func write(value: SageMakerClientTypes.ModelCardExportOutputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3OutputPath"].write(value.s3OutputPath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelCardExportOutputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelCardExportOutputConfig()
        value.s3OutputPath = try reader["S3OutputPath"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.ModelCardExportArtifacts {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelCardExportArtifacts {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelCardExportArtifacts()
        value.s3ExportArtifacts = try reader["S3ExportArtifacts"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.ModelExplainabilityBaselineConfig {

    static func write(value: SageMakerClientTypes.ModelExplainabilityBaselineConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BaseliningJobName"].write(value.baseliningJobName)
        try writer["ConstraintsResource"].write(value.constraintsResource, with: SageMakerClientTypes.MonitoringConstraintsResource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelExplainabilityBaselineConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelExplainabilityBaselineConfig()
        value.baseliningJobName = try reader["BaseliningJobName"].readIfPresent()
        value.constraintsResource = try reader["ConstraintsResource"].readIfPresent(with: SageMakerClientTypes.MonitoringConstraintsResource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ModelExplainabilityAppSpecification {

    static func write(value: SageMakerClientTypes.ModelExplainabilityAppSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigUri"].write(value.configUri)
        try writer["Environment"].writeMap(value.environment, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ImageUri"].write(value.imageUri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelExplainabilityAppSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelExplainabilityAppSpecification()
        value.imageUri = try reader["ImageUri"].readIfPresent() ?? ""
        value.configUri = try reader["ConfigUri"].readIfPresent() ?? ""
        value.environment = try reader["Environment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ModelExplainabilityJobInput {

    static func write(value: SageMakerClientTypes.ModelExplainabilityJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BatchTransformInput"].write(value.batchTransformInput, with: SageMakerClientTypes.BatchTransformInput.write(value:to:))
        try writer["EndpointInput"].write(value.endpointInput, with: SageMakerClientTypes.EndpointInput.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelExplainabilityJobInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelExplainabilityJobInput()
        value.endpointInput = try reader["EndpointInput"].readIfPresent(with: SageMakerClientTypes.EndpointInput.read(from:))
        value.batchTransformInput = try reader["BatchTransformInput"].readIfPresent(with: SageMakerClientTypes.BatchTransformInput.read(from:))
        return value
    }
}

extension SageMakerClientTypes.SourceAlgorithmSpecification {

    static func write(value: SageMakerClientTypes.SourceAlgorithmSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SourceAlgorithms"].writeList(value.sourceAlgorithms, memberWritingClosure: SageMakerClientTypes.SourceAlgorithm.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SourceAlgorithmSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SourceAlgorithmSpecification()
        value.sourceAlgorithms = try reader["SourceAlgorithms"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.SourceAlgorithm.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SageMakerClientTypes.SourceAlgorithm {

    static func write(value: SageMakerClientTypes.SourceAlgorithm?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlgorithmName"].write(value.algorithmName)
        try writer["ModelDataSource"].write(value.modelDataSource, with: SageMakerClientTypes.ModelDataSource.write(value:to:))
        try writer["ModelDataUrl"].write(value.modelDataUrl)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SourceAlgorithm {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SourceAlgorithm()
        value.modelDataUrl = try reader["ModelDataUrl"].readIfPresent()
        value.modelDataSource = try reader["ModelDataSource"].readIfPresent(with: SageMakerClientTypes.ModelDataSource.read(from:))
        value.algorithmName = try reader["AlgorithmName"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.ModelPackageValidationSpecification {

    static func write(value: SageMakerClientTypes.ModelPackageValidationSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ValidationProfiles"].writeList(value.validationProfiles, memberWritingClosure: SageMakerClientTypes.ModelPackageValidationProfile.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ValidationRole"].write(value.validationRole)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelPackageValidationSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelPackageValidationSpecification()
        value.validationRole = try reader["ValidationRole"].readIfPresent() ?? ""
        value.validationProfiles = try reader["ValidationProfiles"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ModelPackageValidationProfile.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SageMakerClientTypes.ModelPackageValidationProfile {

    static func write(value: SageMakerClientTypes.ModelPackageValidationProfile?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProfileName"].write(value.profileName)
        try writer["TransformJobDefinition"].write(value.transformJobDefinition, with: SageMakerClientTypes.TransformJobDefinition.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelPackageValidationProfile {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelPackageValidationProfile()
        value.profileName = try reader["ProfileName"].readIfPresent() ?? ""
        value.transformJobDefinition = try reader["TransformJobDefinition"].readIfPresent(with: SageMakerClientTypes.TransformJobDefinition.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ModelPackageStatusDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelPackageStatusDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelPackageStatusDetails()
        value.validationStatuses = try reader["ValidationStatuses"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ModelPackageStatusItem.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.imageScanStatuses = try reader["ImageScanStatuses"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ModelPackageStatusItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ModelPackageStatusItem {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelPackageStatusItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelPackageStatusItem()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.failureReason = try reader["FailureReason"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ModelMetrics {

    static func write(value: SageMakerClientTypes.ModelMetrics?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bias"].write(value.bias, with: SageMakerClientTypes.Bias.write(value:to:))
        try writer["Explainability"].write(value.explainability, with: SageMakerClientTypes.Explainability.write(value:to:))
        try writer["ModelDataQuality"].write(value.modelDataQuality, with: SageMakerClientTypes.ModelDataQuality.write(value:to:))
        try writer["ModelQuality"].write(value.modelQuality, with: SageMakerClientTypes.ModelQuality.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelMetrics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelMetrics()
        value.modelQuality = try reader["ModelQuality"].readIfPresent(with: SageMakerClientTypes.ModelQuality.read(from:))
        value.modelDataQuality = try reader["ModelDataQuality"].readIfPresent(with: SageMakerClientTypes.ModelDataQuality.read(from:))
        value.bias = try reader["Bias"].readIfPresent(with: SageMakerClientTypes.Bias.read(from:))
        value.explainability = try reader["Explainability"].readIfPresent(with: SageMakerClientTypes.Explainability.read(from:))
        return value
    }
}

extension SageMakerClientTypes.Explainability {

    static func write(value: SageMakerClientTypes.Explainability?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Report"].write(value.report, with: SageMakerClientTypes.MetricsSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Explainability {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Explainability()
        value.report = try reader["Report"].readIfPresent(with: SageMakerClientTypes.MetricsSource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.MetricsSource {

    static func write(value: SageMakerClientTypes.MetricsSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContentDigest"].write(value.contentDigest)
        try writer["ContentType"].write(value.contentType)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MetricsSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MetricsSource()
        value.contentType = try reader["ContentType"].readIfPresent() ?? ""
        value.contentDigest = try reader["ContentDigest"].readIfPresent()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.Bias {

    static func write(value: SageMakerClientTypes.Bias?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PostTrainingReport"].write(value.postTrainingReport, with: SageMakerClientTypes.MetricsSource.write(value:to:))
        try writer["PreTrainingReport"].write(value.preTrainingReport, with: SageMakerClientTypes.MetricsSource.write(value:to:))
        try writer["Report"].write(value.report, with: SageMakerClientTypes.MetricsSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Bias {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Bias()
        value.report = try reader["Report"].readIfPresent(with: SageMakerClientTypes.MetricsSource.read(from:))
        value.preTrainingReport = try reader["PreTrainingReport"].readIfPresent(with: SageMakerClientTypes.MetricsSource.read(from:))
        value.postTrainingReport = try reader["PostTrainingReport"].readIfPresent(with: SageMakerClientTypes.MetricsSource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ModelDataQuality {

    static func write(value: SageMakerClientTypes.ModelDataQuality?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Constraints"].write(value.constraints, with: SageMakerClientTypes.MetricsSource.write(value:to:))
        try writer["Statistics"].write(value.statistics, with: SageMakerClientTypes.MetricsSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelDataQuality {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelDataQuality()
        value.statistics = try reader["Statistics"].readIfPresent(with: SageMakerClientTypes.MetricsSource.read(from:))
        value.constraints = try reader["Constraints"].readIfPresent(with: SageMakerClientTypes.MetricsSource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ModelQuality {

    static func write(value: SageMakerClientTypes.ModelQuality?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Constraints"].write(value.constraints, with: SageMakerClientTypes.MetricsSource.write(value:to:))
        try writer["Statistics"].write(value.statistics, with: SageMakerClientTypes.MetricsSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelQuality {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelQuality()
        value.statistics = try reader["Statistics"].readIfPresent(with: SageMakerClientTypes.MetricsSource.read(from:))
        value.constraints = try reader["Constraints"].readIfPresent(with: SageMakerClientTypes.MetricsSource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.DriftCheckBaselines {

    static func write(value: SageMakerClientTypes.DriftCheckBaselines?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bias"].write(value.bias, with: SageMakerClientTypes.DriftCheckBias.write(value:to:))
        try writer["Explainability"].write(value.explainability, with: SageMakerClientTypes.DriftCheckExplainability.write(value:to:))
        try writer["ModelDataQuality"].write(value.modelDataQuality, with: SageMakerClientTypes.DriftCheckModelDataQuality.write(value:to:))
        try writer["ModelQuality"].write(value.modelQuality, with: SageMakerClientTypes.DriftCheckModelQuality.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DriftCheckBaselines {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DriftCheckBaselines()
        value.bias = try reader["Bias"].readIfPresent(with: SageMakerClientTypes.DriftCheckBias.read(from:))
        value.explainability = try reader["Explainability"].readIfPresent(with: SageMakerClientTypes.DriftCheckExplainability.read(from:))
        value.modelQuality = try reader["ModelQuality"].readIfPresent(with: SageMakerClientTypes.DriftCheckModelQuality.read(from:))
        value.modelDataQuality = try reader["ModelDataQuality"].readIfPresent(with: SageMakerClientTypes.DriftCheckModelDataQuality.read(from:))
        return value
    }
}

extension SageMakerClientTypes.DriftCheckModelDataQuality {

    static func write(value: SageMakerClientTypes.DriftCheckModelDataQuality?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Constraints"].write(value.constraints, with: SageMakerClientTypes.MetricsSource.write(value:to:))
        try writer["Statistics"].write(value.statistics, with: SageMakerClientTypes.MetricsSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DriftCheckModelDataQuality {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DriftCheckModelDataQuality()
        value.statistics = try reader["Statistics"].readIfPresent(with: SageMakerClientTypes.MetricsSource.read(from:))
        value.constraints = try reader["Constraints"].readIfPresent(with: SageMakerClientTypes.MetricsSource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.DriftCheckModelQuality {

    static func write(value: SageMakerClientTypes.DriftCheckModelQuality?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Constraints"].write(value.constraints, with: SageMakerClientTypes.MetricsSource.write(value:to:))
        try writer["Statistics"].write(value.statistics, with: SageMakerClientTypes.MetricsSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DriftCheckModelQuality {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DriftCheckModelQuality()
        value.statistics = try reader["Statistics"].readIfPresent(with: SageMakerClientTypes.MetricsSource.read(from:))
        value.constraints = try reader["Constraints"].readIfPresent(with: SageMakerClientTypes.MetricsSource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.DriftCheckExplainability {

    static func write(value: SageMakerClientTypes.DriftCheckExplainability?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigFile"].write(value.configFile, with: SageMakerClientTypes.FileSource.write(value:to:))
        try writer["Constraints"].write(value.constraints, with: SageMakerClientTypes.MetricsSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DriftCheckExplainability {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DriftCheckExplainability()
        value.constraints = try reader["Constraints"].readIfPresent(with: SageMakerClientTypes.MetricsSource.read(from:))
        value.configFile = try reader["ConfigFile"].readIfPresent(with: SageMakerClientTypes.FileSource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.FileSource {

    static func write(value: SageMakerClientTypes.FileSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContentDigest"].write(value.contentDigest)
        try writer["ContentType"].write(value.contentType)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.FileSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.FileSource()
        value.contentType = try reader["ContentType"].readIfPresent()
        value.contentDigest = try reader["ContentDigest"].readIfPresent()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.DriftCheckBias {

    static func write(value: SageMakerClientTypes.DriftCheckBias?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ConfigFile"].write(value.configFile, with: SageMakerClientTypes.FileSource.write(value:to:))
        try writer["PostTrainingConstraints"].write(value.postTrainingConstraints, with: SageMakerClientTypes.MetricsSource.write(value:to:))
        try writer["PreTrainingConstraints"].write(value.preTrainingConstraints, with: SageMakerClientTypes.MetricsSource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DriftCheckBias {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DriftCheckBias()
        value.configFile = try reader["ConfigFile"].readIfPresent(with: SageMakerClientTypes.FileSource.read(from:))
        value.preTrainingConstraints = try reader["PreTrainingConstraints"].readIfPresent(with: SageMakerClientTypes.MetricsSource.read(from:))
        value.postTrainingConstraints = try reader["PostTrainingConstraints"].readIfPresent(with: SageMakerClientTypes.MetricsSource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.AdditionalInferenceSpecificationDefinition {

    static func write(value: SageMakerClientTypes.AdditionalInferenceSpecificationDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Containers"].writeList(value.containers, memberWritingClosure: SageMakerClientTypes.ModelPackageContainerDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Description"].write(value.description)
        try writer["Name"].write(value.name)
        try writer["SupportedContentTypes"].writeList(value.supportedContentTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SupportedRealtimeInferenceInstanceTypes"].writeList(value.supportedRealtimeInferenceInstanceTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerClientTypes.ProductionVariantInstanceType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SupportedResponseMIMETypes"].writeList(value.supportedResponseMIMETypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SupportedTransformInstanceTypes"].writeList(value.supportedTransformInstanceTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerClientTypes.TransformInstanceType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AdditionalInferenceSpecificationDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AdditionalInferenceSpecificationDefinition()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.description = try reader["Description"].readIfPresent()
        value.containers = try reader["Containers"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ModelPackageContainerDefinition.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.supportedTransformInstanceTypes = try reader["SupportedTransformInstanceTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SageMakerClientTypes.TransformInstanceType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.supportedRealtimeInferenceInstanceTypes = try reader["SupportedRealtimeInferenceInstanceTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<SageMakerClientTypes.ProductionVariantInstanceType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.supportedContentTypes = try reader["SupportedContentTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.supportedResponseMIMETypes = try reader["SupportedResponseMIMETypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ModelPackageSecurityConfig {

    static func write(value: SageMakerClientTypes.ModelPackageSecurityConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelPackageSecurityConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelPackageSecurityConfig()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.ModelPackageModelCard {

    static func write(value: SageMakerClientTypes.ModelPackageModelCard?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelCardContent"].write(value.modelCardContent)
        try writer["ModelCardStatus"].write(value.modelCardStatus)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelPackageModelCard {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelPackageModelCard()
        value.modelCardContent = try reader["ModelCardContent"].readIfPresent()
        value.modelCardStatus = try reader["ModelCardStatus"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ModelQualityBaselineConfig {

    static func write(value: SageMakerClientTypes.ModelQualityBaselineConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BaseliningJobName"].write(value.baseliningJobName)
        try writer["ConstraintsResource"].write(value.constraintsResource, with: SageMakerClientTypes.MonitoringConstraintsResource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelQualityBaselineConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelQualityBaselineConfig()
        value.baseliningJobName = try reader["BaseliningJobName"].readIfPresent()
        value.constraintsResource = try reader["ConstraintsResource"].readIfPresent(with: SageMakerClientTypes.MonitoringConstraintsResource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ModelQualityAppSpecification {

    static func write(value: SageMakerClientTypes.ModelQualityAppSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContainerArguments"].writeList(value.containerArguments, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ContainerEntrypoint"].writeList(value.containerEntrypoint, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Environment"].writeMap(value.environment, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["ImageUri"].write(value.imageUri)
        try writer["PostAnalyticsProcessorSourceUri"].write(value.postAnalyticsProcessorSourceUri)
        try writer["ProblemType"].write(value.problemType)
        try writer["RecordPreprocessorSourceUri"].write(value.recordPreprocessorSourceUri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelQualityAppSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelQualityAppSpecification()
        value.imageUri = try reader["ImageUri"].readIfPresent() ?? ""
        value.containerEntrypoint = try reader["ContainerEntrypoint"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.containerArguments = try reader["ContainerArguments"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.recordPreprocessorSourceUri = try reader["RecordPreprocessorSourceUri"].readIfPresent()
        value.postAnalyticsProcessorSourceUri = try reader["PostAnalyticsProcessorSourceUri"].readIfPresent()
        value.problemType = try reader["ProblemType"].readIfPresent()
        value.environment = try reader["Environment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ModelQualityJobInput {

    static func write(value: SageMakerClientTypes.ModelQualityJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BatchTransformInput"].write(value.batchTransformInput, with: SageMakerClientTypes.BatchTransformInput.write(value:to:))
        try writer["EndpointInput"].write(value.endpointInput, with: SageMakerClientTypes.EndpointInput.write(value:to:))
        try writer["GroundTruthS3Input"].write(value.groundTruthS3Input, with: SageMakerClientTypes.MonitoringGroundTruthS3Input.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelQualityJobInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelQualityJobInput()
        value.endpointInput = try reader["EndpointInput"].readIfPresent(with: SageMakerClientTypes.EndpointInput.read(from:))
        value.batchTransformInput = try reader["BatchTransformInput"].readIfPresent(with: SageMakerClientTypes.BatchTransformInput.read(from:))
        value.groundTruthS3Input = try reader["GroundTruthS3Input"].readIfPresent(with: SageMakerClientTypes.MonitoringGroundTruthS3Input.read(from:))
        return value
    }
}

extension SageMakerClientTypes.MonitoringScheduleConfig {

    static func write(value: SageMakerClientTypes.MonitoringScheduleConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MonitoringJobDefinition"].write(value.monitoringJobDefinition, with: SageMakerClientTypes.MonitoringJobDefinition.write(value:to:))
        try writer["MonitoringJobDefinitionName"].write(value.monitoringJobDefinitionName)
        try writer["MonitoringType"].write(value.monitoringType)
        try writer["ScheduleConfig"].write(value.scheduleConfig, with: SageMakerClientTypes.ScheduleConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringScheduleConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringScheduleConfig()
        value.scheduleConfig = try reader["ScheduleConfig"].readIfPresent(with: SageMakerClientTypes.ScheduleConfig.read(from:))
        value.monitoringJobDefinition = try reader["MonitoringJobDefinition"].readIfPresent(with: SageMakerClientTypes.MonitoringJobDefinition.read(from:))
        value.monitoringJobDefinitionName = try reader["MonitoringJobDefinitionName"].readIfPresent()
        value.monitoringType = try reader["MonitoringType"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.MonitoringJobDefinition {

    static func write(value: SageMakerClientTypes.MonitoringJobDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BaselineConfig"].write(value.baselineConfig, with: SageMakerClientTypes.MonitoringBaselineConfig.write(value:to:))
        try writer["Environment"].writeMap(value.environment, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["MonitoringAppSpecification"].write(value.monitoringAppSpecification, with: SageMakerClientTypes.MonitoringAppSpecification.write(value:to:))
        try writer["MonitoringInputs"].writeList(value.monitoringInputs, memberWritingClosure: SageMakerClientTypes.MonitoringInput.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["MonitoringOutputConfig"].write(value.monitoringOutputConfig, with: SageMakerClientTypes.MonitoringOutputConfig.write(value:to:))
        try writer["MonitoringResources"].write(value.monitoringResources, with: SageMakerClientTypes.MonitoringResources.write(value:to:))
        try writer["NetworkConfig"].write(value.networkConfig, with: SageMakerClientTypes.NetworkConfig.write(value:to:))
        try writer["RoleArn"].write(value.roleArn)
        try writer["StoppingCondition"].write(value.stoppingCondition, with: SageMakerClientTypes.MonitoringStoppingCondition.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringJobDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringJobDefinition()
        value.baselineConfig = try reader["BaselineConfig"].readIfPresent(with: SageMakerClientTypes.MonitoringBaselineConfig.read(from:))
        value.monitoringInputs = try reader["MonitoringInputs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.MonitoringInput.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.monitoringOutputConfig = try reader["MonitoringOutputConfig"].readIfPresent(with: SageMakerClientTypes.MonitoringOutputConfig.read(from:))
        value.monitoringResources = try reader["MonitoringResources"].readIfPresent(with: SageMakerClientTypes.MonitoringResources.read(from:))
        value.monitoringAppSpecification = try reader["MonitoringAppSpecification"].readIfPresent(with: SageMakerClientTypes.MonitoringAppSpecification.read(from:))
        value.stoppingCondition = try reader["StoppingCondition"].readIfPresent(with: SageMakerClientTypes.MonitoringStoppingCondition.read(from:))
        value.environment = try reader["Environment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.networkConfig = try reader["NetworkConfig"].readIfPresent(with: SageMakerClientTypes.NetworkConfig.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.NetworkConfig {

    static func write(value: SageMakerClientTypes.NetworkConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnableInterContainerTrafficEncryption"].write(value.enableInterContainerTrafficEncryption)
        try writer["EnableNetworkIsolation"].write(value.enableNetworkIsolation)
        try writer["VpcConfig"].write(value.vpcConfig, with: SageMakerClientTypes.VpcConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.NetworkConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.NetworkConfig()
        value.enableInterContainerTrafficEncryption = try reader["EnableInterContainerTrafficEncryption"].readIfPresent()
        value.enableNetworkIsolation = try reader["EnableNetworkIsolation"].readIfPresent()
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: SageMakerClientTypes.VpcConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.MonitoringAppSpecification {

    static func write(value: SageMakerClientTypes.MonitoringAppSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContainerArguments"].writeList(value.containerArguments, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ContainerEntrypoint"].writeList(value.containerEntrypoint, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ImageUri"].write(value.imageUri)
        try writer["PostAnalyticsProcessorSourceUri"].write(value.postAnalyticsProcessorSourceUri)
        try writer["RecordPreprocessorSourceUri"].write(value.recordPreprocessorSourceUri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringAppSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringAppSpecification()
        value.imageUri = try reader["ImageUri"].readIfPresent() ?? ""
        value.containerEntrypoint = try reader["ContainerEntrypoint"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.containerArguments = try reader["ContainerArguments"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.recordPreprocessorSourceUri = try reader["RecordPreprocessorSourceUri"].readIfPresent()
        value.postAnalyticsProcessorSourceUri = try reader["PostAnalyticsProcessorSourceUri"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.MonitoringInput {

    static func write(value: SageMakerClientTypes.MonitoringInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BatchTransformInput"].write(value.batchTransformInput, with: SageMakerClientTypes.BatchTransformInput.write(value:to:))
        try writer["EndpointInput"].write(value.endpointInput, with: SageMakerClientTypes.EndpointInput.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringInput()
        value.endpointInput = try reader["EndpointInput"].readIfPresent(with: SageMakerClientTypes.EndpointInput.read(from:))
        value.batchTransformInput = try reader["BatchTransformInput"].readIfPresent(with: SageMakerClientTypes.BatchTransformInput.read(from:))
        return value
    }
}

extension SageMakerClientTypes.MonitoringBaselineConfig {

    static func write(value: SageMakerClientTypes.MonitoringBaselineConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["BaseliningJobName"].write(value.baseliningJobName)
        try writer["ConstraintsResource"].write(value.constraintsResource, with: SageMakerClientTypes.MonitoringConstraintsResource.write(value:to:))
        try writer["StatisticsResource"].write(value.statisticsResource, with: SageMakerClientTypes.MonitoringStatisticsResource.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringBaselineConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringBaselineConfig()
        value.baseliningJobName = try reader["BaseliningJobName"].readIfPresent()
        value.constraintsResource = try reader["ConstraintsResource"].readIfPresent(with: SageMakerClientTypes.MonitoringConstraintsResource.read(from:))
        value.statisticsResource = try reader["StatisticsResource"].readIfPresent(with: SageMakerClientTypes.MonitoringStatisticsResource.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ScheduleConfig {

    static func write(value: SageMakerClientTypes.ScheduleConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataAnalysisEndTime"].write(value.dataAnalysisEndTime)
        try writer["DataAnalysisStartTime"].write(value.dataAnalysisStartTime)
        try writer["ScheduleExpression"].write(value.scheduleExpression)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ScheduleConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ScheduleConfig()
        value.scheduleExpression = try reader["ScheduleExpression"].readIfPresent() ?? ""
        value.dataAnalysisStartTime = try reader["DataAnalysisStartTime"].readIfPresent()
        value.dataAnalysisEndTime = try reader["DataAnalysisEndTime"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.MonitoringExecutionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringExecutionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringExecutionSummary()
        value.monitoringScheduleName = try reader["MonitoringScheduleName"].readIfPresent() ?? ""
        value.scheduledTime = try reader["ScheduledTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.monitoringExecutionStatus = try reader["MonitoringExecutionStatus"].readIfPresent() ?? .sdkUnknown("")
        value.processingJobArn = try reader["ProcessingJobArn"].readIfPresent()
        value.endpointName = try reader["EndpointName"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.monitoringJobDefinitionName = try reader["MonitoringJobDefinitionName"].readIfPresent()
        value.monitoringType = try reader["MonitoringType"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.InstanceMetadataServiceConfiguration {

    static func write(value: SageMakerClientTypes.InstanceMetadataServiceConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MinimumInstanceMetadataServiceVersion"].write(value.minimumInstanceMetadataServiceVersion)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InstanceMetadataServiceConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InstanceMetadataServiceConfiguration()
        value.minimumInstanceMetadataServiceVersion = try reader["MinimumInstanceMetadataServiceVersion"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.NotebookInstanceLifecycleHook {

    static func write(value: SageMakerClientTypes.NotebookInstanceLifecycleHook?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Content"].write(value.content)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.NotebookInstanceLifecycleHook {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.NotebookInstanceLifecycleHook()
        value.content = try reader["Content"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.OptimizationJobModelSource {

    static func write(value: SageMakerClientTypes.OptimizationJobModelSource?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3"].write(value.s3, with: SageMakerClientTypes.OptimizationJobModelSourceS3.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.OptimizationJobModelSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.OptimizationJobModelSource()
        value.s3 = try reader["S3"].readIfPresent(with: SageMakerClientTypes.OptimizationJobModelSourceS3.read(from:))
        return value
    }
}

extension SageMakerClientTypes.OptimizationJobModelSourceS3 {

    static func write(value: SageMakerClientTypes.OptimizationJobModelSourceS3?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelAccessConfig"].write(value.modelAccessConfig, with: SageMakerClientTypes.OptimizationModelAccessConfig.write(value:to:))
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.OptimizationJobModelSourceS3 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.OptimizationJobModelSourceS3()
        value.s3Uri = try reader["S3Uri"].readIfPresent()
        value.modelAccessConfig = try reader["ModelAccessConfig"].readIfPresent(with: SageMakerClientTypes.OptimizationModelAccessConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.OptimizationModelAccessConfig {

    static func write(value: SageMakerClientTypes.OptimizationModelAccessConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AcceptEula"].write(value.acceptEula)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.OptimizationModelAccessConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.OptimizationModelAccessConfig()
        value.acceptEula = try reader["AcceptEula"].readIfPresent() ?? false
        return value
    }
}

extension SageMakerClientTypes.OptimizationConfig {

    static func write(value: SageMakerClientTypes.OptimizationConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .modelcompilationconfig(modelcompilationconfig):
                try writer["ModelCompilationConfig"].write(modelcompilationconfig, with: SageMakerClientTypes.ModelCompilationConfig.write(value:to:))
            case let .modelquantizationconfig(modelquantizationconfig):
                try writer["ModelQuantizationConfig"].write(modelquantizationconfig, with: SageMakerClientTypes.ModelQuantizationConfig.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.OptimizationConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "ModelQuantizationConfig":
                return .modelquantizationconfig(try reader["ModelQuantizationConfig"].read(with: SageMakerClientTypes.ModelQuantizationConfig.read(from:)))
            case "ModelCompilationConfig":
                return .modelcompilationconfig(try reader["ModelCompilationConfig"].read(with: SageMakerClientTypes.ModelCompilationConfig.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension SageMakerClientTypes.ModelCompilationConfig {

    static func write(value: SageMakerClientTypes.ModelCompilationConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Image"].write(value.image)
        try writer["OverrideEnvironment"].writeMap(value.overrideEnvironment, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelCompilationConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelCompilationConfig()
        value.image = try reader["Image"].readIfPresent()
        value.overrideEnvironment = try reader["OverrideEnvironment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ModelQuantizationConfig {

    static func write(value: SageMakerClientTypes.ModelQuantizationConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Image"].write(value.image)
        try writer["OverrideEnvironment"].writeMap(value.overrideEnvironment, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelQuantizationConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelQuantizationConfig()
        value.image = try reader["Image"].readIfPresent()
        value.overrideEnvironment = try reader["OverrideEnvironment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.OptimizationJobOutputConfig {

    static func write(value: SageMakerClientTypes.OptimizationJobOutputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["S3OutputLocation"].write(value.s3OutputLocation)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.OptimizationJobOutputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.OptimizationJobOutputConfig()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.s3OutputLocation = try reader["S3OutputLocation"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.OptimizationOutput {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.OptimizationOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.OptimizationOutput()
        value.recommendedInferenceImage = try reader["RecommendedInferenceImage"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.OptimizationVpcConfig {

    static func write(value: SageMakerClientTypes.OptimizationVpcConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Subnets"].writeList(value.subnets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.OptimizationVpcConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.OptimizationVpcConfig()
        value.securityGroupIds = try reader["SecurityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.subnets = try reader["Subnets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SageMakerClientTypes.ParallelismConfiguration {

    static func write(value: SageMakerClientTypes.ParallelismConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxParallelExecutionSteps"].write(value.maxParallelExecutionSteps)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ParallelismConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ParallelismConfiguration()
        value.maxParallelExecutionSteps = try reader["MaxParallelExecutionSteps"].readIfPresent() ?? 0
        return value
    }
}

extension SageMakerClientTypes.PipelineExperimentConfig {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.PipelineExperimentConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.PipelineExperimentConfig()
        value.experimentName = try reader["ExperimentName"].readIfPresent()
        value.trialName = try reader["TrialName"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.SelectiveExecutionConfig {

    static func write(value: SageMakerClientTypes.SelectiveExecutionConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SelectedSteps"].writeList(value.selectedSteps, memberWritingClosure: SageMakerClientTypes.SelectedStep.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["SourcePipelineExecutionArn"].write(value.sourcePipelineExecutionArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SelectiveExecutionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SelectiveExecutionConfig()
        value.sourcePipelineExecutionArn = try reader["SourcePipelineExecutionArn"].readIfPresent()
        value.selectedSteps = try reader["SelectedSteps"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.SelectedStep.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SageMakerClientTypes.SelectedStep {

    static func write(value: SageMakerClientTypes.SelectedStep?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["StepName"].write(value.stepName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SelectedStep {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SelectedStep()
        value.stepName = try reader["StepName"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.ProcessingInput {

    static func write(value: SageMakerClientTypes.ProcessingInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppManaged"].write(value.appManaged)
        try writer["DatasetDefinition"].write(value.datasetDefinition, with: SageMakerClientTypes.DatasetDefinition.write(value:to:))
        try writer["InputName"].write(value.inputName)
        try writer["S3Input"].write(value.s3Input, with: SageMakerClientTypes.ProcessingS3Input.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProcessingInput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProcessingInput()
        value.inputName = try reader["InputName"].readIfPresent() ?? ""
        value.appManaged = try reader["AppManaged"].readIfPresent()
        value.s3Input = try reader["S3Input"].readIfPresent(with: SageMakerClientTypes.ProcessingS3Input.read(from:))
        value.datasetDefinition = try reader["DatasetDefinition"].readIfPresent(with: SageMakerClientTypes.DatasetDefinition.read(from:))
        return value
    }
}

extension SageMakerClientTypes.DatasetDefinition {

    static func write(value: SageMakerClientTypes.DatasetDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AthenaDatasetDefinition"].write(value.athenaDatasetDefinition, with: SageMakerClientTypes.AthenaDatasetDefinition.write(value:to:))
        try writer["DataDistributionType"].write(value.dataDistributionType)
        try writer["InputMode"].write(value.inputMode)
        try writer["LocalPath"].write(value.localPath)
        try writer["RedshiftDatasetDefinition"].write(value.redshiftDatasetDefinition, with: SageMakerClientTypes.RedshiftDatasetDefinition.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DatasetDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DatasetDefinition()
        value.athenaDatasetDefinition = try reader["AthenaDatasetDefinition"].readIfPresent(with: SageMakerClientTypes.AthenaDatasetDefinition.read(from:))
        value.redshiftDatasetDefinition = try reader["RedshiftDatasetDefinition"].readIfPresent(with: SageMakerClientTypes.RedshiftDatasetDefinition.read(from:))
        value.localPath = try reader["LocalPath"].readIfPresent()
        value.dataDistributionType = try reader["DataDistributionType"].readIfPresent()
        value.inputMode = try reader["InputMode"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.RedshiftDatasetDefinition {

    static func write(value: SageMakerClientTypes.RedshiftDatasetDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterId"].write(value.clusterId)
        try writer["ClusterRoleArn"].write(value.clusterRoleArn)
        try writer["Database"].write(value.database)
        try writer["DbUser"].write(value.dbUser)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["OutputCompression"].write(value.outputCompression)
        try writer["OutputFormat"].write(value.outputFormat)
        try writer["OutputS3Uri"].write(value.outputS3Uri)
        try writer["QueryString"].write(value.queryString)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RedshiftDatasetDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RedshiftDatasetDefinition()
        value.clusterId = try reader["ClusterId"].readIfPresent() ?? ""
        value.database = try reader["Database"].readIfPresent() ?? ""
        value.dbUser = try reader["DbUser"].readIfPresent() ?? ""
        value.queryString = try reader["QueryString"].readIfPresent() ?? ""
        value.clusterRoleArn = try reader["ClusterRoleArn"].readIfPresent() ?? ""
        value.outputS3Uri = try reader["OutputS3Uri"].readIfPresent() ?? ""
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.outputFormat = try reader["OutputFormat"].readIfPresent() ?? .sdkUnknown("")
        value.outputCompression = try reader["OutputCompression"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.AthenaDatasetDefinition {

    static func write(value: SageMakerClientTypes.AthenaDatasetDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Catalog"].write(value.catalog)
        try writer["Database"].write(value.database)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["OutputCompression"].write(value.outputCompression)
        try writer["OutputFormat"].write(value.outputFormat)
        try writer["OutputS3Uri"].write(value.outputS3Uri)
        try writer["QueryString"].write(value.queryString)
        try writer["WorkGroup"].write(value.workGroup)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AthenaDatasetDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AthenaDatasetDefinition()
        value.catalog = try reader["Catalog"].readIfPresent() ?? ""
        value.database = try reader["Database"].readIfPresent() ?? ""
        value.queryString = try reader["QueryString"].readIfPresent() ?? ""
        value.workGroup = try reader["WorkGroup"].readIfPresent()
        value.outputS3Uri = try reader["OutputS3Uri"].readIfPresent() ?? ""
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.outputFormat = try reader["OutputFormat"].readIfPresent() ?? .sdkUnknown("")
        value.outputCompression = try reader["OutputCompression"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ProcessingS3Input {

    static func write(value: SageMakerClientTypes.ProcessingS3Input?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LocalPath"].write(value.localPath)
        try writer["S3CompressionType"].write(value.s3CompressionType)
        try writer["S3DataDistributionType"].write(value.s3DataDistributionType)
        try writer["S3DataType"].write(value.s3DataType)
        try writer["S3InputMode"].write(value.s3InputMode)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProcessingS3Input {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProcessingS3Input()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.localPath = try reader["LocalPath"].readIfPresent()
        value.s3DataType = try reader["S3DataType"].readIfPresent() ?? .sdkUnknown("")
        value.s3InputMode = try reader["S3InputMode"].readIfPresent()
        value.s3DataDistributionType = try reader["S3DataDistributionType"].readIfPresent()
        value.s3CompressionType = try reader["S3CompressionType"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ProcessingOutputConfig {

    static func write(value: SageMakerClientTypes.ProcessingOutputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["Outputs"].writeList(value.outputs, memberWritingClosure: SageMakerClientTypes.ProcessingOutput.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProcessingOutputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProcessingOutputConfig()
        value.outputs = try reader["Outputs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ProcessingOutput.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ProcessingOutput {

    static func write(value: SageMakerClientTypes.ProcessingOutput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppManaged"].write(value.appManaged)
        try writer["FeatureStoreOutput"].write(value.featureStoreOutput, with: SageMakerClientTypes.ProcessingFeatureStoreOutput.write(value:to:))
        try writer["OutputName"].write(value.outputName)
        try writer["S3Output"].write(value.s3Output, with: SageMakerClientTypes.ProcessingS3Output.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProcessingOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProcessingOutput()
        value.outputName = try reader["OutputName"].readIfPresent() ?? ""
        value.s3Output = try reader["S3Output"].readIfPresent(with: SageMakerClientTypes.ProcessingS3Output.read(from:))
        value.featureStoreOutput = try reader["FeatureStoreOutput"].readIfPresent(with: SageMakerClientTypes.ProcessingFeatureStoreOutput.read(from:))
        value.appManaged = try reader["AppManaged"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ProcessingFeatureStoreOutput {

    static func write(value: SageMakerClientTypes.ProcessingFeatureStoreOutput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FeatureGroupName"].write(value.featureGroupName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProcessingFeatureStoreOutput {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProcessingFeatureStoreOutput()
        value.featureGroupName = try reader["FeatureGroupName"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.ProcessingS3Output {

    static func write(value: SageMakerClientTypes.ProcessingS3Output?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LocalPath"].write(value.localPath)
        try writer["S3UploadMode"].write(value.s3UploadMode)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProcessingS3Output {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProcessingS3Output()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.localPath = try reader["LocalPath"].readIfPresent()
        value.s3UploadMode = try reader["S3UploadMode"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.ProcessingResources {

    static func write(value: SageMakerClientTypes.ProcessingResources?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClusterConfig"].write(value.clusterConfig, with: SageMakerClientTypes.ProcessingClusterConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProcessingResources {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProcessingResources()
        value.clusterConfig = try reader["ClusterConfig"].readIfPresent(with: SageMakerClientTypes.ProcessingClusterConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ProcessingClusterConfig {

    static func write(value: SageMakerClientTypes.ProcessingClusterConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InstanceCount"].write(value.instanceCount)
        try writer["InstanceType"].write(value.instanceType)
        try writer["VolumeKmsKeyId"].write(value.volumeKmsKeyId)
        try writer["VolumeSizeInGB"].write(value.volumeSizeInGB)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProcessingClusterConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProcessingClusterConfig()
        value.instanceCount = try reader["InstanceCount"].readIfPresent() ?? 0
        value.instanceType = try reader["InstanceType"].readIfPresent() ?? .sdkUnknown("")
        value.volumeSizeInGB = try reader["VolumeSizeInGB"].readIfPresent() ?? 0
        value.volumeKmsKeyId = try reader["VolumeKmsKeyId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ProcessingStoppingCondition {

    static func write(value: SageMakerClientTypes.ProcessingStoppingCondition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxRuntimeInSeconds"].write(value.maxRuntimeInSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProcessingStoppingCondition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProcessingStoppingCondition()
        value.maxRuntimeInSeconds = try reader["MaxRuntimeInSeconds"].readIfPresent() ?? 0
        return value
    }
}

extension SageMakerClientTypes.AppSpecification {

    static func write(value: SageMakerClientTypes.AppSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ContainerArguments"].writeList(value.containerArguments, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ContainerEntrypoint"].writeList(value.containerEntrypoint, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ImageUri"].write(value.imageUri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AppSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AppSpecification()
        value.imageUri = try reader["ImageUri"].readIfPresent() ?? ""
        value.containerEntrypoint = try reader["ContainerEntrypoint"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.containerArguments = try reader["ContainerArguments"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ExperimentConfig {

    static func write(value: SageMakerClientTypes.ExperimentConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExperimentName"].write(value.experimentName)
        try writer["RunName"].write(value.runName)
        try writer["TrialComponentDisplayName"].write(value.trialComponentDisplayName)
        try writer["TrialName"].write(value.trialName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ExperimentConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ExperimentConfig()
        value.experimentName = try reader["ExperimentName"].readIfPresent()
        value.trialName = try reader["TrialName"].readIfPresent()
        value.trialComponentDisplayName = try reader["TrialComponentDisplayName"].readIfPresent()
        value.runName = try reader["RunName"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ServiceCatalogProvisioningDetails {

    static func write(value: SageMakerClientTypes.ServiceCatalogProvisioningDetails?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PathId"].write(value.pathId)
        try writer["ProductId"].write(value.productId)
        try writer["ProvisioningArtifactId"].write(value.provisioningArtifactId)
        try writer["ProvisioningParameters"].writeList(value.provisioningParameters, memberWritingClosure: SageMakerClientTypes.ProvisioningParameter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ServiceCatalogProvisioningDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ServiceCatalogProvisioningDetails()
        value.productId = try reader["ProductId"].readIfPresent() ?? ""
        value.provisioningArtifactId = try reader["ProvisioningArtifactId"].readIfPresent()
        value.pathId = try reader["PathId"].readIfPresent()
        value.provisioningParameters = try reader["ProvisioningParameters"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ProvisioningParameter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ProvisioningParameter {

    static func write(value: SageMakerClientTypes.ProvisioningParameter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProvisioningParameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProvisioningParameter()
        value.key = try reader["Key"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ServiceCatalogProvisionedProductDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ServiceCatalogProvisionedProductDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ServiceCatalogProvisionedProductDetails()
        value.provisionedProductId = try reader["ProvisionedProductId"].readIfPresent()
        value.provisionedProductStatusMessage = try reader["ProvisionedProductStatusMessage"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.SpaceSettings {

    static func write(value: SageMakerClientTypes.SpaceSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppType"].write(value.appType)
        try writer["CodeEditorAppSettings"].write(value.codeEditorAppSettings, with: SageMakerClientTypes.SpaceCodeEditorAppSettings.write(value:to:))
        try writer["CustomFileSystems"].writeList(value.customFileSystems, memberWritingClosure: SageMakerClientTypes.CustomFileSystem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["JupyterLabAppSettings"].write(value.jupyterLabAppSettings, with: SageMakerClientTypes.SpaceJupyterLabAppSettings.write(value:to:))
        try writer["JupyterServerAppSettings"].write(value.jupyterServerAppSettings, with: SageMakerClientTypes.JupyterServerAppSettings.write(value:to:))
        try writer["KernelGatewayAppSettings"].write(value.kernelGatewayAppSettings, with: SageMakerClientTypes.KernelGatewayAppSettings.write(value:to:))
        try writer["SpaceStorageSettings"].write(value.spaceStorageSettings, with: SageMakerClientTypes.SpaceStorageSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SpaceSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SpaceSettings()
        value.jupyterServerAppSettings = try reader["JupyterServerAppSettings"].readIfPresent(with: SageMakerClientTypes.JupyterServerAppSettings.read(from:))
        value.kernelGatewayAppSettings = try reader["KernelGatewayAppSettings"].readIfPresent(with: SageMakerClientTypes.KernelGatewayAppSettings.read(from:))
        value.codeEditorAppSettings = try reader["CodeEditorAppSettings"].readIfPresent(with: SageMakerClientTypes.SpaceCodeEditorAppSettings.read(from:))
        value.jupyterLabAppSettings = try reader["JupyterLabAppSettings"].readIfPresent(with: SageMakerClientTypes.SpaceJupyterLabAppSettings.read(from:))
        value.appType = try reader["AppType"].readIfPresent()
        value.spaceStorageSettings = try reader["SpaceStorageSettings"].readIfPresent(with: SageMakerClientTypes.SpaceStorageSettings.read(from:))
        value.customFileSystems = try reader["CustomFileSystems"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.CustomFileSystem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.CustomFileSystem {

    static func write(value: SageMakerClientTypes.CustomFileSystem?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .efsfilesystem(efsfilesystem):
                try writer["EFSFileSystem"].write(efsfilesystem, with: SageMakerClientTypes.EFSFileSystem.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CustomFileSystem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "EFSFileSystem":
                return .efsfilesystem(try reader["EFSFileSystem"].read(with: SageMakerClientTypes.EFSFileSystem.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension SageMakerClientTypes.EFSFileSystem {

    static func write(value: SageMakerClientTypes.EFSFileSystem?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FileSystemId"].write(value.fileSystemId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EFSFileSystem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EFSFileSystem()
        value.fileSystemId = try reader["FileSystemId"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.SpaceStorageSettings {

    static func write(value: SageMakerClientTypes.SpaceStorageSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EbsStorageSettings"].write(value.ebsStorageSettings, with: SageMakerClientTypes.EbsStorageSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SpaceStorageSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SpaceStorageSettings()
        value.ebsStorageSettings = try reader["EbsStorageSettings"].readIfPresent(with: SageMakerClientTypes.EbsStorageSettings.read(from:))
        return value
    }
}

extension SageMakerClientTypes.EbsStorageSettings {

    static func write(value: SageMakerClientTypes.EbsStorageSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EbsVolumeSizeInGb"].write(value.ebsVolumeSizeInGb)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EbsStorageSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EbsStorageSettings()
        value.ebsVolumeSizeInGb = try reader["EbsVolumeSizeInGb"].readIfPresent() ?? 0
        return value
    }
}

extension SageMakerClientTypes.SpaceJupyterLabAppSettings {

    static func write(value: SageMakerClientTypes.SpaceJupyterLabAppSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppLifecycleManagement"].write(value.appLifecycleManagement, with: SageMakerClientTypes.SpaceAppLifecycleManagement.write(value:to:))
        try writer["CodeRepositories"].writeList(value.codeRepositories, memberWritingClosure: SageMakerClientTypes.CodeRepository.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DefaultResourceSpec"].write(value.defaultResourceSpec, with: SageMakerClientTypes.ResourceSpec.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SpaceJupyterLabAppSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SpaceJupyterLabAppSettings()
        value.defaultResourceSpec = try reader["DefaultResourceSpec"].readIfPresent(with: SageMakerClientTypes.ResourceSpec.read(from:))
        value.codeRepositories = try reader["CodeRepositories"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.CodeRepository.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.appLifecycleManagement = try reader["AppLifecycleManagement"].readIfPresent(with: SageMakerClientTypes.SpaceAppLifecycleManagement.read(from:))
        return value
    }
}

extension SageMakerClientTypes.SpaceAppLifecycleManagement {

    static func write(value: SageMakerClientTypes.SpaceAppLifecycleManagement?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IdleSettings"].write(value.idleSettings, with: SageMakerClientTypes.SpaceIdleSettings.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SpaceAppLifecycleManagement {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SpaceAppLifecycleManagement()
        value.idleSettings = try reader["IdleSettings"].readIfPresent(with: SageMakerClientTypes.SpaceIdleSettings.read(from:))
        return value
    }
}

extension SageMakerClientTypes.SpaceIdleSettings {

    static func write(value: SageMakerClientTypes.SpaceIdleSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IdleTimeoutInMinutes"].write(value.idleTimeoutInMinutes)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SpaceIdleSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SpaceIdleSettings()
        value.idleTimeoutInMinutes = try reader["IdleTimeoutInMinutes"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.SpaceCodeEditorAppSettings {

    static func write(value: SageMakerClientTypes.SpaceCodeEditorAppSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AppLifecycleManagement"].write(value.appLifecycleManagement, with: SageMakerClientTypes.SpaceAppLifecycleManagement.write(value:to:))
        try writer["DefaultResourceSpec"].write(value.defaultResourceSpec, with: SageMakerClientTypes.ResourceSpec.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SpaceCodeEditorAppSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SpaceCodeEditorAppSettings()
        value.defaultResourceSpec = try reader["DefaultResourceSpec"].readIfPresent(with: SageMakerClientTypes.ResourceSpec.read(from:))
        value.appLifecycleManagement = try reader["AppLifecycleManagement"].readIfPresent(with: SageMakerClientTypes.SpaceAppLifecycleManagement.read(from:))
        return value
    }
}

extension SageMakerClientTypes.OwnershipSettings {

    static func write(value: SageMakerClientTypes.OwnershipSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["OwnerUserProfileName"].write(value.ownerUserProfileName)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.OwnershipSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.OwnershipSettings()
        value.ownerUserProfileName = try reader["OwnerUserProfileName"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.SpaceSharingSettings {

    static func write(value: SageMakerClientTypes.SpaceSharingSettings?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SharingType"].write(value.sharingType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SpaceSharingSettings {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SpaceSharingSettings()
        value.sharingType = try reader["SharingType"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.SubscribedWorkteam {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SubscribedWorkteam {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SubscribedWorkteam()
        value.workteamArn = try reader["WorkteamArn"].readIfPresent() ?? ""
        value.marketplaceTitle = try reader["MarketplaceTitle"].readIfPresent()
        value.sellerName = try reader["SellerName"].readIfPresent()
        value.marketplaceDescription = try reader["MarketplaceDescription"].readIfPresent()
        value.listingId = try reader["ListingId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.AlgorithmSpecification {

    static func write(value: SageMakerClientTypes.AlgorithmSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AlgorithmName"].write(value.algorithmName)
        try writer["ContainerArguments"].writeList(value.containerArguments, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ContainerEntrypoint"].writeList(value.containerEntrypoint, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["EnableSageMakerMetricsTimeSeries"].write(value.enableSageMakerMetricsTimeSeries)
        try writer["MetricDefinitions"].writeList(value.metricDefinitions, memberWritingClosure: SageMakerClientTypes.MetricDefinition.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TrainingImage"].write(value.trainingImage)
        try writer["TrainingImageConfig"].write(value.trainingImageConfig, with: SageMakerClientTypes.TrainingImageConfig.write(value:to:))
        try writer["TrainingInputMode"].write(value.trainingInputMode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AlgorithmSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AlgorithmSpecification()
        value.trainingImage = try reader["TrainingImage"].readIfPresent()
        value.algorithmName = try reader["AlgorithmName"].readIfPresent()
        value.trainingInputMode = try reader["TrainingInputMode"].readIfPresent() ?? .sdkUnknown("")
        value.metricDefinitions = try reader["MetricDefinitions"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.MetricDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.enableSageMakerMetricsTimeSeries = try reader["EnableSageMakerMetricsTimeSeries"].readIfPresent()
        value.containerEntrypoint = try reader["ContainerEntrypoint"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.containerArguments = try reader["ContainerArguments"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.trainingImageConfig = try reader["TrainingImageConfig"].readIfPresent(with: SageMakerClientTypes.TrainingImageConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.TrainingImageConfig {

    static func write(value: SageMakerClientTypes.TrainingImageConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TrainingRepositoryAccessMode"].write(value.trainingRepositoryAccessMode)
        try writer["TrainingRepositoryAuthConfig"].write(value.trainingRepositoryAuthConfig, with: SageMakerClientTypes.TrainingRepositoryAuthConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrainingImageConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrainingImageConfig()
        value.trainingRepositoryAccessMode = try reader["TrainingRepositoryAccessMode"].readIfPresent() ?? .sdkUnknown("")
        value.trainingRepositoryAuthConfig = try reader["TrainingRepositoryAuthConfig"].readIfPresent(with: SageMakerClientTypes.TrainingRepositoryAuthConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.TrainingRepositoryAuthConfig {

    static func write(value: SageMakerClientTypes.TrainingRepositoryAuthConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TrainingRepositoryCredentialsProviderArn"].write(value.trainingRepositoryCredentialsProviderArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrainingRepositoryAuthConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrainingRepositoryAuthConfig()
        value.trainingRepositoryCredentialsProviderArn = try reader["TrainingRepositoryCredentialsProviderArn"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.WarmPoolStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.WarmPoolStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.WarmPoolStatus()
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.resourceRetainedBillableTimeInSeconds = try reader["ResourceRetainedBillableTimeInSeconds"].readIfPresent()
        value.reusedByJob = try reader["ReusedByJob"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.SecondaryStatusTransition {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SecondaryStatusTransition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SecondaryStatusTransition()
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.statusMessage = try reader["StatusMessage"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.MetricData {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MetricData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MetricData()
        value.metricName = try reader["MetricName"].readIfPresent()
        value.value = try reader["Value"].readIfPresent()
        value.timestamp = try reader["Timestamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.DebugHookConfig {

    static func write(value: SageMakerClientTypes.DebugHookConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CollectionConfigurations"].writeList(value.collectionConfigurations, memberWritingClosure: SageMakerClientTypes.CollectionConfiguration.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["HookParameters"].writeMap(value.hookParameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["LocalPath"].write(value.localPath)
        try writer["S3OutputPath"].write(value.s3OutputPath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DebugHookConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DebugHookConfig()
        value.localPath = try reader["LocalPath"].readIfPresent()
        value.s3OutputPath = try reader["S3OutputPath"].readIfPresent() ?? ""
        value.hookParameters = try reader["HookParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.collectionConfigurations = try reader["CollectionConfigurations"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.CollectionConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.CollectionConfiguration {

    static func write(value: SageMakerClientTypes.CollectionConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CollectionName"].write(value.collectionName)
        try writer["CollectionParameters"].writeMap(value.collectionParameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CollectionConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CollectionConfiguration()
        value.collectionName = try reader["CollectionName"].readIfPresent()
        value.collectionParameters = try reader["CollectionParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.DebugRuleConfiguration {

    static func write(value: SageMakerClientTypes.DebugRuleConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InstanceType"].write(value.instanceType)
        try writer["LocalPath"].write(value.localPath)
        try writer["RuleConfigurationName"].write(value.ruleConfigurationName)
        try writer["RuleEvaluatorImage"].write(value.ruleEvaluatorImage)
        try writer["RuleParameters"].writeMap(value.ruleParameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["S3OutputPath"].write(value.s3OutputPath)
        try writer["VolumeSizeInGB"].write(value.volumeSizeInGB)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DebugRuleConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DebugRuleConfiguration()
        value.ruleConfigurationName = try reader["RuleConfigurationName"].readIfPresent() ?? ""
        value.localPath = try reader["LocalPath"].readIfPresent()
        value.s3OutputPath = try reader["S3OutputPath"].readIfPresent()
        value.ruleEvaluatorImage = try reader["RuleEvaluatorImage"].readIfPresent() ?? ""
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.volumeSizeInGB = try reader["VolumeSizeInGB"].readIfPresent()
        value.ruleParameters = try reader["RuleParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.TensorBoardOutputConfig {

    static func write(value: SageMakerClientTypes.TensorBoardOutputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LocalPath"].write(value.localPath)
        try writer["S3OutputPath"].write(value.s3OutputPath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TensorBoardOutputConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TensorBoardOutputConfig()
        value.localPath = try reader["LocalPath"].readIfPresent()
        value.s3OutputPath = try reader["S3OutputPath"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.DebugRuleEvaluationStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DebugRuleEvaluationStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DebugRuleEvaluationStatus()
        value.ruleConfigurationName = try reader["RuleConfigurationName"].readIfPresent()
        value.ruleEvaluationJobArn = try reader["RuleEvaluationJobArn"].readIfPresent()
        value.ruleEvaluationStatus = try reader["RuleEvaluationStatus"].readIfPresent()
        value.statusDetails = try reader["StatusDetails"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.ProfilerConfig {

    static func write(value: SageMakerClientTypes.ProfilerConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DisableProfiler"].write(value.disableProfiler)
        try writer["ProfilingIntervalInMilliseconds"].write(value.profilingIntervalInMilliseconds)
        try writer["ProfilingParameters"].writeMap(value.profilingParameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["S3OutputPath"].write(value.s3OutputPath)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProfilerConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProfilerConfig()
        value.s3OutputPath = try reader["S3OutputPath"].readIfPresent()
        value.profilingIntervalInMilliseconds = try reader["ProfilingIntervalInMilliseconds"].readIfPresent()
        value.profilingParameters = try reader["ProfilingParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.disableProfiler = try reader["DisableProfiler"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ProfilerRuleConfiguration {

    static func write(value: SageMakerClientTypes.ProfilerRuleConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InstanceType"].write(value.instanceType)
        try writer["LocalPath"].write(value.localPath)
        try writer["RuleConfigurationName"].write(value.ruleConfigurationName)
        try writer["RuleEvaluatorImage"].write(value.ruleEvaluatorImage)
        try writer["RuleParameters"].writeMap(value.ruleParameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["S3OutputPath"].write(value.s3OutputPath)
        try writer["VolumeSizeInGB"].write(value.volumeSizeInGB)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProfilerRuleConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProfilerRuleConfiguration()
        value.ruleConfigurationName = try reader["RuleConfigurationName"].readIfPresent() ?? ""
        value.localPath = try reader["LocalPath"].readIfPresent()
        value.s3OutputPath = try reader["S3OutputPath"].readIfPresent()
        value.ruleEvaluatorImage = try reader["RuleEvaluatorImage"].readIfPresent() ?? ""
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.volumeSizeInGB = try reader["VolumeSizeInGB"].readIfPresent()
        value.ruleParameters = try reader["RuleParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ProfilerRuleEvaluationStatus {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProfilerRuleEvaluationStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProfilerRuleEvaluationStatus()
        value.ruleConfigurationName = try reader["RuleConfigurationName"].readIfPresent()
        value.ruleEvaluationJobArn = try reader["RuleEvaluationJobArn"].readIfPresent()
        value.ruleEvaluationStatus = try reader["RuleEvaluationStatus"].readIfPresent()
        value.statusDetails = try reader["StatusDetails"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.RemoteDebugConfig {

    static func write(value: SageMakerClientTypes.RemoteDebugConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnableRemoteDebug"].write(value.enableRemoteDebug)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RemoteDebugConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RemoteDebugConfig()
        value.enableRemoteDebug = try reader["EnableRemoteDebug"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.InfraCheckConfig {

    static func write(value: SageMakerClientTypes.InfraCheckConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnableInfraCheck"].write(value.enableInfraCheck)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InfraCheckConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InfraCheckConfig()
        value.enableInfraCheck = try reader["EnableInfraCheck"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ModelClientConfig {

    static func write(value: SageMakerClientTypes.ModelClientConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InvocationsMaxRetries"].write(value.invocationsMaxRetries)
        try writer["InvocationsTimeoutInSeconds"].write(value.invocationsTimeoutInSeconds)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelClientConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelClientConfig()
        value.invocationsTimeoutInSeconds = try reader["InvocationsTimeoutInSeconds"].readIfPresent()
        value.invocationsMaxRetries = try reader["InvocationsMaxRetries"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.BatchDataCaptureConfig {

    static func write(value: SageMakerClientTypes.BatchDataCaptureConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DestinationS3Uri"].write(value.destinationS3Uri)
        try writer["GenerateInferenceId"].write(value.generateInferenceId)
        try writer["KmsKeyId"].write(value.kmsKeyId)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.BatchDataCaptureConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.BatchDataCaptureConfig()
        value.destinationS3Uri = try reader["DestinationS3Uri"].readIfPresent() ?? ""
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.generateInferenceId = try reader["GenerateInferenceId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.DataProcessing {

    static func write(value: SageMakerClientTypes.DataProcessing?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InputFilter"].write(value.inputFilter)
        try writer["JoinSource"].write(value.joinSource)
        try writer["OutputFilter"].write(value.outputFilter)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DataProcessing {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DataProcessing()
        value.inputFilter = try reader["InputFilter"].readIfPresent()
        value.outputFilter = try reader["OutputFilter"].readIfPresent()
        value.joinSource = try reader["JoinSource"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TrialSource {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrialSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrialSource()
        value.sourceArn = try reader["SourceArn"].readIfPresent() ?? ""
        value.sourceType = try reader["SourceType"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TrialComponentSource {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrialComponentSource {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrialComponentSource()
        value.sourceArn = try reader["SourceArn"].readIfPresent() ?? ""
        value.sourceType = try reader["SourceType"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TrialComponentStatus {

    static func write(value: SageMakerClientTypes.TrialComponentStatus?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Message"].write(value.message)
        try writer["PrimaryStatus"].write(value.primaryStatus)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrialComponentStatus {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrialComponentStatus()
        value.primaryStatus = try reader["PrimaryStatus"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TrialComponentParameterValue {

    static func write(value: SageMakerClientTypes.TrialComponentParameterValue?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .numbervalue(numbervalue):
                try writer["NumberValue"].write(numbervalue)
            case let .stringvalue(stringvalue):
                try writer["StringValue"].write(stringvalue)
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrialComponentParameterValue {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "StringValue":
                return .stringvalue(try reader["StringValue"].read())
            case "NumberValue":
                return .numbervalue(try reader["NumberValue"].read())
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension SageMakerClientTypes.TrialComponentArtifact {

    static func write(value: SageMakerClientTypes.TrialComponentArtifact?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MediaType"].write(value.mediaType)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrialComponentArtifact {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrialComponentArtifact()
        value.mediaType = try reader["MediaType"].readIfPresent()
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.TrialComponentMetricSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrialComponentMetricSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrialComponentMetricSummary()
        value.metricName = try reader["MetricName"].readIfPresent()
        value.sourceArn = try reader["SourceArn"].readIfPresent()
        value.timeStamp = try reader["TimeStamp"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.max = try reader["Max"].readIfPresent()
        value.min = try reader["Min"].readIfPresent()
        value.last = try reader["Last"].readIfPresent()
        value.count = try reader["Count"].readIfPresent()
        value.avg = try reader["Avg"].readIfPresent()
        value.stdDev = try reader["StdDev"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.Workforce {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Workforce {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Workforce()
        value.workforceName = try reader["WorkforceName"].readIfPresent() ?? ""
        value.workforceArn = try reader["WorkforceArn"].readIfPresent() ?? ""
        value.lastUpdatedDate = try reader["LastUpdatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.sourceIpConfig = try reader["SourceIpConfig"].readIfPresent(with: SageMakerClientTypes.SourceIpConfig.read(from:))
        value.subDomain = try reader["SubDomain"].readIfPresent()
        value.cognitoConfig = try reader["CognitoConfig"].readIfPresent(with: SageMakerClientTypes.CognitoConfig.read(from:))
        value.oidcConfig = try reader["OidcConfig"].readIfPresent(with: SageMakerClientTypes.OidcConfigForResponse.read(from:))
        value.createDate = try reader["CreateDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.workforceVpcConfig = try reader["WorkforceVpcConfig"].readIfPresent(with: SageMakerClientTypes.WorkforceVpcConfigResponse.read(from:))
        value.status = try reader["Status"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.WorkforceVpcConfigResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.WorkforceVpcConfigResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.WorkforceVpcConfigResponse()
        value.vpcId = try reader["VpcId"].readIfPresent() ?? ""
        value.securityGroupIds = try reader["SecurityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.subnets = try reader["Subnets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.vpcEndpointId = try reader["VpcEndpointId"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.OidcConfigForResponse {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.OidcConfigForResponse {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.OidcConfigForResponse()
        value.clientId = try reader["ClientId"].readIfPresent()
        value.issuer = try reader["Issuer"].readIfPresent()
        value.authorizationEndpoint = try reader["AuthorizationEndpoint"].readIfPresent()
        value.tokenEndpoint = try reader["TokenEndpoint"].readIfPresent()
        value.userInfoEndpoint = try reader["UserInfoEndpoint"].readIfPresent()
        value.logoutEndpoint = try reader["LogoutEndpoint"].readIfPresent()
        value.jwksUri = try reader["JwksUri"].readIfPresent()
        value.scope = try reader["Scope"].readIfPresent()
        value.authenticationRequestExtraParams = try reader["AuthenticationRequestExtraParams"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.CognitoConfig {

    static func write(value: SageMakerClientTypes.CognitoConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientId"].write(value.clientId)
        try writer["UserPool"].write(value.userPool)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CognitoConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CognitoConfig()
        value.userPool = try reader["UserPool"].readIfPresent() ?? ""
        value.clientId = try reader["ClientId"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.SourceIpConfig {

    static func write(value: SageMakerClientTypes.SourceIpConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Cidrs"].writeList(value.cidrs, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SourceIpConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SourceIpConfig()
        value.cidrs = try reader["Cidrs"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SageMakerClientTypes.Workteam {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Workteam {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Workteam()
        value.workteamName = try reader["WorkteamName"].readIfPresent() ?? ""
        value.memberDefinitions = try reader["MemberDefinitions"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.MemberDefinition.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.workteamArn = try reader["WorkteamArn"].readIfPresent() ?? ""
        value.workforceArn = try reader["WorkforceArn"].readIfPresent()
        value.productListingIds = try reader["ProductListingIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.description = try reader["Description"].readIfPresent() ?? ""
        value.subDomain = try reader["SubDomain"].readIfPresent()
        value.createDate = try reader["CreateDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastUpdatedDate = try reader["LastUpdatedDate"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.notificationConfiguration = try reader["NotificationConfiguration"].readIfPresent(with: SageMakerClientTypes.NotificationConfiguration.read(from:))
        value.workerAccessConfiguration = try reader["WorkerAccessConfiguration"].readIfPresent(with: SageMakerClientTypes.WorkerAccessConfiguration.read(from:))
        return value
    }
}

extension SageMakerClientTypes.WorkerAccessConfiguration {

    static func write(value: SageMakerClientTypes.WorkerAccessConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Presign"].write(value.s3Presign, with: SageMakerClientTypes.S3Presign.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.WorkerAccessConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.WorkerAccessConfiguration()
        value.s3Presign = try reader["S3Presign"].readIfPresent(with: SageMakerClientTypes.S3Presign.read(from:))
        return value
    }
}

extension SageMakerClientTypes.S3Presign {

    static func write(value: SageMakerClientTypes.S3Presign?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["IamPolicyConstraints"].write(value.iamPolicyConstraints, with: SageMakerClientTypes.IamPolicyConstraints.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.S3Presign {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.S3Presign()
        value.iamPolicyConstraints = try reader["IamPolicyConstraints"].readIfPresent(with: SageMakerClientTypes.IamPolicyConstraints.read(from:))
        return value
    }
}

extension SageMakerClientTypes.IamPolicyConstraints {

    static func write(value: SageMakerClientTypes.IamPolicyConstraints?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SourceIp"].write(value.sourceIp)
        try writer["VpcSourceIp"].write(value.vpcSourceIp)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.IamPolicyConstraints {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.IamPolicyConstraints()
        value.sourceIp = try reader["SourceIp"].readIfPresent()
        value.vpcSourceIp = try reader["VpcSourceIp"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.NotificationConfiguration {

    static func write(value: SageMakerClientTypes.NotificationConfiguration?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["NotificationTopicArn"].write(value.notificationTopicArn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.NotificationConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.NotificationConfiguration()
        value.notificationTopicArn = try reader["NotificationTopicArn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.MemberDefinition {

    static func write(value: SageMakerClientTypes.MemberDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CognitoMemberDefinition"].write(value.cognitoMemberDefinition, with: SageMakerClientTypes.CognitoMemberDefinition.write(value:to:))
        try writer["OidcMemberDefinition"].write(value.oidcMemberDefinition, with: SageMakerClientTypes.OidcMemberDefinition.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MemberDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MemberDefinition()
        value.cognitoMemberDefinition = try reader["CognitoMemberDefinition"].readIfPresent(with: SageMakerClientTypes.CognitoMemberDefinition.read(from:))
        value.oidcMemberDefinition = try reader["OidcMemberDefinition"].readIfPresent(with: SageMakerClientTypes.OidcMemberDefinition.read(from:))
        return value
    }
}

extension SageMakerClientTypes.OidcMemberDefinition {

    static func write(value: SageMakerClientTypes.OidcMemberDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Groups"].writeList(value.groups, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.OidcMemberDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.OidcMemberDefinition()
        value.groups = try reader["Groups"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.CognitoMemberDefinition {

    static func write(value: SageMakerClientTypes.CognitoMemberDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientId"].write(value.clientId)
        try writer["UserGroup"].write(value.userGroup)
        try writer["UserPool"].write(value.userPool)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CognitoMemberDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CognitoMemberDefinition()
        value.userPool = try reader["UserPool"].readIfPresent() ?? ""
        value.userGroup = try reader["UserGroup"].readIfPresent() ?? ""
        value.clientId = try reader["ClientId"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.DeviceStats {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DeviceStats {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DeviceStats()
        value.connectedDeviceCount = try reader["ConnectedDeviceCount"].readIfPresent() ?? 0
        value.registeredDeviceCount = try reader["RegisteredDeviceCount"].readIfPresent() ?? 0
        return value
    }
}

extension SageMakerClientTypes.AgentVersion {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AgentVersion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AgentVersion()
        value.version = try reader["Version"].readIfPresent() ?? ""
        value.agentCount = try reader["AgentCount"].readIfPresent() ?? 0
        return value
    }
}

extension SageMakerClientTypes.EdgeModelStat {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EdgeModelStat {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EdgeModelStat()
        value.modelName = try reader["ModelName"].readIfPresent() ?? ""
        value.modelVersion = try reader["ModelVersion"].readIfPresent() ?? ""
        value.offlineDeviceCount = try reader["OfflineDeviceCount"].readIfPresent() ?? 0
        value.connectedDeviceCount = try reader["ConnectedDeviceCount"].readIfPresent() ?? 0
        value.activeDeviceCount = try reader["ActiveDeviceCount"].readIfPresent() ?? 0
        value.samplingDeviceCount = try reader["SamplingDeviceCount"].readIfPresent() ?? 0
        return value
    }
}

extension SageMakerClientTypes.ScalingPolicyObjective {

    static func write(value: SageMakerClientTypes.ScalingPolicyObjective?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxInvocationsPerMinute"].write(value.maxInvocationsPerMinute)
        try writer["MinInvocationsPerMinute"].write(value.minInvocationsPerMinute)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ScalingPolicyObjective {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ScalingPolicyObjective()
        value.minInvocationsPerMinute = try reader["MinInvocationsPerMinute"].readIfPresent()
        value.maxInvocationsPerMinute = try reader["MaxInvocationsPerMinute"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ScalingPolicyMetric {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ScalingPolicyMetric {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ScalingPolicyMetric()
        value.invocationsPerInstance = try reader["InvocationsPerInstance"].readIfPresent()
        value.modelLatency = try reader["ModelLatency"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.DynamicScalingConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DynamicScalingConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DynamicScalingConfiguration()
        value.minCapacity = try reader["MinCapacity"].readIfPresent()
        value.maxCapacity = try reader["MaxCapacity"].readIfPresent()
        value.scaleInCooldown = try reader["ScaleInCooldown"].readIfPresent()
        value.scaleOutCooldown = try reader["ScaleOutCooldown"].readIfPresent()
        value.scalingPolicies = try reader["ScalingPolicies"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ScalingPolicy.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ScalingPolicy {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ScalingPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "TargetTracking":
                return .targettracking(try reader["TargetTracking"].read(with: SageMakerClientTypes.TargetTrackingScalingPolicyConfiguration.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension SageMakerClientTypes.TargetTrackingScalingPolicyConfiguration {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TargetTrackingScalingPolicyConfiguration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TargetTrackingScalingPolicyConfiguration()
        value.metricSpecification = try reader["MetricSpecification"].readIfPresent(with: SageMakerClientTypes.MetricSpecification.read(from:))
        value.targetValue = try reader["TargetValue"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.MetricSpecification {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MetricSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "Predefined":
                return .predefined(try reader["Predefined"].read(with: SageMakerClientTypes.PredefinedMetricSpecification.read(from:)))
            case "Customized":
                return .customized(try reader["Customized"].read(with: SageMakerClientTypes.CustomizedMetricSpecification.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension SageMakerClientTypes.CustomizedMetricSpecification {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CustomizedMetricSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CustomizedMetricSpecification()
        value.metricName = try reader["MetricName"].readIfPresent()
        value.namespace = try reader["Namespace"].readIfPresent()
        value.statistic = try reader["Statistic"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.PredefinedMetricSpecification {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.PredefinedMetricSpecification {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.PredefinedMetricSpecification()
        value.predefinedMetricType = try reader["PredefinedMetricType"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.PropertyNameSuggestion {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.PropertyNameSuggestion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.PropertyNameSuggestion()
        value.propertyName = try reader["PropertyName"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ActionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ActionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ActionSummary()
        value.actionArn = try reader["ActionArn"].readIfPresent()
        value.actionName = try reader["ActionName"].readIfPresent()
        value.source = try reader["Source"].readIfPresent(with: SageMakerClientTypes.ActionSource.read(from:))
        value.actionType = try reader["ActionType"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.AlgorithmSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AlgorithmSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AlgorithmSummary()
        value.algorithmName = try reader["AlgorithmName"].readIfPresent() ?? ""
        value.algorithmArn = try reader["AlgorithmArn"].readIfPresent() ?? ""
        value.algorithmDescription = try reader["AlgorithmDescription"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.algorithmStatus = try reader["AlgorithmStatus"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.AppImageConfigDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AppImageConfigDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AppImageConfigDetails()
        value.appImageConfigArn = try reader["AppImageConfigArn"].readIfPresent()
        value.appImageConfigName = try reader["AppImageConfigName"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.kernelGatewayImageConfig = try reader["KernelGatewayImageConfig"].readIfPresent(with: SageMakerClientTypes.KernelGatewayImageConfig.read(from:))
        value.jupyterLabAppImageConfig = try reader["JupyterLabAppImageConfig"].readIfPresent(with: SageMakerClientTypes.JupyterLabAppImageConfig.read(from:))
        value.codeEditorAppImageConfig = try reader["CodeEditorAppImageConfig"].readIfPresent(with: SageMakerClientTypes.CodeEditorAppImageConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.AppDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AppDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AppDetails()
        value.domainId = try reader["DomainId"].readIfPresent()
        value.userProfileName = try reader["UserProfileName"].readIfPresent()
        value.spaceName = try reader["SpaceName"].readIfPresent()
        value.appType = try reader["AppType"].readIfPresent()
        value.appName = try reader["AppName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.resourceSpec = try reader["ResourceSpec"].readIfPresent(with: SageMakerClientTypes.ResourceSpec.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ArtifactSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ArtifactSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ArtifactSummary()
        value.artifactArn = try reader["ArtifactArn"].readIfPresent()
        value.artifactName = try reader["ArtifactName"].readIfPresent()
        value.source = try reader["Source"].readIfPresent(with: SageMakerClientTypes.ArtifactSource.read(from:))
        value.artifactType = try reader["ArtifactType"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.AssociationSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AssociationSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AssociationSummary()
        value.sourceArn = try reader["SourceArn"].readIfPresent()
        value.destinationArn = try reader["DestinationArn"].readIfPresent()
        value.sourceType = try reader["SourceType"].readIfPresent()
        value.destinationType = try reader["DestinationType"].readIfPresent()
        value.associationType = try reader["AssociationType"].readIfPresent()
        value.sourceName = try reader["SourceName"].readIfPresent()
        value.destinationName = try reader["DestinationName"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        return value
    }
}

extension SageMakerClientTypes.AutoMLJobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLJobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLJobSummary()
        value.autoMLJobName = try reader["AutoMLJobName"].readIfPresent() ?? ""
        value.autoMLJobArn = try reader["AutoMLJobArn"].readIfPresent() ?? ""
        value.autoMLJobStatus = try reader["AutoMLJobStatus"].readIfPresent() ?? .sdkUnknown("")
        value.autoMLJobSecondaryStatus = try reader["AutoMLJobSecondaryStatus"].readIfPresent() ?? .sdkUnknown("")
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.partialFailureReasons = try reader["PartialFailureReasons"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AutoMLPartialFailureReason.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ClusterNodeSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ClusterNodeSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ClusterNodeSummary()
        value.instanceGroupName = try reader["InstanceGroupName"].readIfPresent() ?? ""
        value.instanceId = try reader["InstanceId"].readIfPresent() ?? ""
        value.instanceType = try reader["InstanceType"].readIfPresent() ?? .sdkUnknown("")
        value.launchTime = try reader["LaunchTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.instanceStatus = try reader["InstanceStatus"].readIfPresent(with: SageMakerClientTypes.ClusterInstanceStatusDetails.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ClusterSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ClusterSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ClusterSummary()
        value.clusterArn = try reader["ClusterArn"].readIfPresent() ?? ""
        value.clusterName = try reader["ClusterName"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.clusterStatus = try reader["ClusterStatus"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.CodeRepositorySummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CodeRepositorySummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CodeRepositorySummary()
        value.codeRepositoryName = try reader["CodeRepositoryName"].readIfPresent() ?? ""
        value.codeRepositoryArn = try reader["CodeRepositoryArn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.gitConfig = try reader["GitConfig"].readIfPresent(with: SageMakerClientTypes.GitConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.CompilationJobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CompilationJobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CompilationJobSummary()
        value.compilationJobName = try reader["CompilationJobName"].readIfPresent() ?? ""
        value.compilationJobArn = try reader["CompilationJobArn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.compilationStartTime = try reader["CompilationStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.compilationEndTime = try reader["CompilationEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.compilationTargetDevice = try reader["CompilationTargetDevice"].readIfPresent()
        value.compilationTargetPlatformOs = try reader["CompilationTargetPlatformOs"].readIfPresent()
        value.compilationTargetPlatformArch = try reader["CompilationTargetPlatformArch"].readIfPresent()
        value.compilationTargetPlatformAccelerator = try reader["CompilationTargetPlatformAccelerator"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.compilationJobStatus = try reader["CompilationJobStatus"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.ContextSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ContextSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ContextSummary()
        value.contextArn = try reader["ContextArn"].readIfPresent()
        value.contextName = try reader["ContextName"].readIfPresent()
        value.source = try reader["Source"].readIfPresent(with: SageMakerClientTypes.ContextSource.read(from:))
        value.contextType = try reader["ContextType"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.MonitoringJobDefinitionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringJobDefinitionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringJobDefinitionSummary()
        value.monitoringJobDefinitionName = try reader["MonitoringJobDefinitionName"].readIfPresent() ?? ""
        value.monitoringJobDefinitionArn = try reader["MonitoringJobDefinitionArn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.endpointName = try reader["EndpointName"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.DeviceFleetSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DeviceFleetSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DeviceFleetSummary()
        value.deviceFleetArn = try reader["DeviceFleetArn"].readIfPresent() ?? ""
        value.deviceFleetName = try reader["DeviceFleetName"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.DeviceSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DeviceSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DeviceSummary()
        value.deviceName = try reader["DeviceName"].readIfPresent() ?? ""
        value.deviceArn = try reader["DeviceArn"].readIfPresent() ?? ""
        value.description = try reader["Description"].readIfPresent()
        value.deviceFleetName = try reader["DeviceFleetName"].readIfPresent()
        value.iotThingName = try reader["IotThingName"].readIfPresent()
        value.registrationTime = try reader["RegistrationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.latestHeartbeat = try reader["LatestHeartbeat"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.models = try reader["Models"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.EdgeModelSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.agentVersion = try reader["AgentVersion"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.EdgeModelSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EdgeModelSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EdgeModelSummary()
        value.modelName = try reader["ModelName"].readIfPresent() ?? ""
        value.modelVersion = try reader["ModelVersion"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.DomainDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DomainDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DomainDetails()
        value.domainArn = try reader["DomainArn"].readIfPresent()
        value.domainId = try reader["DomainId"].readIfPresent()
        value.domainName = try reader["DomainName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.url = try reader["Url"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.EdgeDeploymentPlanSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EdgeDeploymentPlanSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EdgeDeploymentPlanSummary()
        value.edgeDeploymentPlanArn = try reader["EdgeDeploymentPlanArn"].readIfPresent() ?? ""
        value.edgeDeploymentPlanName = try reader["EdgeDeploymentPlanName"].readIfPresent() ?? ""
        value.deviceFleetName = try reader["DeviceFleetName"].readIfPresent() ?? ""
        value.edgeDeploymentSuccess = try reader["EdgeDeploymentSuccess"].readIfPresent() ?? 0
        value.edgeDeploymentPending = try reader["EdgeDeploymentPending"].readIfPresent() ?? 0
        value.edgeDeploymentFailed = try reader["EdgeDeploymentFailed"].readIfPresent() ?? 0
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.EdgePackagingJobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EdgePackagingJobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EdgePackagingJobSummary()
        value.edgePackagingJobArn = try reader["EdgePackagingJobArn"].readIfPresent() ?? ""
        value.edgePackagingJobName = try reader["EdgePackagingJobName"].readIfPresent() ?? ""
        value.edgePackagingJobStatus = try reader["EdgePackagingJobStatus"].readIfPresent() ?? .sdkUnknown("")
        value.compilationJobName = try reader["CompilationJobName"].readIfPresent()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.modelVersion = try reader["ModelVersion"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.EndpointConfigSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EndpointConfigSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EndpointConfigSummary()
        value.endpointConfigName = try reader["EndpointConfigName"].readIfPresent() ?? ""
        value.endpointConfigArn = try reader["EndpointConfigArn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension SageMakerClientTypes.EndpointSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EndpointSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EndpointSummary()
        value.endpointName = try reader["EndpointName"].readIfPresent() ?? ""
        value.endpointArn = try reader["EndpointArn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.endpointStatus = try reader["EndpointStatus"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.ExperimentSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ExperimentSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ExperimentSummary()
        value.experimentArn = try reader["ExperimentArn"].readIfPresent()
        value.experimentName = try reader["ExperimentName"].readIfPresent()
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.experimentSource = try reader["ExperimentSource"].readIfPresent(with: SageMakerClientTypes.ExperimentSource.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.FeatureGroupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.FeatureGroupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.FeatureGroupSummary()
        value.featureGroupName = try reader["FeatureGroupName"].readIfPresent() ?? ""
        value.featureGroupArn = try reader["FeatureGroupArn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.featureGroupStatus = try reader["FeatureGroupStatus"].readIfPresent()
        value.offlineStoreStatus = try reader["OfflineStoreStatus"].readIfPresent(with: SageMakerClientTypes.OfflineStoreStatus.read(from:))
        return value
    }
}

extension SageMakerClientTypes.FlowDefinitionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.FlowDefinitionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.FlowDefinitionSummary()
        value.flowDefinitionName = try reader["FlowDefinitionName"].readIfPresent() ?? ""
        value.flowDefinitionArn = try reader["FlowDefinitionArn"].readIfPresent() ?? ""
        value.flowDefinitionStatus = try reader["FlowDefinitionStatus"].readIfPresent() ?? .sdkUnknown("")
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.failureReason = try reader["FailureReason"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.HubContentInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HubContentInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HubContentInfo()
        value.hubContentName = try reader["HubContentName"].readIfPresent() ?? ""
        value.hubContentArn = try reader["HubContentArn"].readIfPresent() ?? ""
        value.sageMakerPublicHubContentArn = try reader["SageMakerPublicHubContentArn"].readIfPresent()
        value.hubContentVersion = try reader["HubContentVersion"].readIfPresent() ?? ""
        value.hubContentType = try reader["HubContentType"].readIfPresent() ?? .sdkUnknown("")
        value.documentSchemaVersion = try reader["DocumentSchemaVersion"].readIfPresent() ?? ""
        value.hubContentDisplayName = try reader["HubContentDisplayName"].readIfPresent()
        value.hubContentDescription = try reader["HubContentDescription"].readIfPresent()
        value.supportStatus = try reader["SupportStatus"].readIfPresent()
        value.hubContentSearchKeywords = try reader["HubContentSearchKeywords"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.hubContentStatus = try reader["HubContentStatus"].readIfPresent() ?? .sdkUnknown("")
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.originalCreationTime = try reader["OriginalCreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.HubInfo {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HubInfo {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HubInfo()
        value.hubName = try reader["HubName"].readIfPresent() ?? ""
        value.hubArn = try reader["HubArn"].readIfPresent() ?? ""
        value.hubDisplayName = try reader["HubDisplayName"].readIfPresent()
        value.hubDescription = try reader["HubDescription"].readIfPresent()
        value.hubSearchKeywords = try reader["HubSearchKeywords"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.hubStatus = try reader["HubStatus"].readIfPresent() ?? .sdkUnknown("")
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension SageMakerClientTypes.HumanTaskUiSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HumanTaskUiSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HumanTaskUiSummary()
        value.humanTaskUiName = try reader["HumanTaskUiName"].readIfPresent() ?? ""
        value.humanTaskUiArn = try reader["HumanTaskUiArn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension SageMakerClientTypes.HyperParameterTuningJobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HyperParameterTuningJobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HyperParameterTuningJobSummary()
        value.hyperParameterTuningJobName = try reader["HyperParameterTuningJobName"].readIfPresent() ?? ""
        value.hyperParameterTuningJobArn = try reader["HyperParameterTuningJobArn"].readIfPresent() ?? ""
        value.hyperParameterTuningJobStatus = try reader["HyperParameterTuningJobStatus"].readIfPresent() ?? .sdkUnknown("")
        value.strategy = try reader["Strategy"].readIfPresent() ?? .sdkUnknown("")
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.hyperParameterTuningEndTime = try reader["HyperParameterTuningEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trainingJobStatusCounters = try reader["TrainingJobStatusCounters"].readIfPresent(with: SageMakerClientTypes.TrainingJobStatusCounters.read(from:))
        value.objectiveStatusCounters = try reader["ObjectiveStatusCounters"].readIfPresent(with: SageMakerClientTypes.ObjectiveStatusCounters.read(from:))
        value.resourceLimits = try reader["ResourceLimits"].readIfPresent(with: SageMakerClientTypes.ResourceLimits.read(from:))
        return value
    }
}

extension SageMakerClientTypes.Image {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Image {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Image()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.description = try reader["Description"].readIfPresent()
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.imageArn = try reader["ImageArn"].readIfPresent() ?? ""
        value.imageName = try reader["ImageName"].readIfPresent() ?? ""
        value.imageStatus = try reader["ImageStatus"].readIfPresent() ?? .sdkUnknown("")
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension SageMakerClientTypes.ImageVersion {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ImageVersion {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ImageVersion()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.imageArn = try reader["ImageArn"].readIfPresent() ?? ""
        value.imageVersionArn = try reader["ImageVersionArn"].readIfPresent() ?? ""
        value.imageVersionStatus = try reader["ImageVersionStatus"].readIfPresent() ?? .sdkUnknown("")
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.version = try reader["Version"].readIfPresent() ?? 0
        return value
    }
}

extension SageMakerClientTypes.InferenceComponentSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InferenceComponentSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InferenceComponentSummary()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.inferenceComponentArn = try reader["InferenceComponentArn"].readIfPresent() ?? ""
        value.inferenceComponentName = try reader["InferenceComponentName"].readIfPresent() ?? ""
        value.endpointArn = try reader["EndpointArn"].readIfPresent() ?? ""
        value.endpointName = try reader["EndpointName"].readIfPresent() ?? ""
        value.variantName = try reader["VariantName"].readIfPresent() ?? ""
        value.inferenceComponentStatus = try reader["InferenceComponentStatus"].readIfPresent()
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension SageMakerClientTypes.InferenceExperimentSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InferenceExperimentSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InferenceExperimentSummary()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.type = try reader["Type"].readIfPresent() ?? .sdkUnknown("")
        value.schedule = try reader["Schedule"].readIfPresent(with: SageMakerClientTypes.InferenceExperimentSchedule.read(from:))
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.statusReason = try reader["StatusReason"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.completionTime = try reader["CompletionTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.roleArn = try reader["RoleArn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.InferenceRecommendationsJob {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InferenceRecommendationsJob {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InferenceRecommendationsJob()
        value.jobName = try reader["JobName"].readIfPresent() ?? ""
        value.jobDescription = try reader["JobDescription"].readIfPresent() ?? ""
        value.jobType = try reader["JobType"].readIfPresent() ?? .sdkUnknown("")
        value.jobArn = try reader["JobArn"].readIfPresent() ?? ""
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.completionTime = try reader["CompletionTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.roleArn = try reader["RoleArn"].readIfPresent() ?? ""
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.samplePayloadUrl = try reader["SamplePayloadUrl"].readIfPresent()
        value.modelPackageVersionArn = try reader["ModelPackageVersionArn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.InferenceRecommendationsJobStep {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.InferenceRecommendationsJobStep {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.InferenceRecommendationsJobStep()
        value.stepType = try reader["StepType"].readIfPresent() ?? .sdkUnknown("")
        value.jobName = try reader["JobName"].readIfPresent() ?? ""
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.inferenceBenchmark = try reader["InferenceBenchmark"].readIfPresent(with: SageMakerClientTypes.RecommendationJobInferenceBenchmark.read(from:))
        return value
    }
}

extension SageMakerClientTypes.RecommendationJobInferenceBenchmark {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RecommendationJobInferenceBenchmark {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RecommendationJobInferenceBenchmark()
        value.metrics = try reader["Metrics"].readIfPresent(with: SageMakerClientTypes.RecommendationMetrics.read(from:))
        value.endpointMetrics = try reader["EndpointMetrics"].readIfPresent(with: SageMakerClientTypes.InferenceMetrics.read(from:))
        value.endpointConfiguration = try reader["EndpointConfiguration"].readIfPresent(with: SageMakerClientTypes.EndpointOutputConfiguration.read(from:))
        value.modelConfiguration = try reader["ModelConfiguration"].readIfPresent(with: SageMakerClientTypes.ModelConfiguration.read(from:))
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.invocationEndTime = try reader["InvocationEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.invocationStartTime = try reader["InvocationStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.LabelingJobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.LabelingJobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.LabelingJobSummary()
        value.labelingJobName = try reader["LabelingJobName"].readIfPresent() ?? ""
        value.labelingJobArn = try reader["LabelingJobArn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.labelingJobStatus = try reader["LabelingJobStatus"].readIfPresent() ?? .sdkUnknown("")
        value.labelCounters = try reader["LabelCounters"].readIfPresent(with: SageMakerClientTypes.LabelCounters.read(from:))
        value.workteamArn = try reader["WorkteamArn"].readIfPresent() ?? ""
        value.preHumanTaskLambdaArn = try reader["PreHumanTaskLambdaArn"].readIfPresent() ?? ""
        value.annotationConsolidationLambdaArn = try reader["AnnotationConsolidationLambdaArn"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.labelingJobOutput = try reader["LabelingJobOutput"].readIfPresent(with: SageMakerClientTypes.LabelingJobOutput.read(from:))
        value.inputConfig = try reader["InputConfig"].readIfPresent(with: SageMakerClientTypes.LabelingJobInputConfig.read(from:))
        return value
    }
}

extension SageMakerClientTypes.LabelingJobForWorkteamSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.LabelingJobForWorkteamSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.LabelingJobForWorkteamSummary()
        value.labelingJobName = try reader["LabelingJobName"].readIfPresent()
        value.jobReferenceCode = try reader["JobReferenceCode"].readIfPresent() ?? ""
        value.workRequesterAccountId = try reader["WorkRequesterAccountId"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.labelCounters = try reader["LabelCounters"].readIfPresent(with: SageMakerClientTypes.LabelCountersForWorkteam.read(from:))
        value.numberOfHumanWorkersPerDataObject = try reader["NumberOfHumanWorkersPerDataObject"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.LabelCountersForWorkteam {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.LabelCountersForWorkteam {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.LabelCountersForWorkteam()
        value.humanLabeled = try reader["HumanLabeled"].readIfPresent()
        value.pendingHuman = try reader["PendingHuman"].readIfPresent()
        value.total = try reader["Total"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.LineageGroupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.LineageGroupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.LineageGroupSummary()
        value.lineageGroupArn = try reader["LineageGroupArn"].readIfPresent()
        value.lineageGroupName = try reader["LineageGroupName"].readIfPresent()
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.TrackingServerSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrackingServerSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrackingServerSummary()
        value.trackingServerArn = try reader["TrackingServerArn"].readIfPresent()
        value.trackingServerName = try reader["TrackingServerName"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trackingServerStatus = try reader["TrackingServerStatus"].readIfPresent()
        value.isActive = try reader["IsActive"].readIfPresent()
        value.mlflowVersion = try reader["MlflowVersion"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ModelCardExportJobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelCardExportJobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelCardExportJobSummary()
        value.modelCardExportJobName = try reader["ModelCardExportJobName"].readIfPresent() ?? ""
        value.modelCardExportJobArn = try reader["ModelCardExportJobArn"].readIfPresent() ?? ""
        value.status = try reader["Status"].readIfPresent() ?? .sdkUnknown("")
        value.modelCardName = try reader["ModelCardName"].readIfPresent() ?? ""
        value.modelCardVersion = try reader["ModelCardVersion"].readIfPresent() ?? 0
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedAt = try reader["LastModifiedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension SageMakerClientTypes.ModelCardSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelCardSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelCardSummary()
        value.modelCardName = try reader["ModelCardName"].readIfPresent() ?? ""
        value.modelCardArn = try reader["ModelCardArn"].readIfPresent() ?? ""
        value.modelCardStatus = try reader["ModelCardStatus"].readIfPresent() ?? .sdkUnknown("")
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.ModelCardVersionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelCardVersionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelCardVersionSummary()
        value.modelCardName = try reader["ModelCardName"].readIfPresent() ?? ""
        value.modelCardArn = try reader["ModelCardArn"].readIfPresent() ?? ""
        value.modelCardStatus = try reader["ModelCardStatus"].readIfPresent() ?? .sdkUnknown("")
        value.modelCardVersion = try reader["ModelCardVersion"].readIfPresent() ?? 0
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.ModelMetadataSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelMetadataSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelMetadataSummary()
        value.domain = try reader["Domain"].readIfPresent() ?? ""
        value.framework = try reader["Framework"].readIfPresent() ?? ""
        value.task = try reader["Task"].readIfPresent() ?? ""
        value.model = try reader["Model"].readIfPresent() ?? ""
        value.frameworkVersion = try reader["FrameworkVersion"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.ModelPackageGroupSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelPackageGroupSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelPackageGroupSummary()
        value.modelPackageGroupName = try reader["ModelPackageGroupName"].readIfPresent() ?? ""
        value.modelPackageGroupArn = try reader["ModelPackageGroupArn"].readIfPresent() ?? ""
        value.modelPackageGroupDescription = try reader["ModelPackageGroupDescription"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.modelPackageGroupStatus = try reader["ModelPackageGroupStatus"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.ModelPackageSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelPackageSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelPackageSummary()
        value.modelPackageName = try reader["ModelPackageName"].readIfPresent()
        value.modelPackageGroupName = try reader["ModelPackageGroupName"].readIfPresent()
        value.modelPackageVersion = try reader["ModelPackageVersion"].readIfPresent()
        value.modelPackageArn = try reader["ModelPackageArn"].readIfPresent() ?? ""
        value.modelPackageDescription = try reader["ModelPackageDescription"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.modelPackageStatus = try reader["ModelPackageStatus"].readIfPresent() ?? .sdkUnknown("")
        value.modelApprovalStatus = try reader["ModelApprovalStatus"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ModelSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelSummary()
        value.modelName = try reader["ModelName"].readIfPresent() ?? ""
        value.modelArn = try reader["ModelArn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension SageMakerClientTypes.MonitoringAlertHistorySummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringAlertHistorySummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringAlertHistorySummary()
        value.monitoringScheduleName = try reader["MonitoringScheduleName"].readIfPresent() ?? ""
        value.monitoringAlertName = try reader["MonitoringAlertName"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.alertStatus = try reader["AlertStatus"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.MonitoringAlertSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringAlertSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringAlertSummary()
        value.monitoringAlertName = try reader["MonitoringAlertName"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.alertStatus = try reader["AlertStatus"].readIfPresent() ?? .sdkUnknown("")
        value.datapointsToAlert = try reader["DatapointsToAlert"].readIfPresent() ?? 0
        value.evaluationPeriod = try reader["EvaluationPeriod"].readIfPresent() ?? 0
        value.actions = try reader["Actions"].readIfPresent(with: SageMakerClientTypes.MonitoringAlertActions.read(from:))
        return value
    }
}

extension SageMakerClientTypes.MonitoringAlertActions {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringAlertActions {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringAlertActions()
        value.modelDashboardIndicator = try reader["ModelDashboardIndicator"].readIfPresent(with: SageMakerClientTypes.ModelDashboardIndicatorAction.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ModelDashboardIndicatorAction {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelDashboardIndicatorAction {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelDashboardIndicatorAction()
        value.enabled = try reader["Enabled"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.MonitoringScheduleSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringScheduleSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringScheduleSummary()
        value.monitoringScheduleName = try reader["MonitoringScheduleName"].readIfPresent() ?? ""
        value.monitoringScheduleArn = try reader["MonitoringScheduleArn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.monitoringScheduleStatus = try reader["MonitoringScheduleStatus"].readIfPresent() ?? .sdkUnknown("")
        value.endpointName = try reader["EndpointName"].readIfPresent()
        value.monitoringJobDefinitionName = try reader["MonitoringJobDefinitionName"].readIfPresent()
        value.monitoringType = try reader["MonitoringType"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.NotebookInstanceLifecycleConfigSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.NotebookInstanceLifecycleConfigSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.NotebookInstanceLifecycleConfigSummary()
        value.notebookInstanceLifecycleConfigName = try reader["NotebookInstanceLifecycleConfigName"].readIfPresent() ?? ""
        value.notebookInstanceLifecycleConfigArn = try reader["NotebookInstanceLifecycleConfigArn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.NotebookInstanceSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.NotebookInstanceSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.NotebookInstanceSummary()
        value.notebookInstanceName = try reader["NotebookInstanceName"].readIfPresent() ?? ""
        value.notebookInstanceArn = try reader["NotebookInstanceArn"].readIfPresent() ?? ""
        value.notebookInstanceStatus = try reader["NotebookInstanceStatus"].readIfPresent()
        value.url = try reader["Url"].readIfPresent()
        value.instanceType = try reader["InstanceType"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.notebookInstanceLifecycleConfigName = try reader["NotebookInstanceLifecycleConfigName"].readIfPresent()
        value.defaultCodeRepository = try reader["DefaultCodeRepository"].readIfPresent()
        value.additionalCodeRepositories = try reader["AdditionalCodeRepositories"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.OptimizationJobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.OptimizationJobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.OptimizationJobSummary()
        value.optimizationJobName = try reader["OptimizationJobName"].readIfPresent() ?? ""
        value.optimizationJobArn = try reader["OptimizationJobArn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.optimizationJobStatus = try reader["OptimizationJobStatus"].readIfPresent() ?? .sdkUnknown("")
        value.optimizationStartTime = try reader["OptimizationStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.optimizationEndTime = try reader["OptimizationEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.deploymentInstanceType = try reader["DeploymentInstanceType"].readIfPresent() ?? .sdkUnknown("")
        value.optimizationTypes = try reader["OptimizationTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension SageMakerClientTypes.PipelineExecutionSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.PipelineExecutionSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.PipelineExecutionSummary()
        value.pipelineExecutionArn = try reader["PipelineExecutionArn"].readIfPresent()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.pipelineExecutionStatus = try reader["PipelineExecutionStatus"].readIfPresent()
        value.pipelineExecutionDescription = try reader["PipelineExecutionDescription"].readIfPresent()
        value.pipelineExecutionDisplayName = try reader["PipelineExecutionDisplayName"].readIfPresent()
        value.pipelineExecutionFailureReason = try reader["PipelineExecutionFailureReason"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.PipelineExecutionStep {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.PipelineExecutionStep {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.PipelineExecutionStep()
        value.stepName = try reader["StepName"].readIfPresent()
        value.stepDisplayName = try reader["StepDisplayName"].readIfPresent()
        value.stepDescription = try reader["StepDescription"].readIfPresent()
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.stepStatus = try reader["StepStatus"].readIfPresent()
        value.cacheHitResult = try reader["CacheHitResult"].readIfPresent(with: SageMakerClientTypes.CacheHitResult.read(from:))
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.metadata = try reader["Metadata"].readIfPresent(with: SageMakerClientTypes.PipelineExecutionStepMetadata.read(from:))
        value.attemptCount = try reader["AttemptCount"].readIfPresent()
        value.selectiveExecutionResult = try reader["SelectiveExecutionResult"].readIfPresent(with: SageMakerClientTypes.SelectiveExecutionResult.read(from:))
        return value
    }
}

extension SageMakerClientTypes.SelectiveExecutionResult {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SelectiveExecutionResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SelectiveExecutionResult()
        value.sourcePipelineExecutionArn = try reader["SourcePipelineExecutionArn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.PipelineExecutionStepMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.PipelineExecutionStepMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.PipelineExecutionStepMetadata()
        value.trainingJob = try reader["TrainingJob"].readIfPresent(with: SageMakerClientTypes.TrainingJobStepMetadata.read(from:))
        value.processingJob = try reader["ProcessingJob"].readIfPresent(with: SageMakerClientTypes.ProcessingJobStepMetadata.read(from:))
        value.transformJob = try reader["TransformJob"].readIfPresent(with: SageMakerClientTypes.TransformJobStepMetadata.read(from:))
        value.tuningJob = try reader["TuningJob"].readIfPresent(with: SageMakerClientTypes.TuningJobStepMetaData.read(from:))
        value.model = try reader["Model"].readIfPresent(with: SageMakerClientTypes.ModelStepMetadata.read(from:))
        value.registerModel = try reader["RegisterModel"].readIfPresent(with: SageMakerClientTypes.RegisterModelStepMetadata.read(from:))
        value.condition = try reader["Condition"].readIfPresent(with: SageMakerClientTypes.ConditionStepMetadata.read(from:))
        value.callback = try reader["Callback"].readIfPresent(with: SageMakerClientTypes.CallbackStepMetadata.read(from:))
        value.lambda = try reader["Lambda"].readIfPresent(with: SageMakerClientTypes.LambdaStepMetadata.read(from:))
        value.emr = try reader["EMR"].readIfPresent(with: SageMakerClientTypes.EMRStepMetadata.read(from:))
        value.qualityCheck = try reader["QualityCheck"].readIfPresent(with: SageMakerClientTypes.QualityCheckStepMetadata.read(from:))
        value.clarifyCheck = try reader["ClarifyCheck"].readIfPresent(with: SageMakerClientTypes.ClarifyCheckStepMetadata.read(from:))
        value.fail = try reader["Fail"].readIfPresent(with: SageMakerClientTypes.FailStepMetadata.read(from:))
        value.autoMLJob = try reader["AutoMLJob"].readIfPresent(with: SageMakerClientTypes.AutoMLJobStepMetadata.read(from:))
        value.endpoint = try reader["Endpoint"].readIfPresent(with: SageMakerClientTypes.EndpointStepMetadata.read(from:))
        value.endpointConfig = try reader["EndpointConfig"].readIfPresent(with: SageMakerClientTypes.EndpointConfigStepMetadata.read(from:))
        return value
    }
}

extension SageMakerClientTypes.EndpointConfigStepMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EndpointConfigStepMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EndpointConfigStepMetadata()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.EndpointStepMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EndpointStepMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EndpointStepMetadata()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.AutoMLJobStepMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.AutoMLJobStepMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.AutoMLJobStepMetadata()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.FailStepMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.FailStepMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.FailStepMetadata()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ClarifyCheckStepMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ClarifyCheckStepMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ClarifyCheckStepMetadata()
        value.checkType = try reader["CheckType"].readIfPresent()
        value.baselineUsedForDriftCheckConstraints = try reader["BaselineUsedForDriftCheckConstraints"].readIfPresent()
        value.calculatedBaselineConstraints = try reader["CalculatedBaselineConstraints"].readIfPresent()
        value.modelPackageGroupName = try reader["ModelPackageGroupName"].readIfPresent()
        value.violationReport = try reader["ViolationReport"].readIfPresent()
        value.checkJobArn = try reader["CheckJobArn"].readIfPresent()
        value.skipCheck = try reader["SkipCheck"].readIfPresent()
        value.registerNewBaseline = try reader["RegisterNewBaseline"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.QualityCheckStepMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.QualityCheckStepMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.QualityCheckStepMetadata()
        value.checkType = try reader["CheckType"].readIfPresent()
        value.baselineUsedForDriftCheckStatistics = try reader["BaselineUsedForDriftCheckStatistics"].readIfPresent()
        value.baselineUsedForDriftCheckConstraints = try reader["BaselineUsedForDriftCheckConstraints"].readIfPresent()
        value.calculatedBaselineStatistics = try reader["CalculatedBaselineStatistics"].readIfPresent()
        value.calculatedBaselineConstraints = try reader["CalculatedBaselineConstraints"].readIfPresent()
        value.modelPackageGroupName = try reader["ModelPackageGroupName"].readIfPresent()
        value.violationReport = try reader["ViolationReport"].readIfPresent()
        value.checkJobArn = try reader["CheckJobArn"].readIfPresent()
        value.skipCheck = try reader["SkipCheck"].readIfPresent()
        value.registerNewBaseline = try reader["RegisterNewBaseline"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.EMRStepMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.EMRStepMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.EMRStepMetadata()
        value.clusterId = try reader["ClusterId"].readIfPresent()
        value.stepId = try reader["StepId"].readIfPresent()
        value.stepName = try reader["StepName"].readIfPresent()
        value.logFilePath = try reader["LogFilePath"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.LambdaStepMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.LambdaStepMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.LambdaStepMetadata()
        value.arn = try reader["Arn"].readIfPresent()
        value.outputParameters = try reader["OutputParameters"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.OutputParameter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.OutputParameter {

    static func write(value: SageMakerClientTypes.OutputParameter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.OutputParameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.OutputParameter()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.CallbackStepMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CallbackStepMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CallbackStepMetadata()
        value.callbackToken = try reader["CallbackToken"].readIfPresent()
        value.sqsQueueUrl = try reader["SqsQueueUrl"].readIfPresent()
        value.outputParameters = try reader["OutputParameters"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.OutputParameter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ConditionStepMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ConditionStepMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ConditionStepMetadata()
        value.outcome = try reader["Outcome"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.RegisterModelStepMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RegisterModelStepMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RegisterModelStepMetadata()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ModelStepMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelStepMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelStepMetadata()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TuningJobStepMetaData {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TuningJobStepMetaData {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TuningJobStepMetaData()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TransformJobStepMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TransformJobStepMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TransformJobStepMetadata()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ProcessingJobStepMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProcessingJobStepMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProcessingJobStepMetadata()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TrainingJobStepMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrainingJobStepMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrainingJobStepMetadata()
        value.arn = try reader["Arn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.CacheHitResult {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.CacheHitResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.CacheHitResult()
        value.sourcePipelineExecutionArn = try reader["SourcePipelineExecutionArn"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.Parameter {

    static func write(value: SageMakerClientTypes.Parameter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Parameter {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Parameter()
        value.name = try reader["Name"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.PipelineSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.PipelineSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.PipelineSummary()
        value.pipelineArn = try reader["PipelineArn"].readIfPresent()
        value.pipelineName = try reader["PipelineName"].readIfPresent()
        value.pipelineDisplayName = try reader["PipelineDisplayName"].readIfPresent()
        value.pipelineDescription = try reader["PipelineDescription"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastExecutionTime = try reader["LastExecutionTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.ProcessingJobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProcessingJobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProcessingJobSummary()
        value.processingJobName = try reader["ProcessingJobName"].readIfPresent() ?? ""
        value.processingJobArn = try reader["ProcessingJobArn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.processingEndTime = try reader["ProcessingEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.processingJobStatus = try reader["ProcessingJobStatus"].readIfPresent() ?? .sdkUnknown("")
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.exitMessage = try reader["ExitMessage"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ProjectSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProjectSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProjectSummary()
        value.projectName = try reader["ProjectName"].readIfPresent() ?? ""
        value.projectDescription = try reader["ProjectDescription"].readIfPresent()
        value.projectArn = try reader["ProjectArn"].readIfPresent() ?? ""
        value.projectId = try reader["ProjectId"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.projectStatus = try reader["ProjectStatus"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.ResourceCatalog {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ResourceCatalog {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ResourceCatalog()
        value.resourceCatalogArn = try reader["ResourceCatalogArn"].readIfPresent() ?? ""
        value.resourceCatalogName = try reader["ResourceCatalogName"].readIfPresent() ?? ""
        value.description = try reader["Description"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        return value
    }
}

extension SageMakerClientTypes.SpaceDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SpaceDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SpaceDetails()
        value.domainId = try reader["DomainId"].readIfPresent()
        value.spaceName = try reader["SpaceName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.spaceSettingsSummary = try reader["SpaceSettingsSummary"].readIfPresent(with: SageMakerClientTypes.SpaceSettingsSummary.read(from:))
        value.spaceSharingSettingsSummary = try reader["SpaceSharingSettingsSummary"].readIfPresent(with: SageMakerClientTypes.SpaceSharingSettingsSummary.read(from:))
        value.ownershipSettingsSummary = try reader["OwnershipSettingsSummary"].readIfPresent(with: SageMakerClientTypes.OwnershipSettingsSummary.read(from:))
        value.spaceDisplayName = try reader["SpaceDisplayName"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.OwnershipSettingsSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.OwnershipSettingsSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.OwnershipSettingsSummary()
        value.ownerUserProfileName = try reader["OwnerUserProfileName"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.SpaceSharingSettingsSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SpaceSharingSettingsSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SpaceSharingSettingsSummary()
        value.sharingType = try reader["SharingType"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.SpaceSettingsSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SpaceSettingsSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SpaceSettingsSummary()
        value.appType = try reader["AppType"].readIfPresent()
        value.spaceStorageSettings = try reader["SpaceStorageSettings"].readIfPresent(with: SageMakerClientTypes.SpaceStorageSettings.read(from:))
        return value
    }
}

extension SageMakerClientTypes.DeviceDeploymentSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.DeviceDeploymentSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.DeviceDeploymentSummary()
        value.edgeDeploymentPlanArn = try reader["EdgeDeploymentPlanArn"].readIfPresent() ?? ""
        value.edgeDeploymentPlanName = try reader["EdgeDeploymentPlanName"].readIfPresent() ?? ""
        value.stageName = try reader["StageName"].readIfPresent() ?? ""
        value.deployedStageName = try reader["DeployedStageName"].readIfPresent()
        value.deviceFleetName = try reader["DeviceFleetName"].readIfPresent()
        value.deviceName = try reader["DeviceName"].readIfPresent() ?? ""
        value.deviceArn = try reader["DeviceArn"].readIfPresent() ?? ""
        value.deviceDeploymentStatus = try reader["DeviceDeploymentStatus"].readIfPresent()
        value.deviceDeploymentStatusMessage = try reader["DeviceDeploymentStatusMessage"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.deploymentStartTime = try reader["DeploymentStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.StudioLifecycleConfigDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.StudioLifecycleConfigDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.StudioLifecycleConfigDetails()
        value.studioLifecycleConfigArn = try reader["StudioLifecycleConfigArn"].readIfPresent()
        value.studioLifecycleConfigName = try reader["StudioLifecycleConfigName"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.studioLifecycleConfigAppType = try reader["StudioLifecycleConfigAppType"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TrainingJobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrainingJobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrainingJobSummary()
        value.trainingJobName = try reader["TrainingJobName"].readIfPresent() ?? ""
        value.trainingJobArn = try reader["TrainingJobArn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.trainingEndTime = try reader["TrainingEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trainingJobStatus = try reader["TrainingJobStatus"].readIfPresent() ?? .sdkUnknown("")
        value.warmPoolStatus = try reader["WarmPoolStatus"].readIfPresent(with: SageMakerClientTypes.WarmPoolStatus.read(from:))
        return value
    }
}

extension SageMakerClientTypes.TransformJobSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TransformJobSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TransformJobSummary()
        value.transformJobName = try reader["TransformJobName"].readIfPresent() ?? ""
        value.transformJobArn = try reader["TransformJobArn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.transformEndTime = try reader["TransformEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.transformJobStatus = try reader["TransformJobStatus"].readIfPresent() ?? .sdkUnknown("")
        value.failureReason = try reader["FailureReason"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TrialComponentSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrialComponentSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrialComponentSummary()
        value.trialComponentName = try reader["TrialComponentName"].readIfPresent()
        value.trialComponentArn = try reader["TrialComponentArn"].readIfPresent()
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.trialComponentSource = try reader["TrialComponentSource"].readIfPresent(with: SageMakerClientTypes.TrialComponentSource.read(from:))
        value.status = try reader["Status"].readIfPresent(with: SageMakerClientTypes.TrialComponentStatus.read(from:))
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        return value
    }
}

extension SageMakerClientTypes.TrialSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrialSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrialSummary()
        value.trialArn = try reader["TrialArn"].readIfPresent()
        value.trialName = try reader["TrialName"].readIfPresent()
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.trialSource = try reader["TrialSource"].readIfPresent(with: SageMakerClientTypes.TrialSource.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.UserProfileDetails {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.UserProfileDetails {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.UserProfileDetails()
        value.domainId = try reader["DomainId"].readIfPresent()
        value.userProfileName = try reader["UserProfileName"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension SageMakerClientTypes.Vertex {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Vertex {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Vertex()
        value.arn = try reader["Arn"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.lineageType = try reader["LineageType"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.Edge {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Edge {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Edge()
        value.sourceArn = try reader["SourceArn"].readIfPresent()
        value.destinationArn = try reader["DestinationArn"].readIfPresent()
        value.associationType = try reader["AssociationType"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.RenderingError {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.RenderingError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.RenderingError()
        value.code = try reader["Code"].readIfPresent() ?? ""
        value.message = try reader["Message"].readIfPresent() ?? ""
        return value
    }
}

extension SageMakerClientTypes.SearchRecord {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.SearchRecord {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.SearchRecord()
        value.trainingJob = try reader["TrainingJob"].readIfPresent(with: SageMakerClientTypes.TrainingJob.read(from:))
        value.experiment = try reader["Experiment"].readIfPresent(with: SageMakerClientTypes.Experiment.read(from:))
        value.trial = try reader["Trial"].readIfPresent(with: SageMakerClientTypes.Trial.read(from:))
        value.trialComponent = try reader["TrialComponent"].readIfPresent(with: SageMakerClientTypes.TrialComponent.read(from:))
        value.endpoint = try reader["Endpoint"].readIfPresent(with: SageMakerClientTypes.Endpoint.read(from:))
        value.modelPackage = try reader["ModelPackage"].readIfPresent(with: SageMakerClientTypes.ModelPackage.read(from:))
        value.modelPackageGroup = try reader["ModelPackageGroup"].readIfPresent(with: SageMakerClientTypes.ModelPackageGroup.read(from:))
        value.pipeline = try reader["Pipeline"].readIfPresent(with: SageMakerClientTypes.Pipeline.read(from:))
        value.pipelineExecution = try reader["PipelineExecution"].readIfPresent(with: SageMakerClientTypes.PipelineExecution.read(from:))
        value.featureGroup = try reader["FeatureGroup"].readIfPresent(with: SageMakerClientTypes.FeatureGroup.read(from:))
        value.featureMetadata = try reader["FeatureMetadata"].readIfPresent(with: SageMakerClientTypes.FeatureMetadata.read(from:))
        value.project = try reader["Project"].readIfPresent(with: SageMakerClientTypes.Project.read(from:))
        value.hyperParameterTuningJob = try reader["HyperParameterTuningJob"].readIfPresent(with: SageMakerClientTypes.HyperParameterTuningJobSearchEntity.read(from:))
        value.modelCard = try reader["ModelCard"].readIfPresent(with: SageMakerClientTypes.ModelCard.read(from:))
        value.model = try reader["Model"].readIfPresent(with: SageMakerClientTypes.ModelDashboardModel.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ModelDashboardModel {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelDashboardModel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelDashboardModel()
        value.model = try reader["Model"].readIfPresent(with: SageMakerClientTypes.Model.read(from:))
        value.endpoints = try reader["Endpoints"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ModelDashboardEndpoint.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastBatchTransformJob = try reader["LastBatchTransformJob"].readIfPresent(with: SageMakerClientTypes.TransformJob.read(from:))
        value.monitoringSchedules = try reader["MonitoringSchedules"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ModelDashboardMonitoringSchedule.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.modelCard = try reader["ModelCard"].readIfPresent(with: SageMakerClientTypes.ModelDashboardModelCard.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ModelDashboardModelCard {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelDashboardModelCard {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelDashboardModelCard()
        value.modelCardArn = try reader["ModelCardArn"].readIfPresent()
        value.modelCardName = try reader["ModelCardName"].readIfPresent()
        value.modelCardVersion = try reader["ModelCardVersion"].readIfPresent()
        value.modelCardStatus = try reader["ModelCardStatus"].readIfPresent()
        value.securityConfig = try reader["SecurityConfig"].readIfPresent(with: SageMakerClientTypes.ModelCardSecurityConfig.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.modelId = try reader["ModelId"].readIfPresent()
        value.riskRating = try reader["RiskRating"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.ModelDashboardMonitoringSchedule {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelDashboardMonitoringSchedule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelDashboardMonitoringSchedule()
        value.monitoringScheduleArn = try reader["MonitoringScheduleArn"].readIfPresent()
        value.monitoringScheduleName = try reader["MonitoringScheduleName"].readIfPresent()
        value.monitoringScheduleStatus = try reader["MonitoringScheduleStatus"].readIfPresent()
        value.monitoringType = try reader["MonitoringType"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.monitoringScheduleConfig = try reader["MonitoringScheduleConfig"].readIfPresent(with: SageMakerClientTypes.MonitoringScheduleConfig.read(from:))
        value.endpointName = try reader["EndpointName"].readIfPresent()
        value.monitoringAlertSummaries = try reader["MonitoringAlertSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.MonitoringAlertSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastMonitoringExecutionSummary = try reader["LastMonitoringExecutionSummary"].readIfPresent(with: SageMakerClientTypes.MonitoringExecutionSummary.read(from:))
        value.batchTransformInput = try reader["BatchTransformInput"].readIfPresent(with: SageMakerClientTypes.BatchTransformInput.read(from:))
        return value
    }
}

extension SageMakerClientTypes.TransformJob {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TransformJob {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TransformJob()
        value.transformJobName = try reader["TransformJobName"].readIfPresent()
        value.transformJobArn = try reader["TransformJobArn"].readIfPresent()
        value.transformJobStatus = try reader["TransformJobStatus"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.maxConcurrentTransforms = try reader["MaxConcurrentTransforms"].readIfPresent()
        value.modelClientConfig = try reader["ModelClientConfig"].readIfPresent(with: SageMakerClientTypes.ModelClientConfig.read(from:))
        value.maxPayloadInMB = try reader["MaxPayloadInMB"].readIfPresent()
        value.batchStrategy = try reader["BatchStrategy"].readIfPresent()
        value.environment = try reader["Environment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.transformInput = try reader["TransformInput"].readIfPresent(with: SageMakerClientTypes.TransformInput.read(from:))
        value.transformOutput = try reader["TransformOutput"].readIfPresent(with: SageMakerClientTypes.TransformOutput.read(from:))
        value.dataCaptureConfig = try reader["DataCaptureConfig"].readIfPresent(with: SageMakerClientTypes.BatchDataCaptureConfig.read(from:))
        value.transformResources = try reader["TransformResources"].readIfPresent(with: SageMakerClientTypes.TransformResources.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.transformStartTime = try reader["TransformStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.transformEndTime = try reader["TransformEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.labelingJobArn = try reader["LabelingJobArn"].readIfPresent()
        value.autoMLJobArn = try reader["AutoMLJobArn"].readIfPresent()
        value.dataProcessing = try reader["DataProcessing"].readIfPresent(with: SageMakerClientTypes.DataProcessing.read(from:))
        value.experimentConfig = try reader["ExperimentConfig"].readIfPresent(with: SageMakerClientTypes.ExperimentConfig.read(from:))
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ModelDashboardEndpoint {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelDashboardEndpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelDashboardEndpoint()
        value.endpointName = try reader["EndpointName"].readIfPresent() ?? ""
        value.endpointArn = try reader["EndpointArn"].readIfPresent() ?? ""
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.endpointStatus = try reader["EndpointStatus"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension SageMakerClientTypes.Model {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Model {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Model()
        value.modelName = try reader["ModelName"].readIfPresent()
        value.primaryContainer = try reader["PrimaryContainer"].readIfPresent(with: SageMakerClientTypes.ContainerDefinition.read(from:))
        value.containers = try reader["Containers"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ContainerDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.inferenceExecutionConfig = try reader["InferenceExecutionConfig"].readIfPresent(with: SageMakerClientTypes.InferenceExecutionConfig.read(from:))
        value.executionRoleArn = try reader["ExecutionRoleArn"].readIfPresent()
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: SageMakerClientTypes.VpcConfig.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.modelArn = try reader["ModelArn"].readIfPresent()
        value.enableNetworkIsolation = try reader["EnableNetworkIsolation"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.deploymentRecommendation = try reader["DeploymentRecommendation"].readIfPresent(with: SageMakerClientTypes.DeploymentRecommendation.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ModelCard {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelCard {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelCard()
        value.modelCardArn = try reader["ModelCardArn"].readIfPresent()
        value.modelCardName = try reader["ModelCardName"].readIfPresent()
        value.modelCardVersion = try reader["ModelCardVersion"].readIfPresent()
        value.content = try reader["Content"].readIfPresent()
        value.modelCardStatus = try reader["ModelCardStatus"].readIfPresent()
        value.securityConfig = try reader["SecurityConfig"].readIfPresent(with: SageMakerClientTypes.ModelCardSecurityConfig.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.modelId = try reader["ModelId"].readIfPresent()
        value.riskRating = try reader["RiskRating"].readIfPresent()
        value.modelPackageGroupName = try reader["ModelPackageGroupName"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.HyperParameterTuningJobSearchEntity {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.HyperParameterTuningJobSearchEntity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.HyperParameterTuningJobSearchEntity()
        value.hyperParameterTuningJobName = try reader["HyperParameterTuningJobName"].readIfPresent()
        value.hyperParameterTuningJobArn = try reader["HyperParameterTuningJobArn"].readIfPresent()
        value.hyperParameterTuningJobConfig = try reader["HyperParameterTuningJobConfig"].readIfPresent(with: SageMakerClientTypes.HyperParameterTuningJobConfig.read(from:))
        value.trainingJobDefinition = try reader["TrainingJobDefinition"].readIfPresent(with: SageMakerClientTypes.HyperParameterTrainingJobDefinition.read(from:))
        value.trainingJobDefinitions = try reader["TrainingJobDefinitions"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.HyperParameterTrainingJobDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.hyperParameterTuningJobStatus = try reader["HyperParameterTuningJobStatus"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.hyperParameterTuningEndTime = try reader["HyperParameterTuningEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trainingJobStatusCounters = try reader["TrainingJobStatusCounters"].readIfPresent(with: SageMakerClientTypes.TrainingJobStatusCounters.read(from:))
        value.objectiveStatusCounters = try reader["ObjectiveStatusCounters"].readIfPresent(with: SageMakerClientTypes.ObjectiveStatusCounters.read(from:))
        value.bestTrainingJob = try reader["BestTrainingJob"].readIfPresent(with: SageMakerClientTypes.HyperParameterTrainingJobSummary.read(from:))
        value.overallBestTrainingJob = try reader["OverallBestTrainingJob"].readIfPresent(with: SageMakerClientTypes.HyperParameterTrainingJobSummary.read(from:))
        value.warmStartConfig = try reader["WarmStartConfig"].readIfPresent(with: SageMakerClientTypes.HyperParameterTuningJobWarmStartConfig.read(from:))
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.tuningJobCompletionDetails = try reader["TuningJobCompletionDetails"].readIfPresent(with: SageMakerClientTypes.HyperParameterTuningJobCompletionDetails.read(from:))
        value.consumedResources = try reader["ConsumedResources"].readIfPresent(with: SageMakerClientTypes.HyperParameterTuningJobConsumedResources.read(from:))
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.Project {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Project {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Project()
        value.projectArn = try reader["ProjectArn"].readIfPresent()
        value.projectName = try reader["ProjectName"].readIfPresent()
        value.projectId = try reader["ProjectId"].readIfPresent()
        value.projectDescription = try reader["ProjectDescription"].readIfPresent()
        value.serviceCatalogProvisioningDetails = try reader["ServiceCatalogProvisioningDetails"].readIfPresent(with: SageMakerClientTypes.ServiceCatalogProvisioningDetails.read(from:))
        value.serviceCatalogProvisionedProductDetails = try reader["ServiceCatalogProvisionedProductDetails"].readIfPresent(with: SageMakerClientTypes.ServiceCatalogProvisionedProductDetails.read(from:))
        value.projectStatus = try reader["ProjectStatus"].readIfPresent()
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        return value
    }
}

extension SageMakerClientTypes.FeatureMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.FeatureMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.FeatureMetadata()
        value.featureGroupArn = try reader["FeatureGroupArn"].readIfPresent()
        value.featureGroupName = try reader["FeatureGroupName"].readIfPresent()
        value.featureName = try reader["FeatureName"].readIfPresent()
        value.featureType = try reader["FeatureType"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.description = try reader["Description"].readIfPresent()
        value.parameters = try reader["Parameters"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.FeatureParameter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.FeatureGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.FeatureGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.FeatureGroup()
        value.featureGroupArn = try reader["FeatureGroupArn"].readIfPresent()
        value.featureGroupName = try reader["FeatureGroupName"].readIfPresent()
        value.recordIdentifierFeatureName = try reader["RecordIdentifierFeatureName"].readIfPresent()
        value.eventTimeFeatureName = try reader["EventTimeFeatureName"].readIfPresent()
        value.featureDefinitions = try reader["FeatureDefinitions"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.FeatureDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.onlineStoreConfig = try reader["OnlineStoreConfig"].readIfPresent(with: SageMakerClientTypes.OnlineStoreConfig.read(from:))
        value.offlineStoreConfig = try reader["OfflineStoreConfig"].readIfPresent(with: SageMakerClientTypes.OfflineStoreConfig.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.featureGroupStatus = try reader["FeatureGroupStatus"].readIfPresent()
        value.offlineStoreStatus = try reader["OfflineStoreStatus"].readIfPresent(with: SageMakerClientTypes.OfflineStoreStatus.read(from:))
        value.lastUpdateStatus = try reader["LastUpdateStatus"].readIfPresent(with: SageMakerClientTypes.LastUpdateStatus.read(from:))
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.PipelineExecution {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.PipelineExecution {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.PipelineExecution()
        value.pipelineArn = try reader["PipelineArn"].readIfPresent()
        value.pipelineExecutionArn = try reader["PipelineExecutionArn"].readIfPresent()
        value.pipelineExecutionDisplayName = try reader["PipelineExecutionDisplayName"].readIfPresent()
        value.pipelineExecutionStatus = try reader["PipelineExecutionStatus"].readIfPresent()
        value.pipelineExecutionDescription = try reader["PipelineExecutionDescription"].readIfPresent()
        value.pipelineExperimentConfig = try reader["PipelineExperimentConfig"].readIfPresent(with: SageMakerClientTypes.PipelineExperimentConfig.read(from:))
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.parallelismConfiguration = try reader["ParallelismConfiguration"].readIfPresent(with: SageMakerClientTypes.ParallelismConfiguration.read(from:))
        value.selectiveExecutionConfig = try reader["SelectiveExecutionConfig"].readIfPresent(with: SageMakerClientTypes.SelectiveExecutionConfig.read(from:))
        value.pipelineParameters = try reader["PipelineParameters"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Parameter.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.Pipeline {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Pipeline {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Pipeline()
        value.pipelineArn = try reader["PipelineArn"].readIfPresent()
        value.pipelineName = try reader["PipelineName"].readIfPresent()
        value.pipelineDisplayName = try reader["PipelineDisplayName"].readIfPresent()
        value.pipelineDescription = try reader["PipelineDescription"].readIfPresent()
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.pipelineStatus = try reader["PipelineStatus"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastRunTime = try reader["LastRunTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.parallelismConfiguration = try reader["ParallelismConfiguration"].readIfPresent(with: SageMakerClientTypes.ParallelismConfiguration.read(from:))
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ModelPackageGroup {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelPackageGroup {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelPackageGroup()
        value.modelPackageGroupName = try reader["ModelPackageGroupName"].readIfPresent()
        value.modelPackageGroupArn = try reader["ModelPackageGroupArn"].readIfPresent()
        value.modelPackageGroupDescription = try reader["ModelPackageGroupDescription"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.modelPackageGroupStatus = try reader["ModelPackageGroupStatus"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ModelPackage {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ModelPackage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ModelPackage()
        value.modelPackageName = try reader["ModelPackageName"].readIfPresent()
        value.modelPackageGroupName = try reader["ModelPackageGroupName"].readIfPresent()
        value.modelPackageVersion = try reader["ModelPackageVersion"].readIfPresent()
        value.modelPackageArn = try reader["ModelPackageArn"].readIfPresent()
        value.modelPackageDescription = try reader["ModelPackageDescription"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.inferenceSpecification = try reader["InferenceSpecification"].readIfPresent(with: SageMakerClientTypes.InferenceSpecification.read(from:))
        value.sourceAlgorithmSpecification = try reader["SourceAlgorithmSpecification"].readIfPresent(with: SageMakerClientTypes.SourceAlgorithmSpecification.read(from:))
        value.validationSpecification = try reader["ValidationSpecification"].readIfPresent(with: SageMakerClientTypes.ModelPackageValidationSpecification.read(from:))
        value.modelPackageStatus = try reader["ModelPackageStatus"].readIfPresent()
        value.modelPackageStatusDetails = try reader["ModelPackageStatusDetails"].readIfPresent(with: SageMakerClientTypes.ModelPackageStatusDetails.read(from:))
        value.certifyForMarketplace = try reader["CertifyForMarketplace"].readIfPresent()
        value.modelApprovalStatus = try reader["ModelApprovalStatus"].readIfPresent()
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.metadataProperties = try reader["MetadataProperties"].readIfPresent(with: SageMakerClientTypes.MetadataProperties.read(from:))
        value.modelMetrics = try reader["ModelMetrics"].readIfPresent(with: SageMakerClientTypes.ModelMetrics.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.approvalDescription = try reader["ApprovalDescription"].readIfPresent()
        value.domain = try reader["Domain"].readIfPresent()
        value.task = try reader["Task"].readIfPresent()
        value.samplePayloadUrl = try reader["SamplePayloadUrl"].readIfPresent()
        value.additionalInferenceSpecifications = try reader["AdditionalInferenceSpecifications"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.AdditionalInferenceSpecificationDefinition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.sourceUri = try reader["SourceUri"].readIfPresent()
        value.securityConfig = try reader["SecurityConfig"].readIfPresent(with: SageMakerClientTypes.ModelPackageSecurityConfig.read(from:))
        value.modelCard = try reader["ModelCard"].readIfPresent(with: SageMakerClientTypes.ModelPackageModelCard.read(from:))
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.customerMetadataProperties = try reader["CustomerMetadataProperties"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.driftCheckBaselines = try reader["DriftCheckBaselines"].readIfPresent(with: SageMakerClientTypes.DriftCheckBaselines.read(from:))
        value.skipModelValidation = try reader["SkipModelValidation"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.Endpoint {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Endpoint {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Endpoint()
        value.endpointName = try reader["EndpointName"].readIfPresent() ?? ""
        value.endpointArn = try reader["EndpointArn"].readIfPresent() ?? ""
        value.endpointConfigName = try reader["EndpointConfigName"].readIfPresent() ?? ""
        value.productionVariants = try reader["ProductionVariants"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ProductionVariantSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.dataCaptureConfig = try reader["DataCaptureConfig"].readIfPresent(with: SageMakerClientTypes.DataCaptureConfigSummary.read(from:))
        value.endpointStatus = try reader["EndpointStatus"].readIfPresent() ?? .sdkUnknown("")
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds) ?? SmithyTimestamps.TimestampFormatter(format: .dateTime).date(from: "1970-01-01T00:00:00Z")
        value.monitoringSchedules = try reader["MonitoringSchedules"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.MonitoringSchedule.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.shadowProductionVariants = try reader["ShadowProductionVariants"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ProductionVariantSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.MonitoringSchedule {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.MonitoringSchedule {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.MonitoringSchedule()
        value.monitoringScheduleArn = try reader["MonitoringScheduleArn"].readIfPresent()
        value.monitoringScheduleName = try reader["MonitoringScheduleName"].readIfPresent()
        value.monitoringScheduleStatus = try reader["MonitoringScheduleStatus"].readIfPresent()
        value.monitoringType = try reader["MonitoringType"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.monitoringScheduleConfig = try reader["MonitoringScheduleConfig"].readIfPresent(with: SageMakerClientTypes.MonitoringScheduleConfig.read(from:))
        value.endpointName = try reader["EndpointName"].readIfPresent()
        value.lastMonitoringExecutionSummary = try reader["LastMonitoringExecutionSummary"].readIfPresent(with: SageMakerClientTypes.MonitoringExecutionSummary.read(from:))
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.TrialComponent {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrialComponent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrialComponent()
        value.trialComponentName = try reader["TrialComponentName"].readIfPresent()
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.trialComponentArn = try reader["TrialComponentArn"].readIfPresent()
        value.source = try reader["Source"].readIfPresent(with: SageMakerClientTypes.TrialComponentSource.read(from:))
        value.status = try reader["Status"].readIfPresent(with: SageMakerClientTypes.TrialComponentStatus.read(from:))
        value.startTime = try reader["StartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.parameters = try reader["Parameters"].readMapIfPresent(valueReadingClosure: SageMakerClientTypes.TrialComponentParameterValue.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.inputArtifacts = try reader["InputArtifacts"].readMapIfPresent(valueReadingClosure: SageMakerClientTypes.TrialComponentArtifact.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.outputArtifacts = try reader["OutputArtifacts"].readMapIfPresent(valueReadingClosure: SageMakerClientTypes.TrialComponentArtifact.read(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.metrics = try reader["Metrics"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.TrialComponentMetricSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.metadataProperties = try reader["MetadataProperties"].readIfPresent(with: SageMakerClientTypes.MetadataProperties.read(from:))
        value.sourceDetail = try reader["SourceDetail"].readIfPresent(with: SageMakerClientTypes.TrialComponentSourceDetail.read(from:))
        value.lineageGroupArn = try reader["LineageGroupArn"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.parents = try reader["Parents"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Parent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.runName = try reader["RunName"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.Parent {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Parent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Parent()
        value.trialName = try reader["TrialName"].readIfPresent()
        value.experimentName = try reader["ExperimentName"].readIfPresent()
        return value
    }
}

extension SageMakerClientTypes.TrialComponentSourceDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrialComponentSourceDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrialComponentSourceDetail()
        value.sourceArn = try reader["SourceArn"].readIfPresent()
        value.trainingJob = try reader["TrainingJob"].readIfPresent(with: SageMakerClientTypes.TrainingJob.read(from:))
        value.processingJob = try reader["ProcessingJob"].readIfPresent(with: SageMakerClientTypes.ProcessingJob.read(from:))
        value.transformJob = try reader["TransformJob"].readIfPresent(with: SageMakerClientTypes.TransformJob.read(from:))
        return value
    }
}

extension SageMakerClientTypes.ProcessingJob {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.ProcessingJob {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.ProcessingJob()
        value.processingInputs = try reader["ProcessingInputs"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.ProcessingInput.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.processingOutputConfig = try reader["ProcessingOutputConfig"].readIfPresent(with: SageMakerClientTypes.ProcessingOutputConfig.read(from:))
        value.processingJobName = try reader["ProcessingJobName"].readIfPresent()
        value.processingResources = try reader["ProcessingResources"].readIfPresent(with: SageMakerClientTypes.ProcessingResources.read(from:))
        value.stoppingCondition = try reader["StoppingCondition"].readIfPresent(with: SageMakerClientTypes.ProcessingStoppingCondition.read(from:))
        value.appSpecification = try reader["AppSpecification"].readIfPresent(with: SageMakerClientTypes.AppSpecification.read(from:))
        value.environment = try reader["Environment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.networkConfig = try reader["NetworkConfig"].readIfPresent(with: SageMakerClientTypes.NetworkConfig.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.experimentConfig = try reader["ExperimentConfig"].readIfPresent(with: SageMakerClientTypes.ExperimentConfig.read(from:))
        value.processingJobArn = try reader["ProcessingJobArn"].readIfPresent()
        value.processingJobStatus = try reader["ProcessingJobStatus"].readIfPresent()
        value.exitMessage = try reader["ExitMessage"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.processingEndTime = try reader["ProcessingEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.processingStartTime = try reader["ProcessingStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.monitoringScheduleArn = try reader["MonitoringScheduleArn"].readIfPresent()
        value.autoMLJobArn = try reader["AutoMLJobArn"].readIfPresent()
        value.trainingJobArn = try reader["TrainingJobArn"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.TrainingJob {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrainingJob {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrainingJob()
        value.trainingJobName = try reader["TrainingJobName"].readIfPresent()
        value.trainingJobArn = try reader["TrainingJobArn"].readIfPresent()
        value.tuningJobArn = try reader["TuningJobArn"].readIfPresent()
        value.labelingJobArn = try reader["LabelingJobArn"].readIfPresent()
        value.autoMLJobArn = try reader["AutoMLJobArn"].readIfPresent()
        value.modelArtifacts = try reader["ModelArtifacts"].readIfPresent(with: SageMakerClientTypes.ModelArtifacts.read(from:))
        value.trainingJobStatus = try reader["TrainingJobStatus"].readIfPresent()
        value.secondaryStatus = try reader["SecondaryStatus"].readIfPresent()
        value.failureReason = try reader["FailureReason"].readIfPresent()
        value.hyperParameters = try reader["HyperParameters"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.algorithmSpecification = try reader["AlgorithmSpecification"].readIfPresent(with: SageMakerClientTypes.AlgorithmSpecification.read(from:))
        value.roleArn = try reader["RoleArn"].readIfPresent()
        value.inputDataConfig = try reader["InputDataConfig"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Channel.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.outputDataConfig = try reader["OutputDataConfig"].readIfPresent(with: SageMakerClientTypes.OutputDataConfig.read(from:))
        value.resourceConfig = try reader["ResourceConfig"].readIfPresent(with: SageMakerClientTypes.ResourceConfig.read(from:))
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: SageMakerClientTypes.VpcConfig.read(from:))
        value.stoppingCondition = try reader["StoppingCondition"].readIfPresent(with: SageMakerClientTypes.StoppingCondition.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trainingStartTime = try reader["TrainingStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trainingEndTime = try reader["TrainingEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.secondaryStatusTransitions = try reader["SecondaryStatusTransitions"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.SecondaryStatusTransition.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.finalMetricDataList = try reader["FinalMetricDataList"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.MetricData.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.enableNetworkIsolation = try reader["EnableNetworkIsolation"].readIfPresent()
        value.enableInterContainerTrafficEncryption = try reader["EnableInterContainerTrafficEncryption"].readIfPresent()
        value.enableManagedSpotTraining = try reader["EnableManagedSpotTraining"].readIfPresent()
        value.checkpointConfig = try reader["CheckpointConfig"].readIfPresent(with: SageMakerClientTypes.CheckpointConfig.read(from:))
        value.trainingTimeInSeconds = try reader["TrainingTimeInSeconds"].readIfPresent()
        value.billableTimeInSeconds = try reader["BillableTimeInSeconds"].readIfPresent()
        value.debugHookConfig = try reader["DebugHookConfig"].readIfPresent(with: SageMakerClientTypes.DebugHookConfig.read(from:))
        value.experimentConfig = try reader["ExperimentConfig"].readIfPresent(with: SageMakerClientTypes.ExperimentConfig.read(from:))
        value.debugRuleConfigurations = try reader["DebugRuleConfigurations"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.DebugRuleConfiguration.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.tensorBoardOutputConfig = try reader["TensorBoardOutputConfig"].readIfPresent(with: SageMakerClientTypes.TensorBoardOutputConfig.read(from:))
        value.debugRuleEvaluationStatuses = try reader["DebugRuleEvaluationStatuses"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.DebugRuleEvaluationStatus.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.profilerConfig = try reader["ProfilerConfig"].readIfPresent(with: SageMakerClientTypes.ProfilerConfig.read(from:))
        value.environment = try reader["Environment"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        value.retryStrategy = try reader["RetryStrategy"].readIfPresent(with: SageMakerClientTypes.RetryStrategy.read(from:))
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.Trial {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Trial {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Trial()
        value.trialName = try reader["TrialName"].readIfPresent()
        value.trialArn = try reader["TrialArn"].readIfPresent()
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.experimentName = try reader["ExperimentName"].readIfPresent()
        value.source = try reader["Source"].readIfPresent(with: SageMakerClientTypes.TrialSource.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.metadataProperties = try reader["MetadataProperties"].readIfPresent(with: SageMakerClientTypes.MetadataProperties.read(from:))
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.trialComponentSummaries = try reader["TrialComponentSummaries"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.TrialComponentSimpleSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.TrialComponentSimpleSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.TrialComponentSimpleSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.TrialComponentSimpleSummary()
        value.trialComponentName = try reader["TrialComponentName"].readIfPresent()
        value.trialComponentArn = try reader["TrialComponentArn"].readIfPresent()
        value.trialComponentSource = try reader["TrialComponentSource"].readIfPresent(with: SageMakerClientTypes.TrialComponentSource.read(from:))
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        return value
    }
}

extension SageMakerClientTypes.Experiment {

    static func read(from reader: SmithyJSON.Reader) throws -> SageMakerClientTypes.Experiment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = SageMakerClientTypes.Experiment()
        value.experimentName = try reader["ExperimentName"].readIfPresent()
        value.experimentArn = try reader["ExperimentArn"].readIfPresent()
        value.displayName = try reader["DisplayName"].readIfPresent()
        value.source = try reader["Source"].readIfPresent(with: SageMakerClientTypes.ExperimentSource.read(from:))
        value.description = try reader["Description"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.createdBy = try reader["CreatedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedBy = try reader["LastModifiedBy"].readIfPresent(with: SageMakerClientTypes.UserContext.read(from:))
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: SageMakerClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension SageMakerClientTypes.ClusterInstanceGroupSpecification {

    static func write(value: SageMakerClientTypes.ClusterInstanceGroupSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ExecutionRole"].write(value.executionRole)
        try writer["InstanceCount"].write(value.instanceCount)
        try writer["InstanceGroupName"].write(value.instanceGroupName)
        try writer["InstanceStorageConfigs"].writeList(value.instanceStorageConfigs, memberWritingClosure: SageMakerClientTypes.ClusterInstanceStorageConfig.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["InstanceType"].write(value.instanceType)
        try writer["LifeCycleConfig"].write(value.lifeCycleConfig, with: SageMakerClientTypes.ClusterLifeCycleConfig.write(value:to:))
        try writer["OnStartDeepHealthChecks"].writeList(value.onStartDeepHealthChecks, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerClientTypes.DeepHealthCheckType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ThreadsPerCore"].write(value.threadsPerCore)
    }
}

extension SageMakerClientTypes.DeploymentStage {

    static func write(value: SageMakerClientTypes.DeploymentStage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DeploymentConfig"].write(value.deploymentConfig, with: SageMakerClientTypes.EdgeDeploymentConfig.write(value:to:))
        try writer["DeviceSelectionConfig"].write(value.deviceSelectionConfig, with: SageMakerClientTypes.DeviceSelectionConfig.write(value:to:))
        try writer["StageName"].write(value.stageName)
    }
}

extension SageMakerClientTypes.ThroughputConfig {

    static func write(value: SageMakerClientTypes.ThroughputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProvisionedReadCapacityUnits"].write(value.provisionedReadCapacityUnits)
        try writer["ProvisionedWriteCapacityUnits"].write(value.provisionedWriteCapacityUnits)
        try writer["ThroughputMode"].write(value.throughputMode)
    }
}

extension SageMakerClientTypes.UiTemplate {

    static func write(value: SageMakerClientTypes.UiTemplate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Content"].write(value.content)
    }
}

extension SageMakerClientTypes.InferenceComponentSpecification {

    static func write(value: SageMakerClientTypes.InferenceComponentSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ComputeResourceRequirements"].write(value.computeResourceRequirements, with: SageMakerClientTypes.InferenceComponentComputeResourceRequirements.write(value:to:))
        try writer["Container"].write(value.container, with: SageMakerClientTypes.InferenceComponentContainerSpecification.write(value:to:))
        try writer["ModelName"].write(value.modelName)
        try writer["StartupParameters"].write(value.startupParameters, with: SageMakerClientTypes.InferenceComponentStartupParameters.write(value:to:))
    }
}

extension SageMakerClientTypes.InferenceComponentContainerSpecification {

    static func write(value: SageMakerClientTypes.InferenceComponentContainerSpecification?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ArtifactUrl"].write(value.artifactUrl)
        try writer["Environment"].writeMap(value.environment, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Image"].write(value.image)
    }
}

extension SageMakerClientTypes.InferenceComponentRuntimeConfig {

    static func write(value: SageMakerClientTypes.InferenceComponentRuntimeConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CopyCount"].write(value.copyCount)
    }
}

extension SageMakerClientTypes.ModelVariantConfig {

    static func write(value: SageMakerClientTypes.ModelVariantConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InfrastructureConfig"].write(value.infrastructureConfig, with: SageMakerClientTypes.ModelInfrastructureConfig.write(value:to:))
        try writer["ModelName"].write(value.modelName)
        try writer["VariantName"].write(value.variantName)
    }
}

extension SageMakerClientTypes.RecommendationJobOutputConfig {

    static func write(value: SageMakerClientTypes.RecommendationJobOutputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CompiledOutputConfig"].write(value.compiledOutputConfig, with: SageMakerClientTypes.RecommendationJobCompiledOutputConfig.write(value:to:))
        try writer["KmsKeyId"].write(value.kmsKeyId)
    }
}

extension SageMakerClientTypes.RecommendationJobCompiledOutputConfig {

    static func write(value: SageMakerClientTypes.RecommendationJobCompiledOutputConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3OutputUri"].write(value.s3OutputUri)
    }
}

extension SageMakerClientTypes.PipelineDefinitionS3Location {

    static func write(value: SageMakerClientTypes.PipelineDefinitionS3Location?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bucket"].write(value.bucket)
        try writer["ObjectKey"].write(value.objectKey)
        try writer["VersionId"].write(value.versionId)
    }
}

extension SageMakerClientTypes.SessionChainingConfig {

    static func write(value: SageMakerClientTypes.SessionChainingConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnableSessionTagChaining"].write(value.enableSessionTagChaining)
    }
}

extension SageMakerClientTypes.OidcConfig {

    static func write(value: SageMakerClientTypes.OidcConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AuthenticationRequestExtraParams"].writeMap(value.authenticationRequestExtraParams, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["AuthorizationEndpoint"].write(value.authorizationEndpoint)
        try writer["ClientId"].write(value.clientId)
        try writer["ClientSecret"].write(value.clientSecret)
        try writer["Issuer"].write(value.issuer)
        try writer["JwksUri"].write(value.jwksUri)
        try writer["LogoutEndpoint"].write(value.logoutEndpoint)
        try writer["Scope"].write(value.scope)
        try writer["TokenEndpoint"].write(value.tokenEndpoint)
        try writer["UserInfoEndpoint"].write(value.userInfoEndpoint)
    }
}

extension SageMakerClientTypes.WorkforceVpcConfigRequest {

    static func write(value: SageMakerClientTypes.WorkforceVpcConfigRequest?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Subnets"].writeList(value.subnets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VpcId"].write(value.vpcId)
    }
}

extension SageMakerClientTypes.RetentionPolicy {

    static func write(value: SageMakerClientTypes.RetentionPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["HomeEfsFileSystem"].write(value.homeEfsFileSystem)
    }
}

extension SageMakerClientTypes.SuggestionQuery {

    static func write(value: SageMakerClientTypes.SuggestionQuery?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PropertyNameQuery"].write(value.propertyNameQuery, with: SageMakerClientTypes.PropertyNameQuery.write(value:to:))
    }
}

extension SageMakerClientTypes.PropertyNameQuery {

    static func write(value: SageMakerClientTypes.PropertyNameQuery?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PropertyNameHint"].write(value.propertyNameHint)
    }
}

extension SageMakerClientTypes.ModelMetadataSearchExpression {

    static func write(value: SageMakerClientTypes.ModelMetadataSearchExpression?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: SageMakerClientTypes.ModelMetadataFilter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension SageMakerClientTypes.ModelMetadataFilter {

    static func write(value: SageMakerClientTypes.ModelMetadataFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Value"].write(value.value)
    }
}

extension SageMakerClientTypes.QueryFilters {

    static func write(value: SageMakerClientTypes.QueryFilters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreatedAfter"].writeTimestamp(value.createdAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreatedBefore"].writeTimestamp(value.createdBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["LineageTypes"].writeList(value.lineageTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<SageMakerClientTypes.LineageType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["ModifiedAfter"].writeTimestamp(value.modifiedAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["ModifiedBefore"].writeTimestamp(value.modifiedBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["Properties"].writeMap(value.properties, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["Types"].writeList(value.types, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension SageMakerClientTypes.Device {

    static func write(value: SageMakerClientTypes.Device?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Description"].write(value.description)
        try writer["DeviceName"].write(value.deviceName)
        try writer["IotThingName"].write(value.iotThingName)
    }
}

extension SageMakerClientTypes.RenderableTask {

    static func write(value: SageMakerClientTypes.RenderableTask?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Input"].write(value.input)
    }
}

extension SageMakerClientTypes.SearchExpression {

    static func write(value: SageMakerClientTypes.SearchExpression?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: SageMakerClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["NestedFilters"].writeList(value.nestedFilters, memberWritingClosure: SageMakerClientTypes.NestedFilters.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Operator"].write(value.`operator`)
        try writer["SubExpressions"].writeList(value.subExpressions, memberWritingClosure: SageMakerClientTypes.SearchExpression.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension SageMakerClientTypes.NestedFilters {

    static func write(value: SageMakerClientTypes.NestedFilters?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filters"].writeList(value.filters, memberWritingClosure: SageMakerClientTypes.Filter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["NestedPropertyName"].write(value.nestedPropertyName)
    }
}

extension SageMakerClientTypes.Filter {

    static func write(value: SageMakerClientTypes.Filter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Name"].write(value.name)
        try writer["Operator"].write(value.`operator`)
        try writer["Value"].write(value.value)
    }
}

extension SageMakerClientTypes.VisibilityConditions {

    static func write(value: SageMakerClientTypes.VisibilityConditions?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }
}

extension SageMakerClientTypes.GitConfigForUpdate {

    static func write(value: SageMakerClientTypes.GitConfigForUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecretArn"].write(value.secretArn)
    }
}

extension SageMakerClientTypes.DomainSettingsForUpdate {

    static func write(value: SageMakerClientTypes.DomainSettingsForUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AmazonQSettings"].write(value.amazonQSettings, with: SageMakerClientTypes.AmazonQSettings.write(value:to:))
        try writer["DockerSettings"].write(value.dockerSettings, with: SageMakerClientTypes.DockerSettings.write(value:to:))
        try writer["ExecutionRoleIdentityConfig"].write(value.executionRoleIdentityConfig)
        try writer["RStudioServerProDomainSettingsForUpdate"].write(value.rStudioServerProDomainSettingsForUpdate, with: SageMakerClientTypes.RStudioServerProDomainSettingsForUpdate.write(value:to:))
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension SageMakerClientTypes.RStudioServerProDomainSettingsForUpdate {

    static func write(value: SageMakerClientTypes.RStudioServerProDomainSettingsForUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DefaultResourceSpec"].write(value.defaultResourceSpec, with: SageMakerClientTypes.ResourceSpec.write(value:to:))
        try writer["DomainExecutionRoleArn"].write(value.domainExecutionRoleArn)
        try writer["RStudioConnectUrl"].write(value.rStudioConnectUrl)
        try writer["RStudioPackageManagerUrl"].write(value.rStudioPackageManagerUrl)
    }
}

extension SageMakerClientTypes.VariantProperty {

    static func write(value: SageMakerClientTypes.VariantProperty?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["VariantPropertyType"].write(value.variantPropertyType)
    }
}

extension SageMakerClientTypes.DesiredWeightAndCapacity {

    static func write(value: SageMakerClientTypes.DesiredWeightAndCapacity?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DesiredInstanceCount"].write(value.desiredInstanceCount)
        try writer["DesiredWeight"].write(value.desiredWeight)
        try writer["ServerlessUpdateConfig"].write(value.serverlessUpdateConfig, with: SageMakerClientTypes.ProductionVariantServerlessUpdateConfig.write(value:to:))
        try writer["VariantName"].write(value.variantName)
    }
}

extension SageMakerClientTypes.ProductionVariantServerlessUpdateConfig {

    static func write(value: SageMakerClientTypes.ProductionVariantServerlessUpdateConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxConcurrency"].write(value.maxConcurrency)
        try writer["ProvisionedConcurrency"].write(value.provisionedConcurrency)
    }
}

extension SageMakerClientTypes.OnlineStoreConfigUpdate {

    static func write(value: SageMakerClientTypes.OnlineStoreConfigUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TtlDuration"].write(value.ttlDuration, with: SageMakerClientTypes.TtlDuration.write(value:to:))
    }
}

extension SageMakerClientTypes.ThroughputConfigUpdate {

    static func write(value: SageMakerClientTypes.ThroughputConfigUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProvisionedReadCapacityUnits"].write(value.provisionedReadCapacityUnits)
        try writer["ProvisionedWriteCapacityUnits"].write(value.provisionedWriteCapacityUnits)
        try writer["ThroughputMode"].write(value.throughputMode)
    }
}

extension SageMakerClientTypes.ServiceCatalogProvisioningUpdateDetails {

    static func write(value: SageMakerClientTypes.ServiceCatalogProvisioningUpdateDetails?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ProvisioningArtifactId"].write(value.provisioningArtifactId)
        try writer["ProvisioningParameters"].writeList(value.provisioningParameters, memberWritingClosure: SageMakerClientTypes.ProvisioningParameter.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension SageMakerClientTypes.ProfilerConfigForUpdate {

    static func write(value: SageMakerClientTypes.ProfilerConfigForUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DisableProfiler"].write(value.disableProfiler)
        try writer["ProfilingIntervalInMilliseconds"].write(value.profilingIntervalInMilliseconds)
        try writer["ProfilingParameters"].writeMap(value.profilingParameters, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["S3OutputPath"].write(value.s3OutputPath)
    }
}

extension SageMakerClientTypes.ResourceConfigForUpdate {

    static func write(value: SageMakerClientTypes.ResourceConfigForUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KeepAlivePeriodInSeconds"].write(value.keepAlivePeriodInSeconds)
    }
}

extension SageMakerClientTypes.RemoteDebugConfigForUpdate {

    static func write(value: SageMakerClientTypes.RemoteDebugConfigForUpdate?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnableRemoteDebug"].write(value.enableRemoteDebug)
    }
}

public enum SageMakerClientTypes {}
