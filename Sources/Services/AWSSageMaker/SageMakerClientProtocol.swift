// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime

/// Provides APIs for creating and managing SageMaker resources. Other Resources:
///
/// * [SageMaker Developer Guide](https://docs.aws.amazon.com/sagemaker/latest/dg/whatis.html#first-time-user)
///
/// * [Amazon Augmented AI Runtime API Reference](https://docs.aws.amazon.com/augmented-ai/2019-11-07/APIReference/Welcome.html)
public protocol SageMakerClientProtocol {
    /// Creates an association between the source and the destination. A source can be associated with multiple destinations, and a destination can be associated with multiple sources. An association is a lineage tracking entity. For more information, see [Amazon SageMaker ML Lineage Tracking](https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html).
    func addAssociation(input: AddAssociationInput) async throws -> AddAssociationOutputResponse
    /// Adds or overwrites one or more tags for the specified SageMaker resource. You can add tags to notebook instances, training jobs, hyperparameter tuning jobs, batch transform jobs, models, labeling jobs, work teams, endpoint configurations, and endpoints. Each tag consists of a key and an optional value. Tag keys must be unique per resource. For more information about tags, see For more information, see [Amazon Web Services Tagging Strategies](https://aws.amazon.com/answers/account-management/aws-tagging-strategies/). Tags that you add to a hyperparameter tuning job by calling this API are also added to any training jobs that the hyperparameter tuning job launches after you call this API, but not to training jobs that the hyperparameter tuning job launched before you called this API. To make sure that the tags associated with a hyperparameter tuning job are also added to all training jobs that the hyperparameter tuning job launches, add the tags when you first create the tuning job by specifying them in the Tags parameter of [CreateHyperParameterTuningJob] Tags that you add to a SageMaker Studio Domain or User Profile by calling this API are also added to any Apps that the Domain or User Profile launches after you call this API, but not to Apps that the Domain or User Profile launched before you called this API. To make sure that the tags associated with a Domain or User Profile are also added to all Apps that the Domain or User Profile launches, add the tags when you first create the Domain or User Profile by specifying them in the Tags parameter of [CreateDomain] or [CreateUserProfile].
    func addTags(input: AddTagsInput) async throws -> AddTagsOutputResponse
    /// Associates a trial component with a trial. A trial component can be associated with multiple trials. To disassociate a trial component from a trial, call the [DisassociateTrialComponent] API.
    func associateTrialComponent(input: AssociateTrialComponentInput) async throws -> AssociateTrialComponentOutputResponse
    /// This action batch describes a list of versioned model packages
    func batchDescribeModelPackage(input: BatchDescribeModelPackageInput) async throws -> BatchDescribeModelPackageOutputResponse
    /// Creates an action. An action is a lineage tracking entity that represents an action or activity. For example, a model deployment or an HPO job. Generally, an action involves at least one input or output artifact. For more information, see [Amazon SageMaker ML Lineage Tracking](https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html).
    func createAction(input: CreateActionInput) async throws -> CreateActionOutputResponse
    /// Create a machine learning algorithm that you can use in SageMaker and list in the Amazon Web Services Marketplace.
    func createAlgorithm(input: CreateAlgorithmInput) async throws -> CreateAlgorithmOutputResponse
    /// Creates a running app for the specified UserProfile. This operation is automatically invoked by Amazon SageMaker Studio upon access to the associated Domain, and when new kernel configurations are selected by the user. A user may have multiple Apps active simultaneously.
    func createApp(input: CreateAppInput) async throws -> CreateAppOutputResponse
    /// Creates a configuration for running a SageMaker image as a KernelGateway app. The configuration specifies the Amazon Elastic File System (EFS) storage volume on the image, and a list of the kernels in the image.
    func createAppImageConfig(input: CreateAppImageConfigInput) async throws -> CreateAppImageConfigOutputResponse
    /// Creates an artifact. An artifact is a lineage tracking entity that represents a URI addressable object or data. Some examples are the S3 URI of a dataset and the ECR registry path of an image. For more information, see [Amazon SageMaker ML Lineage Tracking](https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html).
    func createArtifact(input: CreateArtifactInput) async throws -> CreateArtifactOutputResponse
    /// Creates an Autopilot job. Find the best-performing model after you run an Autopilot job by calling . For information about how to use Autopilot, see [Automate Model Development with Amazon SageMaker Autopilot](https://docs.aws.amazon.com/sagemaker/latest/dg/autopilot-automate-model-development.html).
    func createAutoMLJob(input: CreateAutoMLJobInput) async throws -> CreateAutoMLJobOutputResponse
    /// Creates a Git repository as a resource in your SageMaker account. You can associate the repository with notebook instances so that you can use Git source control for the notebooks you create. The Git repository is a resource in your SageMaker account, so it can be associated with more than one notebook instance, and it persists independently from the lifecycle of any notebook instances it is associated with. The repository can be hosted either in [Amazon Web Services CodeCommit](https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html) or in any other Git repository.
    func createCodeRepository(input: CreateCodeRepositoryInput) async throws -> CreateCodeRepositoryOutputResponse
    /// Starts a model compilation job. After the model has been compiled, Amazon SageMaker saves the resulting model artifacts to an Amazon Simple Storage Service (Amazon S3) bucket that you specify. If you choose to host your model using Amazon SageMaker hosting services, you can use the resulting model artifacts as part of the model. You can also use the artifacts with Amazon Web Services IoT Greengrass. In that case, deploy them as an ML resource. In the request body, you provide the following:
    ///
    /// * A name for the compilation job
    ///
    /// * Information about the input model artifacts
    ///
    /// * The output location for the compiled model and the device (target) that the model runs on
    ///
    /// * The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker assumes to perform the model compilation job.
    ///
    ///
    /// You can also provide a Tag to track the model compilation job's resource use and costs. The response body contains the CompilationJobArn for the compiled job. To stop a model compilation job, use [StopCompilationJob]. To get information about a particular model compilation job, use [DescribeCompilationJob]. To get information about multiple model compilation jobs, use [ListCompilationJobs].
    func createCompilationJob(input: CreateCompilationJobInput) async throws -> CreateCompilationJobOutputResponse
    /// Creates a context. A context is a lineage tracking entity that represents a logical grouping of other tracking or experiment entities. Some examples are an endpoint and a model package. For more information, see [Amazon SageMaker ML Lineage Tracking](https://docs.aws.amazon.com/sagemaker/latest/dg/lineage-tracking.html).
    func createContext(input: CreateContextInput) async throws -> CreateContextOutputResponse
    /// Creates a definition for a job that monitors data quality and drift. For information about model monitor, see [Amazon SageMaker Model Monitor](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html).
    func createDataQualityJobDefinition(input: CreateDataQualityJobDefinitionInput) async throws -> CreateDataQualityJobDefinitionOutputResponse
    /// Creates a device fleet.
    func createDeviceFleet(input: CreateDeviceFleetInput) async throws -> CreateDeviceFleetOutputResponse
    /// Creates a Domain used by Amazon SageMaker Studio. A domain consists of an associated Amazon Elastic File System (EFS) volume, a list of authorized users, and a variety of security, application, policy, and Amazon Virtual Private Cloud (VPC) configurations. Users within a domain can share notebook files and other artifacts with each other. EFS storage When a domain is created, an EFS volume is created for use by all of the users within the domain. Each user receives a private home directory within the EFS volume for notebooks, Git repositories, and data files. SageMaker uses the Amazon Web Services Key Management Service (Amazon Web Services KMS) to encrypt the EFS volume attached to the domain with an Amazon Web Services managed key by default. For more control, you can specify a customer managed key. For more information, see [Protect Data at Rest Using Encryption](https://docs.aws.amazon.com/sagemaker/latest/dg/encryption-at-rest.html). VPC configuration All SageMaker Studio traffic between the domain and the EFS volume is through the specified VPC and subnets. For other Studio traffic, you can specify the AppNetworkAccessType parameter. AppNetworkAccessType corresponds to the network access type that you choose when you onboard to Studio. The following options are available:
    ///
    /// * PublicInternetOnly - Non-EFS traffic goes through a VPC managed by Amazon SageMaker, which allows internet access. This is the default value.
    ///
    /// * VpcOnly - All Studio traffic is through the specified VPC and subnets. Internet access is disabled by default. To allow internet access, you must specify a NAT gateway. When internet access is disabled, you won't be able to run a Studio notebook or to train or host models unless your VPC has an interface endpoint to the SageMaker API and runtime or a NAT gateway and your security groups allow outbound connections.
    ///
    ///
    /// NFS traffic over TCP on port 2049 needs to be allowed in both inbound and outbound rules in order to launch a SageMaker Studio app successfully. For more information, see [Connect SageMaker Studio Notebooks to Resources in a VPC](https://docs.aws.amazon.com/sagemaker/latest/dg/studio-notebooks-and-internet-access.html).
    func createDomain(input: CreateDomainInput) async throws -> CreateDomainOutputResponse
    /// Creates an edge deployment plan, consisting of multiple stages. Each stage may have a different deployment configuration and devices.
    func createEdgeDeploymentPlan(input: CreateEdgeDeploymentPlanInput) async throws -> CreateEdgeDeploymentPlanOutputResponse
    /// Creates a new stage in an existing edge deployment plan.
    func createEdgeDeploymentStage(input: CreateEdgeDeploymentStageInput) async throws -> CreateEdgeDeploymentStageOutputResponse
    /// Starts a SageMaker Edge Manager model packaging job. Edge Manager will use the model artifacts from the Amazon Simple Storage Service bucket that you specify. After the model has been packaged, Amazon SageMaker saves the resulting artifacts to an S3 bucket that you specify.
    func createEdgePackagingJob(input: CreateEdgePackagingJobInput) async throws -> CreateEdgePackagingJobOutputResponse
    /// Creates an endpoint using the endpoint configuration specified in the request. SageMaker uses the endpoint to provision resources and deploy models. You create the endpoint configuration with the [CreateEndpointConfig] API. Use this API to deploy models using SageMaker hosting services. For an example that calls this method when deploying a model to SageMaker hosting services, see the [Create Endpoint example notebook.](https://github.com/aws/amazon-sagemaker-examples/blob/master/sagemaker-fundamentals/create-endpoint/create_endpoint.ipynb) You must not delete an EndpointConfig that is in use by an endpoint that is live or while the UpdateEndpoint or CreateEndpoint operations are being performed on the endpoint. To update an endpoint, you must create a new EndpointConfig. The endpoint name must be unique within an Amazon Web Services Region in your Amazon Web Services account. When it receives the request, SageMaker creates the endpoint, launches the resources (ML compute instances), and deploys the model(s) on them. When you call [CreateEndpoint], a load call is made to DynamoDB to verify that your endpoint configuration exists. When you read data from a DynamoDB table supporting [Eventually Consistent Reads](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html), the response might not reflect the results of a recently completed write operation. The response might include some stale data. If the dependent entities are not yet in DynamoDB, this causes a validation error. If you repeat your read request after a short time, the response should return the latest data. So retry logic is recommended to handle these possible issues. We also recommend that customers call [DescribeEndpointConfig] before calling [CreateEndpoint] to minimize the potential impact of a DynamoDB eventually consistent read. When SageMaker receives the request, it sets the endpoint status to Creating. After it creates the endpoint, it sets the status to InService. SageMaker can then process incoming requests for inferences. To check the status of an endpoint, use the [DescribeEndpoint] API. If any of the models hosted at this endpoint get model data from an Amazon S3 location, SageMaker uses Amazon Web Services Security Token Service to download model artifacts from the S3 path you provided. Amazon Web Services STS is activated in your Amazon Web Services account by default. If you previously deactivated Amazon Web Services STS for a region, you need to reactivate Amazon Web Services STS for that region. For more information, see [Activating and Deactivating Amazon Web Services STS in an Amazon Web Services Region](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp_enable-regions.html) in the Amazon Web Services Identity and Access Management User Guide. To add the IAM role policies for using this API operation, go to the [IAM console](https://console.aws.amazon.com/iam/), and choose Roles in the left navigation pane. Search the IAM role that you want to grant access to use the [CreateEndpoint] and [CreateEndpointConfig] API operations, add the following policies to the role.
    ///
    /// * Option 1: For a full SageMaker access, search and attach the AmazonSageMakerFullAccess policy.
    ///
    /// * Option 2: For granting a limited access to an IAM role, paste the following Action elements manually into the JSON file of the IAM role: "Action": ["sagemaker:CreateEndpoint", "sagemaker:CreateEndpointConfig"]"Resource": ["arn:aws:sagemaker:region:account-id:endpoint/endpointName""arn:aws:sagemaker:region:account-id:endpoint-config/endpointConfigName"] For more information, see [SageMaker API Permissions: Actions, Permissions, and Resources Reference](https://docs.aws.amazon.com/sagemaker/latest/dg/api-permissions-reference.html).
    func createEndpoint(input: CreateEndpointInput) async throws -> CreateEndpointOutputResponse
    /// Creates an endpoint configuration that SageMaker hosting services uses to deploy models. In the configuration, you identify one or more models, created using the CreateModel API, to deploy and the resources that you want SageMaker to provision. Then you call the [CreateEndpoint] API. Use this API if you want to use SageMaker hosting services to deploy models into production. In the request, you define a ProductionVariant, for each model that you want to deploy. Each ProductionVariant parameter also describes the resources that you want SageMaker to provision. This includes the number and type of ML compute instances to deploy. If you are hosting multiple models, you also assign a VariantWeight to specify how much traffic you want to allocate to each model. For example, suppose that you want to host two models, A and B, and you assign traffic weight 2 for model A and 1 for model B. SageMaker distributes two-thirds of the traffic to Model A, and one-third to model B. When you call [CreateEndpoint], a load call is made to DynamoDB to verify that your endpoint configuration exists. When you read data from a DynamoDB table supporting [Eventually Consistent Reads](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.ReadConsistency.html), the response might not reflect the results of a recently completed write operation. The response might include some stale data. If the dependent entities are not yet in DynamoDB, this causes a validation error. If you repeat your read request after a short time, the response should return the latest data. So retry logic is recommended to handle these possible issues. We also recommend that customers call [DescribeEndpointConfig] before calling [CreateEndpoint] to minimize the potential impact of a DynamoDB eventually consistent read.
    func createEndpointConfig(input: CreateEndpointConfigInput) async throws -> CreateEndpointConfigOutputResponse
    /// Creates a SageMaker experiment. An experiment is a collection of trials that are observed, compared and evaluated as a group. A trial is a set of steps, called trial components, that produce a machine learning model. In the Studio UI, trials are referred to as run groups and trial components are referred to as runs. The goal of an experiment is to determine the components that produce the best model. Multiple trials are performed, each one isolating and measuring the impact of a change to one or more inputs, while keeping the remaining inputs constant. When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK. You can add tags to experiments, trials, trial components and then use the [Search] API to search for the tags. To add a description to an experiment, specify the optional Description parameter. To add a description later, or to change the description, call the [UpdateExperiment] API. To get a list of all your experiments, call the [ListExperiments] API. To view an experiment's properties, call the [DescribeExperiment] API. To get a list of all the trials associated with an experiment, call the [ListTrials] API. To create a trial call the [CreateTrial] API.
    func createExperiment(input: CreateExperimentInput) async throws -> CreateExperimentOutputResponse
    /// Create a new FeatureGroup. A FeatureGroup is a group of Features defined in the FeatureStore to describe a Record. The FeatureGroup defines the schema and features contained in the FeatureGroup. A FeatureGroup definition is composed of a list of Features, a RecordIdentifierFeatureName, an EventTimeFeatureName and configurations for its OnlineStore and OfflineStore. Check [Amazon Web Services service quotas](https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html) to see the FeatureGroups quota for your Amazon Web Services account. You must include at least one of OnlineStoreConfig and OfflineStoreConfig to create a FeatureGroup.
    func createFeatureGroup(input: CreateFeatureGroupInput) async throws -> CreateFeatureGroupOutputResponse
    /// Creates a flow definition.
    func createFlowDefinition(input: CreateFlowDefinitionInput) async throws -> CreateFlowDefinitionOutputResponse
    /// Create a hub. Hub APIs are only callable through SageMaker Studio.
    func createHub(input: CreateHubInput) async throws -> CreateHubOutputResponse
    /// Defines the settings you will use for the human review workflow user interface. Reviewers will see a three-panel interface with an instruction area, the item to review, and an input area.
    func createHumanTaskUi(input: CreateHumanTaskUiInput) async throws -> CreateHumanTaskUiOutputResponse
    /// Starts a hyperparameter tuning job. A hyperparameter tuning job finds the best version of a model by running many training jobs on your dataset using the algorithm you choose and values for hyperparameters within ranges that you specify. It then chooses the hyperparameter values that result in a model that performs the best, as measured by an objective metric that you choose. A hyperparameter tuning job automatically creates Amazon SageMaker experiments, trials, and trial components for each training job that it runs. You can view these entities in Amazon SageMaker Studio. For more information, see [View Experiments, Trials, and Trial Components](https://docs.aws.amazon.com/sagemaker/latest/dg/experiments-view-compare.html#experiments-view). Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.
    func createHyperParameterTuningJob(input: CreateHyperParameterTuningJobInput) async throws -> CreateHyperParameterTuningJobOutputResponse
    /// Creates a custom SageMaker image. A SageMaker image is a set of image versions. Each image version represents a container image stored in Amazon Elastic Container Registry (ECR). For more information, see [Bring your own SageMaker image](https://docs.aws.amazon.com/sagemaker/latest/dg/studio-byoi.html).
    func createImage(input: CreateImageInput) async throws -> CreateImageOutputResponse
    /// Creates a version of the SageMaker image specified by ImageName. The version represents the Amazon Elastic Container Registry (ECR) container image specified by BaseImage.
    func createImageVersion(input: CreateImageVersionInput) async throws -> CreateImageVersionOutputResponse
    /// Creates an inference experiment using the configurations specified in the request. Use this API to setup and schedule an experiment to compare model variants on a Amazon SageMaker inference endpoint. For more information about inference experiments, see [Shadow tests](https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests.html). Amazon SageMaker begins your experiment at the scheduled time and routes traffic to your endpoint's model variants based on your specified configuration. While the experiment is in progress or after it has concluded, you can view metrics that compare your model variants. For more information, see [View, monitor, and edit shadow tests](https://docs.aws.amazon.com/sagemaker/latest/dg/shadow-tests-view-monitor-edit.html).
    func createInferenceExperiment(input: CreateInferenceExperimentInput) async throws -> CreateInferenceExperimentOutputResponse
    /// Starts a recommendation job. You can create either an instance recommendation or load test job.
    func createInferenceRecommendationsJob(input: CreateInferenceRecommendationsJobInput) async throws -> CreateInferenceRecommendationsJobOutputResponse
    /// Creates a job that uses workers to label the data objects in your input dataset. You can use the labeled data to train machine learning models. You can select your workforce from one of three providers:
    ///
    /// * A private workforce that you create. It can include employees, contractors, and outside experts. Use a private workforce when want the data to stay within your organization or when a specific set of skills is required.
    ///
    /// * One or more vendors that you select from the Amazon Web Services Marketplace. Vendors provide expertise in specific areas.
    ///
    /// * The Amazon Mechanical Turk workforce. This is the largest workforce, but it should only be used for public data or data that has been stripped of any personally identifiable information.
    ///
    ///
    /// You can also use automated data labeling to reduce the number of data objects that need to be labeled by a human. Automated data labeling uses active learning to determine if a data object can be labeled by machine or if it needs to be sent to a human worker. For more information, see [Using Automated Data Labeling](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-automated-labeling.html). The data objects to be labeled are contained in an Amazon S3 bucket. You create a manifest file that describes the location of each object. For more information, see [Using Input and Output Data](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-data.html). The output can be used as the manifest file for another labeling job or as training data for your machine learning models. You can use this operation to create a static labeling job or a streaming labeling job. A static labeling job stops if all data objects in the input manifest file identified in ManifestS3Uri have been labeled. A streaming labeling job runs perpetually until it is manually stopped, or remains idle for 10 days. You can send new data objects to an active (InProgress) streaming labeling job in real time. To learn how to create a static labeling job, see [Create a Labeling Job (API) ](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-create-labeling-job-api.html) in the Amazon SageMaker Developer Guide. To learn how to create a streaming labeling job, see [Create a Streaming Labeling Job](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-streaming-create-job.html).
    func createLabelingJob(input: CreateLabelingJobInput) async throws -> CreateLabelingJobOutputResponse
    /// Creates a model in SageMaker. In the request, you name the model and describe a primary container. For the primary container, you specify the Docker image that contains inference code, artifacts (from prior training), and a custom environment map that the inference code uses when you deploy the model for predictions. Use this API to create a model if you want to use SageMaker hosting services or run a batch transform job. To host your model, you create an endpoint configuration with the CreateEndpointConfig API, and then create an endpoint with the CreateEndpoint API. SageMaker then deploys all of the containers that you defined for the model in the hosting environment. For an example that calls this method when deploying a model to SageMaker hosting services, see [Create a Model (Amazon Web Services SDK for Python (Boto 3)).](https://docs.aws.amazon.com/sagemaker/latest/dg/realtime-endpoints-deployment.html#realtime-endpoints-deployment-create-model) To run a batch transform using your model, you start a job with the CreateTransformJob API. SageMaker uses your model and your dataset to get inferences which are then saved to a specified S3 location. In the request, you also provide an IAM role that SageMaker can assume to access model artifacts and docker image for deployment on ML compute hosting instances or for batch transform jobs. In addition, you also use the IAM role to manage permissions the inference code needs. For example, if the inference code access any other Amazon Web Services resources, you grant necessary permissions via this role.
    func createModel(input: CreateModelInput) async throws -> CreateModelOutputResponse
    /// Creates the definition for a model bias job.
    func createModelBiasJobDefinition(input: CreateModelBiasJobDefinitionInput) async throws -> CreateModelBiasJobDefinitionOutputResponse
    /// Creates an Amazon SageMaker Model Card. For information about how to use model cards, see [Amazon SageMaker Model Card](https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards.html).
    func createModelCard(input: CreateModelCardInput) async throws -> CreateModelCardOutputResponse
    /// Creates an Amazon SageMaker Model Card export job.
    func createModelCardExportJob(input: CreateModelCardExportJobInput) async throws -> CreateModelCardExportJobOutputResponse
    /// Creates the definition for a model explainability job.
    func createModelExplainabilityJobDefinition(input: CreateModelExplainabilityJobDefinitionInput) async throws -> CreateModelExplainabilityJobDefinitionOutputResponse
    /// Creates a model package that you can use to create SageMaker models or list on Amazon Web Services Marketplace, or a versioned model that is part of a model group. Buyers can subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker. To create a model package by specifying a Docker container that contains your inference code and the Amazon S3 location of your model artifacts, provide values for InferenceSpecification. To create a model from an algorithm resource that you created or subscribed to in Amazon Web Services Marketplace, provide a value for SourceAlgorithmSpecification. There are two types of model packages:
    ///
    /// * Versioned - a model that is part of a model group in the model registry.
    ///
    /// * Unversioned - a model package that is not part of a model group.
    func createModelPackage(input: CreateModelPackageInput) async throws -> CreateModelPackageOutputResponse
    /// Creates a model group. A model group contains a group of model versions.
    func createModelPackageGroup(input: CreateModelPackageGroupInput) async throws -> CreateModelPackageGroupOutputResponse
    /// Creates a definition for a job that monitors model quality and drift. For information about model monitor, see [Amazon SageMaker Model Monitor](https://docs.aws.amazon.com/sagemaker/latest/dg/model-monitor.html).
    func createModelQualityJobDefinition(input: CreateModelQualityJobDefinitionInput) async throws -> CreateModelQualityJobDefinitionOutputResponse
    /// Creates a schedule that regularly starts Amazon SageMaker Processing Jobs to monitor the data captured for an Amazon SageMaker Endoint.
    func createMonitoringSchedule(input: CreateMonitoringScheduleInput) async throws -> CreateMonitoringScheduleOutputResponse
    /// Creates an SageMaker notebook instance. A notebook instance is a machine learning (ML) compute instance running on a Jupyter notebook. In a CreateNotebookInstance request, specify the type of ML compute instance that you want to run. SageMaker launches the instance, installs common libraries that you can use to explore datasets for model training, and attaches an ML storage volume to the notebook instance. SageMaker also provides a set of example notebooks. Each notebook demonstrates how to use SageMaker with a specific algorithm or with a machine learning framework. After receiving the request, SageMaker does the following:
    ///
    /// * Creates a network interface in the SageMaker VPC.
    ///
    /// * (Option) If you specified SubnetId, SageMaker creates a network interface in your own VPC, which is inferred from the subnet ID that you provide in the input. When creating this network interface, SageMaker attaches the security group that you specified in the request to the network interface that it creates in your VPC.
    ///
    /// * Launches an EC2 instance of the type specified in the request in the SageMaker VPC. If you specified SubnetId of your VPC, SageMaker specifies both network interfaces when launching this instance. This enables inbound traffic from your own VPC to the notebook instance, assuming that the security groups allow it.
    ///
    ///
    /// After creating the notebook instance, SageMaker returns its Amazon Resource Name (ARN). You can't change the name of a notebook instance after you create it. After SageMaker creates the notebook instance, you can connect to the Jupyter server and work in Jupyter notebooks. For example, you can write code to explore a dataset that you can use for model training, train a model, host models by creating SageMaker endpoints, and validate hosted models. For more information, see [How It Works](https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html).
    func createNotebookInstance(input: CreateNotebookInstanceInput) async throws -> CreateNotebookInstanceOutputResponse
    /// Creates a lifecycle configuration that you can associate with a notebook instance. A lifecycle configuration is a collection of shell scripts that run when you create or start a notebook instance. Each lifecycle configuration script has a limit of 16384 characters. The value of the $PATH environment variable that is available to both scripts is /sbin:bin:/usr/sbin:/usr/bin. View CloudWatch Logs for notebook instance lifecycle configurations in log group /aws/sagemaker/NotebookInstances in log stream [notebook-instance-name]/[LifecycleConfigHook]. Lifecycle configuration scripts cannot run for longer than 5 minutes. If a script runs for longer than 5 minutes, it fails and the notebook instance is not created or started. For information about notebook instance lifestyle configurations, see [Step 2.1: (Optional) Customize a Notebook Instance](https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html).
    func createNotebookInstanceLifecycleConfig(input: CreateNotebookInstanceLifecycleConfigInput) async throws -> CreateNotebookInstanceLifecycleConfigOutputResponse
    /// Creates a pipeline using a JSON pipeline definition.
    func createPipeline(input: CreatePipelineInput) async throws -> CreatePipelineOutputResponse
    /// Creates a URL for a specified UserProfile in a Domain. When accessed in a web browser, the user will be automatically signed in to Amazon SageMaker Studio, and granted access to all of the Apps and files associated with the Domain's Amazon Elastic File System (EFS) volume. This operation can only be called when the authentication mode equals IAM. The IAM role or user passed to this API defines the permissions to access the app. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the app. You can restrict access to this API and to the URL that it returns to a list of IP addresses, Amazon VPCs or Amazon VPC Endpoints that you specify. For more information, see [Connect to SageMaker Studio Through an Interface VPC Endpoint](https://docs.aws.amazon.com/sagemaker/latest/dg/studio-interface-endpoint.html) . The URL that you get from a call to CreatePresignedDomainUrl has a default timeout of 5 minutes. You can configure this value using ExpiresInSeconds. If you try to use the URL after the timeout limit expires, you are directed to the Amazon Web Services console sign-in page.
    func createPresignedDomainUrl(input: CreatePresignedDomainUrlInput) async throws -> CreatePresignedDomainUrlOutputResponse
    /// Returns a URL that you can use to connect to the Jupyter server from a notebook instance. In the SageMaker console, when you choose Open next to a notebook instance, SageMaker opens a new tab showing the Jupyter server home page from the notebook instance. The console uses this API to get the URL and show the page. The IAM role or user used to call this API defines the permissions to access the notebook instance. Once the presigned URL is created, no additional permission is required to access this URL. IAM authorization policies for this API are also enforced for every HTTP request and WebSocket frame that attempts to connect to the notebook instance. You can restrict access to this API and to the URL that it returns to a list of IP addresses that you specify. Use the NotIpAddress condition operator and the aws:SourceIP condition context key to specify the list of IP addresses that you want to have access to the notebook instance. For more information, see [Limit Access to a Notebook Instance by IP Address](https://docs.aws.amazon.com/sagemaker/latest/dg/security_iam_id-based-policy-examples.html#nbi-ip-filter). The URL that you get from a call to [CreatePresignedNotebookInstanceUrl] is valid only for 5 minutes. If you try to use the URL after the 5-minute limit expires, you are directed to the Amazon Web Services console sign-in page.
    func createPresignedNotebookInstanceUrl(input: CreatePresignedNotebookInstanceUrlInput) async throws -> CreatePresignedNotebookInstanceUrlOutputResponse
    /// Creates a processing job.
    func createProcessingJob(input: CreateProcessingJobInput) async throws -> CreateProcessingJobOutputResponse
    /// Creates a machine learning (ML) project that can contain one or more templates that set up an ML pipeline from training to deploying an approved model.
    func createProject(input: CreateProjectInput) async throws -> CreateProjectOutputResponse
    /// Creates a space used for real time collaboration in a Domain.
    func createSpace(input: CreateSpaceInput) async throws -> CreateSpaceOutputResponse
    /// Creates a new Studio Lifecycle Configuration.
    func createStudioLifecycleConfig(input: CreateStudioLifecycleConfigInput) async throws -> CreateStudioLifecycleConfigOutputResponse
    /// Starts a model training job. After training completes, SageMaker saves the resulting model artifacts to an Amazon S3 location that you specify. If you choose to host your model using SageMaker hosting services, you can use the resulting model artifacts as part of the model. You can also use the artifacts in a machine learning service other than SageMaker, provided that you know how to use them for inference. In the request body, you provide the following:
    ///
    /// * AlgorithmSpecification - Identifies the training algorithm to use.
    ///
    /// * HyperParameters - Specify these algorithm-specific parameters to enable the estimation of model parameters during training. Hyperparameters can be tuned to optimize this learning process. For a list of hyperparameters for each training algorithm provided by SageMaker, see [Algorithms](https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). Do not include any security-sensitive information including account access IDs, secrets or tokens in any hyperparameter field. If the use of security-sensitive credentials are detected, SageMaker will reject your training job request and return an exception error.
    ///
    /// * InputDataConfig - Describes the input required by the training job and the Amazon S3, EFS, or FSx location where it is stored.
    ///
    /// * OutputDataConfig - Identifies the Amazon S3 bucket where you want SageMaker to save the results of model training.
    ///
    /// * ResourceConfig - Identifies the resources, ML compute instances, and ML storage volumes to deploy for model training. In distributed training, you specify more than one instance.
    ///
    /// * EnableManagedSpotTraining - Optimize the cost of training machine learning models by up to 80% by using Amazon EC2 Spot instances. For more information, see [Managed Spot Training](https://docs.aws.amazon.com/sagemaker/latest/dg/model-managed-spot-training.html).
    ///
    /// * RoleArn - The Amazon Resource Name (ARN) that SageMaker assumes to perform tasks on your behalf during model training. You must grant this role the necessary permissions so that SageMaker can successfully complete model training.
    ///
    /// * StoppingCondition - To help cap training costs, use MaxRuntimeInSeconds to set a time limit for training. Use MaxWaitTimeInSeconds to specify how long a managed spot training job has to complete.
    ///
    /// * Environment - The environment variables to set in the Docker container.
    ///
    /// * RetryStrategy - The number of times to retry the job when the job fails due to an InternalServerError.
    ///
    ///
    /// For more information about SageMaker, see [How It Works](https://docs.aws.amazon.com/sagemaker/latest/dg/how-it-works.html).
    func createTrainingJob(input: CreateTrainingJobInput) async throws -> CreateTrainingJobOutputResponse
    /// Starts a transform job. A transform job uses a trained model to get inferences on a dataset and saves these results to an Amazon S3 location that you specify. To perform batch transformations, you create a transform job and use the data that you have readily available. In the request body, you provide the following:
    ///
    /// * TransformJobName - Identifies the transform job. The name must be unique within an Amazon Web Services Region in an Amazon Web Services account.
    ///
    /// * ModelName - Identifies the model to use. ModelName must be the name of an existing Amazon SageMaker model in the same Amazon Web Services Region and Amazon Web Services account. For information on creating a model, see [CreateModel](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html).
    ///
    /// * TransformInput - Describes the dataset to be transformed and the Amazon S3 location where it is stored.
    ///
    /// * TransformOutput - Identifies the Amazon S3 location where you want Amazon SageMaker to save the results from the transform job.
    ///
    /// * TransformResources - Identifies the ML compute instances for the transform job.
    ///
    ///
    /// For more information about how batch transformation works, see [Batch Transform](https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform.html).
    func createTransformJob(input: CreateTransformJobInput) async throws -> CreateTransformJobOutputResponse
    /// Creates an SageMaker trial. A trial is a set of steps called trial components that produce a machine learning model. A trial is part of a single SageMaker experiment. When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK. You can add tags to a trial and then use the [Search] API to search for the tags. To get a list of all your trials, call the [ListTrials] API. To view a trial's properties, call the [DescribeTrial] API. To create a trial component, call the [CreateTrialComponent] API.
    func createTrial(input: CreateTrialInput) async throws -> CreateTrialOutputResponse
    /// Creates a trial component, which is a stage of a machine learning trial. A trial is composed of one or more trial components. A trial component can be used in multiple trials. Trial components include pre-processing jobs, training jobs, and batch transform jobs. When you use SageMaker Studio or the SageMaker Python SDK, all experiments, trials, and trial components are automatically tracked, logged, and indexed. When you use the Amazon Web Services SDK for Python (Boto), you must use the logging APIs provided by the SDK. You can add tags to a trial component and then use the [Search] API to search for the tags.
    func createTrialComponent(input: CreateTrialComponentInput) async throws -> CreateTrialComponentOutputResponse
    /// Creates a user profile. A user profile represents a single user within a domain, and is the main way to reference a "person" for the purposes of sharing, reporting, and other user-oriented features. This entity is created when a user onboards to Amazon SageMaker Studio. If an administrator invites a person by email or imports them from IAM Identity Center, a user profile is automatically created. A user profile is the primary holder of settings for an individual user and has a reference to the user's private Amazon Elastic File System (EFS) home directory.
    func createUserProfile(input: CreateUserProfileInput) async throws -> CreateUserProfileOutputResponse
    /// Use this operation to create a workforce. This operation will return an error if a workforce already exists in the Amazon Web Services Region that you specify. You can only create one workforce in each Amazon Web Services Region per Amazon Web Services account. If you want to create a new workforce in an Amazon Web Services Region where a workforce already exists, use the API operation to delete the existing workforce and then use CreateWorkforce to create a new workforce. To create a private workforce using Amazon Cognito, you must specify a Cognito user pool in CognitoConfig. You can also create an Amazon Cognito workforce using the Amazon SageMaker console. For more information, see [ Create a Private Workforce (Amazon Cognito)](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private.html). To create a private workforce using your own OIDC Identity Provider (IdP), specify your IdP configuration in OidcConfig. Your OIDC IdP must support groups because groups are used by Ground Truth and Amazon A2I to create work teams. For more information, see [ Create a Private Workforce (OIDC IdP)](https://docs.aws.amazon.com/sagemaker/latest/dg/sms-workforce-create-private-oidc.html).
    func createWorkforce(input: CreateWorkforceInput) async throws -> CreateWorkforceOutputResponse
    /// Creates a new work team for labeling your data. A work team is defined by one or more Amazon Cognito user pools. You must first create the user pools before you can create a work team. You cannot create more than 25 work teams in an account and region.
    func createWorkteam(input: CreateWorkteamInput) async throws -> CreateWorkteamOutputResponse
    /// Deletes an action.
    func deleteAction(input: DeleteActionInput) async throws -> DeleteActionOutputResponse
    /// Removes the specified algorithm from your account.
    func deleteAlgorithm(input: DeleteAlgorithmInput) async throws -> DeleteAlgorithmOutputResponse
    /// Used to stop and delete an app.
    func deleteApp(input: DeleteAppInput) async throws -> DeleteAppOutputResponse
    /// Deletes an AppImageConfig.
    func deleteAppImageConfig(input: DeleteAppImageConfigInput) async throws -> DeleteAppImageConfigOutputResponse
    /// Deletes an artifact. Either ArtifactArn or Source must be specified.
    func deleteArtifact(input: DeleteArtifactInput) async throws -> DeleteArtifactOutputResponse
    /// Deletes an association.
    func deleteAssociation(input: DeleteAssociationInput) async throws -> DeleteAssociationOutputResponse
    /// Deletes the specified Git repository from your account.
    func deleteCodeRepository(input: DeleteCodeRepositoryInput) async throws -> DeleteCodeRepositoryOutputResponse
    /// Deletes an context.
    func deleteContext(input: DeleteContextInput) async throws -> DeleteContextOutputResponse
    /// Deletes a data quality monitoring job definition.
    func deleteDataQualityJobDefinition(input: DeleteDataQualityJobDefinitionInput) async throws -> DeleteDataQualityJobDefinitionOutputResponse
    /// Deletes a fleet.
    func deleteDeviceFleet(input: DeleteDeviceFleetInput) async throws -> DeleteDeviceFleetOutputResponse
    /// Used to delete a domain. If you onboarded with IAM mode, you will need to delete your domain to onboard again using IAM Identity Center. Use with caution. All of the members of the domain will lose access to their EFS volume, including data, notebooks, and other artifacts.
    func deleteDomain(input: DeleteDomainInput) async throws -> DeleteDomainOutputResponse
    /// Deletes an edge deployment plan if (and only if) all the stages in the plan are inactive or there are no stages in the plan.
    func deleteEdgeDeploymentPlan(input: DeleteEdgeDeploymentPlanInput) async throws -> DeleteEdgeDeploymentPlanOutputResponse
    /// Delete a stage in an edge deployment plan if (and only if) the stage is inactive.
    func deleteEdgeDeploymentStage(input: DeleteEdgeDeploymentStageInput) async throws -> DeleteEdgeDeploymentStageOutputResponse
    /// Deletes an endpoint. SageMaker frees up all of the resources that were deployed when the endpoint was created. SageMaker retires any custom KMS key grants associated with the endpoint, meaning you don't need to use the [RevokeGrant](http://docs.aws.amazon.com/kms/latest/APIReference/API_RevokeGrant.html) API call. When you delete your endpoint, SageMaker asynchronously deletes associated endpoint resources such as KMS key grants. You might still see these resources in your account for a few minutes after deleting your endpoint. Do not delete or revoke the permissions for your [ExecutionRoleArn](https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_CreateModel.html#sagemaker-CreateModel-request-ExecutionRoleArn), otherwise SageMaker cannot delete these resources.
    func deleteEndpoint(input: DeleteEndpointInput) async throws -> DeleteEndpointOutputResponse
    /// Deletes an endpoint configuration. The DeleteEndpointConfig API deletes only the specified configuration. It does not delete endpoints created using the configuration. You must not delete an EndpointConfig in use by an endpoint that is live or while the UpdateEndpoint or CreateEndpoint operations are being performed on the endpoint. If you delete the EndpointConfig of an endpoint that is active or being created or updated you may lose visibility into the instance type the endpoint is using. The endpoint must be deleted in order to stop incurring charges.
    func deleteEndpointConfig(input: DeleteEndpointConfigInput) async throws -> DeleteEndpointConfigOutputResponse
    /// Deletes an SageMaker experiment. All trials associated with the experiment must be deleted first. Use the [ListTrials] API to get a list of the trials associated with the experiment.
    func deleteExperiment(input: DeleteExperimentInput) async throws -> DeleteExperimentOutputResponse
    /// Delete the FeatureGroup and any data that was written to the OnlineStore of the FeatureGroup. Data cannot be accessed from the OnlineStore immediately after DeleteFeatureGroup is called. Data written into the OfflineStore will not be deleted. The Amazon Web Services Glue database and tables that are automatically created for your OfflineStore are not deleted.
    func deleteFeatureGroup(input: DeleteFeatureGroupInput) async throws -> DeleteFeatureGroupOutputResponse
    /// Deletes the specified flow definition.
    func deleteFlowDefinition(input: DeleteFlowDefinitionInput) async throws -> DeleteFlowDefinitionOutputResponse
    /// Delete a hub. Hub APIs are only callable through SageMaker Studio.
    func deleteHub(input: DeleteHubInput) async throws -> DeleteHubOutputResponse
    /// Delete the contents of a hub. Hub APIs are only callable through SageMaker Studio.
    func deleteHubContent(input: DeleteHubContentInput) async throws -> DeleteHubContentOutputResponse
    /// Use this operation to delete a human task user interface (worker task template). To see a list of human task user interfaces (work task templates) in your account, use . When you delete a worker task template, it no longer appears when you call ListHumanTaskUis.
    func deleteHumanTaskUi(input: DeleteHumanTaskUiInput) async throws -> DeleteHumanTaskUiOutputResponse
    /// Deletes a SageMaker image and all versions of the image. The container images aren't deleted.
    func deleteImage(input: DeleteImageInput) async throws -> DeleteImageOutputResponse
    /// Deletes a version of a SageMaker image. The container image the version represents isn't deleted.
    func deleteImageVersion(input: DeleteImageVersionInput) async throws -> DeleteImageVersionOutputResponse
    /// Deletes an inference experiment. This operation does not delete your endpoint, variants, or any underlying resources. This operation only deletes the metadata of your experiment.
    func deleteInferenceExperiment(input: DeleteInferenceExperimentInput) async throws -> DeleteInferenceExperimentOutputResponse
    /// Deletes a model. The DeleteModel API deletes only the model entry that was created in SageMaker when you called the CreateModel API. It does not delete model artifacts, inference code, or the IAM role that you specified when creating the model.
    func deleteModel(input: DeleteModelInput) async throws -> DeleteModelOutputResponse
    /// Deletes an Amazon SageMaker model bias job definition.
    func deleteModelBiasJobDefinition(input: DeleteModelBiasJobDefinitionInput) async throws -> DeleteModelBiasJobDefinitionOutputResponse
    /// Deletes an Amazon SageMaker Model Card.
    func deleteModelCard(input: DeleteModelCardInput) async throws -> DeleteModelCardOutputResponse
    /// Deletes an Amazon SageMaker model explainability job definition.
    func deleteModelExplainabilityJobDefinition(input: DeleteModelExplainabilityJobDefinitionInput) async throws -> DeleteModelExplainabilityJobDefinitionOutputResponse
    /// Deletes a model package. A model package is used to create SageMaker models or list on Amazon Web Services Marketplace. Buyers can subscribe to model packages listed on Amazon Web Services Marketplace to create models in SageMaker.
    func deleteModelPackage(input: DeleteModelPackageInput) async throws -> DeleteModelPackageOutputResponse
    /// Deletes the specified model group.
    func deleteModelPackageGroup(input: DeleteModelPackageGroupInput) async throws -> DeleteModelPackageGroupOutputResponse
    /// Deletes a model group resource policy.
    func deleteModelPackageGroupPolicy(input: DeleteModelPackageGroupPolicyInput) async throws -> DeleteModelPackageGroupPolicyOutputResponse
    /// Deletes the secified model quality monitoring job definition.
    func deleteModelQualityJobDefinition(input: DeleteModelQualityJobDefinitionInput) async throws -> DeleteModelQualityJobDefinitionOutputResponse
    /// Deletes a monitoring schedule. Also stops the schedule had not already been stopped. This does not delete the job execution history of the monitoring schedule.
    func deleteMonitoringSchedule(input: DeleteMonitoringScheduleInput) async throws -> DeleteMonitoringScheduleOutputResponse
    /// Deletes an SageMaker notebook instance. Before you can delete a notebook instance, you must call the StopNotebookInstance API. When you delete a notebook instance, you lose all of your data. SageMaker removes the ML compute instance, and deletes the ML storage volume and the network interface associated with the notebook instance.
    func deleteNotebookInstance(input: DeleteNotebookInstanceInput) async throws -> DeleteNotebookInstanceOutputResponse
    /// Deletes a notebook instance lifecycle configuration.
    func deleteNotebookInstanceLifecycleConfig(input: DeleteNotebookInstanceLifecycleConfigInput) async throws -> DeleteNotebookInstanceLifecycleConfigOutputResponse
    /// Deletes a pipeline if there are no running instances of the pipeline. To delete a pipeline, you must stop all running instances of the pipeline using the StopPipelineExecution API. When you delete a pipeline, all instances of the pipeline are deleted.
    func deletePipeline(input: DeletePipelineInput) async throws -> DeletePipelineOutputResponse
    /// Delete the specified project.
    func deleteProject(input: DeleteProjectInput) async throws -> DeleteProjectOutputResponse
    /// Used to delete a space.
    func deleteSpace(input: DeleteSpaceInput) async throws -> DeleteSpaceOutputResponse
    /// Deletes the Studio Lifecycle Configuration. In order to delete the Lifecycle Configuration, there must be no running apps using the Lifecycle Configuration. You must also remove the Lifecycle Configuration from UserSettings in all Domains and UserProfiles.
    func deleteStudioLifecycleConfig(input: DeleteStudioLifecycleConfigInput) async throws -> DeleteStudioLifecycleConfigOutputResponse
    /// Deletes the specified tags from an SageMaker resource. To list a resource's tags, use the ListTags API. When you call this API to delete tags from a hyperparameter tuning job, the deleted tags are not removed from training jobs that the hyperparameter tuning job launched before you called this API. When you call this API to delete tags from a SageMaker Studio Domain or User Profile, the deleted tags are not removed from Apps that the SageMaker Studio Domain or User Profile launched before you called this API.
    func deleteTags(input: DeleteTagsInput) async throws -> DeleteTagsOutputResponse
    /// Deletes the specified trial. All trial components that make up the trial must be deleted first. Use the [DescribeTrialComponent] API to get the list of trial components.
    func deleteTrial(input: DeleteTrialInput) async throws -> DeleteTrialOutputResponse
    /// Deletes the specified trial component. A trial component must be disassociated from all trials before the trial component can be deleted. To disassociate a trial component from a trial, call the [DisassociateTrialComponent] API.
    func deleteTrialComponent(input: DeleteTrialComponentInput) async throws -> DeleteTrialComponentOutputResponse
    /// Deletes a user profile. When a user profile is deleted, the user loses access to their EFS volume, including data, notebooks, and other artifacts.
    func deleteUserProfile(input: DeleteUserProfileInput) async throws -> DeleteUserProfileOutputResponse
    /// Use this operation to delete a workforce. If you want to create a new workforce in an Amazon Web Services Region where a workforce already exists, use this operation to delete the existing workforce and then use to create a new workforce. If a private workforce contains one or more work teams, you must use the operation to delete all work teams before you delete the workforce. If you try to delete a workforce that contains one or more work teams, you will recieve a ResourceInUse error.
    func deleteWorkforce(input: DeleteWorkforceInput) async throws -> DeleteWorkforceOutputResponse
    /// Deletes an existing work team. This operation can't be undone.
    func deleteWorkteam(input: DeleteWorkteamInput) async throws -> DeleteWorkteamOutputResponse
    /// Deregisters the specified devices. After you deregister a device, you will need to re-register the devices.
    func deregisterDevices(input: DeregisterDevicesInput) async throws -> DeregisterDevicesOutputResponse
    /// Describes an action.
    func describeAction(input: DescribeActionInput) async throws -> DescribeActionOutputResponse
    /// Returns a description of the specified algorithm that is in your account.
    func describeAlgorithm(input: DescribeAlgorithmInput) async throws -> DescribeAlgorithmOutputResponse
    /// Describes the app.
    func describeApp(input: DescribeAppInput) async throws -> DescribeAppOutputResponse
    /// Describes an AppImageConfig.
    func describeAppImageConfig(input: DescribeAppImageConfigInput) async throws -> DescribeAppImageConfigOutputResponse
    /// Describes an artifact.
    func describeArtifact(input: DescribeArtifactInput) async throws -> DescribeArtifactOutputResponse
    /// Returns information about an Amazon SageMaker AutoML job.
    func describeAutoMLJob(input: DescribeAutoMLJobInput) async throws -> DescribeAutoMLJobOutputResponse
    /// Gets details about the specified Git repository.
    func describeCodeRepository(input: DescribeCodeRepositoryInput) async throws -> DescribeCodeRepositoryOutputResponse
    /// Returns information about a model compilation job. To create a model compilation job, use [CreateCompilationJob]. To get information about multiple model compilation jobs, use [ListCompilationJobs].
    func describeCompilationJob(input: DescribeCompilationJobInput) async throws -> DescribeCompilationJobOutputResponse
    /// Describes a context.
    func describeContext(input: DescribeContextInput) async throws -> DescribeContextOutputResponse
    /// Gets the details of a data quality monitoring job definition.
    func describeDataQualityJobDefinition(input: DescribeDataQualityJobDefinitionInput) async throws -> DescribeDataQualityJobDefinitionOutputResponse
    /// Describes the device.
    func describeDevice(input: DescribeDeviceInput) async throws -> DescribeDeviceOutputResponse
    /// A description of the fleet the device belongs to.
    func describeDeviceFleet(input: DescribeDeviceFleetInput) async throws -> DescribeDeviceFleetOutputResponse
    /// The description of the domain.
    func describeDomain(input: DescribeDomainInput) async throws -> DescribeDomainOutputResponse
    /// Describes an edge deployment plan with deployment status per stage.
    func describeEdgeDeploymentPlan(input: DescribeEdgeDeploymentPlanInput) async throws -> DescribeEdgeDeploymentPlanOutputResponse
    /// A description of edge packaging jobs.
    func describeEdgePackagingJob(input: DescribeEdgePackagingJobInput) async throws -> DescribeEdgePackagingJobOutputResponse
    /// Returns the description of an endpoint.
    func describeEndpoint(input: DescribeEndpointInput) async throws -> DescribeEndpointOutputResponse
    /// Returns the description of an endpoint configuration created using the CreateEndpointConfig API.
    func describeEndpointConfig(input: DescribeEndpointConfigInput) async throws -> DescribeEndpointConfigOutputResponse
    /// Provides a list of an experiment's properties.
    func describeExperiment(input: DescribeExperimentInput) async throws -> DescribeExperimentOutputResponse
    /// Use this operation to describe a FeatureGroup. The response includes information on the creation time, FeatureGroup name, the unique identifier for each FeatureGroup, and more.
    func describeFeatureGroup(input: DescribeFeatureGroupInput) async throws -> DescribeFeatureGroupOutputResponse
    /// Shows the metadata for a feature within a feature group.
    func describeFeatureMetadata(input: DescribeFeatureMetadataInput) async throws -> DescribeFeatureMetadataOutputResponse
    /// Returns information about the specified flow definition.
    func describeFlowDefinition(input: DescribeFlowDefinitionInput) async throws -> DescribeFlowDefinitionOutputResponse
    /// Describe a hub. Hub APIs are only callable through SageMaker Studio.
    func describeHub(input: DescribeHubInput) async throws -> DescribeHubOutputResponse
    /// Describe the content of a hub. Hub APIs are only callable through SageMaker Studio.
    func describeHubContent(input: DescribeHubContentInput) async throws -> DescribeHubContentOutputResponse
    /// Returns information about the requested human task user interface (worker task template).
    func describeHumanTaskUi(input: DescribeHumanTaskUiInput) async throws -> DescribeHumanTaskUiOutputResponse
    /// Gets a description of a hyperparameter tuning job.
    func describeHyperParameterTuningJob(input: DescribeHyperParameterTuningJobInput) async throws -> DescribeHyperParameterTuningJobOutputResponse
    /// Describes a SageMaker image.
    func describeImage(input: DescribeImageInput) async throws -> DescribeImageOutputResponse
    /// Describes a version of a SageMaker image.
    func describeImageVersion(input: DescribeImageVersionInput) async throws -> DescribeImageVersionOutputResponse
    /// Returns details about an inference experiment.
    func describeInferenceExperiment(input: DescribeInferenceExperimentInput) async throws -> DescribeInferenceExperimentOutputResponse
    /// Provides the results of the Inference Recommender job. One or more recommendation jobs are returned.
    func describeInferenceRecommendationsJob(input: DescribeInferenceRecommendationsJobInput) async throws -> DescribeInferenceRecommendationsJobOutputResponse
    /// Gets information about a labeling job.
    func describeLabelingJob(input: DescribeLabelingJobInput) async throws -> DescribeLabelingJobOutputResponse
    /// Provides a list of properties for the requested lineage group. For more information, see [ Cross-Account Lineage Tracking ](https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html) in the Amazon SageMaker Developer Guide.
    func describeLineageGroup(input: DescribeLineageGroupInput) async throws -> DescribeLineageGroupOutputResponse
    /// Describes a model that you created using the CreateModel API.
    func describeModel(input: DescribeModelInput) async throws -> DescribeModelOutputResponse
    /// Returns a description of a model bias job definition.
    func describeModelBiasJobDefinition(input: DescribeModelBiasJobDefinitionInput) async throws -> DescribeModelBiasJobDefinitionOutputResponse
    /// Describes the content, creation time, and security configuration of an Amazon SageMaker Model Card.
    func describeModelCard(input: DescribeModelCardInput) async throws -> DescribeModelCardOutputResponse
    /// Describes an Amazon SageMaker Model Card export job.
    func describeModelCardExportJob(input: DescribeModelCardExportJobInput) async throws -> DescribeModelCardExportJobOutputResponse
    /// Returns a description of a model explainability job definition.
    func describeModelExplainabilityJobDefinition(input: DescribeModelExplainabilityJobDefinitionInput) async throws -> DescribeModelExplainabilityJobDefinitionOutputResponse
    /// Returns a description of the specified model package, which is used to create SageMaker models or list them on Amazon Web Services Marketplace. To create models in SageMaker, buyers can subscribe to model packages listed on Amazon Web Services Marketplace.
    func describeModelPackage(input: DescribeModelPackageInput) async throws -> DescribeModelPackageOutputResponse
    /// Gets a description for the specified model group.
    func describeModelPackageGroup(input: DescribeModelPackageGroupInput) async throws -> DescribeModelPackageGroupOutputResponse
    /// Returns a description of a model quality job definition.
    func describeModelQualityJobDefinition(input: DescribeModelQualityJobDefinitionInput) async throws -> DescribeModelQualityJobDefinitionOutputResponse
    /// Describes the schedule for a monitoring job.
    func describeMonitoringSchedule(input: DescribeMonitoringScheduleInput) async throws -> DescribeMonitoringScheduleOutputResponse
    /// Returns information about a notebook instance.
    func describeNotebookInstance(input: DescribeNotebookInstanceInput) async throws -> DescribeNotebookInstanceOutputResponse
    /// Returns a description of a notebook instance lifecycle configuration. For information about notebook instance lifestyle configurations, see [Step 2.1: (Optional) Customize a Notebook Instance](https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html).
    func describeNotebookInstanceLifecycleConfig(input: DescribeNotebookInstanceLifecycleConfigInput) async throws -> DescribeNotebookInstanceLifecycleConfigOutputResponse
    /// Describes the details of a pipeline.
    func describePipeline(input: DescribePipelineInput) async throws -> DescribePipelineOutputResponse
    /// Describes the details of an execution's pipeline definition.
    func describePipelineDefinitionForExecution(input: DescribePipelineDefinitionForExecutionInput) async throws -> DescribePipelineDefinitionForExecutionOutputResponse
    /// Describes the details of a pipeline execution.
    func describePipelineExecution(input: DescribePipelineExecutionInput) async throws -> DescribePipelineExecutionOutputResponse
    /// Returns a description of a processing job.
    func describeProcessingJob(input: DescribeProcessingJobInput) async throws -> DescribeProcessingJobOutputResponse
    /// Describes the details of a project.
    func describeProject(input: DescribeProjectInput) async throws -> DescribeProjectOutputResponse
    /// Describes the space.
    func describeSpace(input: DescribeSpaceInput) async throws -> DescribeSpaceOutputResponse
    /// Describes the Studio Lifecycle Configuration.
    func describeStudioLifecycleConfig(input: DescribeStudioLifecycleConfigInput) async throws -> DescribeStudioLifecycleConfigOutputResponse
    /// Gets information about a work team provided by a vendor. It returns details about the subscription with a vendor in the Amazon Web Services Marketplace.
    func describeSubscribedWorkteam(input: DescribeSubscribedWorkteamInput) async throws -> DescribeSubscribedWorkteamOutputResponse
    /// Returns information about a training job. Some of the attributes below only appear if the training job successfully starts. If the training job fails, TrainingJobStatus is Failed and, depending on the FailureReason, attributes like TrainingStartTime, TrainingTimeInSeconds, TrainingEndTime, and BillableTimeInSeconds may not be present in the response.
    func describeTrainingJob(input: DescribeTrainingJobInput) async throws -> DescribeTrainingJobOutputResponse
    /// Returns information about a transform job.
    func describeTransformJob(input: DescribeTransformJobInput) async throws -> DescribeTransformJobOutputResponse
    /// Provides a list of a trial's properties.
    func describeTrial(input: DescribeTrialInput) async throws -> DescribeTrialOutputResponse
    /// Provides a list of a trials component's properties.
    func describeTrialComponent(input: DescribeTrialComponentInput) async throws -> DescribeTrialComponentOutputResponse
    /// Describes a user profile. For more information, see CreateUserProfile.
    func describeUserProfile(input: DescribeUserProfileInput) async throws -> DescribeUserProfileOutputResponse
    /// Lists private workforce information, including workforce name, Amazon Resource Name (ARN), and, if applicable, allowed IP address ranges ([CIDRs](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html)). Allowable IP address ranges are the IP addresses that workers can use to access tasks. This operation applies only to private workforces.
    func describeWorkforce(input: DescribeWorkforceInput) async throws -> DescribeWorkforceOutputResponse
    /// Gets information about a specific work team. You can see information such as the create date, the last updated date, membership information, and the work team's Amazon Resource Name (ARN).
    func describeWorkteam(input: DescribeWorkteamInput) async throws -> DescribeWorkteamOutputResponse
    /// Disables using Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
    func disableSagemakerServicecatalogPortfolio(input: DisableSagemakerServicecatalogPortfolioInput) async throws -> DisableSagemakerServicecatalogPortfolioOutputResponse
    /// Disassociates a trial component from a trial. This doesn't effect other trials the component is associated with. Before you can delete a component, you must disassociate the component from all trials it is associated with. To associate a trial component with a trial, call the [AssociateTrialComponent] API. To get a list of the trials a component is associated with, use the [Search] API. Specify ExperimentTrialComponent for the Resource parameter. The list appears in the response under Results.TrialComponent.Parents.
    func disassociateTrialComponent(input: DisassociateTrialComponentInput) async throws -> DisassociateTrialComponentOutputResponse
    /// Enables using Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
    func enableSagemakerServicecatalogPortfolio(input: EnableSagemakerServicecatalogPortfolioInput) async throws -> EnableSagemakerServicecatalogPortfolioOutputResponse
    /// Describes a fleet.
    func getDeviceFleetReport(input: GetDeviceFleetReportInput) async throws -> GetDeviceFleetReportOutputResponse
    /// The resource policy for the lineage group.
    func getLineageGroupPolicy(input: GetLineageGroupPolicyInput) async throws -> GetLineageGroupPolicyOutputResponse
    /// Gets a resource policy that manages access for a model group. For information about resource policies, see [Identity-based policies and resource-based policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html) in the Amazon Web Services Identity and Access Management User Guide..
    func getModelPackageGroupPolicy(input: GetModelPackageGroupPolicyInput) async throws -> GetModelPackageGroupPolicyOutputResponse
    /// Gets the status of Service Catalog in SageMaker. Service Catalog is used to create SageMaker projects.
    func getSagemakerServicecatalogPortfolioStatus(input: GetSagemakerServicecatalogPortfolioStatusInput) async throws -> GetSagemakerServicecatalogPortfolioStatusOutputResponse
    /// An auto-complete API for the search functionality in the Amazon SageMaker console. It returns suggestions of possible matches for the property name to use in Search queries. Provides suggestions for HyperParameters, Tags, and Metrics.
    func getSearchSuggestions(input: GetSearchSuggestionsInput) async throws -> GetSearchSuggestionsOutputResponse
    /// Import hub content. Hub APIs are only callable through SageMaker Studio.
    func importHubContent(input: ImportHubContentInput) async throws -> ImportHubContentOutputResponse
    /// Lists the actions in your account and their properties.
    func listActions(input: ListActionsInput) async throws -> ListActionsOutputResponse
    /// Lists the machine learning algorithms that have been created.
    func listAlgorithms(input: ListAlgorithmsInput) async throws -> ListAlgorithmsOutputResponse
    /// Lists the aliases of a specified image or image version.
    func listAliases(input: ListAliasesInput) async throws -> ListAliasesOutputResponse
    /// Lists the AppImageConfigs in your account and their properties. The list can be filtered by creation time or modified time, and whether the AppImageConfig name contains a specified string.
    func listAppImageConfigs(input: ListAppImageConfigsInput) async throws -> ListAppImageConfigsOutputResponse
    /// Lists apps.
    func listApps(input: ListAppsInput) async throws -> ListAppsOutputResponse
    /// Lists the artifacts in your account and their properties.
    func listArtifacts(input: ListArtifactsInput) async throws -> ListArtifactsOutputResponse
    /// Lists the associations in your account and their properties.
    func listAssociations(input: ListAssociationsInput) async throws -> ListAssociationsOutputResponse
    /// Request a list of jobs.
    func listAutoMLJobs(input: ListAutoMLJobsInput) async throws -> ListAutoMLJobsOutputResponse
    /// List the candidates created for the job.
    func listCandidatesForAutoMLJob(input: ListCandidatesForAutoMLJobInput) async throws -> ListCandidatesForAutoMLJobOutputResponse
    /// Gets a list of the Git repositories in your account.
    func listCodeRepositories(input: ListCodeRepositoriesInput) async throws -> ListCodeRepositoriesOutputResponse
    /// Lists model compilation jobs that satisfy various filters. To create a model compilation job, use [CreateCompilationJob]. To get information about a particular model compilation job you have created, use [DescribeCompilationJob].
    func listCompilationJobs(input: ListCompilationJobsInput) async throws -> ListCompilationJobsOutputResponse
    /// Lists the contexts in your account and their properties.
    func listContexts(input: ListContextsInput) async throws -> ListContextsOutputResponse
    /// Lists the data quality job definitions in your account.
    func listDataQualityJobDefinitions(input: ListDataQualityJobDefinitionsInput) async throws -> ListDataQualityJobDefinitionsOutputResponse
    /// Returns a list of devices in the fleet.
    func listDeviceFleets(input: ListDeviceFleetsInput) async throws -> ListDeviceFleetsOutputResponse
    /// A list of devices.
    func listDevices(input: ListDevicesInput) async throws -> ListDevicesOutputResponse
    /// Lists the domains.
    func listDomains(input: ListDomainsInput) async throws -> ListDomainsOutputResponse
    /// Lists all edge deployment plans.
    func listEdgeDeploymentPlans(input: ListEdgeDeploymentPlansInput) async throws -> ListEdgeDeploymentPlansOutputResponse
    /// Returns a list of edge packaging jobs.
    func listEdgePackagingJobs(input: ListEdgePackagingJobsInput) async throws -> ListEdgePackagingJobsOutputResponse
    /// Lists endpoint configurations.
    func listEndpointConfigs(input: ListEndpointConfigsInput) async throws -> ListEndpointConfigsOutputResponse
    /// Lists endpoints.
    func listEndpoints(input: ListEndpointsInput) async throws -> ListEndpointsOutputResponse
    /// Lists all the experiments in your account. The list can be filtered to show only experiments that were created in a specific time range. The list can be sorted by experiment name or creation time.
    func listExperiments(input: ListExperimentsInput) async throws -> ListExperimentsOutputResponse
    /// List FeatureGroups based on given filter and order.
    func listFeatureGroups(input: ListFeatureGroupsInput) async throws -> ListFeatureGroupsOutputResponse
    /// Returns information about the flow definitions in your account.
    func listFlowDefinitions(input: ListFlowDefinitionsInput) async throws -> ListFlowDefinitionsOutputResponse
    /// List the contents of a hub. Hub APIs are only callable through SageMaker Studio.
    func listHubContents(input: ListHubContentsInput) async throws -> ListHubContentsOutputResponse
    /// List hub content versions. Hub APIs are only callable through SageMaker Studio.
    func listHubContentVersions(input: ListHubContentVersionsInput) async throws -> ListHubContentVersionsOutputResponse
    /// List all existing hubs. Hub APIs are only callable through SageMaker Studio.
    func listHubs(input: ListHubsInput) async throws -> ListHubsOutputResponse
    /// Returns information about the human task user interfaces in your account.
    func listHumanTaskUis(input: ListHumanTaskUisInput) async throws -> ListHumanTaskUisOutputResponse
    /// Gets a list of [HyperParameterTuningJobSummary] objects that describe the hyperparameter tuning jobs launched in your account.
    func listHyperParameterTuningJobs(input: ListHyperParameterTuningJobsInput) async throws -> ListHyperParameterTuningJobsOutputResponse
    /// Lists the images in your account and their properties. The list can be filtered by creation time or modified time, and whether the image name contains a specified string.
    func listImages(input: ListImagesInput) async throws -> ListImagesOutputResponse
    /// Lists the versions of a specified image and their properties. The list can be filtered by creation time or modified time.
    func listImageVersions(input: ListImageVersionsInput) async throws -> ListImageVersionsOutputResponse
    /// Returns the list of all inference experiments.
    func listInferenceExperiments(input: ListInferenceExperimentsInput) async throws -> ListInferenceExperimentsOutputResponse
    /// Lists recommendation jobs that satisfy various filters.
    func listInferenceRecommendationsJobs(input: ListInferenceRecommendationsJobsInput) async throws -> ListInferenceRecommendationsJobsOutputResponse
    /// Returns a list of the subtasks for an Inference Recommender job. The supported subtasks are benchmarks, which evaluate the performance of your model on different instance types.
    func listInferenceRecommendationsJobSteps(input: ListInferenceRecommendationsJobStepsInput) async throws -> ListInferenceRecommendationsJobStepsOutputResponse
    /// Gets a list of labeling jobs.
    func listLabelingJobs(input: ListLabelingJobsInput) async throws -> ListLabelingJobsOutputResponse
    /// Gets a list of labeling jobs assigned to a specified work team.
    func listLabelingJobsForWorkteam(input: ListLabelingJobsForWorkteamInput) async throws -> ListLabelingJobsForWorkteamOutputResponse
    /// A list of lineage groups shared with your Amazon Web Services account. For more information, see [ Cross-Account Lineage Tracking ](https://docs.aws.amazon.com/sagemaker/latest/dg/xaccount-lineage-tracking.html) in the Amazon SageMaker Developer Guide.
    func listLineageGroups(input: ListLineageGroupsInput) async throws -> ListLineageGroupsOutputResponse
    /// Lists model bias jobs definitions that satisfy various filters.
    func listModelBiasJobDefinitions(input: ListModelBiasJobDefinitionsInput) async throws -> ListModelBiasJobDefinitionsOutputResponse
    /// List the export jobs for the Amazon SageMaker Model Card.
    func listModelCardExportJobs(input: ListModelCardExportJobsInput) async throws -> ListModelCardExportJobsOutputResponse
    /// List existing model cards.
    func listModelCards(input: ListModelCardsInput) async throws -> ListModelCardsOutputResponse
    /// List existing versions of an Amazon SageMaker Model Card.
    func listModelCardVersions(input: ListModelCardVersionsInput) async throws -> ListModelCardVersionsOutputResponse
    /// Lists model explainability job definitions that satisfy various filters.
    func listModelExplainabilityJobDefinitions(input: ListModelExplainabilityJobDefinitionsInput) async throws -> ListModelExplainabilityJobDefinitionsOutputResponse
    /// Lists the domain, framework, task, and model name of standard machine learning models found in common model zoos.
    func listModelMetadata(input: ListModelMetadataInput) async throws -> ListModelMetadataOutputResponse
    /// Gets a list of the model groups in your Amazon Web Services account.
    func listModelPackageGroups(input: ListModelPackageGroupsInput) async throws -> ListModelPackageGroupsOutputResponse
    /// Lists the model packages that have been created.
    func listModelPackages(input: ListModelPackagesInput) async throws -> ListModelPackagesOutputResponse
    /// Gets a list of model quality monitoring job definitions in your account.
    func listModelQualityJobDefinitions(input: ListModelQualityJobDefinitionsInput) async throws -> ListModelQualityJobDefinitionsOutputResponse
    /// Lists models created with the CreateModel API.
    func listModels(input: ListModelsInput) async throws -> ListModelsOutputResponse
    /// Gets a list of past alerts in a model monitoring schedule.
    func listMonitoringAlertHistory(input: ListMonitoringAlertHistoryInput) async throws -> ListMonitoringAlertHistoryOutputResponse
    /// Gets the alerts for a single monitoring schedule.
    func listMonitoringAlerts(input: ListMonitoringAlertsInput) async throws -> ListMonitoringAlertsOutputResponse
    /// Returns list of all monitoring job executions.
    func listMonitoringExecutions(input: ListMonitoringExecutionsInput) async throws -> ListMonitoringExecutionsOutputResponse
    /// Returns list of all monitoring schedules.
    func listMonitoringSchedules(input: ListMonitoringSchedulesInput) async throws -> ListMonitoringSchedulesOutputResponse
    /// Lists notebook instance lifestyle configurations created with the [CreateNotebookInstanceLifecycleConfig] API.
    func listNotebookInstanceLifecycleConfigs(input: ListNotebookInstanceLifecycleConfigsInput) async throws -> ListNotebookInstanceLifecycleConfigsOutputResponse
    /// Returns a list of the SageMaker notebook instances in the requester's account in an Amazon Web Services Region.
    func listNotebookInstances(input: ListNotebookInstancesInput) async throws -> ListNotebookInstancesOutputResponse
    /// Gets a list of the pipeline executions.
    func listPipelineExecutions(input: ListPipelineExecutionsInput) async throws -> ListPipelineExecutionsOutputResponse
    /// Gets a list of PipeLineExecutionStep objects.
    func listPipelineExecutionSteps(input: ListPipelineExecutionStepsInput) async throws -> ListPipelineExecutionStepsOutputResponse
    /// Gets a list of parameters for a pipeline execution.
    func listPipelineParametersForExecution(input: ListPipelineParametersForExecutionInput) async throws -> ListPipelineParametersForExecutionOutputResponse
    /// Gets a list of pipelines.
    func listPipelines(input: ListPipelinesInput) async throws -> ListPipelinesOutputResponse
    /// Lists processing jobs that satisfy various filters.
    func listProcessingJobs(input: ListProcessingJobsInput) async throws -> ListProcessingJobsOutputResponse
    /// Gets a list of the projects in an Amazon Web Services account.
    func listProjects(input: ListProjectsInput) async throws -> ListProjectsOutputResponse
    /// Lists spaces.
    func listSpaces(input: ListSpacesInput) async throws -> ListSpacesOutputResponse
    /// Lists devices allocated to the stage, containing detailed device information and deployment status.
    func listStageDevices(input: ListStageDevicesInput) async throws -> ListStageDevicesOutputResponse
    /// Lists the Studio Lifecycle Configurations in your Amazon Web Services Account.
    func listStudioLifecycleConfigs(input: ListStudioLifecycleConfigsInput) async throws -> ListStudioLifecycleConfigsOutputResponse
    /// Gets a list of the work teams that you are subscribed to in the Amazon Web Services Marketplace. The list may be empty if no work team satisfies the filter specified in the NameContains parameter.
    func listSubscribedWorkteams(input: ListSubscribedWorkteamsInput) async throws -> ListSubscribedWorkteamsOutputResponse
    /// Returns the tags for the specified SageMaker resource.
    func listTags(input: ListTagsInput) async throws -> ListTagsOutputResponse
    /// Lists training jobs. When StatusEquals and MaxResults are set at the same time, the MaxResults number of training jobs are first retrieved ignoring the StatusEquals parameter and then they are filtered by the StatusEquals parameter, which is returned as a response. For example, if ListTrainingJobs is invoked with the following parameters: { ... MaxResults: 100, StatusEquals: InProgress ... } First, 100 trainings jobs with any status, including those other than InProgress, are selected (sorted according to the creation time, from the most current to the oldest). Next, those with a status of InProgress are returned. You can quickly test the API using the following Amazon Web Services CLI code. aws sagemaker list-training-jobs --max-results 100 --status-equals InProgress
    func listTrainingJobs(input: ListTrainingJobsInput) async throws -> ListTrainingJobsOutputResponse
    /// Gets a list of [TrainingJobSummary] objects that describe the training jobs that a hyperparameter tuning job launched.
    func listTrainingJobsForHyperParameterTuningJob(input: ListTrainingJobsForHyperParameterTuningJobInput) async throws -> ListTrainingJobsForHyperParameterTuningJobOutputResponse
    /// Lists transform jobs.
    func listTransformJobs(input: ListTransformJobsInput) async throws -> ListTransformJobsOutputResponse
    /// Lists the trial components in your account. You can sort the list by trial component name or creation time. You can filter the list to show only components that were created in a specific time range. You can also filter on one of the following:
    ///
    /// * ExperimentName
    ///
    /// * SourceArn
    ///
    /// * TrialName
    func listTrialComponents(input: ListTrialComponentsInput) async throws -> ListTrialComponentsOutputResponse
    /// Lists the trials in your account. Specify an experiment name to limit the list to the trials that are part of that experiment. Specify a trial component name to limit the list to the trials that associated with that trial component. The list can be filtered to show only trials that were created in a specific time range. The list can be sorted by trial name or creation time.
    func listTrials(input: ListTrialsInput) async throws -> ListTrialsOutputResponse
    /// Lists user profiles.
    func listUserProfiles(input: ListUserProfilesInput) async throws -> ListUserProfilesOutputResponse
    /// Use this operation to list all private and vendor workforces in an Amazon Web Services Region. Note that you can only have one private workforce per Amazon Web Services Region.
    func listWorkforces(input: ListWorkforcesInput) async throws -> ListWorkforcesOutputResponse
    /// Gets a list of private work teams that you have defined in a region. The list may be empty if no work team satisfies the filter specified in the NameContains parameter.
    func listWorkteams(input: ListWorkteamsInput) async throws -> ListWorkteamsOutputResponse
    /// Adds a resouce policy to control access to a model group. For information about resoure policies, see [Identity-based policies and resource-based policies](https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_identity-vs-resource.html) in the Amazon Web Services Identity and Access Management User Guide..
    func putModelPackageGroupPolicy(input: PutModelPackageGroupPolicyInput) async throws -> PutModelPackageGroupPolicyOutputResponse
    /// Use this action to inspect your lineage and discover relationships between entities. For more information, see [ Querying Lineage Entities](https://docs.aws.amazon.com/sagemaker/latest/dg/querying-lineage-entities.html) in the Amazon SageMaker Developer Guide.
    func queryLineage(input: QueryLineageInput) async throws -> QueryLineageOutputResponse
    /// Register devices.
    func registerDevices(input: RegisterDevicesInput) async throws -> RegisterDevicesOutputResponse
    /// Renders the UI template so that you can preview the worker's experience.
    func renderUiTemplate(input: RenderUiTemplateInput) async throws -> RenderUiTemplateOutputResponse
    /// Retry the execution of the pipeline.
    func retryPipelineExecution(input: RetryPipelineExecutionInput) async throws -> RetryPipelineExecutionOutputResponse
    /// Finds Amazon SageMaker resources that match a search query. Matching resources are returned as a list of SearchRecord objects in the response. You can sort the search results by any resource property in a ascending or descending order. You can query against the following value types: numeric, text, Boolean, and timestamp.
    func search(input: SearchInput) async throws -> SearchOutputResponse
    /// Notifies the pipeline that the execution of a callback step failed, along with a message describing why. When a callback step is run, the pipeline generates a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).
    func sendPipelineExecutionStepFailure(input: SendPipelineExecutionStepFailureInput) async throws -> SendPipelineExecutionStepFailureOutputResponse
    /// Notifies the pipeline that the execution of a callback step succeeded and provides a list of the step's output parameters. When a callback step is run, the pipeline generates a callback token and includes the token in a message sent to Amazon Simple Queue Service (Amazon SQS).
    func sendPipelineExecutionStepSuccess(input: SendPipelineExecutionStepSuccessInput) async throws -> SendPipelineExecutionStepSuccessOutputResponse
    /// Starts a stage in an edge deployment plan.
    func startEdgeDeploymentStage(input: StartEdgeDeploymentStageInput) async throws -> StartEdgeDeploymentStageOutputResponse
    /// Starts an inference experiment.
    func startInferenceExperiment(input: StartInferenceExperimentInput) async throws -> StartInferenceExperimentOutputResponse
    /// Starts a previously stopped monitoring schedule. By default, when you successfully create a new schedule, the status of a monitoring schedule is scheduled.
    func startMonitoringSchedule(input: StartMonitoringScheduleInput) async throws -> StartMonitoringScheduleOutputResponse
    /// Launches an ML compute instance with the latest version of the libraries and attaches your ML storage volume. After configuring the notebook instance, SageMaker sets the notebook instance status to InService. A notebook instance's status must be InService before you can connect to your Jupyter notebook.
    func startNotebookInstance(input: StartNotebookInstanceInput) async throws -> StartNotebookInstanceOutputResponse
    /// Starts a pipeline execution.
    func startPipelineExecution(input: StartPipelineExecutionInput) async throws -> StartPipelineExecutionOutputResponse
    /// A method for forcing a running job to shut down.
    func stopAutoMLJob(input: StopAutoMLJobInput) async throws -> StopAutoMLJobOutputResponse
    /// Stops a model compilation job. To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal. This gracefully shuts the job down. If the job hasn't stopped, it sends the SIGKILL signal. When it receives a StopCompilationJob request, Amazon SageMaker changes the [CompilationJobSummary$CompilationJobStatus] of the job to Stopping. After Amazon SageMaker stops the job, it sets the [CompilationJobSummary$CompilationJobStatus] to Stopped.
    func stopCompilationJob(input: StopCompilationJobInput) async throws -> StopCompilationJobOutputResponse
    /// Stops a stage in an edge deployment plan.
    func stopEdgeDeploymentStage(input: StopEdgeDeploymentStageInput) async throws -> StopEdgeDeploymentStageOutputResponse
    /// Request to stop an edge packaging job.
    func stopEdgePackagingJob(input: StopEdgePackagingJobInput) async throws -> StopEdgePackagingJobOutputResponse
    /// Stops a running hyperparameter tuning job and all running training jobs that the tuning job launched. All model artifacts output from the training jobs are stored in Amazon Simple Storage Service (Amazon S3). All data that the training jobs write to Amazon CloudWatch Logs are still available in CloudWatch. After the tuning job moves to the Stopped state, it releases all reserved resources for the tuning job.
    func stopHyperParameterTuningJob(input: StopHyperParameterTuningJobInput) async throws -> StopHyperParameterTuningJobOutputResponse
    /// Stops an inference experiment.
    func stopInferenceExperiment(input: StopInferenceExperimentInput) async throws -> StopInferenceExperimentOutputResponse
    /// Stops an Inference Recommender job.
    func stopInferenceRecommendationsJob(input: StopInferenceRecommendationsJobInput) async throws -> StopInferenceRecommendationsJobOutputResponse
    /// Stops a running labeling job. A job that is stopped cannot be restarted. Any results obtained before the job is stopped are placed in the Amazon S3 output bucket.
    func stopLabelingJob(input: StopLabelingJobInput) async throws -> StopLabelingJobOutputResponse
    /// Stops a previously started monitoring schedule.
    func stopMonitoringSchedule(input: StopMonitoringScheduleInput) async throws -> StopMonitoringScheduleOutputResponse
    /// Terminates the ML compute instance. Before terminating the instance, SageMaker disconnects the ML storage volume from it. SageMaker preserves the ML storage volume. SageMaker stops charging you for the ML compute instance when you call StopNotebookInstance. To access data on the ML storage volume for a notebook instance that has been terminated, call the StartNotebookInstance API. StartNotebookInstance launches another ML compute instance, configures it, and attaches the preserved ML storage volume so you can continue your work.
    func stopNotebookInstance(input: StopNotebookInstanceInput) async throws -> StopNotebookInstanceOutputResponse
    /// Stops a pipeline execution. Callback Step A pipeline execution won't stop while a callback step is running. When you call StopPipelineExecution on a pipeline execution with a running callback step, SageMaker Pipelines sends an additional Amazon SQS message to the specified SQS queue. The body of the SQS message contains a "Status" field which is set to "Stopping". You should add logic to your Amazon SQS message consumer to take any needed action (for example, resource cleanup) upon receipt of the message followed by a call to SendPipelineExecutionStepSuccess or SendPipelineExecutionStepFailure. Only when SageMaker Pipelines receives one of these calls will it stop the pipeline execution. Lambda Step A pipeline execution can't be stopped while a lambda step is running because the Lambda function invoked by the lambda step can't be stopped. If you attempt to stop the execution while the Lambda function is running, the pipeline waits for the Lambda function to finish or until the timeout is hit, whichever occurs first, and then stops. If the Lambda function finishes, the pipeline execution status is Stopped. If the timeout is hit the pipeline execution status is Failed.
    func stopPipelineExecution(input: StopPipelineExecutionInput) async throws -> StopPipelineExecutionOutputResponse
    /// Stops a processing job.
    func stopProcessingJob(input: StopProcessingJobInput) async throws -> StopProcessingJobOutputResponse
    /// Stops a training job. To stop a job, SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms might use this 120-second window to save the model artifacts, so the results of the training is not lost. When it receives a StopTrainingJob request, SageMaker changes the status of the job to Stopping. After SageMaker stops the job, it sets the status to Stopped.
    func stopTrainingJob(input: StopTrainingJobInput) async throws -> StopTrainingJobOutputResponse
    /// Stops a batch transform job. When Amazon SageMaker receives a StopTransformJob request, the status of the job changes to Stopping. After Amazon SageMaker stops the job, the status is set to Stopped. When you stop a batch transform job before it is completed, Amazon SageMaker doesn't store the job's output in Amazon S3.
    func stopTransformJob(input: StopTransformJobInput) async throws -> StopTransformJobOutputResponse
    /// Updates an action.
    func updateAction(input: UpdateActionInput) async throws -> UpdateActionOutputResponse
    /// Updates the properties of an AppImageConfig.
    func updateAppImageConfig(input: UpdateAppImageConfigInput) async throws -> UpdateAppImageConfigOutputResponse
    /// Updates an artifact.
    func updateArtifact(input: UpdateArtifactInput) async throws -> UpdateArtifactOutputResponse
    /// Updates the specified Git repository with the specified values.
    func updateCodeRepository(input: UpdateCodeRepositoryInput) async throws -> UpdateCodeRepositoryOutputResponse
    /// Updates a context.
    func updateContext(input: UpdateContextInput) async throws -> UpdateContextOutputResponse
    /// Updates a fleet of devices.
    func updateDeviceFleet(input: UpdateDeviceFleetInput) async throws -> UpdateDeviceFleetOutputResponse
    /// Updates one or more devices in a fleet.
    func updateDevices(input: UpdateDevicesInput) async throws -> UpdateDevicesOutputResponse
    /// Updates the default settings for new user profiles in the domain.
    func updateDomain(input: UpdateDomainInput) async throws -> UpdateDomainOutputResponse
    /// Deploys the new EndpointConfig specified in the request, switches to using newly created endpoint, and then deletes resources provisioned for the endpoint using the previous EndpointConfig (there is no availability loss). When SageMaker receives the request, it sets the endpoint status to Updating. After updating the endpoint, it sets the status to InService. To check the status of an endpoint, use the [DescribeEndpoint] API. You must not delete an EndpointConfig in use by an endpoint that is live or while the UpdateEndpoint or CreateEndpoint operations are being performed on the endpoint. To update an endpoint, you must create a new EndpointConfig. If you delete the EndpointConfig of an endpoint that is active or being created or updated you may lose visibility into the instance type the endpoint is using. The endpoint must be deleted in order to stop incurring charges.
    func updateEndpoint(input: UpdateEndpointInput) async throws -> UpdateEndpointOutputResponse
    /// Updates variant weight of one or more variants associated with an existing endpoint, or capacity of one variant associated with an existing endpoint. When it receives the request, SageMaker sets the endpoint status to Updating. After updating the endpoint, it sets the status to InService. To check the status of an endpoint, use the [DescribeEndpoint] API.
    func updateEndpointWeightsAndCapacities(input: UpdateEndpointWeightsAndCapacitiesInput) async throws -> UpdateEndpointWeightsAndCapacitiesOutputResponse
    /// Adds, updates, or removes the description of an experiment. Updates the display name of an experiment.
    func updateExperiment(input: UpdateExperimentInput) async throws -> UpdateExperimentOutputResponse
    /// Updates the feature group.
    func updateFeatureGroup(input: UpdateFeatureGroupInput) async throws -> UpdateFeatureGroupOutputResponse
    /// Updates the description and parameters of the feature group.
    func updateFeatureMetadata(input: UpdateFeatureMetadataInput) async throws -> UpdateFeatureMetadataOutputResponse
    /// Update a hub. Hub APIs are only callable through SageMaker Studio.
    func updateHub(input: UpdateHubInput) async throws -> UpdateHubOutputResponse
    /// Updates the properties of a SageMaker image. To change the image's tags, use the [AddTags] and [DeleteTags] APIs.
    func updateImage(input: UpdateImageInput) async throws -> UpdateImageOutputResponse
    /// Updates the properties of a SageMaker image version.
    func updateImageVersion(input: UpdateImageVersionInput) async throws -> UpdateImageVersionOutputResponse
    /// Updates an inference experiment that you created. The status of the inference experiment has to be either Created, Running. For more information on the status of an inference experiment, see [DescribeInferenceExperimentResponse$Status].
    func updateInferenceExperiment(input: UpdateInferenceExperimentInput) async throws -> UpdateInferenceExperimentOutputResponse
    /// Update an Amazon SageMaker Model Card. You cannot update both model card content and model card status in a single call.
    func updateModelCard(input: UpdateModelCardInput) async throws -> UpdateModelCardOutputResponse
    /// Updates a versioned model.
    func updateModelPackage(input: UpdateModelPackageInput) async throws -> UpdateModelPackageOutputResponse
    /// Update the parameters of a model monitor alert.
    func updateMonitoringAlert(input: UpdateMonitoringAlertInput) async throws -> UpdateMonitoringAlertOutputResponse
    /// Updates a previously created schedule.
    func updateMonitoringSchedule(input: UpdateMonitoringScheduleInput) async throws -> UpdateMonitoringScheduleOutputResponse
    /// Updates a notebook instance. NotebookInstance updates include upgrading or downgrading the ML compute instance used for your notebook instance to accommodate changes in your workload requirements.
    func updateNotebookInstance(input: UpdateNotebookInstanceInput) async throws -> UpdateNotebookInstanceOutputResponse
    /// Updates a notebook instance lifecycle configuration created with the [CreateNotebookInstanceLifecycleConfig] API.
    func updateNotebookInstanceLifecycleConfig(input: UpdateNotebookInstanceLifecycleConfigInput) async throws -> UpdateNotebookInstanceLifecycleConfigOutputResponse
    /// Updates a pipeline.
    func updatePipeline(input: UpdatePipelineInput) async throws -> UpdatePipelineOutputResponse
    /// Updates a pipeline execution.
    func updatePipelineExecution(input: UpdatePipelineExecutionInput) async throws -> UpdatePipelineExecutionOutputResponse
    /// Updates a machine learning (ML) project that is created from a template that sets up an ML pipeline from training to deploying an approved model. You must not update a project that is in use. If you update the ServiceCatalogProvisioningUpdateDetails of a project that is active or being created, or updated, you may lose resources already created by the project.
    func updateProject(input: UpdateProjectInput) async throws -> UpdateProjectOutputResponse
    /// Updates the settings of a space.
    func updateSpace(input: UpdateSpaceInput) async throws -> UpdateSpaceOutputResponse
    /// Update a model training job to request a new Debugger profiling configuration or to change warm pool retention length.
    func updateTrainingJob(input: UpdateTrainingJobInput) async throws -> UpdateTrainingJobOutputResponse
    /// Updates the display name of a trial.
    func updateTrial(input: UpdateTrialInput) async throws -> UpdateTrialOutputResponse
    /// Updates one or more properties of a trial component.
    func updateTrialComponent(input: UpdateTrialComponentInput) async throws -> UpdateTrialComponentOutputResponse
    /// Updates a user profile.
    func updateUserProfile(input: UpdateUserProfileInput) async throws -> UpdateUserProfileOutputResponse
    /// Use this operation to update your workforce. You can use this operation to require that workers use specific IP addresses to work on tasks and to update your OpenID Connect (OIDC) Identity Provider (IdP) workforce configuration. The worker portal is now supported in VPC and public internet. Use SourceIpConfig to restrict worker access to tasks to a specific range of IP addresses. You specify allowed IP addresses by creating a list of up to ten [CIDRs](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html). By default, a workforce isn't restricted to specific IP addresses. If you specify a range of IP addresses, workers who attempt to access tasks using any IP address outside the specified range are denied and get a Not Found error message on the worker portal. To restrict access to all the workers in public internet, add the SourceIpConfig CIDR value as "0.0.0.0/0". Amazon SageMaker does not support Source Ip restriction for worker portals in VPC. Use OidcConfig to update the configuration of a workforce created using your own OIDC IdP. You can only update your OIDC IdP configuration when there are no work teams associated with your workforce. You can delete work teams using the operation. After restricting access to a range of IP addresses or updating your OIDC IdP configuration with this operation, you can view details about your update workforce using the operation. This operation only applies to private workforces.
    func updateWorkforce(input: UpdateWorkforceInput) async throws -> UpdateWorkforceOutputResponse
    /// Updates an existing work team with new member definitions or description.
    func updateWorkteam(input: UpdateWorkteamInput) async throws -> UpdateWorkteamOutputResponse
}

public protocol SageMakerClientConfigurationProtocol : AWSClientRuntime.AWSClientConfiguration {
    var endpointResolver: EndpointResolver { get }
}

public enum SageMakerClientTypes {}
