//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum Smithy.ClientError
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.RestJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
import struct Smithy.URIQueryItem

public struct CreateServicePrincipalNameOutput {

    public init() { }
}

public struct CreateTemplateGroupAccessControlEntryOutput {

    public init() { }
}

public struct DeleteConnectorOutput {

    public init() { }
}

public struct DeleteDirectoryRegistrationOutput {

    public init() { }
}

public struct DeleteServicePrincipalNameOutput {

    public init() { }
}

public struct DeleteTemplateGroupAccessControlEntryOutput {

    public init() { }
}

public struct DeleteTemplateOutput {

    public init() { }
}

public struct TagResourceOutput {

    public init() { }
}

public struct UntagResourceOutput {

    public init() { }
}

public struct UpdateTemplateGroupAccessControlEntryOutput {

    public init() { }
}

public struct UpdateTemplateOutput {

    public init() { }
}

extension PcaConnectorAdClientTypes {

    public enum AccessRight: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allow
        case deny
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessRight] {
            return [
                .allow,
                .deny
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allow: return "ALLOW"
            case .deny: return "DENY"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PcaConnectorAdClientTypes {
    /// Allow or deny permissions for an Active Directory group to enroll or autoenroll certificates for a template.
    public struct AccessRights {
        /// Allow or deny an Active Directory group from autoenrolling certificates issued against a template. The Active Directory group must be allowed to enroll to allow autoenrollment
        public var autoEnroll: PcaConnectorAdClientTypes.AccessRight?
        /// Allow or deny an Active Directory group from enrolling certificates issued against a template.
        public var enroll: PcaConnectorAdClientTypes.AccessRight?

        public init(
            autoEnroll: PcaConnectorAdClientTypes.AccessRight? = nil,
            enroll: PcaConnectorAdClientTypes.AccessRight? = nil
        )
        {
            self.autoEnroll = autoEnroll
            self.enroll = enroll
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// An access control entry allows or denies Active Directory groups based on their security identifiers (SIDs) from enrolling and/or autoenrolling with the template.
    public struct AccessControlEntry {
        /// Permissions to allow or deny an Active Directory group to enroll or autoenroll certificates issued against a template.
        public var accessRights: PcaConnectorAdClientTypes.AccessRights?
        /// The date and time that the Access Control Entry was created.
        public var createdAt: Foundation.Date?
        /// Name of the Active Directory group. This name does not need to match the group name in Active Directory.
        public var groupDisplayName: Swift.String?
        /// Security identifier (SID) of the group object from Active Directory. The SID starts with "S-".
        public var groupSecurityIdentifier: Swift.String?
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
        public var templateArn: Swift.String?
        /// The date and time that the Access Control Entry was updated.
        public var updatedAt: Foundation.Date?

        public init(
            accessRights: PcaConnectorAdClientTypes.AccessRights? = nil,
            createdAt: Foundation.Date? = nil,
            groupDisplayName: Swift.String? = nil,
            groupSecurityIdentifier: Swift.String? = nil,
            templateArn: Swift.String? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.accessRights = accessRights
            self.createdAt = createdAt
            self.groupDisplayName = groupDisplayName
            self.groupSecurityIdentifier = groupSecurityIdentifier
            self.templateArn = templateArn
            self.updatedAt = updatedAt
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// Summary of group access control entries that allow or deny Active Directory groups based on their security identifiers (SIDs) from enrolling and/or autofenrolling with the template.
    public struct AccessControlEntrySummary {
        /// Allow or deny an Active Directory group from enrolling and autoenrolling certificates issued against a template.
        public var accessRights: PcaConnectorAdClientTypes.AccessRights?
        /// The date and time that the Access Control Entry was created.
        public var createdAt: Foundation.Date?
        /// Name of the Active Directory group. This name does not need to match the group name in Active Directory.
        public var groupDisplayName: Swift.String?
        /// Security identifier (SID) of the group object from Active Directory. The SID starts with "S-".
        public var groupSecurityIdentifier: Swift.String?
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
        public var templateArn: Swift.String?
        /// The date and time that the Access Control Entry was updated.
        public var updatedAt: Foundation.Date?

        public init(
            accessRights: PcaConnectorAdClientTypes.AccessRights? = nil,
            createdAt: Foundation.Date? = nil,
            groupDisplayName: Swift.String? = nil,
            groupSecurityIdentifier: Swift.String? = nil,
            templateArn: Swift.String? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.accessRights = accessRights
            self.createdAt = createdAt
            self.groupDisplayName = groupDisplayName
            self.groupSecurityIdentifier = groupSecurityIdentifier
            self.templateArn = templateArn
            self.updatedAt = updatedAt
        }
    }

}

/// You can receive this error if you attempt to create a resource share when you don't have the required permissions. This can be caused by insufficient permissions in policies attached to your Amazon Web Services Identity and Access Management (IAM) principal. It can also happen because of restrictions in place from an Amazon Web Services Organizations service control policy (SCP) that affects your Amazon Web Services account.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension PcaConnectorAdClientTypes {

    public enum ApplicationPolicyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case allApplicationPolicies
        case anyPurpose
        case attestationIdentityKeyCertificate
        case certificateRequestAgent
        case clientAuthentication
        case codeSigning
        case ctlUsage
        case digitalRights
        case directoryServiceEmailReplication
        case disallowedList
        case dnsServerTrust
        case documentEncryption
        case documentSigning
        case dynamicCodeGenerator
        case earlyLaunchAntimalwareDriver
        case embeddedWindowsSystemComponentVerification
        case enclave
        case encryptingFileSystem
        case endorsementKeyCertificate
        case fileRecovery
        case halExtension
        case ipSecurityEndSystem
        case ipSecurityIkeIntermediate
        case ipSecurityTunnelTermination
        case ipSecurityUser
        case isolatedUserMode
        case kdcAuthentication
        case kernelModeCodeSigning
        case keyPackLicenses
        case keyRecovery
        case keyRecoveryAgent
        case licenseServerVerification
        case lifetimeSigning
        case microsoftPublisher
        case microsoftTimeStamping
        case microsoftTrustListSigning
        case ocspSigning
        case oemWindowsSystemComponentVerification
        case platformCertificate
        case previewBuildSigning
        case privateKeyArchival
        case protectedProcessLightVerification
        case protectedProcessVerification
        case qualifiedSubordination
        case revokedListSigner
        case rootListSigner
        case rootProgramAutoUpdateCaRevocation
        case rootProgramAutoUpdateEndRevocation
        case rootProgramNoOscpFailoverToCrl
        case secureEmail
        case serverAuthentication
        case smartCardLogin
        case spcEncryptedDigestRetryCount
        case spcRelaxedPeMarkerCheck
        case timeStamping
        case windowsHardwareDriverAttestedVerification
        case windowsHardwareDriverExtendedVerification
        case windowsHardwareDriverVerification
        case windowsHelloRecoveryKeyEncryption
        case windowsKitsComponent
        case windowsRtVerification
        case windowsSoftwareExtensionVerification
        case windowsStore
        case windowsSystemComponentVerification
        case windowsTcbComponent
        case windowsThirdPartyApplicationComponent
        case windowsUpdate
        case sdkUnknown(Swift.String)

        public static var allCases: [ApplicationPolicyType] {
            return [
                .allApplicationPolicies,
                .anyPurpose,
                .attestationIdentityKeyCertificate,
                .certificateRequestAgent,
                .clientAuthentication,
                .codeSigning,
                .ctlUsage,
                .digitalRights,
                .directoryServiceEmailReplication,
                .disallowedList,
                .dnsServerTrust,
                .documentEncryption,
                .documentSigning,
                .dynamicCodeGenerator,
                .earlyLaunchAntimalwareDriver,
                .embeddedWindowsSystemComponentVerification,
                .enclave,
                .encryptingFileSystem,
                .endorsementKeyCertificate,
                .fileRecovery,
                .halExtension,
                .ipSecurityEndSystem,
                .ipSecurityIkeIntermediate,
                .ipSecurityTunnelTermination,
                .ipSecurityUser,
                .isolatedUserMode,
                .kdcAuthentication,
                .kernelModeCodeSigning,
                .keyPackLicenses,
                .keyRecovery,
                .keyRecoveryAgent,
                .licenseServerVerification,
                .lifetimeSigning,
                .microsoftPublisher,
                .microsoftTimeStamping,
                .microsoftTrustListSigning,
                .ocspSigning,
                .oemWindowsSystemComponentVerification,
                .platformCertificate,
                .previewBuildSigning,
                .privateKeyArchival,
                .protectedProcessLightVerification,
                .protectedProcessVerification,
                .qualifiedSubordination,
                .revokedListSigner,
                .rootListSigner,
                .rootProgramAutoUpdateCaRevocation,
                .rootProgramAutoUpdateEndRevocation,
                .rootProgramNoOscpFailoverToCrl,
                .secureEmail,
                .serverAuthentication,
                .smartCardLogin,
                .spcEncryptedDigestRetryCount,
                .spcRelaxedPeMarkerCheck,
                .timeStamping,
                .windowsHardwareDriverAttestedVerification,
                .windowsHardwareDriverExtendedVerification,
                .windowsHardwareDriverVerification,
                .windowsHelloRecoveryKeyEncryption,
                .windowsKitsComponent,
                .windowsRtVerification,
                .windowsSoftwareExtensionVerification,
                .windowsStore,
                .windowsSystemComponentVerification,
                .windowsTcbComponent,
                .windowsThirdPartyApplicationComponent,
                .windowsUpdate
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .allApplicationPolicies: return "ALL_APPLICATION_POLICIES"
            case .anyPurpose: return "ANY_PURPOSE"
            case .attestationIdentityKeyCertificate: return "ATTESTATION_IDENTITY_KEY_CERTIFICATE"
            case .certificateRequestAgent: return "CERTIFICATE_REQUEST_AGENT"
            case .clientAuthentication: return "CLIENT_AUTHENTICATION"
            case .codeSigning: return "CODE_SIGNING"
            case .ctlUsage: return "CTL_USAGE"
            case .digitalRights: return "DIGITAL_RIGHTS"
            case .directoryServiceEmailReplication: return "DIRECTORY_SERVICE_EMAIL_REPLICATION"
            case .disallowedList: return "DISALLOWED_LIST"
            case .dnsServerTrust: return "DNS_SERVER_TRUST"
            case .documentEncryption: return "DOCUMENT_ENCRYPTION"
            case .documentSigning: return "DOCUMENT_SIGNING"
            case .dynamicCodeGenerator: return "DYNAMIC_CODE_GENERATOR"
            case .earlyLaunchAntimalwareDriver: return "EARLY_LAUNCH_ANTIMALWARE_DRIVER"
            case .embeddedWindowsSystemComponentVerification: return "EMBEDDED_WINDOWS_SYSTEM_COMPONENT_VERIFICATION"
            case .enclave: return "ENCLAVE"
            case .encryptingFileSystem: return "ENCRYPTING_FILE_SYSTEM"
            case .endorsementKeyCertificate: return "ENDORSEMENT_KEY_CERTIFICATE"
            case .fileRecovery: return "FILE_RECOVERY"
            case .halExtension: return "HAL_EXTENSION"
            case .ipSecurityEndSystem: return "IP_SECURITY_END_SYSTEM"
            case .ipSecurityIkeIntermediate: return "IP_SECURITY_IKE_INTERMEDIATE"
            case .ipSecurityTunnelTermination: return "IP_SECURITY_TUNNEL_TERMINATION"
            case .ipSecurityUser: return "IP_SECURITY_USER"
            case .isolatedUserMode: return "ISOLATED_USER_MODE"
            case .kdcAuthentication: return "KDC_AUTHENTICATION"
            case .kernelModeCodeSigning: return "KERNEL_MODE_CODE_SIGNING"
            case .keyPackLicenses: return "KEY_PACK_LICENSES"
            case .keyRecovery: return "KEY_RECOVERY"
            case .keyRecoveryAgent: return "KEY_RECOVERY_AGENT"
            case .licenseServerVerification: return "LICENSE_SERVER_VERIFICATION"
            case .lifetimeSigning: return "LIFETIME_SIGNING"
            case .microsoftPublisher: return "MICROSOFT_PUBLISHER"
            case .microsoftTimeStamping: return "MICROSOFT_TIME_STAMPING"
            case .microsoftTrustListSigning: return "MICROSOFT_TRUST_LIST_SIGNING"
            case .ocspSigning: return "OCSP_SIGNING"
            case .oemWindowsSystemComponentVerification: return "OEM_WINDOWS_SYSTEM_COMPONENT_VERIFICATION"
            case .platformCertificate: return "PLATFORM_CERTIFICATE"
            case .previewBuildSigning: return "PREVIEW_BUILD_SIGNING"
            case .privateKeyArchival: return "PRIVATE_KEY_ARCHIVAL"
            case .protectedProcessLightVerification: return "PROTECTED_PROCESS_LIGHT_VERIFICATION"
            case .protectedProcessVerification: return "PROTECTED_PROCESS_VERIFICATION"
            case .qualifiedSubordination: return "QUALIFIED_SUBORDINATION"
            case .revokedListSigner: return "REVOKED_LIST_SIGNER"
            case .rootListSigner: return "ROOT_LIST_SIGNER"
            case .rootProgramAutoUpdateCaRevocation: return "ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION"
            case .rootProgramAutoUpdateEndRevocation: return "ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION"
            case .rootProgramNoOscpFailoverToCrl: return "ROOT_PROGRAM_NO_OSCP_FAILOVER_TO_CRL"
            case .secureEmail: return "SECURE_EMAIL"
            case .serverAuthentication: return "SERVER_AUTHENTICATION"
            case .smartCardLogin: return "SMART_CARD_LOGIN"
            case .spcEncryptedDigestRetryCount: return "SPC_ENCRYPTED_DIGEST_RETRY_COUNT"
            case .spcRelaxedPeMarkerCheck: return "SPC_RELAXED_PE_MARKER_CHECK"
            case .timeStamping: return "TIME_STAMPING"
            case .windowsHardwareDriverAttestedVerification: return "WINDOWS_HARDWARE_DRIVER_ATTESTED_VERIFICATION"
            case .windowsHardwareDriverExtendedVerification: return "WINDOWS_HARDWARE_DRIVER_EXTENDED_VERIFICATION"
            case .windowsHardwareDriverVerification: return "WINDOWS_HARDWARE_DRIVER_VERIFICATION"
            case .windowsHelloRecoveryKeyEncryption: return "WINDOWS_HELLO_RECOVERY_KEY_ENCRYPTION"
            case .windowsKitsComponent: return "WINDOWS_KITS_COMPONENT"
            case .windowsRtVerification: return "WINDOWS_RT_VERIFICATION"
            case .windowsSoftwareExtensionVerification: return "WINDOWS_SOFTWARE_EXTENSION_VERIFICATION"
            case .windowsStore: return "WINDOWS_STORE"
            case .windowsSystemComponentVerification: return "WINDOWS_SYSTEM_COMPONENT_VERIFICATION"
            case .windowsTcbComponent: return "WINDOWS_TCB_COMPONENT"
            case .windowsThirdPartyApplicationComponent: return "WINDOWS_THIRD_PARTY_APPLICATION_COMPONENT"
            case .windowsUpdate: return "WINDOWS_UPDATE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PcaConnectorAdClientTypes {
    /// Application policies describe what the certificate can be used for.
    public enum ApplicationPolicy {
        /// The type of application policy
        case policytype(PcaConnectorAdClientTypes.ApplicationPolicyType)
        /// The object identifier (OID) of an application policy.
        case policyobjectidentifier(Swift.String)
        case sdkUnknown(Swift.String)
    }

}

extension PcaConnectorAdClientTypes {
    /// Application policies describe what the certificate can be used for.
    public struct ApplicationPolicies {
        /// Marks the application policy extension as critical.
        public var critical: Swift.Bool?
        /// Application policies describe what the certificate can be used for.
        /// This member is required.
        public var policies: [PcaConnectorAdClientTypes.ApplicationPolicy]?

        public init(
            critical: Swift.Bool? = nil,
            policies: [PcaConnectorAdClientTypes.ApplicationPolicy]? = nil
        )
        {
            self.critical = critical
            self.policies = policies
        }
    }

}

extension PcaConnectorAdClientTypes {

    public enum ValidityPeriodType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case days
        case hours
        case months
        case weeks
        case years
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidityPeriodType] {
            return [
                .days,
                .hours,
                .months,
                .weeks,
                .years
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .days: return "DAYS"
            case .hours: return "HOURS"
            case .months: return "MONTHS"
            case .weeks: return "WEEKS"
            case .years: return "YEARS"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PcaConnectorAdClientTypes {
    /// Information describing the end of the validity period of the certificate. This parameter sets the “Not After” date for the certificate. Certificate validity is the period of time during which a certificate is valid. Validity can be expressed as an explicit date and time when the certificate expires, or as a span of time after issuance, stated in hours, days, months, or years. For more information, see Validity in RFC 5280. This value is unaffected when ValidityNotBefore is also specified. For example, if Validity is set to 20 days in the future, the certificate will expire 20 days from issuance time regardless of the ValidityNotBefore value.
    public struct ValidityPeriod {
        /// The numeric value for the validity period.
        /// This member is required.
        public var period: Swift.Int?
        /// The unit of time. You can select hours, days, weeks, months, and years.
        /// This member is required.
        public var periodType: PcaConnectorAdClientTypes.ValidityPeriodType?

        public init(
            period: Swift.Int? = nil,
            periodType: PcaConnectorAdClientTypes.ValidityPeriodType? = nil
        )
        {
            self.period = period
            self.periodType = periodType
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// Information describing the end of the validity period of the certificate. This parameter sets the “Not After” date for the certificate. Certificate validity is the period of time during which a certificate is valid. Validity can be expressed as an explicit date and time when the certificate expires, or as a span of time after issuance, stated in days, months, or years. For more information, see Validity in RFC 5280. This value is unaffected when ValidityNotBefore is also specified. For example, if Validity is set to 20 days in the future, the certificate will expire 20 days from issuance time regardless of the ValidityNotBefore value.
    public struct CertificateValidity {
        /// Renewal period is the period of time before certificate expiration when a new certificate will be requested.
        /// This member is required.
        public var renewalPeriod: PcaConnectorAdClientTypes.ValidityPeriod?
        /// Information describing the end of the validity period of the certificate. This parameter sets the “Not After” date for the certificate. Certificate validity is the period of time during which a certificate is valid. Validity can be expressed as an explicit date and time when the certificate expires, or as a span of time after issuance, stated in days, months, or years. For more information, see Validity in RFC 5280. This value is unaffected when ValidityNotBefore is also specified. For example, if Validity is set to 20 days in the future, the certificate will expire 20 days from issuance time regardless of the ValidityNotBefore value.
        /// This member is required.
        public var validityPeriod: PcaConnectorAdClientTypes.ValidityPeriod?

        public init(
            renewalPeriod: PcaConnectorAdClientTypes.ValidityPeriod? = nil,
            validityPeriod: PcaConnectorAdClientTypes.ValidityPeriod? = nil
        )
        {
            self.renewalPeriod = renewalPeriod
            self.validityPeriod = validityPeriod
        }
    }

}

extension PcaConnectorAdClientTypes {

    public enum ClientCompatibilityV2: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case windowsServer2003
        case windowsServer2008
        case windowsServer2008R2
        case windowsServer2012
        case windowsServer2012R2
        case windowsServer2016
        case sdkUnknown(Swift.String)

        public static var allCases: [ClientCompatibilityV2] {
            return [
                .windowsServer2003,
                .windowsServer2008,
                .windowsServer2008R2,
                .windowsServer2012,
                .windowsServer2012R2,
                .windowsServer2016
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .windowsServer2003: return "WINDOWS_SERVER_2003"
            case .windowsServer2008: return "WINDOWS_SERVER_2008"
            case .windowsServer2008R2: return "WINDOWS_SERVER_2008_R2"
            case .windowsServer2012: return "WINDOWS_SERVER_2012"
            case .windowsServer2012R2: return "WINDOWS_SERVER_2012_R2"
            case .windowsServer2016: return "WINDOWS_SERVER_2016"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PcaConnectorAdClientTypes {

    public enum ClientCompatibilityV3: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case windowsServer2008
        case windowsServer2008R2
        case windowsServer2012
        case windowsServer2012R2
        case windowsServer2016
        case sdkUnknown(Swift.String)

        public static var allCases: [ClientCompatibilityV3] {
            return [
                .windowsServer2008,
                .windowsServer2008R2,
                .windowsServer2012,
                .windowsServer2012R2,
                .windowsServer2016
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .windowsServer2008: return "WINDOWS_SERVER_2008"
            case .windowsServer2008R2: return "WINDOWS_SERVER_2008_R2"
            case .windowsServer2012: return "WINDOWS_SERVER_2012"
            case .windowsServer2012R2: return "WINDOWS_SERVER_2012_R2"
            case .windowsServer2016: return "WINDOWS_SERVER_2016"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PcaConnectorAdClientTypes {

    public enum ClientCompatibilityV4: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case windowsServer2012
        case windowsServer2012R2
        case windowsServer2016
        case sdkUnknown(Swift.String)

        public static var allCases: [ClientCompatibilityV4] {
            return [
                .windowsServer2012,
                .windowsServer2012R2,
                .windowsServer2016
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .windowsServer2012: return "WINDOWS_SERVER_2012"
            case .windowsServer2012R2: return "WINDOWS_SERVER_2012_R2"
            case .windowsServer2016: return "WINDOWS_SERVER_2016"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// This request cannot be completed for one of the following reasons because the requested resource was being concurrently modified by another request.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The identifier of the Amazon Web Services resource.
        /// This member is required.
        public internal(set) var resourceId: Swift.String? = nil
        /// The resource type, which can be one of Connector, Template, TemplateGroupAccessControlEntry, ServicePrincipalName, or DirectoryRegistration.
        /// This member is required.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
    }
}

extension PcaConnectorAdClientTypes {

    public enum ConnectorStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [ConnectorStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PcaConnectorAdClientTypes {

    public enum ConnectorStatusReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case directoryAccessDenied
        case internalFailure
        case privatecaAccessDenied
        case privatecaResourceNotFound
        case securityGroupNotInVpc
        case vpcAccessDenied
        case vpcEndpointLimitExceeded
        case vpcResourceNotFound
        case sdkUnknown(Swift.String)

        public static var allCases: [ConnectorStatusReason] {
            return [
                .directoryAccessDenied,
                .internalFailure,
                .privatecaAccessDenied,
                .privatecaResourceNotFound,
                .securityGroupNotInVpc,
                .vpcAccessDenied,
                .vpcEndpointLimitExceeded,
                .vpcResourceNotFound
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .directoryAccessDenied: return "DIRECTORY_ACCESS_DENIED"
            case .internalFailure: return "INTERNAL_FAILURE"
            case .privatecaAccessDenied: return "PRIVATECA_ACCESS_DENIED"
            case .privatecaResourceNotFound: return "PRIVATECA_RESOURCE_NOT_FOUND"
            case .securityGroupNotInVpc: return "SECURITY_GROUP_NOT_IN_VPC"
            case .vpcAccessDenied: return "VPC_ACCESS_DENIED"
            case .vpcEndpointLimitExceeded: return "VPC_ENDPOINT_LIMIT_EXCEEDED"
            case .vpcResourceNotFound: return "VPC_RESOURCE_NOT_FOUND"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PcaConnectorAdClientTypes {
    /// Information about your VPC and security groups used with the connector.
    public struct VpcInformation {
        /// The security groups used with the connector. You can use a maximum of 4 security groups with a connector.
        /// This member is required.
        public var securityGroupIds: [Swift.String]?

        public init(
            securityGroupIds: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// Amazon Web Services Private CA Connector for Active Directory is a service that links your Active Directory with Amazon Web Services Private CA. The connector brokers the exchange of certificates from Amazon Web Services Private CA to domain-joined users and machines managed with Active Directory.
    public struct Connector {
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
        public var arn: Swift.String?
        /// The Amazon Resource Name (ARN) of the certificate authority being used.
        public var certificateAuthorityArn: Swift.String?
        /// Certificate enrollment endpoint for Active Directory domain-joined objects reach out to when requesting certificates.
        public var certificateEnrollmentPolicyServerEndpoint: Swift.String?
        /// The date and time that the connector was created.
        public var createdAt: Foundation.Date?
        /// The identifier of the Active Directory.
        public var directoryId: Swift.String?
        /// Status of the connector. Status can be creating, active, deleting, or failed.
        public var status: PcaConnectorAdClientTypes.ConnectorStatus?
        /// Additional information about the connector status if the status is failed.
        public var statusReason: PcaConnectorAdClientTypes.ConnectorStatusReason?
        /// The date and time that the connector was updated.
        public var updatedAt: Foundation.Date?
        /// Information of the VPC and security group(s) used with the connector.
        public var vpcInformation: PcaConnectorAdClientTypes.VpcInformation?

        public init(
            arn: Swift.String? = nil,
            certificateAuthorityArn: Swift.String? = nil,
            certificateEnrollmentPolicyServerEndpoint: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            directoryId: Swift.String? = nil,
            status: PcaConnectorAdClientTypes.ConnectorStatus? = nil,
            statusReason: PcaConnectorAdClientTypes.ConnectorStatusReason? = nil,
            updatedAt: Foundation.Date? = nil,
            vpcInformation: PcaConnectorAdClientTypes.VpcInformation? = nil
        )
        {
            self.arn = arn
            self.certificateAuthorityArn = certificateAuthorityArn
            self.certificateEnrollmentPolicyServerEndpoint = certificateEnrollmentPolicyServerEndpoint
            self.createdAt = createdAt
            self.directoryId = directoryId
            self.status = status
            self.statusReason = statusReason
            self.updatedAt = updatedAt
            self.vpcInformation = vpcInformation
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// Summary description of the Amazon Web Services Private CA AD connectors belonging to an Amazon Web Services account.
    public struct ConnectorSummary {
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
        public var arn: Swift.String?
        /// The Amazon Resource Name (ARN) of the certificate authority being used.
        public var certificateAuthorityArn: Swift.String?
        /// Certificate enrollment endpoint for Active Directory domain-joined objects to request certificates.
        public var certificateEnrollmentPolicyServerEndpoint: Swift.String?
        /// The date and time that the connector was created.
        public var createdAt: Foundation.Date?
        /// The identifier of the Active Directory.
        public var directoryId: Swift.String?
        /// Status of the connector. Status can be creating, active, deleting, or failed.
        public var status: PcaConnectorAdClientTypes.ConnectorStatus?
        /// Additional information about the connector status if the status is failed.
        public var statusReason: PcaConnectorAdClientTypes.ConnectorStatusReason?
        /// The date and time that the connector was updated.
        public var updatedAt: Foundation.Date?
        /// Information of the VPC and security group(s) used with the connector.
        public var vpcInformation: PcaConnectorAdClientTypes.VpcInformation?

        public init(
            arn: Swift.String? = nil,
            certificateAuthorityArn: Swift.String? = nil,
            certificateEnrollmentPolicyServerEndpoint: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            directoryId: Swift.String? = nil,
            status: PcaConnectorAdClientTypes.ConnectorStatus? = nil,
            statusReason: PcaConnectorAdClientTypes.ConnectorStatusReason? = nil,
            updatedAt: Foundation.Date? = nil,
            vpcInformation: PcaConnectorAdClientTypes.VpcInformation? = nil
        )
        {
            self.arn = arn
            self.certificateAuthorityArn = certificateAuthorityArn
            self.certificateEnrollmentPolicyServerEndpoint = certificateEnrollmentPolicyServerEndpoint
            self.createdAt = createdAt
            self.directoryId = directoryId
            self.status = status
            self.statusReason = statusReason
            self.updatedAt = updatedAt
            self.vpcInformation = vpcInformation
        }
    }

}

/// The request processing has failed because of an unknown error, exception or failure with an internal server.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The operation tried to access a nonexistent resource. The resource might not be specified correctly, or its status might not be ACTIVE.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The identifier of the Amazon Web Services resource.
        /// This member is required.
        public internal(set) var resourceId: Swift.String? = nil
        /// The resource type, which can be one of Connector, Template, TemplateGroupAccessControlEntry, ServicePrincipalName, or DirectoryRegistration.
        /// This member is required.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
    }
}

/// Request would cause a service quota to be exceeded.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The code associated with the service quota.
        /// This member is required.
        public internal(set) var quotaCode: Swift.String? = nil
        /// The identifier of the Amazon Web Services resource.
        /// This member is required.
        public internal(set) var resourceId: Swift.String? = nil
        /// The resource type, which can be one of Connector, Template, TemplateGroupAccessControlEntry, ServicePrincipalName, or DirectoryRegistration.
        /// This member is required.
        public internal(set) var resourceType: Swift.String? = nil
        /// Identifies the originating service.
        /// This member is required.
        public internal(set) var serviceCode: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        serviceCode: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.quotaCode = quotaCode
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
        self.properties.serviceCode = serviceCode
    }
}

/// The limit on the number of requests per second was exceeded.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The code associated with the quota.
        public internal(set) var quotaCode: Swift.String? = nil
        /// Identifies the originating service.
        public internal(set) var serviceCode: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { true }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        serviceCode: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.quotaCode = quotaCode
        self.properties.serviceCode = serviceCode
    }
}

extension PcaConnectorAdClientTypes {

    public enum ValidationExceptionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case fieldValidationFailed
        case invalidPermission
        case invalidState
        case mismatchedConnector
        case mismatchedVpc
        case noClientToken
        case other
        case unknownOperation
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidationExceptionReason] {
            return [
                .fieldValidationFailed,
                .invalidPermission,
                .invalidState,
                .mismatchedConnector,
                .mismatchedVpc,
                .noClientToken,
                .other,
                .unknownOperation
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .fieldValidationFailed: return "FIELD_VALIDATION_FAILED"
            case .invalidPermission: return "INVALID_PERMISSION"
            case .invalidState: return "INVALID_STATE"
            case .mismatchedConnector: return "MISMATCHED_CONNECTOR"
            case .mismatchedVpc: return "MISMATCHED_VPC"
            case .noClientToken: return "NO_CLIENT_TOKEN"
            case .other: return "OTHER"
            case .unknownOperation: return "UNKNOWN_OPERATION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// An input validation error occurred. For example, invalid characters in a template name, or if a pagination token is invalid.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The reason for the validation error. This won't be return for every validation exception.
        public internal(set) var reason: PcaConnectorAdClientTypes.ValidationExceptionReason? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        reason: PcaConnectorAdClientTypes.ValidationExceptionReason? = nil
    )
    {
        self.properties.message = message
        self.properties.reason = reason
    }
}

public struct CreateConnectorInput {
    /// The Amazon Resource Name (ARN) of the certificate authority being used.
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?
    /// Idempotency token.
    public var clientToken: Swift.String?
    /// The identifier of the Active Directory.
    /// This member is required.
    public var directoryId: Swift.String?
    /// Metadata assigned to a connector consisting of a key-value pair.
    public var tags: [Swift.String: Swift.String]?
    /// Security group IDs that describe the inbound and outbound rules.
    /// This member is required.
    public var vpcInformation: PcaConnectorAdClientTypes.VpcInformation?

    public init(
        certificateAuthorityArn: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        directoryId: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil,
        vpcInformation: PcaConnectorAdClientTypes.VpcInformation? = nil
    )
    {
        self.certificateAuthorityArn = certificateAuthorityArn
        self.clientToken = clientToken
        self.directoryId = directoryId
        self.tags = tags
        self.vpcInformation = vpcInformation
    }
}

public struct CreateConnectorOutput {
    /// If successful, the Amazon Resource Name (ARN) of the connector for Active Directory.
    public var connectorArn: Swift.String?

    public init(
        connectorArn: Swift.String? = nil
    )
    {
        self.connectorArn = connectorArn
    }
}

public struct DeleteConnectorInput {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
    /// This member is required.
    public var connectorArn: Swift.String?

    public init(
        connectorArn: Swift.String? = nil
    )
    {
        self.connectorArn = connectorArn
    }
}

public struct GetConnectorInput {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
    /// This member is required.
    public var connectorArn: Swift.String?

    public init(
        connectorArn: Swift.String? = nil
    )
    {
        self.connectorArn = connectorArn
    }
}

public struct GetConnectorOutput {
    /// A structure that contains information about your connector.
    public var connector: PcaConnectorAdClientTypes.Connector?

    public init(
        connector: PcaConnectorAdClientTypes.Connector? = nil
    )
    {
        self.connector = connector
    }
}

public struct ListConnectorsInput {
    /// Use this parameter when paginating results to specify the maximum number of items to return in the response on each page. If additional items exist beyond the number you specify, the NextToken element is sent in the response. Use this NextToken value in a subsequent request to retrieve additional items.
    public var maxResults: Swift.Int?
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListConnectorsOutput {
    /// Summary information about each connector you have created.
    public var connectors: [PcaConnectorAdClientTypes.ConnectorSummary]?
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?

    public init(
        connectors: [PcaConnectorAdClientTypes.ConnectorSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.connectors = connectors
        self.nextToken = nextToken
    }
}

public struct CreateDirectoryRegistrationInput {
    /// Idempotency token.
    public var clientToken: Swift.String?
    /// The identifier of the Active Directory.
    /// This member is required.
    public var directoryId: Swift.String?
    /// Metadata assigned to a directory registration consisting of a key-value pair.
    public var tags: [Swift.String: Swift.String]?

    public init(
        clientToken: Swift.String? = nil,
        directoryId: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.clientToken = clientToken
        self.directoryId = directoryId
        self.tags = tags
    }
}

public struct CreateDirectoryRegistrationOutput {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
    public var directoryRegistrationArn: Swift.String?

    public init(
        directoryRegistrationArn: Swift.String? = nil
    )
    {
        self.directoryRegistrationArn = directoryRegistrationArn
    }
}

public struct CreateServicePrincipalNameInput {
    /// Idempotency token.
    public var clientToken: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
    /// This member is required.
    public var connectorArn: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
    /// This member is required.
    public var directoryRegistrationArn: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        connectorArn: Swift.String? = nil,
        directoryRegistrationArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.connectorArn = connectorArn
        self.directoryRegistrationArn = directoryRegistrationArn
    }
}

extension PcaConnectorAdClientTypes {
    /// Template configurations for v2 template schema.
    public struct EnrollmentFlagsV2 {
        /// Allow renewal using the same key.
        public var enableKeyReuseOnNtTokenKeysetStorageFull: Swift.Bool?
        /// Include symmetric algorithms allowed by the subject.
        public var includeSymmetricAlgorithms: Swift.Bool?
        /// This flag instructs the CA to not include the security extension szOID_NTDS_CA_SECURITY_EXT (OID:1.3.6.1.4.1.311.25.2), as specified in [MS-WCCE] sections 2.2.2.7.7.4 and 3.2.2.6.2.1.4.5.9, in the issued certificate. This addresses a Windows Kerberos elevation-of-privilege vulnerability.
        public var noSecurityExtension: Swift.Bool?
        /// Delete expired or revoked certificates instead of archiving them.
        public var removeInvalidCertificateFromPersonalStore: Swift.Bool?
        /// Require user interaction when the subject is enrolled and the private key associated with the certificate is used.
        public var userInteractionRequired: Swift.Bool?

        public init(
            enableKeyReuseOnNtTokenKeysetStorageFull: Swift.Bool? = nil,
            includeSymmetricAlgorithms: Swift.Bool? = nil,
            noSecurityExtension: Swift.Bool? = nil,
            removeInvalidCertificateFromPersonalStore: Swift.Bool? = nil,
            userInteractionRequired: Swift.Bool? = nil
        )
        {
            self.enableKeyReuseOnNtTokenKeysetStorageFull = enableKeyReuseOnNtTokenKeysetStorageFull
            self.includeSymmetricAlgorithms = includeSymmetricAlgorithms
            self.noSecurityExtension = noSecurityExtension
            self.removeInvalidCertificateFromPersonalStore = removeInvalidCertificateFromPersonalStore
            self.userInteractionRequired = userInteractionRequired
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// The key usage flags represent the purpose (e.g., encipherment, signature) of the key contained in the certificate.
    public struct KeyUsageFlags {
        /// DataEncipherment is asserted when the subject public key is used for directly enciphering raw user data without the use of an intermediate symmetric cipher.
        public var dataEncipherment: Swift.Bool?
        /// The digitalSignature is asserted when the subject public key is used for verifying digital signatures.
        public var digitalSignature: Swift.Bool?
        /// KeyAgreement is asserted when the subject public key is used for key agreement.
        public var keyAgreement: Swift.Bool?
        /// KeyEncipherment is asserted when the subject public key is used for enciphering private or secret keys, i.e., for key transport.
        public var keyEncipherment: Swift.Bool?
        /// NonRepudiation is asserted when the subject public key is used to verify digital signatures.
        public var nonRepudiation: Swift.Bool?

        public init(
            dataEncipherment: Swift.Bool? = nil,
            digitalSignature: Swift.Bool? = nil,
            keyAgreement: Swift.Bool? = nil,
            keyEncipherment: Swift.Bool? = nil,
            nonRepudiation: Swift.Bool? = nil
        )
        {
            self.dataEncipherment = dataEncipherment
            self.digitalSignature = digitalSignature
            self.keyAgreement = keyAgreement
            self.keyEncipherment = keyEncipherment
            self.nonRepudiation = nonRepudiation
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// The key usage extension defines the purpose (e.g., encipherment, signature) of the key contained in the certificate.
    public struct KeyUsage {
        /// Sets the key usage extension to critical.
        public var critical: Swift.Bool?
        /// The key usage flags represent the purpose (e.g., encipherment, signature) of the key contained in the certificate.
        /// This member is required.
        public var usageFlags: PcaConnectorAdClientTypes.KeyUsageFlags?

        public init(
            critical: Swift.Bool? = nil,
            usageFlags: PcaConnectorAdClientTypes.KeyUsageFlags? = nil
        )
        {
            self.critical = critical
            self.usageFlags = usageFlags
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// Certificate extensions for v2 template schema
    public struct ExtensionsV2 {
        /// Application policies specify what the certificate is used for and its purpose.
        public var applicationPolicies: PcaConnectorAdClientTypes.ApplicationPolicies?
        /// The key usage extension defines the purpose (e.g., encipherment, signature, certificate signing) of the key contained in the certificate.
        /// This member is required.
        public var keyUsage: PcaConnectorAdClientTypes.KeyUsage?

        public init(
            applicationPolicies: PcaConnectorAdClientTypes.ApplicationPolicies? = nil,
            keyUsage: PcaConnectorAdClientTypes.KeyUsage? = nil
        )
        {
            self.applicationPolicies = applicationPolicies
            self.keyUsage = keyUsage
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// General flags for v2 template schema that defines if the template is for a machine or a user and if the template can be issued using autoenrollment.
    public struct GeneralFlagsV2 {
        /// Allows certificate issuance using autoenrollment. Set to TRUE to allow autoenrollment.
        public var autoEnrollment: Swift.Bool?
        /// Defines if the template is for machines or users. Set to TRUE if the template is for machines. Set to FALSE if the template is for users.
        public var machineType: Swift.Bool?

        public init(
            autoEnrollment: Swift.Bool? = nil,
            machineType: Swift.Bool? = nil
        )
        {
            self.autoEnrollment = autoEnrollment
            self.machineType = machineType
        }
    }

}

extension PcaConnectorAdClientTypes {

    public enum KeySpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case keyExchange
        case signature
        case sdkUnknown(Swift.String)

        public static var allCases: [KeySpec] {
            return [
                .keyExchange,
                .signature
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .keyExchange: return "KEY_EXCHANGE"
            case .signature: return "SIGNATURE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PcaConnectorAdClientTypes {
    /// Defines the attributes of the private key.
    public struct PrivateKeyAttributesV2 {
        /// Defines the cryptographic providers used to generate the private key.
        public var cryptoProviders: [Swift.String]?
        /// Defines the purpose of the private key. Set it to "KEY_EXCHANGE" or "SIGNATURE" value.
        /// This member is required.
        public var keySpec: PcaConnectorAdClientTypes.KeySpec?
        /// Set the minimum key length of the private key.
        /// This member is required.
        public var minimalKeyLength: Swift.Int?

        public init(
            cryptoProviders: [Swift.String]? = nil,
            keySpec: PcaConnectorAdClientTypes.KeySpec? = nil,
            minimalKeyLength: Swift.Int? = nil
        )
        {
            self.cryptoProviders = cryptoProviders
            self.keySpec = keySpec
            self.minimalKeyLength = minimalKeyLength
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// Private key flags for v2 templates specify the client compatibility, if the private key can be exported, and if user input is required when using a private key.
    public struct PrivateKeyFlagsV2 {
        /// Defines the minimum client compatibility.
        /// This member is required.
        public var clientVersion: PcaConnectorAdClientTypes.ClientCompatibilityV2?
        /// Allows the private key to be exported.
        public var exportableKey: Swift.Bool?
        /// Require user input when using the private key for enrollment.
        public var strongKeyProtectionRequired: Swift.Bool?

        public init(
            clientVersion: PcaConnectorAdClientTypes.ClientCompatibilityV2? = nil,
            exportableKey: Swift.Bool? = nil,
            strongKeyProtectionRequired: Swift.Bool? = nil
        )
        {
            self.clientVersion = clientVersion
            self.exportableKey = exportableKey
            self.strongKeyProtectionRequired = strongKeyProtectionRequired
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// Information to include in the subject name and alternate subject name of the certificate. The subject name can be common name, directory path, DNS as common name, or left blank. You can optionally include email to the subject name for user templates. If you leave the subject name blank then you must set a subject alternate name. The subject alternate name (SAN) can include globally unique identifier (GUID), DNS, domain DNS, email, service principal name (SPN), and user principal name (UPN). You can leave the SAN blank. If you leave the SAN blank, then you must set a subject name.
    public struct SubjectNameFlagsV2 {
        /// Include the common name in the subject name.
        public var requireCommonName: Swift.Bool?
        /// Include the directory path in the subject name.
        public var requireDirectoryPath: Swift.Bool?
        /// Include the DNS as common name in the subject name.
        public var requireDnsAsCn: Swift.Bool?
        /// Include the subject's email in the subject name.
        public var requireEmail: Swift.Bool?
        /// Include the globally unique identifier (GUID) in the subject alternate name.
        public var sanRequireDirectoryGuid: Swift.Bool?
        /// Include the DNS in the subject alternate name.
        public var sanRequireDns: Swift.Bool?
        /// Include the domain DNS in the subject alternate name.
        public var sanRequireDomainDns: Swift.Bool?
        /// Include the subject's email in the subject alternate name.
        public var sanRequireEmail: Swift.Bool?
        /// Include the service principal name (SPN) in the subject alternate name.
        public var sanRequireSpn: Swift.Bool?
        /// Include the user principal name (UPN) in the subject alternate name.
        public var sanRequireUpn: Swift.Bool?

        public init(
            requireCommonName: Swift.Bool? = nil,
            requireDirectoryPath: Swift.Bool? = nil,
            requireDnsAsCn: Swift.Bool? = nil,
            requireEmail: Swift.Bool? = nil,
            sanRequireDirectoryGuid: Swift.Bool? = nil,
            sanRequireDns: Swift.Bool? = nil,
            sanRequireDomainDns: Swift.Bool? = nil,
            sanRequireEmail: Swift.Bool? = nil,
            sanRequireSpn: Swift.Bool? = nil,
            sanRequireUpn: Swift.Bool? = nil
        )
        {
            self.requireCommonName = requireCommonName
            self.requireDirectoryPath = requireDirectoryPath
            self.requireDnsAsCn = requireDnsAsCn
            self.requireEmail = requireEmail
            self.sanRequireDirectoryGuid = sanRequireDirectoryGuid
            self.sanRequireDns = sanRequireDns
            self.sanRequireDomainDns = sanRequireDomainDns
            self.sanRequireEmail = sanRequireEmail
            self.sanRequireSpn = sanRequireSpn
            self.sanRequireUpn = sanRequireUpn
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// v2 template schema that uses Legacy Cryptographic Providers.
    public struct TemplateV2 {
        /// Certificate validity describes the validity and renewal periods of a certificate.
        /// This member is required.
        public var certificateValidity: PcaConnectorAdClientTypes.CertificateValidity?
        /// Enrollment flags describe the enrollment settings for certificates such as using the existing private key and deleting expired or revoked certificates.
        /// This member is required.
        public var enrollmentFlags: PcaConnectorAdClientTypes.EnrollmentFlagsV2?
        /// Extensions describe the key usage extensions and application policies for a template.
        /// This member is required.
        public var extensions: PcaConnectorAdClientTypes.ExtensionsV2?
        /// General flags describe whether the template is used for computers or users and if the template can be used with autoenrollment.
        /// This member is required.
        public var generalFlags: PcaConnectorAdClientTypes.GeneralFlagsV2?
        /// Private key attributes allow you to specify the minimal key length, key spec, and cryptographic providers for the private key of a certificate for v2 templates. V2 templates allow you to use Legacy Cryptographic Service Providers.
        /// This member is required.
        public var privateKeyAttributes: PcaConnectorAdClientTypes.PrivateKeyAttributesV2?
        /// Private key flags for v2 templates specify the client compatibility, if the private key can be exported, and if user input is required when using a private key.
        /// This member is required.
        public var privateKeyFlags: PcaConnectorAdClientTypes.PrivateKeyFlagsV2?
        /// Subject name flags describe the subject name and subject alternate name that is included in a certificate.
        /// This member is required.
        public var subjectNameFlags: PcaConnectorAdClientTypes.SubjectNameFlagsV2?
        /// List of templates in Active Directory that are superseded by this template.
        public var supersededTemplates: [Swift.String]?

        public init(
            certificateValidity: PcaConnectorAdClientTypes.CertificateValidity? = nil,
            enrollmentFlags: PcaConnectorAdClientTypes.EnrollmentFlagsV2? = nil,
            extensions: PcaConnectorAdClientTypes.ExtensionsV2? = nil,
            generalFlags: PcaConnectorAdClientTypes.GeneralFlagsV2? = nil,
            privateKeyAttributes: PcaConnectorAdClientTypes.PrivateKeyAttributesV2? = nil,
            privateKeyFlags: PcaConnectorAdClientTypes.PrivateKeyFlagsV2? = nil,
            subjectNameFlags: PcaConnectorAdClientTypes.SubjectNameFlagsV2? = nil,
            supersededTemplates: [Swift.String]? = nil
        )
        {
            self.certificateValidity = certificateValidity
            self.enrollmentFlags = enrollmentFlags
            self.extensions = extensions
            self.generalFlags = generalFlags
            self.privateKeyAttributes = privateKeyAttributes
            self.privateKeyFlags = privateKeyFlags
            self.subjectNameFlags = subjectNameFlags
            self.supersededTemplates = supersededTemplates
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// Template configurations for v3 template schema.
    public struct EnrollmentFlagsV3 {
        /// Allow renewal using the same key.
        public var enableKeyReuseOnNtTokenKeysetStorageFull: Swift.Bool?
        /// Include symmetric algorithms allowed by the subject.
        public var includeSymmetricAlgorithms: Swift.Bool?
        /// This flag instructs the CA to not include the security extension szOID_NTDS_CA_SECURITY_EXT (OID:1.3.6.1.4.1.311.25.2), as specified in [MS-WCCE] sections 2.2.2.7.7.4 and 3.2.2.6.2.1.4.5.9, in the issued certificate. This addresses a Windows Kerberos elevation-of-privilege vulnerability.
        public var noSecurityExtension: Swift.Bool?
        /// Delete expired or revoked certificates instead of archiving them.
        public var removeInvalidCertificateFromPersonalStore: Swift.Bool?
        /// Require user interaction when the subject is enrolled and the private key associated with the certificate is used.
        public var userInteractionRequired: Swift.Bool?

        public init(
            enableKeyReuseOnNtTokenKeysetStorageFull: Swift.Bool? = nil,
            includeSymmetricAlgorithms: Swift.Bool? = nil,
            noSecurityExtension: Swift.Bool? = nil,
            removeInvalidCertificateFromPersonalStore: Swift.Bool? = nil,
            userInteractionRequired: Swift.Bool? = nil
        )
        {
            self.enableKeyReuseOnNtTokenKeysetStorageFull = enableKeyReuseOnNtTokenKeysetStorageFull
            self.includeSymmetricAlgorithms = includeSymmetricAlgorithms
            self.noSecurityExtension = noSecurityExtension
            self.removeInvalidCertificateFromPersonalStore = removeInvalidCertificateFromPersonalStore
            self.userInteractionRequired = userInteractionRequired
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// Certificate extensions for v3 template schema
    public struct ExtensionsV3 {
        /// Application policies specify what the certificate is used for and its purpose.
        public var applicationPolicies: PcaConnectorAdClientTypes.ApplicationPolicies?
        /// The key usage extension defines the purpose (e.g., encipherment, signature, certificate signing) of the key contained in the certificate.
        /// This member is required.
        public var keyUsage: PcaConnectorAdClientTypes.KeyUsage?

        public init(
            applicationPolicies: PcaConnectorAdClientTypes.ApplicationPolicies? = nil,
            keyUsage: PcaConnectorAdClientTypes.KeyUsage? = nil
        )
        {
            self.applicationPolicies = applicationPolicies
            self.keyUsage = keyUsage
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// General flags for v3 template schema that defines if the template is for a machine or a user and if the template can be issued using autoenrollment.
    public struct GeneralFlagsV3 {
        /// Allows certificate issuance using autoenrollment. Set to TRUE to allow autoenrollment.
        public var autoEnrollment: Swift.Bool?
        /// Defines if the template is for machines or users. Set to TRUE if the template is for machines. Set to FALSE if the template is for users
        public var machineType: Swift.Bool?

        public init(
            autoEnrollment: Swift.Bool? = nil,
            machineType: Swift.Bool? = nil
        )
        {
            self.autoEnrollment = autoEnrollment
            self.machineType = machineType
        }
    }

}

extension PcaConnectorAdClientTypes {

    public enum HashAlgorithm: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case sha256
        case sha384
        case sha512
        case sdkUnknown(Swift.String)

        public static var allCases: [HashAlgorithm] {
            return [
                .sha256,
                .sha384,
                .sha512
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .sha256: return "SHA256"
            case .sha384: return "SHA384"
            case .sha512: return "SHA512"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PcaConnectorAdClientTypes {

    public enum PrivateKeyAlgorithm: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ecdhP256
        case ecdhP384
        case ecdhP521
        case rsa
        case sdkUnknown(Swift.String)

        public static var allCases: [PrivateKeyAlgorithm] {
            return [
                .ecdhP256,
                .ecdhP384,
                .ecdhP521,
                .rsa
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ecdhP256: return "ECDH_P256"
            case .ecdhP384: return "ECDH_P384"
            case .ecdhP521: return "ECDH_P521"
            case .rsa: return "RSA"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PcaConnectorAdClientTypes {
    /// Specifies key usage.
    public struct KeyUsagePropertyFlags {
        /// Allows key for encryption and decryption.
        public var decrypt: Swift.Bool?
        /// Allows key exchange without encryption.
        public var keyAgreement: Swift.Bool?
        /// Allow key use for digital signature.
        public var sign: Swift.Bool?

        public init(
            decrypt: Swift.Bool? = nil,
            keyAgreement: Swift.Bool? = nil,
            sign: Swift.Bool? = nil
        )
        {
            self.decrypt = decrypt
            self.keyAgreement = keyAgreement
            self.sign = sign
        }
    }

}

extension PcaConnectorAdClientTypes {

    public enum KeyUsagePropertyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case all
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyUsagePropertyType] {
            return [
                .all
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PcaConnectorAdClientTypes {
    /// The key usage property defines the purpose of the private key contained in the certificate. You can specify specific purposes using property flags or all by using property type ALL.
    public enum KeyUsageProperty {
        /// You can specify all key usages using property type ALL. You can use property type or property flags but not both.
        case propertytype(PcaConnectorAdClientTypes.KeyUsagePropertyType)
        /// You can specify key usage for encryption, key agreement, and signature. You can use property flags or property type but not both.
        case propertyflags(PcaConnectorAdClientTypes.KeyUsagePropertyFlags)
        case sdkUnknown(Swift.String)
    }

}

extension PcaConnectorAdClientTypes {
    /// Defines the attributes of the private key.
    public struct PrivateKeyAttributesV3 {
        /// Defines the algorithm used to generate the private key.
        /// This member is required.
        public var algorithm: PcaConnectorAdClientTypes.PrivateKeyAlgorithm?
        /// Defines the cryptographic providers used to generate the private key.
        public var cryptoProviders: [Swift.String]?
        /// Defines the purpose of the private key. Set it to "KEY_EXCHANGE" or "SIGNATURE" value.
        /// This member is required.
        public var keySpec: PcaConnectorAdClientTypes.KeySpec?
        /// The key usage property defines the purpose of the private key contained in the certificate. You can specify specific purposes using property flags or all by using property type ALL.
        /// This member is required.
        public var keyUsageProperty: PcaConnectorAdClientTypes.KeyUsageProperty?
        /// Set the minimum key length of the private key.
        /// This member is required.
        public var minimalKeyLength: Swift.Int?

        public init(
            algorithm: PcaConnectorAdClientTypes.PrivateKeyAlgorithm? = nil,
            cryptoProviders: [Swift.String]? = nil,
            keySpec: PcaConnectorAdClientTypes.KeySpec? = nil,
            keyUsageProperty: PcaConnectorAdClientTypes.KeyUsageProperty? = nil,
            minimalKeyLength: Swift.Int? = nil
        )
        {
            self.algorithm = algorithm
            self.cryptoProviders = cryptoProviders
            self.keySpec = keySpec
            self.keyUsageProperty = keyUsageProperty
            self.minimalKeyLength = minimalKeyLength
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// Private key flags for v3 templates specify the client compatibility, if the private key can be exported, if user input is required when using a private key, and if an alternate signature algorithm should be used.
    public struct PrivateKeyFlagsV3 {
        /// Defines the minimum client compatibility.
        /// This member is required.
        public var clientVersion: PcaConnectorAdClientTypes.ClientCompatibilityV3?
        /// Allows the private key to be exported.
        public var exportableKey: Swift.Bool?
        /// Reguires the PKCS #1 v2.1 signature format for certificates. You should verify that your CA, objects, and applications can accept this signature format.
        public var requireAlternateSignatureAlgorithm: Swift.Bool?
        /// Requirer user input when using the private key for enrollment.
        public var strongKeyProtectionRequired: Swift.Bool?

        public init(
            clientVersion: PcaConnectorAdClientTypes.ClientCompatibilityV3? = nil,
            exportableKey: Swift.Bool? = nil,
            requireAlternateSignatureAlgorithm: Swift.Bool? = nil,
            strongKeyProtectionRequired: Swift.Bool? = nil
        )
        {
            self.clientVersion = clientVersion
            self.exportableKey = exportableKey
            self.requireAlternateSignatureAlgorithm = requireAlternateSignatureAlgorithm
            self.strongKeyProtectionRequired = strongKeyProtectionRequired
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// Information to include in the subject name and alternate subject name of the certificate. The subject name can be common name, directory path, DNS as common name, or left blank. You can optionally include email to the subject name for user templates. If you leave the subject name blank then you must set a subject alternate name. The subject alternate name (SAN) can include globally unique identifier (GUID), DNS, domain DNS, email, service principal name (SPN), and user principal name (UPN). You can leave the SAN blank. If you leave the SAN blank, then you must set a subject name.
    public struct SubjectNameFlagsV3 {
        /// Include the common name in the subject name.
        public var requireCommonName: Swift.Bool?
        /// Include the directory path in the subject name.
        public var requireDirectoryPath: Swift.Bool?
        /// Include the DNS as common name in the subject name.
        public var requireDnsAsCn: Swift.Bool?
        /// Include the subject's email in the subject name.
        public var requireEmail: Swift.Bool?
        /// Include the globally unique identifier (GUID) in the subject alternate name.
        public var sanRequireDirectoryGuid: Swift.Bool?
        /// Include the DNS in the subject alternate name.
        public var sanRequireDns: Swift.Bool?
        /// Include the domain DNS in the subject alternate name.
        public var sanRequireDomainDns: Swift.Bool?
        /// Include the subject's email in the subject alternate name.
        public var sanRequireEmail: Swift.Bool?
        /// Include the service principal name (SPN) in the subject alternate name.
        public var sanRequireSpn: Swift.Bool?
        /// Include the user principal name (UPN) in the subject alternate name.
        public var sanRequireUpn: Swift.Bool?

        public init(
            requireCommonName: Swift.Bool? = nil,
            requireDirectoryPath: Swift.Bool? = nil,
            requireDnsAsCn: Swift.Bool? = nil,
            requireEmail: Swift.Bool? = nil,
            sanRequireDirectoryGuid: Swift.Bool? = nil,
            sanRequireDns: Swift.Bool? = nil,
            sanRequireDomainDns: Swift.Bool? = nil,
            sanRequireEmail: Swift.Bool? = nil,
            sanRequireSpn: Swift.Bool? = nil,
            sanRequireUpn: Swift.Bool? = nil
        )
        {
            self.requireCommonName = requireCommonName
            self.requireDirectoryPath = requireDirectoryPath
            self.requireDnsAsCn = requireDnsAsCn
            self.requireEmail = requireEmail
            self.sanRequireDirectoryGuid = sanRequireDirectoryGuid
            self.sanRequireDns = sanRequireDns
            self.sanRequireDomainDns = sanRequireDomainDns
            self.sanRequireEmail = sanRequireEmail
            self.sanRequireSpn = sanRequireSpn
            self.sanRequireUpn = sanRequireUpn
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// v3 template schema that uses Key Storage Providers.
    public struct TemplateV3 {
        /// Certificate validity describes the validity and renewal periods of a certificate.
        /// This member is required.
        public var certificateValidity: PcaConnectorAdClientTypes.CertificateValidity?
        /// Enrollment flags describe the enrollment settings for certificates such as using the existing private key and deleting expired or revoked certificates.
        /// This member is required.
        public var enrollmentFlags: PcaConnectorAdClientTypes.EnrollmentFlagsV3?
        /// Extensions describe the key usage extensions and application policies for a template.
        /// This member is required.
        public var extensions: PcaConnectorAdClientTypes.ExtensionsV3?
        /// General flags describe whether the template is used for computers or users and if the template can be used with autoenrollment.
        /// This member is required.
        public var generalFlags: PcaConnectorAdClientTypes.GeneralFlagsV3?
        /// Specifies the hash algorithm used to hash the private key.
        /// This member is required.
        public var hashAlgorithm: PcaConnectorAdClientTypes.HashAlgorithm?
        /// Private key attributes allow you to specify the algorithm, minimal key length, key spec, key usage, and cryptographic providers for the private key of a certificate for v3 templates. V3 templates allow you to use Key Storage Providers.
        /// This member is required.
        public var privateKeyAttributes: PcaConnectorAdClientTypes.PrivateKeyAttributesV3?
        /// Private key flags for v3 templates specify the client compatibility, if the private key can be exported, if user input is required when using a private key, and if an alternate signature algorithm should be used.
        /// This member is required.
        public var privateKeyFlags: PcaConnectorAdClientTypes.PrivateKeyFlagsV3?
        /// Subject name flags describe the subject name and subject alternate name that is included in a certificate.
        /// This member is required.
        public var subjectNameFlags: PcaConnectorAdClientTypes.SubjectNameFlagsV3?
        /// List of templates in Active Directory that are superseded by this template.
        public var supersededTemplates: [Swift.String]?

        public init(
            certificateValidity: PcaConnectorAdClientTypes.CertificateValidity? = nil,
            enrollmentFlags: PcaConnectorAdClientTypes.EnrollmentFlagsV3? = nil,
            extensions: PcaConnectorAdClientTypes.ExtensionsV3? = nil,
            generalFlags: PcaConnectorAdClientTypes.GeneralFlagsV3? = nil,
            hashAlgorithm: PcaConnectorAdClientTypes.HashAlgorithm? = nil,
            privateKeyAttributes: PcaConnectorAdClientTypes.PrivateKeyAttributesV3? = nil,
            privateKeyFlags: PcaConnectorAdClientTypes.PrivateKeyFlagsV3? = nil,
            subjectNameFlags: PcaConnectorAdClientTypes.SubjectNameFlagsV3? = nil,
            supersededTemplates: [Swift.String]? = nil
        )
        {
            self.certificateValidity = certificateValidity
            self.enrollmentFlags = enrollmentFlags
            self.extensions = extensions
            self.generalFlags = generalFlags
            self.hashAlgorithm = hashAlgorithm
            self.privateKeyAttributes = privateKeyAttributes
            self.privateKeyFlags = privateKeyFlags
            self.subjectNameFlags = subjectNameFlags
            self.supersededTemplates = supersededTemplates
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// Template configurations for v4 template schema.
    public struct EnrollmentFlagsV4 {
        /// Allow renewal using the same key.
        public var enableKeyReuseOnNtTokenKeysetStorageFull: Swift.Bool?
        /// Include symmetric algorithms allowed by the subject.
        public var includeSymmetricAlgorithms: Swift.Bool?
        /// This flag instructs the CA to not include the security extension szOID_NTDS_CA_SECURITY_EXT (OID:1.3.6.1.4.1.311.25.2), as specified in [MS-WCCE] sections 2.2.2.7.7.4 and 3.2.2.6.2.1.4.5.9, in the issued certificate. This addresses a Windows Kerberos elevation-of-privilege vulnerability.
        public var noSecurityExtension: Swift.Bool?
        /// Delete expired or revoked certificates instead of archiving them.
        public var removeInvalidCertificateFromPersonalStore: Swift.Bool?
        /// Require user interaction when the subject is enrolled and the private key associated with the certificate is used.
        public var userInteractionRequired: Swift.Bool?

        public init(
            enableKeyReuseOnNtTokenKeysetStorageFull: Swift.Bool? = nil,
            includeSymmetricAlgorithms: Swift.Bool? = nil,
            noSecurityExtension: Swift.Bool? = nil,
            removeInvalidCertificateFromPersonalStore: Swift.Bool? = nil,
            userInteractionRequired: Swift.Bool? = nil
        )
        {
            self.enableKeyReuseOnNtTokenKeysetStorageFull = enableKeyReuseOnNtTokenKeysetStorageFull
            self.includeSymmetricAlgorithms = includeSymmetricAlgorithms
            self.noSecurityExtension = noSecurityExtension
            self.removeInvalidCertificateFromPersonalStore = removeInvalidCertificateFromPersonalStore
            self.userInteractionRequired = userInteractionRequired
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// Certificate extensions for v4 template schema
    public struct ExtensionsV4 {
        /// Application policies specify what the certificate is used for and its purpose.
        public var applicationPolicies: PcaConnectorAdClientTypes.ApplicationPolicies?
        /// The key usage extension defines the purpose (e.g., encipherment, signature) of the key contained in the certificate.
        /// This member is required.
        public var keyUsage: PcaConnectorAdClientTypes.KeyUsage?

        public init(
            applicationPolicies: PcaConnectorAdClientTypes.ApplicationPolicies? = nil,
            keyUsage: PcaConnectorAdClientTypes.KeyUsage? = nil
        )
        {
            self.applicationPolicies = applicationPolicies
            self.keyUsage = keyUsage
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// General flags for v4 template schema that defines if the template is for a machine or a user and if the template can be issued using autoenrollment.
    public struct GeneralFlagsV4 {
        /// Allows certificate issuance using autoenrollment. Set to TRUE to allow autoenrollment.
        public var autoEnrollment: Swift.Bool?
        /// Defines if the template is for machines or users. Set to TRUE if the template is for machines. Set to FALSE if the template is for users
        public var machineType: Swift.Bool?

        public init(
            autoEnrollment: Swift.Bool? = nil,
            machineType: Swift.Bool? = nil
        )
        {
            self.autoEnrollment = autoEnrollment
            self.machineType = machineType
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// Defines the attributes of the private key.
    public struct PrivateKeyAttributesV4 {
        /// Defines the algorithm used to generate the private key.
        public var algorithm: PcaConnectorAdClientTypes.PrivateKeyAlgorithm?
        /// Defines the cryptographic providers used to generate the private key.
        public var cryptoProviders: [Swift.String]?
        /// Defines the purpose of the private key. Set it to "KEY_EXCHANGE" or "SIGNATURE" value.
        /// This member is required.
        public var keySpec: PcaConnectorAdClientTypes.KeySpec?
        /// The key usage property defines the purpose of the private key contained in the certificate. You can specify specific purposes using property flags or all by using property type ALL.
        public var keyUsageProperty: PcaConnectorAdClientTypes.KeyUsageProperty?
        /// Set the minimum key length of the private key.
        /// This member is required.
        public var minimalKeyLength: Swift.Int?

        public init(
            algorithm: PcaConnectorAdClientTypes.PrivateKeyAlgorithm? = nil,
            cryptoProviders: [Swift.String]? = nil,
            keySpec: PcaConnectorAdClientTypes.KeySpec? = nil,
            keyUsageProperty: PcaConnectorAdClientTypes.KeyUsageProperty? = nil,
            minimalKeyLength: Swift.Int? = nil
        )
        {
            self.algorithm = algorithm
            self.cryptoProviders = cryptoProviders
            self.keySpec = keySpec
            self.keyUsageProperty = keyUsageProperty
            self.minimalKeyLength = minimalKeyLength
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// Private key flags for v4 templates specify the client compatibility, if the private key can be exported, if user input is required when using a private key, if an alternate signature algorithm should be used, and if certificates are renewed using the same private key.
    public struct PrivateKeyFlagsV4 {
        /// Defines the minimum client compatibility.
        /// This member is required.
        public var clientVersion: PcaConnectorAdClientTypes.ClientCompatibilityV4?
        /// Allows the private key to be exported.
        public var exportableKey: Swift.Bool?
        /// Requires the PKCS #1 v2.1 signature format for certificates. You should verify that your CA, objects, and applications can accept this signature format.
        public var requireAlternateSignatureAlgorithm: Swift.Bool?
        /// Renew certificate using the same private key.
        public var requireSameKeyRenewal: Swift.Bool?
        /// Require user input when using the private key for enrollment.
        public var strongKeyProtectionRequired: Swift.Bool?
        /// Specifies the cryptographic service provider category used to generate private keys. Set to TRUE to use Legacy Cryptographic Service Providers and FALSE to use Key Storage Providers.
        public var useLegacyProvider: Swift.Bool?

        public init(
            clientVersion: PcaConnectorAdClientTypes.ClientCompatibilityV4? = nil,
            exportableKey: Swift.Bool? = nil,
            requireAlternateSignatureAlgorithm: Swift.Bool? = nil,
            requireSameKeyRenewal: Swift.Bool? = nil,
            strongKeyProtectionRequired: Swift.Bool? = nil,
            useLegacyProvider: Swift.Bool? = nil
        )
        {
            self.clientVersion = clientVersion
            self.exportableKey = exportableKey
            self.requireAlternateSignatureAlgorithm = requireAlternateSignatureAlgorithm
            self.requireSameKeyRenewal = requireSameKeyRenewal
            self.strongKeyProtectionRequired = strongKeyProtectionRequired
            self.useLegacyProvider = useLegacyProvider
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// Information to include in the subject name and alternate subject name of the certificate. The subject name can be common name, directory path, DNS as common name, or left blank. You can optionally include email to the subject name for user templates. If you leave the subject name blank then you must set a subject alternate name. The subject alternate name (SAN) can include globally unique identifier (GUID), DNS, domain DNS, email, service principal name (SPN), and user principal name (UPN). You can leave the SAN blank. If you leave the SAN blank, then you must set a subject name.
    public struct SubjectNameFlagsV4 {
        /// Include the common name in the subject name.
        public var requireCommonName: Swift.Bool?
        /// Include the directory path in the subject name.
        public var requireDirectoryPath: Swift.Bool?
        /// Include the DNS as common name in the subject name.
        public var requireDnsAsCn: Swift.Bool?
        /// Include the subject's email in the subject name.
        public var requireEmail: Swift.Bool?
        /// Include the globally unique identifier (GUID) in the subject alternate name.
        public var sanRequireDirectoryGuid: Swift.Bool?
        /// Include the DNS in the subject alternate name.
        public var sanRequireDns: Swift.Bool?
        /// Include the domain DNS in the subject alternate name.
        public var sanRequireDomainDns: Swift.Bool?
        /// Include the subject's email in the subject alternate name.
        public var sanRequireEmail: Swift.Bool?
        /// Include the service principal name (SPN) in the subject alternate name.
        public var sanRequireSpn: Swift.Bool?
        /// Include the user principal name (UPN) in the subject alternate name.
        public var sanRequireUpn: Swift.Bool?

        public init(
            requireCommonName: Swift.Bool? = nil,
            requireDirectoryPath: Swift.Bool? = nil,
            requireDnsAsCn: Swift.Bool? = nil,
            requireEmail: Swift.Bool? = nil,
            sanRequireDirectoryGuid: Swift.Bool? = nil,
            sanRequireDns: Swift.Bool? = nil,
            sanRequireDomainDns: Swift.Bool? = nil,
            sanRequireEmail: Swift.Bool? = nil,
            sanRequireSpn: Swift.Bool? = nil,
            sanRequireUpn: Swift.Bool? = nil
        )
        {
            self.requireCommonName = requireCommonName
            self.requireDirectoryPath = requireDirectoryPath
            self.requireDnsAsCn = requireDnsAsCn
            self.requireEmail = requireEmail
            self.sanRequireDirectoryGuid = sanRequireDirectoryGuid
            self.sanRequireDns = sanRequireDns
            self.sanRequireDomainDns = sanRequireDomainDns
            self.sanRequireEmail = sanRequireEmail
            self.sanRequireSpn = sanRequireSpn
            self.sanRequireUpn = sanRequireUpn
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// v4 template schema that can use either Legacy Cryptographic Providers or Key Storage Providers.
    public struct TemplateV4 {
        /// Certificate validity describes the validity and renewal periods of a certificate.
        /// This member is required.
        public var certificateValidity: PcaConnectorAdClientTypes.CertificateValidity?
        /// Enrollment flags describe the enrollment settings for certificates using the existing private key and deleting expired or revoked certificates.
        /// This member is required.
        public var enrollmentFlags: PcaConnectorAdClientTypes.EnrollmentFlagsV4?
        /// Extensions describe the key usage extensions and application policies for a template.
        /// This member is required.
        public var extensions: PcaConnectorAdClientTypes.ExtensionsV4?
        /// General flags describe whether the template is used for computers or users and if the template can be used with autoenrollment.
        /// This member is required.
        public var generalFlags: PcaConnectorAdClientTypes.GeneralFlagsV4?
        /// Specifies the hash algorithm used to hash the private key. Hash algorithm can only be specified when using Key Storage Providers.
        public var hashAlgorithm: PcaConnectorAdClientTypes.HashAlgorithm?
        /// Private key attributes allow you to specify the minimal key length, key spec, key usage, and cryptographic providers for the private key of a certificate for v4 templates. V4 templates allow you to use either Key Storage Providers or Legacy Cryptographic Service Providers. You specify the cryptography provider category in private key flags.
        /// This member is required.
        public var privateKeyAttributes: PcaConnectorAdClientTypes.PrivateKeyAttributesV4?
        /// Private key flags for v4 templates specify the client compatibility, if the private key can be exported, if user input is required when using a private key, if an alternate signature algorithm should be used, and if certificates are renewed using the same private key.
        /// This member is required.
        public var privateKeyFlags: PcaConnectorAdClientTypes.PrivateKeyFlagsV4?
        /// Subject name flags describe the subject name and subject alternate name that is included in a certificate.
        /// This member is required.
        public var subjectNameFlags: PcaConnectorAdClientTypes.SubjectNameFlagsV4?
        /// List of templates in Active Directory that are superseded by this template.
        public var supersededTemplates: [Swift.String]?

        public init(
            certificateValidity: PcaConnectorAdClientTypes.CertificateValidity? = nil,
            enrollmentFlags: PcaConnectorAdClientTypes.EnrollmentFlagsV4? = nil,
            extensions: PcaConnectorAdClientTypes.ExtensionsV4? = nil,
            generalFlags: PcaConnectorAdClientTypes.GeneralFlagsV4? = nil,
            hashAlgorithm: PcaConnectorAdClientTypes.HashAlgorithm? = nil,
            privateKeyAttributes: PcaConnectorAdClientTypes.PrivateKeyAttributesV4? = nil,
            privateKeyFlags: PcaConnectorAdClientTypes.PrivateKeyFlagsV4? = nil,
            subjectNameFlags: PcaConnectorAdClientTypes.SubjectNameFlagsV4? = nil,
            supersededTemplates: [Swift.String]? = nil
        )
        {
            self.certificateValidity = certificateValidity
            self.enrollmentFlags = enrollmentFlags
            self.extensions = extensions
            self.generalFlags = generalFlags
            self.hashAlgorithm = hashAlgorithm
            self.privateKeyAttributes = privateKeyAttributes
            self.privateKeyFlags = privateKeyFlags
            self.subjectNameFlags = subjectNameFlags
            self.supersededTemplates = supersededTemplates
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.
    public enum TemplateDefinition {
        /// Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.
        case templatev2(PcaConnectorAdClientTypes.TemplateV2)
        /// Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.
        case templatev3(PcaConnectorAdClientTypes.TemplateV3)
        /// Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.
        case templatev4(PcaConnectorAdClientTypes.TemplateV4)
        case sdkUnknown(Swift.String)
    }

}

public struct CreateTemplateInput {
    /// Idempotency token.
    public var clientToken: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
    /// This member is required.
    public var connectorArn: Swift.String?
    /// Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.
    /// This member is required.
    public var definition: PcaConnectorAdClientTypes.TemplateDefinition?
    /// Name of the template. The template name must be unique.
    /// This member is required.
    public var name: Swift.String?
    /// Metadata assigned to a template consisting of a key-value pair.
    public var tags: [Swift.String: Swift.String]?

    public init(
        clientToken: Swift.String? = nil,
        connectorArn: Swift.String? = nil,
        definition: PcaConnectorAdClientTypes.TemplateDefinition? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.clientToken = clientToken
        self.connectorArn = connectorArn
        self.definition = definition
        self.name = name
        self.tags = tags
    }
}

public struct CreateTemplateOutput {
    /// If successful, the Amazon Resource Name (ARN) of the template.
    public var templateArn: Swift.String?

    public init(
        templateArn: Swift.String? = nil
    )
    {
        self.templateArn = templateArn
    }
}

public struct CreateTemplateGroupAccessControlEntryInput {
    /// Allow or deny permissions for an Active Directory group to enroll or autoenroll certificates for a template.
    /// This member is required.
    public var accessRights: PcaConnectorAdClientTypes.AccessRights?
    /// Idempotency token.
    public var clientToken: Swift.String?
    /// Name of the Active Directory group. This name does not need to match the group name in Active Directory.
    /// This member is required.
    public var groupDisplayName: Swift.String?
    /// Security identifier (SID) of the group object from Active Directory. The SID starts with "S-".
    /// This member is required.
    public var groupSecurityIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
    /// This member is required.
    public var templateArn: Swift.String?

    public init(
        accessRights: PcaConnectorAdClientTypes.AccessRights? = nil,
        clientToken: Swift.String? = nil,
        groupDisplayName: Swift.String? = nil,
        groupSecurityIdentifier: Swift.String? = nil,
        templateArn: Swift.String? = nil
    )
    {
        self.accessRights = accessRights
        self.clientToken = clientToken
        self.groupDisplayName = groupDisplayName
        self.groupSecurityIdentifier = groupSecurityIdentifier
        self.templateArn = templateArn
    }
}

public struct DeleteDirectoryRegistrationInput {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
    /// This member is required.
    public var directoryRegistrationArn: Swift.String?

    public init(
        directoryRegistrationArn: Swift.String? = nil
    )
    {
        self.directoryRegistrationArn = directoryRegistrationArn
    }
}

public struct DeleteServicePrincipalNameInput {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
    /// This member is required.
    public var connectorArn: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
    /// This member is required.
    public var directoryRegistrationArn: Swift.String?

    public init(
        connectorArn: Swift.String? = nil,
        directoryRegistrationArn: Swift.String? = nil
    )
    {
        self.connectorArn = connectorArn
        self.directoryRegistrationArn = directoryRegistrationArn
    }
}

public struct DeleteTemplateInput {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
    /// This member is required.
    public var templateArn: Swift.String?

    public init(
        templateArn: Swift.String? = nil
    )
    {
        self.templateArn = templateArn
    }
}

public struct DeleteTemplateGroupAccessControlEntryInput {
    /// Security identifier (SID) of the group object from Active Directory. The SID starts with "S-".
    /// This member is required.
    public var groupSecurityIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
    /// This member is required.
    public var templateArn: Swift.String?

    public init(
        groupSecurityIdentifier: Swift.String? = nil,
        templateArn: Swift.String? = nil
    )
    {
        self.groupSecurityIdentifier = groupSecurityIdentifier
        self.templateArn = templateArn
    }
}

extension PcaConnectorAdClientTypes {

    public enum DirectoryRegistrationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [DirectoryRegistrationStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PcaConnectorAdClientTypes {

    public enum DirectoryRegistrationStatusReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case directoryAccessDenied
        case directoryNotActive
        case directoryNotReachable
        case directoryResourceNotFound
        case directoryTypeNotSupported
        case internalFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [DirectoryRegistrationStatusReason] {
            return [
                .directoryAccessDenied,
                .directoryNotActive,
                .directoryNotReachable,
                .directoryResourceNotFound,
                .directoryTypeNotSupported,
                .internalFailure
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .directoryAccessDenied: return "DIRECTORY_ACCESS_DENIED"
            case .directoryNotActive: return "DIRECTORY_NOT_ACTIVE"
            case .directoryNotReachable: return "DIRECTORY_NOT_REACHABLE"
            case .directoryResourceNotFound: return "DIRECTORY_RESOURCE_NOT_FOUND"
            case .directoryTypeNotSupported: return "DIRECTORY_TYPE_NOT_SUPPORTED"
            case .internalFailure: return "INTERNAL_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PcaConnectorAdClientTypes {
    /// The directory registration represents the authorization of the connector service with a directory.
    public struct DirectoryRegistration {
        /// The Amazon Resource Name (ARN) that was returned when you called CreateDirectoryRegistration.
        public var arn: Swift.String?
        /// The date and time that the directory registration was created.
        public var createdAt: Foundation.Date?
        /// The identifier of the Active Directory.
        public var directoryId: Swift.String?
        /// Status of the directory registration.
        public var status: PcaConnectorAdClientTypes.DirectoryRegistrationStatus?
        /// Additional information about the directory registration status if the status is failed.
        public var statusReason: PcaConnectorAdClientTypes.DirectoryRegistrationStatusReason?
        /// The date and time that the directory registration was updated.
        public var updatedAt: Foundation.Date?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            directoryId: Swift.String? = nil,
            status: PcaConnectorAdClientTypes.DirectoryRegistrationStatus? = nil,
            statusReason: PcaConnectorAdClientTypes.DirectoryRegistrationStatusReason? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.directoryId = directoryId
            self.status = status
            self.statusReason = statusReason
            self.updatedAt = updatedAt
        }
    }

}

extension PcaConnectorAdClientTypes {
    /// The directory registration represents the authorization of the connector service with the Active Directory.
    public struct DirectoryRegistrationSummary {
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
        public var arn: Swift.String?
        /// The date and time that the directory registration was created.
        public var createdAt: Foundation.Date?
        /// The identifier of the Active Directory.
        public var directoryId: Swift.String?
        /// Status of the directory registration.
        public var status: PcaConnectorAdClientTypes.DirectoryRegistrationStatus?
        /// Additional information about the directory registration status if the status is failed.
        public var statusReason: PcaConnectorAdClientTypes.DirectoryRegistrationStatusReason?
        /// The date and time that the directory registration was updated.
        public var updatedAt: Foundation.Date?

        public init(
            arn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            directoryId: Swift.String? = nil,
            status: PcaConnectorAdClientTypes.DirectoryRegistrationStatus? = nil,
            statusReason: PcaConnectorAdClientTypes.DirectoryRegistrationStatusReason? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.directoryId = directoryId
            self.status = status
            self.statusReason = statusReason
            self.updatedAt = updatedAt
        }
    }

}

public struct GetDirectoryRegistrationInput {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
    /// This member is required.
    public var directoryRegistrationArn: Swift.String?

    public init(
        directoryRegistrationArn: Swift.String? = nil
    )
    {
        self.directoryRegistrationArn = directoryRegistrationArn
    }
}

public struct GetDirectoryRegistrationOutput {
    /// The directory registration represents the authorization of the connector service with a directory.
    public var directoryRegistration: PcaConnectorAdClientTypes.DirectoryRegistration?

    public init(
        directoryRegistration: PcaConnectorAdClientTypes.DirectoryRegistration? = nil
    )
    {
        self.directoryRegistration = directoryRegistration
    }
}

public struct ListDirectoryRegistrationsInput {
    /// Use this parameter when paginating results to specify the maximum number of items to return in the response on each page. If additional items exist beyond the number you specify, the NextToken element is sent in the response. Use this NextToken value in a subsequent request to retrieve additional items.
    public var maxResults: Swift.Int?
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListDirectoryRegistrationsOutput {
    /// Summary information about each directory registration you have created.
    public var directoryRegistrations: [PcaConnectorAdClientTypes.DirectoryRegistrationSummary]?
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?

    public init(
        directoryRegistrations: [PcaConnectorAdClientTypes.DirectoryRegistrationSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.directoryRegistrations = directoryRegistrations
        self.nextToken = nextToken
    }
}

public struct GetServicePrincipalNameInput {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
    /// This member is required.
    public var connectorArn: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
    /// This member is required.
    public var directoryRegistrationArn: Swift.String?

    public init(
        connectorArn: Swift.String? = nil,
        directoryRegistrationArn: Swift.String? = nil
    )
    {
        self.connectorArn = connectorArn
        self.directoryRegistrationArn = directoryRegistrationArn
    }
}

extension PcaConnectorAdClientTypes {

    public enum ServicePrincipalNameStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [ServicePrincipalNameStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PcaConnectorAdClientTypes {

    public enum ServicePrincipalNameStatusReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case directoryAccessDenied
        case directoryNotReachable
        case directoryResourceNotFound
        case internalFailure
        case spnExistsOnDifferentAdObject
        case sdkUnknown(Swift.String)

        public static var allCases: [ServicePrincipalNameStatusReason] {
            return [
                .directoryAccessDenied,
                .directoryNotReachable,
                .directoryResourceNotFound,
                .internalFailure,
                .spnExistsOnDifferentAdObject
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .directoryAccessDenied: return "DIRECTORY_ACCESS_DENIED"
            case .directoryNotReachable: return "DIRECTORY_NOT_REACHABLE"
            case .directoryResourceNotFound: return "DIRECTORY_RESOURCE_NOT_FOUND"
            case .internalFailure: return "INTERNAL_FAILURE"
            case .spnExistsOnDifferentAdObject: return "SPN_EXISTS_ON_DIFFERENT_AD_OBJECT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PcaConnectorAdClientTypes {
    /// The service principal name that the connector uses to authenticate with Active Directory.
    public struct ServicePrincipalName {
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector.html](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
        public var connectorArn: Swift.String?
        /// The date and time that the service principal name was created.
        public var createdAt: Foundation.Date?
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
        public var directoryRegistrationArn: Swift.String?
        /// The status of a service principal name.
        public var status: PcaConnectorAdClientTypes.ServicePrincipalNameStatus?
        /// Additional information for the status of a service principal name if the status is failed.
        public var statusReason: PcaConnectorAdClientTypes.ServicePrincipalNameStatusReason?
        /// The date and time that the service principal name was updated.
        public var updatedAt: Foundation.Date?

        public init(
            connectorArn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            directoryRegistrationArn: Swift.String? = nil,
            status: PcaConnectorAdClientTypes.ServicePrincipalNameStatus? = nil,
            statusReason: PcaConnectorAdClientTypes.ServicePrincipalNameStatusReason? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.connectorArn = connectorArn
            self.createdAt = createdAt
            self.directoryRegistrationArn = directoryRegistrationArn
            self.status = status
            self.statusReason = statusReason
            self.updatedAt = updatedAt
        }
    }

}

public struct GetServicePrincipalNameOutput {
    /// The service principal name that the connector uses to authenticate with Active Directory.
    public var servicePrincipalName: PcaConnectorAdClientTypes.ServicePrincipalName?

    public init(
        servicePrincipalName: PcaConnectorAdClientTypes.ServicePrincipalName? = nil
    )
    {
        self.servicePrincipalName = servicePrincipalName
    }
}

public struct GetTemplateInput {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
    /// This member is required.
    public var templateArn: Swift.String?

    public init(
        templateArn: Swift.String? = nil
    )
    {
        self.templateArn = templateArn
    }
}

extension PcaConnectorAdClientTypes {
    /// The revision version of the template. Template updates will increment the minor revision. Re-enrolling all certificate holders will increment the major revision.
    public struct TemplateRevision {
        /// The revision version of the template. Re-enrolling all certificate holders will increment the major revision.
        /// This member is required.
        public var majorRevision: Swift.Int?
        /// The revision version of the template. Re-enrolling all certificate holders will increment the major revision.
        /// This member is required.
        public var minorRevision: Swift.Int?

        public init(
            majorRevision: Swift.Int? = nil,
            minorRevision: Swift.Int? = nil
        )
        {
            self.majorRevision = majorRevision
            self.minorRevision = minorRevision
        }
    }

}

extension PcaConnectorAdClientTypes {

    public enum TemplateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [TemplateStatus] {
            return [
                .active,
                .deleting
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension PcaConnectorAdClientTypes {
    /// An Active Directory compatible certificate template. Connectors issue certificates against these templates based on the requestor's Active Directory group membership.
    public struct Template {
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
        public var arn: Swift.String?
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
        public var connectorArn: Swift.String?
        /// The date and time that the template was created.
        public var createdAt: Foundation.Date?
        /// Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.
        public var definition: PcaConnectorAdClientTypes.TemplateDefinition?
        /// Name of the templates. Template names must be unique.
        public var name: Swift.String?
        /// Object identifier of a template.
        public var objectIdentifier: Swift.String?
        /// The template schema version. Template schema versions can be v2, v3, or v4. The template configuration options change based on the template schema version.
        public var policySchema: Swift.Int?
        /// The version of the template. Template updates will increment the minor revision. Re-enrolling all certificate holders will increment the major revision.
        public var revision: PcaConnectorAdClientTypes.TemplateRevision?
        /// Status of the template. Status can be creating, active, deleting, or failed.
        public var status: PcaConnectorAdClientTypes.TemplateStatus?
        /// The date and time that the template was updated.
        public var updatedAt: Foundation.Date?

        public init(
            arn: Swift.String? = nil,
            connectorArn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            definition: PcaConnectorAdClientTypes.TemplateDefinition? = nil,
            name: Swift.String? = nil,
            objectIdentifier: Swift.String? = nil,
            policySchema: Swift.Int? = nil,
            revision: PcaConnectorAdClientTypes.TemplateRevision? = nil,
            status: PcaConnectorAdClientTypes.TemplateStatus? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.arn = arn
            self.connectorArn = connectorArn
            self.createdAt = createdAt
            self.definition = definition
            self.name = name
            self.objectIdentifier = objectIdentifier
            self.policySchema = policySchema
            self.revision = revision
            self.status = status
            self.updatedAt = updatedAt
        }
    }

}

public struct GetTemplateOutput {
    /// A certificate template that the connector uses to issue certificates from a private CA.
    public var template: PcaConnectorAdClientTypes.Template?

    public init(
        template: PcaConnectorAdClientTypes.Template? = nil
    )
    {
        self.template = template
    }
}

public struct GetTemplateGroupAccessControlEntryInput {
    /// Security identifier (SID) of the group object from Active Directory. The SID starts with "S-".
    /// This member is required.
    public var groupSecurityIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
    /// This member is required.
    public var templateArn: Swift.String?

    public init(
        groupSecurityIdentifier: Swift.String? = nil,
        templateArn: Swift.String? = nil
    )
    {
        self.groupSecurityIdentifier = groupSecurityIdentifier
        self.templateArn = templateArn
    }
}

public struct GetTemplateGroupAccessControlEntryOutput {
    /// An access control entry allows or denies an Active Directory group from enrolling and/or autoenrolling with a template.
    public var accessControlEntry: PcaConnectorAdClientTypes.AccessControlEntry?

    public init(
        accessControlEntry: PcaConnectorAdClientTypes.AccessControlEntry? = nil
    )
    {
        self.accessControlEntry = accessControlEntry
    }
}

public struct ListServicePrincipalNamesInput {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
    /// This member is required.
    public var directoryRegistrationArn: Swift.String?
    /// Use this parameter when paginating results to specify the maximum number of items to return in the response on each page. If additional items exist beyond the number you specify, the NextToken element is sent in the response. Use this NextToken value in a subsequent request to retrieve additional items.
    public var maxResults: Swift.Int?
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?

    public init(
        directoryRegistrationArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.directoryRegistrationArn = directoryRegistrationArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension PcaConnectorAdClientTypes {
    /// The service principal name that the connector uses to authenticate with Active Directory.
    public struct ServicePrincipalNameSummary {
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
        public var connectorArn: Swift.String?
        /// The date and time that the service principal name was created.
        public var createdAt: Foundation.Date?
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
        public var directoryRegistrationArn: Swift.String?
        /// The status of a service principal name.
        public var status: PcaConnectorAdClientTypes.ServicePrincipalNameStatus?
        /// Additional information for the status of a service principal name if the status is failed.
        public var statusReason: PcaConnectorAdClientTypes.ServicePrincipalNameStatusReason?
        /// Time when the service principal name was updated.
        public var updatedAt: Foundation.Date?

        public init(
            connectorArn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            directoryRegistrationArn: Swift.String? = nil,
            status: PcaConnectorAdClientTypes.ServicePrincipalNameStatus? = nil,
            statusReason: PcaConnectorAdClientTypes.ServicePrincipalNameStatusReason? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.connectorArn = connectorArn
            self.createdAt = createdAt
            self.directoryRegistrationArn = directoryRegistrationArn
            self.status = status
            self.statusReason = statusReason
            self.updatedAt = updatedAt
        }
    }

}

public struct ListServicePrincipalNamesOutput {
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?
    /// The service principal name, if any, that the connector uses to authenticate with Active Directory.
    public var servicePrincipalNames: [PcaConnectorAdClientTypes.ServicePrincipalNameSummary]?

    public init(
        nextToken: Swift.String? = nil,
        servicePrincipalNames: [PcaConnectorAdClientTypes.ServicePrincipalNameSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.servicePrincipalNames = servicePrincipalNames
    }
}

public struct ListTagsForResourceInput {
    /// The Amazon Resource Name (ARN) that was returned when you created the resource.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput {
    /// The tags, if any, that are associated with your resource.
    public var tags: [Swift.String: Swift.String]?

    public init(
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

public struct ListTemplateGroupAccessControlEntriesInput {
    /// Use this parameter when paginating results to specify the maximum number of items to return in the response on each page. If additional items exist beyond the number you specify, the NextToken element is sent in the response. Use this NextToken value in a subsequent request to retrieve additional items.
    public var maxResults: Swift.Int?
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
    /// This member is required.
    public var templateArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        templateArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.templateArn = templateArn
    }
}

public struct ListTemplateGroupAccessControlEntriesOutput {
    /// An access control entry grants or denies permission to an Active Directory group to enroll certificates for a template.
    public var accessControlEntries: [PcaConnectorAdClientTypes.AccessControlEntrySummary]?
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?

    public init(
        accessControlEntries: [PcaConnectorAdClientTypes.AccessControlEntrySummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accessControlEntries = accessControlEntries
        self.nextToken = nextToken
    }
}

public struct ListTemplatesInput {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
    /// This member is required.
    public var connectorArn: Swift.String?
    /// Use this parameter when paginating results to specify the maximum number of items to return in the response on each page. If additional items exist beyond the number you specify, the NextToken element is sent in the response. Use this NextToken value in a subsequent request to retrieve additional items.
    public var maxResults: Swift.Int?
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?

    public init(
        connectorArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.connectorArn = connectorArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension PcaConnectorAdClientTypes {
    /// An Active Directory compatible certificate template. Connectors issue certificates against these templates based on the requestor's Active Directory group membership.
    public struct TemplateSummary {
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
        public var arn: Swift.String?
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
        public var connectorArn: Swift.String?
        /// The date and time that the template was created.
        public var createdAt: Foundation.Date?
        /// Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.
        public var definition: PcaConnectorAdClientTypes.TemplateDefinition?
        /// Name of the template. The template name must be unique.
        public var name: Swift.String?
        /// Object identifier of a template.
        public var objectIdentifier: Swift.String?
        /// The template schema version. Template schema versions can be v2, v3, or v4. The template configuration options change based on the template schema version.
        public var policySchema: Swift.Int?
        /// The revision version of the template. Template updates will increment the minor revision. Re-enrolling all certificate holders will increment the major revision.
        public var revision: PcaConnectorAdClientTypes.TemplateRevision?
        /// Status of the template. Status can be creating, active, deleting, or failed.
        public var status: PcaConnectorAdClientTypes.TemplateStatus?
        /// The date and time that the template was updated.
        public var updatedAt: Foundation.Date?

        public init(
            arn: Swift.String? = nil,
            connectorArn: Swift.String? = nil,
            createdAt: Foundation.Date? = nil,
            definition: PcaConnectorAdClientTypes.TemplateDefinition? = nil,
            name: Swift.String? = nil,
            objectIdentifier: Swift.String? = nil,
            policySchema: Swift.Int? = nil,
            revision: PcaConnectorAdClientTypes.TemplateRevision? = nil,
            status: PcaConnectorAdClientTypes.TemplateStatus? = nil,
            updatedAt: Foundation.Date? = nil
        )
        {
            self.arn = arn
            self.connectorArn = connectorArn
            self.createdAt = createdAt
            self.definition = definition
            self.name = name
            self.objectIdentifier = objectIdentifier
            self.policySchema = policySchema
            self.revision = revision
            self.status = status
            self.updatedAt = updatedAt
        }
    }

}

public struct ListTemplatesOutput {
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?
    /// Custom configuration templates used when issuing a certificate.
    public var templates: [PcaConnectorAdClientTypes.TemplateSummary]?

    public init(
        nextToken: Swift.String? = nil,
        templates: [PcaConnectorAdClientTypes.TemplateSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.templates = templates
    }
}

public struct TagResourceInput {
    /// The Amazon Resource Name (ARN) that was returned when you created the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Metadata assigned to a directory registration consisting of a key-value pair.
    /// This member is required.
    public var tags: [Swift.String: Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String: Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct UpdateTemplateGroupAccessControlEntryInput {
    /// Allow or deny permissions for an Active Directory group to enroll or autoenroll certificates for a template.
    public var accessRights: PcaConnectorAdClientTypes.AccessRights?
    /// Name of the Active Directory group. This name does not need to match the group name in Active Directory.
    public var groupDisplayName: Swift.String?
    /// Security identifier (SID) of the group object from Active Directory. The SID starts with "S-".
    /// This member is required.
    public var groupSecurityIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
    /// This member is required.
    public var templateArn: Swift.String?

    public init(
        accessRights: PcaConnectorAdClientTypes.AccessRights? = nil,
        groupDisplayName: Swift.String? = nil,
        groupSecurityIdentifier: Swift.String? = nil,
        templateArn: Swift.String? = nil
    )
    {
        self.accessRights = accessRights
        self.groupDisplayName = groupDisplayName
        self.groupSecurityIdentifier = groupSecurityIdentifier
        self.templateArn = templateArn
    }
}

public struct UpdateTemplateInput {
    /// Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.
    public var definition: PcaConnectorAdClientTypes.TemplateDefinition?
    /// This setting allows the major version of a template to be increased automatically. All members of Active Directory groups that are allowed to enroll with a template will receive a new certificate issued using that template.
    public var reenrollAllCertificateHolders: Swift.Bool?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
    /// This member is required.
    public var templateArn: Swift.String?

    public init(
        definition: PcaConnectorAdClientTypes.TemplateDefinition? = nil,
        reenrollAllCertificateHolders: Swift.Bool? = nil,
        templateArn: Swift.String? = nil
    )
    {
        self.definition = definition
        self.reenrollAllCertificateHolders = reenrollAllCertificateHolders
        self.templateArn = templateArn
    }
}

public struct UntagResourceInput {
    /// The Amazon Resource Name (ARN) that was returned when you created the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Specifies a list of tag keys that you want to remove from the specified resources.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

extension CreateConnectorInput {

    static func urlPathProvider(_ value: CreateConnectorInput) -> Swift.String? {
        return "/connectors"
    }
}

extension CreateDirectoryRegistrationInput {

    static func urlPathProvider(_ value: CreateDirectoryRegistrationInput) -> Swift.String? {
        return "/directoryRegistrations"
    }
}

extension CreateServicePrincipalNameInput {

    static func urlPathProvider(_ value: CreateServicePrincipalNameInput) -> Swift.String? {
        guard let directoryRegistrationArn = value.directoryRegistrationArn else {
            return nil
        }
        guard let connectorArn = value.connectorArn else {
            return nil
        }
        return "/directoryRegistrations/\(directoryRegistrationArn.urlPercentEncoding())/servicePrincipalNames/\(connectorArn.urlPercentEncoding())"
    }
}

extension CreateTemplateInput {

    static func urlPathProvider(_ value: CreateTemplateInput) -> Swift.String? {
        return "/templates"
    }
}

extension CreateTemplateGroupAccessControlEntryInput {

    static func urlPathProvider(_ value: CreateTemplateGroupAccessControlEntryInput) -> Swift.String? {
        guard let templateArn = value.templateArn else {
            return nil
        }
        return "/templates/\(templateArn.urlPercentEncoding())/accessControlEntries"
    }
}

extension DeleteConnectorInput {

    static func urlPathProvider(_ value: DeleteConnectorInput) -> Swift.String? {
        guard let connectorArn = value.connectorArn else {
            return nil
        }
        return "/connectors/\(connectorArn.urlPercentEncoding())"
    }
}

extension DeleteDirectoryRegistrationInput {

    static func urlPathProvider(_ value: DeleteDirectoryRegistrationInput) -> Swift.String? {
        guard let directoryRegistrationArn = value.directoryRegistrationArn else {
            return nil
        }
        return "/directoryRegistrations/\(directoryRegistrationArn.urlPercentEncoding())"
    }
}

extension DeleteServicePrincipalNameInput {

    static func urlPathProvider(_ value: DeleteServicePrincipalNameInput) -> Swift.String? {
        guard let directoryRegistrationArn = value.directoryRegistrationArn else {
            return nil
        }
        guard let connectorArn = value.connectorArn else {
            return nil
        }
        return "/directoryRegistrations/\(directoryRegistrationArn.urlPercentEncoding())/servicePrincipalNames/\(connectorArn.urlPercentEncoding())"
    }
}

extension DeleteTemplateInput {

    static func urlPathProvider(_ value: DeleteTemplateInput) -> Swift.String? {
        guard let templateArn = value.templateArn else {
            return nil
        }
        return "/templates/\(templateArn.urlPercentEncoding())"
    }
}

extension DeleteTemplateGroupAccessControlEntryInput {

    static func urlPathProvider(_ value: DeleteTemplateGroupAccessControlEntryInput) -> Swift.String? {
        guard let templateArn = value.templateArn else {
            return nil
        }
        guard let groupSecurityIdentifier = value.groupSecurityIdentifier else {
            return nil
        }
        return "/templates/\(templateArn.urlPercentEncoding())/accessControlEntries/\(groupSecurityIdentifier.urlPercentEncoding())"
    }
}

extension GetConnectorInput {

    static func urlPathProvider(_ value: GetConnectorInput) -> Swift.String? {
        guard let connectorArn = value.connectorArn else {
            return nil
        }
        return "/connectors/\(connectorArn.urlPercentEncoding())"
    }
}

extension GetDirectoryRegistrationInput {

    static func urlPathProvider(_ value: GetDirectoryRegistrationInput) -> Swift.String? {
        guard let directoryRegistrationArn = value.directoryRegistrationArn else {
            return nil
        }
        return "/directoryRegistrations/\(directoryRegistrationArn.urlPercentEncoding())"
    }
}

extension GetServicePrincipalNameInput {

    static func urlPathProvider(_ value: GetServicePrincipalNameInput) -> Swift.String? {
        guard let directoryRegistrationArn = value.directoryRegistrationArn else {
            return nil
        }
        guard let connectorArn = value.connectorArn else {
            return nil
        }
        return "/directoryRegistrations/\(directoryRegistrationArn.urlPercentEncoding())/servicePrincipalNames/\(connectorArn.urlPercentEncoding())"
    }
}

extension GetTemplateInput {

    static func urlPathProvider(_ value: GetTemplateInput) -> Swift.String? {
        guard let templateArn = value.templateArn else {
            return nil
        }
        return "/templates/\(templateArn.urlPercentEncoding())"
    }
}

extension GetTemplateGroupAccessControlEntryInput {

    static func urlPathProvider(_ value: GetTemplateGroupAccessControlEntryInput) -> Swift.String? {
        guard let templateArn = value.templateArn else {
            return nil
        }
        guard let groupSecurityIdentifier = value.groupSecurityIdentifier else {
            return nil
        }
        return "/templates/\(templateArn.urlPercentEncoding())/accessControlEntries/\(groupSecurityIdentifier.urlPercentEncoding())"
    }
}

extension ListConnectorsInput {

    static func urlPathProvider(_ value: ListConnectorsInput) -> Swift.String? {
        return "/connectors"
    }
}

extension ListConnectorsInput {

    static func queryItemProvider(_ value: ListConnectorsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListDirectoryRegistrationsInput {

    static func urlPathProvider(_ value: ListDirectoryRegistrationsInput) -> Swift.String? {
        return "/directoryRegistrations"
    }
}

extension ListDirectoryRegistrationsInput {

    static func queryItemProvider(_ value: ListDirectoryRegistrationsInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListServicePrincipalNamesInput {

    static func urlPathProvider(_ value: ListServicePrincipalNamesInput) -> Swift.String? {
        guard let directoryRegistrationArn = value.directoryRegistrationArn else {
            return nil
        }
        return "/directoryRegistrations/\(directoryRegistrationArn.urlPercentEncoding())/servicePrincipalNames"
    }
}

extension ListServicePrincipalNamesInput {

    static func queryItemProvider(_ value: ListServicePrincipalNamesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension ListTemplateGroupAccessControlEntriesInput {

    static func urlPathProvider(_ value: ListTemplateGroupAccessControlEntriesInput) -> Swift.String? {
        guard let templateArn = value.templateArn else {
            return nil
        }
        return "/templates/\(templateArn.urlPercentEncoding())/accessControlEntries"
    }
}

extension ListTemplateGroupAccessControlEntriesInput {

    static func queryItemProvider(_ value: ListTemplateGroupAccessControlEntriesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension ListTemplatesInput {

    static func urlPathProvider(_ value: ListTemplatesInput) -> Swift.String? {
        return "/templates"
    }
}

extension ListTemplatesInput {

    static func queryItemProvider(_ value: ListTemplatesInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let connectorArn = value.connectorArn else {
            let message = "Creating a URL Query Item failed. connectorArn is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        let connectorArnQueryItem = Smithy.URIQueryItem(name: "ConnectorArn".urlPercentEncoding(), value: Swift.String(connectorArn).urlPercentEncoding())
        items.append(connectorArnQueryItem)
        if let nextToken = value.nextToken {
            let nextTokenQueryItem = Smithy.URIQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            items.append(nextTokenQueryItem)
        }
        if let maxResults = value.maxResults {
            let maxResultsQueryItem = Smithy.URIQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
            items.append(maxResultsQueryItem)
        }
        return items
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        guard let resourceArn = value.resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

extension UntagResourceInput {

    static func queryItemProvider(_ value: UntagResourceInput) throws -> [Smithy.URIQueryItem] {
        var items = [Smithy.URIQueryItem]()
        guard let tagKeys = value.tagKeys else {
            let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
            throw Smithy.ClientError.unknownError(message)
        }
        tagKeys.forEach { queryItemValue in
            let queryItem = Smithy.URIQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
            items.append(queryItem)
        }
        return items
    }
}

extension UpdateTemplateInput {

    static func urlPathProvider(_ value: UpdateTemplateInput) -> Swift.String? {
        guard let templateArn = value.templateArn else {
            return nil
        }
        return "/templates/\(templateArn.urlPercentEncoding())"
    }
}

extension UpdateTemplateGroupAccessControlEntryInput {

    static func urlPathProvider(_ value: UpdateTemplateGroupAccessControlEntryInput) -> Swift.String? {
        guard let templateArn = value.templateArn else {
            return nil
        }
        guard let groupSecurityIdentifier = value.groupSecurityIdentifier else {
            return nil
        }
        return "/templates/\(templateArn.urlPercentEncoding())/accessControlEntries/\(groupSecurityIdentifier.urlPercentEncoding())"
    }
}

extension CreateConnectorInput {

    static func write(value: CreateConnectorInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateAuthorityArn"].write(value.certificateAuthorityArn)
        try writer["ClientToken"].write(value.clientToken)
        try writer["DirectoryId"].write(value.directoryId)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        try writer["VpcInformation"].write(value.vpcInformation, with: PcaConnectorAdClientTypes.VpcInformation.write(value:to:))
    }
}

extension CreateDirectoryRegistrationInput {

    static func write(value: CreateDirectoryRegistrationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["DirectoryId"].write(value.directoryId)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateServicePrincipalNameInput {

    static func write(value: CreateServicePrincipalNameInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
    }
}

extension CreateTemplateInput {

    static func write(value: CreateTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientToken"].write(value.clientToken)
        try writer["ConnectorArn"].write(value.connectorArn)
        try writer["Definition"].write(value.definition, with: PcaConnectorAdClientTypes.TemplateDefinition.write(value:to:))
        try writer["Name"].write(value.name)
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension CreateTemplateGroupAccessControlEntryInput {

    static func write(value: CreateTemplateGroupAccessControlEntryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessRights"].write(value.accessRights, with: PcaConnectorAdClientTypes.AccessRights.write(value:to:))
        try writer["ClientToken"].write(value.clientToken)
        try writer["GroupDisplayName"].write(value.groupDisplayName)
        try writer["GroupSecurityIdentifier"].write(value.groupSecurityIdentifier)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Tags"].writeMap(value.tags, valueWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
    }
}

extension UpdateTemplateInput {

    static func write(value: UpdateTemplateInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Definition"].write(value.definition, with: PcaConnectorAdClientTypes.TemplateDefinition.write(value:to:))
        try writer["ReenrollAllCertificateHolders"].write(value.reenrollAllCertificateHolders)
    }
}

extension UpdateTemplateGroupAccessControlEntryInput {

    static func write(value: UpdateTemplateGroupAccessControlEntryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AccessRights"].write(value.accessRights, with: PcaConnectorAdClientTypes.AccessRights.write(value:to:))
        try writer["GroupDisplayName"].write(value.groupDisplayName)
    }
}

extension CreateConnectorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateConnectorOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateConnectorOutput()
        value.connectorArn = try reader["ConnectorArn"].readIfPresent()
        return value
    }
}

extension CreateDirectoryRegistrationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDirectoryRegistrationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDirectoryRegistrationOutput()
        value.directoryRegistrationArn = try reader["DirectoryRegistrationArn"].readIfPresent()
        return value
    }
}

extension CreateServicePrincipalNameOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateServicePrincipalNameOutput {
        return CreateServicePrincipalNameOutput()
    }
}

extension CreateTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateTemplateOutput()
        value.templateArn = try reader["TemplateArn"].readIfPresent()
        return value
    }
}

extension CreateTemplateGroupAccessControlEntryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateTemplateGroupAccessControlEntryOutput {
        return CreateTemplateGroupAccessControlEntryOutput()
    }
}

extension DeleteConnectorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteConnectorOutput {
        return DeleteConnectorOutput()
    }
}

extension DeleteDirectoryRegistrationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDirectoryRegistrationOutput {
        return DeleteDirectoryRegistrationOutput()
    }
}

extension DeleteServicePrincipalNameOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteServicePrincipalNameOutput {
        return DeleteServicePrincipalNameOutput()
    }
}

extension DeleteTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTemplateOutput {
        return DeleteTemplateOutput()
    }
}

extension DeleteTemplateGroupAccessControlEntryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteTemplateGroupAccessControlEntryOutput {
        return DeleteTemplateGroupAccessControlEntryOutput()
    }
}

extension GetConnectorOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetConnectorOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetConnectorOutput()
        value.connector = try reader["Connector"].readIfPresent(with: PcaConnectorAdClientTypes.Connector.read(from:))
        return value
    }
}

extension GetDirectoryRegistrationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetDirectoryRegistrationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetDirectoryRegistrationOutput()
        value.directoryRegistration = try reader["DirectoryRegistration"].readIfPresent(with: PcaConnectorAdClientTypes.DirectoryRegistration.read(from:))
        return value
    }
}

extension GetServicePrincipalNameOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetServicePrincipalNameOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetServicePrincipalNameOutput()
        value.servicePrincipalName = try reader["ServicePrincipalName"].readIfPresent(with: PcaConnectorAdClientTypes.ServicePrincipalName.read(from:))
        return value
    }
}

extension GetTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTemplateOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTemplateOutput()
        value.template = try reader["Template"].readIfPresent(with: PcaConnectorAdClientTypes.Template.read(from:))
        return value
    }
}

extension GetTemplateGroupAccessControlEntryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> GetTemplateGroupAccessControlEntryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = GetTemplateGroupAccessControlEntryOutput()
        value.accessControlEntry = try reader["AccessControlEntry"].readIfPresent(with: PcaConnectorAdClientTypes.AccessControlEntry.read(from:))
        return value
    }
}

extension ListConnectorsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListConnectorsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListConnectorsOutput()
        value.connectors = try reader["Connectors"].readListIfPresent(memberReadingClosure: PcaConnectorAdClientTypes.ConnectorSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDirectoryRegistrationsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDirectoryRegistrationsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDirectoryRegistrationsOutput()
        value.directoryRegistrations = try reader["DirectoryRegistrations"].readListIfPresent(memberReadingClosure: PcaConnectorAdClientTypes.DirectoryRegistrationSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListServicePrincipalNamesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListServicePrincipalNamesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListServicePrincipalNamesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.servicePrincipalNames = try reader["ServicePrincipalNames"].readListIfPresent(memberReadingClosure: PcaConnectorAdClientTypes.ServicePrincipalNameSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.tags = try reader["Tags"].readMapIfPresent(valueReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), keyNodeInfo: "key", valueNodeInfo: "value", isFlattened: false)
        return value
    }
}

extension ListTemplateGroupAccessControlEntriesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTemplateGroupAccessControlEntriesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTemplateGroupAccessControlEntriesOutput()
        value.accessControlEntries = try reader["AccessControlEntries"].readListIfPresent(memberReadingClosure: PcaConnectorAdClientTypes.AccessControlEntrySummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListTemplatesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTemplatesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTemplatesOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.templates = try reader["Templates"].readListIfPresent(memberReadingClosure: PcaConnectorAdClientTypes.TemplateSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateTemplateOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateTemplateOutput {
        return UpdateTemplateOutput()
    }
}

extension UpdateTemplateGroupAccessControlEntryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateTemplateGroupAccessControlEntryOutput {
        return UpdateTemplateGroupAccessControlEntryOutput()
    }
}

enum CreateConnectorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDirectoryRegistrationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateServicePrincipalNameOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateTemplateGroupAccessControlEntryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ServiceQuotaExceededException": return try ServiceQuotaExceededException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteConnectorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDirectoryRegistrationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteServicePrincipalNameOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteTemplateGroupAccessControlEntryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetConnectorOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetDirectoryRegistrationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetServicePrincipalNameOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum GetTemplateGroupAccessControlEntryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListConnectorsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDirectoryRegistrationsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListServicePrincipalNamesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTemplateGroupAccessControlEntriesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTemplatesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateTemplateOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateTemplateGroupAccessControlEntryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "AccessDeniedException": return try AccessDeniedException.makeError(baseError: baseError)
            case "ConflictException": return try ConflictException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ThrottlingException": return try ThrottlingException.makeError(baseError: baseError)
            case "ValidationException": return try ValidationException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension AccessDeniedException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> AccessDeniedException {
        let reader = baseError.errorBodyReader
        var value = AccessDeniedException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConflictException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ConflictException {
        let reader = baseError.errorBodyReader
        var value = ConflictException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["ResourceId"].readIfPresent() ?? ""
        value.properties.resourceType = try reader["ResourceType"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["ResourceId"].readIfPresent() ?? ""
        value.properties.resourceType = try reader["ResourceType"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ThrottlingException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ThrottlingException {
        let reader = baseError.errorBodyReader
        var value = ThrottlingException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.properties.quotaCode = try reader["QuotaCode"].readIfPresent()
        value.properties.serviceCode = try reader["ServiceCode"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ValidationException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ValidationException {
        let reader = baseError.errorBodyReader
        var value = ValidationException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.properties.reason = try reader["Reason"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ServiceQuotaExceededException {

    static func makeError(baseError: AWSClientRuntime.RestJSONError) throws -> ServiceQuotaExceededException {
        let reader = baseError.errorBodyReader
        var value = ServiceQuotaExceededException()
        value.properties.message = try reader["Message"].readIfPresent() ?? ""
        value.properties.quotaCode = try reader["QuotaCode"].readIfPresent() ?? ""
        value.properties.resourceId = try reader["ResourceId"].readIfPresent() ?? ""
        value.properties.resourceType = try reader["ResourceType"].readIfPresent() ?? ""
        value.properties.serviceCode = try reader["ServiceCode"].readIfPresent() ?? ""
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension PcaConnectorAdClientTypes.Connector {

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.Connector {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.Connector()
        value.arn = try reader["Arn"].readIfPresent()
        value.certificateAuthorityArn = try reader["CertificateAuthorityArn"].readIfPresent()
        value.certificateEnrollmentPolicyServerEndpoint = try reader["CertificateEnrollmentPolicyServerEndpoint"].readIfPresent()
        value.directoryId = try reader["DirectoryId"].readIfPresent()
        value.vpcInformation = try reader["VpcInformation"].readIfPresent(with: PcaConnectorAdClientTypes.VpcInformation.read(from:))
        value.status = try reader["Status"].readIfPresent()
        value.statusReason = try reader["StatusReason"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension PcaConnectorAdClientTypes.VpcInformation {

    static func write(value: PcaConnectorAdClientTypes.VpcInformation?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.VpcInformation {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.VpcInformation()
        value.securityGroupIds = try reader["SecurityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension PcaConnectorAdClientTypes.DirectoryRegistration {

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.DirectoryRegistration {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.DirectoryRegistration()
        value.arn = try reader["Arn"].readIfPresent()
        value.directoryId = try reader["DirectoryId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusReason = try reader["StatusReason"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension PcaConnectorAdClientTypes.ServicePrincipalName {

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.ServicePrincipalName {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.ServicePrincipalName()
        value.directoryRegistrationArn = try reader["DirectoryRegistrationArn"].readIfPresent()
        value.connectorArn = try reader["ConnectorArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusReason = try reader["StatusReason"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension PcaConnectorAdClientTypes.Template {

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.Template {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.Template()
        value.arn = try reader["Arn"].readIfPresent()
        value.connectorArn = try reader["ConnectorArn"].readIfPresent()
        value.definition = try reader["Definition"].readIfPresent(with: PcaConnectorAdClientTypes.TemplateDefinition.read(from:))
        value.name = try reader["Name"].readIfPresent()
        value.objectIdentifier = try reader["ObjectIdentifier"].readIfPresent()
        value.policySchema = try reader["PolicySchema"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.revision = try reader["Revision"].readIfPresent(with: PcaConnectorAdClientTypes.TemplateRevision.read(from:))
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension PcaConnectorAdClientTypes.TemplateRevision {

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.TemplateRevision {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.TemplateRevision()
        value.majorRevision = try reader["MajorRevision"].readIfPresent() ?? 0
        value.minorRevision = try reader["MinorRevision"].readIfPresent() ?? 0
        return value
    }
}

extension PcaConnectorAdClientTypes.TemplateDefinition {

    static func write(value: PcaConnectorAdClientTypes.TemplateDefinition?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .templatev2(templatev2):
                try writer["TemplateV2"].write(templatev2, with: PcaConnectorAdClientTypes.TemplateV2.write(value:to:))
            case let .templatev3(templatev3):
                try writer["TemplateV3"].write(templatev3, with: PcaConnectorAdClientTypes.TemplateV3.write(value:to:))
            case let .templatev4(templatev4):
                try writer["TemplateV4"].write(templatev4, with: PcaConnectorAdClientTypes.TemplateV4.write(value:to:))
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.TemplateDefinition {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "TemplateV2":
                return .templatev2(try reader["TemplateV2"].read(with: PcaConnectorAdClientTypes.TemplateV2.read(from:)))
            case "TemplateV3":
                return .templatev3(try reader["TemplateV3"].read(with: PcaConnectorAdClientTypes.TemplateV3.read(from:)))
            case "TemplateV4":
                return .templatev4(try reader["TemplateV4"].read(with: PcaConnectorAdClientTypes.TemplateV4.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension PcaConnectorAdClientTypes.TemplateV4 {

    static func write(value: PcaConnectorAdClientTypes.TemplateV4?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateValidity"].write(value.certificateValidity, with: PcaConnectorAdClientTypes.CertificateValidity.write(value:to:))
        try writer["EnrollmentFlags"].write(value.enrollmentFlags, with: PcaConnectorAdClientTypes.EnrollmentFlagsV4.write(value:to:))
        try writer["Extensions"].write(value.extensions, with: PcaConnectorAdClientTypes.ExtensionsV4.write(value:to:))
        try writer["GeneralFlags"].write(value.generalFlags, with: PcaConnectorAdClientTypes.GeneralFlagsV4.write(value:to:))
        try writer["HashAlgorithm"].write(value.hashAlgorithm)
        try writer["PrivateKeyAttributes"].write(value.privateKeyAttributes, with: PcaConnectorAdClientTypes.PrivateKeyAttributesV4.write(value:to:))
        try writer["PrivateKeyFlags"].write(value.privateKeyFlags, with: PcaConnectorAdClientTypes.PrivateKeyFlagsV4.write(value:to:))
        try writer["SubjectNameFlags"].write(value.subjectNameFlags, with: PcaConnectorAdClientTypes.SubjectNameFlagsV4.write(value:to:))
        try writer["SupersededTemplates"].writeList(value.supersededTemplates, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.TemplateV4 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.TemplateV4()
        value.certificateValidity = try reader["CertificateValidity"].readIfPresent(with: PcaConnectorAdClientTypes.CertificateValidity.read(from:))
        value.supersededTemplates = try reader["SupersededTemplates"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.privateKeyAttributes = try reader["PrivateKeyAttributes"].readIfPresent(with: PcaConnectorAdClientTypes.PrivateKeyAttributesV4.read(from:))
        value.privateKeyFlags = try reader["PrivateKeyFlags"].readIfPresent(with: PcaConnectorAdClientTypes.PrivateKeyFlagsV4.read(from:))
        value.enrollmentFlags = try reader["EnrollmentFlags"].readIfPresent(with: PcaConnectorAdClientTypes.EnrollmentFlagsV4.read(from:))
        value.subjectNameFlags = try reader["SubjectNameFlags"].readIfPresent(with: PcaConnectorAdClientTypes.SubjectNameFlagsV4.read(from:))
        value.generalFlags = try reader["GeneralFlags"].readIfPresent(with: PcaConnectorAdClientTypes.GeneralFlagsV4.read(from:))
        value.hashAlgorithm = try reader["HashAlgorithm"].readIfPresent()
        value.extensions = try reader["Extensions"].readIfPresent(with: PcaConnectorAdClientTypes.ExtensionsV4.read(from:))
        return value
    }
}

extension PcaConnectorAdClientTypes.ExtensionsV4 {

    static func write(value: PcaConnectorAdClientTypes.ExtensionsV4?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApplicationPolicies"].write(value.applicationPolicies, with: PcaConnectorAdClientTypes.ApplicationPolicies.write(value:to:))
        try writer["KeyUsage"].write(value.keyUsage, with: PcaConnectorAdClientTypes.KeyUsage.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.ExtensionsV4 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.ExtensionsV4()
        value.keyUsage = try reader["KeyUsage"].readIfPresent(with: PcaConnectorAdClientTypes.KeyUsage.read(from:))
        value.applicationPolicies = try reader["ApplicationPolicies"].readIfPresent(with: PcaConnectorAdClientTypes.ApplicationPolicies.read(from:))
        return value
    }
}

extension PcaConnectorAdClientTypes.ApplicationPolicies {

    static func write(value: PcaConnectorAdClientTypes.ApplicationPolicies?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Critical"].write(value.critical)
        try writer["Policies"].writeList(value.policies, memberWritingClosure: PcaConnectorAdClientTypes.ApplicationPolicy.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.ApplicationPolicies {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.ApplicationPolicies()
        value.critical = try reader["Critical"].readIfPresent()
        value.policies = try reader["Policies"].readListIfPresent(memberReadingClosure: PcaConnectorAdClientTypes.ApplicationPolicy.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension PcaConnectorAdClientTypes.ApplicationPolicy {

    static func write(value: PcaConnectorAdClientTypes.ApplicationPolicy?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .policyobjectidentifier(policyobjectidentifier):
                try writer["PolicyObjectIdentifier"].write(policyobjectidentifier)
            case let .policytype(policytype):
                try writer["PolicyType"].write(policytype)
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.ApplicationPolicy {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "PolicyType":
                return .policytype(try reader["PolicyType"].read())
            case "PolicyObjectIdentifier":
                return .policyobjectidentifier(try reader["PolicyObjectIdentifier"].read())
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension PcaConnectorAdClientTypes.KeyUsage {

    static func write(value: PcaConnectorAdClientTypes.KeyUsage?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Critical"].write(value.critical)
        try writer["UsageFlags"].write(value.usageFlags, with: PcaConnectorAdClientTypes.KeyUsageFlags.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.KeyUsage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.KeyUsage()
        value.critical = try reader["Critical"].readIfPresent()
        value.usageFlags = try reader["UsageFlags"].readIfPresent(with: PcaConnectorAdClientTypes.KeyUsageFlags.read(from:))
        return value
    }
}

extension PcaConnectorAdClientTypes.KeyUsageFlags {

    static func write(value: PcaConnectorAdClientTypes.KeyUsageFlags?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataEncipherment"].write(value.dataEncipherment)
        try writer["DigitalSignature"].write(value.digitalSignature)
        try writer["KeyAgreement"].write(value.keyAgreement)
        try writer["KeyEncipherment"].write(value.keyEncipherment)
        try writer["NonRepudiation"].write(value.nonRepudiation)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.KeyUsageFlags {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.KeyUsageFlags()
        value.digitalSignature = try reader["DigitalSignature"].readIfPresent()
        value.nonRepudiation = try reader["NonRepudiation"].readIfPresent()
        value.keyEncipherment = try reader["KeyEncipherment"].readIfPresent()
        value.dataEncipherment = try reader["DataEncipherment"].readIfPresent()
        value.keyAgreement = try reader["KeyAgreement"].readIfPresent()
        return value
    }
}

extension PcaConnectorAdClientTypes.GeneralFlagsV4 {

    static func write(value: PcaConnectorAdClientTypes.GeneralFlagsV4?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoEnrollment"].write(value.autoEnrollment)
        try writer["MachineType"].write(value.machineType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.GeneralFlagsV4 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.GeneralFlagsV4()
        value.autoEnrollment = try reader["AutoEnrollment"].readIfPresent()
        value.machineType = try reader["MachineType"].readIfPresent()
        return value
    }
}

extension PcaConnectorAdClientTypes.SubjectNameFlagsV4 {

    static func write(value: PcaConnectorAdClientTypes.SubjectNameFlagsV4?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RequireCommonName"].write(value.requireCommonName)
        try writer["RequireDirectoryPath"].write(value.requireDirectoryPath)
        try writer["RequireDnsAsCn"].write(value.requireDnsAsCn)
        try writer["RequireEmail"].write(value.requireEmail)
        try writer["SanRequireDirectoryGuid"].write(value.sanRequireDirectoryGuid)
        try writer["SanRequireDns"].write(value.sanRequireDns)
        try writer["SanRequireDomainDns"].write(value.sanRequireDomainDns)
        try writer["SanRequireEmail"].write(value.sanRequireEmail)
        try writer["SanRequireSpn"].write(value.sanRequireSpn)
        try writer["SanRequireUpn"].write(value.sanRequireUpn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.SubjectNameFlagsV4 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.SubjectNameFlagsV4()
        value.sanRequireDomainDns = try reader["SanRequireDomainDns"].readIfPresent()
        value.sanRequireSpn = try reader["SanRequireSpn"].readIfPresent()
        value.sanRequireDirectoryGuid = try reader["SanRequireDirectoryGuid"].readIfPresent()
        value.sanRequireUpn = try reader["SanRequireUpn"].readIfPresent()
        value.sanRequireEmail = try reader["SanRequireEmail"].readIfPresent()
        value.sanRequireDns = try reader["SanRequireDns"].readIfPresent()
        value.requireDnsAsCn = try reader["RequireDnsAsCn"].readIfPresent()
        value.requireEmail = try reader["RequireEmail"].readIfPresent()
        value.requireCommonName = try reader["RequireCommonName"].readIfPresent()
        value.requireDirectoryPath = try reader["RequireDirectoryPath"].readIfPresent()
        return value
    }
}

extension PcaConnectorAdClientTypes.EnrollmentFlagsV4 {

    static func write(value: PcaConnectorAdClientTypes.EnrollmentFlagsV4?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnableKeyReuseOnNtTokenKeysetStorageFull"].write(value.enableKeyReuseOnNtTokenKeysetStorageFull)
        try writer["IncludeSymmetricAlgorithms"].write(value.includeSymmetricAlgorithms)
        try writer["NoSecurityExtension"].write(value.noSecurityExtension)
        try writer["RemoveInvalidCertificateFromPersonalStore"].write(value.removeInvalidCertificateFromPersonalStore)
        try writer["UserInteractionRequired"].write(value.userInteractionRequired)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.EnrollmentFlagsV4 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.EnrollmentFlagsV4()
        value.includeSymmetricAlgorithms = try reader["IncludeSymmetricAlgorithms"].readIfPresent()
        value.userInteractionRequired = try reader["UserInteractionRequired"].readIfPresent()
        value.removeInvalidCertificateFromPersonalStore = try reader["RemoveInvalidCertificateFromPersonalStore"].readIfPresent()
        value.noSecurityExtension = try reader["NoSecurityExtension"].readIfPresent()
        value.enableKeyReuseOnNtTokenKeysetStorageFull = try reader["EnableKeyReuseOnNtTokenKeysetStorageFull"].readIfPresent()
        return value
    }
}

extension PcaConnectorAdClientTypes.PrivateKeyFlagsV4 {

    static func write(value: PcaConnectorAdClientTypes.PrivateKeyFlagsV4?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientVersion"].write(value.clientVersion)
        try writer["ExportableKey"].write(value.exportableKey)
        try writer["RequireAlternateSignatureAlgorithm"].write(value.requireAlternateSignatureAlgorithm)
        try writer["RequireSameKeyRenewal"].write(value.requireSameKeyRenewal)
        try writer["StrongKeyProtectionRequired"].write(value.strongKeyProtectionRequired)
        try writer["UseLegacyProvider"].write(value.useLegacyProvider)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.PrivateKeyFlagsV4 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.PrivateKeyFlagsV4()
        value.exportableKey = try reader["ExportableKey"].readIfPresent()
        value.strongKeyProtectionRequired = try reader["StrongKeyProtectionRequired"].readIfPresent()
        value.requireAlternateSignatureAlgorithm = try reader["RequireAlternateSignatureAlgorithm"].readIfPresent()
        value.requireSameKeyRenewal = try reader["RequireSameKeyRenewal"].readIfPresent()
        value.useLegacyProvider = try reader["UseLegacyProvider"].readIfPresent()
        value.clientVersion = try reader["ClientVersion"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension PcaConnectorAdClientTypes.PrivateKeyAttributesV4 {

    static func write(value: PcaConnectorAdClientTypes.PrivateKeyAttributesV4?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Algorithm"].write(value.algorithm)
        try writer["CryptoProviders"].writeList(value.cryptoProviders, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeySpec"].write(value.keySpec)
        try writer["KeyUsageProperty"].write(value.keyUsageProperty, with: PcaConnectorAdClientTypes.KeyUsageProperty.write(value:to:))
        try writer["MinimalKeyLength"].write(value.minimalKeyLength)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.PrivateKeyAttributesV4 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.PrivateKeyAttributesV4()
        value.minimalKeyLength = try reader["MinimalKeyLength"].readIfPresent() ?? 0
        value.keySpec = try reader["KeySpec"].readIfPresent() ?? .sdkUnknown("")
        value.cryptoProviders = try reader["CryptoProviders"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.keyUsageProperty = try reader["KeyUsageProperty"].readIfPresent(with: PcaConnectorAdClientTypes.KeyUsageProperty.read(from:))
        value.algorithm = try reader["Algorithm"].readIfPresent()
        return value
    }
}

extension PcaConnectorAdClientTypes.KeyUsageProperty {

    static func write(value: PcaConnectorAdClientTypes.KeyUsageProperty?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        switch value {
            case let .propertyflags(propertyflags):
                try writer["PropertyFlags"].write(propertyflags, with: PcaConnectorAdClientTypes.KeyUsagePropertyFlags.write(value:to:))
            case let .propertytype(propertytype):
                try writer["PropertyType"].write(propertytype)
            case let .sdkUnknown(sdkUnknown):
                try writer["sdkUnknown"].write(sdkUnknown)
        }
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.KeyUsageProperty {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        let name = reader.children.filter { $0.hasContent && $0.nodeInfo.name != "__type" }.first?.nodeInfo.name
        switch name {
            case "PropertyType":
                return .propertytype(try reader["PropertyType"].read())
            case "PropertyFlags":
                return .propertyflags(try reader["PropertyFlags"].read(with: PcaConnectorAdClientTypes.KeyUsagePropertyFlags.read(from:)))
            default:
                return .sdkUnknown(name ?? "")
        }
    }
}

extension PcaConnectorAdClientTypes.KeyUsagePropertyFlags {

    static func write(value: PcaConnectorAdClientTypes.KeyUsagePropertyFlags?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Decrypt"].write(value.decrypt)
        try writer["KeyAgreement"].write(value.keyAgreement)
        try writer["Sign"].write(value.sign)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.KeyUsagePropertyFlags {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.KeyUsagePropertyFlags()
        value.decrypt = try reader["Decrypt"].readIfPresent()
        value.keyAgreement = try reader["KeyAgreement"].readIfPresent()
        value.sign = try reader["Sign"].readIfPresent()
        return value
    }
}

extension PcaConnectorAdClientTypes.CertificateValidity {

    static func write(value: PcaConnectorAdClientTypes.CertificateValidity?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RenewalPeriod"].write(value.renewalPeriod, with: PcaConnectorAdClientTypes.ValidityPeriod.write(value:to:))
        try writer["ValidityPeriod"].write(value.validityPeriod, with: PcaConnectorAdClientTypes.ValidityPeriod.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.CertificateValidity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.CertificateValidity()
        value.validityPeriod = try reader["ValidityPeriod"].readIfPresent(with: PcaConnectorAdClientTypes.ValidityPeriod.read(from:))
        value.renewalPeriod = try reader["RenewalPeriod"].readIfPresent(with: PcaConnectorAdClientTypes.ValidityPeriod.read(from:))
        return value
    }
}

extension PcaConnectorAdClientTypes.ValidityPeriod {

    static func write(value: PcaConnectorAdClientTypes.ValidityPeriod?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Period"].write(value.period)
        try writer["PeriodType"].write(value.periodType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.ValidityPeriod {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.ValidityPeriod()
        value.periodType = try reader["PeriodType"].readIfPresent() ?? .sdkUnknown("")
        value.period = try reader["Period"].readIfPresent() ?? 0
        return value
    }
}

extension PcaConnectorAdClientTypes.TemplateV3 {

    static func write(value: PcaConnectorAdClientTypes.TemplateV3?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateValidity"].write(value.certificateValidity, with: PcaConnectorAdClientTypes.CertificateValidity.write(value:to:))
        try writer["EnrollmentFlags"].write(value.enrollmentFlags, with: PcaConnectorAdClientTypes.EnrollmentFlagsV3.write(value:to:))
        try writer["Extensions"].write(value.extensions, with: PcaConnectorAdClientTypes.ExtensionsV3.write(value:to:))
        try writer["GeneralFlags"].write(value.generalFlags, with: PcaConnectorAdClientTypes.GeneralFlagsV3.write(value:to:))
        try writer["HashAlgorithm"].write(value.hashAlgorithm)
        try writer["PrivateKeyAttributes"].write(value.privateKeyAttributes, with: PcaConnectorAdClientTypes.PrivateKeyAttributesV3.write(value:to:))
        try writer["PrivateKeyFlags"].write(value.privateKeyFlags, with: PcaConnectorAdClientTypes.PrivateKeyFlagsV3.write(value:to:))
        try writer["SubjectNameFlags"].write(value.subjectNameFlags, with: PcaConnectorAdClientTypes.SubjectNameFlagsV3.write(value:to:))
        try writer["SupersededTemplates"].writeList(value.supersededTemplates, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.TemplateV3 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.TemplateV3()
        value.certificateValidity = try reader["CertificateValidity"].readIfPresent(with: PcaConnectorAdClientTypes.CertificateValidity.read(from:))
        value.supersededTemplates = try reader["SupersededTemplates"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.privateKeyAttributes = try reader["PrivateKeyAttributes"].readIfPresent(with: PcaConnectorAdClientTypes.PrivateKeyAttributesV3.read(from:))
        value.privateKeyFlags = try reader["PrivateKeyFlags"].readIfPresent(with: PcaConnectorAdClientTypes.PrivateKeyFlagsV3.read(from:))
        value.enrollmentFlags = try reader["EnrollmentFlags"].readIfPresent(with: PcaConnectorAdClientTypes.EnrollmentFlagsV3.read(from:))
        value.subjectNameFlags = try reader["SubjectNameFlags"].readIfPresent(with: PcaConnectorAdClientTypes.SubjectNameFlagsV3.read(from:))
        value.generalFlags = try reader["GeneralFlags"].readIfPresent(with: PcaConnectorAdClientTypes.GeneralFlagsV3.read(from:))
        value.hashAlgorithm = try reader["HashAlgorithm"].readIfPresent() ?? .sdkUnknown("")
        value.extensions = try reader["Extensions"].readIfPresent(with: PcaConnectorAdClientTypes.ExtensionsV3.read(from:))
        return value
    }
}

extension PcaConnectorAdClientTypes.ExtensionsV3 {

    static func write(value: PcaConnectorAdClientTypes.ExtensionsV3?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApplicationPolicies"].write(value.applicationPolicies, with: PcaConnectorAdClientTypes.ApplicationPolicies.write(value:to:))
        try writer["KeyUsage"].write(value.keyUsage, with: PcaConnectorAdClientTypes.KeyUsage.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.ExtensionsV3 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.ExtensionsV3()
        value.keyUsage = try reader["KeyUsage"].readIfPresent(with: PcaConnectorAdClientTypes.KeyUsage.read(from:))
        value.applicationPolicies = try reader["ApplicationPolicies"].readIfPresent(with: PcaConnectorAdClientTypes.ApplicationPolicies.read(from:))
        return value
    }
}

extension PcaConnectorAdClientTypes.GeneralFlagsV3 {

    static func write(value: PcaConnectorAdClientTypes.GeneralFlagsV3?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoEnrollment"].write(value.autoEnrollment)
        try writer["MachineType"].write(value.machineType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.GeneralFlagsV3 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.GeneralFlagsV3()
        value.autoEnrollment = try reader["AutoEnrollment"].readIfPresent()
        value.machineType = try reader["MachineType"].readIfPresent()
        return value
    }
}

extension PcaConnectorAdClientTypes.SubjectNameFlagsV3 {

    static func write(value: PcaConnectorAdClientTypes.SubjectNameFlagsV3?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RequireCommonName"].write(value.requireCommonName)
        try writer["RequireDirectoryPath"].write(value.requireDirectoryPath)
        try writer["RequireDnsAsCn"].write(value.requireDnsAsCn)
        try writer["RequireEmail"].write(value.requireEmail)
        try writer["SanRequireDirectoryGuid"].write(value.sanRequireDirectoryGuid)
        try writer["SanRequireDns"].write(value.sanRequireDns)
        try writer["SanRequireDomainDns"].write(value.sanRequireDomainDns)
        try writer["SanRequireEmail"].write(value.sanRequireEmail)
        try writer["SanRequireSpn"].write(value.sanRequireSpn)
        try writer["SanRequireUpn"].write(value.sanRequireUpn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.SubjectNameFlagsV3 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.SubjectNameFlagsV3()
        value.sanRequireDomainDns = try reader["SanRequireDomainDns"].readIfPresent()
        value.sanRequireSpn = try reader["SanRequireSpn"].readIfPresent()
        value.sanRequireDirectoryGuid = try reader["SanRequireDirectoryGuid"].readIfPresent()
        value.sanRequireUpn = try reader["SanRequireUpn"].readIfPresent()
        value.sanRequireEmail = try reader["SanRequireEmail"].readIfPresent()
        value.sanRequireDns = try reader["SanRequireDns"].readIfPresent()
        value.requireDnsAsCn = try reader["RequireDnsAsCn"].readIfPresent()
        value.requireEmail = try reader["RequireEmail"].readIfPresent()
        value.requireCommonName = try reader["RequireCommonName"].readIfPresent()
        value.requireDirectoryPath = try reader["RequireDirectoryPath"].readIfPresent()
        return value
    }
}

extension PcaConnectorAdClientTypes.EnrollmentFlagsV3 {

    static func write(value: PcaConnectorAdClientTypes.EnrollmentFlagsV3?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnableKeyReuseOnNtTokenKeysetStorageFull"].write(value.enableKeyReuseOnNtTokenKeysetStorageFull)
        try writer["IncludeSymmetricAlgorithms"].write(value.includeSymmetricAlgorithms)
        try writer["NoSecurityExtension"].write(value.noSecurityExtension)
        try writer["RemoveInvalidCertificateFromPersonalStore"].write(value.removeInvalidCertificateFromPersonalStore)
        try writer["UserInteractionRequired"].write(value.userInteractionRequired)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.EnrollmentFlagsV3 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.EnrollmentFlagsV3()
        value.includeSymmetricAlgorithms = try reader["IncludeSymmetricAlgorithms"].readIfPresent()
        value.userInteractionRequired = try reader["UserInteractionRequired"].readIfPresent()
        value.removeInvalidCertificateFromPersonalStore = try reader["RemoveInvalidCertificateFromPersonalStore"].readIfPresent()
        value.noSecurityExtension = try reader["NoSecurityExtension"].readIfPresent()
        value.enableKeyReuseOnNtTokenKeysetStorageFull = try reader["EnableKeyReuseOnNtTokenKeysetStorageFull"].readIfPresent()
        return value
    }
}

extension PcaConnectorAdClientTypes.PrivateKeyFlagsV3 {

    static func write(value: PcaConnectorAdClientTypes.PrivateKeyFlagsV3?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientVersion"].write(value.clientVersion)
        try writer["ExportableKey"].write(value.exportableKey)
        try writer["RequireAlternateSignatureAlgorithm"].write(value.requireAlternateSignatureAlgorithm)
        try writer["StrongKeyProtectionRequired"].write(value.strongKeyProtectionRequired)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.PrivateKeyFlagsV3 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.PrivateKeyFlagsV3()
        value.exportableKey = try reader["ExportableKey"].readIfPresent()
        value.strongKeyProtectionRequired = try reader["StrongKeyProtectionRequired"].readIfPresent()
        value.requireAlternateSignatureAlgorithm = try reader["RequireAlternateSignatureAlgorithm"].readIfPresent()
        value.clientVersion = try reader["ClientVersion"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension PcaConnectorAdClientTypes.PrivateKeyAttributesV3 {

    static func write(value: PcaConnectorAdClientTypes.PrivateKeyAttributesV3?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Algorithm"].write(value.algorithm)
        try writer["CryptoProviders"].writeList(value.cryptoProviders, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeySpec"].write(value.keySpec)
        try writer["KeyUsageProperty"].write(value.keyUsageProperty, with: PcaConnectorAdClientTypes.KeyUsageProperty.write(value:to:))
        try writer["MinimalKeyLength"].write(value.minimalKeyLength)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.PrivateKeyAttributesV3 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.PrivateKeyAttributesV3()
        value.minimalKeyLength = try reader["MinimalKeyLength"].readIfPresent() ?? 0
        value.keySpec = try reader["KeySpec"].readIfPresent() ?? .sdkUnknown("")
        value.cryptoProviders = try reader["CryptoProviders"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.keyUsageProperty = try reader["KeyUsageProperty"].readIfPresent(with: PcaConnectorAdClientTypes.KeyUsageProperty.read(from:))
        value.algorithm = try reader["Algorithm"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension PcaConnectorAdClientTypes.TemplateV2 {

    static func write(value: PcaConnectorAdClientTypes.TemplateV2?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CertificateValidity"].write(value.certificateValidity, with: PcaConnectorAdClientTypes.CertificateValidity.write(value:to:))
        try writer["EnrollmentFlags"].write(value.enrollmentFlags, with: PcaConnectorAdClientTypes.EnrollmentFlagsV2.write(value:to:))
        try writer["Extensions"].write(value.extensions, with: PcaConnectorAdClientTypes.ExtensionsV2.write(value:to:))
        try writer["GeneralFlags"].write(value.generalFlags, with: PcaConnectorAdClientTypes.GeneralFlagsV2.write(value:to:))
        try writer["PrivateKeyAttributes"].write(value.privateKeyAttributes, with: PcaConnectorAdClientTypes.PrivateKeyAttributesV2.write(value:to:))
        try writer["PrivateKeyFlags"].write(value.privateKeyFlags, with: PcaConnectorAdClientTypes.PrivateKeyFlagsV2.write(value:to:))
        try writer["SubjectNameFlags"].write(value.subjectNameFlags, with: PcaConnectorAdClientTypes.SubjectNameFlagsV2.write(value:to:))
        try writer["SupersededTemplates"].writeList(value.supersededTemplates, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.TemplateV2 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.TemplateV2()
        value.certificateValidity = try reader["CertificateValidity"].readIfPresent(with: PcaConnectorAdClientTypes.CertificateValidity.read(from:))
        value.supersededTemplates = try reader["SupersededTemplates"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.privateKeyAttributes = try reader["PrivateKeyAttributes"].readIfPresent(with: PcaConnectorAdClientTypes.PrivateKeyAttributesV2.read(from:))
        value.privateKeyFlags = try reader["PrivateKeyFlags"].readIfPresent(with: PcaConnectorAdClientTypes.PrivateKeyFlagsV2.read(from:))
        value.enrollmentFlags = try reader["EnrollmentFlags"].readIfPresent(with: PcaConnectorAdClientTypes.EnrollmentFlagsV2.read(from:))
        value.subjectNameFlags = try reader["SubjectNameFlags"].readIfPresent(with: PcaConnectorAdClientTypes.SubjectNameFlagsV2.read(from:))
        value.generalFlags = try reader["GeneralFlags"].readIfPresent(with: PcaConnectorAdClientTypes.GeneralFlagsV2.read(from:))
        value.extensions = try reader["Extensions"].readIfPresent(with: PcaConnectorAdClientTypes.ExtensionsV2.read(from:))
        return value
    }
}

extension PcaConnectorAdClientTypes.ExtensionsV2 {

    static func write(value: PcaConnectorAdClientTypes.ExtensionsV2?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ApplicationPolicies"].write(value.applicationPolicies, with: PcaConnectorAdClientTypes.ApplicationPolicies.write(value:to:))
        try writer["KeyUsage"].write(value.keyUsage, with: PcaConnectorAdClientTypes.KeyUsage.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.ExtensionsV2 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.ExtensionsV2()
        value.keyUsage = try reader["KeyUsage"].readIfPresent(with: PcaConnectorAdClientTypes.KeyUsage.read(from:))
        value.applicationPolicies = try reader["ApplicationPolicies"].readIfPresent(with: PcaConnectorAdClientTypes.ApplicationPolicies.read(from:))
        return value
    }
}

extension PcaConnectorAdClientTypes.GeneralFlagsV2 {

    static func write(value: PcaConnectorAdClientTypes.GeneralFlagsV2?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoEnrollment"].write(value.autoEnrollment)
        try writer["MachineType"].write(value.machineType)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.GeneralFlagsV2 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.GeneralFlagsV2()
        value.autoEnrollment = try reader["AutoEnrollment"].readIfPresent()
        value.machineType = try reader["MachineType"].readIfPresent()
        return value
    }
}

extension PcaConnectorAdClientTypes.SubjectNameFlagsV2 {

    static func write(value: PcaConnectorAdClientTypes.SubjectNameFlagsV2?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RequireCommonName"].write(value.requireCommonName)
        try writer["RequireDirectoryPath"].write(value.requireDirectoryPath)
        try writer["RequireDnsAsCn"].write(value.requireDnsAsCn)
        try writer["RequireEmail"].write(value.requireEmail)
        try writer["SanRequireDirectoryGuid"].write(value.sanRequireDirectoryGuid)
        try writer["SanRequireDns"].write(value.sanRequireDns)
        try writer["SanRequireDomainDns"].write(value.sanRequireDomainDns)
        try writer["SanRequireEmail"].write(value.sanRequireEmail)
        try writer["SanRequireSpn"].write(value.sanRequireSpn)
        try writer["SanRequireUpn"].write(value.sanRequireUpn)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.SubjectNameFlagsV2 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.SubjectNameFlagsV2()
        value.sanRequireDomainDns = try reader["SanRequireDomainDns"].readIfPresent()
        value.sanRequireSpn = try reader["SanRequireSpn"].readIfPresent()
        value.sanRequireDirectoryGuid = try reader["SanRequireDirectoryGuid"].readIfPresent()
        value.sanRequireUpn = try reader["SanRequireUpn"].readIfPresent()
        value.sanRequireEmail = try reader["SanRequireEmail"].readIfPresent()
        value.sanRequireDns = try reader["SanRequireDns"].readIfPresent()
        value.requireDnsAsCn = try reader["RequireDnsAsCn"].readIfPresent()
        value.requireEmail = try reader["RequireEmail"].readIfPresent()
        value.requireCommonName = try reader["RequireCommonName"].readIfPresent()
        value.requireDirectoryPath = try reader["RequireDirectoryPath"].readIfPresent()
        return value
    }
}

extension PcaConnectorAdClientTypes.EnrollmentFlagsV2 {

    static func write(value: PcaConnectorAdClientTypes.EnrollmentFlagsV2?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EnableKeyReuseOnNtTokenKeysetStorageFull"].write(value.enableKeyReuseOnNtTokenKeysetStorageFull)
        try writer["IncludeSymmetricAlgorithms"].write(value.includeSymmetricAlgorithms)
        try writer["NoSecurityExtension"].write(value.noSecurityExtension)
        try writer["RemoveInvalidCertificateFromPersonalStore"].write(value.removeInvalidCertificateFromPersonalStore)
        try writer["UserInteractionRequired"].write(value.userInteractionRequired)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.EnrollmentFlagsV2 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.EnrollmentFlagsV2()
        value.includeSymmetricAlgorithms = try reader["IncludeSymmetricAlgorithms"].readIfPresent()
        value.userInteractionRequired = try reader["UserInteractionRequired"].readIfPresent()
        value.removeInvalidCertificateFromPersonalStore = try reader["RemoveInvalidCertificateFromPersonalStore"].readIfPresent()
        value.noSecurityExtension = try reader["NoSecurityExtension"].readIfPresent()
        value.enableKeyReuseOnNtTokenKeysetStorageFull = try reader["EnableKeyReuseOnNtTokenKeysetStorageFull"].readIfPresent()
        return value
    }
}

extension PcaConnectorAdClientTypes.PrivateKeyFlagsV2 {

    static func write(value: PcaConnectorAdClientTypes.PrivateKeyFlagsV2?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientVersion"].write(value.clientVersion)
        try writer["ExportableKey"].write(value.exportableKey)
        try writer["StrongKeyProtectionRequired"].write(value.strongKeyProtectionRequired)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.PrivateKeyFlagsV2 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.PrivateKeyFlagsV2()
        value.exportableKey = try reader["ExportableKey"].readIfPresent()
        value.strongKeyProtectionRequired = try reader["StrongKeyProtectionRequired"].readIfPresent()
        value.clientVersion = try reader["ClientVersion"].readIfPresent() ?? .sdkUnknown("")
        return value
    }
}

extension PcaConnectorAdClientTypes.PrivateKeyAttributesV2 {

    static func write(value: PcaConnectorAdClientTypes.PrivateKeyAttributesV2?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CryptoProviders"].writeList(value.cryptoProviders, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["KeySpec"].write(value.keySpec)
        try writer["MinimalKeyLength"].write(value.minimalKeyLength)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.PrivateKeyAttributesV2 {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.PrivateKeyAttributesV2()
        value.minimalKeyLength = try reader["MinimalKeyLength"].readIfPresent() ?? 0
        value.keySpec = try reader["KeySpec"].readIfPresent() ?? .sdkUnknown("")
        value.cryptoProviders = try reader["CryptoProviders"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PcaConnectorAdClientTypes.AccessControlEntry {

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.AccessControlEntry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.AccessControlEntry()
        value.groupDisplayName = try reader["GroupDisplayName"].readIfPresent()
        value.groupSecurityIdentifier = try reader["GroupSecurityIdentifier"].readIfPresent()
        value.accessRights = try reader["AccessRights"].readIfPresent(with: PcaConnectorAdClientTypes.AccessRights.read(from:))
        value.templateArn = try reader["TemplateArn"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension PcaConnectorAdClientTypes.AccessRights {

    static func write(value: PcaConnectorAdClientTypes.AccessRights?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AutoEnroll"].write(value.autoEnroll)
        try writer["Enroll"].write(value.enroll)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.AccessRights {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.AccessRights()
        value.enroll = try reader["Enroll"].readIfPresent()
        value.autoEnroll = try reader["AutoEnroll"].readIfPresent()
        return value
    }
}

extension PcaConnectorAdClientTypes.ConnectorSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.ConnectorSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.ConnectorSummary()
        value.arn = try reader["Arn"].readIfPresent()
        value.certificateAuthorityArn = try reader["CertificateAuthorityArn"].readIfPresent()
        value.certificateEnrollmentPolicyServerEndpoint = try reader["CertificateEnrollmentPolicyServerEndpoint"].readIfPresent()
        value.directoryId = try reader["DirectoryId"].readIfPresent()
        value.vpcInformation = try reader["VpcInformation"].readIfPresent(with: PcaConnectorAdClientTypes.VpcInformation.read(from:))
        value.status = try reader["Status"].readIfPresent()
        value.statusReason = try reader["StatusReason"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension PcaConnectorAdClientTypes.DirectoryRegistrationSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.DirectoryRegistrationSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.DirectoryRegistrationSummary()
        value.arn = try reader["Arn"].readIfPresent()
        value.directoryId = try reader["DirectoryId"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusReason = try reader["StatusReason"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension PcaConnectorAdClientTypes.ServicePrincipalNameSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.ServicePrincipalNameSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.ServicePrincipalNameSummary()
        value.directoryRegistrationArn = try reader["DirectoryRegistrationArn"].readIfPresent()
        value.connectorArn = try reader["ConnectorArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.statusReason = try reader["StatusReason"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension PcaConnectorAdClientTypes.AccessControlEntrySummary {

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.AccessControlEntrySummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.AccessControlEntrySummary()
        value.groupDisplayName = try reader["GroupDisplayName"].readIfPresent()
        value.groupSecurityIdentifier = try reader["GroupSecurityIdentifier"].readIfPresent()
        value.accessRights = try reader["AccessRights"].readIfPresent(with: PcaConnectorAdClientTypes.AccessRights.read(from:))
        value.templateArn = try reader["TemplateArn"].readIfPresent()
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension PcaConnectorAdClientTypes.TemplateSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> PcaConnectorAdClientTypes.TemplateSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = PcaConnectorAdClientTypes.TemplateSummary()
        value.arn = try reader["Arn"].readIfPresent()
        value.connectorArn = try reader["ConnectorArn"].readIfPresent()
        value.definition = try reader["Definition"].readIfPresent(with: PcaConnectorAdClientTypes.TemplateDefinition.read(from:))
        value.name = try reader["Name"].readIfPresent()
        value.objectIdentifier = try reader["ObjectIdentifier"].readIfPresent()
        value.policySchema = try reader["PolicySchema"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.revision = try reader["Revision"].readIfPresent(with: PcaConnectorAdClientTypes.TemplateRevision.read(from:))
        value.createdAt = try reader["CreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.updatedAt = try reader["UpdatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

public enum PcaConnectorAdClientTypes {}
