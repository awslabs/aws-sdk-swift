// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension PcaConnectorAdClientTypes.AccessControlEntry: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessRights = "AccessRights"
        case createdAt = "CreatedAt"
        case groupDisplayName = "GroupDisplayName"
        case groupSecurityIdentifier = "GroupSecurityIdentifier"
        case templateArn = "TemplateArn"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessRights = self.accessRights {
            try encodeContainer.encode(accessRights, forKey: .accessRights)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let groupDisplayName = self.groupDisplayName {
            try encodeContainer.encode(groupDisplayName, forKey: .groupDisplayName)
        }
        if let groupSecurityIdentifier = self.groupSecurityIdentifier {
            try encodeContainer.encode(groupSecurityIdentifier, forKey: .groupSecurityIdentifier)
        }
        if let templateArn = self.templateArn {
            try encodeContainer.encode(templateArn, forKey: .templateArn)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encodeTimestamp(updatedAt, format: .epochSeconds, forKey: .updatedAt)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupDisplayName)
        groupDisplayName = groupDisplayNameDecoded
        let groupSecurityIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupSecurityIdentifier)
        groupSecurityIdentifier = groupSecurityIdentifierDecoded
        let accessRightsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.AccessRights.self, forKey: .accessRights)
        accessRights = accessRightsDecoded
        let templateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateArn)
        templateArn = templateArnDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// An access control entry allows or denies Active Directory groups based on their security identifiers (SIDs) from enrolling and/or autoenrolling with the template.
    public struct AccessControlEntry: Swift.Equatable {
        /// Permissions to allow or deny an Active Directory group to enroll or autoenroll certificates issued against a template.
        public var accessRights: PcaConnectorAdClientTypes.AccessRights?
        /// The date and time that the Access Control Entry was created.
        public var createdAt: ClientRuntime.Date?
        /// Name of the Active Directory group. This name does not need to match the group name in Active Directory.
        public var groupDisplayName: Swift.String?
        /// Security identifier (SID) of the group object from Active Directory. The SID starts with "S-".
        public var groupSecurityIdentifier: Swift.String?
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
        public var templateArn: Swift.String?
        /// The date and time that the Access Control Entry was updated.
        public var updatedAt: ClientRuntime.Date?

        public init(
            accessRights: PcaConnectorAdClientTypes.AccessRights? = nil,
            createdAt: ClientRuntime.Date? = nil,
            groupDisplayName: Swift.String? = nil,
            groupSecurityIdentifier: Swift.String? = nil,
            templateArn: Swift.String? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.accessRights = accessRights
            self.createdAt = createdAt
            self.groupDisplayName = groupDisplayName
            self.groupSecurityIdentifier = groupSecurityIdentifier
            self.templateArn = templateArn
            self.updatedAt = updatedAt
        }
    }

}

extension PcaConnectorAdClientTypes.AccessControlEntrySummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessRights = "AccessRights"
        case createdAt = "CreatedAt"
        case groupDisplayName = "GroupDisplayName"
        case groupSecurityIdentifier = "GroupSecurityIdentifier"
        case templateArn = "TemplateArn"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessRights = self.accessRights {
            try encodeContainer.encode(accessRights, forKey: .accessRights)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let groupDisplayName = self.groupDisplayName {
            try encodeContainer.encode(groupDisplayName, forKey: .groupDisplayName)
        }
        if let groupSecurityIdentifier = self.groupSecurityIdentifier {
            try encodeContainer.encode(groupSecurityIdentifier, forKey: .groupSecurityIdentifier)
        }
        if let templateArn = self.templateArn {
            try encodeContainer.encode(templateArn, forKey: .templateArn)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encodeTimestamp(updatedAt, format: .epochSeconds, forKey: .updatedAt)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupDisplayName)
        groupDisplayName = groupDisplayNameDecoded
        let groupSecurityIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupSecurityIdentifier)
        groupSecurityIdentifier = groupSecurityIdentifierDecoded
        let accessRightsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.AccessRights.self, forKey: .accessRights)
        accessRights = accessRightsDecoded
        let templateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateArn)
        templateArn = templateArnDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Summary of group access control entries that allow or deny Active Directory groups based on their security identifiers (SIDs) from enrolling and/or autofenrolling with the template.
    public struct AccessControlEntrySummary: Swift.Equatable {
        /// Allow or deny an Active Directory group from enrolling and autoenrolling certificates issued against a template.
        public var accessRights: PcaConnectorAdClientTypes.AccessRights?
        /// The date and time that the Access Control Entry was created.
        public var createdAt: ClientRuntime.Date?
        /// Name of the Active Directory group. This name does not need to match the group name in Active Directory.
        public var groupDisplayName: Swift.String?
        /// Security identifier (SID) of the group object from Active Directory. The SID starts with "S-".
        public var groupSecurityIdentifier: Swift.String?
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
        public var templateArn: Swift.String?
        /// The date and time that the Access Control Entry was updated.
        public var updatedAt: ClientRuntime.Date?

        public init(
            accessRights: PcaConnectorAdClientTypes.AccessRights? = nil,
            createdAt: ClientRuntime.Date? = nil,
            groupDisplayName: Swift.String? = nil,
            groupSecurityIdentifier: Swift.String? = nil,
            templateArn: Swift.String? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.accessRights = accessRights
            self.createdAt = createdAt
            self.groupDisplayName = groupDisplayName
            self.groupSecurityIdentifier = groupSecurityIdentifier
            self.templateArn = templateArn
            self.updatedAt = updatedAt
        }
    }

}

extension AccessDeniedException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// You can receive this error if you attempt to create a resource share when you don't have the required permissions. This can be caused by insufficient permissions in policies attached to your Amazon Web Services Identity and Access Management (IAM) principal. It can also happen because of restrictions in place from an Amazon Web Services Organizations service control policy (SCP) that affects your Amazon Web Services account.
public struct AccessDeniedException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "AccessDeniedException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PcaConnectorAdClientTypes {
    public enum AccessRight: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allow
        case deny
        case sdkUnknown(Swift.String)

        public static var allCases: [AccessRight] {
            return [
                .allow,
                .deny,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allow: return "ALLOW"
            case .deny: return "DENY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AccessRight(rawValue: rawValue) ?? AccessRight.sdkUnknown(rawValue)
        }
    }
}

extension PcaConnectorAdClientTypes.AccessRights: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoEnroll = "AutoEnroll"
        case enroll = "Enroll"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoEnroll = self.autoEnroll {
            try encodeContainer.encode(autoEnroll.rawValue, forKey: .autoEnroll)
        }
        if let enroll = self.enroll {
            try encodeContainer.encode(enroll.rawValue, forKey: .enroll)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enrollDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.AccessRight.self, forKey: .enroll)
        enroll = enrollDecoded
        let autoEnrollDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.AccessRight.self, forKey: .autoEnroll)
        autoEnroll = autoEnrollDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Allow or deny permissions for an Active Directory group to enroll or autoenroll certificates for a template.
    public struct AccessRights: Swift.Equatable {
        /// Allow or deny an Active Directory group from autoenrolling certificates issued against a template. The Active Directory group must be allowed to enroll to allow autoenrollment
        public var autoEnroll: PcaConnectorAdClientTypes.AccessRight?
        /// Allow or deny an Active Directory group from enrolling certificates issued against a template.
        public var enroll: PcaConnectorAdClientTypes.AccessRight?

        public init(
            autoEnroll: PcaConnectorAdClientTypes.AccessRight? = nil,
            enroll: PcaConnectorAdClientTypes.AccessRight? = nil
        )
        {
            self.autoEnroll = autoEnroll
            self.enroll = enroll
        }
    }

}

extension PcaConnectorAdClientTypes.ApplicationPolicies: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case critical = "Critical"
        case policies = "Policies"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let critical = self.critical {
            try encodeContainer.encode(critical, forKey: .critical)
        }
        if let policies = policies {
            var policiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .policies)
            for applicationpolicy0 in policies {
                try policiesContainer.encode(applicationpolicy0)
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let criticalDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .critical)
        critical = criticalDecoded
        let policiesContainer = try containerValues.decodeIfPresent([PcaConnectorAdClientTypes.ApplicationPolicy?].self, forKey: .policies)
        var policiesDecoded0:[PcaConnectorAdClientTypes.ApplicationPolicy]? = nil
        if let policiesContainer = policiesContainer {
            policiesDecoded0 = [PcaConnectorAdClientTypes.ApplicationPolicy]()
            for union0 in policiesContainer {
                if let union0 = union0 {
                    policiesDecoded0?.append(union0)
                }
            }
        }
        policies = policiesDecoded0
    }
}

extension PcaConnectorAdClientTypes {
    /// Application policies describe what the certificate can be used for.
    public struct ApplicationPolicies: Swift.Equatable {
        /// Marks the application policy extension as critical.
        public var critical: Swift.Bool?
        /// Application policies describe what the certificate can be used for.
        /// This member is required.
        public var policies: [PcaConnectorAdClientTypes.ApplicationPolicy]?

        public init(
            critical: Swift.Bool? = nil,
            policies: [PcaConnectorAdClientTypes.ApplicationPolicy]? = nil
        )
        {
            self.critical = critical
            self.policies = policies
        }
    }

}

extension PcaConnectorAdClientTypes.ApplicationPolicy: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyobjectidentifier = "PolicyObjectIdentifier"
        case policytype = "PolicyType"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .policyobjectidentifier(policyobjectidentifier):
                try container.encode(policyobjectidentifier, forKey: .policyobjectidentifier)
            case let .policytype(policytype):
                try container.encode(policytype.rawValue, forKey: .policytype)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let policytypeDecoded = try values.decodeIfPresent(PcaConnectorAdClientTypes.ApplicationPolicyType.self, forKey: .policytype)
        if let policytype = policytypeDecoded {
            self = .policytype(policytype)
            return
        }
        let policyobjectidentifierDecoded = try values.decodeIfPresent(Swift.String.self, forKey: .policyobjectidentifier)
        if let policyobjectidentifier = policyobjectidentifierDecoded {
            self = .policyobjectidentifier(policyobjectidentifier)
            return
        }
        self = .sdkUnknown("")
    }
}

extension PcaConnectorAdClientTypes {
    /// Application policies describe what the certificate can be used for.
    public enum ApplicationPolicy: Swift.Equatable {
        /// The type of application policy
        case policytype(PcaConnectorAdClientTypes.ApplicationPolicyType)
        /// The object identifier (OID) of an application policy.
        case policyobjectidentifier(Swift.String)
        case sdkUnknown(Swift.String)
    }

}

extension PcaConnectorAdClientTypes {
    public enum ApplicationPolicyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case allApplicationPolicies
        case anyPurpose
        case attestationIdentityKeyCertificate
        case certificateRequestAgent
        case clientAuthentication
        case codeSigning
        case ctlUsage
        case digitalRights
        case directoryServiceEmailReplication
        case disallowedList
        case dnsServerTrust
        case documentEncryption
        case documentSigning
        case dynamicCodeGenerator
        case earlyLaunchAntimalwareDriver
        case embeddedWindowsSystemComponentVerification
        case enclave
        case encryptingFileSystem
        case endorsementKeyCertificate
        case fileRecovery
        case halExtension
        case ipSecurityEndSystem
        case ipSecurityIkeIntermediate
        case ipSecurityTunnelTermination
        case ipSecurityUser
        case isolatedUserMode
        case kdcAuthentication
        case kernelModeCodeSigning
        case keyPackLicenses
        case keyRecovery
        case keyRecoveryAgent
        case licenseServerVerification
        case lifetimeSigning
        case microsoftPublisher
        case microsoftTimeStamping
        case microsoftTrustListSigning
        case ocspSigning
        case oemWindowsSystemComponentVerification
        case platformCertificate
        case previewBuildSigning
        case privateKeyArchival
        case protectedProcessLightVerification
        case protectedProcessVerification
        case qualifiedSubordination
        case revokedListSigner
        case rootListSigner
        case rootProgramAutoUpdateCaRevocation
        case rootProgramAutoUpdateEndRevocation
        case rootProgramNoOscpFailoverToCrl
        case secureEmail
        case serverAuthentication
        case smartCardLogin
        case spcEncryptedDigestRetryCount
        case spcRelaxedPeMarkerCheck
        case timeStamping
        case windowsHardwareDriverAttestedVerification
        case windowsHardwareDriverExtendedVerification
        case windowsHardwareDriverVerification
        case windowsHelloRecoveryKeyEncryption
        case windowsKitsComponent
        case windowsRtVerification
        case windowsSoftwareExtensionVerification
        case windowsStore
        case windowsSystemComponentVerification
        case windowsTcbComponent
        case windowsThirdPartyApplicationComponent
        case windowsUpdate
        case sdkUnknown(Swift.String)

        public static var allCases: [ApplicationPolicyType] {
            return [
                .allApplicationPolicies,
                .anyPurpose,
                .attestationIdentityKeyCertificate,
                .certificateRequestAgent,
                .clientAuthentication,
                .codeSigning,
                .ctlUsage,
                .digitalRights,
                .directoryServiceEmailReplication,
                .disallowedList,
                .dnsServerTrust,
                .documentEncryption,
                .documentSigning,
                .dynamicCodeGenerator,
                .earlyLaunchAntimalwareDriver,
                .embeddedWindowsSystemComponentVerification,
                .enclave,
                .encryptingFileSystem,
                .endorsementKeyCertificate,
                .fileRecovery,
                .halExtension,
                .ipSecurityEndSystem,
                .ipSecurityIkeIntermediate,
                .ipSecurityTunnelTermination,
                .ipSecurityUser,
                .isolatedUserMode,
                .kdcAuthentication,
                .kernelModeCodeSigning,
                .keyPackLicenses,
                .keyRecovery,
                .keyRecoveryAgent,
                .licenseServerVerification,
                .lifetimeSigning,
                .microsoftPublisher,
                .microsoftTimeStamping,
                .microsoftTrustListSigning,
                .ocspSigning,
                .oemWindowsSystemComponentVerification,
                .platformCertificate,
                .previewBuildSigning,
                .privateKeyArchival,
                .protectedProcessLightVerification,
                .protectedProcessVerification,
                .qualifiedSubordination,
                .revokedListSigner,
                .rootListSigner,
                .rootProgramAutoUpdateCaRevocation,
                .rootProgramAutoUpdateEndRevocation,
                .rootProgramNoOscpFailoverToCrl,
                .secureEmail,
                .serverAuthentication,
                .smartCardLogin,
                .spcEncryptedDigestRetryCount,
                .spcRelaxedPeMarkerCheck,
                .timeStamping,
                .windowsHardwareDriverAttestedVerification,
                .windowsHardwareDriverExtendedVerification,
                .windowsHardwareDriverVerification,
                .windowsHelloRecoveryKeyEncryption,
                .windowsKitsComponent,
                .windowsRtVerification,
                .windowsSoftwareExtensionVerification,
                .windowsStore,
                .windowsSystemComponentVerification,
                .windowsTcbComponent,
                .windowsThirdPartyApplicationComponent,
                .windowsUpdate,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .allApplicationPolicies: return "ALL_APPLICATION_POLICIES"
            case .anyPurpose: return "ANY_PURPOSE"
            case .attestationIdentityKeyCertificate: return "ATTESTATION_IDENTITY_KEY_CERTIFICATE"
            case .certificateRequestAgent: return "CERTIFICATE_REQUEST_AGENT"
            case .clientAuthentication: return "CLIENT_AUTHENTICATION"
            case .codeSigning: return "CODE_SIGNING"
            case .ctlUsage: return "CTL_USAGE"
            case .digitalRights: return "DIGITAL_RIGHTS"
            case .directoryServiceEmailReplication: return "DIRECTORY_SERVICE_EMAIL_REPLICATION"
            case .disallowedList: return "DISALLOWED_LIST"
            case .dnsServerTrust: return "DNS_SERVER_TRUST"
            case .documentEncryption: return "DOCUMENT_ENCRYPTION"
            case .documentSigning: return "DOCUMENT_SIGNING"
            case .dynamicCodeGenerator: return "DYNAMIC_CODE_GENERATOR"
            case .earlyLaunchAntimalwareDriver: return "EARLY_LAUNCH_ANTIMALWARE_DRIVER"
            case .embeddedWindowsSystemComponentVerification: return "EMBEDDED_WINDOWS_SYSTEM_COMPONENT_VERIFICATION"
            case .enclave: return "ENCLAVE"
            case .encryptingFileSystem: return "ENCRYPTING_FILE_SYSTEM"
            case .endorsementKeyCertificate: return "ENDORSEMENT_KEY_CERTIFICATE"
            case .fileRecovery: return "FILE_RECOVERY"
            case .halExtension: return "HAL_EXTENSION"
            case .ipSecurityEndSystem: return "IP_SECURITY_END_SYSTEM"
            case .ipSecurityIkeIntermediate: return "IP_SECURITY_IKE_INTERMEDIATE"
            case .ipSecurityTunnelTermination: return "IP_SECURITY_TUNNEL_TERMINATION"
            case .ipSecurityUser: return "IP_SECURITY_USER"
            case .isolatedUserMode: return "ISOLATED_USER_MODE"
            case .kdcAuthentication: return "KDC_AUTHENTICATION"
            case .kernelModeCodeSigning: return "KERNEL_MODE_CODE_SIGNING"
            case .keyPackLicenses: return "KEY_PACK_LICENSES"
            case .keyRecovery: return "KEY_RECOVERY"
            case .keyRecoveryAgent: return "KEY_RECOVERY_AGENT"
            case .licenseServerVerification: return "LICENSE_SERVER_VERIFICATION"
            case .lifetimeSigning: return "LIFETIME_SIGNING"
            case .microsoftPublisher: return "MICROSOFT_PUBLISHER"
            case .microsoftTimeStamping: return "MICROSOFT_TIME_STAMPING"
            case .microsoftTrustListSigning: return "MICROSOFT_TRUST_LIST_SIGNING"
            case .ocspSigning: return "OCSP_SIGNING"
            case .oemWindowsSystemComponentVerification: return "OEM_WINDOWS_SYSTEM_COMPONENT_VERIFICATION"
            case .platformCertificate: return "PLATFORM_CERTIFICATE"
            case .previewBuildSigning: return "PREVIEW_BUILD_SIGNING"
            case .privateKeyArchival: return "PRIVATE_KEY_ARCHIVAL"
            case .protectedProcessLightVerification: return "PROTECTED_PROCESS_LIGHT_VERIFICATION"
            case .protectedProcessVerification: return "PROTECTED_PROCESS_VERIFICATION"
            case .qualifiedSubordination: return "QUALIFIED_SUBORDINATION"
            case .revokedListSigner: return "REVOKED_LIST_SIGNER"
            case .rootListSigner: return "ROOT_LIST_SIGNER"
            case .rootProgramAutoUpdateCaRevocation: return "ROOT_PROGRAM_AUTO_UPDATE_CA_REVOCATION"
            case .rootProgramAutoUpdateEndRevocation: return "ROOT_PROGRAM_AUTO_UPDATE_END_REVOCATION"
            case .rootProgramNoOscpFailoverToCrl: return "ROOT_PROGRAM_NO_OSCP_FAILOVER_TO_CRL"
            case .secureEmail: return "SECURE_EMAIL"
            case .serverAuthentication: return "SERVER_AUTHENTICATION"
            case .smartCardLogin: return "SMART_CARD_LOGIN"
            case .spcEncryptedDigestRetryCount: return "SPC_ENCRYPTED_DIGEST_RETRY_COUNT"
            case .spcRelaxedPeMarkerCheck: return "SPC_RELAXED_PE_MARKER_CHECK"
            case .timeStamping: return "TIME_STAMPING"
            case .windowsHardwareDriverAttestedVerification: return "WINDOWS_HARDWARE_DRIVER_ATTESTED_VERIFICATION"
            case .windowsHardwareDriverExtendedVerification: return "WINDOWS_HARDWARE_DRIVER_EXTENDED_VERIFICATION"
            case .windowsHardwareDriverVerification: return "WINDOWS_HARDWARE_DRIVER_VERIFICATION"
            case .windowsHelloRecoveryKeyEncryption: return "WINDOWS_HELLO_RECOVERY_KEY_ENCRYPTION"
            case .windowsKitsComponent: return "WINDOWS_KITS_COMPONENT"
            case .windowsRtVerification: return "WINDOWS_RT_VERIFICATION"
            case .windowsSoftwareExtensionVerification: return "WINDOWS_SOFTWARE_EXTENSION_VERIFICATION"
            case .windowsStore: return "WINDOWS_STORE"
            case .windowsSystemComponentVerification: return "WINDOWS_SYSTEM_COMPONENT_VERIFICATION"
            case .windowsTcbComponent: return "WINDOWS_TCB_COMPONENT"
            case .windowsThirdPartyApplicationComponent: return "WINDOWS_THIRD_PARTY_APPLICATION_COMPONENT"
            case .windowsUpdate: return "WINDOWS_UPDATE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ApplicationPolicyType(rawValue: rawValue) ?? ApplicationPolicyType.sdkUnknown(rawValue)
        }
    }
}

extension PcaConnectorAdClientTypes.CertificateValidity: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case renewalPeriod = "RenewalPeriod"
        case validityPeriod = "ValidityPeriod"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let renewalPeriod = self.renewalPeriod {
            try encodeContainer.encode(renewalPeriod, forKey: .renewalPeriod)
        }
        if let validityPeriod = self.validityPeriod {
            try encodeContainer.encode(validityPeriod, forKey: .validityPeriod)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let validityPeriodDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ValidityPeriod.self, forKey: .validityPeriod)
        validityPeriod = validityPeriodDecoded
        let renewalPeriodDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ValidityPeriod.self, forKey: .renewalPeriod)
        renewalPeriod = renewalPeriodDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Information describing the end of the validity period of the certificate. This parameter sets the “Not After” date for the certificate. Certificate validity is the period of time during which a certificate is valid. Validity can be expressed as an explicit date and time when the certificate expires, or as a span of time after issuance, stated in days, months, or years. For more information, see Validity in RFC 5280. This value is unaffected when ValidityNotBefore is also specified. For example, if Validity is set to 20 days in the future, the certificate will expire 20 days from issuance time regardless of the ValidityNotBefore value.
    public struct CertificateValidity: Swift.Equatable {
        /// Renewal period is the period of time before certificate expiration when a new certificate will be requested.
        /// This member is required.
        public var renewalPeriod: PcaConnectorAdClientTypes.ValidityPeriod?
        /// Information describing the end of the validity period of the certificate. This parameter sets the “Not After” date for the certificate. Certificate validity is the period of time during which a certificate is valid. Validity can be expressed as an explicit date and time when the certificate expires, or as a span of time after issuance, stated in days, months, or years. For more information, see Validity in RFC 5280. This value is unaffected when ValidityNotBefore is also specified. For example, if Validity is set to 20 days in the future, the certificate will expire 20 days from issuance time regardless of the ValidityNotBefore value.
        /// This member is required.
        public var validityPeriod: PcaConnectorAdClientTypes.ValidityPeriod?

        public init(
            renewalPeriod: PcaConnectorAdClientTypes.ValidityPeriod? = nil,
            validityPeriod: PcaConnectorAdClientTypes.ValidityPeriod? = nil
        )
        {
            self.renewalPeriod = renewalPeriod
            self.validityPeriod = validityPeriod
        }
    }

}

extension PcaConnectorAdClientTypes {
    public enum ClientCompatibilityV2: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case windowsServer2003
        case windowsServer2008
        case windowsServer2008R2
        case windowsServer2012
        case windowsServer2012R2
        case windowsServer2016
        case sdkUnknown(Swift.String)

        public static var allCases: [ClientCompatibilityV2] {
            return [
                .windowsServer2003,
                .windowsServer2008,
                .windowsServer2008R2,
                .windowsServer2012,
                .windowsServer2012R2,
                .windowsServer2016,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .windowsServer2003: return "WINDOWS_SERVER_2003"
            case .windowsServer2008: return "WINDOWS_SERVER_2008"
            case .windowsServer2008R2: return "WINDOWS_SERVER_2008_R2"
            case .windowsServer2012: return "WINDOWS_SERVER_2012"
            case .windowsServer2012R2: return "WINDOWS_SERVER_2012_R2"
            case .windowsServer2016: return "WINDOWS_SERVER_2016"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ClientCompatibilityV2(rawValue: rawValue) ?? ClientCompatibilityV2.sdkUnknown(rawValue)
        }
    }
}

extension PcaConnectorAdClientTypes {
    public enum ClientCompatibilityV3: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case windowsServer2008
        case windowsServer2008R2
        case windowsServer2012
        case windowsServer2012R2
        case windowsServer2016
        case sdkUnknown(Swift.String)

        public static var allCases: [ClientCompatibilityV3] {
            return [
                .windowsServer2008,
                .windowsServer2008R2,
                .windowsServer2012,
                .windowsServer2012R2,
                .windowsServer2016,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .windowsServer2008: return "WINDOWS_SERVER_2008"
            case .windowsServer2008R2: return "WINDOWS_SERVER_2008_R2"
            case .windowsServer2012: return "WINDOWS_SERVER_2012"
            case .windowsServer2012R2: return "WINDOWS_SERVER_2012_R2"
            case .windowsServer2016: return "WINDOWS_SERVER_2016"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ClientCompatibilityV3(rawValue: rawValue) ?? ClientCompatibilityV3.sdkUnknown(rawValue)
        }
    }
}

extension PcaConnectorAdClientTypes {
    public enum ClientCompatibilityV4: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case windowsServer2012
        case windowsServer2012R2
        case windowsServer2016
        case sdkUnknown(Swift.String)

        public static var allCases: [ClientCompatibilityV4] {
            return [
                .windowsServer2012,
                .windowsServer2012R2,
                .windowsServer2016,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .windowsServer2012: return "WINDOWS_SERVER_2012"
            case .windowsServer2012R2: return "WINDOWS_SERVER_2012_R2"
            case .windowsServer2016: return "WINDOWS_SERVER_2016"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ClientCompatibilityV4(rawValue: rawValue) ?? ClientCompatibilityV4.sdkUnknown(rawValue)
        }
    }
}

extension ConflictException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
            self.properties.resourceId = output.resourceId
            self.properties.resourceType = output.resourceType
        } else {
            self.properties.message = nil
            self.properties.resourceId = nil
            self.properties.resourceType = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// This request cannot be completed for one of the following reasons because the requested resource was being concurrently modified by another request.
public struct ConflictException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The identifier of the Amazon Web Services resource.
        /// This member is required.
        public internal(set) var resourceId: Swift.String? = nil
        /// The resource type, which can be one of Connector, Template, TemplateGroupAccessControlEntry, ServicePrincipalName, or DirectoryRegistration.
        /// This member is required.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConflictException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let resourceId: Swift.String?
    let resourceType: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension PcaConnectorAdClientTypes.Connector: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case certificateAuthorityArn = "CertificateAuthorityArn"
        case certificateEnrollmentPolicyServerEndpoint = "CertificateEnrollmentPolicyServerEndpoint"
        case createdAt = "CreatedAt"
        case directoryId = "DirectoryId"
        case status = "Status"
        case statusReason = "StatusReason"
        case updatedAt = "UpdatedAt"
        case vpcInformation = "VpcInformation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let certificateAuthorityArn = self.certificateAuthorityArn {
            try encodeContainer.encode(certificateAuthorityArn, forKey: .certificateAuthorityArn)
        }
        if let certificateEnrollmentPolicyServerEndpoint = self.certificateEnrollmentPolicyServerEndpoint {
            try encodeContainer.encode(certificateEnrollmentPolicyServerEndpoint, forKey: .certificateEnrollmentPolicyServerEndpoint)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let directoryId = self.directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason.rawValue, forKey: .statusReason)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encodeTimestamp(updatedAt, format: .epochSeconds, forKey: .updatedAt)
        }
        if let vpcInformation = self.vpcInformation {
            try encodeContainer.encode(vpcInformation, forKey: .vpcInformation)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let certificateAuthorityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateAuthorityArn)
        certificateAuthorityArn = certificateAuthorityArnDecoded
        let certificateEnrollmentPolicyServerEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateEnrollmentPolicyServerEndpoint)
        certificateEnrollmentPolicyServerEndpoint = certificateEnrollmentPolicyServerEndpointDecoded
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let vpcInformationDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.VpcInformation.self, forKey: .vpcInformation)
        vpcInformation = vpcInformationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ConnectorStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ConnectorStatusReason.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Amazon Web Services Private CA Connector for Active Directory is a service that links your Active Directory with Amazon Web Services Private CA. The connector brokers the exchange of certificates from Amazon Web Services Private CA to domain-joined users and machines managed with Active Directory.
    public struct Connector: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
        public var arn: Swift.String?
        /// The Amazon Resource Name (ARN) of the certificate authority being used.
        public var certificateAuthorityArn: Swift.String?
        /// Certificate enrollment endpoint for Active Directory domain-joined objects reach out to when requesting certificates.
        public var certificateEnrollmentPolicyServerEndpoint: Swift.String?
        /// The date and time that the connector was created.
        public var createdAt: ClientRuntime.Date?
        /// The identifier of the Active Directory.
        public var directoryId: Swift.String?
        /// Status of the connector. Status can be creating, active, deleting, or failed.
        public var status: PcaConnectorAdClientTypes.ConnectorStatus?
        /// Additional information about the connector status if the status is failed.
        public var statusReason: PcaConnectorAdClientTypes.ConnectorStatusReason?
        /// The date and time that the connector was updated.
        public var updatedAt: ClientRuntime.Date?
        /// Information of the VPC and security group(s) used with the connector.
        public var vpcInformation: PcaConnectorAdClientTypes.VpcInformation?

        public init(
            arn: Swift.String? = nil,
            certificateAuthorityArn: Swift.String? = nil,
            certificateEnrollmentPolicyServerEndpoint: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            directoryId: Swift.String? = nil,
            status: PcaConnectorAdClientTypes.ConnectorStatus? = nil,
            statusReason: PcaConnectorAdClientTypes.ConnectorStatusReason? = nil,
            updatedAt: ClientRuntime.Date? = nil,
            vpcInformation: PcaConnectorAdClientTypes.VpcInformation? = nil
        )
        {
            self.arn = arn
            self.certificateAuthorityArn = certificateAuthorityArn
            self.certificateEnrollmentPolicyServerEndpoint = certificateEnrollmentPolicyServerEndpoint
            self.createdAt = createdAt
            self.directoryId = directoryId
            self.status = status
            self.statusReason = statusReason
            self.updatedAt = updatedAt
            self.vpcInformation = vpcInformation
        }
    }

}

extension PcaConnectorAdClientTypes {
    public enum ConnectorStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [ConnectorStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConnectorStatus(rawValue: rawValue) ?? ConnectorStatus.sdkUnknown(rawValue)
        }
    }
}

extension PcaConnectorAdClientTypes {
    public enum ConnectorStatusReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case directoryAccessDenied
        case internalFailure
        case privatecaAccessDenied
        case privatecaResourceNotFound
        case securityGroupNotInVpc
        case vpcAccessDenied
        case vpcEndpointLimitExceeded
        case vpcResourceNotFound
        case sdkUnknown(Swift.String)

        public static var allCases: [ConnectorStatusReason] {
            return [
                .directoryAccessDenied,
                .internalFailure,
                .privatecaAccessDenied,
                .privatecaResourceNotFound,
                .securityGroupNotInVpc,
                .vpcAccessDenied,
                .vpcEndpointLimitExceeded,
                .vpcResourceNotFound,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .directoryAccessDenied: return "DIRECTORY_ACCESS_DENIED"
            case .internalFailure: return "INTERNAL_FAILURE"
            case .privatecaAccessDenied: return "PRIVATECA_ACCESS_DENIED"
            case .privatecaResourceNotFound: return "PRIVATECA_RESOURCE_NOT_FOUND"
            case .securityGroupNotInVpc: return "SECURITY_GROUP_NOT_IN_VPC"
            case .vpcAccessDenied: return "VPC_ACCESS_DENIED"
            case .vpcEndpointLimitExceeded: return "VPC_ENDPOINT_LIMIT_EXCEEDED"
            case .vpcResourceNotFound: return "VPC_RESOURCE_NOT_FOUND"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ConnectorStatusReason(rawValue: rawValue) ?? ConnectorStatusReason.sdkUnknown(rawValue)
        }
    }
}

extension PcaConnectorAdClientTypes.ConnectorSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case certificateAuthorityArn = "CertificateAuthorityArn"
        case certificateEnrollmentPolicyServerEndpoint = "CertificateEnrollmentPolicyServerEndpoint"
        case createdAt = "CreatedAt"
        case directoryId = "DirectoryId"
        case status = "Status"
        case statusReason = "StatusReason"
        case updatedAt = "UpdatedAt"
        case vpcInformation = "VpcInformation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let certificateAuthorityArn = self.certificateAuthorityArn {
            try encodeContainer.encode(certificateAuthorityArn, forKey: .certificateAuthorityArn)
        }
        if let certificateEnrollmentPolicyServerEndpoint = self.certificateEnrollmentPolicyServerEndpoint {
            try encodeContainer.encode(certificateEnrollmentPolicyServerEndpoint, forKey: .certificateEnrollmentPolicyServerEndpoint)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let directoryId = self.directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason.rawValue, forKey: .statusReason)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encodeTimestamp(updatedAt, format: .epochSeconds, forKey: .updatedAt)
        }
        if let vpcInformation = self.vpcInformation {
            try encodeContainer.encode(vpcInformation, forKey: .vpcInformation)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let certificateAuthorityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateAuthorityArn)
        certificateAuthorityArn = certificateAuthorityArnDecoded
        let certificateEnrollmentPolicyServerEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateEnrollmentPolicyServerEndpoint)
        certificateEnrollmentPolicyServerEndpoint = certificateEnrollmentPolicyServerEndpointDecoded
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let vpcInformationDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.VpcInformation.self, forKey: .vpcInformation)
        vpcInformation = vpcInformationDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ConnectorStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ConnectorStatusReason.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Summary description of the Amazon Web Services Private CA AD connectors belonging to an Amazon Web Services account.
    public struct ConnectorSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
        public var arn: Swift.String?
        /// The Amazon Resource Name (ARN) of the certificate authority being used.
        public var certificateAuthorityArn: Swift.String?
        /// Certificate enrollment endpoint for Active Directory domain-joined objects to request certificates.
        public var certificateEnrollmentPolicyServerEndpoint: Swift.String?
        /// The date and time that the connector was created.
        public var createdAt: ClientRuntime.Date?
        /// The identifier of the Active Directory.
        public var directoryId: Swift.String?
        /// Status of the connector. Status can be creating, active, deleting, or failed.
        public var status: PcaConnectorAdClientTypes.ConnectorStatus?
        /// Additional information about the connector status if the status is failed.
        public var statusReason: PcaConnectorAdClientTypes.ConnectorStatusReason?
        /// The date and time that the connector was updated.
        public var updatedAt: ClientRuntime.Date?
        /// Information of the VPC and security group(s) used with the connector.
        public var vpcInformation: PcaConnectorAdClientTypes.VpcInformation?

        public init(
            arn: Swift.String? = nil,
            certificateAuthorityArn: Swift.String? = nil,
            certificateEnrollmentPolicyServerEndpoint: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            directoryId: Swift.String? = nil,
            status: PcaConnectorAdClientTypes.ConnectorStatus? = nil,
            statusReason: PcaConnectorAdClientTypes.ConnectorStatusReason? = nil,
            updatedAt: ClientRuntime.Date? = nil,
            vpcInformation: PcaConnectorAdClientTypes.VpcInformation? = nil
        )
        {
            self.arn = arn
            self.certificateAuthorityArn = certificateAuthorityArn
            self.certificateEnrollmentPolicyServerEndpoint = certificateEnrollmentPolicyServerEndpoint
            self.createdAt = createdAt
            self.directoryId = directoryId
            self.status = status
            self.statusReason = statusReason
            self.updatedAt = updatedAt
            self.vpcInformation = vpcInformation
        }
    }

}

extension CreateConnectorInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAuthorityArn = "CertificateAuthorityArn"
        case clientToken = "ClientToken"
        case directoryId = "DirectoryId"
        case tags = "Tags"
        case vpcInformation = "VpcInformation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAuthorityArn = self.certificateAuthorityArn {
            try encodeContainer.encode(certificateAuthorityArn, forKey: .certificateAuthorityArn)
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let directoryId = self.directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let vpcInformation = self.vpcInformation {
            try encodeContainer.encode(vpcInformation, forKey: .vpcInformation)
        }
    }
}

extension CreateConnectorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/connectors"
    }
}

public struct CreateConnectorInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the certificate authority being used.
    /// This member is required.
    public var certificateAuthorityArn: Swift.String?
    /// Idempotency token.
    public var clientToken: Swift.String?
    /// The identifier of the Active Directory.
    /// This member is required.
    public var directoryId: Swift.String?
    /// Metadata assigned to a connector consisting of a key-value pair.
    public var tags: [Swift.String:Swift.String]?
    /// Security group IDs that describe the inbound and outbound rules.
    /// This member is required.
    public var vpcInformation: PcaConnectorAdClientTypes.VpcInformation?

    public init(
        certificateAuthorityArn: Swift.String? = nil,
        clientToken: Swift.String? = nil,
        directoryId: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil,
        vpcInformation: PcaConnectorAdClientTypes.VpcInformation? = nil
    )
    {
        self.certificateAuthorityArn = certificateAuthorityArn
        self.clientToken = clientToken
        self.directoryId = directoryId
        self.tags = tags
        self.vpcInformation = vpcInformation
    }
}

struct CreateConnectorInputBody: Swift.Equatable {
    let directoryId: Swift.String?
    let certificateAuthorityArn: Swift.String?
    let vpcInformation: PcaConnectorAdClientTypes.VpcInformation?
    let clientToken: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateConnectorInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAuthorityArn = "CertificateAuthorityArn"
        case clientToken = "ClientToken"
        case directoryId = "DirectoryId"
        case tags = "Tags"
        case vpcInformation = "VpcInformation"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let certificateAuthorityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateAuthorityArn)
        certificateAuthorityArn = certificateAuthorityArnDecoded
        let vpcInformationDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.VpcInformation.self, forKey: .vpcInformation)
        vpcInformation = vpcInformationDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

enum CreateConnectorOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateConnectorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateConnectorOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connectorArn = output.connectorArn
        } else {
            self.connectorArn = nil
        }
    }
}

public struct CreateConnectorOutputResponse: Swift.Equatable {
    /// If successful, the Amazon Resource Name (ARN) of the connector for Active Directory.
    public var connectorArn: Swift.String?

    public init(
        connectorArn: Swift.String? = nil
    )
    {
        self.connectorArn = connectorArn
    }
}

struct CreateConnectorOutputResponseBody: Swift.Equatable {
    let connectorArn: Swift.String?
}

extension CreateConnectorOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectorArn = "ConnectorArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorArn)
        connectorArn = connectorArnDecoded
    }
}

extension CreateDirectoryRegistrationInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case directoryId = "DirectoryId"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let directoryId = self.directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateDirectoryRegistrationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/directoryRegistrations"
    }
}

public struct CreateDirectoryRegistrationInput: Swift.Equatable {
    /// Idempotency token.
    public var clientToken: Swift.String?
    /// The identifier of the Active Directory.
    /// This member is required.
    public var directoryId: Swift.String?
    /// Metadata assigned to a directory registration consisting of a key-value pair.
    public var tags: [Swift.String:Swift.String]?

    public init(
        clientToken: Swift.String? = nil,
        directoryId: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.clientToken = clientToken
        self.directoryId = directoryId
        self.tags = tags
    }
}

struct CreateDirectoryRegistrationInputBody: Swift.Equatable {
    let directoryId: Swift.String?
    let clientToken: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateDirectoryRegistrationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case directoryId = "DirectoryId"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

enum CreateDirectoryRegistrationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateDirectoryRegistrationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateDirectoryRegistrationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directoryRegistrationArn = output.directoryRegistrationArn
        } else {
            self.directoryRegistrationArn = nil
        }
    }
}

public struct CreateDirectoryRegistrationOutputResponse: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
    public var directoryRegistrationArn: Swift.String?

    public init(
        directoryRegistrationArn: Swift.String? = nil
    )
    {
        self.directoryRegistrationArn = directoryRegistrationArn
    }
}

struct CreateDirectoryRegistrationOutputResponseBody: Swift.Equatable {
    let directoryRegistrationArn: Swift.String?
}

extension CreateDirectoryRegistrationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryRegistrationArn = "DirectoryRegistrationArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryRegistrationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryRegistrationArn)
        directoryRegistrationArn = directoryRegistrationArnDecoded
    }
}

extension CreateServicePrincipalNameInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
    }
}

extension CreateServicePrincipalNameInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let directoryRegistrationArn = directoryRegistrationArn else {
            return nil
        }
        guard let connectorArn = connectorArn else {
            return nil
        }
        return "/directoryRegistrations/\(directoryRegistrationArn.urlPercentEncoding())/servicePrincipalNames/\(connectorArn.urlPercentEncoding())"
    }
}

public struct CreateServicePrincipalNameInput: Swift.Equatable {
    /// Idempotency token.
    public var clientToken: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
    /// This member is required.
    public var connectorArn: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
    /// This member is required.
    public var directoryRegistrationArn: Swift.String?

    public init(
        clientToken: Swift.String? = nil,
        connectorArn: Swift.String? = nil,
        directoryRegistrationArn: Swift.String? = nil
    )
    {
        self.clientToken = clientToken
        self.connectorArn = connectorArn
        self.directoryRegistrationArn = directoryRegistrationArn
    }
}

struct CreateServicePrincipalNameInputBody: Swift.Equatable {
    let clientToken: Swift.String?
}

extension CreateServicePrincipalNameInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

enum CreateServicePrincipalNameOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateServicePrincipalNameOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct CreateServicePrincipalNameOutputResponse: Swift.Equatable {

    public init() { }
}

extension CreateTemplateGroupAccessControlEntryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessRights = "AccessRights"
        case clientToken = "ClientToken"
        case groupDisplayName = "GroupDisplayName"
        case groupSecurityIdentifier = "GroupSecurityIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessRights = self.accessRights {
            try encodeContainer.encode(accessRights, forKey: .accessRights)
        }
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let groupDisplayName = self.groupDisplayName {
            try encodeContainer.encode(groupDisplayName, forKey: .groupDisplayName)
        }
        if let groupSecurityIdentifier = self.groupSecurityIdentifier {
            try encodeContainer.encode(groupSecurityIdentifier, forKey: .groupSecurityIdentifier)
        }
    }
}

extension CreateTemplateGroupAccessControlEntryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateArn = templateArn else {
            return nil
        }
        return "/templates/\(templateArn.urlPercentEncoding())/accessControlEntries"
    }
}

public struct CreateTemplateGroupAccessControlEntryInput: Swift.Equatable {
    /// Allow or deny permissions for an Active Directory group to enroll or autoenroll certificates for a template.
    /// This member is required.
    public var accessRights: PcaConnectorAdClientTypes.AccessRights?
    /// Idempotency token.
    public var clientToken: Swift.String?
    /// Name of the Active Directory group. This name does not need to match the group name in Active Directory.
    /// This member is required.
    public var groupDisplayName: Swift.String?
    /// Security identifier (SID) of the group object from Active Directory. The SID starts with "S-".
    /// This member is required.
    public var groupSecurityIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
    /// This member is required.
    public var templateArn: Swift.String?

    public init(
        accessRights: PcaConnectorAdClientTypes.AccessRights? = nil,
        clientToken: Swift.String? = nil,
        groupDisplayName: Swift.String? = nil,
        groupSecurityIdentifier: Swift.String? = nil,
        templateArn: Swift.String? = nil
    )
    {
        self.accessRights = accessRights
        self.clientToken = clientToken
        self.groupDisplayName = groupDisplayName
        self.groupSecurityIdentifier = groupSecurityIdentifier
        self.templateArn = templateArn
    }
}

struct CreateTemplateGroupAccessControlEntryInputBody: Swift.Equatable {
    let groupSecurityIdentifier: Swift.String?
    let groupDisplayName: Swift.String?
    let accessRights: PcaConnectorAdClientTypes.AccessRights?
    let clientToken: Swift.String?
}

extension CreateTemplateGroupAccessControlEntryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessRights = "AccessRights"
        case clientToken = "ClientToken"
        case groupDisplayName = "GroupDisplayName"
        case groupSecurityIdentifier = "GroupSecurityIdentifier"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupSecurityIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupSecurityIdentifier)
        groupSecurityIdentifier = groupSecurityIdentifierDecoded
        let groupDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupDisplayName)
        groupDisplayName = groupDisplayNameDecoded
        let accessRightsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.AccessRights.self, forKey: .accessRights)
        accessRights = accessRightsDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
    }
}

enum CreateTemplateGroupAccessControlEntryOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateTemplateGroupAccessControlEntryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct CreateTemplateGroupAccessControlEntryOutputResponse: Swift.Equatable {

    public init() { }
}

extension CreateTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case connectorArn = "ConnectorArn"
        case definition = "Definition"
        case name = "Name"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientToken = self.clientToken {
            try encodeContainer.encode(clientToken, forKey: .clientToken)
        }
        if let connectorArn = self.connectorArn {
            try encodeContainer.encode(connectorArn, forKey: .connectorArn)
        }
        if let definition = self.definition {
            try encodeContainer.encode(definition, forKey: .definition)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension CreateTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/templates"
    }
}

public struct CreateTemplateInput: Swift.Equatable {
    /// Idempotency token.
    public var clientToken: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
    /// This member is required.
    public var connectorArn: Swift.String?
    /// Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.
    /// This member is required.
    public var definition: PcaConnectorAdClientTypes.TemplateDefinition?
    /// Name of the template. The template name must be unique.
    /// This member is required.
    public var name: Swift.String?
    /// Metadata assigned to a template consisting of a key-value pair.
    public var tags: [Swift.String:Swift.String]?

    public init(
        clientToken: Swift.String? = nil,
        connectorArn: Swift.String? = nil,
        definition: PcaConnectorAdClientTypes.TemplateDefinition? = nil,
        name: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.clientToken = clientToken
        self.connectorArn = connectorArn
        self.definition = definition
        self.name = name
        self.tags = tags
    }
}

struct CreateTemplateInputBody: Swift.Equatable {
    let connectorArn: Swift.String?
    let name: Swift.String?
    let definition: PcaConnectorAdClientTypes.TemplateDefinition?
    let clientToken: Swift.String?
    let tags: [Swift.String:Swift.String]?
}

extension CreateTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientToken = "ClientToken"
        case connectorArn = "ConnectorArn"
        case definition = "Definition"
        case name = "Name"
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorArn)
        connectorArn = connectorArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let definitionDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.TemplateDefinition.self, forKey: .definition)
        definition = definitionDecoded
        let clientTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientToken)
        clientToken = clientTokenDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

enum CreateTemplateOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ServiceQuotaExceededException": return try await ServiceQuotaExceededException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension CreateTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: CreateTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.templateArn = output.templateArn
        } else {
            self.templateArn = nil
        }
    }
}

public struct CreateTemplateOutputResponse: Swift.Equatable {
    /// If successful, the Amazon Resource Name (ARN) of the template.
    public var templateArn: Swift.String?

    public init(
        templateArn: Swift.String? = nil
    )
    {
        self.templateArn = templateArn
    }
}

struct CreateTemplateOutputResponseBody: Swift.Equatable {
    let templateArn: Swift.String?
}

extension CreateTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templateArn = "TemplateArn"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .templateArn)
        templateArn = templateArnDecoded
    }
}

extension DeleteConnectorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let connectorArn = connectorArn else {
            return nil
        }
        return "/connectors/\(connectorArn.urlPercentEncoding())"
    }
}

public struct DeleteConnectorInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
    /// This member is required.
    public var connectorArn: Swift.String?

    public init(
        connectorArn: Swift.String? = nil
    )
    {
        self.connectorArn = connectorArn
    }
}

struct DeleteConnectorInputBody: Swift.Equatable {
}

extension DeleteConnectorInputBody: Swift.Decodable {

    public init(from decoder: Swift.Decoder) throws {
    }
}

enum DeleteConnectorOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteConnectorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteConnectorOutputResponse: Swift.Equatable {

    public init() { }
}

extension DeleteDirectoryRegistrationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let directoryRegistrationArn = directoryRegistrationArn else {
            return nil
        }
        return "/directoryRegistrations/\(directoryRegistrationArn.urlPercentEncoding())"
    }
}

public struct DeleteDirectoryRegistrationInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
    /// This member is required.
    public var directoryRegistrationArn: Swift.String?

    public init(
        directoryRegistrationArn: Swift.String? = nil
    )
    {
        self.directoryRegistrationArn = directoryRegistrationArn
    }
}

struct DeleteDirectoryRegistrationInputBody: Swift.Equatable {
}

extension DeleteDirectoryRegistrationInputBody: Swift.Decodable {

    public init(from decoder: Swift.Decoder) throws {
    }
}

enum DeleteDirectoryRegistrationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteDirectoryRegistrationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteDirectoryRegistrationOutputResponse: Swift.Equatable {

    public init() { }
}

extension DeleteServicePrincipalNameInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let directoryRegistrationArn = directoryRegistrationArn else {
            return nil
        }
        guard let connectorArn = connectorArn else {
            return nil
        }
        return "/directoryRegistrations/\(directoryRegistrationArn.urlPercentEncoding())/servicePrincipalNames/\(connectorArn.urlPercentEncoding())"
    }
}

public struct DeleteServicePrincipalNameInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
    /// This member is required.
    public var connectorArn: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
    /// This member is required.
    public var directoryRegistrationArn: Swift.String?

    public init(
        connectorArn: Swift.String? = nil,
        directoryRegistrationArn: Swift.String? = nil
    )
    {
        self.connectorArn = connectorArn
        self.directoryRegistrationArn = directoryRegistrationArn
    }
}

struct DeleteServicePrincipalNameInputBody: Swift.Equatable {
}

extension DeleteServicePrincipalNameInputBody: Swift.Decodable {

    public init(from decoder: Swift.Decoder) throws {
    }
}

enum DeleteServicePrincipalNameOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteServicePrincipalNameOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteServicePrincipalNameOutputResponse: Swift.Equatable {

    public init() { }
}

extension DeleteTemplateGroupAccessControlEntryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateArn = templateArn else {
            return nil
        }
        guard let groupSecurityIdentifier = groupSecurityIdentifier else {
            return nil
        }
        return "/templates/\(templateArn.urlPercentEncoding())/accessControlEntries/\(groupSecurityIdentifier.urlPercentEncoding())"
    }
}

public struct DeleteTemplateGroupAccessControlEntryInput: Swift.Equatable {
    /// Security identifier (SID) of the group object from Active Directory. The SID starts with "S-".
    /// This member is required.
    public var groupSecurityIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
    /// This member is required.
    public var templateArn: Swift.String?

    public init(
        groupSecurityIdentifier: Swift.String? = nil,
        templateArn: Swift.String? = nil
    )
    {
        self.groupSecurityIdentifier = groupSecurityIdentifier
        self.templateArn = templateArn
    }
}

struct DeleteTemplateGroupAccessControlEntryInputBody: Swift.Equatable {
}

extension DeleteTemplateGroupAccessControlEntryInputBody: Swift.Decodable {

    public init(from decoder: Swift.Decoder) throws {
    }
}

enum DeleteTemplateGroupAccessControlEntryOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteTemplateGroupAccessControlEntryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteTemplateGroupAccessControlEntryOutputResponse: Swift.Equatable {

    public init() { }
}

extension DeleteTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateArn = templateArn else {
            return nil
        }
        return "/templates/\(templateArn.urlPercentEncoding())"
    }
}

public struct DeleteTemplateInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
    /// This member is required.
    public var templateArn: Swift.String?

    public init(
        templateArn: Swift.String? = nil
    )
    {
        self.templateArn = templateArn
    }
}

struct DeleteTemplateInputBody: Swift.Equatable {
}

extension DeleteTemplateInputBody: Swift.Decodable {

    public init(from decoder: Swift.Decoder) throws {
    }
}

enum DeleteTemplateOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension DeleteTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct DeleteTemplateOutputResponse: Swift.Equatable {

    public init() { }
}

extension PcaConnectorAdClientTypes.DirectoryRegistration: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case createdAt = "CreatedAt"
        case directoryId = "DirectoryId"
        case status = "Status"
        case statusReason = "StatusReason"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let directoryId = self.directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason.rawValue, forKey: .statusReason)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encodeTimestamp(updatedAt, format: .epochSeconds, forKey: .updatedAt)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.DirectoryRegistrationStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.DirectoryRegistrationStatusReason.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// The directory registration represents the authorization of the connector service with a directory.
    public struct DirectoryRegistration: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that was returned when you called CreateDirectoryRegistration.
        public var arn: Swift.String?
        /// The date and time that the directory registration was created.
        public var createdAt: ClientRuntime.Date?
        /// The identifier of the Active Directory.
        public var directoryId: Swift.String?
        /// Status of the directory registration.
        public var status: PcaConnectorAdClientTypes.DirectoryRegistrationStatus?
        /// Additional information about the directory registration status if the status is failed.
        public var statusReason: PcaConnectorAdClientTypes.DirectoryRegistrationStatusReason?
        /// The date and time that the directory registration was updated.
        public var updatedAt: ClientRuntime.Date?

        public init(
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            directoryId: Swift.String? = nil,
            status: PcaConnectorAdClientTypes.DirectoryRegistrationStatus? = nil,
            statusReason: PcaConnectorAdClientTypes.DirectoryRegistrationStatusReason? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.directoryId = directoryId
            self.status = status
            self.statusReason = statusReason
            self.updatedAt = updatedAt
        }
    }

}

extension PcaConnectorAdClientTypes {
    public enum DirectoryRegistrationStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [DirectoryRegistrationStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DirectoryRegistrationStatus(rawValue: rawValue) ?? DirectoryRegistrationStatus.sdkUnknown(rawValue)
        }
    }
}

extension PcaConnectorAdClientTypes {
    public enum DirectoryRegistrationStatusReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case directoryAccessDenied
        case directoryNotActive
        case directoryNotReachable
        case directoryResourceNotFound
        case directoryTypeNotSupported
        case internalFailure
        case sdkUnknown(Swift.String)

        public static var allCases: [DirectoryRegistrationStatusReason] {
            return [
                .directoryAccessDenied,
                .directoryNotActive,
                .directoryNotReachable,
                .directoryResourceNotFound,
                .directoryTypeNotSupported,
                .internalFailure,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .directoryAccessDenied: return "DIRECTORY_ACCESS_DENIED"
            case .directoryNotActive: return "DIRECTORY_NOT_ACTIVE"
            case .directoryNotReachable: return "DIRECTORY_NOT_REACHABLE"
            case .directoryResourceNotFound: return "DIRECTORY_RESOURCE_NOT_FOUND"
            case .directoryTypeNotSupported: return "DIRECTORY_TYPE_NOT_SUPPORTED"
            case .internalFailure: return "INTERNAL_FAILURE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DirectoryRegistrationStatusReason(rawValue: rawValue) ?? DirectoryRegistrationStatusReason.sdkUnknown(rawValue)
        }
    }
}

extension PcaConnectorAdClientTypes.DirectoryRegistrationSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case createdAt = "CreatedAt"
        case directoryId = "DirectoryId"
        case status = "Status"
        case statusReason = "StatusReason"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let directoryId = self.directoryId {
            try encodeContainer.encode(directoryId, forKey: .directoryId)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason.rawValue, forKey: .statusReason)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encodeTimestamp(updatedAt, format: .epochSeconds, forKey: .updatedAt)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let directoryIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryId)
        directoryId = directoryIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.DirectoryRegistrationStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.DirectoryRegistrationStatusReason.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// The directory registration represents the authorization of the connector service with the Active Directory.
    public struct DirectoryRegistrationSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
        public var arn: Swift.String?
        /// The date and time that the directory registration was created.
        public var createdAt: ClientRuntime.Date?
        /// The identifier of the Active Directory.
        public var directoryId: Swift.String?
        /// Status of the directory registration.
        public var status: PcaConnectorAdClientTypes.DirectoryRegistrationStatus?
        /// Additional information about the directory registration status if the status is failed.
        public var statusReason: PcaConnectorAdClientTypes.DirectoryRegistrationStatusReason?
        /// The date and time that the directory registration was updated.
        public var updatedAt: ClientRuntime.Date?

        public init(
            arn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            directoryId: Swift.String? = nil,
            status: PcaConnectorAdClientTypes.DirectoryRegistrationStatus? = nil,
            statusReason: PcaConnectorAdClientTypes.DirectoryRegistrationStatusReason? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.arn = arn
            self.createdAt = createdAt
            self.directoryId = directoryId
            self.status = status
            self.statusReason = statusReason
            self.updatedAt = updatedAt
        }
    }

}

extension PcaConnectorAdClientTypes.EnrollmentFlagsV2: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enableKeyReuseOnNtTokenKeysetStorageFull = "EnableKeyReuseOnNtTokenKeysetStorageFull"
        case includeSymmetricAlgorithms = "IncludeSymmetricAlgorithms"
        case noSecurityExtension = "NoSecurityExtension"
        case removeInvalidCertificateFromPersonalStore = "RemoveInvalidCertificateFromPersonalStore"
        case userInteractionRequired = "UserInteractionRequired"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enableKeyReuseOnNtTokenKeysetStorageFull = self.enableKeyReuseOnNtTokenKeysetStorageFull {
            try encodeContainer.encode(enableKeyReuseOnNtTokenKeysetStorageFull, forKey: .enableKeyReuseOnNtTokenKeysetStorageFull)
        }
        if let includeSymmetricAlgorithms = self.includeSymmetricAlgorithms {
            try encodeContainer.encode(includeSymmetricAlgorithms, forKey: .includeSymmetricAlgorithms)
        }
        if let noSecurityExtension = self.noSecurityExtension {
            try encodeContainer.encode(noSecurityExtension, forKey: .noSecurityExtension)
        }
        if let removeInvalidCertificateFromPersonalStore = self.removeInvalidCertificateFromPersonalStore {
            try encodeContainer.encode(removeInvalidCertificateFromPersonalStore, forKey: .removeInvalidCertificateFromPersonalStore)
        }
        if let userInteractionRequired = self.userInteractionRequired {
            try encodeContainer.encode(userInteractionRequired, forKey: .userInteractionRequired)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let includeSymmetricAlgorithmsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeSymmetricAlgorithms)
        includeSymmetricAlgorithms = includeSymmetricAlgorithmsDecoded
        let userInteractionRequiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .userInteractionRequired)
        userInteractionRequired = userInteractionRequiredDecoded
        let removeInvalidCertificateFromPersonalStoreDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .removeInvalidCertificateFromPersonalStore)
        removeInvalidCertificateFromPersonalStore = removeInvalidCertificateFromPersonalStoreDecoded
        let noSecurityExtensionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .noSecurityExtension)
        noSecurityExtension = noSecurityExtensionDecoded
        let enableKeyReuseOnNtTokenKeysetStorageFullDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableKeyReuseOnNtTokenKeysetStorageFull)
        enableKeyReuseOnNtTokenKeysetStorageFull = enableKeyReuseOnNtTokenKeysetStorageFullDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Template configurations for v2 template schema.
    public struct EnrollmentFlagsV2: Swift.Equatable {
        /// Allow renewal using the same key.
        public var enableKeyReuseOnNtTokenKeysetStorageFull: Swift.Bool?
        /// Include symmetric algorithms allowed by the subject.
        public var includeSymmetricAlgorithms: Swift.Bool?
        /// This flag instructs the CA to not include the security extension szOID_NTDS_CA_SECURITY_EXT (OID:1.3.6.1.4.1.311.25.2), as specified in [MS-WCCE] sections 2.2.2.7.7.4 and 3.2.2.6.2.1.4.5.9, in the issued certificate. This addresses a Windows Kerberos elevation-of-privilege vulnerability.
        public var noSecurityExtension: Swift.Bool?
        /// Delete expired or revoked certificates instead of archiving them.
        public var removeInvalidCertificateFromPersonalStore: Swift.Bool?
        /// Require user interaction when the subject is enrolled and the private key associated with the certificate is used.
        public var userInteractionRequired: Swift.Bool?

        public init(
            enableKeyReuseOnNtTokenKeysetStorageFull: Swift.Bool? = nil,
            includeSymmetricAlgorithms: Swift.Bool? = nil,
            noSecurityExtension: Swift.Bool? = nil,
            removeInvalidCertificateFromPersonalStore: Swift.Bool? = nil,
            userInteractionRequired: Swift.Bool? = nil
        )
        {
            self.enableKeyReuseOnNtTokenKeysetStorageFull = enableKeyReuseOnNtTokenKeysetStorageFull
            self.includeSymmetricAlgorithms = includeSymmetricAlgorithms
            self.noSecurityExtension = noSecurityExtension
            self.removeInvalidCertificateFromPersonalStore = removeInvalidCertificateFromPersonalStore
            self.userInteractionRequired = userInteractionRequired
        }
    }

}

extension PcaConnectorAdClientTypes.EnrollmentFlagsV3: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enableKeyReuseOnNtTokenKeysetStorageFull = "EnableKeyReuseOnNtTokenKeysetStorageFull"
        case includeSymmetricAlgorithms = "IncludeSymmetricAlgorithms"
        case noSecurityExtension = "NoSecurityExtension"
        case removeInvalidCertificateFromPersonalStore = "RemoveInvalidCertificateFromPersonalStore"
        case userInteractionRequired = "UserInteractionRequired"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enableKeyReuseOnNtTokenKeysetStorageFull = self.enableKeyReuseOnNtTokenKeysetStorageFull {
            try encodeContainer.encode(enableKeyReuseOnNtTokenKeysetStorageFull, forKey: .enableKeyReuseOnNtTokenKeysetStorageFull)
        }
        if let includeSymmetricAlgorithms = self.includeSymmetricAlgorithms {
            try encodeContainer.encode(includeSymmetricAlgorithms, forKey: .includeSymmetricAlgorithms)
        }
        if let noSecurityExtension = self.noSecurityExtension {
            try encodeContainer.encode(noSecurityExtension, forKey: .noSecurityExtension)
        }
        if let removeInvalidCertificateFromPersonalStore = self.removeInvalidCertificateFromPersonalStore {
            try encodeContainer.encode(removeInvalidCertificateFromPersonalStore, forKey: .removeInvalidCertificateFromPersonalStore)
        }
        if let userInteractionRequired = self.userInteractionRequired {
            try encodeContainer.encode(userInteractionRequired, forKey: .userInteractionRequired)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let includeSymmetricAlgorithmsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeSymmetricAlgorithms)
        includeSymmetricAlgorithms = includeSymmetricAlgorithmsDecoded
        let userInteractionRequiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .userInteractionRequired)
        userInteractionRequired = userInteractionRequiredDecoded
        let removeInvalidCertificateFromPersonalStoreDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .removeInvalidCertificateFromPersonalStore)
        removeInvalidCertificateFromPersonalStore = removeInvalidCertificateFromPersonalStoreDecoded
        let noSecurityExtensionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .noSecurityExtension)
        noSecurityExtension = noSecurityExtensionDecoded
        let enableKeyReuseOnNtTokenKeysetStorageFullDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableKeyReuseOnNtTokenKeysetStorageFull)
        enableKeyReuseOnNtTokenKeysetStorageFull = enableKeyReuseOnNtTokenKeysetStorageFullDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Template configurations for v3 template schema.
    public struct EnrollmentFlagsV3: Swift.Equatable {
        /// Allow renewal using the same key.
        public var enableKeyReuseOnNtTokenKeysetStorageFull: Swift.Bool?
        /// Include symmetric algorithms allowed by the subject.
        public var includeSymmetricAlgorithms: Swift.Bool?
        /// This flag instructs the CA to not include the security extension szOID_NTDS_CA_SECURITY_EXT (OID:1.3.6.1.4.1.311.25.2), as specified in [MS-WCCE] sections 2.2.2.7.7.4 and 3.2.2.6.2.1.4.5.9, in the issued certificate. This addresses a Windows Kerberos elevation-of-privilege vulnerability.
        public var noSecurityExtension: Swift.Bool?
        /// Delete expired or revoked certificates instead of archiving them.
        public var removeInvalidCertificateFromPersonalStore: Swift.Bool?
        /// Require user interaction when the subject is enrolled and the private key associated with the certificate is used.
        public var userInteractionRequired: Swift.Bool?

        public init(
            enableKeyReuseOnNtTokenKeysetStorageFull: Swift.Bool? = nil,
            includeSymmetricAlgorithms: Swift.Bool? = nil,
            noSecurityExtension: Swift.Bool? = nil,
            removeInvalidCertificateFromPersonalStore: Swift.Bool? = nil,
            userInteractionRequired: Swift.Bool? = nil
        )
        {
            self.enableKeyReuseOnNtTokenKeysetStorageFull = enableKeyReuseOnNtTokenKeysetStorageFull
            self.includeSymmetricAlgorithms = includeSymmetricAlgorithms
            self.noSecurityExtension = noSecurityExtension
            self.removeInvalidCertificateFromPersonalStore = removeInvalidCertificateFromPersonalStore
            self.userInteractionRequired = userInteractionRequired
        }
    }

}

extension PcaConnectorAdClientTypes.EnrollmentFlagsV4: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enableKeyReuseOnNtTokenKeysetStorageFull = "EnableKeyReuseOnNtTokenKeysetStorageFull"
        case includeSymmetricAlgorithms = "IncludeSymmetricAlgorithms"
        case noSecurityExtension = "NoSecurityExtension"
        case removeInvalidCertificateFromPersonalStore = "RemoveInvalidCertificateFromPersonalStore"
        case userInteractionRequired = "UserInteractionRequired"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let enableKeyReuseOnNtTokenKeysetStorageFull = self.enableKeyReuseOnNtTokenKeysetStorageFull {
            try encodeContainer.encode(enableKeyReuseOnNtTokenKeysetStorageFull, forKey: .enableKeyReuseOnNtTokenKeysetStorageFull)
        }
        if let includeSymmetricAlgorithms = self.includeSymmetricAlgorithms {
            try encodeContainer.encode(includeSymmetricAlgorithms, forKey: .includeSymmetricAlgorithms)
        }
        if let noSecurityExtension = self.noSecurityExtension {
            try encodeContainer.encode(noSecurityExtension, forKey: .noSecurityExtension)
        }
        if let removeInvalidCertificateFromPersonalStore = self.removeInvalidCertificateFromPersonalStore {
            try encodeContainer.encode(removeInvalidCertificateFromPersonalStore, forKey: .removeInvalidCertificateFromPersonalStore)
        }
        if let userInteractionRequired = self.userInteractionRequired {
            try encodeContainer.encode(userInteractionRequired, forKey: .userInteractionRequired)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let includeSymmetricAlgorithmsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .includeSymmetricAlgorithms)
        includeSymmetricAlgorithms = includeSymmetricAlgorithmsDecoded
        let userInteractionRequiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .userInteractionRequired)
        userInteractionRequired = userInteractionRequiredDecoded
        let removeInvalidCertificateFromPersonalStoreDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .removeInvalidCertificateFromPersonalStore)
        removeInvalidCertificateFromPersonalStore = removeInvalidCertificateFromPersonalStoreDecoded
        let noSecurityExtensionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .noSecurityExtension)
        noSecurityExtension = noSecurityExtensionDecoded
        let enableKeyReuseOnNtTokenKeysetStorageFullDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .enableKeyReuseOnNtTokenKeysetStorageFull)
        enableKeyReuseOnNtTokenKeysetStorageFull = enableKeyReuseOnNtTokenKeysetStorageFullDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Template configurations for v4 template schema.
    public struct EnrollmentFlagsV4: Swift.Equatable {
        /// Allow renewal using the same key.
        public var enableKeyReuseOnNtTokenKeysetStorageFull: Swift.Bool?
        /// Include symmetric algorithms allowed by the subject.
        public var includeSymmetricAlgorithms: Swift.Bool?
        /// This flag instructs the CA to not include the security extension szOID_NTDS_CA_SECURITY_EXT (OID:1.3.6.1.4.1.311.25.2), as specified in [MS-WCCE] sections 2.2.2.7.7.4 and 3.2.2.6.2.1.4.5.9, in the issued certificate. This addresses a Windows Kerberos elevation-of-privilege vulnerability.
        public var noSecurityExtension: Swift.Bool?
        /// Delete expired or revoked certificates instead of archiving them.
        public var removeInvalidCertificateFromPersonalStore: Swift.Bool?
        /// Require user interaction when the subject is enrolled and the private key associated with the certificate is used.
        public var userInteractionRequired: Swift.Bool?

        public init(
            enableKeyReuseOnNtTokenKeysetStorageFull: Swift.Bool? = nil,
            includeSymmetricAlgorithms: Swift.Bool? = nil,
            noSecurityExtension: Swift.Bool? = nil,
            removeInvalidCertificateFromPersonalStore: Swift.Bool? = nil,
            userInteractionRequired: Swift.Bool? = nil
        )
        {
            self.enableKeyReuseOnNtTokenKeysetStorageFull = enableKeyReuseOnNtTokenKeysetStorageFull
            self.includeSymmetricAlgorithms = includeSymmetricAlgorithms
            self.noSecurityExtension = noSecurityExtension
            self.removeInvalidCertificateFromPersonalStore = removeInvalidCertificateFromPersonalStore
            self.userInteractionRequired = userInteractionRequired
        }
    }

}

extension PcaConnectorAdClientTypes.ExtensionsV2: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationPolicies = "ApplicationPolicies"
        case keyUsage = "KeyUsage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationPolicies = self.applicationPolicies {
            try encodeContainer.encode(applicationPolicies, forKey: .applicationPolicies)
        }
        if let keyUsage = self.keyUsage {
            try encodeContainer.encode(keyUsage, forKey: .keyUsage)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyUsageDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.KeyUsage.self, forKey: .keyUsage)
        keyUsage = keyUsageDecoded
        let applicationPoliciesDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ApplicationPolicies.self, forKey: .applicationPolicies)
        applicationPolicies = applicationPoliciesDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Certificate extensions for v2 template schema
    public struct ExtensionsV2: Swift.Equatable {
        /// Application policies specify what the certificate is used for and its purpose.
        public var applicationPolicies: PcaConnectorAdClientTypes.ApplicationPolicies?
        /// The key usage extension defines the purpose (e.g., encipherment, signature, certificate signing) of the key contained in the certificate.
        /// This member is required.
        public var keyUsage: PcaConnectorAdClientTypes.KeyUsage?

        public init(
            applicationPolicies: PcaConnectorAdClientTypes.ApplicationPolicies? = nil,
            keyUsage: PcaConnectorAdClientTypes.KeyUsage? = nil
        )
        {
            self.applicationPolicies = applicationPolicies
            self.keyUsage = keyUsage
        }
    }

}

extension PcaConnectorAdClientTypes.ExtensionsV3: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationPolicies = "ApplicationPolicies"
        case keyUsage = "KeyUsage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationPolicies = self.applicationPolicies {
            try encodeContainer.encode(applicationPolicies, forKey: .applicationPolicies)
        }
        if let keyUsage = self.keyUsage {
            try encodeContainer.encode(keyUsage, forKey: .keyUsage)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyUsageDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.KeyUsage.self, forKey: .keyUsage)
        keyUsage = keyUsageDecoded
        let applicationPoliciesDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ApplicationPolicies.self, forKey: .applicationPolicies)
        applicationPolicies = applicationPoliciesDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Certificate extensions for v3 template schema
    public struct ExtensionsV3: Swift.Equatable {
        /// Application policies specify what the certificate is used for and its purpose.
        public var applicationPolicies: PcaConnectorAdClientTypes.ApplicationPolicies?
        /// The key usage extension defines the purpose (e.g., encipherment, signature, certificate signing) of the key contained in the certificate.
        /// This member is required.
        public var keyUsage: PcaConnectorAdClientTypes.KeyUsage?

        public init(
            applicationPolicies: PcaConnectorAdClientTypes.ApplicationPolicies? = nil,
            keyUsage: PcaConnectorAdClientTypes.KeyUsage? = nil
        )
        {
            self.applicationPolicies = applicationPolicies
            self.keyUsage = keyUsage
        }
    }

}

extension PcaConnectorAdClientTypes.ExtensionsV4: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationPolicies = "ApplicationPolicies"
        case keyUsage = "KeyUsage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationPolicies = self.applicationPolicies {
            try encodeContainer.encode(applicationPolicies, forKey: .applicationPolicies)
        }
        if let keyUsage = self.keyUsage {
            try encodeContainer.encode(keyUsage, forKey: .keyUsage)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyUsageDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.KeyUsage.self, forKey: .keyUsage)
        keyUsage = keyUsageDecoded
        let applicationPoliciesDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ApplicationPolicies.self, forKey: .applicationPolicies)
        applicationPolicies = applicationPoliciesDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Certificate extensions for v4 template schema
    public struct ExtensionsV4: Swift.Equatable {
        /// Application policies specify what the certificate is used for and its purpose.
        public var applicationPolicies: PcaConnectorAdClientTypes.ApplicationPolicies?
        /// The key usage extension defines the purpose (e.g., encipherment, signature) of the key contained in the certificate.
        /// This member is required.
        public var keyUsage: PcaConnectorAdClientTypes.KeyUsage?

        public init(
            applicationPolicies: PcaConnectorAdClientTypes.ApplicationPolicies? = nil,
            keyUsage: PcaConnectorAdClientTypes.KeyUsage? = nil
        )
        {
            self.applicationPolicies = applicationPolicies
            self.keyUsage = keyUsage
        }
    }

}

extension PcaConnectorAdClientTypes.GeneralFlagsV2: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoEnrollment = "AutoEnrollment"
        case machineType = "MachineType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoEnrollment = self.autoEnrollment {
            try encodeContainer.encode(autoEnrollment, forKey: .autoEnrollment)
        }
        if let machineType = self.machineType {
            try encodeContainer.encode(machineType, forKey: .machineType)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoEnrollmentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoEnrollment)
        autoEnrollment = autoEnrollmentDecoded
        let machineTypeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .machineType)
        machineType = machineTypeDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// General flags for v2 template schema that defines if the template is for a machine or a user and if the template can be issued using autoenrollment.
    public struct GeneralFlagsV2: Swift.Equatable {
        /// Allows certificate issuance using autoenrollment. Set to TRUE to allow autoenrollment.
        public var autoEnrollment: Swift.Bool?
        /// Defines if the template is for machines or users. Set to TRUE if the template is for machines. Set to FALSE if the template is for users.
        public var machineType: Swift.Bool?

        public init(
            autoEnrollment: Swift.Bool? = nil,
            machineType: Swift.Bool? = nil
        )
        {
            self.autoEnrollment = autoEnrollment
            self.machineType = machineType
        }
    }

}

extension PcaConnectorAdClientTypes.GeneralFlagsV3: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoEnrollment = "AutoEnrollment"
        case machineType = "MachineType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoEnrollment = self.autoEnrollment {
            try encodeContainer.encode(autoEnrollment, forKey: .autoEnrollment)
        }
        if let machineType = self.machineType {
            try encodeContainer.encode(machineType, forKey: .machineType)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoEnrollmentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoEnrollment)
        autoEnrollment = autoEnrollmentDecoded
        let machineTypeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .machineType)
        machineType = machineTypeDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// General flags for v3 template schema that defines if the template is for a machine or a user and if the template can be issued using autoenrollment.
    public struct GeneralFlagsV3: Swift.Equatable {
        /// Allows certificate issuance using autoenrollment. Set to TRUE to allow autoenrollment.
        public var autoEnrollment: Swift.Bool?
        /// Defines if the template is for machines or users. Set to TRUE if the template is for machines. Set to FALSE if the template is for users
        public var machineType: Swift.Bool?

        public init(
            autoEnrollment: Swift.Bool? = nil,
            machineType: Swift.Bool? = nil
        )
        {
            self.autoEnrollment = autoEnrollment
            self.machineType = machineType
        }
    }

}

extension PcaConnectorAdClientTypes.GeneralFlagsV4: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoEnrollment = "AutoEnrollment"
        case machineType = "MachineType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let autoEnrollment = self.autoEnrollment {
            try encodeContainer.encode(autoEnrollment, forKey: .autoEnrollment)
        }
        if let machineType = self.machineType {
            try encodeContainer.encode(machineType, forKey: .machineType)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoEnrollmentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .autoEnrollment)
        autoEnrollment = autoEnrollmentDecoded
        let machineTypeDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .machineType)
        machineType = machineTypeDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// General flags for v4 template schema that defines if the template is for a machine or a user and if the template can be issued using autoenrollment.
    public struct GeneralFlagsV4: Swift.Equatable {
        /// Allows certificate issuance using autoenrollment. Set to TRUE to allow autoenrollment.
        public var autoEnrollment: Swift.Bool?
        /// Defines if the template is for machines or users. Set to TRUE if the template is for machines. Set to FALSE if the template is for users
        public var machineType: Swift.Bool?

        public init(
            autoEnrollment: Swift.Bool? = nil,
            machineType: Swift.Bool? = nil
        )
        {
            self.autoEnrollment = autoEnrollment
            self.machineType = machineType
        }
    }

}

extension GetConnectorInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let connectorArn = connectorArn else {
            return nil
        }
        return "/connectors/\(connectorArn.urlPercentEncoding())"
    }
}

public struct GetConnectorInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
    /// This member is required.
    public var connectorArn: Swift.String?

    public init(
        connectorArn: Swift.String? = nil
    )
    {
        self.connectorArn = connectorArn
    }
}

struct GetConnectorInputBody: Swift.Equatable {
}

extension GetConnectorInputBody: Swift.Decodable {

    public init(from decoder: Swift.Decoder) throws {
    }
}

enum GetConnectorOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetConnectorOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetConnectorOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connector = output.connector
        } else {
            self.connector = nil
        }
    }
}

public struct GetConnectorOutputResponse: Swift.Equatable {
    /// A structure that contains information about your connector.
    public var connector: PcaConnectorAdClientTypes.Connector?

    public init(
        connector: PcaConnectorAdClientTypes.Connector? = nil
    )
    {
        self.connector = connector
    }
}

struct GetConnectorOutputResponseBody: Swift.Equatable {
    let connector: PcaConnectorAdClientTypes.Connector?
}

extension GetConnectorOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connector = "Connector"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectorDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.Connector.self, forKey: .connector)
        connector = connectorDecoded
    }
}

extension GetDirectoryRegistrationInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let directoryRegistrationArn = directoryRegistrationArn else {
            return nil
        }
        return "/directoryRegistrations/\(directoryRegistrationArn.urlPercentEncoding())"
    }
}

public struct GetDirectoryRegistrationInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
    /// This member is required.
    public var directoryRegistrationArn: Swift.String?

    public init(
        directoryRegistrationArn: Swift.String? = nil
    )
    {
        self.directoryRegistrationArn = directoryRegistrationArn
    }
}

struct GetDirectoryRegistrationInputBody: Swift.Equatable {
}

extension GetDirectoryRegistrationInputBody: Swift.Decodable {

    public init(from decoder: Swift.Decoder) throws {
    }
}

enum GetDirectoryRegistrationOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetDirectoryRegistrationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetDirectoryRegistrationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directoryRegistration = output.directoryRegistration
        } else {
            self.directoryRegistration = nil
        }
    }
}

public struct GetDirectoryRegistrationOutputResponse: Swift.Equatable {
    /// The directory registration represents the authorization of the connector service with a directory.
    public var directoryRegistration: PcaConnectorAdClientTypes.DirectoryRegistration?

    public init(
        directoryRegistration: PcaConnectorAdClientTypes.DirectoryRegistration? = nil
    )
    {
        self.directoryRegistration = directoryRegistration
    }
}

struct GetDirectoryRegistrationOutputResponseBody: Swift.Equatable {
    let directoryRegistration: PcaConnectorAdClientTypes.DirectoryRegistration?
}

extension GetDirectoryRegistrationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryRegistration = "DirectoryRegistration"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryRegistrationDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.DirectoryRegistration.self, forKey: .directoryRegistration)
        directoryRegistration = directoryRegistrationDecoded
    }
}

extension GetServicePrincipalNameInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let directoryRegistrationArn = directoryRegistrationArn else {
            return nil
        }
        guard let connectorArn = connectorArn else {
            return nil
        }
        return "/directoryRegistrations/\(directoryRegistrationArn.urlPercentEncoding())/servicePrincipalNames/\(connectorArn.urlPercentEncoding())"
    }
}

public struct GetServicePrincipalNameInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
    /// This member is required.
    public var connectorArn: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
    /// This member is required.
    public var directoryRegistrationArn: Swift.String?

    public init(
        connectorArn: Swift.String? = nil,
        directoryRegistrationArn: Swift.String? = nil
    )
    {
        self.connectorArn = connectorArn
        self.directoryRegistrationArn = directoryRegistrationArn
    }
}

struct GetServicePrincipalNameInputBody: Swift.Equatable {
}

extension GetServicePrincipalNameInputBody: Swift.Decodable {

    public init(from decoder: Swift.Decoder) throws {
    }
}

enum GetServicePrincipalNameOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetServicePrincipalNameOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetServicePrincipalNameOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.servicePrincipalName = output.servicePrincipalName
        } else {
            self.servicePrincipalName = nil
        }
    }
}

public struct GetServicePrincipalNameOutputResponse: Swift.Equatable {
    /// The service principal name that the connector uses to authenticate with Active Directory.
    public var servicePrincipalName: PcaConnectorAdClientTypes.ServicePrincipalName?

    public init(
        servicePrincipalName: PcaConnectorAdClientTypes.ServicePrincipalName? = nil
    )
    {
        self.servicePrincipalName = servicePrincipalName
    }
}

struct GetServicePrincipalNameOutputResponseBody: Swift.Equatable {
    let servicePrincipalName: PcaConnectorAdClientTypes.ServicePrincipalName?
}

extension GetServicePrincipalNameOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case servicePrincipalName = "ServicePrincipalName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let servicePrincipalNameDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ServicePrincipalName.self, forKey: .servicePrincipalName)
        servicePrincipalName = servicePrincipalNameDecoded
    }
}

extension GetTemplateGroupAccessControlEntryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateArn = templateArn else {
            return nil
        }
        guard let groupSecurityIdentifier = groupSecurityIdentifier else {
            return nil
        }
        return "/templates/\(templateArn.urlPercentEncoding())/accessControlEntries/\(groupSecurityIdentifier.urlPercentEncoding())"
    }
}

public struct GetTemplateGroupAccessControlEntryInput: Swift.Equatable {
    /// Security identifier (SID) of the group object from Active Directory. The SID starts with "S-".
    /// This member is required.
    public var groupSecurityIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
    /// This member is required.
    public var templateArn: Swift.String?

    public init(
        groupSecurityIdentifier: Swift.String? = nil,
        templateArn: Swift.String? = nil
    )
    {
        self.groupSecurityIdentifier = groupSecurityIdentifier
        self.templateArn = templateArn
    }
}

struct GetTemplateGroupAccessControlEntryInputBody: Swift.Equatable {
}

extension GetTemplateGroupAccessControlEntryInputBody: Swift.Decodable {

    public init(from decoder: Swift.Decoder) throws {
    }
}

enum GetTemplateGroupAccessControlEntryOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetTemplateGroupAccessControlEntryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetTemplateGroupAccessControlEntryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accessControlEntry = output.accessControlEntry
        } else {
            self.accessControlEntry = nil
        }
    }
}

public struct GetTemplateGroupAccessControlEntryOutputResponse: Swift.Equatable {
    /// An access control entry allows or denies an Active Directory group from enrolling and/or autoenrolling with a template.
    public var accessControlEntry: PcaConnectorAdClientTypes.AccessControlEntry?

    public init(
        accessControlEntry: PcaConnectorAdClientTypes.AccessControlEntry? = nil
    )
    {
        self.accessControlEntry = accessControlEntry
    }
}

struct GetTemplateGroupAccessControlEntryOutputResponseBody: Swift.Equatable {
    let accessControlEntry: PcaConnectorAdClientTypes.AccessControlEntry?
}

extension GetTemplateGroupAccessControlEntryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlEntry = "AccessControlEntry"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessControlEntryDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.AccessControlEntry.self, forKey: .accessControlEntry)
        accessControlEntry = accessControlEntryDecoded
    }
}

extension GetTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateArn = templateArn else {
            return nil
        }
        return "/templates/\(templateArn.urlPercentEncoding())"
    }
}

public struct GetTemplateInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
    /// This member is required.
    public var templateArn: Swift.String?

    public init(
        templateArn: Swift.String? = nil
    )
    {
        self.templateArn = templateArn
    }
}

struct GetTemplateInputBody: Swift.Equatable {
}

extension GetTemplateInputBody: Swift.Decodable {

    public init(from decoder: Swift.Decoder) throws {
    }
}

enum GetTemplateOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension GetTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: GetTemplateOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.template = output.template
        } else {
            self.template = nil
        }
    }
}

public struct GetTemplateOutputResponse: Swift.Equatable {
    /// A certificate template that the connector uses to issue certificates from a private CA.
    public var template: PcaConnectorAdClientTypes.Template?

    public init(
        template: PcaConnectorAdClientTypes.Template? = nil
    )
    {
        self.template = template
    }
}

struct GetTemplateOutputResponseBody: Swift.Equatable {
    let template: PcaConnectorAdClientTypes.Template?
}

extension GetTemplateOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case template = "Template"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templateDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.Template.self, forKey: .template)
        template = templateDecoded
    }
}

extension PcaConnectorAdClientTypes {
    public enum HashAlgorithm: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case sha256
        case sha384
        case sha512
        case sdkUnknown(Swift.String)

        public static var allCases: [HashAlgorithm] {
            return [
                .sha256,
                .sha384,
                .sha512,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .sha256: return "SHA256"
            case .sha384: return "SHA384"
            case .sha512: return "SHA512"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = HashAlgorithm(rawValue: rawValue) ?? HashAlgorithm.sdkUnknown(rawValue)
        }
    }
}

extension InternalServerException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
        } else {
            self.properties.message = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The request processing has failed because of an unknown error, exception or failure with an internal server.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ErrorFault { .server }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

struct InternalServerExceptionBody: Swift.Equatable {
    let message: Swift.String?
}

extension InternalServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension PcaConnectorAdClientTypes {
    public enum KeySpec: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case keyExchange
        case signature
        case sdkUnknown(Swift.String)

        public static var allCases: [KeySpec] {
            return [
                .keyExchange,
                .signature,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .keyExchange: return "KEY_EXCHANGE"
            case .signature: return "SIGNATURE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeySpec(rawValue: rawValue) ?? KeySpec.sdkUnknown(rawValue)
        }
    }
}

extension PcaConnectorAdClientTypes.KeyUsage: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case critical = "Critical"
        case usageFlags = "UsageFlags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let critical = self.critical {
            try encodeContainer.encode(critical, forKey: .critical)
        }
        if let usageFlags = self.usageFlags {
            try encodeContainer.encode(usageFlags, forKey: .usageFlags)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let criticalDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .critical)
        critical = criticalDecoded
        let usageFlagsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.KeyUsageFlags.self, forKey: .usageFlags)
        usageFlags = usageFlagsDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// The key usage extension defines the purpose (e.g., encipherment, signature) of the key contained in the certificate.
    public struct KeyUsage: Swift.Equatable {
        /// Sets the key usage extension to critical.
        public var critical: Swift.Bool?
        /// The key usage flags represent the purpose (e.g., encipherment, signature) of the key contained in the certificate.
        /// This member is required.
        public var usageFlags: PcaConnectorAdClientTypes.KeyUsageFlags?

        public init(
            critical: Swift.Bool? = nil,
            usageFlags: PcaConnectorAdClientTypes.KeyUsageFlags? = nil
        )
        {
            self.critical = critical
            self.usageFlags = usageFlags
        }
    }

}

extension PcaConnectorAdClientTypes.KeyUsageFlags: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataEncipherment = "DataEncipherment"
        case digitalSignature = "DigitalSignature"
        case keyAgreement = "KeyAgreement"
        case keyEncipherment = "KeyEncipherment"
        case nonRepudiation = "NonRepudiation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataEncipherment = self.dataEncipherment {
            try encodeContainer.encode(dataEncipherment, forKey: .dataEncipherment)
        }
        if let digitalSignature = self.digitalSignature {
            try encodeContainer.encode(digitalSignature, forKey: .digitalSignature)
        }
        if let keyAgreement = self.keyAgreement {
            try encodeContainer.encode(keyAgreement, forKey: .keyAgreement)
        }
        if let keyEncipherment = self.keyEncipherment {
            try encodeContainer.encode(keyEncipherment, forKey: .keyEncipherment)
        }
        if let nonRepudiation = self.nonRepudiation {
            try encodeContainer.encode(nonRepudiation, forKey: .nonRepudiation)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let digitalSignatureDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .digitalSignature)
        digitalSignature = digitalSignatureDecoded
        let nonRepudiationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .nonRepudiation)
        nonRepudiation = nonRepudiationDecoded
        let keyEnciphermentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .keyEncipherment)
        keyEncipherment = keyEnciphermentDecoded
        let dataEnciphermentDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .dataEncipherment)
        dataEncipherment = dataEnciphermentDecoded
        let keyAgreementDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .keyAgreement)
        keyAgreement = keyAgreementDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// The key usage flags represent the purpose (e.g., encipherment, signature) of the key contained in the certificate.
    public struct KeyUsageFlags: Swift.Equatable {
        /// DataEncipherment is asserted when the subject public key is used for directly enciphering raw user data without the use of an intermediate symmetric cipher.
        public var dataEncipherment: Swift.Bool?
        /// The digitalSignature is asserted when the subject public key is used for verifying digital signatures.
        public var digitalSignature: Swift.Bool?
        /// KeyAgreement is asserted when the subject public key is used for key agreement.
        public var keyAgreement: Swift.Bool?
        /// KeyEncipherment is asserted when the subject public key is used for enciphering private or secret keys, i.e., for key transport.
        public var keyEncipherment: Swift.Bool?
        /// NonRepudiation is asserted when the subject public key is used to verify digital signatures.
        public var nonRepudiation: Swift.Bool?

        public init(
            dataEncipherment: Swift.Bool? = nil,
            digitalSignature: Swift.Bool? = nil,
            keyAgreement: Swift.Bool? = nil,
            keyEncipherment: Swift.Bool? = nil,
            nonRepudiation: Swift.Bool? = nil
        )
        {
            self.dataEncipherment = dataEncipherment
            self.digitalSignature = digitalSignature
            self.keyAgreement = keyAgreement
            self.keyEncipherment = keyEncipherment
            self.nonRepudiation = nonRepudiation
        }
    }

}

extension PcaConnectorAdClientTypes.KeyUsageProperty: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case propertyflags = "PropertyFlags"
        case propertytype = "PropertyType"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .propertyflags(propertyflags):
                try container.encode(propertyflags, forKey: .propertyflags)
            case let .propertytype(propertytype):
                try container.encode(propertytype.rawValue, forKey: .propertytype)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let propertytypeDecoded = try values.decodeIfPresent(PcaConnectorAdClientTypes.KeyUsagePropertyType.self, forKey: .propertytype)
        if let propertytype = propertytypeDecoded {
            self = .propertytype(propertytype)
            return
        }
        let propertyflagsDecoded = try values.decodeIfPresent(PcaConnectorAdClientTypes.KeyUsagePropertyFlags.self, forKey: .propertyflags)
        if let propertyflags = propertyflagsDecoded {
            self = .propertyflags(propertyflags)
            return
        }
        self = .sdkUnknown("")
    }
}

extension PcaConnectorAdClientTypes {
    /// The key usage property defines the purpose of the private key contained in the certificate. You can specify specific purposes using property flags or all by using property type ALL.
    public enum KeyUsageProperty: Swift.Equatable {
        /// You can specify all key usages using property type ALL. You can use property type or property flags but not both.
        case propertytype(PcaConnectorAdClientTypes.KeyUsagePropertyType)
        /// You can specify key usage for encryption, key agreement, and signature. You can use property flags or property type but not both.
        case propertyflags(PcaConnectorAdClientTypes.KeyUsagePropertyFlags)
        case sdkUnknown(Swift.String)
    }

}

extension PcaConnectorAdClientTypes.KeyUsagePropertyFlags: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case decrypt = "Decrypt"
        case keyAgreement = "KeyAgreement"
        case sign = "Sign"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let decrypt = self.decrypt {
            try encodeContainer.encode(decrypt, forKey: .decrypt)
        }
        if let keyAgreement = self.keyAgreement {
            try encodeContainer.encode(keyAgreement, forKey: .keyAgreement)
        }
        if let sign = self.sign {
            try encodeContainer.encode(sign, forKey: .sign)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let decryptDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .decrypt)
        decrypt = decryptDecoded
        let keyAgreementDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .keyAgreement)
        keyAgreement = keyAgreementDecoded
        let signDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sign)
        sign = signDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Specifies key usage.
    public struct KeyUsagePropertyFlags: Swift.Equatable {
        /// Allows key for encryption and decryption.
        public var decrypt: Swift.Bool?
        /// Allows key exchange without encryption.
        public var keyAgreement: Swift.Bool?
        /// Allow key use for digital signature.
        public var sign: Swift.Bool?

        public init(
            decrypt: Swift.Bool? = nil,
            keyAgreement: Swift.Bool? = nil,
            sign: Swift.Bool? = nil
        )
        {
            self.decrypt = decrypt
            self.keyAgreement = keyAgreement
            self.sign = sign
        }
    }

}

extension PcaConnectorAdClientTypes {
    public enum KeyUsagePropertyType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case all
        case sdkUnknown(Swift.String)

        public static var allCases: [KeyUsagePropertyType] {
            return [
                .all,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .all: return "ALL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = KeyUsagePropertyType(rawValue: rawValue) ?? KeyUsagePropertyType.sdkUnknown(rawValue)
        }
    }
}

extension ListConnectorsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListConnectorsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/connectors"
    }
}

public struct ListConnectorsInput: Swift.Equatable {
    /// Use this parameter when paginating results to specify the maximum number of items to return in the response on each page. If additional items exist beyond the number you specify, the NextToken element is sent in the response. Use this NextToken value in a subsequent request to retrieve additional items.
    public var maxResults: Swift.Int?
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListConnectorsInputBody: Swift.Equatable {
}

extension ListConnectorsInputBody: Swift.Decodable {

    public init(from decoder: Swift.Decoder) throws {
    }
}

enum ListConnectorsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListConnectorsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListConnectorsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.connectors = output.connectors
            self.nextToken = output.nextToken
        } else {
            self.connectors = nil
            self.nextToken = nil
        }
    }
}

public struct ListConnectorsOutputResponse: Swift.Equatable {
    /// Summary information about each connector you have created.
    public var connectors: [PcaConnectorAdClientTypes.ConnectorSummary]?
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?

    public init(
        connectors: [PcaConnectorAdClientTypes.ConnectorSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.connectors = connectors
        self.nextToken = nextToken
    }
}

struct ListConnectorsOutputResponseBody: Swift.Equatable {
    let connectors: [PcaConnectorAdClientTypes.ConnectorSummary]?
    let nextToken: Swift.String?
}

extension ListConnectorsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectors = "Connectors"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectorsContainer = try containerValues.decodeIfPresent([PcaConnectorAdClientTypes.ConnectorSummary?].self, forKey: .connectors)
        var connectorsDecoded0:[PcaConnectorAdClientTypes.ConnectorSummary]? = nil
        if let connectorsContainer = connectorsContainer {
            connectorsDecoded0 = [PcaConnectorAdClientTypes.ConnectorSummary]()
            for structure0 in connectorsContainer {
                if let structure0 = structure0 {
                    connectorsDecoded0?.append(structure0)
                }
            }
        }
        connectors = connectorsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListDirectoryRegistrationsInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListDirectoryRegistrationsInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/directoryRegistrations"
    }
}

public struct ListDirectoryRegistrationsInput: Swift.Equatable {
    /// Use this parameter when paginating results to specify the maximum number of items to return in the response on each page. If additional items exist beyond the number you specify, the NextToken element is sent in the response. Use this NextToken value in a subsequent request to retrieve additional items.
    public var maxResults: Swift.Int?
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListDirectoryRegistrationsInputBody: Swift.Equatable {
}

extension ListDirectoryRegistrationsInputBody: Swift.Decodable {

    public init(from decoder: Swift.Decoder) throws {
    }
}

enum ListDirectoryRegistrationsOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListDirectoryRegistrationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListDirectoryRegistrationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.directoryRegistrations = output.directoryRegistrations
            self.nextToken = output.nextToken
        } else {
            self.directoryRegistrations = nil
            self.nextToken = nil
        }
    }
}

public struct ListDirectoryRegistrationsOutputResponse: Swift.Equatable {
    /// Summary information about each directory registration you have created.
    public var directoryRegistrations: [PcaConnectorAdClientTypes.DirectoryRegistrationSummary]?
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?

    public init(
        directoryRegistrations: [PcaConnectorAdClientTypes.DirectoryRegistrationSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.directoryRegistrations = directoryRegistrations
        self.nextToken = nextToken
    }
}

struct ListDirectoryRegistrationsOutputResponseBody: Swift.Equatable {
    let directoryRegistrations: [PcaConnectorAdClientTypes.DirectoryRegistrationSummary]?
    let nextToken: Swift.String?
}

extension ListDirectoryRegistrationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case directoryRegistrations = "DirectoryRegistrations"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryRegistrationsContainer = try containerValues.decodeIfPresent([PcaConnectorAdClientTypes.DirectoryRegistrationSummary?].self, forKey: .directoryRegistrations)
        var directoryRegistrationsDecoded0:[PcaConnectorAdClientTypes.DirectoryRegistrationSummary]? = nil
        if let directoryRegistrationsContainer = directoryRegistrationsContainer {
            directoryRegistrationsDecoded0 = [PcaConnectorAdClientTypes.DirectoryRegistrationSummary]()
            for structure0 in directoryRegistrationsContainer {
                if let structure0 = structure0 {
                    directoryRegistrationsDecoded0?.append(structure0)
                }
            }
        }
        directoryRegistrations = directoryRegistrationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListServicePrincipalNamesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListServicePrincipalNamesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let directoryRegistrationArn = directoryRegistrationArn else {
            return nil
        }
        return "/directoryRegistrations/\(directoryRegistrationArn.urlPercentEncoding())/servicePrincipalNames"
    }
}

public struct ListServicePrincipalNamesInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
    /// This member is required.
    public var directoryRegistrationArn: Swift.String?
    /// Use this parameter when paginating results to specify the maximum number of items to return in the response on each page. If additional items exist beyond the number you specify, the NextToken element is sent in the response. Use this NextToken value in a subsequent request to retrieve additional items.
    public var maxResults: Swift.Int?
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?

    public init(
        directoryRegistrationArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.directoryRegistrationArn = directoryRegistrationArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListServicePrincipalNamesInputBody: Swift.Equatable {
}

extension ListServicePrincipalNamesInputBody: Swift.Decodable {

    public init(from decoder: Swift.Decoder) throws {
    }
}

enum ListServicePrincipalNamesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListServicePrincipalNamesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListServicePrincipalNamesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.servicePrincipalNames = output.servicePrincipalNames
        } else {
            self.nextToken = nil
            self.servicePrincipalNames = nil
        }
    }
}

public struct ListServicePrincipalNamesOutputResponse: Swift.Equatable {
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?
    /// The service principal name, if any, that the connector uses to authenticate with Active Directory.
    public var servicePrincipalNames: [PcaConnectorAdClientTypes.ServicePrincipalNameSummary]?

    public init(
        nextToken: Swift.String? = nil,
        servicePrincipalNames: [PcaConnectorAdClientTypes.ServicePrincipalNameSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.servicePrincipalNames = servicePrincipalNames
    }
}

struct ListServicePrincipalNamesOutputResponseBody: Swift.Equatable {
    let servicePrincipalNames: [PcaConnectorAdClientTypes.ServicePrincipalNameSummary]?
    let nextToken: Swift.String?
}

extension ListServicePrincipalNamesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case servicePrincipalNames = "ServicePrincipalNames"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let servicePrincipalNamesContainer = try containerValues.decodeIfPresent([PcaConnectorAdClientTypes.ServicePrincipalNameSummary?].self, forKey: .servicePrincipalNames)
        var servicePrincipalNamesDecoded0:[PcaConnectorAdClientTypes.ServicePrincipalNameSummary]? = nil
        if let servicePrincipalNamesContainer = servicePrincipalNamesContainer {
            servicePrincipalNamesDecoded0 = [PcaConnectorAdClientTypes.ServicePrincipalNameSummary]()
            for structure0 in servicePrincipalNamesContainer {
                if let structure0 = structure0 {
                    servicePrincipalNamesDecoded0?.append(structure0)
                }
            }
        }
        servicePrincipalNames = servicePrincipalNamesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that was returned when you created the resource.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init(from decoder: Swift.Decoder) throws {
    }
}

enum ListTagsForResourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// The tags, if any, that are associated with your resource.
    public var tags: [Swift.String:Swift.String]?

    public init(
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ListTemplateGroupAccessControlEntriesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListTemplateGroupAccessControlEntriesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateArn = templateArn else {
            return nil
        }
        return "/templates/\(templateArn.urlPercentEncoding())/accessControlEntries"
    }
}

public struct ListTemplateGroupAccessControlEntriesInput: Swift.Equatable {
    /// Use this parameter when paginating results to specify the maximum number of items to return in the response on each page. If additional items exist beyond the number you specify, the NextToken element is sent in the response. Use this NextToken value in a subsequent request to retrieve additional items.
    public var maxResults: Swift.Int?
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
    /// This member is required.
    public var templateArn: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        templateArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.templateArn = templateArn
    }
}

struct ListTemplateGroupAccessControlEntriesInputBody: Swift.Equatable {
}

extension ListTemplateGroupAccessControlEntriesInputBody: Swift.Decodable {

    public init(from decoder: Swift.Decoder) throws {
    }
}

enum ListTemplateGroupAccessControlEntriesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListTemplateGroupAccessControlEntriesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListTemplateGroupAccessControlEntriesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.accessControlEntries = output.accessControlEntries
            self.nextToken = output.nextToken
        } else {
            self.accessControlEntries = nil
            self.nextToken = nil
        }
    }
}

public struct ListTemplateGroupAccessControlEntriesOutputResponse: Swift.Equatable {
    /// An access control entry grants or denies permission to an Active Directory group to enroll certificates for a template.
    public var accessControlEntries: [PcaConnectorAdClientTypes.AccessControlEntrySummary]?
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?

    public init(
        accessControlEntries: [PcaConnectorAdClientTypes.AccessControlEntrySummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accessControlEntries = accessControlEntries
        self.nextToken = nextToken
    }
}

struct ListTemplateGroupAccessControlEntriesOutputResponseBody: Swift.Equatable {
    let accessControlEntries: [PcaConnectorAdClientTypes.AccessControlEntrySummary]?
    let nextToken: Swift.String?
}

extension ListTemplateGroupAccessControlEntriesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessControlEntries = "AccessControlEntries"
        case nextToken = "NextToken"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessControlEntriesContainer = try containerValues.decodeIfPresent([PcaConnectorAdClientTypes.AccessControlEntrySummary?].self, forKey: .accessControlEntries)
        var accessControlEntriesDecoded0:[PcaConnectorAdClientTypes.AccessControlEntrySummary]? = nil
        if let accessControlEntriesContainer = accessControlEntriesContainer {
            accessControlEntriesDecoded0 = [PcaConnectorAdClientTypes.AccessControlEntrySummary]()
            for structure0 in accessControlEntriesContainer {
                if let structure0 = structure0 {
                    accessControlEntriesDecoded0?.append(structure0)
                }
            }
        }
        accessControlEntries = accessControlEntriesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTemplatesInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let connectorArn = connectorArn else {
                let message = "Creating a URL Query Item failed. connectorArn is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            let connectorArnQueryItem = ClientRuntime.URLQueryItem(name: "ConnectorArn".urlPercentEncoding(), value: Swift.String(connectorArn).urlPercentEncoding())
            items.append(connectorArnQueryItem)
            if let nextToken = nextToken {
                let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
                items.append(nextTokenQueryItem)
            }
            if let maxResults = maxResults {
                let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(maxResults).urlPercentEncoding())
                items.append(maxResultsQueryItem)
            }
            return items
        }
    }
}

extension ListTemplatesInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        return "/templates"
    }
}

public struct ListTemplatesInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
    /// This member is required.
    public var connectorArn: Swift.String?
    /// Use this parameter when paginating results to specify the maximum number of items to return in the response on each page. If additional items exist beyond the number you specify, the NextToken element is sent in the response. Use this NextToken value in a subsequent request to retrieve additional items.
    public var maxResults: Swift.Int?
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?

    public init(
        connectorArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.connectorArn = connectorArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListTemplatesInputBody: Swift.Equatable {
}

extension ListTemplatesInputBody: Swift.Decodable {

    public init(from decoder: Swift.Decoder) throws {
    }
}

enum ListTemplatesOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension ListTemplatesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ListTemplatesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.templates = output.templates
        } else {
            self.nextToken = nil
            self.templates = nil
        }
    }
}

public struct ListTemplatesOutputResponse: Swift.Equatable {
    /// Use this parameter when paginating results in a subsequent request after you receive a response with truncated results. Set it to the value of the NextToken parameter from the response you just received.
    public var nextToken: Swift.String?
    /// Custom configuration templates used when issuing a certificate.
    public var templates: [PcaConnectorAdClientTypes.TemplateSummary]?

    public init(
        nextToken: Swift.String? = nil,
        templates: [PcaConnectorAdClientTypes.TemplateSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.templates = templates
    }
}

struct ListTemplatesOutputResponseBody: Swift.Equatable {
    let templates: [PcaConnectorAdClientTypes.TemplateSummary]?
    let nextToken: Swift.String?
}

extension ListTemplatesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case templates = "Templates"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let templatesContainer = try containerValues.decodeIfPresent([PcaConnectorAdClientTypes.TemplateSummary?].self, forKey: .templates)
        var templatesDecoded0:[PcaConnectorAdClientTypes.TemplateSummary]? = nil
        if let templatesContainer = templatesContainer {
            templatesDecoded0 = [PcaConnectorAdClientTypes.TemplateSummary]()
            for structure0 in templatesContainer {
                if let structure0 = structure0 {
                    templatesDecoded0?.append(structure0)
                }
            }
        }
        templates = templatesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension PcaConnectorAdClientTypes {
    public enum PrivateKeyAlgorithm: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ecdhP256
        case ecdhP384
        case ecdhP521
        case rsa
        case sdkUnknown(Swift.String)

        public static var allCases: [PrivateKeyAlgorithm] {
            return [
                .ecdhP256,
                .ecdhP384,
                .ecdhP521,
                .rsa,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ecdhP256: return "ECDH_P256"
            case .ecdhP384: return "ECDH_P384"
            case .ecdhP521: return "ECDH_P521"
            case .rsa: return "RSA"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PrivateKeyAlgorithm(rawValue: rawValue) ?? PrivateKeyAlgorithm.sdkUnknown(rawValue)
        }
    }
}

extension PcaConnectorAdClientTypes.PrivateKeyAttributesV2: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cryptoProviders = "CryptoProviders"
        case keySpec = "KeySpec"
        case minimalKeyLength = "MinimalKeyLength"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cryptoProviders = cryptoProviders {
            var cryptoProvidersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cryptoProviders)
            for string0 in cryptoProviders {
                try cryptoProvidersContainer.encode(string0)
            }
        }
        if let keySpec = self.keySpec {
            try encodeContainer.encode(keySpec.rawValue, forKey: .keySpec)
        }
        if let minimalKeyLength = self.minimalKeyLength {
            try encodeContainer.encode(minimalKeyLength, forKey: .minimalKeyLength)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimalKeyLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimalKeyLength)
        minimalKeyLength = minimalKeyLengthDecoded
        let keySpecDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.KeySpec.self, forKey: .keySpec)
        keySpec = keySpecDecoded
        let cryptoProvidersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cryptoProviders)
        var cryptoProvidersDecoded0:[Swift.String]? = nil
        if let cryptoProvidersContainer = cryptoProvidersContainer {
            cryptoProvidersDecoded0 = [Swift.String]()
            for string0 in cryptoProvidersContainer {
                if let string0 = string0 {
                    cryptoProvidersDecoded0?.append(string0)
                }
            }
        }
        cryptoProviders = cryptoProvidersDecoded0
    }
}

extension PcaConnectorAdClientTypes {
    /// Defines the attributes of the private key.
    public struct PrivateKeyAttributesV2: Swift.Equatable {
        /// Defines the cryptographic providers used to generate the private key.
        public var cryptoProviders: [Swift.String]?
        /// Defines the purpose of the private key. Set it to "KEY_EXCHANGE" or "SIGNATURE" value.
        /// This member is required.
        public var keySpec: PcaConnectorAdClientTypes.KeySpec?
        /// Set the minimum key length of the private key.
        /// This member is required.
        public var minimalKeyLength: Swift.Int?

        public init(
            cryptoProviders: [Swift.String]? = nil,
            keySpec: PcaConnectorAdClientTypes.KeySpec? = nil,
            minimalKeyLength: Swift.Int? = nil
        )
        {
            self.cryptoProviders = cryptoProviders
            self.keySpec = keySpec
            self.minimalKeyLength = minimalKeyLength
        }
    }

}

extension PcaConnectorAdClientTypes.PrivateKeyAttributesV3: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithm = "Algorithm"
        case cryptoProviders = "CryptoProviders"
        case keySpec = "KeySpec"
        case keyUsageProperty = "KeyUsageProperty"
        case minimalKeyLength = "MinimalKeyLength"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithm = self.algorithm {
            try encodeContainer.encode(algorithm.rawValue, forKey: .algorithm)
        }
        if let cryptoProviders = cryptoProviders {
            var cryptoProvidersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cryptoProviders)
            for string0 in cryptoProviders {
                try cryptoProvidersContainer.encode(string0)
            }
        }
        if let keySpec = self.keySpec {
            try encodeContainer.encode(keySpec.rawValue, forKey: .keySpec)
        }
        if let keyUsageProperty = self.keyUsageProperty {
            try encodeContainer.encode(keyUsageProperty, forKey: .keyUsageProperty)
        }
        if let minimalKeyLength = self.minimalKeyLength {
            try encodeContainer.encode(minimalKeyLength, forKey: .minimalKeyLength)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimalKeyLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimalKeyLength)
        minimalKeyLength = minimalKeyLengthDecoded
        let keySpecDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.KeySpec.self, forKey: .keySpec)
        keySpec = keySpecDecoded
        let cryptoProvidersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cryptoProviders)
        var cryptoProvidersDecoded0:[Swift.String]? = nil
        if let cryptoProvidersContainer = cryptoProvidersContainer {
            cryptoProvidersDecoded0 = [Swift.String]()
            for string0 in cryptoProvidersContainer {
                if let string0 = string0 {
                    cryptoProvidersDecoded0?.append(string0)
                }
            }
        }
        cryptoProviders = cryptoProvidersDecoded0
        let keyUsagePropertyDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.KeyUsageProperty.self, forKey: .keyUsageProperty)
        keyUsageProperty = keyUsagePropertyDecoded
        let algorithmDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.PrivateKeyAlgorithm.self, forKey: .algorithm)
        algorithm = algorithmDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Defines the attributes of the private key.
    public struct PrivateKeyAttributesV3: Swift.Equatable {
        /// Defines the algorithm used to generate the private key.
        /// This member is required.
        public var algorithm: PcaConnectorAdClientTypes.PrivateKeyAlgorithm?
        /// Defines the cryptographic providers used to generate the private key.
        public var cryptoProviders: [Swift.String]?
        /// Defines the purpose of the private key. Set it to "KEY_EXCHANGE" or "SIGNATURE" value.
        /// This member is required.
        public var keySpec: PcaConnectorAdClientTypes.KeySpec?
        /// The key usage property defines the purpose of the private key contained in the certificate. You can specify specific purposes using property flags or all by using property type ALL.
        /// This member is required.
        public var keyUsageProperty: PcaConnectorAdClientTypes.KeyUsageProperty?
        /// Set the minimum key length of the private key.
        /// This member is required.
        public var minimalKeyLength: Swift.Int?

        public init(
            algorithm: PcaConnectorAdClientTypes.PrivateKeyAlgorithm? = nil,
            cryptoProviders: [Swift.String]? = nil,
            keySpec: PcaConnectorAdClientTypes.KeySpec? = nil,
            keyUsageProperty: PcaConnectorAdClientTypes.KeyUsageProperty? = nil,
            minimalKeyLength: Swift.Int? = nil
        )
        {
            self.algorithm = algorithm
            self.cryptoProviders = cryptoProviders
            self.keySpec = keySpec
            self.keyUsageProperty = keyUsageProperty
            self.minimalKeyLength = minimalKeyLength
        }
    }

}

extension PcaConnectorAdClientTypes.PrivateKeyAttributesV4: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case algorithm = "Algorithm"
        case cryptoProviders = "CryptoProviders"
        case keySpec = "KeySpec"
        case keyUsageProperty = "KeyUsageProperty"
        case minimalKeyLength = "MinimalKeyLength"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let algorithm = self.algorithm {
            try encodeContainer.encode(algorithm.rawValue, forKey: .algorithm)
        }
        if let cryptoProviders = cryptoProviders {
            var cryptoProvidersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cryptoProviders)
            for string0 in cryptoProviders {
                try cryptoProvidersContainer.encode(string0)
            }
        }
        if let keySpec = self.keySpec {
            try encodeContainer.encode(keySpec.rawValue, forKey: .keySpec)
        }
        if let keyUsageProperty = self.keyUsageProperty {
            try encodeContainer.encode(keyUsageProperty, forKey: .keyUsageProperty)
        }
        if let minimalKeyLength = self.minimalKeyLength {
            try encodeContainer.encode(minimalKeyLength, forKey: .minimalKeyLength)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let minimalKeyLengthDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minimalKeyLength)
        minimalKeyLength = minimalKeyLengthDecoded
        let keySpecDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.KeySpec.self, forKey: .keySpec)
        keySpec = keySpecDecoded
        let cryptoProvidersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .cryptoProviders)
        var cryptoProvidersDecoded0:[Swift.String]? = nil
        if let cryptoProvidersContainer = cryptoProvidersContainer {
            cryptoProvidersDecoded0 = [Swift.String]()
            for string0 in cryptoProvidersContainer {
                if let string0 = string0 {
                    cryptoProvidersDecoded0?.append(string0)
                }
            }
        }
        cryptoProviders = cryptoProvidersDecoded0
        let keyUsagePropertyDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.KeyUsageProperty.self, forKey: .keyUsageProperty)
        keyUsageProperty = keyUsagePropertyDecoded
        let algorithmDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.PrivateKeyAlgorithm.self, forKey: .algorithm)
        algorithm = algorithmDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Defines the attributes of the private key.
    public struct PrivateKeyAttributesV4: Swift.Equatable {
        /// Defines the algorithm used to generate the private key.
        public var algorithm: PcaConnectorAdClientTypes.PrivateKeyAlgorithm?
        /// Defines the cryptographic providers used to generate the private key.
        public var cryptoProviders: [Swift.String]?
        /// Defines the purpose of the private key. Set it to "KEY_EXCHANGE" or "SIGNATURE" value.
        /// This member is required.
        public var keySpec: PcaConnectorAdClientTypes.KeySpec?
        /// The key usage property defines the purpose of the private key contained in the certificate. You can specify specific purposes using property flags or all by using property type ALL.
        public var keyUsageProperty: PcaConnectorAdClientTypes.KeyUsageProperty?
        /// Set the minimum key length of the private key.
        /// This member is required.
        public var minimalKeyLength: Swift.Int?

        public init(
            algorithm: PcaConnectorAdClientTypes.PrivateKeyAlgorithm? = nil,
            cryptoProviders: [Swift.String]? = nil,
            keySpec: PcaConnectorAdClientTypes.KeySpec? = nil,
            keyUsageProperty: PcaConnectorAdClientTypes.KeyUsageProperty? = nil,
            minimalKeyLength: Swift.Int? = nil
        )
        {
            self.algorithm = algorithm
            self.cryptoProviders = cryptoProviders
            self.keySpec = keySpec
            self.keyUsageProperty = keyUsageProperty
            self.minimalKeyLength = minimalKeyLength
        }
    }

}

extension PcaConnectorAdClientTypes.PrivateKeyFlagsV2: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientVersion = "ClientVersion"
        case exportableKey = "ExportableKey"
        case strongKeyProtectionRequired = "StrongKeyProtectionRequired"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientVersion = self.clientVersion {
            try encodeContainer.encode(clientVersion.rawValue, forKey: .clientVersion)
        }
        if let exportableKey = self.exportableKey {
            try encodeContainer.encode(exportableKey, forKey: .exportableKey)
        }
        if let strongKeyProtectionRequired = self.strongKeyProtectionRequired {
            try encodeContainer.encode(strongKeyProtectionRequired, forKey: .strongKeyProtectionRequired)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportableKeyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .exportableKey)
        exportableKey = exportableKeyDecoded
        let strongKeyProtectionRequiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .strongKeyProtectionRequired)
        strongKeyProtectionRequired = strongKeyProtectionRequiredDecoded
        let clientVersionDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ClientCompatibilityV2.self, forKey: .clientVersion)
        clientVersion = clientVersionDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Private key flags for v2 templates specify the client compatibility, if the private key can be exported, and if user input is required when using a private key.
    public struct PrivateKeyFlagsV2: Swift.Equatable {
        /// Defines the minimum client compatibility.
        /// This member is required.
        public var clientVersion: PcaConnectorAdClientTypes.ClientCompatibilityV2?
        /// Allows the private key to be exported.
        public var exportableKey: Swift.Bool?
        /// Require user input when using the private key for enrollment.
        public var strongKeyProtectionRequired: Swift.Bool?

        public init(
            clientVersion: PcaConnectorAdClientTypes.ClientCompatibilityV2? = nil,
            exportableKey: Swift.Bool? = nil,
            strongKeyProtectionRequired: Swift.Bool? = nil
        )
        {
            self.clientVersion = clientVersion
            self.exportableKey = exportableKey
            self.strongKeyProtectionRequired = strongKeyProtectionRequired
        }
    }

}

extension PcaConnectorAdClientTypes.PrivateKeyFlagsV3: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientVersion = "ClientVersion"
        case exportableKey = "ExportableKey"
        case requireAlternateSignatureAlgorithm = "RequireAlternateSignatureAlgorithm"
        case strongKeyProtectionRequired = "StrongKeyProtectionRequired"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientVersion = self.clientVersion {
            try encodeContainer.encode(clientVersion.rawValue, forKey: .clientVersion)
        }
        if let exportableKey = self.exportableKey {
            try encodeContainer.encode(exportableKey, forKey: .exportableKey)
        }
        if let requireAlternateSignatureAlgorithm = self.requireAlternateSignatureAlgorithm {
            try encodeContainer.encode(requireAlternateSignatureAlgorithm, forKey: .requireAlternateSignatureAlgorithm)
        }
        if let strongKeyProtectionRequired = self.strongKeyProtectionRequired {
            try encodeContainer.encode(strongKeyProtectionRequired, forKey: .strongKeyProtectionRequired)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportableKeyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .exportableKey)
        exportableKey = exportableKeyDecoded
        let strongKeyProtectionRequiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .strongKeyProtectionRequired)
        strongKeyProtectionRequired = strongKeyProtectionRequiredDecoded
        let requireAlternateSignatureAlgorithmDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireAlternateSignatureAlgorithm)
        requireAlternateSignatureAlgorithm = requireAlternateSignatureAlgorithmDecoded
        let clientVersionDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ClientCompatibilityV3.self, forKey: .clientVersion)
        clientVersion = clientVersionDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Private key flags for v3 templates specify the client compatibility, if the private key can be exported, if user input is required when using a private key, and if an alternate signature algorithm should be used.
    public struct PrivateKeyFlagsV3: Swift.Equatable {
        /// Defines the minimum client compatibility.
        /// This member is required.
        public var clientVersion: PcaConnectorAdClientTypes.ClientCompatibilityV3?
        /// Allows the private key to be exported.
        public var exportableKey: Swift.Bool?
        /// Reguires the PKCS #1 v2.1 signature format for certificates. You should verify that your CA, objects, and applications can accept this signature format.
        public var requireAlternateSignatureAlgorithm: Swift.Bool?
        /// Requirer user input when using the private key for enrollment.
        public var strongKeyProtectionRequired: Swift.Bool?

        public init(
            clientVersion: PcaConnectorAdClientTypes.ClientCompatibilityV3? = nil,
            exportableKey: Swift.Bool? = nil,
            requireAlternateSignatureAlgorithm: Swift.Bool? = nil,
            strongKeyProtectionRequired: Swift.Bool? = nil
        )
        {
            self.clientVersion = clientVersion
            self.exportableKey = exportableKey
            self.requireAlternateSignatureAlgorithm = requireAlternateSignatureAlgorithm
            self.strongKeyProtectionRequired = strongKeyProtectionRequired
        }
    }

}

extension PcaConnectorAdClientTypes.PrivateKeyFlagsV4: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clientVersion = "ClientVersion"
        case exportableKey = "ExportableKey"
        case requireAlternateSignatureAlgorithm = "RequireAlternateSignatureAlgorithm"
        case requireSameKeyRenewal = "RequireSameKeyRenewal"
        case strongKeyProtectionRequired = "StrongKeyProtectionRequired"
        case useLegacyProvider = "UseLegacyProvider"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clientVersion = self.clientVersion {
            try encodeContainer.encode(clientVersion.rawValue, forKey: .clientVersion)
        }
        if let exportableKey = self.exportableKey {
            try encodeContainer.encode(exportableKey, forKey: .exportableKey)
        }
        if let requireAlternateSignatureAlgorithm = self.requireAlternateSignatureAlgorithm {
            try encodeContainer.encode(requireAlternateSignatureAlgorithm, forKey: .requireAlternateSignatureAlgorithm)
        }
        if let requireSameKeyRenewal = self.requireSameKeyRenewal {
            try encodeContainer.encode(requireSameKeyRenewal, forKey: .requireSameKeyRenewal)
        }
        if let strongKeyProtectionRequired = self.strongKeyProtectionRequired {
            try encodeContainer.encode(strongKeyProtectionRequired, forKey: .strongKeyProtectionRequired)
        }
        if let useLegacyProvider = self.useLegacyProvider {
            try encodeContainer.encode(useLegacyProvider, forKey: .useLegacyProvider)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exportableKeyDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .exportableKey)
        exportableKey = exportableKeyDecoded
        let strongKeyProtectionRequiredDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .strongKeyProtectionRequired)
        strongKeyProtectionRequired = strongKeyProtectionRequiredDecoded
        let requireAlternateSignatureAlgorithmDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireAlternateSignatureAlgorithm)
        requireAlternateSignatureAlgorithm = requireAlternateSignatureAlgorithmDecoded
        let requireSameKeyRenewalDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireSameKeyRenewal)
        requireSameKeyRenewal = requireSameKeyRenewalDecoded
        let useLegacyProviderDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .useLegacyProvider)
        useLegacyProvider = useLegacyProviderDecoded
        let clientVersionDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ClientCompatibilityV4.self, forKey: .clientVersion)
        clientVersion = clientVersionDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Private key flags for v4 templates specify the client compatibility, if the private key can be exported, if user input is required when using a private key, if an alternate signature algorithm should be used, and if certificates are renewed using the same private key.
    public struct PrivateKeyFlagsV4: Swift.Equatable {
        /// Defines the minimum client compatibility.
        /// This member is required.
        public var clientVersion: PcaConnectorAdClientTypes.ClientCompatibilityV4?
        /// Allows the private key to be exported.
        public var exportableKey: Swift.Bool?
        /// Requires the PKCS #1 v2.1 signature format for certificates. You should verify that your CA, objects, and applications can accept this signature format.
        public var requireAlternateSignatureAlgorithm: Swift.Bool?
        /// Renew certificate using the same private key.
        public var requireSameKeyRenewal: Swift.Bool?
        /// Require user input when using the private key for enrollment.
        public var strongKeyProtectionRequired: Swift.Bool?
        /// Specifies the cryptographic service provider category used to generate private keys. Set to TRUE to use Legacy Cryptographic Service Providers and FALSE to use Key Storage Providers.
        public var useLegacyProvider: Swift.Bool?

        public init(
            clientVersion: PcaConnectorAdClientTypes.ClientCompatibilityV4? = nil,
            exportableKey: Swift.Bool? = nil,
            requireAlternateSignatureAlgorithm: Swift.Bool? = nil,
            requireSameKeyRenewal: Swift.Bool? = nil,
            strongKeyProtectionRequired: Swift.Bool? = nil,
            useLegacyProvider: Swift.Bool? = nil
        )
        {
            self.clientVersion = clientVersion
            self.exportableKey = exportableKey
            self.requireAlternateSignatureAlgorithm = requireAlternateSignatureAlgorithm
            self.requireSameKeyRenewal = requireSameKeyRenewal
            self.strongKeyProtectionRequired = strongKeyProtectionRequired
            self.useLegacyProvider = useLegacyProvider
        }
    }

}

extension ResourceNotFoundException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
            self.properties.resourceId = output.resourceId
            self.properties.resourceType = output.resourceType
        } else {
            self.properties.message = nil
            self.properties.resourceId = nil
            self.properties.resourceType = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The operation tried to access a nonexistent resource. The resource might not be specified correctly, or its status might not be ACTIVE.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The identifier of the Amazon Web Services resource.
        /// This member is required.
        public internal(set) var resourceId: Swift.String? = nil
        /// The resource type, which can be one of Connector, Template, TemplateGroupAccessControlEntry, ServicePrincipalName, or DirectoryRegistration.
        /// This member is required.
        public internal(set) var resourceType: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let resourceId: Swift.String?
    let resourceType: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
    }
}

extension PcaConnectorAdClientTypes.ServicePrincipalName: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectorArn = "ConnectorArn"
        case createdAt = "CreatedAt"
        case directoryRegistrationArn = "DirectoryRegistrationArn"
        case status = "Status"
        case statusReason = "StatusReason"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectorArn = self.connectorArn {
            try encodeContainer.encode(connectorArn, forKey: .connectorArn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let directoryRegistrationArn = self.directoryRegistrationArn {
            try encodeContainer.encode(directoryRegistrationArn, forKey: .directoryRegistrationArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason.rawValue, forKey: .statusReason)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encodeTimestamp(updatedAt, format: .epochSeconds, forKey: .updatedAt)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryRegistrationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryRegistrationArn)
        directoryRegistrationArn = directoryRegistrationArnDecoded
        let connectorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorArn)
        connectorArn = connectorArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ServicePrincipalNameStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ServicePrincipalNameStatusReason.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// The service principal name that the connector uses to authenticate with Active Directory.
    public struct ServicePrincipalName: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector.html](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
        public var connectorArn: Swift.String?
        /// The date and time that the service principal name was created.
        public var createdAt: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
        public var directoryRegistrationArn: Swift.String?
        /// The status of a service principal name.
        public var status: PcaConnectorAdClientTypes.ServicePrincipalNameStatus?
        /// Additional information for the status of a service principal name if the status is failed.
        public var statusReason: PcaConnectorAdClientTypes.ServicePrincipalNameStatusReason?
        /// The date and time that the service principal name was updated.
        public var updatedAt: ClientRuntime.Date?

        public init(
            connectorArn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            directoryRegistrationArn: Swift.String? = nil,
            status: PcaConnectorAdClientTypes.ServicePrincipalNameStatus? = nil,
            statusReason: PcaConnectorAdClientTypes.ServicePrincipalNameStatusReason? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.connectorArn = connectorArn
            self.createdAt = createdAt
            self.directoryRegistrationArn = directoryRegistrationArn
            self.status = status
            self.statusReason = statusReason
            self.updatedAt = updatedAt
        }
    }

}

extension PcaConnectorAdClientTypes {
    public enum ServicePrincipalNameStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [ServicePrincipalNameStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ServicePrincipalNameStatus(rawValue: rawValue) ?? ServicePrincipalNameStatus.sdkUnknown(rawValue)
        }
    }
}

extension PcaConnectorAdClientTypes {
    public enum ServicePrincipalNameStatusReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case directoryAccessDenied
        case directoryNotReachable
        case directoryResourceNotFound
        case internalFailure
        case spnExistsOnDifferentAdObject
        case sdkUnknown(Swift.String)

        public static var allCases: [ServicePrincipalNameStatusReason] {
            return [
                .directoryAccessDenied,
                .directoryNotReachable,
                .directoryResourceNotFound,
                .internalFailure,
                .spnExistsOnDifferentAdObject,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .directoryAccessDenied: return "DIRECTORY_ACCESS_DENIED"
            case .directoryNotReachable: return "DIRECTORY_NOT_REACHABLE"
            case .directoryResourceNotFound: return "DIRECTORY_RESOURCE_NOT_FOUND"
            case .internalFailure: return "INTERNAL_FAILURE"
            case .spnExistsOnDifferentAdObject: return "SPN_EXISTS_ON_DIFFERENT_AD_OBJECT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ServicePrincipalNameStatusReason(rawValue: rawValue) ?? ServicePrincipalNameStatusReason.sdkUnknown(rawValue)
        }
    }
}

extension PcaConnectorAdClientTypes.ServicePrincipalNameSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case connectorArn = "ConnectorArn"
        case createdAt = "CreatedAt"
        case directoryRegistrationArn = "DirectoryRegistrationArn"
        case status = "Status"
        case statusReason = "StatusReason"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectorArn = self.connectorArn {
            try encodeContainer.encode(connectorArn, forKey: .connectorArn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let directoryRegistrationArn = self.directoryRegistrationArn {
            try encodeContainer.encode(directoryRegistrationArn, forKey: .directoryRegistrationArn)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReason = self.statusReason {
            try encodeContainer.encode(statusReason.rawValue, forKey: .statusReason)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encodeTimestamp(updatedAt, format: .epochSeconds, forKey: .updatedAt)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directoryRegistrationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .directoryRegistrationArn)
        directoryRegistrationArn = directoryRegistrationArnDecoded
        let connectorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorArn)
        connectorArn = connectorArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ServicePrincipalNameStatus.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ServicePrincipalNameStatusReason.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// The service principal name that the connector uses to authenticate with Active Directory.
    public struct ServicePrincipalNameSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
        public var connectorArn: Swift.String?
        /// The date and time that the service principal name was created.
        public var createdAt: ClientRuntime.Date?
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateDirectoryRegistration](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateDirectoryRegistration.html).
        public var directoryRegistrationArn: Swift.String?
        /// The status of a service principal name.
        public var status: PcaConnectorAdClientTypes.ServicePrincipalNameStatus?
        /// Additional information for the status of a service principal name if the status is failed.
        public var statusReason: PcaConnectorAdClientTypes.ServicePrincipalNameStatusReason?
        /// Time when the service principal name was updated.
        public var updatedAt: ClientRuntime.Date?

        public init(
            connectorArn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            directoryRegistrationArn: Swift.String? = nil,
            status: PcaConnectorAdClientTypes.ServicePrincipalNameStatus? = nil,
            statusReason: PcaConnectorAdClientTypes.ServicePrincipalNameStatusReason? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.connectorArn = connectorArn
            self.createdAt = createdAt
            self.directoryRegistrationArn = directoryRegistrationArn
            self.status = status
            self.statusReason = statusReason
            self.updatedAt = updatedAt
        }
    }

}

extension ServiceQuotaExceededException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ServiceQuotaExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
            self.properties.quotaCode = output.quotaCode
            self.properties.resourceId = output.resourceId
            self.properties.resourceType = output.resourceType
            self.properties.serviceCode = output.serviceCode
        } else {
            self.properties.message = nil
            self.properties.quotaCode = nil
            self.properties.resourceId = nil
            self.properties.resourceType = nil
            self.properties.serviceCode = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// Request would cause a service quota to be exceeded.
public struct ServiceQuotaExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The code associated with the service quota.
        /// This member is required.
        public internal(set) var quotaCode: Swift.String? = nil
        /// The identifier of the Amazon Web Services resource.
        /// This member is required.
        public internal(set) var resourceId: Swift.String? = nil
        /// The resource type, which can be one of Connector, Template, TemplateGroupAccessControlEntry, ServicePrincipalName, or DirectoryRegistration.
        /// This member is required.
        public internal(set) var resourceType: Swift.String? = nil
        /// Identifies the originating service.
        /// This member is required.
        public internal(set) var serviceCode: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ServiceQuotaExceededException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        resourceId: Swift.String? = nil,
        resourceType: Swift.String? = nil,
        serviceCode: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.quotaCode = quotaCode
        self.properties.resourceId = resourceId
        self.properties.resourceType = resourceType
        self.properties.serviceCode = serviceCode
    }
}

struct ServiceQuotaExceededExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let resourceId: Swift.String?
    let resourceType: Swift.String?
    let serviceCode: Swift.String?
    let quotaCode: Swift.String?
}

extension ServiceQuotaExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case quotaCode = "QuotaCode"
        case resourceId = "ResourceId"
        case resourceType = "ResourceType"
        case serviceCode = "ServiceCode"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let resourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceId)
        resourceId = resourceIdDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let serviceCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceCode)
        serviceCode = serviceCodeDecoded
        let quotaCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quotaCode)
        quotaCode = quotaCodeDecoded
    }
}

extension PcaConnectorAdClientTypes.SubjectNameFlagsV2: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requireCommonName = "RequireCommonName"
        case requireDirectoryPath = "RequireDirectoryPath"
        case requireDnsAsCn = "RequireDnsAsCn"
        case requireEmail = "RequireEmail"
        case sanRequireDirectoryGuid = "SanRequireDirectoryGuid"
        case sanRequireDns = "SanRequireDns"
        case sanRequireDomainDns = "SanRequireDomainDns"
        case sanRequireEmail = "SanRequireEmail"
        case sanRequireSpn = "SanRequireSpn"
        case sanRequireUpn = "SanRequireUpn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let requireCommonName = self.requireCommonName {
            try encodeContainer.encode(requireCommonName, forKey: .requireCommonName)
        }
        if let requireDirectoryPath = self.requireDirectoryPath {
            try encodeContainer.encode(requireDirectoryPath, forKey: .requireDirectoryPath)
        }
        if let requireDnsAsCn = self.requireDnsAsCn {
            try encodeContainer.encode(requireDnsAsCn, forKey: .requireDnsAsCn)
        }
        if let requireEmail = self.requireEmail {
            try encodeContainer.encode(requireEmail, forKey: .requireEmail)
        }
        if let sanRequireDirectoryGuid = self.sanRequireDirectoryGuid {
            try encodeContainer.encode(sanRequireDirectoryGuid, forKey: .sanRequireDirectoryGuid)
        }
        if let sanRequireDns = self.sanRequireDns {
            try encodeContainer.encode(sanRequireDns, forKey: .sanRequireDns)
        }
        if let sanRequireDomainDns = self.sanRequireDomainDns {
            try encodeContainer.encode(sanRequireDomainDns, forKey: .sanRequireDomainDns)
        }
        if let sanRequireEmail = self.sanRequireEmail {
            try encodeContainer.encode(sanRequireEmail, forKey: .sanRequireEmail)
        }
        if let sanRequireSpn = self.sanRequireSpn {
            try encodeContainer.encode(sanRequireSpn, forKey: .sanRequireSpn)
        }
        if let sanRequireUpn = self.sanRequireUpn {
            try encodeContainer.encode(sanRequireUpn, forKey: .sanRequireUpn)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sanRequireDomainDnsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sanRequireDomainDns)
        sanRequireDomainDns = sanRequireDomainDnsDecoded
        let sanRequireSpnDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sanRequireSpn)
        sanRequireSpn = sanRequireSpnDecoded
        let sanRequireDirectoryGuidDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sanRequireDirectoryGuid)
        sanRequireDirectoryGuid = sanRequireDirectoryGuidDecoded
        let sanRequireUpnDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sanRequireUpn)
        sanRequireUpn = sanRequireUpnDecoded
        let sanRequireEmailDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sanRequireEmail)
        sanRequireEmail = sanRequireEmailDecoded
        let sanRequireDnsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sanRequireDns)
        sanRequireDns = sanRequireDnsDecoded
        let requireDnsAsCnDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireDnsAsCn)
        requireDnsAsCn = requireDnsAsCnDecoded
        let requireEmailDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireEmail)
        requireEmail = requireEmailDecoded
        let requireCommonNameDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireCommonName)
        requireCommonName = requireCommonNameDecoded
        let requireDirectoryPathDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireDirectoryPath)
        requireDirectoryPath = requireDirectoryPathDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Information to include in the subject name and alternate subject name of the certificate. The subject name can be common name, directory path, DNS as common name, or left blank. You can optionally include email to the subject name for user templates. If you leave the subject name blank then you must set a subject alternate name. The subject alternate name (SAN) can include globally unique identifier (GUID), DNS, domain DNS, email, service principal name (SPN), and user principal name (UPN). You can leave the SAN blank. If you leave the SAN blank, then you must set a subject name.
    public struct SubjectNameFlagsV2: Swift.Equatable {
        /// Include the common name in the subject name.
        public var requireCommonName: Swift.Bool?
        /// Include the directory path in the subject name.
        public var requireDirectoryPath: Swift.Bool?
        /// Include the DNS as common name in the subject name.
        public var requireDnsAsCn: Swift.Bool?
        /// Include the subject's email in the subject name.
        public var requireEmail: Swift.Bool?
        /// Include the globally unique identifier (GUID) in the subject alternate name.
        public var sanRequireDirectoryGuid: Swift.Bool?
        /// Include the DNS in the subject alternate name.
        public var sanRequireDns: Swift.Bool?
        /// Include the domain DNS in the subject alternate name.
        public var sanRequireDomainDns: Swift.Bool?
        /// Include the subject's email in the subject alternate name.
        public var sanRequireEmail: Swift.Bool?
        /// Include the service principal name (SPN) in the subject alternate name.
        public var sanRequireSpn: Swift.Bool?
        /// Include the user principal name (UPN) in the subject alternate name.
        public var sanRequireUpn: Swift.Bool?

        public init(
            requireCommonName: Swift.Bool? = nil,
            requireDirectoryPath: Swift.Bool? = nil,
            requireDnsAsCn: Swift.Bool? = nil,
            requireEmail: Swift.Bool? = nil,
            sanRequireDirectoryGuid: Swift.Bool? = nil,
            sanRequireDns: Swift.Bool? = nil,
            sanRequireDomainDns: Swift.Bool? = nil,
            sanRequireEmail: Swift.Bool? = nil,
            sanRequireSpn: Swift.Bool? = nil,
            sanRequireUpn: Swift.Bool? = nil
        )
        {
            self.requireCommonName = requireCommonName
            self.requireDirectoryPath = requireDirectoryPath
            self.requireDnsAsCn = requireDnsAsCn
            self.requireEmail = requireEmail
            self.sanRequireDirectoryGuid = sanRequireDirectoryGuid
            self.sanRequireDns = sanRequireDns
            self.sanRequireDomainDns = sanRequireDomainDns
            self.sanRequireEmail = sanRequireEmail
            self.sanRequireSpn = sanRequireSpn
            self.sanRequireUpn = sanRequireUpn
        }
    }

}

extension PcaConnectorAdClientTypes.SubjectNameFlagsV3: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requireCommonName = "RequireCommonName"
        case requireDirectoryPath = "RequireDirectoryPath"
        case requireDnsAsCn = "RequireDnsAsCn"
        case requireEmail = "RequireEmail"
        case sanRequireDirectoryGuid = "SanRequireDirectoryGuid"
        case sanRequireDns = "SanRequireDns"
        case sanRequireDomainDns = "SanRequireDomainDns"
        case sanRequireEmail = "SanRequireEmail"
        case sanRequireSpn = "SanRequireSpn"
        case sanRequireUpn = "SanRequireUpn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let requireCommonName = self.requireCommonName {
            try encodeContainer.encode(requireCommonName, forKey: .requireCommonName)
        }
        if let requireDirectoryPath = self.requireDirectoryPath {
            try encodeContainer.encode(requireDirectoryPath, forKey: .requireDirectoryPath)
        }
        if let requireDnsAsCn = self.requireDnsAsCn {
            try encodeContainer.encode(requireDnsAsCn, forKey: .requireDnsAsCn)
        }
        if let requireEmail = self.requireEmail {
            try encodeContainer.encode(requireEmail, forKey: .requireEmail)
        }
        if let sanRequireDirectoryGuid = self.sanRequireDirectoryGuid {
            try encodeContainer.encode(sanRequireDirectoryGuid, forKey: .sanRequireDirectoryGuid)
        }
        if let sanRequireDns = self.sanRequireDns {
            try encodeContainer.encode(sanRequireDns, forKey: .sanRequireDns)
        }
        if let sanRequireDomainDns = self.sanRequireDomainDns {
            try encodeContainer.encode(sanRequireDomainDns, forKey: .sanRequireDomainDns)
        }
        if let sanRequireEmail = self.sanRequireEmail {
            try encodeContainer.encode(sanRequireEmail, forKey: .sanRequireEmail)
        }
        if let sanRequireSpn = self.sanRequireSpn {
            try encodeContainer.encode(sanRequireSpn, forKey: .sanRequireSpn)
        }
        if let sanRequireUpn = self.sanRequireUpn {
            try encodeContainer.encode(sanRequireUpn, forKey: .sanRequireUpn)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sanRequireDomainDnsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sanRequireDomainDns)
        sanRequireDomainDns = sanRequireDomainDnsDecoded
        let sanRequireSpnDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sanRequireSpn)
        sanRequireSpn = sanRequireSpnDecoded
        let sanRequireDirectoryGuidDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sanRequireDirectoryGuid)
        sanRequireDirectoryGuid = sanRequireDirectoryGuidDecoded
        let sanRequireUpnDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sanRequireUpn)
        sanRequireUpn = sanRequireUpnDecoded
        let sanRequireEmailDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sanRequireEmail)
        sanRequireEmail = sanRequireEmailDecoded
        let sanRequireDnsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sanRequireDns)
        sanRequireDns = sanRequireDnsDecoded
        let requireDnsAsCnDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireDnsAsCn)
        requireDnsAsCn = requireDnsAsCnDecoded
        let requireEmailDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireEmail)
        requireEmail = requireEmailDecoded
        let requireCommonNameDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireCommonName)
        requireCommonName = requireCommonNameDecoded
        let requireDirectoryPathDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireDirectoryPath)
        requireDirectoryPath = requireDirectoryPathDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Information to include in the subject name and alternate subject name of the certificate. The subject name can be common name, directory path, DNS as common name, or left blank. You can optionally include email to the subject name for user templates. If you leave the subject name blank then you must set a subject alternate name. The subject alternate name (SAN) can include globally unique identifier (GUID), DNS, domain DNS, email, service principal name (SPN), and user principal name (UPN). You can leave the SAN blank. If you leave the SAN blank, then you must set a subject name.
    public struct SubjectNameFlagsV3: Swift.Equatable {
        /// Include the common name in the subject name.
        public var requireCommonName: Swift.Bool?
        /// Include the directory path in the subject name.
        public var requireDirectoryPath: Swift.Bool?
        /// Include the DNS as common name in the subject name.
        public var requireDnsAsCn: Swift.Bool?
        /// Include the subject's email in the subject name.
        public var requireEmail: Swift.Bool?
        /// Include the globally unique identifier (GUID) in the subject alternate name.
        public var sanRequireDirectoryGuid: Swift.Bool?
        /// Include the DNS in the subject alternate name.
        public var sanRequireDns: Swift.Bool?
        /// Include the domain DNS in the subject alternate name.
        public var sanRequireDomainDns: Swift.Bool?
        /// Include the subject's email in the subject alternate name.
        public var sanRequireEmail: Swift.Bool?
        /// Include the service principal name (SPN) in the subject alternate name.
        public var sanRequireSpn: Swift.Bool?
        /// Include the user principal name (UPN) in the subject alternate name.
        public var sanRequireUpn: Swift.Bool?

        public init(
            requireCommonName: Swift.Bool? = nil,
            requireDirectoryPath: Swift.Bool? = nil,
            requireDnsAsCn: Swift.Bool? = nil,
            requireEmail: Swift.Bool? = nil,
            sanRequireDirectoryGuid: Swift.Bool? = nil,
            sanRequireDns: Swift.Bool? = nil,
            sanRequireDomainDns: Swift.Bool? = nil,
            sanRequireEmail: Swift.Bool? = nil,
            sanRequireSpn: Swift.Bool? = nil,
            sanRequireUpn: Swift.Bool? = nil
        )
        {
            self.requireCommonName = requireCommonName
            self.requireDirectoryPath = requireDirectoryPath
            self.requireDnsAsCn = requireDnsAsCn
            self.requireEmail = requireEmail
            self.sanRequireDirectoryGuid = sanRequireDirectoryGuid
            self.sanRequireDns = sanRequireDns
            self.sanRequireDomainDns = sanRequireDomainDns
            self.sanRequireEmail = sanRequireEmail
            self.sanRequireSpn = sanRequireSpn
            self.sanRequireUpn = sanRequireUpn
        }
    }

}

extension PcaConnectorAdClientTypes.SubjectNameFlagsV4: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case requireCommonName = "RequireCommonName"
        case requireDirectoryPath = "RequireDirectoryPath"
        case requireDnsAsCn = "RequireDnsAsCn"
        case requireEmail = "RequireEmail"
        case sanRequireDirectoryGuid = "SanRequireDirectoryGuid"
        case sanRequireDns = "SanRequireDns"
        case sanRequireDomainDns = "SanRequireDomainDns"
        case sanRequireEmail = "SanRequireEmail"
        case sanRequireSpn = "SanRequireSpn"
        case sanRequireUpn = "SanRequireUpn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let requireCommonName = self.requireCommonName {
            try encodeContainer.encode(requireCommonName, forKey: .requireCommonName)
        }
        if let requireDirectoryPath = self.requireDirectoryPath {
            try encodeContainer.encode(requireDirectoryPath, forKey: .requireDirectoryPath)
        }
        if let requireDnsAsCn = self.requireDnsAsCn {
            try encodeContainer.encode(requireDnsAsCn, forKey: .requireDnsAsCn)
        }
        if let requireEmail = self.requireEmail {
            try encodeContainer.encode(requireEmail, forKey: .requireEmail)
        }
        if let sanRequireDirectoryGuid = self.sanRequireDirectoryGuid {
            try encodeContainer.encode(sanRequireDirectoryGuid, forKey: .sanRequireDirectoryGuid)
        }
        if let sanRequireDns = self.sanRequireDns {
            try encodeContainer.encode(sanRequireDns, forKey: .sanRequireDns)
        }
        if let sanRequireDomainDns = self.sanRequireDomainDns {
            try encodeContainer.encode(sanRequireDomainDns, forKey: .sanRequireDomainDns)
        }
        if let sanRequireEmail = self.sanRequireEmail {
            try encodeContainer.encode(sanRequireEmail, forKey: .sanRequireEmail)
        }
        if let sanRequireSpn = self.sanRequireSpn {
            try encodeContainer.encode(sanRequireSpn, forKey: .sanRequireSpn)
        }
        if let sanRequireUpn = self.sanRequireUpn {
            try encodeContainer.encode(sanRequireUpn, forKey: .sanRequireUpn)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sanRequireDomainDnsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sanRequireDomainDns)
        sanRequireDomainDns = sanRequireDomainDnsDecoded
        let sanRequireSpnDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sanRequireSpn)
        sanRequireSpn = sanRequireSpnDecoded
        let sanRequireDirectoryGuidDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sanRequireDirectoryGuid)
        sanRequireDirectoryGuid = sanRequireDirectoryGuidDecoded
        let sanRequireUpnDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sanRequireUpn)
        sanRequireUpn = sanRequireUpnDecoded
        let sanRequireEmailDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sanRequireEmail)
        sanRequireEmail = sanRequireEmailDecoded
        let sanRequireDnsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .sanRequireDns)
        sanRequireDns = sanRequireDnsDecoded
        let requireDnsAsCnDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireDnsAsCn)
        requireDnsAsCn = requireDnsAsCnDecoded
        let requireEmailDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireEmail)
        requireEmail = requireEmailDecoded
        let requireCommonNameDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireCommonName)
        requireCommonName = requireCommonNameDecoded
        let requireDirectoryPathDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .requireDirectoryPath)
        requireDirectoryPath = requireDirectoryPathDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Information to include in the subject name and alternate subject name of the certificate. The subject name can be common name, directory path, DNS as common name, or left blank. You can optionally include email to the subject name for user templates. If you leave the subject name blank then you must set a subject alternate name. The subject alternate name (SAN) can include globally unique identifier (GUID), DNS, domain DNS, email, service principal name (SPN), and user principal name (UPN). You can leave the SAN blank. If you leave the SAN blank, then you must set a subject name.
    public struct SubjectNameFlagsV4: Swift.Equatable {
        /// Include the common name in the subject name.
        public var requireCommonName: Swift.Bool?
        /// Include the directory path in the subject name.
        public var requireDirectoryPath: Swift.Bool?
        /// Include the DNS as common name in the subject name.
        public var requireDnsAsCn: Swift.Bool?
        /// Include the subject's email in the subject name.
        public var requireEmail: Swift.Bool?
        /// Include the globally unique identifier (GUID) in the subject alternate name.
        public var sanRequireDirectoryGuid: Swift.Bool?
        /// Include the DNS in the subject alternate name.
        public var sanRequireDns: Swift.Bool?
        /// Include the domain DNS in the subject alternate name.
        public var sanRequireDomainDns: Swift.Bool?
        /// Include the subject's email in the subject alternate name.
        public var sanRequireEmail: Swift.Bool?
        /// Include the service principal name (SPN) in the subject alternate name.
        public var sanRequireSpn: Swift.Bool?
        /// Include the user principal name (UPN) in the subject alternate name.
        public var sanRequireUpn: Swift.Bool?

        public init(
            requireCommonName: Swift.Bool? = nil,
            requireDirectoryPath: Swift.Bool? = nil,
            requireDnsAsCn: Swift.Bool? = nil,
            requireEmail: Swift.Bool? = nil,
            sanRequireDirectoryGuid: Swift.Bool? = nil,
            sanRequireDns: Swift.Bool? = nil,
            sanRequireDomainDns: Swift.Bool? = nil,
            sanRequireEmail: Swift.Bool? = nil,
            sanRequireSpn: Swift.Bool? = nil,
            sanRequireUpn: Swift.Bool? = nil
        )
        {
            self.requireCommonName = requireCommonName
            self.requireDirectoryPath = requireDirectoryPath
            self.requireDnsAsCn = requireDnsAsCn
            self.requireEmail = requireEmail
            self.sanRequireDirectoryGuid = sanRequireDirectoryGuid
            self.sanRequireDns = sanRequireDns
            self.sanRequireDomainDns = sanRequireDomainDns
            self.sanRequireEmail = sanRequireEmail
            self.sanRequireSpn = sanRequireSpn
            self.sanRequireUpn = sanRequireUpn
        }
    }

}

extension TagResourceInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tags0) in tags {
                try tagsContainer.encode(tags0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

extension TagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that was returned when you created the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Metadata assigned to a directory registration consisting of a key-value pair.
    /// This member is required.
    public var tags: [Swift.String:Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    let tags: [Swift.String:Swift.String]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, string0) in tagsContainer {
                if let string0 = string0 {
                    tagsDecoded0?[key0] = string0
                }
            }
        }
        tags = tagsDecoded0
    }
}

enum TagResourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init() { }
}

extension PcaConnectorAdClientTypes.Template: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case connectorArn = "ConnectorArn"
        case createdAt = "CreatedAt"
        case definition = "Definition"
        case name = "Name"
        case objectIdentifier = "ObjectIdentifier"
        case policySchema = "PolicySchema"
        case revision = "Revision"
        case status = "Status"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let connectorArn = self.connectorArn {
            try encodeContainer.encode(connectorArn, forKey: .connectorArn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let definition = self.definition {
            try encodeContainer.encode(definition, forKey: .definition)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let objectIdentifier = self.objectIdentifier {
            try encodeContainer.encode(objectIdentifier, forKey: .objectIdentifier)
        }
        if let policySchema = self.policySchema {
            try encodeContainer.encode(policySchema, forKey: .policySchema)
        }
        if let revision = self.revision {
            try encodeContainer.encode(revision, forKey: .revision)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encodeTimestamp(updatedAt, format: .epochSeconds, forKey: .updatedAt)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let connectorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorArn)
        connectorArn = connectorArnDecoded
        let definitionDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.TemplateDefinition.self, forKey: .definition)
        definition = definitionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let objectIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .objectIdentifier)
        objectIdentifier = objectIdentifierDecoded
        let policySchemaDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .policySchema)
        policySchema = policySchemaDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.TemplateStatus.self, forKey: .status)
        status = statusDecoded
        let revisionDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.TemplateRevision.self, forKey: .revision)
        revision = revisionDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// An Active Directory compatible certificate template. Connectors issue certificates against these templates based on the requestor's Active Directory group membership.
    public struct Template: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
        public var arn: Swift.String?
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
        public var connectorArn: Swift.String?
        /// The date and time that the template was created.
        public var createdAt: ClientRuntime.Date?
        /// Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.
        public var definition: PcaConnectorAdClientTypes.TemplateDefinition?
        /// Name of the templates. Template names must be unique.
        public var name: Swift.String?
        /// Object identifier of a template.
        public var objectIdentifier: Swift.String?
        /// The template schema version. Template schema versions can be v2, v3, or v4. The template configuration options change based on the template schema version.
        public var policySchema: Swift.Int?
        /// The version of the template. Template updates will increment the minor revision. Re-enrolling all certificate holders will increment the major revision.
        public var revision: PcaConnectorAdClientTypes.TemplateRevision?
        /// Status of the template. Status can be creating, active, deleting, or failed.
        public var status: PcaConnectorAdClientTypes.TemplateStatus?
        /// The date and time that the template was updated.
        public var updatedAt: ClientRuntime.Date?

        public init(
            arn: Swift.String? = nil,
            connectorArn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            definition: PcaConnectorAdClientTypes.TemplateDefinition? = nil,
            name: Swift.String? = nil,
            objectIdentifier: Swift.String? = nil,
            policySchema: Swift.Int? = nil,
            revision: PcaConnectorAdClientTypes.TemplateRevision? = nil,
            status: PcaConnectorAdClientTypes.TemplateStatus? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.arn = arn
            self.connectorArn = connectorArn
            self.createdAt = createdAt
            self.definition = definition
            self.name = name
            self.objectIdentifier = objectIdentifier
            self.policySchema = policySchema
            self.revision = revision
            self.status = status
            self.updatedAt = updatedAt
        }
    }

}

extension PcaConnectorAdClientTypes.TemplateDefinition: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case templatev2 = "TemplateV2"
        case templatev3 = "TemplateV3"
        case templatev4 = "TemplateV4"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .templatev2(templatev2):
                try container.encode(templatev2, forKey: .templatev2)
            case let .templatev3(templatev3):
                try container.encode(templatev3, forKey: .templatev3)
            case let .templatev4(templatev4):
                try container.encode(templatev4, forKey: .templatev4)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let templatev2Decoded = try values.decodeIfPresent(PcaConnectorAdClientTypes.TemplateV2.self, forKey: .templatev2)
        if let templatev2 = templatev2Decoded {
            self = .templatev2(templatev2)
            return
        }
        let templatev3Decoded = try values.decodeIfPresent(PcaConnectorAdClientTypes.TemplateV3.self, forKey: .templatev3)
        if let templatev3 = templatev3Decoded {
            self = .templatev3(templatev3)
            return
        }
        let templatev4Decoded = try values.decodeIfPresent(PcaConnectorAdClientTypes.TemplateV4.self, forKey: .templatev4)
        if let templatev4 = templatev4Decoded {
            self = .templatev4(templatev4)
            return
        }
        self = .sdkUnknown("")
    }
}

extension PcaConnectorAdClientTypes {
    /// Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.
    public enum TemplateDefinition: Swift.Equatable {
        /// Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.
        case templatev2(PcaConnectorAdClientTypes.TemplateV2)
        /// Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.
        case templatev3(PcaConnectorAdClientTypes.TemplateV3)
        /// Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.
        case templatev4(PcaConnectorAdClientTypes.TemplateV4)
        case sdkUnknown(Swift.String)
    }

}

extension PcaConnectorAdClientTypes.TemplateRevision: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case majorRevision = "MajorRevision"
        case minorRevision = "MinorRevision"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let majorRevision = self.majorRevision {
            try encodeContainer.encode(majorRevision, forKey: .majorRevision)
        }
        if let minorRevision = self.minorRevision {
            try encodeContainer.encode(minorRevision, forKey: .minorRevision)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let majorRevisionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .majorRevision)
        majorRevision = majorRevisionDecoded
        let minorRevisionDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .minorRevision)
        minorRevision = minorRevisionDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// The revision version of the template. Template updates will increment the minor revision. Re-enrolling all certificate holders will increment the major revision.
    public struct TemplateRevision: Swift.Equatable {
        /// The revision version of the template. Re-enrolling all certificate holders will increment the major revision.
        /// This member is required.
        public var majorRevision: Swift.Int?
        /// The revision version of the template. Re-enrolling all certificate holders will increment the major revision.
        /// This member is required.
        public var minorRevision: Swift.Int?

        public init(
            majorRevision: Swift.Int? = nil,
            minorRevision: Swift.Int? = nil
        )
        {
            self.majorRevision = majorRevision
            self.minorRevision = minorRevision
        }
    }

}

extension PcaConnectorAdClientTypes {
    public enum TemplateStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case deleting
        case sdkUnknown(Swift.String)

        public static var allCases: [TemplateStatus] {
            return [
                .active,
                .deleting,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .deleting: return "DELETING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TemplateStatus(rawValue: rawValue) ?? TemplateStatus.sdkUnknown(rawValue)
        }
    }
}

extension PcaConnectorAdClientTypes.TemplateSummary: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case connectorArn = "ConnectorArn"
        case createdAt = "CreatedAt"
        case definition = "Definition"
        case name = "Name"
        case objectIdentifier = "ObjectIdentifier"
        case policySchema = "PolicySchema"
        case revision = "Revision"
        case status = "Status"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = self.arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let connectorArn = self.connectorArn {
            try encodeContainer.encode(connectorArn, forKey: .connectorArn)
        }
        if let createdAt = self.createdAt {
            try encodeContainer.encodeTimestamp(createdAt, format: .epochSeconds, forKey: .createdAt)
        }
        if let definition = self.definition {
            try encodeContainer.encode(definition, forKey: .definition)
        }
        if let name = self.name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let objectIdentifier = self.objectIdentifier {
            try encodeContainer.encode(objectIdentifier, forKey: .objectIdentifier)
        }
        if let policySchema = self.policySchema {
            try encodeContainer.encode(policySchema, forKey: .policySchema)
        }
        if let revision = self.revision {
            try encodeContainer.encode(revision, forKey: .revision)
        }
        if let status = self.status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let updatedAt = self.updatedAt {
            try encodeContainer.encodeTimestamp(updatedAt, format: .epochSeconds, forKey: .updatedAt)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let connectorArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectorArn)
        connectorArn = connectorArnDecoded
        let definitionDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.TemplateDefinition.self, forKey: .definition)
        definition = definitionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let objectIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .objectIdentifier)
        objectIdentifier = objectIdentifierDecoded
        let policySchemaDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .policySchema)
        policySchema = policySchemaDecoded
        let statusDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.TemplateStatus.self, forKey: .status)
        status = statusDecoded
        let revisionDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.TemplateRevision.self, forKey: .revision)
        revision = revisionDecoded
        let createdAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeTimestampIfPresent(.epochSeconds, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// An Active Directory compatible certificate template. Connectors issue certificates against these templates based on the requestor's Active Directory group membership.
    public struct TemplateSummary: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
        public var arn: Swift.String?
        /// The Amazon Resource Name (ARN) that was returned when you called [CreateConnector](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateConnector.html).
        public var connectorArn: Swift.String?
        /// The date and time that the template was created.
        public var createdAt: ClientRuntime.Date?
        /// Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.
        public var definition: PcaConnectorAdClientTypes.TemplateDefinition?
        /// Name of the template. The template name must be unique.
        public var name: Swift.String?
        /// Object identifier of a template.
        public var objectIdentifier: Swift.String?
        /// The template schema version. Template schema versions can be v2, v3, or v4. The template configuration options change based on the template schema version.
        public var policySchema: Swift.Int?
        /// The revision version of the template. Template updates will increment the minor revision. Re-enrolling all certificate holders will increment the major revision.
        public var revision: PcaConnectorAdClientTypes.TemplateRevision?
        /// Status of the template. Status can be creating, active, deleting, or failed.
        public var status: PcaConnectorAdClientTypes.TemplateStatus?
        /// The date and time that the template was updated.
        public var updatedAt: ClientRuntime.Date?

        public init(
            arn: Swift.String? = nil,
            connectorArn: Swift.String? = nil,
            createdAt: ClientRuntime.Date? = nil,
            definition: PcaConnectorAdClientTypes.TemplateDefinition? = nil,
            name: Swift.String? = nil,
            objectIdentifier: Swift.String? = nil,
            policySchema: Swift.Int? = nil,
            revision: PcaConnectorAdClientTypes.TemplateRevision? = nil,
            status: PcaConnectorAdClientTypes.TemplateStatus? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.arn = arn
            self.connectorArn = connectorArn
            self.createdAt = createdAt
            self.definition = definition
            self.name = name
            self.objectIdentifier = objectIdentifier
            self.policySchema = policySchema
            self.revision = revision
            self.status = status
            self.updatedAt = updatedAt
        }
    }

}

extension PcaConnectorAdClientTypes.TemplateV2: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateValidity = "CertificateValidity"
        case enrollmentFlags = "EnrollmentFlags"
        case extensions = "Extensions"
        case generalFlags = "GeneralFlags"
        case privateKeyAttributes = "PrivateKeyAttributes"
        case privateKeyFlags = "PrivateKeyFlags"
        case subjectNameFlags = "SubjectNameFlags"
        case supersededTemplates = "SupersededTemplates"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateValidity = self.certificateValidity {
            try encodeContainer.encode(certificateValidity, forKey: .certificateValidity)
        }
        if let enrollmentFlags = self.enrollmentFlags {
            try encodeContainer.encode(enrollmentFlags, forKey: .enrollmentFlags)
        }
        if let extensions = self.extensions {
            try encodeContainer.encode(extensions, forKey: .extensions)
        }
        if let generalFlags = self.generalFlags {
            try encodeContainer.encode(generalFlags, forKey: .generalFlags)
        }
        if let privateKeyAttributes = self.privateKeyAttributes {
            try encodeContainer.encode(privateKeyAttributes, forKey: .privateKeyAttributes)
        }
        if let privateKeyFlags = self.privateKeyFlags {
            try encodeContainer.encode(privateKeyFlags, forKey: .privateKeyFlags)
        }
        if let subjectNameFlags = self.subjectNameFlags {
            try encodeContainer.encode(subjectNameFlags, forKey: .subjectNameFlags)
        }
        if let supersededTemplates = supersededTemplates {
            var supersededTemplatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supersededTemplates)
            for templatename0 in supersededTemplates {
                try supersededTemplatesContainer.encode(templatename0)
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateValidityDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.CertificateValidity.self, forKey: .certificateValidity)
        certificateValidity = certificateValidityDecoded
        let supersededTemplatesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supersededTemplates)
        var supersededTemplatesDecoded0:[Swift.String]? = nil
        if let supersededTemplatesContainer = supersededTemplatesContainer {
            supersededTemplatesDecoded0 = [Swift.String]()
            for string0 in supersededTemplatesContainer {
                if let string0 = string0 {
                    supersededTemplatesDecoded0?.append(string0)
                }
            }
        }
        supersededTemplates = supersededTemplatesDecoded0
        let privateKeyAttributesDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.PrivateKeyAttributesV2.self, forKey: .privateKeyAttributes)
        privateKeyAttributes = privateKeyAttributesDecoded
        let privateKeyFlagsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.PrivateKeyFlagsV2.self, forKey: .privateKeyFlags)
        privateKeyFlags = privateKeyFlagsDecoded
        let enrollmentFlagsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.EnrollmentFlagsV2.self, forKey: .enrollmentFlags)
        enrollmentFlags = enrollmentFlagsDecoded
        let subjectNameFlagsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.SubjectNameFlagsV2.self, forKey: .subjectNameFlags)
        subjectNameFlags = subjectNameFlagsDecoded
        let generalFlagsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.GeneralFlagsV2.self, forKey: .generalFlags)
        generalFlags = generalFlagsDecoded
        let extensionsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ExtensionsV2.self, forKey: .extensions)
        extensions = extensionsDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// v2 template schema that uses Legacy Cryptographic Providers.
    public struct TemplateV2: Swift.Equatable {
        /// Certificate validity describes the validity and renewal periods of a certificate.
        /// This member is required.
        public var certificateValidity: PcaConnectorAdClientTypes.CertificateValidity?
        /// Enrollment flags describe the enrollment settings for certificates such as using the existing private key and deleting expired or revoked certificates.
        /// This member is required.
        public var enrollmentFlags: PcaConnectorAdClientTypes.EnrollmentFlagsV2?
        /// Extensions describe the key usage extensions and application policies for a template.
        /// This member is required.
        public var extensions: PcaConnectorAdClientTypes.ExtensionsV2?
        /// General flags describe whether the template is used for computers or users and if the template can be used with autoenrollment.
        /// This member is required.
        public var generalFlags: PcaConnectorAdClientTypes.GeneralFlagsV2?
        /// Private key attributes allow you to specify the minimal key length, key spec, and cryptographic providers for the private key of a certificate for v2 templates. V2 templates allow you to use Legacy Cryptographic Service Providers.
        /// This member is required.
        public var privateKeyAttributes: PcaConnectorAdClientTypes.PrivateKeyAttributesV2?
        /// Private key flags for v2 templates specify the client compatibility, if the private key can be exported, and if user input is required when using a private key.
        /// This member is required.
        public var privateKeyFlags: PcaConnectorAdClientTypes.PrivateKeyFlagsV2?
        /// Subject name flags describe the subject name and subject alternate name that is included in a certificate.
        /// This member is required.
        public var subjectNameFlags: PcaConnectorAdClientTypes.SubjectNameFlagsV2?
        /// List of templates in Active Directory that are superseded by this template.
        public var supersededTemplates: [Swift.String]?

        public init(
            certificateValidity: PcaConnectorAdClientTypes.CertificateValidity? = nil,
            enrollmentFlags: PcaConnectorAdClientTypes.EnrollmentFlagsV2? = nil,
            extensions: PcaConnectorAdClientTypes.ExtensionsV2? = nil,
            generalFlags: PcaConnectorAdClientTypes.GeneralFlagsV2? = nil,
            privateKeyAttributes: PcaConnectorAdClientTypes.PrivateKeyAttributesV2? = nil,
            privateKeyFlags: PcaConnectorAdClientTypes.PrivateKeyFlagsV2? = nil,
            subjectNameFlags: PcaConnectorAdClientTypes.SubjectNameFlagsV2? = nil,
            supersededTemplates: [Swift.String]? = nil
        )
        {
            self.certificateValidity = certificateValidity
            self.enrollmentFlags = enrollmentFlags
            self.extensions = extensions
            self.generalFlags = generalFlags
            self.privateKeyAttributes = privateKeyAttributes
            self.privateKeyFlags = privateKeyFlags
            self.subjectNameFlags = subjectNameFlags
            self.supersededTemplates = supersededTemplates
        }
    }

}

extension PcaConnectorAdClientTypes.TemplateV3: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateValidity = "CertificateValidity"
        case enrollmentFlags = "EnrollmentFlags"
        case extensions = "Extensions"
        case generalFlags = "GeneralFlags"
        case hashAlgorithm = "HashAlgorithm"
        case privateKeyAttributes = "PrivateKeyAttributes"
        case privateKeyFlags = "PrivateKeyFlags"
        case subjectNameFlags = "SubjectNameFlags"
        case supersededTemplates = "SupersededTemplates"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateValidity = self.certificateValidity {
            try encodeContainer.encode(certificateValidity, forKey: .certificateValidity)
        }
        if let enrollmentFlags = self.enrollmentFlags {
            try encodeContainer.encode(enrollmentFlags, forKey: .enrollmentFlags)
        }
        if let extensions = self.extensions {
            try encodeContainer.encode(extensions, forKey: .extensions)
        }
        if let generalFlags = self.generalFlags {
            try encodeContainer.encode(generalFlags, forKey: .generalFlags)
        }
        if let hashAlgorithm = self.hashAlgorithm {
            try encodeContainer.encode(hashAlgorithm.rawValue, forKey: .hashAlgorithm)
        }
        if let privateKeyAttributes = self.privateKeyAttributes {
            try encodeContainer.encode(privateKeyAttributes, forKey: .privateKeyAttributes)
        }
        if let privateKeyFlags = self.privateKeyFlags {
            try encodeContainer.encode(privateKeyFlags, forKey: .privateKeyFlags)
        }
        if let subjectNameFlags = self.subjectNameFlags {
            try encodeContainer.encode(subjectNameFlags, forKey: .subjectNameFlags)
        }
        if let supersededTemplates = supersededTemplates {
            var supersededTemplatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supersededTemplates)
            for templatename0 in supersededTemplates {
                try supersededTemplatesContainer.encode(templatename0)
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateValidityDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.CertificateValidity.self, forKey: .certificateValidity)
        certificateValidity = certificateValidityDecoded
        let supersededTemplatesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supersededTemplates)
        var supersededTemplatesDecoded0:[Swift.String]? = nil
        if let supersededTemplatesContainer = supersededTemplatesContainer {
            supersededTemplatesDecoded0 = [Swift.String]()
            for string0 in supersededTemplatesContainer {
                if let string0 = string0 {
                    supersededTemplatesDecoded0?.append(string0)
                }
            }
        }
        supersededTemplates = supersededTemplatesDecoded0
        let privateKeyAttributesDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.PrivateKeyAttributesV3.self, forKey: .privateKeyAttributes)
        privateKeyAttributes = privateKeyAttributesDecoded
        let privateKeyFlagsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.PrivateKeyFlagsV3.self, forKey: .privateKeyFlags)
        privateKeyFlags = privateKeyFlagsDecoded
        let enrollmentFlagsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.EnrollmentFlagsV3.self, forKey: .enrollmentFlags)
        enrollmentFlags = enrollmentFlagsDecoded
        let subjectNameFlagsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.SubjectNameFlagsV3.self, forKey: .subjectNameFlags)
        subjectNameFlags = subjectNameFlagsDecoded
        let generalFlagsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.GeneralFlagsV3.self, forKey: .generalFlags)
        generalFlags = generalFlagsDecoded
        let hashAlgorithmDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.HashAlgorithm.self, forKey: .hashAlgorithm)
        hashAlgorithm = hashAlgorithmDecoded
        let extensionsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ExtensionsV3.self, forKey: .extensions)
        extensions = extensionsDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// v3 template schema that uses Key Storage Providers.
    public struct TemplateV3: Swift.Equatable {
        /// Certificate validity describes the validity and renewal periods of a certificate.
        /// This member is required.
        public var certificateValidity: PcaConnectorAdClientTypes.CertificateValidity?
        /// Enrollment flags describe the enrollment settings for certificates such as using the existing private key and deleting expired or revoked certificates.
        /// This member is required.
        public var enrollmentFlags: PcaConnectorAdClientTypes.EnrollmentFlagsV3?
        /// Extensions describe the key usage extensions and application policies for a template.
        /// This member is required.
        public var extensions: PcaConnectorAdClientTypes.ExtensionsV3?
        /// General flags describe whether the template is used for computers or users and if the template can be used with autoenrollment.
        /// This member is required.
        public var generalFlags: PcaConnectorAdClientTypes.GeneralFlagsV3?
        /// Specifies the hash algorithm used to hash the private key.
        /// This member is required.
        public var hashAlgorithm: PcaConnectorAdClientTypes.HashAlgorithm?
        /// Private key attributes allow you to specify the algorithm, minimal key length, key spec, key usage, and cryptographic providers for the private key of a certificate for v3 templates. V3 templates allow you to use Key Storage Providers.
        /// This member is required.
        public var privateKeyAttributes: PcaConnectorAdClientTypes.PrivateKeyAttributesV3?
        /// Private key flags for v3 templates specify the client compatibility, if the private key can be exported, if user input is required when using a private key, and if an alternate signature algorithm should be used.
        /// This member is required.
        public var privateKeyFlags: PcaConnectorAdClientTypes.PrivateKeyFlagsV3?
        /// Subject name flags describe the subject name and subject alternate name that is included in a certificate.
        /// This member is required.
        public var subjectNameFlags: PcaConnectorAdClientTypes.SubjectNameFlagsV3?
        /// List of templates in Active Directory that are superseded by this template.
        public var supersededTemplates: [Swift.String]?

        public init(
            certificateValidity: PcaConnectorAdClientTypes.CertificateValidity? = nil,
            enrollmentFlags: PcaConnectorAdClientTypes.EnrollmentFlagsV3? = nil,
            extensions: PcaConnectorAdClientTypes.ExtensionsV3? = nil,
            generalFlags: PcaConnectorAdClientTypes.GeneralFlagsV3? = nil,
            hashAlgorithm: PcaConnectorAdClientTypes.HashAlgorithm? = nil,
            privateKeyAttributes: PcaConnectorAdClientTypes.PrivateKeyAttributesV3? = nil,
            privateKeyFlags: PcaConnectorAdClientTypes.PrivateKeyFlagsV3? = nil,
            subjectNameFlags: PcaConnectorAdClientTypes.SubjectNameFlagsV3? = nil,
            supersededTemplates: [Swift.String]? = nil
        )
        {
            self.certificateValidity = certificateValidity
            self.enrollmentFlags = enrollmentFlags
            self.extensions = extensions
            self.generalFlags = generalFlags
            self.hashAlgorithm = hashAlgorithm
            self.privateKeyAttributes = privateKeyAttributes
            self.privateKeyFlags = privateKeyFlags
            self.subjectNameFlags = subjectNameFlags
            self.supersededTemplates = supersededTemplates
        }
    }

}

extension PcaConnectorAdClientTypes.TemplateV4: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateValidity = "CertificateValidity"
        case enrollmentFlags = "EnrollmentFlags"
        case extensions = "Extensions"
        case generalFlags = "GeneralFlags"
        case hashAlgorithm = "HashAlgorithm"
        case privateKeyAttributes = "PrivateKeyAttributes"
        case privateKeyFlags = "PrivateKeyFlags"
        case subjectNameFlags = "SubjectNameFlags"
        case supersededTemplates = "SupersededTemplates"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateValidity = self.certificateValidity {
            try encodeContainer.encode(certificateValidity, forKey: .certificateValidity)
        }
        if let enrollmentFlags = self.enrollmentFlags {
            try encodeContainer.encode(enrollmentFlags, forKey: .enrollmentFlags)
        }
        if let extensions = self.extensions {
            try encodeContainer.encode(extensions, forKey: .extensions)
        }
        if let generalFlags = self.generalFlags {
            try encodeContainer.encode(generalFlags, forKey: .generalFlags)
        }
        if let hashAlgorithm = self.hashAlgorithm {
            try encodeContainer.encode(hashAlgorithm.rawValue, forKey: .hashAlgorithm)
        }
        if let privateKeyAttributes = self.privateKeyAttributes {
            try encodeContainer.encode(privateKeyAttributes, forKey: .privateKeyAttributes)
        }
        if let privateKeyFlags = self.privateKeyFlags {
            try encodeContainer.encode(privateKeyFlags, forKey: .privateKeyFlags)
        }
        if let subjectNameFlags = self.subjectNameFlags {
            try encodeContainer.encode(subjectNameFlags, forKey: .subjectNameFlags)
        }
        if let supersededTemplates = supersededTemplates {
            var supersededTemplatesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .supersededTemplates)
            for templatename0 in supersededTemplates {
                try supersededTemplatesContainer.encode(templatename0)
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateValidityDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.CertificateValidity.self, forKey: .certificateValidity)
        certificateValidity = certificateValidityDecoded
        let supersededTemplatesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .supersededTemplates)
        var supersededTemplatesDecoded0:[Swift.String]? = nil
        if let supersededTemplatesContainer = supersededTemplatesContainer {
            supersededTemplatesDecoded0 = [Swift.String]()
            for string0 in supersededTemplatesContainer {
                if let string0 = string0 {
                    supersededTemplatesDecoded0?.append(string0)
                }
            }
        }
        supersededTemplates = supersededTemplatesDecoded0
        let privateKeyAttributesDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.PrivateKeyAttributesV4.self, forKey: .privateKeyAttributes)
        privateKeyAttributes = privateKeyAttributesDecoded
        let privateKeyFlagsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.PrivateKeyFlagsV4.self, forKey: .privateKeyFlags)
        privateKeyFlags = privateKeyFlagsDecoded
        let enrollmentFlagsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.EnrollmentFlagsV4.self, forKey: .enrollmentFlags)
        enrollmentFlags = enrollmentFlagsDecoded
        let subjectNameFlagsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.SubjectNameFlagsV4.self, forKey: .subjectNameFlags)
        subjectNameFlags = subjectNameFlagsDecoded
        let generalFlagsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.GeneralFlagsV4.self, forKey: .generalFlags)
        generalFlags = generalFlagsDecoded
        let hashAlgorithmDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.HashAlgorithm.self, forKey: .hashAlgorithm)
        hashAlgorithm = hashAlgorithmDecoded
        let extensionsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ExtensionsV4.self, forKey: .extensions)
        extensions = extensionsDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// v4 template schema that can use either Legacy Cryptographic Providers or Key Storage Providers.
    public struct TemplateV4: Swift.Equatable {
        /// Certificate validity describes the validity and renewal periods of a certificate.
        /// This member is required.
        public var certificateValidity: PcaConnectorAdClientTypes.CertificateValidity?
        /// Enrollment flags describe the enrollment settings for certificates using the existing private key and deleting expired or revoked certificates.
        /// This member is required.
        public var enrollmentFlags: PcaConnectorAdClientTypes.EnrollmentFlagsV4?
        /// Extensions describe the key usage extensions and application policies for a template.
        /// This member is required.
        public var extensions: PcaConnectorAdClientTypes.ExtensionsV4?
        /// General flags describe whether the template is used for computers or users and if the template can be used with autoenrollment.
        /// This member is required.
        public var generalFlags: PcaConnectorAdClientTypes.GeneralFlagsV4?
        /// Specifies the hash algorithm used to hash the private key. Hash algorithm can only be specified when using Key Storage Providers.
        public var hashAlgorithm: PcaConnectorAdClientTypes.HashAlgorithm?
        /// Private key attributes allow you to specify the minimal key length, key spec, key usage, and cryptographic providers for the private key of a certificate for v4 templates. V4 templates allow you to use either Key Storage Providers or Legacy Cryptographic Service Providers. You specify the cryptography provider category in private key flags.
        /// This member is required.
        public var privateKeyAttributes: PcaConnectorAdClientTypes.PrivateKeyAttributesV4?
        /// Private key flags for v4 templates specify the client compatibility, if the private key can be exported, if user input is required when using a private key, if an alternate signature algorithm should be used, and if certificates are renewed using the same private key.
        /// This member is required.
        public var privateKeyFlags: PcaConnectorAdClientTypes.PrivateKeyFlagsV4?
        /// Subject name flags describe the subject name and subject alternate name that is included in a certificate.
        /// This member is required.
        public var subjectNameFlags: PcaConnectorAdClientTypes.SubjectNameFlagsV4?
        /// List of templates in Active Directory that are superseded by this template.
        public var supersededTemplates: [Swift.String]?

        public init(
            certificateValidity: PcaConnectorAdClientTypes.CertificateValidity? = nil,
            enrollmentFlags: PcaConnectorAdClientTypes.EnrollmentFlagsV4? = nil,
            extensions: PcaConnectorAdClientTypes.ExtensionsV4? = nil,
            generalFlags: PcaConnectorAdClientTypes.GeneralFlagsV4? = nil,
            hashAlgorithm: PcaConnectorAdClientTypes.HashAlgorithm? = nil,
            privateKeyAttributes: PcaConnectorAdClientTypes.PrivateKeyAttributesV4? = nil,
            privateKeyFlags: PcaConnectorAdClientTypes.PrivateKeyFlagsV4? = nil,
            subjectNameFlags: PcaConnectorAdClientTypes.SubjectNameFlagsV4? = nil,
            supersededTemplates: [Swift.String]? = nil
        )
        {
            self.certificateValidity = certificateValidity
            self.enrollmentFlags = enrollmentFlags
            self.extensions = extensions
            self.generalFlags = generalFlags
            self.hashAlgorithm = hashAlgorithm
            self.privateKeyAttributes = privateKeyAttributes
            self.privateKeyFlags = privateKeyFlags
            self.subjectNameFlags = subjectNameFlags
            self.supersededTemplates = supersededTemplates
        }
    }

}

extension ThrottlingException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
            self.properties.quotaCode = output.quotaCode
            self.properties.serviceCode = output.serviceCode
        } else {
            self.properties.message = nil
            self.properties.quotaCode = nil
            self.properties.serviceCode = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// The limit on the number of requests per second was exceeded.
public struct ThrottlingException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The code associated with the quota.
        public internal(set) var quotaCode: Swift.String? = nil
        /// Identifies the originating service.
        public internal(set) var serviceCode: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ThrottlingException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { true }
    public static var isThrottling: Swift.Bool { true }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        quotaCode: Swift.String? = nil,
        serviceCode: Swift.String? = nil
    )
    {
        self.properties.message = message
        self.properties.quotaCode = quotaCode
        self.properties.serviceCode = serviceCode
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let serviceCode: Swift.String?
    let quotaCode: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case quotaCode = "QuotaCode"
        case serviceCode = "ServiceCode"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let serviceCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceCode)
        serviceCode = serviceCodeDecoded
        let quotaCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .quotaCode)
        quotaCode = quotaCodeDecoded
    }
}

extension UntagResourceInput: ClientRuntime.QueryItemProvider {
    public var queryItems: [ClientRuntime.URLQueryItem] {
        get throws {
            var items = [ClientRuntime.URLQueryItem]()
            guard let tagKeys = tagKeys else {
                let message = "Creating a URL Query Item failed. tagKeys is required and must not be nil."
                throw ClientRuntime.ClientError.unknownError(message)
            }
            tagKeys.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                items.append(queryItem)
            }
            return items
        }
    }
}

extension UntagResourceInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let resourceArn = resourceArn else {
            return nil
        }
        return "/tags/\(resourceArn.urlPercentEncoding())"
    }
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) that was returned when you created the resource.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Specifies a list of tag keys that you want to remove from the specified resources.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
}

extension UntagResourceInputBody: Swift.Decodable {

    public init(from decoder: Swift.Decoder) throws {
    }
}

enum UntagResourceOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init() { }
}

extension UpdateTemplateGroupAccessControlEntryInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessRights = "AccessRights"
        case groupDisplayName = "GroupDisplayName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessRights = self.accessRights {
            try encodeContainer.encode(accessRights, forKey: .accessRights)
        }
        if let groupDisplayName = self.groupDisplayName {
            try encodeContainer.encode(groupDisplayName, forKey: .groupDisplayName)
        }
    }
}

extension UpdateTemplateGroupAccessControlEntryInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateArn = templateArn else {
            return nil
        }
        guard let groupSecurityIdentifier = groupSecurityIdentifier else {
            return nil
        }
        return "/templates/\(templateArn.urlPercentEncoding())/accessControlEntries/\(groupSecurityIdentifier.urlPercentEncoding())"
    }
}

public struct UpdateTemplateGroupAccessControlEntryInput: Swift.Equatable {
    /// Allow or deny permissions for an Active Directory group to enroll or autoenroll certificates for a template.
    public var accessRights: PcaConnectorAdClientTypes.AccessRights?
    /// Name of the Active Directory group. This name does not need to match the group name in Active Directory.
    public var groupDisplayName: Swift.String?
    /// Security identifier (SID) of the group object from Active Directory. The SID starts with "S-".
    /// This member is required.
    public var groupSecurityIdentifier: Swift.String?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
    /// This member is required.
    public var templateArn: Swift.String?

    public init(
        accessRights: PcaConnectorAdClientTypes.AccessRights? = nil,
        groupDisplayName: Swift.String? = nil,
        groupSecurityIdentifier: Swift.String? = nil,
        templateArn: Swift.String? = nil
    )
    {
        self.accessRights = accessRights
        self.groupDisplayName = groupDisplayName
        self.groupSecurityIdentifier = groupSecurityIdentifier
        self.templateArn = templateArn
    }
}

struct UpdateTemplateGroupAccessControlEntryInputBody: Swift.Equatable {
    let groupDisplayName: Swift.String?
    let accessRights: PcaConnectorAdClientTypes.AccessRights?
}

extension UpdateTemplateGroupAccessControlEntryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessRights = "AccessRights"
        case groupDisplayName = "GroupDisplayName"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupDisplayNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupDisplayName)
        groupDisplayName = groupDisplayNameDecoded
        let accessRightsDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.AccessRights.self, forKey: .accessRights)
        accessRights = accessRightsDecoded
    }
}

enum UpdateTemplateGroupAccessControlEntryOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateTemplateGroupAccessControlEntryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UpdateTemplateGroupAccessControlEntryOutputResponse: Swift.Equatable {

    public init() { }
}

extension UpdateTemplateInput: Swift.Encodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case definition = "Definition"
        case reenrollAllCertificateHolders = "ReenrollAllCertificateHolders"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let definition = self.definition {
            try encodeContainer.encode(definition, forKey: .definition)
        }
        if let reenrollAllCertificateHolders = self.reenrollAllCertificateHolders {
            try encodeContainer.encode(reenrollAllCertificateHolders, forKey: .reenrollAllCertificateHolders)
        }
    }
}

extension UpdateTemplateInput: ClientRuntime.URLPathProvider {
    public var urlPath: Swift.String? {
        guard let templateArn = templateArn else {
            return nil
        }
        return "/templates/\(templateArn.urlPercentEncoding())"
    }
}

public struct UpdateTemplateInput: Swift.Equatable {
    /// Template configuration to define the information included in certificates. Define certificate validity and renewal periods, certificate request handling and enrollment options, key usage extensions, application policies, and cryptography settings.
    public var definition: PcaConnectorAdClientTypes.TemplateDefinition?
    /// This setting allows the major version of a template to be increased automatically. All members of Active Directory groups that are allowed to enroll with a template will receive a new certificate issued using that template.
    public var reenrollAllCertificateHolders: Swift.Bool?
    /// The Amazon Resource Name (ARN) that was returned when you called [CreateTemplate](https://docs.aws.amazon.com/pca-connector-ad/latest/APIReference/API_CreateTemplate.html).
    /// This member is required.
    public var templateArn: Swift.String?

    public init(
        definition: PcaConnectorAdClientTypes.TemplateDefinition? = nil,
        reenrollAllCertificateHolders: Swift.Bool? = nil,
        templateArn: Swift.String? = nil
    )
    {
        self.definition = definition
        self.reenrollAllCertificateHolders = reenrollAllCertificateHolders
        self.templateArn = templateArn
    }
}

struct UpdateTemplateInputBody: Swift.Equatable {
    let definition: PcaConnectorAdClientTypes.TemplateDefinition?
    let reenrollAllCertificateHolders: Swift.Bool?
}

extension UpdateTemplateInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case definition = "Definition"
        case reenrollAllCertificateHolders = "ReenrollAllCertificateHolders"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let definitionDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.TemplateDefinition.self, forKey: .definition)
        definition = definitionDecoded
        let reenrollAllCertificateHoldersDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .reenrollAllCertificateHolders)
        reenrollAllCertificateHolders = reenrollAllCertificateHoldersDecoded
    }
}

enum UpdateTemplateOutputError: ClientRuntime.HttpResponseErrorBinding {
    static func makeError(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws -> Swift.Error {
        let restJSONError = try await AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.requestId
        switch restJSONError.errorType {
            case "AccessDeniedException": return try await AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ConflictException": return try await ConflictException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "InternalServerException": return try await InternalServerException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ResourceNotFoundException": return try await ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ThrottlingException": return try await ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            case "ValidationException": return try await ValidationException(httpResponse: httpResponse, decoder: decoder, message: restJSONError.errorMessage, requestID: requestID)
            default: return try await AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(httpResponse: httpResponse, message: restJSONError.errorMessage, requestID: requestID, typeName: restJSONError.errorType)
        }
    }
}

extension UpdateTemplateOutputResponse: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) async throws {
    }
}

public struct UpdateTemplateOutputResponse: Swift.Equatable {

    public init() { }
}

extension ValidationException {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) async throws {
        if let data = try await httpResponse.body.readData(),
            let responseDecoder = decoder {
            let output: ValidationExceptionBody = try responseDecoder.decode(responseBody: data)
            self.properties.message = output.message
            self.properties.reason = output.reason
        } else {
            self.properties.message = nil
            self.properties.reason = nil
        }
        self.httpResponse = httpResponse
        self.requestID = requestID
        self.message = message
    }
}

/// An input validation error occurred. For example, invalid characters in a template name, or if a pagination token is invalid.
public struct ValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// This member is required.
        public internal(set) var message: Swift.String? = nil
        /// The reason for the validation error. This won't be return for every validation exception.
        public internal(set) var reason: PcaConnectorAdClientTypes.ValidationExceptionReason? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ValidationException" }
    public static var fault: ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = HttpResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil,
        reason: PcaConnectorAdClientTypes.ValidationExceptionReason? = nil
    )
    {
        self.properties.message = message
        self.properties.reason = reason
    }
}

struct ValidationExceptionBody: Swift.Equatable {
    let message: Swift.String?
    let reason: PcaConnectorAdClientTypes.ValidationExceptionReason?
}

extension ValidationExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case reason = "Reason"
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ValidationExceptionReason.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension PcaConnectorAdClientTypes {
    public enum ValidationExceptionReason: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case fieldValidationFailed
        case invalidPermission
        case invalidState
        case mismatchedConnector
        case mismatchedVpc
        case noClientToken
        case other
        case unknownOperation
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidationExceptionReason] {
            return [
                .fieldValidationFailed,
                .invalidPermission,
                .invalidState,
                .mismatchedConnector,
                .mismatchedVpc,
                .noClientToken,
                .other,
                .unknownOperation,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .fieldValidationFailed: return "FIELD_VALIDATION_FAILED"
            case .invalidPermission: return "INVALID_PERMISSION"
            case .invalidState: return "INVALID_STATE"
            case .mismatchedConnector: return "MISMATCHED_CONNECTOR"
            case .mismatchedVpc: return "MISMATCHED_VPC"
            case .noClientToken: return "NO_CLIENT_TOKEN"
            case .other: return "OTHER"
            case .unknownOperation: return "UNKNOWN_OPERATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ValidationExceptionReason(rawValue: rawValue) ?? ValidationExceptionReason.sdkUnknown(rawValue)
        }
    }
}

extension PcaConnectorAdClientTypes.ValidityPeriod: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case period = "Period"
        case periodType = "PeriodType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let period = self.period {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let periodType = self.periodType {
            try encodeContainer.encode(periodType.rawValue, forKey: .periodType)
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let periodTypeDecoded = try containerValues.decodeIfPresent(PcaConnectorAdClientTypes.ValidityPeriodType.self, forKey: .periodType)
        periodType = periodTypeDecoded
        let periodDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .period)
        period = periodDecoded
    }
}

extension PcaConnectorAdClientTypes {
    /// Information describing the end of the validity period of the certificate. This parameter sets the “Not After” date for the certificate. Certificate validity is the period of time during which a certificate is valid. Validity can be expressed as an explicit date and time when the certificate expires, or as a span of time after issuance, stated in hours, days, months, or years. For more information, see Validity in RFC 5280. This value is unaffected when ValidityNotBefore is also specified. For example, if Validity is set to 20 days in the future, the certificate will expire 20 days from issuance time regardless of the ValidityNotBefore value.
    public struct ValidityPeriod: Swift.Equatable {
        /// The numeric value for the validity period.
        /// This member is required.
        public var period: Swift.Int?
        /// The unit of time. You can select hours, days, weeks, months, and years.
        /// This member is required.
        public var periodType: PcaConnectorAdClientTypes.ValidityPeriodType?

        public init(
            period: Swift.Int? = nil,
            periodType: PcaConnectorAdClientTypes.ValidityPeriodType? = nil
        )
        {
            self.period = period
            self.periodType = periodType
        }
    }

}

extension PcaConnectorAdClientTypes {
    public enum ValidityPeriodType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case days
        case hours
        case months
        case weeks
        case years
        case sdkUnknown(Swift.String)

        public static var allCases: [ValidityPeriodType] {
            return [
                .days,
                .hours,
                .months,
                .weeks,
                .years,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .days: return "DAYS"
            case .hours: return "HOURS"
            case .months: return "MONTHS"
            case .weeks: return "WEEKS"
            case .years: return "YEARS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ValidityPeriodType(rawValue: rawValue) ?? ValidityPeriodType.sdkUnknown(rawValue)
        }
    }
}

extension PcaConnectorAdClientTypes.VpcInformation: Swift.Codable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityGroupIds = "SecurityGroupIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for securitygroupid0 in securityGroupIds {
                try securityGroupIdsContainer.encode(securitygroupid0)
            }
        }
    }

    public init(from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
    }
}

extension PcaConnectorAdClientTypes {
    /// Information about your VPC and security groups used with the connector.
    public struct VpcInformation: Swift.Equatable {
        /// The security groups used with the connector. You can use a maximum of 4 security groups with a connector.
        /// This member is required.
        public var securityGroupIds: [Swift.String]?

        public init(
            securityGroupIds: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
        }
    }

}
