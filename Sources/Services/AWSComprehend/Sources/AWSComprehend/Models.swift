//
// Copyright Amazon.com Inc. or its affiliates.
// All Rights Reserved.
//
// SPDX-License-Identifier: Apache-2.0
//

// Code generated by smithy-swift-codegen. DO NOT EDIT!

@_spi(SmithyReadWrite) import ClientRuntime
import Foundation
import class SmithyHTTPAPI.HTTPResponse
@_spi(SmithyReadWrite) import class SmithyJSON.Reader
@_spi(SmithyReadWrite) import class SmithyJSON.Writer
import enum ClientRuntime.ErrorFault
import enum SmithyReadWrite.ReaderError
@_spi(SmithyReadWrite) import enum SmithyReadWrite.ReadingClosures
@_spi(SmithyReadWrite) import enum SmithyReadWrite.WritingClosures
@_spi(SmithyTimestamps) import enum SmithyTimestamps.TimestampFormat
import protocol AWSClientRuntime.AWSServiceError
import protocol ClientRuntime.HTTPError
import protocol ClientRuntime.ModeledError
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyReader
@_spi(SmithyReadWrite) import protocol SmithyReadWrite.SmithyWriter
@_spi(SmithyReadWrite) import struct AWSClientRuntime.AWSJSONError
@_spi(UnknownAWSHTTPServiceError) import struct AWSClientRuntime.UnknownAWSHTTPServiceError
@_spi(SmithyReadWrite) import struct SmithyReadWrite.ReadingClosureBox
@_spi(SmithyReadWrite) import struct SmithyReadWrite.WritingClosureBox

extension ComprehendClientTypes {

    public enum AugmentedManifestsDocumentTypeFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case plainTextDocument
        case semiStructuredDocument
        case sdkUnknown(Swift.String)

        public static var allCases: [AugmentedManifestsDocumentTypeFormat] {
            return [
                .plainTextDocument,
                .semiStructuredDocument
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .plainTextDocument: return "PLAIN_TEXT_DOCUMENT"
            case .semiStructuredDocument: return "SEMI_STRUCTURED_DOCUMENT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    public enum Split: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case test
        case train
        case sdkUnknown(Swift.String)

        public static var allCases: [Split] {
            return [
                .test,
                .train
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .test: return "TEST"
            case .train: return "TRAIN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// An augmented manifest file that provides training data for your custom model. An augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth.
    public struct AugmentedManifestsListItem: Swift.Sendable {
        /// The S3 prefix to the annotation files that are referred in the augmented manifest file.
        public var annotationDataS3Uri: Swift.String?
        /// The JSON attribute that contains the annotations for your training documents. The number of attribute names that you specify depends on whether your augmented manifest file is the output of a single labeling job or a chained labeling job. If your file is the output of a single labeling job, specify the LabelAttributeName key that was used when the job was created in Ground Truth. If your file is the output of a chained labeling job, specify the LabelAttributeName key for one or more jobs in the chain. Each LabelAttributeName key provides the annotations from an individual job.
        /// This member is required.
        public var attributeNames: [Swift.String]?
        /// The type of augmented manifest. PlainTextDocument or SemiStructuredDocument. If you don't specify, the default is PlainTextDocument.
        ///
        /// * PLAIN_TEXT_DOCUMENT A document type that represents any unicode text that is encoded in UTF-8.
        ///
        /// * SEMI_STRUCTURED_DOCUMENT A document type with positional and structural context, like a PDF. For training with Amazon Comprehend, only PDFs are supported. For inference, Amazon Comprehend support PDFs, DOCX and TXT.
        public var documentType: ComprehendClientTypes.AugmentedManifestsDocumentTypeFormat?
        /// The Amazon S3 location of the augmented manifest file.
        /// This member is required.
        public var s3Uri: Swift.String?
        /// The S3 prefix to the source files (PDFs) that are referred to in the augmented manifest file.
        public var sourceDocumentsS3Uri: Swift.String?
        /// The purpose of the data you've provided in the augmented manifest. You can either train or test this data. If you don't specify, the default is train. TRAIN - all of the documents in the manifest will be used for training. If no test documents are provided, Amazon Comprehend will automatically reserve a portion of the training documents for testing. TEST - all of the documents in the manifest will be used for testing.
        public var split: ComprehendClientTypes.Split?

        public init(
            annotationDataS3Uri: Swift.String? = nil,
            attributeNames: [Swift.String]? = nil,
            documentType: ComprehendClientTypes.AugmentedManifestsDocumentTypeFormat? = nil,
            s3Uri: Swift.String? = nil,
            sourceDocumentsS3Uri: Swift.String? = nil,
            split: ComprehendClientTypes.Split? = nil
        )
        {
            self.annotationDataS3Uri = annotationDataS3Uri
            self.attributeNames = attributeNames
            self.documentType = documentType
            self.s3Uri = s3Uri
            self.sourceDocumentsS3Uri = sourceDocumentsS3Uri
            self.split = split
        }
    }
}

/// The number of documents in the request exceeds the limit of 25. Try your request again with fewer documents.
public struct BatchSizeLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "BatchSizeLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// An internal server error occurred. Retry your request.
public struct InternalServerException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InternalServerException" }
    public static var fault: ClientRuntime.ErrorFault { .server }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ComprehendClientTypes {

    public enum InvalidRequestDetailReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case documentSizeExceeded
        case pageLimitExceeded
        case textractAccessDenied
        case unsupportedDocType
        case sdkUnknown(Swift.String)

        public static var allCases: [InvalidRequestDetailReason] {
            return [
                .documentSizeExceeded,
                .pageLimitExceeded,
                .textractAccessDenied,
                .unsupportedDocType
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .documentSizeExceeded: return "DOCUMENT_SIZE_EXCEEDED"
            case .pageLimitExceeded: return "PAGE_LIMIT_EXCEEDED"
            case .textractAccessDenied: return "TEXTRACT_ACCESS_DENIED"
            case .unsupportedDocType: return "UNSUPPORTED_DOC_TYPE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Provides additional detail about why the request failed.
    public struct InvalidRequestDetail: Swift.Sendable {
        /// Reason codes include the following values:
        ///
        /// * DOCUMENT_SIZE_EXCEEDED - Document size is too large. Check the size of your file and resubmit the request.
        ///
        /// * UNSUPPORTED_DOC_TYPE - Document type is not supported. Check the file type and resubmit the request.
        ///
        /// * PAGE_LIMIT_EXCEEDED - Too many pages in the document. Check the number of pages in your file and resubmit the request.
        ///
        /// * TEXTRACT_ACCESS_DENIED - Access denied to Amazon Textract. Verify that your account has permission to use Amazon Textract API operations and resubmit the request.
        ///
        /// * NOT_TEXTRACT_JSON - Document is not Amazon Textract JSON format. Verify the format and resubmit the request.
        ///
        /// * MISMATCHED_TOTAL_PAGE_COUNT - Check the number of pages in your file and resubmit the request.
        ///
        /// * INVALID_DOCUMENT - Invalid document. Check the file and resubmit the request.
        public var reason: ComprehendClientTypes.InvalidRequestDetailReason?

        public init(
            reason: ComprehendClientTypes.InvalidRequestDetailReason? = nil
        )
        {
            self.reason = reason
        }
    }
}

extension ComprehendClientTypes {

    public enum InvalidRequestReason: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case invalidDocument
        case sdkUnknown(Swift.String)

        public static var allCases: [InvalidRequestReason] {
            return [
                .invalidDocument
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .invalidDocument: return "INVALID_DOCUMENT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

/// The request is invalid.
public struct InvalidRequestException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        /// Provides additional detail about why the request failed.
        public internal(set) var detail: ComprehendClientTypes.InvalidRequestDetail? = nil
        public internal(set) var message: Swift.String? = nil
        public internal(set) var reason: ComprehendClientTypes.InvalidRequestReason? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidRequestException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        detail: ComprehendClientTypes.InvalidRequestDetail? = nil,
        message: Swift.String? = nil,
        reason: ComprehendClientTypes.InvalidRequestReason? = nil
    )
    {
        self.properties.detail = detail
        self.properties.message = message
        self.properties.reason = reason
    }
}

/// The size of the input text exceeds the limit. Use a smaller document.
public struct TextSizeLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TextSizeLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct BatchDetectDominantLanguageInput: Swift.Sendable {
    /// A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. Each document should contain at least 20 characters. The maximum size of each document is 5 KB.
    /// This member is required.
    public var textList: [Swift.String]?

    public init(
        textList: [Swift.String]? = nil
    )
    {
        self.textList = textList
    }
}

extension BatchDetectDominantLanguageInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchDetectDominantLanguageInput(textList: \"CONTENT_REDACTED\")"}
}

extension ComprehendClientTypes {

    /// Describes an error that occurred while processing a document in a batch. The operation returns on BatchItemError object for each document that contained an error.
    public struct BatchItemError: Swift.Sendable {
        /// The numeric error code of the error.
        public var errorCode: Swift.String?
        /// A text description of the error.
        public var errorMessage: Swift.String?
        /// The zero-based index of the document in the input list.
        public var index: Swift.Int?

        public init(
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            index: Swift.Int? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.index = index
        }
    }
}

extension ComprehendClientTypes {

    /// Returns the code for the dominant language in the input text and the level of confidence that Amazon Comprehend has in the accuracy of the detection.
    public struct DominantLanguage: Swift.Sendable {
        /// The RFC 5646 language code for the dominant language. For more information about RFC 5646, see [Tags for Identifying Languages](https://tools.ietf.org/html/rfc5646) on the IETF Tools web site.
        public var languageCode: Swift.String?
        /// The level of confidence that Amazon Comprehend has in the accuracy of the detection.
        public var score: Swift.Float?

        public init(
            languageCode: Swift.String? = nil,
            score: Swift.Float? = nil
        )
        {
            self.languageCode = languageCode
            self.score = score
        }
    }
}

extension ComprehendClientTypes {

    /// The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.
    public struct BatchDetectDominantLanguageItemResult: Swift.Sendable {
        /// The zero-based index of the document in the input list.
        public var index: Swift.Int?
        /// One or more [DominantLanguage] objects describing the dominant languages in the document.
        public var languages: [ComprehendClientTypes.DominantLanguage]?

        public init(
            index: Swift.Int? = nil,
            languages: [ComprehendClientTypes.DominantLanguage]? = nil
        )
        {
            self.index = index
            self.languages = languages
        }
    }
}

public struct BatchDetectDominantLanguageOutput: Swift.Sendable {
    /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
    /// This member is required.
    public var errorList: [ComprehendClientTypes.BatchItemError]?
    /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
    /// This member is required.
    public var resultList: [ComprehendClientTypes.BatchDetectDominantLanguageItemResult]?

    public init(
        errorList: [ComprehendClientTypes.BatchItemError]? = nil,
        resultList: [ComprehendClientTypes.BatchDetectDominantLanguageItemResult]? = nil
    )
    {
        self.errorList = errorList
        self.resultList = resultList
    }
}

extension BatchDetectDominantLanguageOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

/// Amazon Comprehend can't process the language of the input text. For a list of supported languages, [Supported languages](https://docs.aws.amazon.com/comprehend/latest/dg/supported-languages.html) in the Comprehend Developer Guide.
public struct UnsupportedLanguageException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "UnsupportedLanguageException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ComprehendClientTypes {

    public enum LanguageCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case ar
        case de
        case en
        case es
        case fr
        case hi
        case it
        case ja
        case ko
        case pt
        case zh
        case zhTw
        case sdkUnknown(Swift.String)

        public static var allCases: [LanguageCode] {
            return [
                .ar,
                .de,
                .en,
                .es,
                .fr,
                .hi,
                .it,
                .ja,
                .ko,
                .pt,
                .zh,
                .zhTw
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .ar: return "ar"
            case .de: return "de"
            case .en: return "en"
            case .es: return "es"
            case .fr: return "fr"
            case .hi: return "hi"
            case .it: return "it"
            case .ja: return "ja"
            case .ko: return "ko"
            case .pt: return "pt"
            case .zh: return "zh"
            case .zhTw: return "zh-TW"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct BatchDetectEntitiesInput: Swift.Sendable {
    /// The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. The maximum size of each document is 5 KB.
    /// This member is required.
    public var textList: [Swift.String]?

    public init(
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        textList: [Swift.String]? = nil
    )
    {
        self.languageCode = languageCode
        self.textList = textList
    }
}

extension BatchDetectEntitiesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchDetectEntitiesInput(languageCode: \(Swift.String(describing: languageCode)), textList: \"CONTENT_REDACTED\")"}
}

extension ComprehendClientTypes {

    /// Nested block contained within a block.
    public struct ChildBlock: Swift.Sendable {
        /// Offset of the start of the child block within its parent block.
        public var beginOffset: Swift.Int?
        /// Unique identifier for the child block.
        public var childBlockId: Swift.String?
        /// Offset of the end of the child block within its parent block.
        public var endOffset: Swift.Int?

        public init(
            beginOffset: Swift.Int? = nil,
            childBlockId: Swift.String? = nil,
            endOffset: Swift.Int? = nil
        )
        {
            self.beginOffset = beginOffset
            self.childBlockId = childBlockId
            self.endOffset = endOffset
        }
    }
}

extension ComprehendClientTypes {

    /// A reference to a block.
    public struct BlockReference: Swift.Sendable {
        /// Offset of the start of the block within its parent block.
        public var beginOffset: Swift.Int?
        /// Unique identifier for the block.
        public var blockId: Swift.String?
        /// List of child blocks within this block.
        public var childBlocks: [ComprehendClientTypes.ChildBlock]?
        /// Offset of the end of the block within its parent block.
        public var endOffset: Swift.Int?

        public init(
            beginOffset: Swift.Int? = nil,
            blockId: Swift.String? = nil,
            childBlocks: [ComprehendClientTypes.ChildBlock]? = nil,
            endOffset: Swift.Int? = nil
        )
        {
            self.beginOffset = beginOffset
            self.blockId = blockId
            self.childBlocks = childBlocks
            self.endOffset = endOffset
        }
    }
}

extension ComprehendClientTypes {

    public enum EntityType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case commercialItem
        case date
        case event
        case location
        case organization
        case other
        case person
        case quantity
        case title
        case sdkUnknown(Swift.String)

        public static var allCases: [EntityType] {
            return [
                .commercialItem,
                .date,
                .event,
                .location,
                .organization,
                .other,
                .person,
                .quantity,
                .title
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .commercialItem: return "COMMERCIAL_ITEM"
            case .date: return "DATE"
            case .event: return "EVENT"
            case .location: return "LOCATION"
            case .organization: return "ORGANIZATION"
            case .other: return "OTHER"
            case .person: return "PERSON"
            case .quantity: return "QUANTITY"
            case .title: return "TITLE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Provides information about an entity.
    public struct Entity: Swift.Sendable {
        /// The zero-based offset from the beginning of the source text to the first character in the entity. This field is empty for non-text input.
        public var beginOffset: Swift.Int?
        /// A reference to each block for this entity. This field is empty for plain-text input.
        public var blockReferences: [ComprehendClientTypes.BlockReference]?
        /// The zero-based offset from the beginning of the source text to the last character in the entity. This field is empty for non-text input.
        public var endOffset: Swift.Int?
        /// The level of confidence that Amazon Comprehend has in the accuracy of the detection.
        public var score: Swift.Float?
        /// The text of the entity.
        public var text: Swift.String?
        /// The entity type. For entity detection using the built-in model, this field contains one of the standard entity types listed below. For custom entity detection, this field contains one of the entity types that you specified when you trained your custom model.
        public var type: ComprehendClientTypes.EntityType?

        public init(
            beginOffset: Swift.Int? = nil,
            blockReferences: [ComprehendClientTypes.BlockReference]? = nil,
            endOffset: Swift.Int? = nil,
            score: Swift.Float? = nil,
            text: Swift.String? = nil,
            type: ComprehendClientTypes.EntityType? = nil
        )
        {
            self.beginOffset = beginOffset
            self.blockReferences = blockReferences
            self.endOffset = endOffset
            self.score = score
            self.text = text
            self.type = type
        }
    }
}

extension ComprehendClientTypes {

    /// The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.
    public struct BatchDetectEntitiesItemResult: Swift.Sendable {
        /// One or more [Entity] objects, one for each entity detected in the document.
        public var entities: [ComprehendClientTypes.Entity]?
        /// The zero-based index of the document in the input list.
        public var index: Swift.Int?

        public init(
            entities: [ComprehendClientTypes.Entity]? = nil,
            index: Swift.Int? = nil
        )
        {
            self.entities = entities
            self.index = index
        }
    }
}

public struct BatchDetectEntitiesOutput: Swift.Sendable {
    /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
    /// This member is required.
    public var errorList: [ComprehendClientTypes.BatchItemError]?
    /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
    /// This member is required.
    public var resultList: [ComprehendClientTypes.BatchDetectEntitiesItemResult]?

    public init(
        errorList: [ComprehendClientTypes.BatchItemError]? = nil,
        resultList: [ComprehendClientTypes.BatchDetectEntitiesItemResult]? = nil
    )
    {
        self.errorList = errorList
        self.resultList = resultList
    }
}

extension BatchDetectEntitiesOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

public struct BatchDetectKeyPhrasesInput: Swift.Sendable {
    /// The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. The maximum size of each document is 5 KB.
    /// This member is required.
    public var textList: [Swift.String]?

    public init(
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        textList: [Swift.String]? = nil
    )
    {
        self.languageCode = languageCode
        self.textList = textList
    }
}

extension BatchDetectKeyPhrasesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchDetectKeyPhrasesInput(languageCode: \(Swift.String(describing: languageCode)), textList: \"CONTENT_REDACTED\")"}
}

extension ComprehendClientTypes {

    /// Describes a key noun phrase.
    public struct KeyPhrase: Swift.Sendable {
        /// The zero-based offset from the beginning of the source text to the first character in the key phrase.
        public var beginOffset: Swift.Int?
        /// The zero-based offset from the beginning of the source text to the last character in the key phrase.
        public var endOffset: Swift.Int?
        /// The level of confidence that Amazon Comprehend has in the accuracy of the detection.
        public var score: Swift.Float?
        /// The text of a key noun phrase.
        public var text: Swift.String?

        public init(
            beginOffset: Swift.Int? = nil,
            endOffset: Swift.Int? = nil,
            score: Swift.Float? = nil,
            text: Swift.String? = nil
        )
        {
            self.beginOffset = beginOffset
            self.endOffset = endOffset
            self.score = score
            self.text = text
        }
    }
}

extension ComprehendClientTypes {

    /// The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.
    public struct BatchDetectKeyPhrasesItemResult: Swift.Sendable {
        /// The zero-based index of the document in the input list.
        public var index: Swift.Int?
        /// One or more [KeyPhrase] objects, one for each key phrase detected in the document.
        public var keyPhrases: [ComprehendClientTypes.KeyPhrase]?

        public init(
            index: Swift.Int? = nil,
            keyPhrases: [ComprehendClientTypes.KeyPhrase]? = nil
        )
        {
            self.index = index
            self.keyPhrases = keyPhrases
        }
    }
}

public struct BatchDetectKeyPhrasesOutput: Swift.Sendable {
    /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
    /// This member is required.
    public var errorList: [ComprehendClientTypes.BatchItemError]?
    /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
    /// This member is required.
    public var resultList: [ComprehendClientTypes.BatchDetectKeyPhrasesItemResult]?

    public init(
        errorList: [ComprehendClientTypes.BatchItemError]? = nil,
        resultList: [ComprehendClientTypes.BatchDetectKeyPhrasesItemResult]? = nil
    )
    {
        self.errorList = errorList
        self.resultList = resultList
    }
}

extension BatchDetectKeyPhrasesOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

public struct BatchDetectSentimentInput: Swift.Sendable {
    /// The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. The maximum size of each document is 5 KB.
    /// This member is required.
    public var textList: [Swift.String]?

    public init(
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        textList: [Swift.String]? = nil
    )
    {
        self.languageCode = languageCode
        self.textList = textList
    }
}

extension BatchDetectSentimentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchDetectSentimentInput(languageCode: \(Swift.String(describing: languageCode)), textList: \"CONTENT_REDACTED\")"}
}

extension ComprehendClientTypes {

    public enum SentimentType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mixed
        case negative
        case neutral
        case positive
        case sdkUnknown(Swift.String)

        public static var allCases: [SentimentType] {
            return [
                .mixed,
                .negative,
                .neutral,
                .positive
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mixed: return "MIXED"
            case .negative: return "NEGATIVE"
            case .neutral: return "NEUTRAL"
            case .positive: return "POSITIVE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Describes the level of confidence that Amazon Comprehend has in the accuracy of its detection of sentiments.
    public struct SentimentScore: Swift.Sendable {
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the MIXED sentiment.
        public var mixed: Swift.Float?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the NEGATIVE sentiment.
        public var negative: Swift.Float?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the NEUTRAL sentiment.
        public var neutral: Swift.Float?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the POSITIVE sentiment.
        public var positive: Swift.Float?

        public init(
            mixed: Swift.Float? = nil,
            negative: Swift.Float? = nil,
            neutral: Swift.Float? = nil,
            positive: Swift.Float? = nil
        )
        {
            self.mixed = mixed
            self.negative = negative
            self.neutral = neutral
            self.positive = positive
        }
    }
}

extension ComprehendClientTypes {

    /// The result of calling the operation. The operation returns one object for each document that is successfully processed by the operation.
    public struct BatchDetectSentimentItemResult: Swift.Sendable {
        /// The zero-based index of the document in the input list.
        public var index: Swift.Int?
        /// The sentiment detected in the document.
        public var sentiment: ComprehendClientTypes.SentimentType?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its sentiment detection.
        public var sentimentScore: ComprehendClientTypes.SentimentScore?

        public init(
            index: Swift.Int? = nil,
            sentiment: ComprehendClientTypes.SentimentType? = nil,
            sentimentScore: ComprehendClientTypes.SentimentScore? = nil
        )
        {
            self.index = index
            self.sentiment = sentiment
            self.sentimentScore = sentimentScore
        }
    }
}

public struct BatchDetectSentimentOutput: Swift.Sendable {
    /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
    /// This member is required.
    public var errorList: [ComprehendClientTypes.BatchItemError]?
    /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
    /// This member is required.
    public var resultList: [ComprehendClientTypes.BatchDetectSentimentItemResult]?

    public init(
        errorList: [ComprehendClientTypes.BatchItemError]? = nil,
        resultList: [ComprehendClientTypes.BatchDetectSentimentItemResult]? = nil
    )
    {
        self.errorList = errorList
        self.resultList = resultList
    }
}

extension BatchDetectSentimentOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension ComprehendClientTypes {

    public enum SyntaxLanguageCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case de
        case en
        case es
        case fr
        case it
        case pt
        case sdkUnknown(Swift.String)

        public static var allCases: [SyntaxLanguageCode] {
            return [
                .de,
                .en,
                .es,
                .fr,
                .it,
                .pt
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .de: return "de"
            case .en: return "en"
            case .es: return "es"
            case .fr: return "fr"
            case .it: return "it"
            case .pt: return "pt"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

public struct BatchDetectSyntaxInput: Swift.Sendable {
    /// The language of the input documents. You can specify any of the following languages supported by Amazon Comprehend: German ("de"), English ("en"), Spanish ("es"), French ("fr"), Italian ("it"), or Portuguese ("pt"). All documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.SyntaxLanguageCode?
    /// A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. The maximum size for each document is 5 KB.
    /// This member is required.
    public var textList: [Swift.String]?

    public init(
        languageCode: ComprehendClientTypes.SyntaxLanguageCode? = nil,
        textList: [Swift.String]? = nil
    )
    {
        self.languageCode = languageCode
        self.textList = textList
    }
}

extension BatchDetectSyntaxInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchDetectSyntaxInput(languageCode: \(Swift.String(describing: languageCode)), textList: \"CONTENT_REDACTED\")"}
}

extension ComprehendClientTypes {

    public enum PartOfSpeechTagType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case adj
        case adp
        case adv
        case aux
        case cconj
        case conj
        case det
        case intj
        case noun
        case num
        case o
        case part
        case pron
        case propn
        case punct
        case sconj
        case sym
        case verb
        case sdkUnknown(Swift.String)

        public static var allCases: [PartOfSpeechTagType] {
            return [
                .adj,
                .adp,
                .adv,
                .aux,
                .cconj,
                .conj,
                .det,
                .intj,
                .noun,
                .num,
                .o,
                .part,
                .pron,
                .propn,
                .punct,
                .sconj,
                .sym,
                .verb
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .adj: return "ADJ"
            case .adp: return "ADP"
            case .adv: return "ADV"
            case .aux: return "AUX"
            case .cconj: return "CCONJ"
            case .conj: return "CONJ"
            case .det: return "DET"
            case .intj: return "INTJ"
            case .noun: return "NOUN"
            case .num: return "NUM"
            case .o: return "O"
            case .part: return "PART"
            case .pron: return "PRON"
            case .propn: return "PROPN"
            case .punct: return "PUNCT"
            case .sconj: return "SCONJ"
            case .sym: return "SYM"
            case .verb: return "VERB"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Identifies the part of speech represented by the token and gives the confidence that Amazon Comprehend has that the part of speech was correctly identified. For more information about the parts of speech that Amazon Comprehend can identify, see [Syntax](https://docs.aws.amazon.com/comprehend/latest/dg/how-syntax.html) in the Comprehend Developer Guide.
    public struct PartOfSpeechTag: Swift.Sendable {
        /// The confidence that Amazon Comprehend has that the part of speech was correctly identified.
        public var score: Swift.Float?
        /// Identifies the part of speech that the token represents.
        public var tag: ComprehendClientTypes.PartOfSpeechTagType?

        public init(
            score: Swift.Float? = nil,
            tag: ComprehendClientTypes.PartOfSpeechTagType? = nil
        )
        {
            self.score = score
            self.tag = tag
        }
    }
}

extension ComprehendClientTypes {

    /// Represents a work in the input text that was recognized and assigned a part of speech. There is one syntax token record for each word in the source text.
    public struct SyntaxToken: Swift.Sendable {
        /// The zero-based offset from the beginning of the source text to the first character in the word.
        public var beginOffset: Swift.Int?
        /// The zero-based offset from the beginning of the source text to the last character in the word.
        public var endOffset: Swift.Int?
        /// Provides the part of speech label and the confidence level that Amazon Comprehend has that the part of speech was correctly identified. For more information, see [Syntax](https://docs.aws.amazon.com/comprehend/latest/dg/how-syntax.html) in the Comprehend Developer Guide.
        public var partOfSpeech: ComprehendClientTypes.PartOfSpeechTag?
        /// The word that was recognized in the source text.
        public var text: Swift.String?
        /// A unique identifier for a token.
        public var tokenId: Swift.Int?

        public init(
            beginOffset: Swift.Int? = nil,
            endOffset: Swift.Int? = nil,
            partOfSpeech: ComprehendClientTypes.PartOfSpeechTag? = nil,
            text: Swift.String? = nil,
            tokenId: Swift.Int? = nil
        )
        {
            self.beginOffset = beginOffset
            self.endOffset = endOffset
            self.partOfSpeech = partOfSpeech
            self.text = text
            self.tokenId = tokenId
        }
    }
}

extension ComprehendClientTypes {

    /// The result of calling the operation. The operation returns one object that is successfully processed by the operation.
    public struct BatchDetectSyntaxItemResult: Swift.Sendable {
        /// The zero-based index of the document in the input list.
        public var index: Swift.Int?
        /// The syntax tokens for the words in the document, one token for each word.
        public var syntaxTokens: [ComprehendClientTypes.SyntaxToken]?

        public init(
            index: Swift.Int? = nil,
            syntaxTokens: [ComprehendClientTypes.SyntaxToken]? = nil
        )
        {
            self.index = index
            self.syntaxTokens = syntaxTokens
        }
    }
}

public struct BatchDetectSyntaxOutput: Swift.Sendable {
    /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
    /// This member is required.
    public var errorList: [ComprehendClientTypes.BatchItemError]?
    /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
    /// This member is required.
    public var resultList: [ComprehendClientTypes.BatchDetectSyntaxItemResult]?

    public init(
        errorList: [ComprehendClientTypes.BatchItemError]? = nil,
        resultList: [ComprehendClientTypes.BatchDetectSyntaxItemResult]? = nil
    )
    {
        self.errorList = errorList
        self.resultList = resultList
    }
}

extension BatchDetectSyntaxOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

public struct BatchDetectTargetedSentimentInput: Swift.Sendable {
    /// The language of the input documents. Currently, English is the only supported language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A list containing the UTF-8 encoded text of the input documents. The list can contain a maximum of 25 documents. The maximum size of each document is 5 KB.
    /// This member is required.
    public var textList: [Swift.String]?

    public init(
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        textList: [Swift.String]? = nil
    )
    {
        self.languageCode = languageCode
        self.textList = textList
    }
}

extension BatchDetectTargetedSentimentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchDetectTargetedSentimentInput(languageCode: \(Swift.String(describing: languageCode)), textList: \"CONTENT_REDACTED\")"}
}

extension ComprehendClientTypes {

    /// Contains the sentiment and sentiment score for one mention of an entity. For more information about targeted sentiment, see [Targeted sentiment](https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html) in the Amazon Comprehend Developer Guide.
    public struct MentionSentiment: Swift.Sendable {
        /// The sentiment of the mention.
        public var sentiment: ComprehendClientTypes.SentimentType?
        /// Describes the level of confidence that Amazon Comprehend has in the accuracy of its detection of sentiments.
        public var sentimentScore: ComprehendClientTypes.SentimentScore?

        public init(
            sentiment: ComprehendClientTypes.SentimentType? = nil,
            sentimentScore: ComprehendClientTypes.SentimentScore? = nil
        )
        {
            self.sentiment = sentiment
            self.sentimentScore = sentimentScore
        }
    }
}

extension ComprehendClientTypes {

    public enum TargetedSentimentEntityType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case attribute
        case book
        case brand
        case commercialItem
        case date
        case event
        case facility
        case game
        case location
        case movie
        case music
        case organization
        case other
        case person
        case personalTitle
        case quantity
        case software
        case sdkUnknown(Swift.String)

        public static var allCases: [TargetedSentimentEntityType] {
            return [
                .attribute,
                .book,
                .brand,
                .commercialItem,
                .date,
                .event,
                .facility,
                .game,
                .location,
                .movie,
                .music,
                .organization,
                .other,
                .person,
                .personalTitle,
                .quantity,
                .software
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .attribute: return "ATTRIBUTE"
            case .book: return "BOOK"
            case .brand: return "BRAND"
            case .commercialItem: return "COMMERCIAL_ITEM"
            case .date: return "DATE"
            case .event: return "EVENT"
            case .facility: return "FACILITY"
            case .game: return "GAME"
            case .location: return "LOCATION"
            case .movie: return "MOVIE"
            case .music: return "MUSIC"
            case .organization: return "ORGANIZATION"
            case .other: return "OTHER"
            case .person: return "PERSON"
            case .personalTitle: return "PERSONAL_TITLE"
            case .quantity: return "QUANTITY"
            case .software: return "SOFTWARE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Information about one mention of an entity. The mention information includes the location of the mention in the text and the sentiment of the mention. For more information about targeted sentiment, see [Targeted sentiment](https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html) in the Amazon Comprehend Developer Guide.
    public struct TargetedSentimentMention: Swift.Sendable {
        /// The offset into the document text where the mention begins.
        public var beginOffset: Swift.Int?
        /// The offset into the document text where the mention ends.
        public var endOffset: Swift.Int?
        /// The confidence that all the entities mentioned in the group relate to the same entity.
        public var groupScore: Swift.Float?
        /// Contains the sentiment and sentiment score for the mention.
        public var mentionSentiment: ComprehendClientTypes.MentionSentiment?
        /// Model confidence that the entity is relevant. Value range is zero to one, where one is highest confidence.
        public var score: Swift.Float?
        /// The text in the document that identifies the entity.
        public var text: Swift.String?
        /// The type of the entity. Amazon Comprehend supports a variety of [entity types](https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html#how-targeted-sentiment-entities).
        public var type: ComprehendClientTypes.TargetedSentimentEntityType?

        public init(
            beginOffset: Swift.Int? = nil,
            endOffset: Swift.Int? = nil,
            groupScore: Swift.Float? = nil,
            mentionSentiment: ComprehendClientTypes.MentionSentiment? = nil,
            score: Swift.Float? = nil,
            text: Swift.String? = nil,
            type: ComprehendClientTypes.TargetedSentimentEntityType? = nil
        )
        {
            self.beginOffset = beginOffset
            self.endOffset = endOffset
            self.groupScore = groupScore
            self.mentionSentiment = mentionSentiment
            self.score = score
            self.text = text
            self.type = type
        }
    }
}

extension ComprehendClientTypes {

    /// Information about one of the entities found by targeted sentiment analysis. For more information about targeted sentiment, see [Targeted sentiment](https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html) in the Amazon Comprehend Developer Guide.
    public struct TargetedSentimentEntity: Swift.Sendable {
        /// One or more index into the Mentions array that provides the best name for the entity group.
        public var descriptiveMentionIndex: [Swift.Int]?
        /// An array of mentions of the entity in the document. The array represents a co-reference group. See [ Co-reference group](https://docs.aws.amazon.com/comprehend/latest/dg/how-targeted-sentiment.html#how-targeted-sentiment-values) for an example.
        public var mentions: [ComprehendClientTypes.TargetedSentimentMention]?

        public init(
            descriptiveMentionIndex: [Swift.Int]? = nil,
            mentions: [ComprehendClientTypes.TargetedSentimentMention]? = nil
        )
        {
            self.descriptiveMentionIndex = descriptiveMentionIndex
            self.mentions = mentions
        }
    }
}

extension ComprehendClientTypes {

    /// Analysis results for one of the documents in the batch.
    public struct BatchDetectTargetedSentimentItemResult: Swift.Sendable {
        /// An array of targeted sentiment entities.
        public var entities: [ComprehendClientTypes.TargetedSentimentEntity]?
        /// The zero-based index of this result in the input list.
        public var index: Swift.Int?

        public init(
            entities: [ComprehendClientTypes.TargetedSentimentEntity]? = nil,
            index: Swift.Int? = nil
        )
        {
            self.entities = entities
            self.index = index
        }
    }
}

public struct BatchDetectTargetedSentimentOutput: Swift.Sendable {
    /// List of errors that the operation can return.
    /// This member is required.
    public var errorList: [ComprehendClientTypes.BatchItemError]?
    /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
    /// This member is required.
    public var resultList: [ComprehendClientTypes.BatchDetectTargetedSentimentItemResult]?

    public init(
        errorList: [ComprehendClientTypes.BatchItemError]? = nil,
        resultList: [ComprehendClientTypes.BatchDetectTargetedSentimentItemResult]? = nil
    )
    {
        self.errorList = errorList
        self.resultList = resultList
    }
}

extension BatchDetectTargetedSentimentOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension ComprehendClientTypes {

    public enum BlockType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case line
        case word
        case sdkUnknown(Swift.String)

        public static var allCases: [BlockType] {
            return [
                .line,
                .word
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .line: return "LINE"
            case .word: return "WORD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// The bounding box around the detected page or around an element on a document page. The left (x-coordinate) and top (y-coordinate) are coordinates that represent the top and left sides of the bounding box. Note that the upper-left corner of the image is the origin (0,0). For additional information, see [BoundingBox](https://docs.aws.amazon.com/textract/latest/dg/API_BoundingBox.html) in the Amazon Textract API reference.
    public struct BoundingBox: Swift.Sendable {
        /// The height of the bounding box as a ratio of the overall document page height.
        public var height: Swift.Float?
        /// The left coordinate of the bounding box as a ratio of overall document page width.
        public var `left`: Swift.Float?
        /// The top coordinate of the bounding box as a ratio of overall document page height.
        public var top: Swift.Float?
        /// The width of the bounding box as a ratio of the overall document page width.
        public var width: Swift.Float?

        public init(
            height: Swift.Float? = nil,
            `left`: Swift.Float? = nil,
            top: Swift.Float? = nil,
            width: Swift.Float? = nil
        )
        {
            self.height = height
            self.`left` = `left`
            self.top = top
            self.width = width
        }
    }
}

extension ComprehendClientTypes {

    /// The X and Y coordinates of a point on a document page. For additional information, see [Point](https://docs.aws.amazon.com/textract/latest/dg/API_Point.html) in the Amazon Textract API reference.
    public struct Point: Swift.Sendable {
        /// The value of the X coordinate for a point on a polygon
        public var x: Swift.Float?
        /// The value of the Y coordinate for a point on a polygon
        public var y: Swift.Float?

        public init(
            x: Swift.Float? = nil,
            y: Swift.Float? = nil
        )
        {
            self.x = x
            self.y = y
        }
    }
}

extension ComprehendClientTypes {

    /// Information about the location of items on a document page. For additional information, see [Geometry](https://docs.aws.amazon.com/textract/latest/dg/API_Geometry.html) in the Amazon Textract API reference.
    public struct Geometry: Swift.Sendable {
        /// An axis-aligned coarse representation of the location of the recognized item on the document page.
        public var boundingBox: ComprehendClientTypes.BoundingBox?
        /// Within the bounding box, a fine-grained polygon around the recognized item.
        public var polygon: [ComprehendClientTypes.Point]?

        public init(
            boundingBox: ComprehendClientTypes.BoundingBox? = nil,
            polygon: [ComprehendClientTypes.Point]? = nil
        )
        {
            self.boundingBox = boundingBox
            self.polygon = polygon
        }
    }
}

extension ComprehendClientTypes {

    public enum RelationshipType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case child
        case sdkUnknown(Swift.String)

        public static var allCases: [RelationshipType] {
            return [
                .child
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .child: return "CHILD"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// List of child blocks for the current block.
    public struct RelationshipsListItem: Swift.Sendable {
        /// Identifers of the child blocks.
        public var ids: [Swift.String]?
        /// Only supported relationship is a child relationship.
        public var type: ComprehendClientTypes.RelationshipType?

        public init(
            ids: [Swift.String]? = nil,
            type: ComprehendClientTypes.RelationshipType? = nil
        )
        {
            self.ids = ids
            self.type = type
        }
    }
}

extension ComprehendClientTypes {

    /// Information about each word or line of text in the input document. For additional information, see [Block](https://docs.aws.amazon.com/textract/latest/dg/API_Block.html) in the Amazon Textract API reference.
    public struct Block: Swift.Sendable {
        /// The block represents a line of text or one word of text.
        ///
        /// * WORD - A word that's detected on a document page. A word is one or more ISO basic Latin script characters that aren't separated by spaces.
        ///
        /// * LINE - A string of tab-delimited, contiguous words that are detected on a document page
        public var blockType: ComprehendClientTypes.BlockType?
        /// Co-ordinates of the rectangle or polygon that contains the text.
        public var geometry: ComprehendClientTypes.Geometry?
        /// Unique identifier for the block.
        public var id: Swift.String?
        /// Page number where the block appears.
        public var page: Swift.Int?
        /// A list of child blocks of the current block. For example, a LINE object has child blocks for each WORD block that's part of the line of text.
        public var relationships: [ComprehendClientTypes.RelationshipsListItem]?
        /// The word or line of text extracted from the block.
        public var text: Swift.String?

        public init(
            blockType: ComprehendClientTypes.BlockType? = nil,
            geometry: ComprehendClientTypes.Geometry? = nil,
            id: Swift.String? = nil,
            page: Swift.Int? = nil,
            relationships: [ComprehendClientTypes.RelationshipsListItem]? = nil,
            text: Swift.String? = nil
        )
        {
            self.blockType = blockType
            self.geometry = geometry
            self.id = id
            self.page = page
            self.relationships = relationships
            self.text = text
        }
    }
}

extension ComprehendClientTypes {

    /// Describes the result metrics for the test data associated with an documentation classifier.
    public struct ClassifierEvaluationMetrics: Swift.Sendable {
        /// The fraction of the labels that were correct recognized. It is computed by dividing the number of labels in the test documents that were correctly recognized by the total number of labels in the test documents.
        public var accuracy: Swift.Double?
        /// A measure of how accurate the classifier results are for the test data. It is derived from the Precision and Recall values. The F1Score is the harmonic average of the two scores. The highest score is 1, and the worst score is 0.
        public var f1Score: Swift.Double?
        /// Indicates the fraction of labels that are incorrectly predicted. Also seen as the fraction of wrong labels compared to the total number of labels. Scores closer to zero are better.
        public var hammingLoss: Swift.Double?
        /// A measure of how accurate the classifier results are for the test data. It is a combination of the Micro Precision and Micro Recall values. The Micro F1Score is the harmonic mean of the two scores. The highest score is 1, and the worst score is 0.
        public var microF1Score: Swift.Double?
        /// A measure of the usefulness of the recognizer results in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones. Unlike the Precision metric which comes from averaging the precision of all available labels, this is based on the overall score of all precision scores added together.
        public var microPrecision: Swift.Double?
        /// A measure of how complete the classifier results are for the test data. High recall means that the classifier returned most of the relevant results. Specifically, this indicates how many of the correct categories in the text that the model can predict. It is a percentage of correct categories in the text that can found. Instead of averaging the recall scores of all labels (as with Recall), micro Recall is based on the overall score of all recall scores added together.
        public var microRecall: Swift.Double?
        /// A measure of the usefulness of the classifier results in the test data. High precision means that the classifier returned substantially more relevant results than irrelevant ones.
        public var precision: Swift.Double?
        /// A measure of how complete the classifier results are for the test data. High recall means that the classifier returned most of the relevant results.
        public var recall: Swift.Double?

        public init(
            accuracy: Swift.Double? = nil,
            f1Score: Swift.Double? = nil,
            hammingLoss: Swift.Double? = nil,
            microF1Score: Swift.Double? = nil,
            microPrecision: Swift.Double? = nil,
            microRecall: Swift.Double? = nil,
            precision: Swift.Double? = nil,
            recall: Swift.Double? = nil
        )
        {
            self.accuracy = accuracy
            self.f1Score = f1Score
            self.hammingLoss = hammingLoss
            self.microF1Score = microF1Score
            self.microPrecision = microPrecision
            self.microRecall = microRecall
            self.precision = precision
            self.recall = recall
        }
    }
}

extension ComprehendClientTypes {

    /// Provides information about a document classifier.
    public struct ClassifierMetadata: Swift.Sendable {
        /// Describes the result metrics for the test data associated with an documentation classifier.
        public var evaluationMetrics: ComprehendClientTypes.ClassifierEvaluationMetrics?
        /// The number of labels in the input data.
        public var numberOfLabels: Swift.Int?
        /// The number of documents in the input data that were used to test the classifier. Typically this is 10 to 20 percent of the input documents, up to 10,000 documents.
        public var numberOfTestDocuments: Swift.Int?
        /// The number of documents in the input data that were used to train the classifier. Typically this is 80 to 90 percent of the input documents.
        public var numberOfTrainedDocuments: Swift.Int?

        public init(
            evaluationMetrics: ComprehendClientTypes.ClassifierEvaluationMetrics? = nil,
            numberOfLabels: Swift.Int? = nil,
            numberOfTestDocuments: Swift.Int? = nil,
            numberOfTrainedDocuments: Swift.Int? = nil
        )
        {
            self.evaluationMetrics = evaluationMetrics
            self.numberOfLabels = numberOfLabels
            self.numberOfTestDocuments = numberOfTestDocuments
            self.numberOfTrainedDocuments = numberOfTrainedDocuments
        }
    }
}

extension ComprehendClientTypes.ClassifierMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

/// The specified resource is not available. Check the resource and try your request again.
public struct ResourceUnavailableException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceUnavailableException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ComprehendClientTypes {

    public enum DocumentReadAction: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case textractAnalyzeDocument
        case textractDetectDocumentText
        case sdkUnknown(Swift.String)

        public static var allCases: [DocumentReadAction] {
            return [
                .textractAnalyzeDocument,
                .textractDetectDocumentText
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .textractAnalyzeDocument: return "TEXTRACT_ANALYZE_DOCUMENT"
            case .textractDetectDocumentText: return "TEXTRACT_DETECT_DOCUMENT_TEXT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    public enum DocumentReadMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case forceDocumentReadAction
        case serviceDefault
        case sdkUnknown(Swift.String)

        public static var allCases: [DocumentReadMode] {
            return [
                .forceDocumentReadAction,
                .serviceDefault
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .forceDocumentReadAction: return "FORCE_DOCUMENT_READ_ACTION"
            case .serviceDefault: return "SERVICE_DEFAULT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// TABLES or FORMS
    public enum DocumentReadFeatureTypes: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case forms
        case tables
        case sdkUnknown(Swift.String)

        public static var allCases: [DocumentReadFeatureTypes] {
            return [
                .forms,
                .tables
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .forms: return "FORMS"
            case .tables: return "TABLES"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Provides configuration parameters to override the default actions for extracting text from PDF documents and image files. By default, Amazon Comprehend performs the following actions to extract text from files, based on the input file type:
    ///
    /// * Word files - Amazon Comprehend parser extracts the text.
    ///
    /// * Digital PDF files - Amazon Comprehend parser extracts the text.
    ///
    /// * Image files and scanned PDF files - Amazon Comprehend uses the Amazon Textract DetectDocumentText API to extract the text.
    ///
    ///
    /// DocumentReaderConfig does not apply to plain text files or Word files. For image files and PDF documents, you can override these default actions using the fields listed below. For more information, see [ Setting text extraction options](https://docs.aws.amazon.com/comprehend/latest/dg/idp-set-textract-options.html) in the Comprehend Developer Guide.
    public struct DocumentReaderConfig: Swift.Sendable {
        /// This field defines the Amazon Textract API operation that Amazon Comprehend uses to extract text from PDF files and image files. Enter one of the following values:
        ///
        /// * TEXTRACT_DETECT_DOCUMENT_TEXT - The Amazon Comprehend service uses the DetectDocumentText API operation.
        ///
        /// * TEXTRACT_ANALYZE_DOCUMENT - The Amazon Comprehend service uses the AnalyzeDocument API operation.
        /// This member is required.
        public var documentReadAction: ComprehendClientTypes.DocumentReadAction?
        /// Determines the text extraction actions for PDF files. Enter one of the following values:
        ///
        /// * SERVICE_DEFAULT - use the Amazon Comprehend service defaults for PDF files.
        ///
        /// * FORCE_DOCUMENT_READ_ACTION - Amazon Comprehend uses the Textract API specified by DocumentReadAction for all PDF files, including digital PDF files.
        public var documentReadMode: ComprehendClientTypes.DocumentReadMode?
        /// Specifies the type of Amazon Textract features to apply. If you chose TEXTRACT_ANALYZE_DOCUMENT as the read action, you must specify one or both of the following values:
        ///
        /// * TABLES - Returns additional information about any tables that are detected in the input document.
        ///
        /// * FORMS - Returns additional information about any forms that are detected in the input document.
        public var featureTypes: [ComprehendClientTypes.DocumentReadFeatureTypes]?

        public init(
            documentReadAction: ComprehendClientTypes.DocumentReadAction? = nil,
            documentReadMode: ComprehendClientTypes.DocumentReadMode? = nil,
            featureTypes: [ComprehendClientTypes.DocumentReadFeatureTypes]? = nil
        )
        {
            self.documentReadAction = documentReadAction
            self.documentReadMode = documentReadMode
            self.featureTypes = featureTypes
        }
    }
}

public struct ClassifyDocumentInput: Swift.Sendable {
    /// Use the Bytes parameter to input a text, PDF, Word or image file. When you classify a document using a custom model, you can also use the Bytes parameter to input an Amazon Textract DetectDocumentText or AnalyzeDocument output file. To classify a document using the prompt safety classifier, use the Text parameter for input. Provide the input document as a sequence of base64-encoded bytes. If your code uses an Amazon Web Services SDK to classify documents, the SDK may encode the document file bytes for you. The maximum length of this field depends on the input document type. For details, see [ Inputs for real-time custom analysis](https://docs.aws.amazon.com/comprehend/latest/dg/idp-inputs-sync.html) in the Comprehend Developer Guide. If you use the Bytes parameter, do not use the Text parameter.
    public var bytes: Foundation.Data?
    /// Provides configuration parameters to override the default actions for extracting text from PDF documents and image files.
    public var documentReaderConfig: ComprehendClientTypes.DocumentReaderConfig?
    /// The Amazon Resource Number (ARN) of the endpoint. For prompt safety classification, Amazon Comprehend provides the endpoint ARN. For more information about prompt safety classifiers, see [Prompt safety classification](https://docs.aws.amazon.com/comprehend/latest/dg/trust-safety.html#prompt-classification) in the Amazon Comprehend Developer Guide For custom classification, you create an endpoint for your custom model. For more information, see [Using Amazon Comprehend endpoints](https://docs.aws.amazon.com/comprehend/latest/dg/using-endpoints.html).
    /// This member is required.
    public var endpointArn: Swift.String?
    /// The document text to be analyzed. If you enter text using this parameter, do not use the Bytes parameter.
    public var text: Swift.String?

    public init(
        bytes: Foundation.Data? = nil,
        documentReaderConfig: ComprehendClientTypes.DocumentReaderConfig? = nil,
        endpointArn: Swift.String? = nil,
        text: Swift.String? = nil
    )
    {
        self.bytes = bytes
        self.documentReaderConfig = documentReaderConfig
        self.endpointArn = endpointArn
        self.text = text
    }
}

extension ClassifyDocumentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ClassifyDocumentInput(bytes: \(Swift.String(describing: bytes)), documentReaderConfig: \(Swift.String(describing: documentReaderConfig)), endpointArn: \(Swift.String(describing: endpointArn)), text: \"CONTENT_REDACTED\")"}
}

extension ComprehendClientTypes {

    /// Specifies the class that categorizes the document being analyzed
    public struct DocumentClass: Swift.Sendable {
        /// The name of the class.
        public var name: Swift.String?
        /// Page number in the input document. This field is present in the response only if your request includes the Byte parameter.
        public var page: Swift.Int?
        /// The confidence score that Amazon Comprehend has this class correctly attributed.
        public var score: Swift.Float?

        public init(
            name: Swift.String? = nil,
            page: Swift.Int? = nil,
            score: Swift.Float? = nil
        )
        {
            self.name = name
            self.page = page
            self.score = score
        }
    }
}

extension ComprehendClientTypes {

    /// Array of the number of characters extracted from each page.
    public struct ExtractedCharactersListItem: Swift.Sendable {
        /// Number of characters extracted from each page.
        public var count: Swift.Int?
        /// Page number.
        public var page: Swift.Int?

        public init(
            count: Swift.Int? = nil,
            page: Swift.Int? = nil
        )
        {
            self.count = count
            self.page = page
        }
    }
}

extension ComprehendClientTypes {

    /// Information about the document, discovered during text extraction.
    public struct DocumentMetadata: Swift.Sendable {
        /// List of pages in the document, with the number of characters extracted from each page.
        public var extractedCharacters: [ComprehendClientTypes.ExtractedCharactersListItem]?
        /// Number of pages in the document.
        public var pages: Swift.Int?

        public init(
            extractedCharacters: [ComprehendClientTypes.ExtractedCharactersListItem]? = nil,
            pages: Swift.Int? = nil
        )
        {
            self.extractedCharacters = extractedCharacters
            self.pages = pages
        }
    }
}

extension ComprehendClientTypes {

    public enum DocumentType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case image
        case msWord
        case nativePdf
        case plainText
        case scannedPdf
        case textractAnalyzeDocumentJson
        case textractDetectDocumentTextJson
        case sdkUnknown(Swift.String)

        public static var allCases: [DocumentType] {
            return [
                .image,
                .msWord,
                .nativePdf,
                .plainText,
                .scannedPdf,
                .textractAnalyzeDocumentJson,
                .textractDetectDocumentTextJson
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .image: return "IMAGE"
            case .msWord: return "MS_WORD"
            case .nativePdf: return "NATIVE_PDF"
            case .plainText: return "PLAIN_TEXT"
            case .scannedPdf: return "SCANNED_PDF"
            case .textractAnalyzeDocumentJson: return "TEXTRACT_ANALYZE_DOCUMENT_JSON"
            case .textractDetectDocumentTextJson: return "TEXTRACT_DETECT_DOCUMENT_TEXT_JSON"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Document type for each page in the document.
    public struct DocumentTypeListItem: Swift.Sendable {
        /// Page number.
        public var page: Swift.Int?
        /// Document type.
        public var type: ComprehendClientTypes.DocumentType?

        public init(
            page: Swift.Int? = nil,
            type: ComprehendClientTypes.DocumentType? = nil
        )
        {
            self.page = page
            self.type = type
        }
    }
}

extension ComprehendClientTypes {

    public enum PageBasedErrorCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case internalServerError
        case pageCharactersExceeded
        case pageSizeExceeded
        case textractBadPage
        case textractProvisionedThroughputExceeded
        case sdkUnknown(Swift.String)

        public static var allCases: [PageBasedErrorCode] {
            return [
                .internalServerError,
                .pageCharactersExceeded,
                .pageSizeExceeded,
                .textractBadPage,
                .textractProvisionedThroughputExceeded
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .internalServerError: return "INTERNAL_SERVER_ERROR"
            case .pageCharactersExceeded: return "PAGE_CHARACTERS_EXCEEDED"
            case .pageSizeExceeded: return "PAGE_SIZE_EXCEEDED"
            case .textractBadPage: return "TEXTRACT_BAD_PAGE"
            case .textractProvisionedThroughputExceeded: return "TEXTRACT_PROVISIONED_THROUGHPUT_EXCEEDED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Text extraction encountered one or more page-level errors in the input document. The ErrorCode contains one of the following values:
    ///
    /// * TEXTRACT_BAD_PAGE - Amazon Textract cannot read the page. For more information about page limits in Amazon Textract, see [ Page Quotas in Amazon Textract](https://docs.aws.amazon.com/textract/latest/dg/limits-document.html).
    ///
    /// * TEXTRACT_PROVISIONED_THROUGHPUT_EXCEEDED - The number of requests exceeded your throughput limit. For more information about throughput quotas in Amazon Textract, see [ Default quotas in Amazon Textract](https://docs.aws.amazon.com/textract/latest/dg/limits-quotas-explained.html).
    ///
    /// * PAGE_CHARACTERS_EXCEEDED - Too many text characters on the page (10,000 characters maximum).
    ///
    /// * PAGE_SIZE_EXCEEDED - The maximum page size is 10 MB.
    ///
    /// * INTERNAL_SERVER_ERROR - The request encountered a service issue. Try the API request again.
    public struct ErrorsListItem: Swift.Sendable {
        /// Error code for the cause of the error.
        public var errorCode: ComprehendClientTypes.PageBasedErrorCode?
        /// Text message explaining the reason for the error.
        public var errorMessage: Swift.String?
        /// Page number where the error occurred.
        public var page: Swift.Int?

        public init(
            errorCode: ComprehendClientTypes.PageBasedErrorCode? = nil,
            errorMessage: Swift.String? = nil,
            page: Swift.Int? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.page = page
        }
    }
}

extension ComprehendClientTypes {

    /// Specifies one of the label or labels that categorize the document being analyzed.
    public struct DocumentLabel: Swift.Sendable {
        /// The name of the label.
        public var name: Swift.String?
        /// Page number where the label occurs. This field is present in the response only if your request includes the Byte parameter.
        public var page: Swift.Int?
        /// The confidence score that Amazon Comprehend has this label correctly attributed.
        public var score: Swift.Float?

        public init(
            name: Swift.String? = nil,
            page: Swift.Int? = nil,
            score: Swift.Float? = nil
        )
        {
            self.name = name
            self.page = page
            self.score = score
        }
    }
}

extension ComprehendClientTypes {

    public enum PageBasedWarningCode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case inferencingNativeDocumentWithPlaintextTrainedModel
        case inferencingPlaintextWithNativeTrainedModel
        case sdkUnknown(Swift.String)

        public static var allCases: [PageBasedWarningCode] {
            return [
                .inferencingNativeDocumentWithPlaintextTrainedModel,
                .inferencingPlaintextWithNativeTrainedModel
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .inferencingNativeDocumentWithPlaintextTrainedModel: return "INFERENCING_NATIVE_DOCUMENT_WITH_PLAINTEXT_TRAINED_MODEL"
            case .inferencingPlaintextWithNativeTrainedModel: return "INFERENCING_PLAINTEXT_WITH_NATIVE_TRAINED_MODEL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// The system identified one of the following warnings while processing the input document:
    ///
    /// * The document to classify is plain text, but the classifier is a native document model.
    ///
    /// * The document to classify is semi-structured, but the classifier is a plain-text model.
    public struct WarningsListItem: Swift.Sendable {
        /// Page number in the input document.
        public var page: Swift.Int?
        /// The type of warning.
        public var warnCode: ComprehendClientTypes.PageBasedWarningCode?
        /// Text message associated with the warning.
        public var warnMessage: Swift.String?

        public init(
            page: Swift.Int? = nil,
            warnCode: ComprehendClientTypes.PageBasedWarningCode? = nil,
            warnMessage: Swift.String? = nil
        )
        {
            self.page = page
            self.warnCode = warnCode
            self.warnMessage = warnMessage
        }
    }
}

public struct ClassifyDocumentOutput: Swift.Sendable {
    /// The classes used by the document being analyzed. These are used for models trained in multi-class mode. Individual classes are mutually exclusive and each document is expected to have only a single class assigned to it. For example, an animal can be a dog or a cat, but not both at the same time. For prompt safety classification, the response includes only two classes (SAFE_PROMPT and UNSAFE_PROMPT), along with a confidence score for each class. The value range of the score is zero to one, where one is the highest confidence.
    public var classes: [ComprehendClientTypes.DocumentClass]?
    /// Extraction information about the document. This field is present in the response only if your request includes the Byte parameter.
    public var documentMetadata: ComprehendClientTypes.DocumentMetadata?
    /// The document type for each page in the input document. This field is present in the response only if your request includes the Byte parameter.
    public var documentType: [ComprehendClientTypes.DocumentTypeListItem]?
    /// Page-level errors that the system detected while processing the input document. The field is empty if the system encountered no errors.
    public var errors: [ComprehendClientTypes.ErrorsListItem]?
    /// The labels used in the document being analyzed. These are used for multi-label trained models. Individual labels represent different categories that are related in some manner and are not mutually exclusive. For example, a movie can be just an action movie, or it can be an action movie, a science fiction movie, and a comedy, all at the same time.
    public var labels: [ComprehendClientTypes.DocumentLabel]?
    /// Warnings detected while processing the input document. The response includes a warning if there is a mismatch between the input document type and the model type associated with the endpoint that you specified. The response can also include warnings for individual pages that have a mismatch. The field is empty if the system generated no warnings.
    public var warnings: [ComprehendClientTypes.WarningsListItem]?

    public init(
        classes: [ComprehendClientTypes.DocumentClass]? = nil,
        documentMetadata: ComprehendClientTypes.DocumentMetadata? = nil,
        documentType: [ComprehendClientTypes.DocumentTypeListItem]? = nil,
        errors: [ComprehendClientTypes.ErrorsListItem]? = nil,
        labels: [ComprehendClientTypes.DocumentLabel]? = nil,
        warnings: [ComprehendClientTypes.WarningsListItem]? = nil
    )
    {
        self.classes = classes
        self.documentMetadata = documentMetadata
        self.documentType = documentType
        self.errors = errors
        self.labels = labels
        self.warnings = warnings
    }
}

extension ClassifyDocumentOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

public struct ContainsPiiEntitiesInput: Swift.Sendable {
    /// The language of the input documents.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A UTF-8 text string. The maximum string size is 100 KB.
    /// This member is required.
    public var text: Swift.String?

    public init(
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        text: Swift.String? = nil
    )
    {
        self.languageCode = languageCode
        self.text = text
    }
}

extension ComprehendClientTypes {

    public enum PiiEntityType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case address
        case age
        case all
        case awsAccessKey
        case awsSecretKey
        case bankAccountNumber
        case bankRouting
        case caHealthNumber
        case caSocialInsuranceNumber
        case creditDebitCvv
        case creditDebitExpiry
        case creditDebitNumber
        case dateTime
        case driverId
        case email
        case internationalBankAccountNumber
        case inAadhaar
        case inNrega
        case inPermanentAccountNumber
        case inVoterNumber
        case ipAddress
        case licensePlate
        case macAddress
        case name
        case passportNumber
        case password
        case phone
        case pin
        case ssn
        case swiftCode
        case ukNationalHealthServiceNumber
        case ukNationalInsuranceNumber
        case ukUniqueTaxpayerReferenceNumber
        case url
        case username
        case usIndividualTaxIdentificationNumber
        case vehicleIdentificationNumber
        case sdkUnknown(Swift.String)

        public static var allCases: [PiiEntityType] {
            return [
                .address,
                .age,
                .all,
                .awsAccessKey,
                .awsSecretKey,
                .bankAccountNumber,
                .bankRouting,
                .caHealthNumber,
                .caSocialInsuranceNumber,
                .creditDebitCvv,
                .creditDebitExpiry,
                .creditDebitNumber,
                .dateTime,
                .driverId,
                .email,
                .internationalBankAccountNumber,
                .inAadhaar,
                .inNrega,
                .inPermanentAccountNumber,
                .inVoterNumber,
                .ipAddress,
                .licensePlate,
                .macAddress,
                .name,
                .passportNumber,
                .password,
                .phone,
                .pin,
                .ssn,
                .swiftCode,
                .ukNationalHealthServiceNumber,
                .ukNationalInsuranceNumber,
                .ukUniqueTaxpayerReferenceNumber,
                .url,
                .username,
                .usIndividualTaxIdentificationNumber,
                .vehicleIdentificationNumber
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .address: return "ADDRESS"
            case .age: return "AGE"
            case .all: return "ALL"
            case .awsAccessKey: return "AWS_ACCESS_KEY"
            case .awsSecretKey: return "AWS_SECRET_KEY"
            case .bankAccountNumber: return "BANK_ACCOUNT_NUMBER"
            case .bankRouting: return "BANK_ROUTING"
            case .caHealthNumber: return "CA_HEALTH_NUMBER"
            case .caSocialInsuranceNumber: return "CA_SOCIAL_INSURANCE_NUMBER"
            case .creditDebitCvv: return "CREDIT_DEBIT_CVV"
            case .creditDebitExpiry: return "CREDIT_DEBIT_EXPIRY"
            case .creditDebitNumber: return "CREDIT_DEBIT_NUMBER"
            case .dateTime: return "DATE_TIME"
            case .driverId: return "DRIVER_ID"
            case .email: return "EMAIL"
            case .internationalBankAccountNumber: return "INTERNATIONAL_BANK_ACCOUNT_NUMBER"
            case .inAadhaar: return "IN_AADHAAR"
            case .inNrega: return "IN_NREGA"
            case .inPermanentAccountNumber: return "IN_PERMANENT_ACCOUNT_NUMBER"
            case .inVoterNumber: return "IN_VOTER_NUMBER"
            case .ipAddress: return "IP_ADDRESS"
            case .licensePlate: return "LICENSE_PLATE"
            case .macAddress: return "MAC_ADDRESS"
            case .name: return "NAME"
            case .passportNumber: return "PASSPORT_NUMBER"
            case .password: return "PASSWORD"
            case .phone: return "PHONE"
            case .pin: return "PIN"
            case .ssn: return "SSN"
            case .swiftCode: return "SWIFT_CODE"
            case .ukNationalHealthServiceNumber: return "UK_NATIONAL_HEALTH_SERVICE_NUMBER"
            case .ukNationalInsuranceNumber: return "UK_NATIONAL_INSURANCE_NUMBER"
            case .ukUniqueTaxpayerReferenceNumber: return "UK_UNIQUE_TAXPAYER_REFERENCE_NUMBER"
            case .url: return "URL"
            case .username: return "USERNAME"
            case .usIndividualTaxIdentificationNumber: return "US_INDIVIDUAL_TAX_IDENTIFICATION_NUMBER"
            case .vehicleIdentificationNumber: return "VEHICLE_IDENTIFICATION_NUMBER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Specifies one of the label or labels that categorize the personally identifiable information (PII) entity being analyzed.
    public struct EntityLabel: Swift.Sendable {
        /// The name of the label.
        public var name: ComprehendClientTypes.PiiEntityType?
        /// The level of confidence that Amazon Comprehend has in the accuracy of the detection.
        public var score: Swift.Float?

        public init(
            name: ComprehendClientTypes.PiiEntityType? = nil,
            score: Swift.Float? = nil
        )
        {
            self.name = name
            self.score = score
        }
    }
}

public struct ContainsPiiEntitiesOutput: Swift.Sendable {
    /// The labels used in the document being analyzed. Individual labels represent personally identifiable information (PII) entity types.
    public var labels: [ComprehendClientTypes.EntityLabel]?

    public init(
        labels: [ComprehendClientTypes.EntityLabel]? = nil
    )
    {
        self.labels = labels
    }
}

/// The specified resource name is already in use. Use a different name and try your request again.
public struct ResourceInUseException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceInUseException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The maximum number of resources per account has been exceeded. Review the resources, and then try your request again.
public struct ResourceLimitExceededException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceLimitExceededException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The specified resource ARN was not found. Check the ARN and try your request again.
public struct ResourceNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ResourceNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The number of requests exceeds the limit. Resubmit your request later.
public struct TooManyRequestsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyRequestsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

/// The request contains more tags than can be associated with a resource (50 tags per resource). The maximum number of tags includes both existing tags and those included in your current request.
public struct TooManyTagsException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTagsException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ComprehendClientTypes {

    public enum DatasetType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case test
        case train
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetType] {
            return [
                .test,
                .train
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .test: return "TEST"
            case .train: return "TRAIN"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// An augmented manifest file that provides training data for your custom model. An augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth.
    public struct DatasetAugmentedManifestsListItem: Swift.Sendable {
        /// The S3 prefix to the annotation files that are referred in the augmented manifest file.
        public var annotationDataS3Uri: Swift.String?
        /// The JSON attribute that contains the annotations for your training documents. The number of attribute names that you specify depends on whether your augmented manifest file is the output of a single labeling job or a chained labeling job. If your file is the output of a single labeling job, specify the LabelAttributeName key that was used when the job was created in Ground Truth. If your file is the output of a chained labeling job, specify the LabelAttributeName key for one or more jobs in the chain. Each LabelAttributeName key provides the annotations from an individual job.
        /// This member is required.
        public var attributeNames: [Swift.String]?
        /// The type of augmented manifest. If you don't specify, the default is PlainTextDocument. PLAIN_TEXT_DOCUMENT A document type that represents any unicode text that is encoded in UTF-8.
        public var documentType: ComprehendClientTypes.AugmentedManifestsDocumentTypeFormat?
        /// The Amazon S3 location of the augmented manifest file.
        /// This member is required.
        public var s3Uri: Swift.String?
        /// The S3 prefix to the source files (PDFs) that are referred to in the augmented manifest file.
        public var sourceDocumentsS3Uri: Swift.String?

        public init(
            annotationDataS3Uri: Swift.String? = nil,
            attributeNames: [Swift.String]? = nil,
            documentType: ComprehendClientTypes.AugmentedManifestsDocumentTypeFormat? = nil,
            s3Uri: Swift.String? = nil,
            sourceDocumentsS3Uri: Swift.String? = nil
        )
        {
            self.annotationDataS3Uri = annotationDataS3Uri
            self.attributeNames = attributeNames
            self.documentType = documentType
            self.s3Uri = s3Uri
            self.sourceDocumentsS3Uri = sourceDocumentsS3Uri
        }
    }
}

extension ComprehendClientTypes {

    public enum DatasetDataFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case augmentedManifest
        case comprehendCsv
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetDataFormat] {
            return [
                .augmentedManifest,
                .comprehendCsv
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .augmentedManifest: return "AUGMENTED_MANIFEST"
            case .comprehendCsv: return "COMPREHEND_CSV"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Describes the dataset input data configuration for a document classifier model. For more information on how the input file is formatted, see [Preparing training data](https://docs.aws.amazon.com/comprehend/latest/dg/prep-classifier-data.html) in the Comprehend Developer Guide.
    public struct DatasetDocumentClassifierInputDataConfig: Swift.Sendable {
        /// Indicates the delimiter used to separate each label for training a multi-label classifier. The default delimiter between labels is a pipe (|). You can use a different character as a delimiter (if it's an allowed character) by specifying it under Delimiter for labels. If the training documents use a delimiter other than the default or the delimiter you specify, the labels on that line will be combined to make a single unique label, such as LABELLABELLABEL.
        public var labelDelimiter: Swift.String?
        /// The Amazon S3 URI for the input data. The S3 bucket must be in the same Region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of input files. For example, if you use the URI S3://bucketName/prefix, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input. This parameter is required if you set DataFormat to COMPREHEND_CSV.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            labelDelimiter: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.labelDelimiter = labelDelimiter
            self.s3Uri = s3Uri
        }
    }
}

extension ComprehendClientTypes {

    /// Describes the annotations associated with a entity recognizer.
    public struct DatasetEntityRecognizerAnnotations: Swift.Sendable {
        /// Specifies the Amazon S3 location where the training documents for an entity recognizer are located. The URI must be in the same Region as the API endpoint that you are calling.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            s3Uri: Swift.String? = nil
        )
        {
            self.s3Uri = s3Uri
        }
    }
}

extension ComprehendClientTypes {

    public enum InputFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case oneDocPerFile
        case oneDocPerLine
        case sdkUnknown(Swift.String)

        public static var allCases: [InputFormat] {
            return [
                .oneDocPerFile,
                .oneDocPerLine
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .oneDocPerFile: return "ONE_DOC_PER_FILE"
            case .oneDocPerLine: return "ONE_DOC_PER_LINE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Describes the documents submitted with a dataset for an entity recognizer model.
    public struct DatasetEntityRecognizerDocuments: Swift.Sendable {
        /// Specifies how the text in an input file should be processed. This is optional, and the default is ONE_DOC_PER_LINE. ONE_DOC_PER_FILE - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers. ONE_DOC_PER_LINE - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.
        public var inputFormat: ComprehendClientTypes.InputFormat?
        /// Specifies the Amazon S3 location where the documents for the dataset are located.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            inputFormat: ComprehendClientTypes.InputFormat? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.inputFormat = inputFormat
            self.s3Uri = s3Uri
        }
    }
}

extension ComprehendClientTypes {

    /// Describes the dataset entity list for an entity recognizer model. For more information on how the input file is formatted, see [Preparing training data](https://docs.aws.amazon.com/comprehend/latest/dg/prep-training-data-cer.html) in the Comprehend Developer Guide.
    public struct DatasetEntityRecognizerEntityList: Swift.Sendable {
        /// Specifies the Amazon S3 location where the entity list is located.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            s3Uri: Swift.String? = nil
        )
        {
            self.s3Uri = s3Uri
        }
    }
}

extension ComprehendClientTypes {

    /// Specifies the format and location of the input data. You must provide either the Annotations parameter or the EntityList parameter.
    public struct DatasetEntityRecognizerInputDataConfig: Swift.Sendable {
        /// The S3 location of the annotation documents for your custom entity recognizer.
        public var annotations: ComprehendClientTypes.DatasetEntityRecognizerAnnotations?
        /// The format and location of the training documents for your custom entity recognizer.
        /// This member is required.
        public var documents: ComprehendClientTypes.DatasetEntityRecognizerDocuments?
        /// The S3 location of the entity list for your custom entity recognizer.
        public var entityList: ComprehendClientTypes.DatasetEntityRecognizerEntityList?

        public init(
            annotations: ComprehendClientTypes.DatasetEntityRecognizerAnnotations? = nil,
            documents: ComprehendClientTypes.DatasetEntityRecognizerDocuments? = nil,
            entityList: ComprehendClientTypes.DatasetEntityRecognizerEntityList? = nil
        )
        {
            self.annotations = annotations
            self.documents = documents
            self.entityList = entityList
        }
    }
}

extension ComprehendClientTypes {

    /// Specifies the format and location of the input data for the dataset.
    public struct DatasetInputDataConfig: Swift.Sendable {
        /// A list of augmented manifest files that provide training data for your custom model. An augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth.
        public var augmentedManifests: [ComprehendClientTypes.DatasetAugmentedManifestsListItem]?
        /// COMPREHEND_CSV: The data format is a two-column CSV file, where the first column contains labels and the second column contains documents. AUGMENTED_MANIFEST: The data format
        public var dataFormat: ComprehendClientTypes.DatasetDataFormat?
        /// The input properties for training a document classifier model. For more information on how the input file is formatted, see [Preparing training data](https://docs.aws.amazon.com/comprehend/latest/dg/prep-classifier-data.html) in the Comprehend Developer Guide.
        public var documentClassifierInputDataConfig: ComprehendClientTypes.DatasetDocumentClassifierInputDataConfig?
        /// The input properties for training an entity recognizer model.
        public var entityRecognizerInputDataConfig: ComprehendClientTypes.DatasetEntityRecognizerInputDataConfig?

        public init(
            augmentedManifests: [ComprehendClientTypes.DatasetAugmentedManifestsListItem]? = nil,
            dataFormat: ComprehendClientTypes.DatasetDataFormat? = nil,
            documentClassifierInputDataConfig: ComprehendClientTypes.DatasetDocumentClassifierInputDataConfig? = nil,
            entityRecognizerInputDataConfig: ComprehendClientTypes.DatasetEntityRecognizerInputDataConfig? = nil
        )
        {
            self.augmentedManifests = augmentedManifests
            self.dataFormat = dataFormat
            self.documentClassifierInputDataConfig = documentClassifierInputDataConfig
            self.entityRecognizerInputDataConfig = entityRecognizerInputDataConfig
        }
    }
}

extension ComprehendClientTypes {

    /// A key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with the key-value pair ‘Department’:’Sales’ might be added to a resource to indicate its use by a particular department.
    public struct Tag: Swift.Sendable {
        /// The initial part of a key-value pair that forms a tag associated with a given resource. For instance, if you want to show which resources are used by which departments, you might use “Department” as the key portion of the pair, with multiple possible values such as “sales,” “legal,” and “administration.”
        /// This member is required.
        public var key: Swift.String?
        /// The second part of a key-value pair that forms a tag associated with a given resource. For instance, if you want to show which resources are used by which departments, you might use “Department” as the initial (key) portion of the pair, with a value of “sales” to indicate the sales department.
        public var value: Swift.String?

        public init(
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }
}

public struct CreateDatasetInput: Swift.Sendable {
    /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// Name of the dataset.
    /// This member is required.
    public var datasetName: Swift.String?
    /// The dataset type. You can specify that the data in a dataset is for training the model or for testing the model.
    public var datasetType: ComprehendClientTypes.DatasetType?
    /// Description of the dataset.
    public var description: Swift.String?
    /// The Amazon Resource Number (ARN) of the flywheel of the flywheel to receive the data.
    /// This member is required.
    public var flywheelArn: Swift.String?
    /// Information about the input data configuration. The type of input data varies based on the format of the input and whether the data is for a classifier model or an entity recognition model.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.DatasetInputDataConfig?
    /// Tags for the dataset.
    public var tags: [ComprehendClientTypes.Tag]?

    public init(
        clientRequestToken: Swift.String? = nil,
        datasetName: Swift.String? = nil,
        datasetType: ComprehendClientTypes.DatasetType? = nil,
        description: Swift.String? = nil,
        flywheelArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.DatasetInputDataConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.datasetName = datasetName
        self.datasetType = datasetType
        self.description = description
        self.flywheelArn = flywheelArn
        self.inputDataConfig = inputDataConfig
        self.tags = tags
    }
}

public struct CreateDatasetOutput: Swift.Sendable {
    /// The ARN of the dataset.
    public var datasetArn: Swift.String?

    public init(
        datasetArn: Swift.String? = nil
    )
    {
        self.datasetArn = datasetArn
    }
}

/// The KMS customer managed key (CMK) entered cannot be validated. Verify the key and re-enter it.
public struct KmsKeyValidationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "KmsKeyValidationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ComprehendClientTypes {

    public enum DocumentClassifierDataFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case augmentedManifest
        case comprehendCsv
        case sdkUnknown(Swift.String)

        public static var allCases: [DocumentClassifierDataFormat] {
            return [
                .augmentedManifest,
                .comprehendCsv
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .augmentedManifest: return "AUGMENTED_MANIFEST"
            case .comprehendCsv: return "COMPREHEND_CSV"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// The location of the training documents. This parameter is required in a request to create a semi-structured document classification model.
    public struct DocumentClassifierDocuments: Swift.Sendable {
        /// The S3 URI location of the training documents specified in the S3Uri CSV file.
        /// This member is required.
        public var s3Uri: Swift.String?
        /// The S3 URI location of the test documents included in the TestS3Uri CSV file. This field is not required if you do not specify a test CSV file.
        public var testS3Uri: Swift.String?

        public init(
            s3Uri: Swift.String? = nil,
            testS3Uri: Swift.String? = nil
        )
        {
            self.s3Uri = s3Uri
            self.testS3Uri = testS3Uri
        }
    }
}

extension ComprehendClientTypes {

    public enum DocumentClassifierDocumentTypeFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case plainTextDocument
        case semiStructuredDocument
        case sdkUnknown(Swift.String)

        public static var allCases: [DocumentClassifierDocumentTypeFormat] {
            return [
                .plainTextDocument,
                .semiStructuredDocument
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .plainTextDocument: return "PLAIN_TEXT_DOCUMENT"
            case .semiStructuredDocument: return "SEMI_STRUCTURED_DOCUMENT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// The input properties for training a document classifier. For more information on how the input file is formatted, see [Preparing training data](https://docs.aws.amazon.com/comprehend/latest/dg/prep-classifier-data.html) in the Comprehend Developer Guide.
    public struct DocumentClassifierInputDataConfig: Swift.Sendable {
        /// A list of augmented manifest files that provide training data for your custom model. An augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth. This parameter is required if you set DataFormat to AUGMENTED_MANIFEST.
        public var augmentedManifests: [ComprehendClientTypes.AugmentedManifestsListItem]?
        /// The format of your training data:
        ///
        /// * COMPREHEND_CSV: A two-column CSV file, where labels are provided in the first column, and documents are provided in the second. If you use this value, you must provide the S3Uri parameter in your request.
        ///
        /// * AUGMENTED_MANIFEST: A labeled dataset that is produced by Amazon SageMaker Ground Truth. This file is in JSON lines format. Each line is a complete JSON object that contains a training document and its associated labels. If you use this value, you must provide the AugmentedManifests parameter in your request.
        ///
        ///
        /// If you don't specify a value, Amazon Comprehend uses COMPREHEND_CSV as the default.
        public var dataFormat: ComprehendClientTypes.DocumentClassifierDataFormat?
        /// Provides configuration parameters to override the default actions for extracting text from PDF documents and image files. By default, Amazon Comprehend performs the following actions to extract text from files, based on the input file type:
        ///
        /// * Word files - Amazon Comprehend parser extracts the text.
        ///
        /// * Digital PDF files - Amazon Comprehend parser extracts the text.
        ///
        /// * Image files and scanned PDF files - Amazon Comprehend uses the Amazon Textract DetectDocumentText API to extract the text.
        ///
        ///
        /// DocumentReaderConfig does not apply to plain text files or Word files. For image files and PDF documents, you can override these default actions using the fields listed below. For more information, see [ Setting text extraction options](https://docs.aws.amazon.com/comprehend/latest/dg/idp-set-textract-options.html) in the Comprehend Developer Guide.
        public var documentReaderConfig: ComprehendClientTypes.DocumentReaderConfig?
        /// The type of input documents for training the model. Provide plain-text documents to create a plain-text model, and provide semi-structured documents to create a native document model.
        public var documentType: ComprehendClientTypes.DocumentClassifierDocumentTypeFormat?
        /// The S3 location of the training documents. This parameter is required in a request to create a native document model.
        public var documents: ComprehendClientTypes.DocumentClassifierDocuments?
        /// Indicates the delimiter used to separate each label for training a multi-label classifier. The default delimiter between labels is a pipe (|). You can use a different character as a delimiter (if it's an allowed character) by specifying it under Delimiter for labels. If the training documents use a delimiter other than the default or the delimiter you specify, the labels on that line will be combined to make a single unique label, such as LABELLABELLABEL.
        public var labelDelimiter: Swift.String?
        /// The Amazon S3 URI for the input data. The S3 bucket must be in the same Region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of input files. For example, if you use the URI S3://bucketName/prefix, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input. This parameter is required if you set DataFormat to COMPREHEND_CSV.
        public var s3Uri: Swift.String?
        /// This specifies the Amazon S3 location that contains the test annotations for the document classifier. The URI must be in the same Amazon Web Services Region as the API endpoint that you are calling.
        public var testS3Uri: Swift.String?

        public init(
            augmentedManifests: [ComprehendClientTypes.AugmentedManifestsListItem]? = nil,
            dataFormat: ComprehendClientTypes.DocumentClassifierDataFormat? = nil,
            documentReaderConfig: ComprehendClientTypes.DocumentReaderConfig? = nil,
            documentType: ComprehendClientTypes.DocumentClassifierDocumentTypeFormat? = nil,
            documents: ComprehendClientTypes.DocumentClassifierDocuments? = nil,
            labelDelimiter: Swift.String? = nil,
            s3Uri: Swift.String? = nil,
            testS3Uri: Swift.String? = nil
        )
        {
            self.augmentedManifests = augmentedManifests
            self.dataFormat = dataFormat
            self.documentReaderConfig = documentReaderConfig
            self.documentType = documentType
            self.documents = documents
            self.labelDelimiter = labelDelimiter
            self.s3Uri = s3Uri
            self.testS3Uri = testS3Uri
        }
    }
}

extension ComprehendClientTypes {

    public enum DocumentClassifierMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case multiClass
        case multiLabel
        case sdkUnknown(Swift.String)

        public static var allCases: [DocumentClassifierMode] {
            return [
                .multiClass,
                .multiLabel
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .multiClass: return "MULTI_CLASS"
            case .multiLabel: return "MULTI_LABEL"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Provide the location for output data from a custom classifier job. This field is mandatory if you are training a native document model.
    public struct DocumentClassifierOutputDataConfig: Swift.Sendable {
        /// The Amazon S3 prefix for the data lake location of the flywheel statistics.
        public var flywheelStatsS3Prefix: Swift.String?
        /// ID for the Amazon Web Services Key Management Service (KMS) key that Amazon Comprehend uses to encrypt the output results from an analysis job. The KmsKeyId can be one of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * KMS Key Alias: "alias/ExampleAlias"
        ///
        /// * ARN of a KMS Key Alias: "arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"
        public var kmsKeyId: Swift.String?
        /// When you use the OutputDataConfig object while creating a custom classifier, you specify the Amazon S3 location where you want to write the confusion matrix and other output files. The URI must be in the same Region as the API endpoint that you are calling. The location is used as the prefix for the actual location of this output file. When the custom classifier job is finished, the service creates the output file in a directory specific to the job. The S3Uri field contains the location of the output file, called output.tar.gz. It is a compressed archive that contains the confusion matrix.
        public var s3Uri: Swift.String?

        public init(
            flywheelStatsS3Prefix: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.flywheelStatsS3Prefix = flywheelStatsS3Prefix
            self.kmsKeyId = kmsKeyId
            self.s3Uri = s3Uri
        }
    }
}

extension ComprehendClientTypes {

    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for the job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public struct VpcConfig: Swift.Sendable {
        /// The ID number for a security group on an instance of your private VPC. Security groups on your VPC function serve as a virtual firewall to control inbound and outbound traffic and provides security for the resources that you’ll be accessing on the VPC. This ID number is preceded by "sg-", for instance: "sg-03b388029b0a285ea". For more information, see [Security Groups for your VPC](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html).
        /// This member is required.
        public var securityGroupIds: [Swift.String]?
        /// The ID for each subnet being used in your private VPC. This subnet is a subset of the a range of IPv4 addresses used by the VPC and is specific to a given availability zone in the VPC’s Region. This ID number is preceded by "subnet-", for instance: "subnet-04ccf456919e69055". For more information, see [VPCs and Subnets](https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html).
        /// This member is required.
        public var subnets: [Swift.String]?

        public init(
            securityGroupIds: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
        }
    }
}

public struct CreateDocumentClassifierInput: Swift.Sendable {
    /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data.
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// The name of the document classifier.
    /// This member is required.
    public var documentClassifierName: Swift.String?
    /// Specifies the format and location of the input data for the job.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.DocumentClassifierInputDataConfig?
    /// The language of the input documents. You can specify any of the languages supported by Amazon Comprehend. All documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// Indicates the mode in which the classifier will be trained. The classifier can be trained in multi-class (single-label) mode or multi-label mode. Multi-class mode identifies a single class label for each document and multi-label mode identifies one or more class labels for each document. Multiple labels for an individual document are separated by a delimiter. The default delimiter between labels is a pipe (|).
    public var mode: ComprehendClientTypes.DocumentClassifierMode?
    /// ID for the KMS key that Amazon Comprehend uses to encrypt trained custom models. The ModelKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var modelKmsKeyId: Swift.String?
    /// The resource-based policy to attach to your custom document classifier model. You can use this policy to allow another Amazon Web Services account to import your custom model. Provide your policy as a JSON body that you enter as a UTF-8 encoded string without line breaks. To provide valid JSON, enclose the attribute names and values in double quotes. If the JSON body is also enclosed in double quotes, then you must escape the double quotes that are inside the policy: "{\"attribute\": \"value\", \"attribute\": [\"value\"]}" To avoid escaping quotes, you can use single quotes to enclose the policy and double quotes to enclose the JSON names and values: '{"attribute": "value", "attribute": ["value"]}'
    public var modelPolicy: Swift.String?
    /// Specifies the location for the output files from a custom classifier job. This parameter is required for a request that creates a native document model.
    public var outputDataConfig: ComprehendClientTypes.DocumentClassifierOutputDataConfig?
    /// Tags to associate with the document classifier. A tag is a key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// The version name given to the newly created classifier. Version names can have a maximum of 256 characters. Alphanumeric characters, hyphens (-) and underscores (_) are allowed. The version name must be unique among all models with the same classifier name in the Amazon Web Services account/Amazon Web Services Region.
    public var versionName: Swift.String?
    /// ID for the Amazon Web Services Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var volumeKmsKeyId: Swift.String?
    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your custom classifier. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public var vpcConfig: ComprehendClientTypes.VpcConfig?

    public init(
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        documentClassifierName: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.DocumentClassifierInputDataConfig? = nil,
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        mode: ComprehendClientTypes.DocumentClassifierMode? = nil,
        modelKmsKeyId: Swift.String? = nil,
        modelPolicy: Swift.String? = nil,
        outputDataConfig: ComprehendClientTypes.DocumentClassifierOutputDataConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        versionName: Swift.String? = nil,
        volumeKmsKeyId: Swift.String? = nil,
        vpcConfig: ComprehendClientTypes.VpcConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.documentClassifierName = documentClassifierName
        self.inputDataConfig = inputDataConfig
        self.languageCode = languageCode
        self.mode = mode
        self.modelKmsKeyId = modelKmsKeyId
        self.modelPolicy = modelPolicy
        self.outputDataConfig = outputDataConfig
        self.tags = tags
        self.versionName = versionName
        self.volumeKmsKeyId = volumeKmsKeyId
        self.vpcConfig = vpcConfig
    }
}

public struct CreateDocumentClassifierOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that identifies the document classifier.
    public var documentClassifierArn: Swift.String?

    public init(
        documentClassifierArn: Swift.String? = nil
    )
    {
        self.documentClassifierArn = documentClassifierArn
    }
}

public struct CreateEndpointInput: Swift.Sendable {
    /// An idempotency token provided by the customer. If this token matches a previous endpoint creation request, Amazon Comprehend will not return a ResourceInUseException.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to trained custom models encrypted with a customer managed key (ModelKmsKeyId).
    public var dataAccessRoleArn: Swift.String?
    /// The desired number of inference units to be used by the model using this endpoint. Each inference unit represents of a throughput of 100 characters per second.
    /// This member is required.
    public var desiredInferenceUnits: Swift.Int?
    /// This is the descriptive suffix that becomes part of the EndpointArn used for all subsequent requests to this resource.
    /// This member is required.
    public var endpointName: Swift.String?
    /// The Amazon Resource Number (ARN) of the flywheel to which the endpoint will be attached.
    public var flywheelArn: Swift.String?
    /// The Amazon Resource Number (ARN) of the model to which the endpoint will be attached.
    public var modelArn: Swift.String?
    /// Tags to associate with the endpoint. A tag is a key-value pair that adds metadata to the endpoint. For example, a tag with "Sales" as the key might be added to an endpoint to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?

    public init(
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        desiredInferenceUnits: Swift.Int? = nil,
        endpointName: Swift.String? = nil,
        flywheelArn: Swift.String? = nil,
        modelArn: Swift.String? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.desiredInferenceUnits = desiredInferenceUnits
        self.endpointName = endpointName
        self.flywheelArn = flywheelArn
        self.modelArn = modelArn
        self.tags = tags
    }
}

public struct CreateEndpointOutput: Swift.Sendable {
    /// The Amazon Resource Number (ARN) of the endpoint being created.
    public var endpointArn: Swift.String?
    /// The Amazon Resource Number (ARN) of the model to which the endpoint is attached.
    public var modelArn: Swift.String?

    public init(
        endpointArn: Swift.String? = nil,
        modelArn: Swift.String? = nil
    )
    {
        self.endpointArn = endpointArn
        self.modelArn = modelArn
    }
}

extension ComprehendClientTypes {

    /// Describes the annotations associated with a entity recognizer.
    public struct EntityRecognizerAnnotations: Swift.Sendable {
        /// Specifies the Amazon S3 location where the annotations for an entity recognizer are located. The URI must be in the same Region as the API endpoint that you are calling.
        /// This member is required.
        public var s3Uri: Swift.String?
        /// Specifies the Amazon S3 location where the test annotations for an entity recognizer are located. The URI must be in the same Region as the API endpoint that you are calling.
        public var testS3Uri: Swift.String?

        public init(
            s3Uri: Swift.String? = nil,
            testS3Uri: Swift.String? = nil
        )
        {
            self.s3Uri = s3Uri
            self.testS3Uri = testS3Uri
        }
    }
}

extension ComprehendClientTypes {

    public enum EntityRecognizerDataFormat: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case augmentedManifest
        case comprehendCsv
        case sdkUnknown(Swift.String)

        public static var allCases: [EntityRecognizerDataFormat] {
            return [
                .augmentedManifest,
                .comprehendCsv
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .augmentedManifest: return "AUGMENTED_MANIFEST"
            case .comprehendCsv: return "COMPREHEND_CSV"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Describes the training documents submitted with an entity recognizer.
    public struct EntityRecognizerDocuments: Swift.Sendable {
        /// Specifies how the text in an input file should be processed. This is optional, and the default is ONE_DOC_PER_LINE. ONE_DOC_PER_FILE - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers. ONE_DOC_PER_LINE - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.
        public var inputFormat: ComprehendClientTypes.InputFormat?
        /// Specifies the Amazon S3 location where the training documents for an entity recognizer are located. The URI must be in the same Region as the API endpoint that you are calling.
        /// This member is required.
        public var s3Uri: Swift.String?
        /// Specifies the Amazon S3 location where the test documents for an entity recognizer are located. The URI must be in the same Amazon Web Services Region as the API endpoint that you are calling.
        public var testS3Uri: Swift.String?

        public init(
            inputFormat: ComprehendClientTypes.InputFormat? = nil,
            s3Uri: Swift.String? = nil,
            testS3Uri: Swift.String? = nil
        )
        {
            self.inputFormat = inputFormat
            self.s3Uri = s3Uri
            self.testS3Uri = testS3Uri
        }
    }
}

extension ComprehendClientTypes {

    /// Describes the entity list submitted with an entity recognizer.
    public struct EntityRecognizerEntityList: Swift.Sendable {
        /// Specifies the Amazon S3 location where the entity list is located. The URI must be in the same Region as the API endpoint that you are calling.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            s3Uri: Swift.String? = nil
        )
        {
            self.s3Uri = s3Uri
        }
    }
}

extension ComprehendClientTypes {

    /// An entity type within a labeled training dataset that Amazon Comprehend uses to train a custom entity recognizer.
    public struct EntityTypesListItem: Swift.Sendable {
        /// An entity type within a labeled training dataset that Amazon Comprehend uses to train a custom entity recognizer. Entity types must not contain the following invalid characters: \n (line break), \\n (escaped line break, \r (carriage return), \\r (escaped carriage return), \t (tab), \\t (escaped tab), and , (comma).
        /// This member is required.
        public var type: Swift.String?

        public init(
            type: Swift.String? = nil
        )
        {
            self.type = type
        }
    }
}

extension ComprehendClientTypes {

    /// Specifies the format and location of the input data.
    public struct EntityRecognizerInputDataConfig: Swift.Sendable {
        /// The S3 location of the CSV file that annotates your training documents.
        public var annotations: ComprehendClientTypes.EntityRecognizerAnnotations?
        /// A list of augmented manifest files that provide training data for your custom model. An augmented manifest file is a labeled dataset that is produced by Amazon SageMaker Ground Truth. This parameter is required if you set DataFormat to AUGMENTED_MANIFEST.
        public var augmentedManifests: [ComprehendClientTypes.AugmentedManifestsListItem]?
        /// The format of your training data:
        ///
        /// * COMPREHEND_CSV: A CSV file that supplements your training documents. The CSV file contains information about the custom entities that your trained model will detect. The required format of the file depends on whether you are providing annotations or an entity list. If you use this value, you must provide your CSV file by using either the Annotations or EntityList parameters. You must provide your training documents by using the Documents parameter.
        ///
        /// * AUGMENTED_MANIFEST: A labeled dataset that is produced by Amazon SageMaker Ground Truth. This file is in JSON lines format. Each line is a complete JSON object that contains a training document and its labels. Each label annotates a named entity in the training document. If you use this value, you must provide the AugmentedManifests parameter in your request.
        ///
        ///
        /// If you don't specify a value, Amazon Comprehend uses COMPREHEND_CSV as the default.
        public var dataFormat: ComprehendClientTypes.EntityRecognizerDataFormat?
        /// The S3 location of the folder that contains the training documents for your custom entity recognizer. This parameter is required if you set DataFormat to COMPREHEND_CSV.
        public var documents: ComprehendClientTypes.EntityRecognizerDocuments?
        /// The S3 location of the CSV file that has the entity list for your custom entity recognizer.
        public var entityList: ComprehendClientTypes.EntityRecognizerEntityList?
        /// The entity types in the labeled training data that Amazon Comprehend uses to train the custom entity recognizer. Any entity types that you don't specify are ignored. A maximum of 25 entity types can be used at one time to train an entity recognizer. Entity types must not contain the following invalid characters: \n (line break), \\n (escaped line break), \r (carriage return), \\r (escaped carriage return), \t (tab), \\t (escaped tab), space, and , (comma).
        /// This member is required.
        public var entityTypes: [ComprehendClientTypes.EntityTypesListItem]?

        public init(
            annotations: ComprehendClientTypes.EntityRecognizerAnnotations? = nil,
            augmentedManifests: [ComprehendClientTypes.AugmentedManifestsListItem]? = nil,
            dataFormat: ComprehendClientTypes.EntityRecognizerDataFormat? = nil,
            documents: ComprehendClientTypes.EntityRecognizerDocuments? = nil,
            entityList: ComprehendClientTypes.EntityRecognizerEntityList? = nil,
            entityTypes: [ComprehendClientTypes.EntityTypesListItem]? = nil
        )
        {
            self.annotations = annotations
            self.augmentedManifests = augmentedManifests
            self.dataFormat = dataFormat
            self.documents = documents
            self.entityList = entityList
            self.entityTypes = entityTypes
        }
    }
}

public struct CreateEntityRecognizerInput: Swift.Sendable {
    /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data.
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// Specifies the format and location of the input data. The S3 bucket containing the input data must be located in the same Region as the entity recognizer being created.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.EntityRecognizerInputDataConfig?
    /// You can specify any of the following languages: English ("en"), Spanish ("es"), French ("fr"), Italian ("it"), German ("de"), or Portuguese ("pt"). If you plan to use this entity recognizer with PDF, Word, or image input files, you must specify English as the language. All training documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// ID for the KMS key that Amazon Comprehend uses to encrypt trained custom models. The ModelKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var modelKmsKeyId: Swift.String?
    /// The JSON resource-based policy to attach to your custom entity recognizer model. You can use this policy to allow another Amazon Web Services account to import your custom model. Provide your JSON as a UTF-8 encoded string without line breaks. To provide valid JSON for your policy, enclose the attribute names and values in double quotes. If the JSON body is also enclosed in double quotes, then you must escape the double quotes that are inside the policy: "{\"attribute\": \"value\", \"attribute\": [\"value\"]}" To avoid escaping quotes, you can use single quotes to enclose the policy and double quotes to enclose the JSON names and values: '{"attribute": "value", "attribute": ["value"]}'
    public var modelPolicy: Swift.String?
    /// The name given to the newly created recognizer. Recognizer names can be a maximum of 256 characters. Alphanumeric characters, hyphens (-) and underscores (_) are allowed. The name must be unique in the account/Region.
    /// This member is required.
    public var recognizerName: Swift.String?
    /// Tags to associate with the entity recognizer. A tag is a key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// The version name given to the newly created recognizer. Version names can be a maximum of 256 characters. Alphanumeric characters, hyphens (-) and underscores (_) are allowed. The version name must be unique among all models with the same recognizer name in the account/Region.
    public var versionName: Swift.String?
    /// ID for the Amazon Web Services Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var volumeKmsKeyId: Swift.String?
    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your custom entity recognizer. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public var vpcConfig: ComprehendClientTypes.VpcConfig?

    public init(
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.EntityRecognizerInputDataConfig? = nil,
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        modelKmsKeyId: Swift.String? = nil,
        modelPolicy: Swift.String? = nil,
        recognizerName: Swift.String? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        versionName: Swift.String? = nil,
        volumeKmsKeyId: Swift.String? = nil,
        vpcConfig: ComprehendClientTypes.VpcConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.inputDataConfig = inputDataConfig
        self.languageCode = languageCode
        self.modelKmsKeyId = modelKmsKeyId
        self.modelPolicy = modelPolicy
        self.recognizerName = recognizerName
        self.tags = tags
        self.versionName = versionName
        self.volumeKmsKeyId = volumeKmsKeyId
        self.vpcConfig = vpcConfig
    }
}

public struct CreateEntityRecognizerOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that identifies the entity recognizer.
    public var entityRecognizerArn: Swift.String?

    public init(
        entityRecognizerArn: Swift.String? = nil
    )
    {
        self.entityRecognizerArn = entityRecognizerArn
    }
}

extension ComprehendClientTypes {

    /// Data security configuration.
    public struct DataSecurityConfig: Swift.Sendable {
        /// ID for the KMS key that Amazon Comprehend uses to encrypt the data in the data lake.
        public var dataLakeKmsKeyId: Swift.String?
        /// ID for the KMS key that Amazon Comprehend uses to encrypt trained custom models. The ModelKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var modelKmsKeyId: Swift.String?
        /// ID for the KMS key that Amazon Comprehend uses to encrypt the volume.
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for the job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init(
            dataLakeKmsKeyId: Swift.String? = nil,
            modelKmsKeyId: Swift.String? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.dataLakeKmsKeyId = dataLakeKmsKeyId
            self.modelKmsKeyId = modelKmsKeyId
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }
}

extension ComprehendClientTypes {

    public enum ModelType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case documentClassifier
        case entityRecognizer
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelType] {
            return [
                .documentClassifier,
                .entityRecognizer
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .documentClassifier: return "DOCUMENT_CLASSIFIER"
            case .entityRecognizer: return "ENTITY_RECOGNIZER"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Configuration required for a document classification model.
    public struct DocumentClassificationConfig: Swift.Sendable {
        /// One or more labels to associate with the custom classifier.
        public var labels: [Swift.String]?
        /// Classification mode indicates whether the documents are MULTI_CLASS or MULTI_LABEL.
        /// This member is required.
        public var mode: ComprehendClientTypes.DocumentClassifierMode?

        public init(
            labels: [Swift.String]? = nil,
            mode: ComprehendClientTypes.DocumentClassifierMode? = nil
        )
        {
            self.labels = labels
            self.mode = mode
        }
    }
}

extension ComprehendClientTypes {

    /// Configuration required for an entity recognition model.
    public struct EntityRecognitionConfig: Swift.Sendable {
        /// Up to 25 entity types that the model is trained to recognize.
        /// This member is required.
        public var entityTypes: [ComprehendClientTypes.EntityTypesListItem]?

        public init(
            entityTypes: [ComprehendClientTypes.EntityTypesListItem]? = nil
        )
        {
            self.entityTypes = entityTypes
        }
    }
}

extension ComprehendClientTypes {

    /// Configuration about the model associated with a flywheel.
    public struct TaskConfig: Swift.Sendable {
        /// Configuration required for a document classification model.
        public var documentClassificationConfig: ComprehendClientTypes.DocumentClassificationConfig?
        /// Configuration required for an entity recognition model.
        public var entityRecognitionConfig: ComprehendClientTypes.EntityRecognitionConfig?
        /// Language code for the language that the model supports.
        /// This member is required.
        public var languageCode: ComprehendClientTypes.LanguageCode?

        public init(
            documentClassificationConfig: ComprehendClientTypes.DocumentClassificationConfig? = nil,
            entityRecognitionConfig: ComprehendClientTypes.EntityRecognitionConfig? = nil,
            languageCode: ComprehendClientTypes.LanguageCode? = nil
        )
        {
            self.documentClassificationConfig = documentClassificationConfig
            self.entityRecognitionConfig = entityRecognitionConfig
            self.languageCode = languageCode
        }
    }
}

public struct CreateFlywheelInput: Swift.Sendable {
    /// To associate an existing model with the flywheel, specify the Amazon Resource Number (ARN) of the model version. Do not set TaskConfig or ModelType if you specify an ActiveModelArn.
    public var activeModelArn: Swift.String?
    /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend the permissions required to access the flywheel data in the data lake.
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// Enter the S3 location for the data lake. You can specify a new S3 bucket or a new folder of an existing S3 bucket. The flywheel creates the data lake at this location.
    /// This member is required.
    public var dataLakeS3Uri: Swift.String?
    /// Data security configurations.
    public var dataSecurityConfig: ComprehendClientTypes.DataSecurityConfig?
    /// Name for the flywheel.
    /// This member is required.
    public var flywheelName: Swift.String?
    /// The model type. You need to set ModelType if you are creating a flywheel for a new model.
    public var modelType: ComprehendClientTypes.ModelType?
    /// The tags to associate with this flywheel.
    public var tags: [ComprehendClientTypes.Tag]?
    /// Configuration about the model associated with the flywheel. You need to set TaskConfig if you are creating a flywheel for a new model.
    public var taskConfig: ComprehendClientTypes.TaskConfig?

    public init(
        activeModelArn: Swift.String? = nil,
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        dataLakeS3Uri: Swift.String? = nil,
        dataSecurityConfig: ComprehendClientTypes.DataSecurityConfig? = nil,
        flywheelName: Swift.String? = nil,
        modelType: ComprehendClientTypes.ModelType? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        taskConfig: ComprehendClientTypes.TaskConfig? = nil
    )
    {
        self.activeModelArn = activeModelArn
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.dataLakeS3Uri = dataLakeS3Uri
        self.dataSecurityConfig = dataSecurityConfig
        self.flywheelName = flywheelName
        self.modelType = modelType
        self.tags = tags
        self.taskConfig = taskConfig
    }
}

public struct CreateFlywheelOutput: Swift.Sendable {
    /// The Amazon Resource Number (ARN) of the active model version.
    public var activeModelArn: Swift.String?
    /// The Amazon Resource Number (ARN) of the flywheel.
    public var flywheelArn: Swift.String?

    public init(
        activeModelArn: Swift.String? = nil,
        flywheelArn: Swift.String? = nil
    )
    {
        self.activeModelArn = activeModelArn
        self.flywheelArn = flywheelArn
    }
}

public struct DeleteDocumentClassifierInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that identifies the document classifier.
    /// This member is required.
    public var documentClassifierArn: Swift.String?

    public init(
        documentClassifierArn: Swift.String? = nil
    )
    {
        self.documentClassifierArn = documentClassifierArn
    }
}

public struct DeleteDocumentClassifierOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteEndpointInput: Swift.Sendable {
    /// The Amazon Resource Number (ARN) of the endpoint being deleted.
    /// This member is required.
    public var endpointArn: Swift.String?

    public init(
        endpointArn: Swift.String? = nil
    )
    {
        self.endpointArn = endpointArn
    }
}

public struct DeleteEndpointOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteEntityRecognizerInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that identifies the entity recognizer.
    /// This member is required.
    public var entityRecognizerArn: Swift.String?

    public init(
        entityRecognizerArn: Swift.String? = nil
    )
    {
        self.entityRecognizerArn = entityRecognizerArn
    }
}

public struct DeleteEntityRecognizerOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteFlywheelInput: Swift.Sendable {
    /// The Amazon Resource Number (ARN) of the flywheel to delete.
    /// This member is required.
    public var flywheelArn: Swift.String?

    public init(
        flywheelArn: Swift.String? = nil
    )
    {
        self.flywheelArn = flywheelArn
    }
}

public struct DeleteFlywheelOutput: Swift.Sendable {

    public init() { }
}

public struct DeleteResourcePolicyInput: Swift.Sendable {
    /// The revision ID of the policy to delete.
    public var policyRevisionId: Swift.String?
    /// The Amazon Resource Name (ARN) of the custom model version that has the policy to delete.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        policyRevisionId: Swift.String? = nil,
        resourceArn: Swift.String? = nil
    )
    {
        self.policyRevisionId = policyRevisionId
        self.resourceArn = resourceArn
    }
}

public struct DeleteResourcePolicyOutput: Swift.Sendable {

    public init() { }
}

public struct DescribeDatasetInput: Swift.Sendable {
    /// The ARN of the dataset.
    /// This member is required.
    public var datasetArn: Swift.String?

    public init(
        datasetArn: Swift.String? = nil
    )
    {
        self.datasetArn = datasetArn
    }
}

extension ComprehendClientTypes {

    public enum DatasetStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case creating
        case failed
        case sdkUnknown(Swift.String)

        public static var allCases: [DatasetStatus] {
            return [
                .completed,
                .creating,
                .failed
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .creating: return "CREATING"
            case .failed: return "FAILED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Properties associated with the dataset.
    public struct DatasetProperties: Swift.Sendable {
        /// Creation time of the dataset.
        public var creationTime: Foundation.Date?
        /// The ARN of the dataset.
        public var datasetArn: Swift.String?
        /// The name of the dataset.
        public var datasetName: Swift.String?
        /// The S3 URI where the dataset is stored.
        public var datasetS3Uri: Swift.String?
        /// The dataset type (training data or test data).
        public var datasetType: ComprehendClientTypes.DatasetType?
        /// Description of the dataset.
        public var description: Swift.String?
        /// Time when the data from the dataset becomes available in the data lake.
        public var endTime: Foundation.Date?
        /// A description of the status of the dataset.
        public var message: Swift.String?
        /// The number of documents in the dataset.
        public var numberOfDocuments: Swift.Int?
        /// The dataset status. While the system creates the dataset, the status is CREATING. When the dataset is ready to use, the status changes to COMPLETED.
        public var status: ComprehendClientTypes.DatasetStatus?

        public init(
            creationTime: Foundation.Date? = nil,
            datasetArn: Swift.String? = nil,
            datasetName: Swift.String? = nil,
            datasetS3Uri: Swift.String? = nil,
            datasetType: ComprehendClientTypes.DatasetType? = nil,
            description: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            message: Swift.String? = nil,
            numberOfDocuments: Swift.Int? = nil,
            status: ComprehendClientTypes.DatasetStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.datasetArn = datasetArn
            self.datasetName = datasetName
            self.datasetS3Uri = datasetS3Uri
            self.datasetType = datasetType
            self.description = description
            self.endTime = endTime
            self.message = message
            self.numberOfDocuments = numberOfDocuments
            self.status = status
        }
    }
}

public struct DescribeDatasetOutput: Swift.Sendable {
    /// The dataset properties.
    public var datasetProperties: ComprehendClientTypes.DatasetProperties?

    public init(
        datasetProperties: ComprehendClientTypes.DatasetProperties? = nil
    )
    {
        self.datasetProperties = datasetProperties
    }
}

/// The specified job was not found. Check the job ID and try again.
public struct JobNotFoundException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "JobNotFoundException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct DescribeDocumentClassificationJobInput: Swift.Sendable {
    /// The identifier that Amazon Comprehend generated for the job. The StartDocumentClassificationJob operation returns this identifier in its response.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

extension ComprehendClientTypes {

    /// The input properties for an inference job. The document reader config field applies only to non-text inputs for custom analysis.
    public struct InputDataConfig: Swift.Sendable {
        /// Provides configuration parameters to override the default actions for extracting text from PDF documents and image files.
        public var documentReaderConfig: ComprehendClientTypes.DocumentReaderConfig?
        /// Specifies how the text in an input file should be processed:
        ///
        /// * ONE_DOC_PER_FILE - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.
        ///
        /// * ONE_DOC_PER_LINE - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.
        public var inputFormat: ComprehendClientTypes.InputFormat?
        /// The Amazon S3 URI for the input data. The URI must be in same Region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files. For example, if you use the URI S3://bucketName/prefix, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            documentReaderConfig: ComprehendClientTypes.DocumentReaderConfig? = nil,
            inputFormat: ComprehendClientTypes.InputFormat? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.documentReaderConfig = documentReaderConfig
            self.inputFormat = inputFormat
            self.s3Uri = s3Uri
        }
    }
}

extension ComprehendClientTypes {

    public enum JobStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case stopped
        case stopRequested
        case submitted
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .stopped,
                .stopRequested,
                .submitted
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .stopped: return "STOPPED"
            case .stopRequested: return "STOP_REQUESTED"
            case .submitted: return "SUBMITTED"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Provides configuration parameters for the output of inference jobs.
    public struct OutputDataConfig: Swift.Sendable {
        /// ID for the Amazon Web Services Key Management Service (KMS) key that Amazon Comprehend uses to encrypt the output results from an analysis job. Specify the Key Id of a symmetric key, because you cannot use an asymmetric key for uploading data to S3. The KmsKeyId can be one of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * KMS Key Alias: "alias/ExampleAlias"
        ///
        /// * ARN of a KMS Key Alias: "arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias"
        public var kmsKeyId: Swift.String?
        /// When you use the OutputDataConfig object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. The URI must be in the same Region as the API endpoint that you are calling. The location is used as the prefix for the actual location of the output file. When the topic detection job is finished, the service creates an output file in a directory specific to the job. The S3Uri field contains the location of the output file, called output.tar.gz. It is a compressed archive that contains the ouput of the operation. For a PII entity detection job, the output file is plain text, not a compressed archive. The output file name is the same as the input file, with .out appended at the end.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3Uri = s3Uri
        }
    }
}

extension ComprehendClientTypes {

    /// Provides information about a document classification job.
    public struct DocumentClassificationJobProperties: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The Amazon Resource Name (ARN) that identifies the document classifier.
        public var documentClassifierArn: Swift.String?
        /// The time that the document classification job completed.
        public var endTime: Foundation.Date?
        /// The Amazon Resource Number (ARN) of the flywheel
        public var flywheelArn: Swift.String?
        /// The input data configuration that you supplied when you created the document classification job.
        public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
        /// The Amazon Resource Name (ARN) of the document classification job. It is a unique, fully qualified identifier for the job. It includes the Amazon Web Services account, Amazon Web Services Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::document-classification-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:document-classification-job/1234abcd12ab34cd56ef1234567890ab
        public var jobArn: Swift.String?
        /// The identifier assigned to the document classification job.
        public var jobId: Swift.String?
        /// The name that you assigned to the document classification job.
        public var jobName: Swift.String?
        /// The current status of the document classification job. If the status is FAILED, the Message field shows the reason for the failure.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// A description of the status of the job.
        public var message: Swift.String?
        /// The output data configuration that you supplied when you created the document classification job.
        public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
        /// The time that the document classification job was submitted for processing.
        public var submitTime: Foundation.Date?
        /// ID for the Amazon Web Services Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your document classification job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init(
            dataAccessRoleArn: Swift.String? = nil,
            documentClassifierArn: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            flywheelArn: Swift.String? = nil,
            inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            message: Swift.String? = nil,
            outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
            submitTime: Foundation.Date? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.documentClassifierArn = documentClassifierArn
            self.endTime = endTime
            self.flywheelArn = flywheelArn
            self.inputDataConfig = inputDataConfig
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.message = message
            self.outputDataConfig = outputDataConfig
            self.submitTime = submitTime
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }
}

public struct DescribeDocumentClassificationJobOutput: Swift.Sendable {
    /// An object that describes the properties associated with the document classification job.
    public var documentClassificationJobProperties: ComprehendClientTypes.DocumentClassificationJobProperties?

    public init(
        documentClassificationJobProperties: ComprehendClientTypes.DocumentClassificationJobProperties? = nil
    )
    {
        self.documentClassificationJobProperties = documentClassificationJobProperties
    }
}

public struct DescribeDocumentClassifierInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that identifies the document classifier. The CreateDocumentClassifier operation returns this identifier in its response.
    /// This member is required.
    public var documentClassifierArn: Swift.String?

    public init(
        documentClassifierArn: Swift.String? = nil
    )
    {
        self.documentClassifierArn = documentClassifierArn
    }
}

extension ComprehendClientTypes {

    public enum ModelStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case deleting
        case inError
        case stopped
        case stopRequested
        case submitted
        case trained
        case trainedWithWarning
        case training
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelStatus] {
            return [
                .deleting,
                .inError,
                .stopped,
                .stopRequested,
                .submitted,
                .trained,
                .trainedWithWarning,
                .training
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .deleting: return "DELETING"
            case .inError: return "IN_ERROR"
            case .stopped: return "STOPPED"
            case .stopRequested: return "STOP_REQUESTED"
            case .submitted: return "SUBMITTED"
            case .trained: return "TRAINED"
            case .trainedWithWarning: return "TRAINED_WITH_WARNING"
            case .training: return "TRAINING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Provides information about a document classifier.
    public struct DocumentClassifierProperties: Swift.Sendable {
        /// Information about the document classifier, including the number of documents used for training the classifier, the number of documents used for test the classifier, and an accuracy rating.
        public var classifierMetadata: ComprehendClientTypes.ClassifierMetadata?
        /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The Amazon Resource Name (ARN) that identifies the document classifier.
        public var documentClassifierArn: Swift.String?
        /// The time that training the document classifier completed.
        public var endTime: Foundation.Date?
        /// The Amazon Resource Number (ARN) of the flywheel
        public var flywheelArn: Swift.String?
        /// The input data configuration that you supplied when you created the document classifier for training.
        public var inputDataConfig: ComprehendClientTypes.DocumentClassifierInputDataConfig?
        /// The language code for the language of the documents that the classifier was trained on.
        public var languageCode: ComprehendClientTypes.LanguageCode?
        /// Additional information about the status of the classifier.
        public var message: Swift.String?
        /// Indicates the mode in which the specific classifier was trained. This also indicates the format of input documents and the format of the confusion matrix. Each classifier can only be trained in one mode and this cannot be changed once the classifier is trained.
        public var mode: ComprehendClientTypes.DocumentClassifierMode?
        /// ID for the KMS key that Amazon Comprehend uses to encrypt trained custom models. The ModelKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var modelKmsKeyId: Swift.String?
        /// Provides output results configuration parameters for custom classifier jobs.
        public var outputDataConfig: ComprehendClientTypes.DocumentClassifierOutputDataConfig?
        /// The Amazon Resource Name (ARN) of the source model. This model was imported from a different Amazon Web Services account to create the document classifier model in your Amazon Web Services account.
        public var sourceModelArn: Swift.String?
        /// The status of the document classifier. If the status is TRAINED the classifier is ready to use. If the status is TRAINED_WITH_WARNINGS the classifier training succeeded, but you should review the warnings returned in the CreateDocumentClassifier response. If the status is FAILED you can see additional information about why the classifier wasn't trained in the Message field.
        public var status: ComprehendClientTypes.ModelStatus?
        /// The time that the document classifier was submitted for training.
        public var submitTime: Foundation.Date?
        /// The time that training of the document classifier was completed. Indicates the time when the training completes on documentation classifiers. You are billed for the time interval between this time and the value of TrainingStartTime.
        public var trainingEndTime: Foundation.Date?
        /// Indicates the time when the training starts on documentation classifiers. You are billed for the time interval between this time and the value of TrainingEndTime.
        public var trainingStartTime: Foundation.Date?
        /// The version name that you assigned to the document classifier.
        public var versionName: Swift.String?
        /// ID for the Amazon Web Services Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your custom classifier. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init(
            classifierMetadata: ComprehendClientTypes.ClassifierMetadata? = nil,
            dataAccessRoleArn: Swift.String? = nil,
            documentClassifierArn: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            flywheelArn: Swift.String? = nil,
            inputDataConfig: ComprehendClientTypes.DocumentClassifierInputDataConfig? = nil,
            languageCode: ComprehendClientTypes.LanguageCode? = nil,
            message: Swift.String? = nil,
            mode: ComprehendClientTypes.DocumentClassifierMode? = nil,
            modelKmsKeyId: Swift.String? = nil,
            outputDataConfig: ComprehendClientTypes.DocumentClassifierOutputDataConfig? = nil,
            sourceModelArn: Swift.String? = nil,
            status: ComprehendClientTypes.ModelStatus? = nil,
            submitTime: Foundation.Date? = nil,
            trainingEndTime: Foundation.Date? = nil,
            trainingStartTime: Foundation.Date? = nil,
            versionName: Swift.String? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.classifierMetadata = classifierMetadata
            self.dataAccessRoleArn = dataAccessRoleArn
            self.documentClassifierArn = documentClassifierArn
            self.endTime = endTime
            self.flywheelArn = flywheelArn
            self.inputDataConfig = inputDataConfig
            self.languageCode = languageCode
            self.message = message
            self.mode = mode
            self.modelKmsKeyId = modelKmsKeyId
            self.outputDataConfig = outputDataConfig
            self.sourceModelArn = sourceModelArn
            self.status = status
            self.submitTime = submitTime
            self.trainingEndTime = trainingEndTime
            self.trainingStartTime = trainingStartTime
            self.versionName = versionName
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }
}

extension ComprehendClientTypes.DocumentClassifierProperties: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DocumentClassifierProperties(dataAccessRoleArn: \(Swift.String(describing: dataAccessRoleArn)), documentClassifierArn: \(Swift.String(describing: documentClassifierArn)), endTime: \(Swift.String(describing: endTime)), flywheelArn: \(Swift.String(describing: flywheelArn)), inputDataConfig: \(Swift.String(describing: inputDataConfig)), languageCode: \(Swift.String(describing: languageCode)), message: \(Swift.String(describing: message)), mode: \(Swift.String(describing: mode)), modelKmsKeyId: \(Swift.String(describing: modelKmsKeyId)), outputDataConfig: \(Swift.String(describing: outputDataConfig)), sourceModelArn: \(Swift.String(describing: sourceModelArn)), status: \(Swift.String(describing: status)), submitTime: \(Swift.String(describing: submitTime)), trainingEndTime: \(Swift.String(describing: trainingEndTime)), trainingStartTime: \(Swift.String(describing: trainingStartTime)), versionName: \(Swift.String(describing: versionName)), volumeKmsKeyId: \(Swift.String(describing: volumeKmsKeyId)), vpcConfig: \(Swift.String(describing: vpcConfig)), classifierMetadata: \"CONTENT_REDACTED\")"}
}

public struct DescribeDocumentClassifierOutput: Swift.Sendable {
    /// An object that contains the properties associated with a document classifier.
    public var documentClassifierProperties: ComprehendClientTypes.DocumentClassifierProperties?

    public init(
        documentClassifierProperties: ComprehendClientTypes.DocumentClassifierProperties? = nil
    )
    {
        self.documentClassifierProperties = documentClassifierProperties
    }
}

public struct DescribeDominantLanguageDetectionJobInput: Swift.Sendable {
    /// The identifier that Amazon Comprehend generated for the job. The StartDominantLanguageDetectionJob operation returns this identifier in its response.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

extension ComprehendClientTypes {

    /// Provides information about a dominant language detection job.
    public struct DominantLanguageDetectionJobProperties: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The time that the dominant language detection job completed.
        public var endTime: Foundation.Date?
        /// The input data configuration that you supplied when you created the dominant language detection job.
        public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
        /// The Amazon Resource Name (ARN) of the dominant language detection job. It is a unique, fully qualified identifier for the job. It includes the Amazon Web Services account, Amazon Web Services Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::dominant-language-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:dominant-language-detection-job/1234abcd12ab34cd56ef1234567890ab
        public var jobArn: Swift.String?
        /// The identifier assigned to the dominant language detection job.
        public var jobId: Swift.String?
        /// The name that you assigned to the dominant language detection job.
        public var jobName: Swift.String?
        /// The current status of the dominant language detection job. If the status is FAILED, the Message field shows the reason for the failure.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// A description for the status of a job.
        public var message: Swift.String?
        /// The output data configuration that you supplied when you created the dominant language detection job.
        public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
        /// The time that the dominant language detection job was submitted for processing.
        public var submitTime: Foundation.Date?
        /// ID for the Amazon Web Services Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your dominant language detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init(
            dataAccessRoleArn: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            message: Swift.String? = nil,
            outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
            submitTime: Foundation.Date? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.inputDataConfig = inputDataConfig
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.message = message
            self.outputDataConfig = outputDataConfig
            self.submitTime = submitTime
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }
}

public struct DescribeDominantLanguageDetectionJobOutput: Swift.Sendable {
    /// An object that contains the properties associated with a dominant language detection job.
    public var dominantLanguageDetectionJobProperties: ComprehendClientTypes.DominantLanguageDetectionJobProperties?

    public init(
        dominantLanguageDetectionJobProperties: ComprehendClientTypes.DominantLanguageDetectionJobProperties? = nil
    )
    {
        self.dominantLanguageDetectionJobProperties = dominantLanguageDetectionJobProperties
    }
}

public struct DescribeEndpointInput: Swift.Sendable {
    /// The Amazon Resource Number (ARN) of the endpoint being described.
    /// This member is required.
    public var endpointArn: Swift.String?

    public init(
        endpointArn: Swift.String? = nil
    )
    {
        self.endpointArn = endpointArn
    }
}

extension ComprehendClientTypes {

    public enum EndpointStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case creating
        case deleting
        case failed
        case inService
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [EndpointStatus] {
            return [
                .creating,
                .deleting,
                .failed,
                .inService,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .inService: return "IN_SERVICE"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Specifies information about the specified endpoint. For information about endpoints, see [Managing endpoints](https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html).
    public struct EndpointProperties: Swift.Sendable {
        /// The creation date and time of the endpoint.
        public var creationTime: Foundation.Date?
        /// The number of inference units currently used by the model using this endpoint.
        public var currentInferenceUnits: Swift.Int?
        /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to trained custom models encrypted with a customer managed key (ModelKmsKeyId).
        public var dataAccessRoleArn: Swift.String?
        /// Data access role ARN to use in case the new model is encrypted with a customer KMS key.
        public var desiredDataAccessRoleArn: Swift.String?
        /// The desired number of inference units to be used by the model using this endpoint. Each inference unit represents of a throughput of 100 characters per second.
        public var desiredInferenceUnits: Swift.Int?
        /// ARN of the new model to use for updating an existing endpoint. This ARN is going to be different from the model ARN when the update is in progress
        public var desiredModelArn: Swift.String?
        /// The Amazon Resource Number (ARN) of the endpoint.
        public var endpointArn: Swift.String?
        /// The Amazon Resource Number (ARN) of the flywheel
        public var flywheelArn: Swift.String?
        /// The date and time that the endpoint was last modified.
        public var lastModifiedTime: Foundation.Date?
        /// Specifies a reason for failure in cases of Failed status.
        public var message: Swift.String?
        /// The Amazon Resource Number (ARN) of the model to which the endpoint is attached.
        public var modelArn: Swift.String?
        /// Specifies the status of the endpoint. Because the endpoint updates and creation are asynchronous, so customers will need to wait for the endpoint to be Ready status before making inference requests.
        public var status: ComprehendClientTypes.EndpointStatus?

        public init(
            creationTime: Foundation.Date? = nil,
            currentInferenceUnits: Swift.Int? = nil,
            dataAccessRoleArn: Swift.String? = nil,
            desiredDataAccessRoleArn: Swift.String? = nil,
            desiredInferenceUnits: Swift.Int? = nil,
            desiredModelArn: Swift.String? = nil,
            endpointArn: Swift.String? = nil,
            flywheelArn: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            message: Swift.String? = nil,
            modelArn: Swift.String? = nil,
            status: ComprehendClientTypes.EndpointStatus? = nil
        )
        {
            self.creationTime = creationTime
            self.currentInferenceUnits = currentInferenceUnits
            self.dataAccessRoleArn = dataAccessRoleArn
            self.desiredDataAccessRoleArn = desiredDataAccessRoleArn
            self.desiredInferenceUnits = desiredInferenceUnits
            self.desiredModelArn = desiredModelArn
            self.endpointArn = endpointArn
            self.flywheelArn = flywheelArn
            self.lastModifiedTime = lastModifiedTime
            self.message = message
            self.modelArn = modelArn
            self.status = status
        }
    }
}

public struct DescribeEndpointOutput: Swift.Sendable {
    /// Describes information associated with the specific endpoint.
    public var endpointProperties: ComprehendClientTypes.EndpointProperties?

    public init(
        endpointProperties: ComprehendClientTypes.EndpointProperties? = nil
    )
    {
        self.endpointProperties = endpointProperties
    }
}

public struct DescribeEntitiesDetectionJobInput: Swift.Sendable {
    /// The identifier that Amazon Comprehend generated for the job. The StartEntitiesDetectionJob operation returns this identifier in its response.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

extension ComprehendClientTypes {

    /// Provides information about an entities detection job.
    public struct EntitiesDetectionJobProperties: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The time that the entities detection job completed
        public var endTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) that identifies the entity recognizer.
        public var entityRecognizerArn: Swift.String?
        /// The Amazon Resource Name (ARN) of the flywheel associated with this job.
        public var flywheelArn: Swift.String?
        /// The input data configuration that you supplied when you created the entities detection job.
        public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
        /// The Amazon Resource Name (ARN) of the entities detection job. It is a unique, fully qualified identifier for the job. It includes the Amazon Web Services account, Amazon Web Services Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::entities-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:entities-detection-job/1234abcd12ab34cd56ef1234567890ab
        public var jobArn: Swift.String?
        /// The identifier assigned to the entities detection job.
        public var jobId: Swift.String?
        /// The name that you assigned the entities detection job.
        public var jobName: Swift.String?
        /// The current status of the entities detection job. If the status is FAILED, the Message field shows the reason for the failure.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// The language code of the input documents.
        public var languageCode: ComprehendClientTypes.LanguageCode?
        /// A description of the status of a job.
        public var message: Swift.String?
        /// The output data configuration that you supplied when you created the entities detection job.
        public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
        /// The time that the entities detection job was submitted for processing.
        public var submitTime: Foundation.Date?
        /// ID for the Amazon Web Services Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your entity detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init(
            dataAccessRoleArn: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            entityRecognizerArn: Swift.String? = nil,
            flywheelArn: Swift.String? = nil,
            inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            languageCode: ComprehendClientTypes.LanguageCode? = nil,
            message: Swift.String? = nil,
            outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
            submitTime: Foundation.Date? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.entityRecognizerArn = entityRecognizerArn
            self.flywheelArn = flywheelArn
            self.inputDataConfig = inputDataConfig
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.languageCode = languageCode
            self.message = message
            self.outputDataConfig = outputDataConfig
            self.submitTime = submitTime
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }
}

public struct DescribeEntitiesDetectionJobOutput: Swift.Sendable {
    /// An object that contains the properties associated with an entities detection job.
    public var entitiesDetectionJobProperties: ComprehendClientTypes.EntitiesDetectionJobProperties?

    public init(
        entitiesDetectionJobProperties: ComprehendClientTypes.EntitiesDetectionJobProperties? = nil
    )
    {
        self.entitiesDetectionJobProperties = entitiesDetectionJobProperties
    }
}

public struct DescribeEntityRecognizerInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that identifies the entity recognizer.
    /// This member is required.
    public var entityRecognizerArn: Swift.String?

    public init(
        entityRecognizerArn: Swift.String? = nil
    )
    {
        self.entityRecognizerArn = entityRecognizerArn
    }
}

extension ComprehendClientTypes {

    /// Output data configuration.
    public struct EntityRecognizerOutputDataConfig: Swift.Sendable {
        /// The Amazon S3 prefix for the data lake location of the flywheel statistics.
        public var flywheelStatsS3Prefix: Swift.String?

        public init(
            flywheelStatsS3Prefix: Swift.String? = nil
        )
        {
            self.flywheelStatsS3Prefix = flywheelStatsS3Prefix
        }
    }
}

extension ComprehendClientTypes {

    /// Detailed information about the accuracy of an entity recognizer for a specific entity type.
    public struct EntityTypesEvaluationMetrics: Swift.Sendable {
        /// A measure of how accurate the recognizer results are for a specific entity type in the test data. It is derived from the Precision and Recall values. The F1Score is the harmonic average of the two scores. The highest score is 1, and the worst score is 0.
        public var f1Score: Swift.Double?
        /// A measure of the usefulness of the recognizer results for a specific entity type in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones.
        public var precision: Swift.Double?
        /// A measure of how complete the recognizer results are for a specific entity type in the test data. High recall means that the recognizer returned most of the relevant results.
        public var recall: Swift.Double?

        public init(
            f1Score: Swift.Double? = nil,
            precision: Swift.Double? = nil,
            recall: Swift.Double? = nil
        )
        {
            self.f1Score = f1Score
            self.precision = precision
            self.recall = recall
        }
    }
}

extension ComprehendClientTypes {

    /// Individual item from the list of entity types in the metadata of an entity recognizer.
    public struct EntityRecognizerMetadataEntityTypesListItem: Swift.Sendable {
        /// Detailed information about the accuracy of the entity recognizer for a specific item on the list of entity types.
        public var evaluationMetrics: ComprehendClientTypes.EntityTypesEvaluationMetrics?
        /// Indicates the number of times the given entity type was seen in the training data.
        public var numberOfTrainMentions: Swift.Int?
        /// Type of entity from the list of entity types in the metadata of an entity recognizer.
        public var type: Swift.String?

        public init(
            evaluationMetrics: ComprehendClientTypes.EntityTypesEvaluationMetrics? = nil,
            numberOfTrainMentions: Swift.Int? = nil,
            type: Swift.String? = nil
        )
        {
            self.evaluationMetrics = evaluationMetrics
            self.numberOfTrainMentions = numberOfTrainMentions
            self.type = type
        }
    }
}

extension ComprehendClientTypes {

    /// Detailed information about the accuracy of an entity recognizer.
    public struct EntityRecognizerEvaluationMetrics: Swift.Sendable {
        /// A measure of how accurate the recognizer results are for the test data. It is derived from the Precision and Recall values. The F1Score is the harmonic average of the two scores. For plain text entity recognizer models, the range is 0 to 100, where 100 is the best score. For PDF/Word entity recognizer models, the range is 0 to 1, where 1 is the best score.
        public var f1Score: Swift.Double?
        /// A measure of the usefulness of the recognizer results in the test data. High precision means that the recognizer returned substantially more relevant results than irrelevant ones.
        public var precision: Swift.Double?
        /// A measure of how complete the recognizer results are for the test data. High recall means that the recognizer returned most of the relevant results.
        public var recall: Swift.Double?

        public init(
            f1Score: Swift.Double? = nil,
            precision: Swift.Double? = nil,
            recall: Swift.Double? = nil
        )
        {
            self.f1Score = f1Score
            self.precision = precision
            self.recall = recall
        }
    }
}

extension ComprehendClientTypes {

    /// Detailed information about an entity recognizer.
    public struct EntityRecognizerMetadata: Swift.Sendable {
        /// Entity types from the metadata of an entity recognizer.
        public var entityTypes: [ComprehendClientTypes.EntityRecognizerMetadataEntityTypesListItem]?
        /// Detailed information about the accuracy of an entity recognizer.
        public var evaluationMetrics: ComprehendClientTypes.EntityRecognizerEvaluationMetrics?
        /// The number of documents in the input data that were used to test the entity recognizer. Typically this is 10 to 20 percent of the input documents.
        public var numberOfTestDocuments: Swift.Int?
        /// The number of documents in the input data that were used to train the entity recognizer. Typically this is 80 to 90 percent of the input documents.
        public var numberOfTrainedDocuments: Swift.Int?

        public init(
            entityTypes: [ComprehendClientTypes.EntityRecognizerMetadataEntityTypesListItem]? = nil,
            evaluationMetrics: ComprehendClientTypes.EntityRecognizerEvaluationMetrics? = nil,
            numberOfTestDocuments: Swift.Int? = nil,
            numberOfTrainedDocuments: Swift.Int? = nil
        )
        {
            self.entityTypes = entityTypes
            self.evaluationMetrics = evaluationMetrics
            self.numberOfTestDocuments = numberOfTestDocuments
            self.numberOfTrainedDocuments = numberOfTrainedDocuments
        }
    }
}

extension ComprehendClientTypes.EntityRecognizerMetadata: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension ComprehendClientTypes {

    /// Describes information about an entity recognizer.
    public struct EntityRecognizerProperties: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The time that the recognizer creation completed.
        public var endTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) that identifies the entity recognizer.
        public var entityRecognizerArn: Swift.String?
        /// The Amazon Resource Number (ARN) of the flywheel
        public var flywheelArn: Swift.String?
        /// The input data properties of an entity recognizer.
        public var inputDataConfig: ComprehendClientTypes.EntityRecognizerInputDataConfig?
        /// The language of the input documents. All documents must be in the same language. Only English ("en") is currently supported.
        public var languageCode: ComprehendClientTypes.LanguageCode?
        /// A description of the status of the recognizer.
        public var message: Swift.String?
        /// ID for the KMS key that Amazon Comprehend uses to encrypt trained custom models. The ModelKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var modelKmsKeyId: Swift.String?
        /// Output data configuration.
        public var outputDataConfig: ComprehendClientTypes.EntityRecognizerOutputDataConfig?
        /// Provides information about an entity recognizer.
        public var recognizerMetadata: ComprehendClientTypes.EntityRecognizerMetadata?
        /// The Amazon Resource Name (ARN) of the source model. This model was imported from a different Amazon Web Services account to create the entity recognizer model in your Amazon Web Services account.
        public var sourceModelArn: Swift.String?
        /// Provides the status of the entity recognizer.
        public var status: ComprehendClientTypes.ModelStatus?
        /// The time that the recognizer was submitted for processing.
        public var submitTime: Foundation.Date?
        /// The time that training of the entity recognizer was completed.
        public var trainingEndTime: Foundation.Date?
        /// The time that training of the entity recognizer started.
        public var trainingStartTime: Foundation.Date?
        /// The version name you assigned to the entity recognizer.
        public var versionName: Swift.String?
        /// ID for the Amazon Web Services Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your custom entity recognizer. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init(
            dataAccessRoleArn: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            entityRecognizerArn: Swift.String? = nil,
            flywheelArn: Swift.String? = nil,
            inputDataConfig: ComprehendClientTypes.EntityRecognizerInputDataConfig? = nil,
            languageCode: ComprehendClientTypes.LanguageCode? = nil,
            message: Swift.String? = nil,
            modelKmsKeyId: Swift.String? = nil,
            outputDataConfig: ComprehendClientTypes.EntityRecognizerOutputDataConfig? = nil,
            recognizerMetadata: ComprehendClientTypes.EntityRecognizerMetadata? = nil,
            sourceModelArn: Swift.String? = nil,
            status: ComprehendClientTypes.ModelStatus? = nil,
            submitTime: Foundation.Date? = nil,
            trainingEndTime: Foundation.Date? = nil,
            trainingStartTime: Foundation.Date? = nil,
            versionName: Swift.String? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.entityRecognizerArn = entityRecognizerArn
            self.flywheelArn = flywheelArn
            self.inputDataConfig = inputDataConfig
            self.languageCode = languageCode
            self.message = message
            self.modelKmsKeyId = modelKmsKeyId
            self.outputDataConfig = outputDataConfig
            self.recognizerMetadata = recognizerMetadata
            self.sourceModelArn = sourceModelArn
            self.status = status
            self.submitTime = submitTime
            self.trainingEndTime = trainingEndTime
            self.trainingStartTime = trainingStartTime
            self.versionName = versionName
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }
}

extension ComprehendClientTypes.EntityRecognizerProperties: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EntityRecognizerProperties(dataAccessRoleArn: \(Swift.String(describing: dataAccessRoleArn)), endTime: \(Swift.String(describing: endTime)), entityRecognizerArn: \(Swift.String(describing: entityRecognizerArn)), flywheelArn: \(Swift.String(describing: flywheelArn)), inputDataConfig: \(Swift.String(describing: inputDataConfig)), languageCode: \(Swift.String(describing: languageCode)), message: \(Swift.String(describing: message)), modelKmsKeyId: \(Swift.String(describing: modelKmsKeyId)), outputDataConfig: \(Swift.String(describing: outputDataConfig)), sourceModelArn: \(Swift.String(describing: sourceModelArn)), status: \(Swift.String(describing: status)), submitTime: \(Swift.String(describing: submitTime)), trainingEndTime: \(Swift.String(describing: trainingEndTime)), trainingStartTime: \(Swift.String(describing: trainingStartTime)), versionName: \(Swift.String(describing: versionName)), volumeKmsKeyId: \(Swift.String(describing: volumeKmsKeyId)), vpcConfig: \(Swift.String(describing: vpcConfig)), recognizerMetadata: \"CONTENT_REDACTED\")"}
}

public struct DescribeEntityRecognizerOutput: Swift.Sendable {
    /// Describes information associated with an entity recognizer.
    public var entityRecognizerProperties: ComprehendClientTypes.EntityRecognizerProperties?

    public init(
        entityRecognizerProperties: ComprehendClientTypes.EntityRecognizerProperties? = nil
    )
    {
        self.entityRecognizerProperties = entityRecognizerProperties
    }
}

public struct DescribeEventsDetectionJobInput: Swift.Sendable {
    /// The identifier of the events detection job.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

extension ComprehendClientTypes {

    /// Provides information about an events detection job.
    public struct EventsDetectionJobProperties: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The time that the events detection job completed.
        public var endTime: Foundation.Date?
        /// The input data configuration that you supplied when you created the events detection job.
        public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
        /// The Amazon Resource Name (ARN) of the events detection job. It is a unique, fully qualified identifier for the job. It includes the Amazon Web Services account, Amazon Web Services Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::events-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:events-detection-job/1234abcd12ab34cd56ef1234567890ab
        public var jobArn: Swift.String?
        /// The identifier assigned to the events detection job.
        public var jobId: Swift.String?
        /// The name you assigned the events detection job.
        public var jobName: Swift.String?
        /// The current status of the events detection job.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// The language code of the input documents.
        public var languageCode: ComprehendClientTypes.LanguageCode?
        /// A description of the status of the events detection job.
        public var message: Swift.String?
        /// The output data configuration that you supplied when you created the events detection job.
        public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
        /// The time that the events detection job was submitted for processing.
        public var submitTime: Foundation.Date?
        /// The types of events that are detected by the job.
        public var targetEventTypes: [Swift.String]?

        public init(
            dataAccessRoleArn: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            languageCode: ComprehendClientTypes.LanguageCode? = nil,
            message: Swift.String? = nil,
            outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
            submitTime: Foundation.Date? = nil,
            targetEventTypes: [Swift.String]? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.inputDataConfig = inputDataConfig
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.languageCode = languageCode
            self.message = message
            self.outputDataConfig = outputDataConfig
            self.submitTime = submitTime
            self.targetEventTypes = targetEventTypes
        }
    }
}

public struct DescribeEventsDetectionJobOutput: Swift.Sendable {
    /// An object that contains the properties associated with an event detection job.
    public var eventsDetectionJobProperties: ComprehendClientTypes.EventsDetectionJobProperties?

    public init(
        eventsDetectionJobProperties: ComprehendClientTypes.EventsDetectionJobProperties? = nil
    )
    {
        self.eventsDetectionJobProperties = eventsDetectionJobProperties
    }
}

public struct DescribeFlywheelInput: Swift.Sendable {
    /// The Amazon Resource Number (ARN) of the flywheel.
    /// This member is required.
    public var flywheelArn: Swift.String?

    public init(
        flywheelArn: Swift.String? = nil
    )
    {
        self.flywheelArn = flywheelArn
    }
}

extension ComprehendClientTypes {

    public enum FlywheelStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case active
        case creating
        case deleting
        case failed
        case updating
        case sdkUnknown(Swift.String)

        public static var allCases: [FlywheelStatus] {
            return [
                .active,
                .creating,
                .deleting,
                .failed,
                .updating
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .creating: return "CREATING"
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .updating: return "UPDATING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// The flywheel properties.
    public struct FlywheelProperties: Swift.Sendable {
        /// The Amazon Resource Number (ARN) of the active model version.
        public var activeModelArn: Swift.String?
        /// Creation time of the flywheel.
        public var creationTime: Foundation.Date?
        /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend permission to access the flywheel data.
        public var dataAccessRoleArn: Swift.String?
        /// Amazon S3 URI of the data lake location.
        public var dataLakeS3Uri: Swift.String?
        /// Data security configuration.
        public var dataSecurityConfig: ComprehendClientTypes.DataSecurityConfig?
        /// The Amazon Resource Number (ARN) of the flywheel.
        public var flywheelArn: Swift.String?
        /// Last modified time for the flywheel.
        public var lastModifiedTime: Foundation.Date?
        /// The most recent flywheel iteration.
        public var latestFlywheelIteration: Swift.String?
        /// A description of the status of the flywheel.
        public var message: Swift.String?
        /// Model type of the flywheel's model.
        public var modelType: ComprehendClientTypes.ModelType?
        /// The status of the flywheel.
        public var status: ComprehendClientTypes.FlywheelStatus?
        /// Configuration about the model associated with a flywheel.
        public var taskConfig: ComprehendClientTypes.TaskConfig?

        public init(
            activeModelArn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            dataAccessRoleArn: Swift.String? = nil,
            dataLakeS3Uri: Swift.String? = nil,
            dataSecurityConfig: ComprehendClientTypes.DataSecurityConfig? = nil,
            flywheelArn: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            latestFlywheelIteration: Swift.String? = nil,
            message: Swift.String? = nil,
            modelType: ComprehendClientTypes.ModelType? = nil,
            status: ComprehendClientTypes.FlywheelStatus? = nil,
            taskConfig: ComprehendClientTypes.TaskConfig? = nil
        )
        {
            self.activeModelArn = activeModelArn
            self.creationTime = creationTime
            self.dataAccessRoleArn = dataAccessRoleArn
            self.dataLakeS3Uri = dataLakeS3Uri
            self.dataSecurityConfig = dataSecurityConfig
            self.flywheelArn = flywheelArn
            self.lastModifiedTime = lastModifiedTime
            self.latestFlywheelIteration = latestFlywheelIteration
            self.message = message
            self.modelType = modelType
            self.status = status
            self.taskConfig = taskConfig
        }
    }
}

public struct DescribeFlywheelOutput: Swift.Sendable {
    /// The flywheel properties.
    public var flywheelProperties: ComprehendClientTypes.FlywheelProperties?

    public init(
        flywheelProperties: ComprehendClientTypes.FlywheelProperties? = nil
    )
    {
        self.flywheelProperties = flywheelProperties
    }
}

public struct DescribeFlywheelIterationInput: Swift.Sendable {
    ///
    /// This member is required.
    public var flywheelArn: Swift.String?
    ///
    /// This member is required.
    public var flywheelIterationId: Swift.String?

    public init(
        flywheelArn: Swift.String? = nil,
        flywheelIterationId: Swift.String? = nil
    )
    {
        self.flywheelArn = flywheelArn
        self.flywheelIterationId = flywheelIterationId
    }
}

extension ComprehendClientTypes {

    /// The evaluation metrics associated with the evaluated model.
    public struct FlywheelModelEvaluationMetrics: Swift.Sendable {
        /// Average accuracy metric for the model.
        public var averageAccuracy: Swift.Double?
        /// The average F1 score from the evaluation metrics.
        public var averageF1Score: Swift.Double?
        /// Average precision metric for the model.
        public var averagePrecision: Swift.Double?
        /// Average recall metric for the model.
        public var averageRecall: Swift.Double?

        public init(
            averageAccuracy: Swift.Double? = nil,
            averageF1Score: Swift.Double? = nil,
            averagePrecision: Swift.Double? = nil,
            averageRecall: Swift.Double? = nil
        )
        {
            self.averageAccuracy = averageAccuracy
            self.averageF1Score = averageF1Score
            self.averagePrecision = averagePrecision
            self.averageRecall = averageRecall
        }
    }
}

extension ComprehendClientTypes {

    public enum FlywheelIterationStatus: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case completed
        case evaluating
        case failed
        case stopped
        case stopRequested
        case training
        case sdkUnknown(Swift.String)

        public static var allCases: [FlywheelIterationStatus] {
            return [
                .completed,
                .evaluating,
                .failed,
                .stopped,
                .stopRequested,
                .training
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .evaluating: return "EVALUATING"
            case .failed: return "FAILED"
            case .stopped: return "STOPPED"
            case .stopRequested: return "STOP_REQUESTED"
            case .training: return "TRAINING"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// The configuration properties of a flywheel iteration.
    public struct FlywheelIterationProperties: Swift.Sendable {
        /// The creation start time of the flywheel iteration.
        public var creationTime: Foundation.Date?
        /// The completion time of this flywheel iteration.
        public var endTime: Foundation.Date?
        /// The ARN of the evaluated model associated with this flywheel iteration.
        public var evaluatedModelArn: Swift.String?
        /// The evaluation metrics associated with the evaluated model.
        public var evaluatedModelMetrics: ComprehendClientTypes.FlywheelModelEvaluationMetrics?
        ///
        public var evaluationManifestS3Prefix: Swift.String?
        ///
        public var flywheelArn: Swift.String?
        ///
        public var flywheelIterationId: Swift.String?
        /// A description of the status of the flywheel iteration.
        public var message: Swift.String?
        /// The status of the flywheel iteration.
        public var status: ComprehendClientTypes.FlywheelIterationStatus?
        /// The ARN of the trained model associated with this flywheel iteration.
        public var trainedModelArn: Swift.String?
        /// The metrics associated with the trained model.
        public var trainedModelMetrics: ComprehendClientTypes.FlywheelModelEvaluationMetrics?

        public init(
            creationTime: Foundation.Date? = nil,
            endTime: Foundation.Date? = nil,
            evaluatedModelArn: Swift.String? = nil,
            evaluatedModelMetrics: ComprehendClientTypes.FlywheelModelEvaluationMetrics? = nil,
            evaluationManifestS3Prefix: Swift.String? = nil,
            flywheelArn: Swift.String? = nil,
            flywheelIterationId: Swift.String? = nil,
            message: Swift.String? = nil,
            status: ComprehendClientTypes.FlywheelIterationStatus? = nil,
            trainedModelArn: Swift.String? = nil,
            trainedModelMetrics: ComprehendClientTypes.FlywheelModelEvaluationMetrics? = nil
        )
        {
            self.creationTime = creationTime
            self.endTime = endTime
            self.evaluatedModelArn = evaluatedModelArn
            self.evaluatedModelMetrics = evaluatedModelMetrics
            self.evaluationManifestS3Prefix = evaluationManifestS3Prefix
            self.flywheelArn = flywheelArn
            self.flywheelIterationId = flywheelIterationId
            self.message = message
            self.status = status
            self.trainedModelArn = trainedModelArn
            self.trainedModelMetrics = trainedModelMetrics
        }
    }
}

public struct DescribeFlywheelIterationOutput: Swift.Sendable {
    /// The configuration properties of a flywheel iteration.
    public var flywheelIterationProperties: ComprehendClientTypes.FlywheelIterationProperties?

    public init(
        flywheelIterationProperties: ComprehendClientTypes.FlywheelIterationProperties? = nil
    )
    {
        self.flywheelIterationProperties = flywheelIterationProperties
    }
}

public struct DescribeKeyPhrasesDetectionJobInput: Swift.Sendable {
    /// The identifier that Amazon Comprehend generated for the job. The StartKeyPhrasesDetectionJob operation returns this identifier in its response.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

extension ComprehendClientTypes {

    /// Provides information about a key phrases detection job.
    public struct KeyPhrasesDetectionJobProperties: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The time that the key phrases detection job completed.
        public var endTime: Foundation.Date?
        /// The input data configuration that you supplied when you created the key phrases detection job.
        public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
        /// The Amazon Resource Name (ARN) of the key phrases detection job. It is a unique, fully qualified identifier for the job. It includes the Amazon Web Services account, Amazon Web Services Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::key-phrases-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:key-phrases-detection-job/1234abcd12ab34cd56ef1234567890ab
        public var jobArn: Swift.String?
        /// The identifier assigned to the key phrases detection job.
        public var jobId: Swift.String?
        /// The name that you assigned the key phrases detection job.
        public var jobName: Swift.String?
        /// The current status of the key phrases detection job. If the status is FAILED, the Message field shows the reason for the failure.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// The language code of the input documents.
        public var languageCode: ComprehendClientTypes.LanguageCode?
        /// A description of the status of a job.
        public var message: Swift.String?
        /// The output data configuration that you supplied when you created the key phrases detection job.
        public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
        /// The time that the key phrases detection job was submitted for processing.
        public var submitTime: Foundation.Date?
        /// ID for the KMS key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your key phrases detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init(
            dataAccessRoleArn: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            languageCode: ComprehendClientTypes.LanguageCode? = nil,
            message: Swift.String? = nil,
            outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
            submitTime: Foundation.Date? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.inputDataConfig = inputDataConfig
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.languageCode = languageCode
            self.message = message
            self.outputDataConfig = outputDataConfig
            self.submitTime = submitTime
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }
}

public struct DescribeKeyPhrasesDetectionJobOutput: Swift.Sendable {
    /// An object that contains the properties associated with a key phrases detection job.
    public var keyPhrasesDetectionJobProperties: ComprehendClientTypes.KeyPhrasesDetectionJobProperties?

    public init(
        keyPhrasesDetectionJobProperties: ComprehendClientTypes.KeyPhrasesDetectionJobProperties? = nil
    )
    {
        self.keyPhrasesDetectionJobProperties = keyPhrasesDetectionJobProperties
    }
}

public struct DescribePiiEntitiesDetectionJobInput: Swift.Sendable {
    /// The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

extension ComprehendClientTypes {

    public enum PiiEntitiesDetectionMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case onlyOffsets
        case onlyRedaction
        case sdkUnknown(Swift.String)

        public static var allCases: [PiiEntitiesDetectionMode] {
            return [
                .onlyOffsets,
                .onlyRedaction
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .onlyOffsets: return "ONLY_OFFSETS"
            case .onlyRedaction: return "ONLY_REDACTION"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Provides configuration parameters for the output of PII entity detection jobs.
    public struct PiiOutputDataConfig: Swift.Sendable {
        /// ID for the Amazon Web Services Key Management Service (KMS) key that Amazon Comprehend uses to encrypt the output results from an analysis job.
        public var kmsKeyId: Swift.String?
        /// When you use the PiiOutputDataConfig object with asynchronous operations, you specify the Amazon S3 location where you want to write the output data. For a PII entity detection job, the output file is plain text, not a compressed archive. The output file name is the same as the input file, with .out appended at the end.
        /// This member is required.
        public var s3Uri: Swift.String?

        public init(
            kmsKeyId: Swift.String? = nil,
            s3Uri: Swift.String? = nil
        )
        {
            self.kmsKeyId = kmsKeyId
            self.s3Uri = s3Uri
        }
    }
}

extension ComprehendClientTypes {

    public enum PiiEntitiesDetectionMaskMode: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case mask
        case replaceWithPiiEntityType
        case sdkUnknown(Swift.String)

        public static var allCases: [PiiEntitiesDetectionMaskMode] {
            return [
                .mask,
                .replaceWithPiiEntityType
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .mask: return "MASK"
            case .replaceWithPiiEntityType: return "REPLACE_WITH_PII_ENTITY_TYPE"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Provides configuration parameters for PII entity redaction.
    public struct RedactionConfig: Swift.Sendable {
        /// A character that replaces each character in the redacted PII entity.
        public var maskCharacter: Swift.String?
        /// Specifies whether the PII entity is redacted with the mask character or the entity type.
        public var maskMode: ComprehendClientTypes.PiiEntitiesDetectionMaskMode?
        /// An array of the types of PII entities that Amazon Comprehend detects in the input text for your request.
        public var piiEntityTypes: [ComprehendClientTypes.PiiEntityType]?

        public init(
            maskCharacter: Swift.String? = nil,
            maskMode: ComprehendClientTypes.PiiEntitiesDetectionMaskMode? = nil,
            piiEntityTypes: [ComprehendClientTypes.PiiEntityType]? = nil
        )
        {
            self.maskCharacter = maskCharacter
            self.maskMode = maskMode
            self.piiEntityTypes = piiEntityTypes
        }
    }
}

extension ComprehendClientTypes {

    /// Provides information about a PII entities detection job.
    public struct PiiEntitiesDetectionJobProperties: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The time that the PII entities detection job completed.
        public var endTime: Foundation.Date?
        /// The input properties for a PII entities detection job.
        public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
        /// The Amazon Resource Name (ARN) of the PII entities detection job. It is a unique, fully qualified identifier for the job. It includes the Amazon Web Services account, Amazon Web Services Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::pii-entities-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:pii-entities-detection-job/1234abcd12ab34cd56ef1234567890ab
        public var jobArn: Swift.String?
        /// The identifier assigned to the PII entities detection job.
        public var jobId: Swift.String?
        /// The name that you assigned the PII entities detection job.
        public var jobName: Swift.String?
        /// The current status of the PII entities detection job. If the status is FAILED, the Message field shows the reason for the failure.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// The language code of the input documents.
        public var languageCode: ComprehendClientTypes.LanguageCode?
        /// A description of the status of a job.
        public var message: Swift.String?
        /// Specifies whether the output provides the locations (offsets) of PII entities or a file in which PII entities are redacted.
        public var mode: ComprehendClientTypes.PiiEntitiesDetectionMode?
        /// The output data configuration that you supplied when you created the PII entities detection job.
        public var outputDataConfig: ComprehendClientTypes.PiiOutputDataConfig?
        /// Provides configuration parameters for PII entity redaction. This parameter is required if you set the Mode parameter to ONLY_REDACTION. In that case, you must provide a RedactionConfig definition that includes the PiiEntityTypes parameter.
        public var redactionConfig: ComprehendClientTypes.RedactionConfig?
        /// The time that the PII entities detection job was submitted for processing.
        public var submitTime: Foundation.Date?

        public init(
            dataAccessRoleArn: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            languageCode: ComprehendClientTypes.LanguageCode? = nil,
            message: Swift.String? = nil,
            mode: ComprehendClientTypes.PiiEntitiesDetectionMode? = nil,
            outputDataConfig: ComprehendClientTypes.PiiOutputDataConfig? = nil,
            redactionConfig: ComprehendClientTypes.RedactionConfig? = nil,
            submitTime: Foundation.Date? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.inputDataConfig = inputDataConfig
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.languageCode = languageCode
            self.message = message
            self.mode = mode
            self.outputDataConfig = outputDataConfig
            self.redactionConfig = redactionConfig
            self.submitTime = submitTime
        }
    }
}

public struct DescribePiiEntitiesDetectionJobOutput: Swift.Sendable {
    /// Provides information about a PII entities detection job.
    public var piiEntitiesDetectionJobProperties: ComprehendClientTypes.PiiEntitiesDetectionJobProperties?

    public init(
        piiEntitiesDetectionJobProperties: ComprehendClientTypes.PiiEntitiesDetectionJobProperties? = nil
    )
    {
        self.piiEntitiesDetectionJobProperties = piiEntitiesDetectionJobProperties
    }
}

public struct DescribeResourcePolicyInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the custom model version that has the resource policy.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct DescribeResourcePolicyOutput: Swift.Sendable {
    /// The time at which the policy was created.
    public var creationTime: Foundation.Date?
    /// The time at which the policy was last modified.
    public var lastModifiedTime: Foundation.Date?
    /// The revision ID of the policy. Each time you modify a policy, Amazon Comprehend assigns a new revision ID, and it deletes the prior version of the policy.
    public var policyRevisionId: Swift.String?
    /// The JSON body of the resource-based policy.
    public var resourcePolicy: Swift.String?

    public init(
        creationTime: Foundation.Date? = nil,
        lastModifiedTime: Foundation.Date? = nil,
        policyRevisionId: Swift.String? = nil,
        resourcePolicy: Swift.String? = nil
    )
    {
        self.creationTime = creationTime
        self.lastModifiedTime = lastModifiedTime
        self.policyRevisionId = policyRevisionId
        self.resourcePolicy = resourcePolicy
    }
}

public struct DescribeSentimentDetectionJobInput: Swift.Sendable {
    /// The identifier that Amazon Comprehend generated for the job. The operation returns this identifier in its response.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

extension ComprehendClientTypes {

    /// Provides information about a sentiment detection job.
    public struct SentimentDetectionJobProperties: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The time that the sentiment detection job ended.
        public var endTime: Foundation.Date?
        /// The input data configuration that you supplied when you created the sentiment detection job.
        public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
        /// The Amazon Resource Name (ARN) of the sentiment detection job. It is a unique, fully qualified identifier for the job. It includes the Amazon Web Services account, Amazon Web Services Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::sentiment-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:sentiment-detection-job/1234abcd12ab34cd56ef1234567890ab
        public var jobArn: Swift.String?
        /// The identifier assigned to the sentiment detection job.
        public var jobId: Swift.String?
        /// The name that you assigned to the sentiment detection job
        public var jobName: Swift.String?
        /// The current status of the sentiment detection job. If the status is FAILED, the Messages field shows the reason for the failure.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// The language code of the input documents.
        public var languageCode: ComprehendClientTypes.LanguageCode?
        /// A description of the status of a job.
        public var message: Swift.String?
        /// The output data configuration that you supplied when you created the sentiment detection job.
        public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
        /// The time that the sentiment detection job was submitted for processing.
        public var submitTime: Foundation.Date?
        /// ID for the Amazon Web Services Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your sentiment detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init(
            dataAccessRoleArn: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            languageCode: ComprehendClientTypes.LanguageCode? = nil,
            message: Swift.String? = nil,
            outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
            submitTime: Foundation.Date? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.inputDataConfig = inputDataConfig
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.languageCode = languageCode
            self.message = message
            self.outputDataConfig = outputDataConfig
            self.submitTime = submitTime
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }
}

public struct DescribeSentimentDetectionJobOutput: Swift.Sendable {
    /// An object that contains the properties associated with a sentiment detection job.
    public var sentimentDetectionJobProperties: ComprehendClientTypes.SentimentDetectionJobProperties?

    public init(
        sentimentDetectionJobProperties: ComprehendClientTypes.SentimentDetectionJobProperties? = nil
    )
    {
        self.sentimentDetectionJobProperties = sentimentDetectionJobProperties
    }
}

public struct DescribeTargetedSentimentDetectionJobInput: Swift.Sendable {
    /// The identifier that Amazon Comprehend generated for the job. The StartTargetedSentimentDetectionJob operation returns this identifier in its response.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

extension ComprehendClientTypes {

    /// Provides information about a targeted sentiment detection job.
    public struct TargetedSentimentDetectionJobProperties: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data.
        public var dataAccessRoleArn: Swift.String?
        /// The time that the targeted sentiment detection job ended.
        public var endTime: Foundation.Date?
        /// The input properties for an inference job. The document reader config field applies only to non-text inputs for custom analysis.
        public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
        /// The Amazon Resource Name (ARN) of the targeted sentiment detection job. It is a unique, fully qualified identifier for the job. It includes the Amazon Web Services account, Amazon Web Services Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::targeted-sentiment-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:targeted-sentiment-detection-job/1234abcd12ab34cd56ef1234567890ab
        public var jobArn: Swift.String?
        /// The identifier assigned to the targeted sentiment detection job.
        public var jobId: Swift.String?
        /// The name that you assigned to the targeted sentiment detection job.
        public var jobName: Swift.String?
        /// The current status of the targeted sentiment detection job. If the status is FAILED, the Messages field shows the reason for the failure.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// The language code of the input documents.
        public var languageCode: ComprehendClientTypes.LanguageCode?
        /// A description of the status of a job.
        public var message: Swift.String?
        /// Provides configuration parameters for the output of inference jobs.
        public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
        /// The time that the targeted sentiment detection job was submitted for processing.
        public var submitTime: Foundation.Date?
        /// ID for the KMS key that Amazon Comprehend uses to encrypt the data on the storage volume attached to the ML compute instance(s) that process the targeted sentiment detection job. The VolumeKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for the job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init(
            dataAccessRoleArn: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            languageCode: ComprehendClientTypes.LanguageCode? = nil,
            message: Swift.String? = nil,
            outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
            submitTime: Foundation.Date? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.inputDataConfig = inputDataConfig
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.languageCode = languageCode
            self.message = message
            self.outputDataConfig = outputDataConfig
            self.submitTime = submitTime
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }
}

public struct DescribeTargetedSentimentDetectionJobOutput: Swift.Sendable {
    /// An object that contains the properties associated with a targeted sentiment detection job.
    public var targetedSentimentDetectionJobProperties: ComprehendClientTypes.TargetedSentimentDetectionJobProperties?

    public init(
        targetedSentimentDetectionJobProperties: ComprehendClientTypes.TargetedSentimentDetectionJobProperties? = nil
    )
    {
        self.targetedSentimentDetectionJobProperties = targetedSentimentDetectionJobProperties
    }
}

public struct DescribeTopicsDetectionJobInput: Swift.Sendable {
    /// The identifier assigned by the user to the detection job.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

extension ComprehendClientTypes {

    /// Provides information about a topic detection job.
    public struct TopicsDetectionJobProperties: Swift.Sendable {
        /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your job data.
        public var dataAccessRoleArn: Swift.String?
        /// The time that the topic detection job was completed.
        public var endTime: Foundation.Date?
        /// The input data configuration supplied when you created the topic detection job.
        public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
        /// The Amazon Resource Name (ARN) of the topics detection job. It is a unique, fully qualified identifier for the job. It includes the Amazon Web Services account, Amazon Web Services Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::topics-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:topics-detection-job/1234abcd12ab34cd56ef1234567890ab
        public var jobArn: Swift.String?
        /// The identifier assigned to the topic detection job.
        public var jobId: Swift.String?
        /// The name of the topic detection job.
        public var jobName: Swift.String?
        /// The current status of the topic detection job. If the status is Failed, the reason for the failure is shown in the Message field.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// A description for the status of a job.
        public var message: Swift.String?
        /// The number of topics to detect supplied when you created the topic detection job. The default is 10.
        public var numberOfTopics: Swift.Int?
        /// The output data configuration supplied when you created the topic detection job.
        public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
        /// The time that the topic detection job was submitted for processing.
        public var submitTime: Foundation.Date?
        /// ID for the Amazon Web Services Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for a private Virtual Private Cloud (VPC) containing the resources you are using for your topic detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init(
            dataAccessRoleArn: Swift.String? = nil,
            endTime: Foundation.Date? = nil,
            inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
            jobArn: Swift.String? = nil,
            jobId: Swift.String? = nil,
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            message: Swift.String? = nil,
            numberOfTopics: Swift.Int? = nil,
            outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
            submitTime: Foundation.Date? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.endTime = endTime
            self.inputDataConfig = inputDataConfig
            self.jobArn = jobArn
            self.jobId = jobId
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.message = message
            self.numberOfTopics = numberOfTopics
            self.outputDataConfig = outputDataConfig
            self.submitTime = submitTime
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }
}

public struct DescribeTopicsDetectionJobOutput: Swift.Sendable {
    /// The list of properties for the requested job.
    public var topicsDetectionJobProperties: ComprehendClientTypes.TopicsDetectionJobProperties?

    public init(
        topicsDetectionJobProperties: ComprehendClientTypes.TopicsDetectionJobProperties? = nil
    )
    {
        self.topicsDetectionJobProperties = topicsDetectionJobProperties
    }
}

public struct DetectDominantLanguageInput: Swift.Sendable {
    /// A UTF-8 text string. The string must contain at least 20 characters. The maximum string size is 100 KB.
    /// This member is required.
    public var text: Swift.String?

    public init(
        text: Swift.String? = nil
    )
    {
        self.text = text
    }
}

extension DetectDominantLanguageInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectDominantLanguageInput(text: \"CONTENT_REDACTED\")"}
}

public struct DetectDominantLanguageOutput: Swift.Sendable {
    /// Array of languages that Amazon Comprehend detected in the input text. The array is sorted in descending order of the score (the dominant language is always the first element in the array). For each language, the response returns the RFC 5646 language code and the level of confidence that Amazon Comprehend has in the accuracy of its inference. For more information about RFC 5646, see [Tags for Identifying Languages](https://tools.ietf.org/html/rfc5646) on the IETF Tools web site.
    public var languages: [ComprehendClientTypes.DominantLanguage]?

    public init(
        languages: [ComprehendClientTypes.DominantLanguage]? = nil
    )
    {
        self.languages = languages
    }
}

extension DetectDominantLanguageOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

public struct DetectEntitiesInput: Swift.Sendable {
    /// This field applies only when you use a custom entity recognition model that was trained with PDF annotations. For other cases, enter your text input in the Text field. Use the Bytes parameter to input a text, PDF, Word or image file. Using a plain-text file in the Bytes parameter is equivelent to using the Text parameter (the Entities field in the response is identical). You can also use the Bytes parameter to input an Amazon Textract DetectDocumentText or AnalyzeDocument output file. Provide the input document as a sequence of base64-encoded bytes. If your code uses an Amazon Web Services SDK to detect entities, the SDK may encode the document file bytes for you. The maximum length of this field depends on the input document type. For details, see [ Inputs for real-time custom analysis](https://docs.aws.amazon.com/comprehend/latest/dg/idp-inputs-sync.html) in the Comprehend Developer Guide. If you use the Bytes parameter, do not use the Text parameter.
    public var bytes: Foundation.Data?
    /// Provides configuration parameters to override the default actions for extracting text from PDF documents and image files.
    public var documentReaderConfig: ComprehendClientTypes.DocumentReaderConfig?
    /// The Amazon Resource Name of an endpoint that is associated with a custom entity recognition model. Provide an endpoint if you want to detect entities by using your own custom model instead of the default model that is used by Amazon Comprehend. If you specify an endpoint, Amazon Comprehend uses the language of your custom model, and it ignores any language code that you provide in your request. For information about endpoints, see [Managing endpoints](https://docs.aws.amazon.com/comprehend/latest/dg/manage-endpoints.html).
    public var endpointArn: Swift.String?
    /// The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. If your request includes the endpoint for a custom entity recognition model, Amazon Comprehend uses the language of your custom model, and it ignores any language code that you specify here. All input documents must be in the same language.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A UTF-8 text string. The maximum string size is 100 KB. If you enter text using this parameter, do not use the Bytes parameter.
    public var text: Swift.String?

    public init(
        bytes: Foundation.Data? = nil,
        documentReaderConfig: ComprehendClientTypes.DocumentReaderConfig? = nil,
        endpointArn: Swift.String? = nil,
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        text: Swift.String? = nil
    )
    {
        self.bytes = bytes
        self.documentReaderConfig = documentReaderConfig
        self.endpointArn = endpointArn
        self.languageCode = languageCode
        self.text = text
    }
}

extension DetectEntitiesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectEntitiesInput(bytes: \(Swift.String(describing: bytes)), documentReaderConfig: \(Swift.String(describing: documentReaderConfig)), endpointArn: \(Swift.String(describing: endpointArn)), languageCode: \(Swift.String(describing: languageCode)), text: \"CONTENT_REDACTED\")"}
}

public struct DetectEntitiesOutput: Swift.Sendable {
    /// Information about each block of text in the input document. Blocks are nested. A page block contains a block for each line of text, which contains a block for each word. The Block content for a Word input document does not include a Geometry field. The Block field is not present in the response for plain-text inputs.
    public var blocks: [ComprehendClientTypes.Block]?
    /// Information about the document, discovered during text extraction. This field is present in the response only if your request used the Byte parameter.
    public var documentMetadata: ComprehendClientTypes.DocumentMetadata?
    /// The document type for each page in the input document. This field is present in the response only if your request used the Byte parameter.
    public var documentType: [ComprehendClientTypes.DocumentTypeListItem]?
    /// A collection of entities identified in the input text. For each entity, the response provides the entity text, entity type, where the entity text begins and ends, and the level of confidence that Amazon Comprehend has in the detection. If your request uses a custom entity recognition model, Amazon Comprehend detects the entities that the model is trained to recognize. Otherwise, it detects the default entity types. For a list of default entity types, see [Entities](https://docs.aws.amazon.com/comprehend/latest/dg/how-entities.html) in the Comprehend Developer Guide.
    public var entities: [ComprehendClientTypes.Entity]?
    /// Page-level errors that the system detected while processing the input document. The field is empty if the system encountered no errors.
    public var errors: [ComprehendClientTypes.ErrorsListItem]?

    public init(
        blocks: [ComprehendClientTypes.Block]? = nil,
        documentMetadata: ComprehendClientTypes.DocumentMetadata? = nil,
        documentType: [ComprehendClientTypes.DocumentTypeListItem]? = nil,
        entities: [ComprehendClientTypes.Entity]? = nil,
        errors: [ComprehendClientTypes.ErrorsListItem]? = nil
    )
    {
        self.blocks = blocks
        self.documentMetadata = documentMetadata
        self.documentType = documentType
        self.entities = entities
        self.errors = errors
    }
}

extension DetectEntitiesOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

public struct DetectKeyPhrasesInput: Swift.Sendable {
    /// The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A UTF-8 text string. The string must contain less than 100 KB of UTF-8 encoded characters.
    /// This member is required.
    public var text: Swift.String?

    public init(
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        text: Swift.String? = nil
    )
    {
        self.languageCode = languageCode
        self.text = text
    }
}

extension DetectKeyPhrasesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectKeyPhrasesInput(languageCode: \(Swift.String(describing: languageCode)), text: \"CONTENT_REDACTED\")"}
}

public struct DetectKeyPhrasesOutput: Swift.Sendable {
    /// A collection of key phrases that Amazon Comprehend identified in the input text. For each key phrase, the response provides the text of the key phrase, where the key phrase begins and ends, and the level of confidence that Amazon Comprehend has in the accuracy of the detection.
    public var keyPhrases: [ComprehendClientTypes.KeyPhrase]?

    public init(
        keyPhrases: [ComprehendClientTypes.KeyPhrase]? = nil
    )
    {
        self.keyPhrases = keyPhrases
    }
}

extension DetectKeyPhrasesOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

public struct DetectPiiEntitiesInput: Swift.Sendable {
    /// The language of the input text. Enter the language code for English (en) or Spanish (es).
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A UTF-8 text string. The maximum string size is 100 KB.
    /// This member is required.
    public var text: Swift.String?

    public init(
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        text: Swift.String? = nil
    )
    {
        self.languageCode = languageCode
        self.text = text
    }
}

extension ComprehendClientTypes {

    /// Provides information about a PII entity.
    public struct PiiEntity: Swift.Sendable {
        /// The zero-based offset from the beginning of the source text to the first character in the entity.
        public var beginOffset: Swift.Int?
        /// The zero-based offset from the beginning of the source text to the last character in the entity.
        public var endOffset: Swift.Int?
        /// The level of confidence that Amazon Comprehend has in the accuracy of the detection.
        public var score: Swift.Float?
        /// The entity's type.
        public var type: ComprehendClientTypes.PiiEntityType?

        public init(
            beginOffset: Swift.Int? = nil,
            endOffset: Swift.Int? = nil,
            score: Swift.Float? = nil,
            type: ComprehendClientTypes.PiiEntityType? = nil
        )
        {
            self.beginOffset = beginOffset
            self.endOffset = endOffset
            self.score = score
            self.type = type
        }
    }
}

public struct DetectPiiEntitiesOutput: Swift.Sendable {
    /// A collection of PII entities identified in the input text. For each entity, the response provides the entity type, where the entity text begins and ends, and the level of confidence that Amazon Comprehend has in the detection.
    public var entities: [ComprehendClientTypes.PiiEntity]?

    public init(
        entities: [ComprehendClientTypes.PiiEntity]? = nil
    )
    {
        self.entities = entities
    }
}

public struct DetectSentimentInput: Swift.Sendable {
    /// The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A UTF-8 text string. The maximum string size is 5 KB.
    /// This member is required.
    public var text: Swift.String?

    public init(
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        text: Swift.String? = nil
    )
    {
        self.languageCode = languageCode
        self.text = text
    }
}

extension DetectSentimentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectSentimentInput(languageCode: \(Swift.String(describing: languageCode)), text: \"CONTENT_REDACTED\")"}
}

public struct DetectSentimentOutput: Swift.Sendable {
    /// The inferred sentiment that Amazon Comprehend has the highest level of confidence in.
    public var sentiment: ComprehendClientTypes.SentimentType?
    /// An object that lists the sentiments, and their corresponding confidence levels.
    public var sentimentScore: ComprehendClientTypes.SentimentScore?

    public init(
        sentiment: ComprehendClientTypes.SentimentType? = nil,
        sentimentScore: ComprehendClientTypes.SentimentScore? = nil
    )
    {
        self.sentiment = sentiment
        self.sentimentScore = sentimentScore
    }
}

extension DetectSentimentOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

public struct DetectSyntaxInput: Swift.Sendable {
    /// The language code of the input documents. You can specify any of the following languages supported by Amazon Comprehend: German ("de"), English ("en"), Spanish ("es"), French ("fr"), Italian ("it"), or Portuguese ("pt").
    /// This member is required.
    public var languageCode: ComprehendClientTypes.SyntaxLanguageCode?
    /// A UTF-8 string. The maximum string size is 5 KB.
    /// This member is required.
    public var text: Swift.String?

    public init(
        languageCode: ComprehendClientTypes.SyntaxLanguageCode? = nil,
        text: Swift.String? = nil
    )
    {
        self.languageCode = languageCode
        self.text = text
    }
}

extension DetectSyntaxInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectSyntaxInput(languageCode: \(Swift.String(describing: languageCode)), text: \"CONTENT_REDACTED\")"}
}

public struct DetectSyntaxOutput: Swift.Sendable {
    /// A collection of syntax tokens describing the text. For each token, the response provides the text, the token type, where the text begins and ends, and the level of confidence that Amazon Comprehend has that the token is correct. For a list of token types, see [Syntax](https://docs.aws.amazon.com/comprehend/latest/dg/how-syntax.html) in the Comprehend Developer Guide.
    public var syntaxTokens: [ComprehendClientTypes.SyntaxToken]?

    public init(
        syntaxTokens: [ComprehendClientTypes.SyntaxToken]? = nil
    )
    {
        self.syntaxTokens = syntaxTokens
    }
}

extension DetectSyntaxOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

public struct DetectTargetedSentimentInput: Swift.Sendable {
    /// The language of the input documents. Currently, English is the only supported language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A UTF-8 text string. The maximum string length is 5 KB.
    /// This member is required.
    public var text: Swift.String?

    public init(
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        text: Swift.String? = nil
    )
    {
        self.languageCode = languageCode
        self.text = text
    }
}

extension DetectTargetedSentimentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectTargetedSentimentInput(languageCode: \(Swift.String(describing: languageCode)), text: \"CONTENT_REDACTED\")"}
}

public struct DetectTargetedSentimentOutput: Swift.Sendable {
    /// Targeted sentiment analysis for each of the entities identified in the input text.
    public var entities: [ComprehendClientTypes.TargetedSentimentEntity]?

    public init(
        entities: [ComprehendClientTypes.TargetedSentimentEntity]? = nil
    )
    {
        self.entities = entities
    }
}

extension DetectTargetedSentimentOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CONTENT_REDACTED"
    }
}

extension ComprehendClientTypes {

    /// One of the of text strings. Each string has a size limit of 1KB.
    public struct TextSegment: Swift.Sendable {
        /// The text content.
        /// This member is required.
        public var text: Swift.String?

        public init(
            text: Swift.String? = nil
        )
        {
            self.text = text
        }
    }
}

extension ComprehendClientTypes.TextSegment: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TextSegment(text: \"CONTENT_REDACTED\")"}
}

public struct DetectToxicContentInput: Swift.Sendable {
    /// The language of the input text. Currently, English is the only supported language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// A list of up to 10 text strings. Each string has a maximum size of 1 KB, and the maximum size of the list is 10 KB.
    /// This member is required.
    public var textSegments: [ComprehendClientTypes.TextSegment]?

    public init(
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        textSegments: [ComprehendClientTypes.TextSegment]? = nil
    )
    {
        self.languageCode = languageCode
        self.textSegments = textSegments
    }
}

extension DetectToxicContentInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DetectToxicContentInput(languageCode: \(Swift.String(describing: languageCode)), textSegments: \"CONTENT_REDACTED\")"}
}

extension ComprehendClientTypes {

    public enum ToxicContentType: Swift.Sendable, Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Hashable {
        case graphic
        case harassmentOrAbuse
        case hateSpeech
        case insult
        case profanity
        case sexual
        case violenceOrThreat
        case sdkUnknown(Swift.String)

        public static var allCases: [ToxicContentType] {
            return [
                .graphic,
                .harassmentOrAbuse,
                .hateSpeech,
                .insult,
                .profanity,
                .sexual,
                .violenceOrThreat
            ]
        }

        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }

        public var rawValue: Swift.String {
            switch self {
            case .graphic: return "GRAPHIC"
            case .harassmentOrAbuse: return "HARASSMENT_OR_ABUSE"
            case .hateSpeech: return "HATE_SPEECH"
            case .insult: return "INSULT"
            case .profanity: return "PROFANITY"
            case .sexual: return "SEXUAL"
            case .violenceOrThreat: return "VIOLENCE_OR_THREAT"
            case let .sdkUnknown(s): return s
            }
        }
    }
}

extension ComprehendClientTypes {

    /// Toxic content analysis result for one string. For more information about toxicity detection, see [Toxicity detection](https://docs.aws.amazon.com/comprehend/latest/dg/toxicity-detection.html) in the Amazon Comprehend Developer Guide
    public struct ToxicContent: Swift.Sendable {
        /// The name of the toxic content type.
        public var name: ComprehendClientTypes.ToxicContentType?
        /// Model confidence in the detected content type. Value range is zero to one, where one is highest confidence.
        public var score: Swift.Float?

        public init(
            name: ComprehendClientTypes.ToxicContentType? = nil,
            score: Swift.Float? = nil
        )
        {
            self.name = name
            self.score = score
        }
    }
}

extension ComprehendClientTypes {

    /// Toxicity analysis result for one string. For more information about toxicity detection, see [Toxicity detection](https://docs.aws.amazon.com/comprehend/latest/dg/toxicity-detection.html) in the Amazon Comprehend Developer Guide.
    public struct ToxicLabels: Swift.Sendable {
        /// Array of toxic content types identified in the string.
        public var labels: [ComprehendClientTypes.ToxicContent]?
        /// Overall toxicity score for the string. Value range is zero to one, where one is the highest confidence.
        public var toxicity: Swift.Float?

        public init(
            labels: [ComprehendClientTypes.ToxicContent]? = nil,
            toxicity: Swift.Float? = nil
        )
        {
            self.labels = labels
            self.toxicity = toxicity
        }
    }
}

public struct DetectToxicContentOutput: Swift.Sendable {
    /// Results of the content moderation analysis. Each entry in the results list contains a list of toxic content types identified in the text, along with a confidence score for each content type. The results list also includes a toxicity score for each entry in the results list.
    public var resultList: [ComprehendClientTypes.ToxicLabels]?

    public init(
        resultList: [ComprehendClientTypes.ToxicLabels]? = nil
    )
    {
        self.resultList = resultList
    }
}

public struct ImportModelInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend permission to use Amazon Key Management Service (KMS) to encrypt or decrypt the custom model.
    public var dataAccessRoleArn: Swift.String?
    /// ID for the KMS key that Amazon Comprehend uses to encrypt trained custom models. The ModelKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var modelKmsKeyId: Swift.String?
    /// The name to assign to the custom model that is created in Amazon Comprehend by this import.
    public var modelName: Swift.String?
    /// The Amazon Resource Name (ARN) of the custom model to import.
    /// This member is required.
    public var sourceModelArn: Swift.String?
    /// Tags to associate with the custom model that is created by this import. A tag is a key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// The version name given to the custom model that is created by this import. Version names can have a maximum of 256 characters. Alphanumeric characters, hyphens (-) and underscores (_) are allowed. The version name must be unique among all models with the same classifier name in the account/Region.
    public var versionName: Swift.String?

    public init(
        dataAccessRoleArn: Swift.String? = nil,
        modelKmsKeyId: Swift.String? = nil,
        modelName: Swift.String? = nil,
        sourceModelArn: Swift.String? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        versionName: Swift.String? = nil
    )
    {
        self.dataAccessRoleArn = dataAccessRoleArn
        self.modelKmsKeyId = modelKmsKeyId
        self.modelName = modelName
        self.sourceModelArn = sourceModelArn
        self.tags = tags
        self.versionName = versionName
    }
}

public struct ImportModelOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the custom model being imported.
    public var modelArn: Swift.String?

    public init(
        modelArn: Swift.String? = nil
    )
    {
        self.modelArn = modelArn
    }
}

/// The filter specified for the operation is invalid. Specify a different filter.
public struct InvalidFilterException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "InvalidFilterException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

extension ComprehendClientTypes {

    /// Filter the datasets based on creation time or dataset status.
    public struct DatasetFilter: Swift.Sendable {
        /// Filter the datasets to include datasets created after the specified time.
        public var creationTimeAfter: Foundation.Date?
        /// Filter the datasets to include datasets created before the specified time.
        public var creationTimeBefore: Foundation.Date?
        /// Filter the datasets based on the dataset type.
        public var datasetType: ComprehendClientTypes.DatasetType?
        /// Filter the datasets based on the dataset status.
        public var status: ComprehendClientTypes.DatasetStatus?

        public init(
            creationTimeAfter: Foundation.Date? = nil,
            creationTimeBefore: Foundation.Date? = nil,
            datasetType: ComprehendClientTypes.DatasetType? = nil,
            status: ComprehendClientTypes.DatasetStatus? = nil
        )
        {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.datasetType = datasetType
            self.status = status
        }
    }
}

public struct ListDatasetsInput: Swift.Sendable {
    /// Filters the datasets to be returned in the response.
    public var filter: ComprehendClientTypes.DatasetFilter?
    /// The Amazon Resource Number (ARN) of the flywheel.
    public var flywheelArn: Swift.String?
    /// Maximum number of results to return in a response. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        filter: ComprehendClientTypes.DatasetFilter? = nil,
        flywheelArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.flywheelArn = flywheelArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListDatasetsOutput: Swift.Sendable {
    /// The dataset properties list.
    public var datasetPropertiesList: [ComprehendClientTypes.DatasetProperties]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        datasetPropertiesList: [ComprehendClientTypes.DatasetProperties]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.datasetPropertiesList = datasetPropertiesList
        self.nextToken = nextToken
    }
}

extension ComprehendClientTypes {

    /// Provides information for filtering a list of document classification jobs. For more information, see the operation. You can provide only one filter parameter in each request.
    public struct DocumentClassificationJobFilter: Swift.Sendable {
        /// Filters on the name of the job.
        public var jobName: Swift.String?
        /// Filters the list based on job status. Returns only jobs with the specified status.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeAfter: Foundation.Date?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeBefore: Foundation.Date?

        public init(
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            submitTimeAfter: Foundation.Date? = nil,
            submitTimeBefore: Foundation.Date? = nil
        )
        {
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }
}

public struct ListDocumentClassificationJobsInput: Swift.Sendable {
    /// Filters the jobs that are returned. You can filter jobs on their names, status, or the date and time that they were submitted. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.DocumentClassificationJobFilter?
    /// The maximum number of results to return in each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        filter: ComprehendClientTypes.DocumentClassificationJobFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListDocumentClassificationJobsOutput: Swift.Sendable {
    /// A list containing the properties of each job returned.
    public var documentClassificationJobPropertiesList: [ComprehendClientTypes.DocumentClassificationJobProperties]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        documentClassificationJobPropertiesList: [ComprehendClientTypes.DocumentClassificationJobProperties]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.documentClassificationJobPropertiesList = documentClassificationJobPropertiesList
        self.nextToken = nextToken
    }
}

extension ComprehendClientTypes {

    /// Provides information for filtering a list of document classifiers. You can only specify one filtering parameter in a request. For more information, see the ListDocumentClassifiers operation.
    public struct DocumentClassifierFilter: Swift.Sendable {
        /// The name that you assigned to the document classifier
        public var documentClassifierName: Swift.String?
        /// Filters the list of classifiers based on status.
        public var status: ComprehendClientTypes.ModelStatus?
        /// Filters the list of classifiers based on the time that the classifier was submitted for processing. Returns only classifiers submitted after the specified time. Classifiers are returned in descending order, newest to oldest.
        public var submitTimeAfter: Foundation.Date?
        /// Filters the list of classifiers based on the time that the classifier was submitted for processing. Returns only classifiers submitted before the specified time. Classifiers are returned in ascending order, oldest to newest.
        public var submitTimeBefore: Foundation.Date?

        public init(
            documentClassifierName: Swift.String? = nil,
            status: ComprehendClientTypes.ModelStatus? = nil,
            submitTimeAfter: Foundation.Date? = nil,
            submitTimeBefore: Foundation.Date? = nil
        )
        {
            self.documentClassifierName = documentClassifierName
            self.status = status
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }
}

public struct ListDocumentClassifiersInput: Swift.Sendable {
    /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.DocumentClassifierFilter?
    /// The maximum number of results to return in each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        filter: ComprehendClientTypes.DocumentClassifierFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListDocumentClassifiersOutput: Swift.Sendable {
    /// A list containing the properties of each job returned.
    public var documentClassifierPropertiesList: [ComprehendClientTypes.DocumentClassifierProperties]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        documentClassifierPropertiesList: [ComprehendClientTypes.DocumentClassifierProperties]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.documentClassifierPropertiesList = documentClassifierPropertiesList
        self.nextToken = nextToken
    }
}

public struct ListDocumentClassifierSummariesInput: Swift.Sendable {
    /// The maximum number of results to return on each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ComprehendClientTypes {

    /// Describes information about a document classifier and its versions.
    public struct DocumentClassifierSummary: Swift.Sendable {
        /// The name that you assigned the document classifier.
        public var documentClassifierName: Swift.String?
        /// The time that the latest document classifier version was submitted for processing.
        public var latestVersionCreatedAt: Foundation.Date?
        /// The version name you assigned to the latest document classifier version.
        public var latestVersionName: Swift.String?
        /// Provides the status of the latest document classifier version.
        public var latestVersionStatus: ComprehendClientTypes.ModelStatus?
        /// The number of versions you created.
        public var numberOfVersions: Swift.Int?

        public init(
            documentClassifierName: Swift.String? = nil,
            latestVersionCreatedAt: Foundation.Date? = nil,
            latestVersionName: Swift.String? = nil,
            latestVersionStatus: ComprehendClientTypes.ModelStatus? = nil,
            numberOfVersions: Swift.Int? = nil
        )
        {
            self.documentClassifierName = documentClassifierName
            self.latestVersionCreatedAt = latestVersionCreatedAt
            self.latestVersionName = latestVersionName
            self.latestVersionStatus = latestVersionStatus
            self.numberOfVersions = numberOfVersions
        }
    }
}

public struct ListDocumentClassifierSummariesOutput: Swift.Sendable {
    /// The list of summaries of document classifiers.
    public var documentClassifierSummariesList: [ComprehendClientTypes.DocumentClassifierSummary]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        documentClassifierSummariesList: [ComprehendClientTypes.DocumentClassifierSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.documentClassifierSummariesList = documentClassifierSummariesList
        self.nextToken = nextToken
    }
}

extension ComprehendClientTypes {

    /// Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.
    public struct DominantLanguageDetectionJobFilter: Swift.Sendable {
        /// Filters on the name of the job.
        public var jobName: Swift.String?
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeAfter: Foundation.Date?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeBefore: Foundation.Date?

        public init(
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            submitTimeAfter: Foundation.Date? = nil,
            submitTimeBefore: Foundation.Date? = nil
        )
        {
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }
}

public struct ListDominantLanguageDetectionJobsInput: Swift.Sendable {
    /// Filters that jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.DominantLanguageDetectionJobFilter?
    /// The maximum number of results to return in each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        filter: ComprehendClientTypes.DominantLanguageDetectionJobFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListDominantLanguageDetectionJobsOutput: Swift.Sendable {
    /// A list containing the properties of each job that is returned.
    public var dominantLanguageDetectionJobPropertiesList: [ComprehendClientTypes.DominantLanguageDetectionJobProperties]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        dominantLanguageDetectionJobPropertiesList: [ComprehendClientTypes.DominantLanguageDetectionJobProperties]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.dominantLanguageDetectionJobPropertiesList = dominantLanguageDetectionJobPropertiesList
        self.nextToken = nextToken
    }
}

extension ComprehendClientTypes {

    /// The filter used to determine which endpoints are returned. You can filter jobs on their name, model, status, or the date and time that they were created. You can only set one filter at a time.
    public struct EndpointFilter: Swift.Sendable {
        /// Specifies a date after which the returned endpoint or endpoints were created.
        public var creationTimeAfter: Foundation.Date?
        /// Specifies a date before which the returned endpoint or endpoints were created.
        public var creationTimeBefore: Foundation.Date?
        /// The Amazon Resource Number (ARN) of the model to which the endpoint is attached.
        public var modelArn: Swift.String?
        /// Specifies the status of the endpoint being returned. Possible values are: Creating, Ready, Updating, Deleting, Failed.
        public var status: ComprehendClientTypes.EndpointStatus?

        public init(
            creationTimeAfter: Foundation.Date? = nil,
            creationTimeBefore: Foundation.Date? = nil,
            modelArn: Swift.String? = nil,
            status: ComprehendClientTypes.EndpointStatus? = nil
        )
        {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.modelArn = modelArn
            self.status = status
        }
    }
}

public struct ListEndpointsInput: Swift.Sendable {
    /// Filters the endpoints that are returned. You can filter endpoints on their name, model, status, or the date and time that they were created. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.EndpointFilter?
    /// The maximum number of results to return in each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        filter: ComprehendClientTypes.EndpointFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListEndpointsOutput: Swift.Sendable {
    /// Displays a list of endpoint properties being retrieved by the service in response to the request.
    public var endpointPropertiesList: [ComprehendClientTypes.EndpointProperties]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        endpointPropertiesList: [ComprehendClientTypes.EndpointProperties]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.endpointPropertiesList = endpointPropertiesList
        self.nextToken = nextToken
    }
}

extension ComprehendClientTypes {

    /// Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.
    public struct EntitiesDetectionJobFilter: Swift.Sendable {
        /// Filters on the name of the job.
        public var jobName: Swift.String?
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeAfter: Foundation.Date?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeBefore: Foundation.Date?

        public init(
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            submitTimeAfter: Foundation.Date? = nil,
            submitTimeBefore: Foundation.Date? = nil
        )
        {
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }
}

public struct ListEntitiesDetectionJobsInput: Swift.Sendable {
    /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.EntitiesDetectionJobFilter?
    /// The maximum number of results to return in each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        filter: ComprehendClientTypes.EntitiesDetectionJobFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListEntitiesDetectionJobsOutput: Swift.Sendable {
    /// A list containing the properties of each job that is returned.
    public var entitiesDetectionJobPropertiesList: [ComprehendClientTypes.EntitiesDetectionJobProperties]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        entitiesDetectionJobPropertiesList: [ComprehendClientTypes.EntitiesDetectionJobProperties]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.entitiesDetectionJobPropertiesList = entitiesDetectionJobPropertiesList
        self.nextToken = nextToken
    }
}

extension ComprehendClientTypes {

    /// Provides information for filtering a list of entity recognizers. You can only specify one filtering parameter in a request. For more information, see the ListEntityRecognizers operation./>
    public struct EntityRecognizerFilter: Swift.Sendable {
        /// The name that you assigned the entity recognizer.
        public var recognizerName: Swift.String?
        /// The status of an entity recognizer.
        public var status: ComprehendClientTypes.ModelStatus?
        /// Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeAfter: Foundation.Date?
        /// Filters the list of entities based on the time that the list was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeBefore: Foundation.Date?

        public init(
            recognizerName: Swift.String? = nil,
            status: ComprehendClientTypes.ModelStatus? = nil,
            submitTimeAfter: Foundation.Date? = nil,
            submitTimeBefore: Foundation.Date? = nil
        )
        {
            self.recognizerName = recognizerName
            self.status = status
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }
}

public struct ListEntityRecognizersInput: Swift.Sendable {
    /// Filters the list of entities returned. You can filter on Status, SubmitTimeBefore, or SubmitTimeAfter. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.EntityRecognizerFilter?
    /// The maximum number of results to return on each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        filter: ComprehendClientTypes.EntityRecognizerFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListEntityRecognizersOutput: Swift.Sendable {
    /// The list of properties of an entity recognizer.
    public var entityRecognizerPropertiesList: [ComprehendClientTypes.EntityRecognizerProperties]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        entityRecognizerPropertiesList: [ComprehendClientTypes.EntityRecognizerProperties]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.entityRecognizerPropertiesList = entityRecognizerPropertiesList
        self.nextToken = nextToken
    }
}

public struct ListEntityRecognizerSummariesInput: Swift.Sendable {
    /// The maximum number of results to return on each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ComprehendClientTypes {

    /// Describes the information about an entity recognizer and its versions.
    public struct EntityRecognizerSummary: Swift.Sendable {
        /// The time that the latest entity recognizer version was submitted for processing.
        public var latestVersionCreatedAt: Foundation.Date?
        /// The version name you assigned to the latest entity recognizer version.
        public var latestVersionName: Swift.String?
        /// Provides the status of the latest entity recognizer version.
        public var latestVersionStatus: ComprehendClientTypes.ModelStatus?
        /// The number of versions you created.
        public var numberOfVersions: Swift.Int?
        /// The name that you assigned the entity recognizer.
        public var recognizerName: Swift.String?

        public init(
            latestVersionCreatedAt: Foundation.Date? = nil,
            latestVersionName: Swift.String? = nil,
            latestVersionStatus: ComprehendClientTypes.ModelStatus? = nil,
            numberOfVersions: Swift.Int? = nil,
            recognizerName: Swift.String? = nil
        )
        {
            self.latestVersionCreatedAt = latestVersionCreatedAt
            self.latestVersionName = latestVersionName
            self.latestVersionStatus = latestVersionStatus
            self.numberOfVersions = numberOfVersions
            self.recognizerName = recognizerName
        }
    }
}

public struct ListEntityRecognizerSummariesOutput: Swift.Sendable {
    /// The list entity recognizer summaries.
    public var entityRecognizerSummariesList: [ComprehendClientTypes.EntityRecognizerSummary]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        entityRecognizerSummariesList: [ComprehendClientTypes.EntityRecognizerSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.entityRecognizerSummariesList = entityRecognizerSummariesList
        self.nextToken = nextToken
    }
}

extension ComprehendClientTypes {

    /// Provides information for filtering a list of event detection jobs.
    public struct EventsDetectionJobFilter: Swift.Sendable {
        /// Filters on the name of the events detection job.
        public var jobName: Swift.String?
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeAfter: Foundation.Date?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeBefore: Foundation.Date?

        public init(
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            submitTimeAfter: Foundation.Date? = nil,
            submitTimeBefore: Foundation.Date? = nil
        )
        {
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }
}

public struct ListEventsDetectionJobsInput: Swift.Sendable {
    /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.EventsDetectionJobFilter?
    /// The maximum number of results to return in each page.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        filter: ComprehendClientTypes.EventsDetectionJobFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListEventsDetectionJobsOutput: Swift.Sendable {
    /// A list containing the properties of each job that is returned.
    public var eventsDetectionJobPropertiesList: [ComprehendClientTypes.EventsDetectionJobProperties]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        eventsDetectionJobPropertiesList: [ComprehendClientTypes.EventsDetectionJobProperties]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.eventsDetectionJobPropertiesList = eventsDetectionJobPropertiesList
        self.nextToken = nextToken
    }
}

extension ComprehendClientTypes {

    /// Filter the flywheel iterations based on creation time.
    public struct FlywheelIterationFilter: Swift.Sendable {
        /// Filter the flywheel iterations to include iterations created after the specified time.
        public var creationTimeAfter: Foundation.Date?
        /// Filter the flywheel iterations to include iterations created before the specified time.
        public var creationTimeBefore: Foundation.Date?

        public init(
            creationTimeAfter: Foundation.Date? = nil,
            creationTimeBefore: Foundation.Date? = nil
        )
        {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
        }
    }
}

public struct ListFlywheelIterationHistoryInput: Swift.Sendable {
    /// Filter the flywheel iteration history based on creation time.
    public var filter: ComprehendClientTypes.FlywheelIterationFilter?
    /// The ARN of the flywheel.
    /// This member is required.
    public var flywheelArn: Swift.String?
    /// Maximum number of iteration history results to return
    public var maxResults: Swift.Int?
    /// Next token
    public var nextToken: Swift.String?

    public init(
        filter: ComprehendClientTypes.FlywheelIterationFilter? = nil,
        flywheelArn: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.flywheelArn = flywheelArn
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListFlywheelIterationHistoryOutput: Swift.Sendable {
    /// List of flywheel iteration properties
    public var flywheelIterationPropertiesList: [ComprehendClientTypes.FlywheelIterationProperties]?
    /// Next token
    public var nextToken: Swift.String?

    public init(
        flywheelIterationPropertiesList: [ComprehendClientTypes.FlywheelIterationProperties]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.flywheelIterationPropertiesList = flywheelIterationPropertiesList
        self.nextToken = nextToken
    }
}

extension ComprehendClientTypes {

    /// Filter the flywheels based on creation time or flywheel status.
    public struct FlywheelFilter: Swift.Sendable {
        /// Filter the flywheels to include flywheels created after the specified time.
        public var creationTimeAfter: Foundation.Date?
        /// Filter the flywheels to include flywheels created before the specified time.
        public var creationTimeBefore: Foundation.Date?
        /// Filter the flywheels based on the flywheel status.
        public var status: ComprehendClientTypes.FlywheelStatus?

        public init(
            creationTimeAfter: Foundation.Date? = nil,
            creationTimeBefore: Foundation.Date? = nil,
            status: ComprehendClientTypes.FlywheelStatus? = nil
        )
        {
            self.creationTimeAfter = creationTimeAfter
            self.creationTimeBefore = creationTimeBefore
            self.status = status
        }
    }
}

public struct ListFlywheelsInput: Swift.Sendable {
    /// Filters the flywheels that are returned. You can filter flywheels on their status, or the date and time that they were submitted. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.FlywheelFilter?
    /// Maximum number of results to return in a response. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        filter: ComprehendClientTypes.FlywheelFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

extension ComprehendClientTypes {

    /// Flywheel summary information.
    public struct FlywheelSummary: Swift.Sendable {
        /// ARN of the active model version for the flywheel.
        public var activeModelArn: Swift.String?
        /// Creation time of the flywheel.
        public var creationTime: Foundation.Date?
        /// Amazon S3 URI of the data lake location.
        public var dataLakeS3Uri: Swift.String?
        /// The Amazon Resource Number (ARN) of the flywheel
        public var flywheelArn: Swift.String?
        /// Last modified time for the flywheel.
        public var lastModifiedTime: Foundation.Date?
        /// The most recent flywheel iteration.
        public var latestFlywheelIteration: Swift.String?
        /// A description of the status of the flywheel.
        public var message: Swift.String?
        /// Model type of the flywheel's model.
        public var modelType: ComprehendClientTypes.ModelType?
        /// The status of the flywheel.
        public var status: ComprehendClientTypes.FlywheelStatus?

        public init(
            activeModelArn: Swift.String? = nil,
            creationTime: Foundation.Date? = nil,
            dataLakeS3Uri: Swift.String? = nil,
            flywheelArn: Swift.String? = nil,
            lastModifiedTime: Foundation.Date? = nil,
            latestFlywheelIteration: Swift.String? = nil,
            message: Swift.String? = nil,
            modelType: ComprehendClientTypes.ModelType? = nil,
            status: ComprehendClientTypes.FlywheelStatus? = nil
        )
        {
            self.activeModelArn = activeModelArn
            self.creationTime = creationTime
            self.dataLakeS3Uri = dataLakeS3Uri
            self.flywheelArn = flywheelArn
            self.lastModifiedTime = lastModifiedTime
            self.latestFlywheelIteration = latestFlywheelIteration
            self.message = message
            self.modelType = modelType
            self.status = status
        }
    }
}

public struct ListFlywheelsOutput: Swift.Sendable {
    /// A list of flywheel properties retrieved by the service in response to the request.
    public var flywheelSummaryList: [ComprehendClientTypes.FlywheelSummary]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        flywheelSummaryList: [ComprehendClientTypes.FlywheelSummary]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.flywheelSummaryList = flywheelSummaryList
        self.nextToken = nextToken
    }
}

extension ComprehendClientTypes {

    /// Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.
    public struct KeyPhrasesDetectionJobFilter: Swift.Sendable {
        /// Filters on the name of the job.
        public var jobName: Swift.String?
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeAfter: Foundation.Date?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeBefore: Foundation.Date?

        public init(
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            submitTimeAfter: Foundation.Date? = nil,
            submitTimeBefore: Foundation.Date? = nil
        )
        {
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }
}

public struct ListKeyPhrasesDetectionJobsInput: Swift.Sendable {
    /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.KeyPhrasesDetectionJobFilter?
    /// The maximum number of results to return in each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        filter: ComprehendClientTypes.KeyPhrasesDetectionJobFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListKeyPhrasesDetectionJobsOutput: Swift.Sendable {
    /// A list containing the properties of each job that is returned.
    public var keyPhrasesDetectionJobPropertiesList: [ComprehendClientTypes.KeyPhrasesDetectionJobProperties]?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        keyPhrasesDetectionJobPropertiesList: [ComprehendClientTypes.KeyPhrasesDetectionJobProperties]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.keyPhrasesDetectionJobPropertiesList = keyPhrasesDetectionJobPropertiesList
        self.nextToken = nextToken
    }
}

extension ComprehendClientTypes {

    /// Provides information for filtering a list of PII entity detection jobs.
    public struct PiiEntitiesDetectionJobFilter: Swift.Sendable {
        /// Filters on the name of the job.
        public var jobName: Swift.String?
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeAfter: Foundation.Date?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeBefore: Foundation.Date?

        public init(
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            submitTimeAfter: Foundation.Date? = nil,
            submitTimeBefore: Foundation.Date? = nil
        )
        {
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }
}

public struct ListPiiEntitiesDetectionJobsInput: Swift.Sendable {
    /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.PiiEntitiesDetectionJobFilter?
    /// The maximum number of results to return in each page.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        filter: ComprehendClientTypes.PiiEntitiesDetectionJobFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListPiiEntitiesDetectionJobsOutput: Swift.Sendable {
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?
    /// A list containing the properties of each job that is returned.
    public var piiEntitiesDetectionJobPropertiesList: [ComprehendClientTypes.PiiEntitiesDetectionJobProperties]?

    public init(
        nextToken: Swift.String? = nil,
        piiEntitiesDetectionJobPropertiesList: [ComprehendClientTypes.PiiEntitiesDetectionJobProperties]? = nil
    )
    {
        self.nextToken = nextToken
        self.piiEntitiesDetectionJobPropertiesList = piiEntitiesDetectionJobPropertiesList
    }
}

extension ComprehendClientTypes {

    /// Provides information for filtering a list of dominant language detection jobs. For more information, see the operation.
    public struct SentimentDetectionJobFilter: Swift.Sendable {
        /// Filters on the name of the job.
        public var jobName: Swift.String?
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeAfter: Foundation.Date?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeBefore: Foundation.Date?

        public init(
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            submitTimeAfter: Foundation.Date? = nil,
            submitTimeBefore: Foundation.Date? = nil
        )
        {
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }
}

public struct ListSentimentDetectionJobsInput: Swift.Sendable {
    /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.SentimentDetectionJobFilter?
    /// The maximum number of results to return in each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        filter: ComprehendClientTypes.SentimentDetectionJobFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListSentimentDetectionJobsOutput: Swift.Sendable {
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?
    /// A list containing the properties of each job that is returned.
    public var sentimentDetectionJobPropertiesList: [ComprehendClientTypes.SentimentDetectionJobProperties]?

    public init(
        nextToken: Swift.String? = nil,
        sentimentDetectionJobPropertiesList: [ComprehendClientTypes.SentimentDetectionJobProperties]? = nil
    )
    {
        self.nextToken = nextToken
        self.sentimentDetectionJobPropertiesList = sentimentDetectionJobPropertiesList
    }
}

public struct ListTagsForResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the given Amazon Comprehend resource you are querying.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init(
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

public struct ListTagsForResourceOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the given Amazon Comprehend resource you are querying.
    public var resourceArn: Swift.String?
    /// Tags associated with the Amazon Comprehend resource being queried. A tag is a key-value pair that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

extension ComprehendClientTypes {

    /// Provides information for filtering a list of dominant language detection jobs. For more information, see the ListTargetedSentimentDetectionJobs operation.
    public struct TargetedSentimentDetectionJobFilter: Swift.Sendable {
        /// Filters on the name of the job.
        public var jobName: Swift.String?
        /// Filters the list of jobs based on job status. Returns only jobs with the specified status.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted after the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeAfter: Foundation.Date?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Returns only jobs submitted before the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeBefore: Foundation.Date?

        public init(
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            submitTimeAfter: Foundation.Date? = nil,
            submitTimeBefore: Foundation.Date? = nil
        )
        {
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }
}

public struct ListTargetedSentimentDetectionJobsInput: Swift.Sendable {
    /// Filters the jobs that are returned. You can filter jobs on their name, status, or the date and time that they were submitted. You can only set one filter at a time.
    public var filter: ComprehendClientTypes.TargetedSentimentDetectionJobFilter?
    /// The maximum number of results to return in each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        filter: ComprehendClientTypes.TargetedSentimentDetectionJobFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListTargetedSentimentDetectionJobsOutput: Swift.Sendable {
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?
    /// A list containing the properties of each job that is returned.
    public var targetedSentimentDetectionJobPropertiesList: [ComprehendClientTypes.TargetedSentimentDetectionJobProperties]?

    public init(
        nextToken: Swift.String? = nil,
        targetedSentimentDetectionJobPropertiesList: [ComprehendClientTypes.TargetedSentimentDetectionJobProperties]? = nil
    )
    {
        self.nextToken = nextToken
        self.targetedSentimentDetectionJobPropertiesList = targetedSentimentDetectionJobPropertiesList
    }
}

extension ComprehendClientTypes {

    /// Provides information for filtering topic detection jobs. For more information, see .
    public struct TopicsDetectionJobFilter: Swift.Sendable {
        ///
        public var jobName: Swift.String?
        /// Filters the list of topic detection jobs based on job status. Returns only jobs with the specified status.
        public var jobStatus: ComprehendClientTypes.JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Only returns jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.
        public var submitTimeAfter: Foundation.Date?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Only returns jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.
        public var submitTimeBefore: Foundation.Date?

        public init(
            jobName: Swift.String? = nil,
            jobStatus: ComprehendClientTypes.JobStatus? = nil,
            submitTimeAfter: Foundation.Date? = nil,
            submitTimeBefore: Foundation.Date? = nil
        )
        {
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
            self.submitTimeBefore = submitTimeBefore
        }
    }
}

public struct ListTopicsDetectionJobsInput: Swift.Sendable {
    /// Filters the jobs that are returned. Jobs can be filtered on their name, status, or the date and time that they were submitted. You can set only one filter at a time.
    public var filter: ComprehendClientTypes.TopicsDetectionJobFilter?
    /// The maximum number of results to return in each page. The default is 100.
    public var maxResults: Swift.Int?
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?

    public init(
        filter: ComprehendClientTypes.TopicsDetectionJobFilter? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filter = filter
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

public struct ListTopicsDetectionJobsOutput: Swift.Sendable {
    /// Identifies the next page of results to return.
    public var nextToken: Swift.String?
    /// A list containing the properties of each job that is returned.
    public var topicsDetectionJobPropertiesList: [ComprehendClientTypes.TopicsDetectionJobProperties]?

    public init(
        nextToken: Swift.String? = nil,
        topicsDetectionJobPropertiesList: [ComprehendClientTypes.TopicsDetectionJobProperties]? = nil
    )
    {
        self.nextToken = nextToken
        self.topicsDetectionJobPropertiesList = topicsDetectionJobPropertiesList
    }
}

public struct PutResourcePolicyInput: Swift.Sendable {
    /// The revision ID that Amazon Comprehend assigned to the policy that you are updating. If you are creating a new policy that has no prior version, don't use this parameter. Amazon Comprehend creates the revision ID for you.
    public var policyRevisionId: Swift.String?
    /// The Amazon Resource Name (ARN) of the custom model to attach the policy to.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The JSON resource-based policy to attach to your custom model. Provide your JSON as a UTF-8 encoded string without line breaks. To provide valid JSON for your policy, enclose the attribute names and values in double quotes. If the JSON body is also enclosed in double quotes, then you must escape the double quotes that are inside the policy: "{\"attribute\": \"value\", \"attribute\": [\"value\"]}" To avoid escaping quotes, you can use single quotes to enclose the policy and double quotes to enclose the JSON names and values: '{"attribute": "value", "attribute": ["value"]}'
    /// This member is required.
    public var resourcePolicy: Swift.String?

    public init(
        policyRevisionId: Swift.String? = nil,
        resourceArn: Swift.String? = nil,
        resourcePolicy: Swift.String? = nil
    )
    {
        self.policyRevisionId = policyRevisionId
        self.resourceArn = resourceArn
        self.resourcePolicy = resourcePolicy
    }
}

public struct PutResourcePolicyOutput: Swift.Sendable {
    /// The revision ID of the policy. Each time you modify a policy, Amazon Comprehend assigns a new revision ID, and it deletes the prior version of the policy.
    public var policyRevisionId: Swift.String?

    public init(
        policyRevisionId: Swift.String? = nil
    )
    {
        self.policyRevisionId = policyRevisionId
    }
}

public struct StartDocumentClassificationJobInput: Swift.Sendable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data.
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the document classifier to use to process the job.
    public var documentClassifierArn: Swift.String?
    /// The Amazon Resource Number (ARN) of the flywheel associated with the model to use.
    public var flywheelArn: Swift.String?
    /// Specifies the format and location of the input data for the job.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
    /// The identifier of the job.
    public var jobName: Swift.String?
    /// Specifies where to send the output files.
    /// This member is required.
    public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    /// Tags to associate with the document classification job. A tag is a key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// ID for the Amazon Web Services Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var volumeKmsKeyId: Swift.String?
    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your document classification job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public var vpcConfig: ComprehendClientTypes.VpcConfig?

    public init(
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        documentClassifierArn: Swift.String? = nil,
        flywheelArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
        jobName: Swift.String? = nil,
        outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        volumeKmsKeyId: Swift.String? = nil,
        vpcConfig: ComprehendClientTypes.VpcConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.documentClassifierArn = documentClassifierArn
        self.flywheelArn = flywheelArn
        self.inputDataConfig = inputDataConfig
        self.jobName = jobName
        self.outputDataConfig = outputDataConfig
        self.tags = tags
        self.volumeKmsKeyId = volumeKmsKeyId
        self.vpcConfig = vpcConfig
    }
}

public struct StartDocumentClassificationJobOutput: Swift.Sendable {
    /// The ARN of the custom classification model.
    public var documentClassifierArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the document classification job. It is a unique, fully qualified identifier for the job. It includes the Amazon Web Services account, Amazon Web Services Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::document-classification-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:document-classification-job/1234abcd12ab34cd56ef1234567890ab
    public var jobArn: Swift.String?
    /// The identifier generated for the job. To get the status of the job, use this identifier with the DescribeDocumentClassificationJob operation.
    public var jobId: Swift.String?
    /// The status of the job:
    ///
    /// * SUBMITTED - The job has been received and queued for processing.
    ///
    /// * IN_PROGRESS - Amazon Comprehend is processing the job.
    ///
    /// * COMPLETED - The job was successfully completed and the output is available.
    ///
    /// * FAILED - The job did not complete. For details, use the DescribeDocumentClassificationJob operation.
    ///
    /// * STOP_REQUESTED - Amazon Comprehend has received a stop request for the job and is processing the request.
    ///
    /// * STOPPED - The job was successfully stopped without completing.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init(
        documentClassifierArn: Swift.String? = nil,
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.documentClassifierArn = documentClassifierArn
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

public struct StartDominantLanguageDetectionJobInput: Swift.Sendable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data. For more information, see [Role-based permissions](https://docs.aws.amazon.com/comprehend/latest/dg/security_iam_id-based-policy-examples.html#auth-role-permissions).
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// Specifies the format and location of the input data for the job.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
    /// An identifier for the job.
    public var jobName: Swift.String?
    /// Specifies where to send the output files.
    /// This member is required.
    public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    /// Tags to associate with the dominant language detection job. A tag is a key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// ID for the Amazon Web Services Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var volumeKmsKeyId: Swift.String?
    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your dominant language detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public var vpcConfig: ComprehendClientTypes.VpcConfig?

    public init(
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
        jobName: Swift.String? = nil,
        outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        volumeKmsKeyId: Swift.String? = nil,
        vpcConfig: ComprehendClientTypes.VpcConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.inputDataConfig = inputDataConfig
        self.jobName = jobName
        self.outputDataConfig = outputDataConfig
        self.tags = tags
        self.volumeKmsKeyId = volumeKmsKeyId
        self.vpcConfig = vpcConfig
    }
}

public struct StartDominantLanguageDetectionJobOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the dominant language detection job. It is a unique, fully qualified identifier for the job. It includes the Amazon Web Services account, Amazon Web Services Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::dominant-language-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:dominant-language-detection-job/1234abcd12ab34cd56ef1234567890ab
    public var jobArn: Swift.String?
    /// The identifier generated for the job. To get the status of a job, use this identifier with the operation.
    public var jobId: Swift.String?
    /// The status of the job.
    ///
    /// * SUBMITTED - The job has been received and is queued for processing.
    ///
    /// * IN_PROGRESS - Amazon Comprehend is processing the job.
    ///
    /// * COMPLETED - The job was successfully completed and the output is available.
    ///
    /// * FAILED - The job did not complete. To get details, use the operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init(
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

public struct StartEntitiesDetectionJobInput: Swift.Sendable {
    /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data. For more information, see [Role-based permissions](https://docs.aws.amazon.com/comprehend/latest/dg/security_iam_id-based-policy-examples.html#auth-role-permissions).
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// The Amazon Resource Name (ARN) that identifies the specific entity recognizer to be used by the StartEntitiesDetectionJob. This ARN is optional and is only used for a custom entity recognition job.
    public var entityRecognizerArn: Swift.String?
    /// The Amazon Resource Number (ARN) of the flywheel associated with the model to use.
    public var flywheelArn: Swift.String?
    /// Specifies the format and location of the input data for the job.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
    /// The identifier of the job.
    public var jobName: Swift.String?
    /// The language of the input documents. All documents must be in the same language. You can specify any of the languages supported by Amazon Comprehend. If custom entities recognition is used, this parameter is ignored and the language used for training the model is used instead.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// Specifies where to send the output files.
    /// This member is required.
    public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    /// Tags to associate with the entities detection job. A tag is a key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// ID for the Amazon Web Services Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var volumeKmsKeyId: Swift.String?
    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your entity detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public var vpcConfig: ComprehendClientTypes.VpcConfig?

    public init(
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        entityRecognizerArn: Swift.String? = nil,
        flywheelArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
        jobName: Swift.String? = nil,
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        volumeKmsKeyId: Swift.String? = nil,
        vpcConfig: ComprehendClientTypes.VpcConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.entityRecognizerArn = entityRecognizerArn
        self.flywheelArn = flywheelArn
        self.inputDataConfig = inputDataConfig
        self.jobName = jobName
        self.languageCode = languageCode
        self.outputDataConfig = outputDataConfig
        self.tags = tags
        self.volumeKmsKeyId = volumeKmsKeyId
        self.vpcConfig = vpcConfig
    }
}

public struct StartEntitiesDetectionJobOutput: Swift.Sendable {
    /// The ARN of the custom entity recognition model.
    public var entityRecognizerArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the entities detection job. It is a unique, fully qualified identifier for the job. It includes the Amazon Web Services account, Amazon Web Services Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::entities-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:entities-detection-job/1234abcd12ab34cd56ef1234567890ab
    public var jobArn: Swift.String?
    /// The identifier generated for the job. To get the status of job, use this identifier with the operation.
    public var jobId: Swift.String?
    /// The status of the job.
    ///
    /// * SUBMITTED - The job has been received and is queued for processing.
    ///
    /// * IN_PROGRESS - Amazon Comprehend is processing the job.
    ///
    /// * COMPLETED - The job was successfully completed and the output is available.
    ///
    /// * FAILED - The job did not complete. To get details, use the operation.
    ///
    /// * STOP_REQUESTED - Amazon Comprehend has received a stop request for the job and is processing the request.
    ///
    /// * STOPPED - The job was successfully stopped without completing.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init(
        entityRecognizerArn: Swift.String? = nil,
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.entityRecognizerArn = entityRecognizerArn
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

public struct StartEventsDetectionJobInput: Swift.Sendable {
    /// An unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data.
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// Specifies the format and location of the input data for the job.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
    /// The identifier of the events detection job.
    public var jobName: Swift.String?
    /// The language code of the input documents.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// Specifies where to send the output files.
    /// This member is required.
    public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    /// Tags to associate with the events detection job. A tag is a key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// The types of events to detect in the input documents.
    /// This member is required.
    public var targetEventTypes: [Swift.String]?

    public init(
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
        jobName: Swift.String? = nil,
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        targetEventTypes: [Swift.String]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.inputDataConfig = inputDataConfig
        self.jobName = jobName
        self.languageCode = languageCode
        self.outputDataConfig = outputDataConfig
        self.tags = tags
        self.targetEventTypes = targetEventTypes
    }
}

public struct StartEventsDetectionJobOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the events detection job. It is a unique, fully qualified identifier for the job. It includes the Amazon Web Services account, Amazon Web Services Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::events-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:events-detection-job/1234abcd12ab34cd56ef1234567890ab
    public var jobArn: Swift.String?
    /// An unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var jobId: Swift.String?
    /// The status of the events detection job.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init(
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

public struct StartFlywheelIterationInput: Swift.Sendable {
    /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The ARN of the flywheel.
    /// This member is required.
    public var flywheelArn: Swift.String?

    public init(
        clientRequestToken: Swift.String? = nil,
        flywheelArn: Swift.String? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.flywheelArn = flywheelArn
    }
}

public struct StartFlywheelIterationOutput: Swift.Sendable {
    ///
    public var flywheelArn: Swift.String?
    ///
    public var flywheelIterationId: Swift.String?

    public init(
        flywheelArn: Swift.String? = nil,
        flywheelIterationId: Swift.String? = nil
    )
    {
        self.flywheelArn = flywheelArn
        self.flywheelIterationId = flywheelIterationId
    }
}

public struct StartKeyPhrasesDetectionJobInput: Swift.Sendable {
    /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data. For more information, see [Role-based permissions](https://docs.aws.amazon.com/comprehend/latest/dg/security_iam_id-based-policy-examples.html#auth-role-permissions).
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// Specifies the format and location of the input data for the job.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
    /// The identifier of the job.
    public var jobName: Swift.String?
    /// The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// Specifies where to send the output files.
    /// This member is required.
    public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    /// Tags to associate with the key phrases detection job. A tag is a key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// ID for the Amazon Web Services Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var volumeKmsKeyId: Swift.String?
    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your key phrases detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public var vpcConfig: ComprehendClientTypes.VpcConfig?

    public init(
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
        jobName: Swift.String? = nil,
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        volumeKmsKeyId: Swift.String? = nil,
        vpcConfig: ComprehendClientTypes.VpcConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.inputDataConfig = inputDataConfig
        self.jobName = jobName
        self.languageCode = languageCode
        self.outputDataConfig = outputDataConfig
        self.tags = tags
        self.volumeKmsKeyId = volumeKmsKeyId
        self.vpcConfig = vpcConfig
    }
}

public struct StartKeyPhrasesDetectionJobOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the key phrase detection job. It is a unique, fully qualified identifier for the job. It includes the Amazon Web Services account, Amazon Web Services Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::key-phrases-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:key-phrases-detection-job/1234abcd12ab34cd56ef1234567890ab
    public var jobArn: Swift.String?
    /// The identifier generated for the job. To get the status of a job, use this identifier with the operation.
    public var jobId: Swift.String?
    /// The status of the job.
    ///
    /// * SUBMITTED - The job has been received and is queued for processing.
    ///
    /// * IN_PROGRESS - Amazon Comprehend is processing the job.
    ///
    /// * COMPLETED - The job was successfully completed and the output is available.
    ///
    /// * FAILED - The job did not complete. To get details, use the operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init(
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

public struct StartPiiEntitiesDetectionJobInput: Swift.Sendable {
    /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data.
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// The input properties for a PII entities detection job.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
    /// The identifier of the job.
    public var jobName: Swift.String?
    /// The language of the input documents. Enter the language code for English (en) or Spanish (es).
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// Specifies whether the output provides the locations (offsets) of PII entities or a file in which PII entities are redacted.
    /// This member is required.
    public var mode: ComprehendClientTypes.PiiEntitiesDetectionMode?
    /// Provides conﬁguration parameters for the output of PII entity detection jobs.
    /// This member is required.
    public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    /// Provides configuration parameters for PII entity redaction. This parameter is required if you set the Mode parameter to ONLY_REDACTION. In that case, you must provide a RedactionConfig definition that includes the PiiEntityTypes parameter.
    public var redactionConfig: ComprehendClientTypes.RedactionConfig?
    /// Tags to associate with the PII entities detection job. A tag is a key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?

    public init(
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
        jobName: Swift.String? = nil,
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        mode: ComprehendClientTypes.PiiEntitiesDetectionMode? = nil,
        outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
        redactionConfig: ComprehendClientTypes.RedactionConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.inputDataConfig = inputDataConfig
        self.jobName = jobName
        self.languageCode = languageCode
        self.mode = mode
        self.outputDataConfig = outputDataConfig
        self.redactionConfig = redactionConfig
        self.tags = tags
    }
}

public struct StartPiiEntitiesDetectionJobOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the PII entity detection job. It is a unique, fully qualified identifier for the job. It includes the Amazon Web Services account, Amazon Web Services Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::pii-entities-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:pii-entities-detection-job/1234abcd12ab34cd56ef1234567890ab
    public var jobArn: Swift.String?
    /// The identifier generated for the job.
    public var jobId: Swift.String?
    /// The status of the job.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init(
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

public struct StartSentimentDetectionJobInput: Swift.Sendable {
    /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data. For more information, see [Role-based permissions](https://docs.aws.amazon.com/comprehend/latest/dg/security_iam_id-based-policy-examples.html#auth-role-permissions).
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// Specifies the format and location of the input data for the job.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
    /// The identifier of the job.
    public var jobName: Swift.String?
    /// The language of the input documents. You can specify any of the primary languages supported by Amazon Comprehend. All documents must be in the same language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// Specifies where to send the output files.
    /// This member is required.
    public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    /// Tags to associate with the sentiment detection job. A tag is a key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// ID for the Amazon Web Services Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var volumeKmsKeyId: Swift.String?
    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your sentiment detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public var vpcConfig: ComprehendClientTypes.VpcConfig?

    public init(
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
        jobName: Swift.String? = nil,
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        volumeKmsKeyId: Swift.String? = nil,
        vpcConfig: ComprehendClientTypes.VpcConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.inputDataConfig = inputDataConfig
        self.jobName = jobName
        self.languageCode = languageCode
        self.outputDataConfig = outputDataConfig
        self.tags = tags
        self.volumeKmsKeyId = volumeKmsKeyId
        self.vpcConfig = vpcConfig
    }
}

public struct StartSentimentDetectionJobOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the sentiment detection job. It is a unique, fully qualified identifier for the job. It includes the Amazon Web Services account, Amazon Web Services Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::sentiment-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:sentiment-detection-job/1234abcd12ab34cd56ef1234567890ab
    public var jobArn: Swift.String?
    /// The identifier generated for the job. To get the status of a job, use this identifier with the operation.
    public var jobId: Swift.String?
    /// The status of the job.
    ///
    /// * SUBMITTED - The job has been received and is queued for processing.
    ///
    /// * IN_PROGRESS - Amazon Comprehend is processing the job.
    ///
    /// * COMPLETED - The job was successfully completed and the output is available.
    ///
    /// * FAILED - The job did not complete. To get details, use the operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init(
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

public struct StartTargetedSentimentDetectionJobInput: Swift.Sendable {
    /// A unique identifier for the request. If you don't set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data. For more information, see [Role-based permissions](https://docs.aws.amazon.com/comprehend/latest/dg/security_iam_id-based-policy-examples.html#auth-role-permissions).
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// The input properties for an inference job. The document reader config field applies only to non-text inputs for custom analysis.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
    /// The identifier of the job.
    public var jobName: Swift.String?
    /// The language of the input documents. Currently, English is the only supported language.
    /// This member is required.
    public var languageCode: ComprehendClientTypes.LanguageCode?
    /// Specifies where to send the output files.
    /// This member is required.
    public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    /// Tags to associate with the targeted sentiment detection job. A tag is a key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// ID for the KMS key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var volumeKmsKeyId: Swift.String?
    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for the job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public var vpcConfig: ComprehendClientTypes.VpcConfig?

    public init(
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
        jobName: Swift.String? = nil,
        languageCode: ComprehendClientTypes.LanguageCode? = nil,
        outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        volumeKmsKeyId: Swift.String? = nil,
        vpcConfig: ComprehendClientTypes.VpcConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.inputDataConfig = inputDataConfig
        self.jobName = jobName
        self.languageCode = languageCode
        self.outputDataConfig = outputDataConfig
        self.tags = tags
        self.volumeKmsKeyId = volumeKmsKeyId
        self.vpcConfig = vpcConfig
    }
}

public struct StartTargetedSentimentDetectionJobOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the targeted sentiment detection job. It is a unique, fully qualified identifier for the job. It includes the Amazon Web Services account, Amazon Web Services Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::targeted-sentiment-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:targeted-sentiment-detection-job/1234abcd12ab34cd56ef1234567890ab
    public var jobArn: Swift.String?
    /// The identifier generated for the job. To get the status of a job, use this identifier with the DescribeTargetedSentimentDetectionJob operation.
    public var jobId: Swift.String?
    /// The status of the job.
    ///
    /// * SUBMITTED - The job has been received and is queued for processing.
    ///
    /// * IN_PROGRESS - Amazon Comprehend is processing the job.
    ///
    /// * COMPLETED - The job was successfully completed and the output is available.
    ///
    /// * FAILED - The job did not complete. To get details, use the DescribeTargetedSentimentDetectionJob operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init(
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

public struct StartTopicsDetectionJobInput: Swift.Sendable {
    /// A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one.
    public var clientRequestToken: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend read access to your input data. For more information, see [Role-based permissions](https://docs.aws.amazon.com/comprehend/latest/dg/security_iam_id-based-policy-examples.html#auth-role-permissions).
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// Specifies the format and location of the input data for the job.
    /// This member is required.
    public var inputDataConfig: ComprehendClientTypes.InputDataConfig?
    /// The identifier of the job.
    public var jobName: Swift.String?
    /// The number of topics to detect.
    public var numberOfTopics: Swift.Int?
    /// Specifies where to send the output files. The output is a compressed archive with two files, topic-terms.csv that lists the terms associated with each topic, and doc-topics.csv that lists the documents associated with each topic
    /// This member is required.
    public var outputDataConfig: ComprehendClientTypes.OutputDataConfig?
    /// Tags to associate with the topics detection job. A tag is a key-value pair that adds metadata to a resource used by Amazon Comprehend. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department.
    public var tags: [ComprehendClientTypes.Tag]?
    /// ID for the Amazon Web Services Key Management Service (KMS) key that Amazon Comprehend uses to encrypt data on the storage volume attached to the ML compute instance(s) that process the analysis job. The VolumeKmsKeyId can be either of the following formats:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    public var volumeKmsKeyId: Swift.String?
    /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for your topic detection job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
    public var vpcConfig: ComprehendClientTypes.VpcConfig?

    public init(
        clientRequestToken: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        inputDataConfig: ComprehendClientTypes.InputDataConfig? = nil,
        jobName: Swift.String? = nil,
        numberOfTopics: Swift.Int? = nil,
        outputDataConfig: ComprehendClientTypes.OutputDataConfig? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil,
        volumeKmsKeyId: Swift.String? = nil,
        vpcConfig: ComprehendClientTypes.VpcConfig? = nil
    )
    {
        self.clientRequestToken = clientRequestToken
        self.dataAccessRoleArn = dataAccessRoleArn
        self.inputDataConfig = inputDataConfig
        self.jobName = jobName
        self.numberOfTopics = numberOfTopics
        self.outputDataConfig = outputDataConfig
        self.tags = tags
        self.volumeKmsKeyId = volumeKmsKeyId
        self.vpcConfig = vpcConfig
    }
}

public struct StartTopicsDetectionJobOutput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the topics detection job. It is a unique, fully qualified identifier for the job. It includes the Amazon Web Services account, Amazon Web Services Region, and the job ID. The format of the ARN is as follows: arn::comprehend:::topics-detection-job/ The following is an example job ARN: arn:aws:comprehend:us-west-2:111122223333:document-classification-job/1234abcd12ab34cd56ef1234567890ab
    public var jobArn: Swift.String?
    /// The identifier generated for the job. To get the status of the job, use this identifier with the DescribeTopicDetectionJob operation.
    public var jobId: Swift.String?
    /// The status of the job:
    ///
    /// * SUBMITTED - The job has been received and is queued for processing.
    ///
    /// * IN_PROGRESS - Amazon Comprehend is processing the job.
    ///
    /// * COMPLETED - The job was successfully completed and the output is available.
    ///
    /// * FAILED - The job did not complete. To get details, use the DescribeTopicDetectionJob operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init(
        jobArn: Swift.String? = nil,
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobArn = jobArn
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

public struct StopDominantLanguageDetectionJobInput: Swift.Sendable {
    /// The identifier of the dominant language detection job to stop.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct StopDominantLanguageDetectionJobOutput: Swift.Sendable {
    /// The identifier of the dominant language detection job to stop.
    public var jobId: Swift.String?
    /// Either STOP_REQUESTED if the job is currently running, or STOPPED if the job was previously stopped with the StopDominantLanguageDetectionJob operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init(
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

public struct StopEntitiesDetectionJobInput: Swift.Sendable {
    /// The identifier of the entities detection job to stop.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct StopEntitiesDetectionJobOutput: Swift.Sendable {
    /// The identifier of the entities detection job to stop.
    public var jobId: Swift.String?
    /// Either STOP_REQUESTED if the job is currently running, or STOPPED if the job was previously stopped with the StopEntitiesDetectionJob operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init(
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

public struct StopEventsDetectionJobInput: Swift.Sendable {
    /// The identifier of the events detection job to stop.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct StopEventsDetectionJobOutput: Swift.Sendable {
    /// The identifier of the events detection job to stop.
    public var jobId: Swift.String?
    /// The status of the events detection job.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init(
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

public struct StopKeyPhrasesDetectionJobInput: Swift.Sendable {
    /// The identifier of the key phrases detection job to stop.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct StopKeyPhrasesDetectionJobOutput: Swift.Sendable {
    /// The identifier of the key phrases detection job to stop.
    public var jobId: Swift.String?
    /// Either STOP_REQUESTED if the job is currently running, or STOPPED if the job was previously stopped with the StopKeyPhrasesDetectionJob operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init(
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

public struct StopPiiEntitiesDetectionJobInput: Swift.Sendable {
    /// The identifier of the PII entities detection job to stop.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct StopPiiEntitiesDetectionJobOutput: Swift.Sendable {
    /// The identifier of the PII entities detection job to stop.
    public var jobId: Swift.String?
    /// The status of the PII entities detection job.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init(
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

public struct StopSentimentDetectionJobInput: Swift.Sendable {
    /// The identifier of the sentiment detection job to stop.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct StopSentimentDetectionJobOutput: Swift.Sendable {
    /// The identifier of the sentiment detection job to stop.
    public var jobId: Swift.String?
    /// Either STOP_REQUESTED if the job is currently running, or STOPPED if the job was previously stopped with the StopSentimentDetectionJob operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init(
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

public struct StopTargetedSentimentDetectionJobInput: Swift.Sendable {
    /// The identifier of the targeted sentiment detection job to stop.
    /// This member is required.
    public var jobId: Swift.String?

    public init(
        jobId: Swift.String? = nil
    )
    {
        self.jobId = jobId
    }
}

public struct StopTargetedSentimentDetectionJobOutput: Swift.Sendable {
    /// The identifier of the targeted sentiment detection job to stop.
    public var jobId: Swift.String?
    /// Either STOP_REQUESTED if the job is currently running, or STOPPED if the job was previously stopped with the StopSentimentDetectionJob operation.
    public var jobStatus: ComprehendClientTypes.JobStatus?

    public init(
        jobId: Swift.String? = nil,
        jobStatus: ComprehendClientTypes.JobStatus? = nil
    )
    {
        self.jobId = jobId
        self.jobStatus = jobStatus
    }
}

public struct StopTrainingDocumentClassifierInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that identifies the document classifier currently being trained.
    /// This member is required.
    public var documentClassifierArn: Swift.String?

    public init(
        documentClassifierArn: Swift.String? = nil
    )
    {
        self.documentClassifierArn = documentClassifierArn
    }
}

public struct StopTrainingDocumentClassifierOutput: Swift.Sendable {

    public init() { }
}

public struct StopTrainingEntityRecognizerInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) that identifies the entity recognizer currently being trained.
    /// This member is required.
    public var entityRecognizerArn: Swift.String?

    public init(
        entityRecognizerArn: Swift.String? = nil
    )
    {
        self.entityRecognizerArn = entityRecognizerArn
    }
}

public struct StopTrainingEntityRecognizerOutput: Swift.Sendable {

    public init() { }
}

/// Concurrent modification of the tags associated with an Amazon Comprehend resource is not supported.
public struct ConcurrentModificationException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "ConcurrentModificationException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct TagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the given Amazon Comprehend resource to which you want to associate the tags.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// Tags being associated with a specific Amazon Comprehend resource. There can be a maximum of 50 tags (both existing and pending) associated with a specific resource.
    /// This member is required.
    public var tags: [ComprehendClientTypes.Tag]?

    public init(
        resourceArn: Swift.String? = nil,
        tags: [ComprehendClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

public struct TagResourceOutput: Swift.Sendable {

    public init() { }
}

/// The request contains more tag keys than can be associated with a resource (50 tag keys per resource).
public struct TooManyTagKeysException: ClientRuntime.ModeledError, AWSClientRuntime.AWSServiceError, ClientRuntime.HTTPError, Swift.Error {

    public struct Properties {
        public internal(set) var message: Swift.String? = nil
    }

    public internal(set) var properties = Properties()
    public static var typeName: Swift.String { "TooManyTagKeysException" }
    public static var fault: ClientRuntime.ErrorFault { .client }
    public static var isRetryable: Swift.Bool { false }
    public static var isThrottling: Swift.Bool { false }
    public internal(set) var httpResponse = SmithyHTTPAPI.HTTPResponse()
    public internal(set) var message: Swift.String?
    public internal(set) var requestID: Swift.String?

    public init(
        message: Swift.String? = nil
    )
    {
        self.properties.message = message
    }
}

public struct UntagResourceInput: Swift.Sendable {
    /// The Amazon Resource Name (ARN) of the given Amazon Comprehend resource from which you want to remove the tags.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The initial part of a key-value pair that forms a tag being removed from a given resource. For example, a tag with "Sales" as the key might be added to a resource to indicate its use by the sales department. Keys must be unique and cannot be duplicated for a particular resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init(
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

public struct UntagResourceOutput: Swift.Sendable {

    public init() { }
}

public struct UpdateEndpointInput: Swift.Sendable {
    /// Data access role ARN to use in case the new model is encrypted with a customer CMK.
    public var desiredDataAccessRoleArn: Swift.String?
    /// The desired number of inference units to be used by the model using this endpoint. Each inference unit represents of a throughput of 100 characters per second.
    public var desiredInferenceUnits: Swift.Int?
    /// The ARN of the new model to use when updating an existing endpoint.
    public var desiredModelArn: Swift.String?
    /// The Amazon Resource Number (ARN) of the endpoint being updated.
    /// This member is required.
    public var endpointArn: Swift.String?
    /// The Amazon Resource Number (ARN) of the flywheel
    public var flywheelArn: Swift.String?

    public init(
        desiredDataAccessRoleArn: Swift.String? = nil,
        desiredInferenceUnits: Swift.Int? = nil,
        desiredModelArn: Swift.String? = nil,
        endpointArn: Swift.String? = nil,
        flywheelArn: Swift.String? = nil
    )
    {
        self.desiredDataAccessRoleArn = desiredDataAccessRoleArn
        self.desiredInferenceUnits = desiredInferenceUnits
        self.desiredModelArn = desiredModelArn
        self.endpointArn = endpointArn
        self.flywheelArn = flywheelArn
    }
}

public struct UpdateEndpointOutput: Swift.Sendable {
    /// The Amazon Resource Number (ARN) of the new model.
    public var desiredModelArn: Swift.String?

    public init(
        desiredModelArn: Swift.String? = nil
    )
    {
        self.desiredModelArn = desiredModelArn
    }
}

extension ComprehendClientTypes {

    /// Data security configuration.
    public struct UpdateDataSecurityConfig: Swift.Sendable {
        /// ID for the KMS key that Amazon Comprehend uses to encrypt trained custom models. The ModelKmsKeyId can be either of the following formats:
        ///
        /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
        ///
        /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab"
        public var modelKmsKeyId: Swift.String?
        /// ID for the KMS key that Amazon Comprehend uses to encrypt the volume.
        public var volumeKmsKeyId: Swift.String?
        /// Configuration parameters for an optional private Virtual Private Cloud (VPC) containing the resources you are using for the job. For more information, see [Amazon VPC](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html).
        public var vpcConfig: ComprehendClientTypes.VpcConfig?

        public init(
            modelKmsKeyId: Swift.String? = nil,
            volumeKmsKeyId: Swift.String? = nil,
            vpcConfig: ComprehendClientTypes.VpcConfig? = nil
        )
        {
            self.modelKmsKeyId = modelKmsKeyId
            self.volumeKmsKeyId = volumeKmsKeyId
            self.vpcConfig = vpcConfig
        }
    }
}

public struct UpdateFlywheelInput: Swift.Sendable {
    /// The Amazon Resource Number (ARN) of the active model version.
    public var activeModelArn: Swift.String?
    /// The Amazon Resource Name (ARN) of the IAM role that grants Amazon Comprehend permission to access the flywheel data.
    public var dataAccessRoleArn: Swift.String?
    /// Flywheel data security configuration.
    public var dataSecurityConfig: ComprehendClientTypes.UpdateDataSecurityConfig?
    /// The Amazon Resource Number (ARN) of the flywheel to update.
    /// This member is required.
    public var flywheelArn: Swift.String?

    public init(
        activeModelArn: Swift.String? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        dataSecurityConfig: ComprehendClientTypes.UpdateDataSecurityConfig? = nil,
        flywheelArn: Swift.String? = nil
    )
    {
        self.activeModelArn = activeModelArn
        self.dataAccessRoleArn = dataAccessRoleArn
        self.dataSecurityConfig = dataSecurityConfig
        self.flywheelArn = flywheelArn
    }
}

public struct UpdateFlywheelOutput: Swift.Sendable {
    /// The flywheel properties.
    public var flywheelProperties: ComprehendClientTypes.FlywheelProperties?

    public init(
        flywheelProperties: ComprehendClientTypes.FlywheelProperties? = nil
    )
    {
        self.flywheelProperties = flywheelProperties
    }
}

extension BatchDetectDominantLanguageInput {

    static func urlPathProvider(_ value: BatchDetectDominantLanguageInput) -> Swift.String? {
        return "/"
    }
}

extension BatchDetectEntitiesInput {

    static func urlPathProvider(_ value: BatchDetectEntitiesInput) -> Swift.String? {
        return "/"
    }
}

extension BatchDetectKeyPhrasesInput {

    static func urlPathProvider(_ value: BatchDetectKeyPhrasesInput) -> Swift.String? {
        return "/"
    }
}

extension BatchDetectSentimentInput {

    static func urlPathProvider(_ value: BatchDetectSentimentInput) -> Swift.String? {
        return "/"
    }
}

extension BatchDetectSyntaxInput {

    static func urlPathProvider(_ value: BatchDetectSyntaxInput) -> Swift.String? {
        return "/"
    }
}

extension BatchDetectTargetedSentimentInput {

    static func urlPathProvider(_ value: BatchDetectTargetedSentimentInput) -> Swift.String? {
        return "/"
    }
}

extension ClassifyDocumentInput {

    static func urlPathProvider(_ value: ClassifyDocumentInput) -> Swift.String? {
        return "/"
    }
}

extension ContainsPiiEntitiesInput {

    static func urlPathProvider(_ value: ContainsPiiEntitiesInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDatasetInput {

    static func urlPathProvider(_ value: CreateDatasetInput) -> Swift.String? {
        return "/"
    }
}

extension CreateDocumentClassifierInput {

    static func urlPathProvider(_ value: CreateDocumentClassifierInput) -> Swift.String? {
        return "/"
    }
}

extension CreateEndpointInput {

    static func urlPathProvider(_ value: CreateEndpointInput) -> Swift.String? {
        return "/"
    }
}

extension CreateEntityRecognizerInput {

    static func urlPathProvider(_ value: CreateEntityRecognizerInput) -> Swift.String? {
        return "/"
    }
}

extension CreateFlywheelInput {

    static func urlPathProvider(_ value: CreateFlywheelInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteDocumentClassifierInput {

    static func urlPathProvider(_ value: DeleteDocumentClassifierInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteEndpointInput {

    static func urlPathProvider(_ value: DeleteEndpointInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteEntityRecognizerInput {

    static func urlPathProvider(_ value: DeleteEntityRecognizerInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteFlywheelInput {

    static func urlPathProvider(_ value: DeleteFlywheelInput) -> Swift.String? {
        return "/"
    }
}

extension DeleteResourcePolicyInput {

    static func urlPathProvider(_ value: DeleteResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDatasetInput {

    static func urlPathProvider(_ value: DescribeDatasetInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDocumentClassificationJobInput {

    static func urlPathProvider(_ value: DescribeDocumentClassificationJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDocumentClassifierInput {

    static func urlPathProvider(_ value: DescribeDocumentClassifierInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeDominantLanguageDetectionJobInput {

    static func urlPathProvider(_ value: DescribeDominantLanguageDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEndpointInput {

    static func urlPathProvider(_ value: DescribeEndpointInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEntitiesDetectionJobInput {

    static func urlPathProvider(_ value: DescribeEntitiesDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEntityRecognizerInput {

    static func urlPathProvider(_ value: DescribeEntityRecognizerInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeEventsDetectionJobInput {

    static func urlPathProvider(_ value: DescribeEventsDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFlywheelInput {

    static func urlPathProvider(_ value: DescribeFlywheelInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeFlywheelIterationInput {

    static func urlPathProvider(_ value: DescribeFlywheelIterationInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeKeyPhrasesDetectionJobInput {

    static func urlPathProvider(_ value: DescribeKeyPhrasesDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribePiiEntitiesDetectionJobInput {

    static func urlPathProvider(_ value: DescribePiiEntitiesDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeResourcePolicyInput {

    static func urlPathProvider(_ value: DescribeResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeSentimentDetectionJobInput {

    static func urlPathProvider(_ value: DescribeSentimentDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTargetedSentimentDetectionJobInput {

    static func urlPathProvider(_ value: DescribeTargetedSentimentDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension DescribeTopicsDetectionJobInput {

    static func urlPathProvider(_ value: DescribeTopicsDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension DetectDominantLanguageInput {

    static func urlPathProvider(_ value: DetectDominantLanguageInput) -> Swift.String? {
        return "/"
    }
}

extension DetectEntitiesInput {

    static func urlPathProvider(_ value: DetectEntitiesInput) -> Swift.String? {
        return "/"
    }
}

extension DetectKeyPhrasesInput {

    static func urlPathProvider(_ value: DetectKeyPhrasesInput) -> Swift.String? {
        return "/"
    }
}

extension DetectPiiEntitiesInput {

    static func urlPathProvider(_ value: DetectPiiEntitiesInput) -> Swift.String? {
        return "/"
    }
}

extension DetectSentimentInput {

    static func urlPathProvider(_ value: DetectSentimentInput) -> Swift.String? {
        return "/"
    }
}

extension DetectSyntaxInput {

    static func urlPathProvider(_ value: DetectSyntaxInput) -> Swift.String? {
        return "/"
    }
}

extension DetectTargetedSentimentInput {

    static func urlPathProvider(_ value: DetectTargetedSentimentInput) -> Swift.String? {
        return "/"
    }
}

extension DetectToxicContentInput {

    static func urlPathProvider(_ value: DetectToxicContentInput) -> Swift.String? {
        return "/"
    }
}

extension ImportModelInput {

    static func urlPathProvider(_ value: ImportModelInput) -> Swift.String? {
        return "/"
    }
}

extension ListDatasetsInput {

    static func urlPathProvider(_ value: ListDatasetsInput) -> Swift.String? {
        return "/"
    }
}

extension ListDocumentClassificationJobsInput {

    static func urlPathProvider(_ value: ListDocumentClassificationJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListDocumentClassifiersInput {

    static func urlPathProvider(_ value: ListDocumentClassifiersInput) -> Swift.String? {
        return "/"
    }
}

extension ListDocumentClassifierSummariesInput {

    static func urlPathProvider(_ value: ListDocumentClassifierSummariesInput) -> Swift.String? {
        return "/"
    }
}

extension ListDominantLanguageDetectionJobsInput {

    static func urlPathProvider(_ value: ListDominantLanguageDetectionJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListEndpointsInput {

    static func urlPathProvider(_ value: ListEndpointsInput) -> Swift.String? {
        return "/"
    }
}

extension ListEntitiesDetectionJobsInput {

    static func urlPathProvider(_ value: ListEntitiesDetectionJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListEntityRecognizersInput {

    static func urlPathProvider(_ value: ListEntityRecognizersInput) -> Swift.String? {
        return "/"
    }
}

extension ListEntityRecognizerSummariesInput {

    static func urlPathProvider(_ value: ListEntityRecognizerSummariesInput) -> Swift.String? {
        return "/"
    }
}

extension ListEventsDetectionJobsInput {

    static func urlPathProvider(_ value: ListEventsDetectionJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListFlywheelIterationHistoryInput {

    static func urlPathProvider(_ value: ListFlywheelIterationHistoryInput) -> Swift.String? {
        return "/"
    }
}

extension ListFlywheelsInput {

    static func urlPathProvider(_ value: ListFlywheelsInput) -> Swift.String? {
        return "/"
    }
}

extension ListKeyPhrasesDetectionJobsInput {

    static func urlPathProvider(_ value: ListKeyPhrasesDetectionJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListPiiEntitiesDetectionJobsInput {

    static func urlPathProvider(_ value: ListPiiEntitiesDetectionJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListSentimentDetectionJobsInput {

    static func urlPathProvider(_ value: ListSentimentDetectionJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTagsForResourceInput {

    static func urlPathProvider(_ value: ListTagsForResourceInput) -> Swift.String? {
        return "/"
    }
}

extension ListTargetedSentimentDetectionJobsInput {

    static func urlPathProvider(_ value: ListTargetedSentimentDetectionJobsInput) -> Swift.String? {
        return "/"
    }
}

extension ListTopicsDetectionJobsInput {

    static func urlPathProvider(_ value: ListTopicsDetectionJobsInput) -> Swift.String? {
        return "/"
    }
}

extension PutResourcePolicyInput {

    static func urlPathProvider(_ value: PutResourcePolicyInput) -> Swift.String? {
        return "/"
    }
}

extension StartDocumentClassificationJobInput {

    static func urlPathProvider(_ value: StartDocumentClassificationJobInput) -> Swift.String? {
        return "/"
    }
}

extension StartDominantLanguageDetectionJobInput {

    static func urlPathProvider(_ value: StartDominantLanguageDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension StartEntitiesDetectionJobInput {

    static func urlPathProvider(_ value: StartEntitiesDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension StartEventsDetectionJobInput {

    static func urlPathProvider(_ value: StartEventsDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension StartFlywheelIterationInput {

    static func urlPathProvider(_ value: StartFlywheelIterationInput) -> Swift.String? {
        return "/"
    }
}

extension StartKeyPhrasesDetectionJobInput {

    static func urlPathProvider(_ value: StartKeyPhrasesDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension StartPiiEntitiesDetectionJobInput {

    static func urlPathProvider(_ value: StartPiiEntitiesDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension StartSentimentDetectionJobInput {

    static func urlPathProvider(_ value: StartSentimentDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension StartTargetedSentimentDetectionJobInput {

    static func urlPathProvider(_ value: StartTargetedSentimentDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension StartTopicsDetectionJobInput {

    static func urlPathProvider(_ value: StartTopicsDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopDominantLanguageDetectionJobInput {

    static func urlPathProvider(_ value: StopDominantLanguageDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopEntitiesDetectionJobInput {

    static func urlPathProvider(_ value: StopEntitiesDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopEventsDetectionJobInput {

    static func urlPathProvider(_ value: StopEventsDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopKeyPhrasesDetectionJobInput {

    static func urlPathProvider(_ value: StopKeyPhrasesDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopPiiEntitiesDetectionJobInput {

    static func urlPathProvider(_ value: StopPiiEntitiesDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopSentimentDetectionJobInput {

    static func urlPathProvider(_ value: StopSentimentDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopTargetedSentimentDetectionJobInput {

    static func urlPathProvider(_ value: StopTargetedSentimentDetectionJobInput) -> Swift.String? {
        return "/"
    }
}

extension StopTrainingDocumentClassifierInput {

    static func urlPathProvider(_ value: StopTrainingDocumentClassifierInput) -> Swift.String? {
        return "/"
    }
}

extension StopTrainingEntityRecognizerInput {

    static func urlPathProvider(_ value: StopTrainingEntityRecognizerInput) -> Swift.String? {
        return "/"
    }
}

extension TagResourceInput {

    static func urlPathProvider(_ value: TagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UntagResourceInput {

    static func urlPathProvider(_ value: UntagResourceInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateEndpointInput {

    static func urlPathProvider(_ value: UpdateEndpointInput) -> Swift.String? {
        return "/"
    }
}

extension UpdateFlywheelInput {

    static func urlPathProvider(_ value: UpdateFlywheelInput) -> Swift.String? {
        return "/"
    }
}

extension BatchDetectDominantLanguageInput {

    static func write(value: BatchDetectDominantLanguageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["TextList"].writeList(value.textList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchDetectEntitiesInput {

    static func write(value: BatchDetectEntitiesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LanguageCode"].write(value.languageCode)
        try writer["TextList"].writeList(value.textList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchDetectKeyPhrasesInput {

    static func write(value: BatchDetectKeyPhrasesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LanguageCode"].write(value.languageCode)
        try writer["TextList"].writeList(value.textList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchDetectSentimentInput {

    static func write(value: BatchDetectSentimentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LanguageCode"].write(value.languageCode)
        try writer["TextList"].writeList(value.textList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchDetectSyntaxInput {

    static func write(value: BatchDetectSyntaxInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LanguageCode"].write(value.languageCode)
        try writer["TextList"].writeList(value.textList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension BatchDetectTargetedSentimentInput {

    static func write(value: BatchDetectTargetedSentimentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LanguageCode"].write(value.languageCode)
        try writer["TextList"].writeList(value.textList, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ClassifyDocumentInput {

    static func write(value: ClassifyDocumentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bytes"].write(value.bytes)
        try writer["DocumentReaderConfig"].write(value.documentReaderConfig, with: ComprehendClientTypes.DocumentReaderConfig.write(value:to:))
        try writer["EndpointArn"].write(value.endpointArn)
        try writer["Text"].write(value.text)
    }
}

extension ContainsPiiEntitiesInput {

    static func write(value: ContainsPiiEntitiesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LanguageCode"].write(value.languageCode)
        try writer["Text"].write(value.text)
    }
}

extension CreateDatasetInput {

    static func write(value: CreateDatasetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DatasetName"].write(value.datasetName)
        try writer["DatasetType"].write(value.datasetType)
        try writer["Description"].write(value.description)
        try writer["FlywheelArn"].write(value.flywheelArn)
        try writer["InputDataConfig"].write(value.inputDataConfig, with: ComprehendClientTypes.DatasetInputDataConfig.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ComprehendClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateDocumentClassifierInput {

    static func write(value: CreateDocumentClassifierInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DataAccessRoleArn"].write(value.dataAccessRoleArn)
        try writer["DocumentClassifierName"].write(value.documentClassifierName)
        try writer["InputDataConfig"].write(value.inputDataConfig, with: ComprehendClientTypes.DocumentClassifierInputDataConfig.write(value:to:))
        try writer["LanguageCode"].write(value.languageCode)
        try writer["Mode"].write(value.mode)
        try writer["ModelKmsKeyId"].write(value.modelKmsKeyId)
        try writer["ModelPolicy"].write(value.modelPolicy)
        try writer["OutputDataConfig"].write(value.outputDataConfig, with: ComprehendClientTypes.DocumentClassifierOutputDataConfig.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ComprehendClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VersionName"].write(value.versionName)
        try writer["VolumeKmsKeyId"].write(value.volumeKmsKeyId)
        try writer["VpcConfig"].write(value.vpcConfig, with: ComprehendClientTypes.VpcConfig.write(value:to:))
    }
}

extension CreateEndpointInput {

    static func write(value: CreateEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DataAccessRoleArn"].write(value.dataAccessRoleArn)
        try writer["DesiredInferenceUnits"].write(value.desiredInferenceUnits)
        try writer["EndpointName"].write(value.endpointName)
        try writer["FlywheelArn"].write(value.flywheelArn)
        try writer["ModelArn"].write(value.modelArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ComprehendClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension CreateEntityRecognizerInput {

    static func write(value: CreateEntityRecognizerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DataAccessRoleArn"].write(value.dataAccessRoleArn)
        try writer["InputDataConfig"].write(value.inputDataConfig, with: ComprehendClientTypes.EntityRecognizerInputDataConfig.write(value:to:))
        try writer["LanguageCode"].write(value.languageCode)
        try writer["ModelKmsKeyId"].write(value.modelKmsKeyId)
        try writer["ModelPolicy"].write(value.modelPolicy)
        try writer["RecognizerName"].write(value.recognizerName)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ComprehendClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VersionName"].write(value.versionName)
        try writer["VolumeKmsKeyId"].write(value.volumeKmsKeyId)
        try writer["VpcConfig"].write(value.vpcConfig, with: ComprehendClientTypes.VpcConfig.write(value:to:))
    }
}

extension CreateFlywheelInput {

    static func write(value: CreateFlywheelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActiveModelArn"].write(value.activeModelArn)
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DataAccessRoleArn"].write(value.dataAccessRoleArn)
        try writer["DataLakeS3Uri"].write(value.dataLakeS3Uri)
        try writer["DataSecurityConfig"].write(value.dataSecurityConfig, with: ComprehendClientTypes.DataSecurityConfig.write(value:to:))
        try writer["FlywheelName"].write(value.flywheelName)
        try writer["ModelType"].write(value.modelType)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ComprehendClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TaskConfig"].write(value.taskConfig, with: ComprehendClientTypes.TaskConfig.write(value:to:))
    }
}

extension DeleteDocumentClassifierInput {

    static func write(value: DeleteDocumentClassifierInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DocumentClassifierArn"].write(value.documentClassifierArn)
    }
}

extension DeleteEndpointInput {

    static func write(value: DeleteEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndpointArn"].write(value.endpointArn)
    }
}

extension DeleteEntityRecognizerInput {

    static func write(value: DeleteEntityRecognizerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EntityRecognizerArn"].write(value.entityRecognizerArn)
    }
}

extension DeleteFlywheelInput {

    static func write(value: DeleteFlywheelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FlywheelArn"].write(value.flywheelArn)
    }
}

extension DeleteResourcePolicyInput {

    static func write(value: DeleteResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PolicyRevisionId"].write(value.policyRevisionId)
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension DescribeDatasetInput {

    static func write(value: DescribeDatasetInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DatasetArn"].write(value.datasetArn)
    }
}

extension DescribeDocumentClassificationJobInput {

    static func write(value: DescribeDocumentClassificationJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension DescribeDocumentClassifierInput {

    static func write(value: DescribeDocumentClassifierInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DocumentClassifierArn"].write(value.documentClassifierArn)
    }
}

extension DescribeDominantLanguageDetectionJobInput {

    static func write(value: DescribeDominantLanguageDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension DescribeEndpointInput {

    static func write(value: DescribeEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EndpointArn"].write(value.endpointArn)
    }
}

extension DescribeEntitiesDetectionJobInput {

    static func write(value: DescribeEntitiesDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension DescribeEntityRecognizerInput {

    static func write(value: DescribeEntityRecognizerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EntityRecognizerArn"].write(value.entityRecognizerArn)
    }
}

extension DescribeEventsDetectionJobInput {

    static func write(value: DescribeEventsDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension DescribeFlywheelInput {

    static func write(value: DescribeFlywheelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FlywheelArn"].write(value.flywheelArn)
    }
}

extension DescribeFlywheelIterationInput {

    static func write(value: DescribeFlywheelIterationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FlywheelArn"].write(value.flywheelArn)
        try writer["FlywheelIterationId"].write(value.flywheelIterationId)
    }
}

extension DescribeKeyPhrasesDetectionJobInput {

    static func write(value: DescribeKeyPhrasesDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension DescribePiiEntitiesDetectionJobInput {

    static func write(value: DescribePiiEntitiesDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension DescribeResourcePolicyInput {

    static func write(value: DescribeResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension DescribeSentimentDetectionJobInput {

    static func write(value: DescribeSentimentDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension DescribeTargetedSentimentDetectionJobInput {

    static func write(value: DescribeTargetedSentimentDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension DescribeTopicsDetectionJobInput {

    static func write(value: DescribeTopicsDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension DetectDominantLanguageInput {

    static func write(value: DetectDominantLanguageInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Text"].write(value.text)
    }
}

extension DetectEntitiesInput {

    static func write(value: DetectEntitiesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Bytes"].write(value.bytes)
        try writer["DocumentReaderConfig"].write(value.documentReaderConfig, with: ComprehendClientTypes.DocumentReaderConfig.write(value:to:))
        try writer["EndpointArn"].write(value.endpointArn)
        try writer["LanguageCode"].write(value.languageCode)
        try writer["Text"].write(value.text)
    }
}

extension DetectKeyPhrasesInput {

    static func write(value: DetectKeyPhrasesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LanguageCode"].write(value.languageCode)
        try writer["Text"].write(value.text)
    }
}

extension DetectPiiEntitiesInput {

    static func write(value: DetectPiiEntitiesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LanguageCode"].write(value.languageCode)
        try writer["Text"].write(value.text)
    }
}

extension DetectSentimentInput {

    static func write(value: DetectSentimentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LanguageCode"].write(value.languageCode)
        try writer["Text"].write(value.text)
    }
}

extension DetectSyntaxInput {

    static func write(value: DetectSyntaxInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LanguageCode"].write(value.languageCode)
        try writer["Text"].write(value.text)
    }
}

extension DetectTargetedSentimentInput {

    static func write(value: DetectTargetedSentimentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LanguageCode"].write(value.languageCode)
        try writer["Text"].write(value.text)
    }
}

extension DetectToxicContentInput {

    static func write(value: DetectToxicContentInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LanguageCode"].write(value.languageCode)
        try writer["TextSegments"].writeList(value.textSegments, memberWritingClosure: ComprehendClientTypes.TextSegment.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension ImportModelInput {

    static func write(value: ImportModelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataAccessRoleArn"].write(value.dataAccessRoleArn)
        try writer["ModelKmsKeyId"].write(value.modelKmsKeyId)
        try writer["ModelName"].write(value.modelName)
        try writer["SourceModelArn"].write(value.sourceModelArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ComprehendClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VersionName"].write(value.versionName)
    }
}

extension ListDatasetsInput {

    static func write(value: ListDatasetsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: ComprehendClientTypes.DatasetFilter.write(value:to:))
        try writer["FlywheelArn"].write(value.flywheelArn)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListDocumentClassificationJobsInput {

    static func write(value: ListDocumentClassificationJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: ComprehendClientTypes.DocumentClassificationJobFilter.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListDocumentClassifiersInput {

    static func write(value: ListDocumentClassifiersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: ComprehendClientTypes.DocumentClassifierFilter.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListDocumentClassifierSummariesInput {

    static func write(value: ListDocumentClassifierSummariesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListDominantLanguageDetectionJobsInput {

    static func write(value: ListDominantLanguageDetectionJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: ComprehendClientTypes.DominantLanguageDetectionJobFilter.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListEndpointsInput {

    static func write(value: ListEndpointsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: ComprehendClientTypes.EndpointFilter.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListEntitiesDetectionJobsInput {

    static func write(value: ListEntitiesDetectionJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: ComprehendClientTypes.EntitiesDetectionJobFilter.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListEntityRecognizersInput {

    static func write(value: ListEntityRecognizersInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: ComprehendClientTypes.EntityRecognizerFilter.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListEntityRecognizerSummariesInput {

    static func write(value: ListEntityRecognizerSummariesInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListEventsDetectionJobsInput {

    static func write(value: ListEventsDetectionJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: ComprehendClientTypes.EventsDetectionJobFilter.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListFlywheelIterationHistoryInput {

    static func write(value: ListFlywheelIterationHistoryInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: ComprehendClientTypes.FlywheelIterationFilter.write(value:to:))
        try writer["FlywheelArn"].write(value.flywheelArn)
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListFlywheelsInput {

    static func write(value: ListFlywheelsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: ComprehendClientTypes.FlywheelFilter.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListKeyPhrasesDetectionJobsInput {

    static func write(value: ListKeyPhrasesDetectionJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: ComprehendClientTypes.KeyPhrasesDetectionJobFilter.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListPiiEntitiesDetectionJobsInput {

    static func write(value: ListPiiEntitiesDetectionJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: ComprehendClientTypes.PiiEntitiesDetectionJobFilter.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListSentimentDetectionJobsInput {

    static func write(value: ListSentimentDetectionJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: ComprehendClientTypes.SentimentDetectionJobFilter.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListTagsForResourceInput {

    static func write(value: ListTagsForResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
    }
}

extension ListTargetedSentimentDetectionJobsInput {

    static func write(value: ListTargetedSentimentDetectionJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: ComprehendClientTypes.TargetedSentimentDetectionJobFilter.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension ListTopicsDetectionJobsInput {

    static func write(value: ListTopicsDetectionJobsInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Filter"].write(value.filter, with: ComprehendClientTypes.TopicsDetectionJobFilter.write(value:to:))
        try writer["MaxResults"].write(value.maxResults)
        try writer["NextToken"].write(value.nextToken)
    }
}

extension PutResourcePolicyInput {

    static func write(value: PutResourcePolicyInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["PolicyRevisionId"].write(value.policyRevisionId)
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["ResourcePolicy"].write(value.resourcePolicy)
    }
}

extension StartDocumentClassificationJobInput {

    static func write(value: StartDocumentClassificationJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DataAccessRoleArn"].write(value.dataAccessRoleArn)
        try writer["DocumentClassifierArn"].write(value.documentClassifierArn)
        try writer["FlywheelArn"].write(value.flywheelArn)
        try writer["InputDataConfig"].write(value.inputDataConfig, with: ComprehendClientTypes.InputDataConfig.write(value:to:))
        try writer["JobName"].write(value.jobName)
        try writer["OutputDataConfig"].write(value.outputDataConfig, with: ComprehendClientTypes.OutputDataConfig.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ComprehendClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VolumeKmsKeyId"].write(value.volumeKmsKeyId)
        try writer["VpcConfig"].write(value.vpcConfig, with: ComprehendClientTypes.VpcConfig.write(value:to:))
    }
}

extension StartDominantLanguageDetectionJobInput {

    static func write(value: StartDominantLanguageDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DataAccessRoleArn"].write(value.dataAccessRoleArn)
        try writer["InputDataConfig"].write(value.inputDataConfig, with: ComprehendClientTypes.InputDataConfig.write(value:to:))
        try writer["JobName"].write(value.jobName)
        try writer["OutputDataConfig"].write(value.outputDataConfig, with: ComprehendClientTypes.OutputDataConfig.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ComprehendClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VolumeKmsKeyId"].write(value.volumeKmsKeyId)
        try writer["VpcConfig"].write(value.vpcConfig, with: ComprehendClientTypes.VpcConfig.write(value:to:))
    }
}

extension StartEntitiesDetectionJobInput {

    static func write(value: StartEntitiesDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DataAccessRoleArn"].write(value.dataAccessRoleArn)
        try writer["EntityRecognizerArn"].write(value.entityRecognizerArn)
        try writer["FlywheelArn"].write(value.flywheelArn)
        try writer["InputDataConfig"].write(value.inputDataConfig, with: ComprehendClientTypes.InputDataConfig.write(value:to:))
        try writer["JobName"].write(value.jobName)
        try writer["LanguageCode"].write(value.languageCode)
        try writer["OutputDataConfig"].write(value.outputDataConfig, with: ComprehendClientTypes.OutputDataConfig.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ComprehendClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VolumeKmsKeyId"].write(value.volumeKmsKeyId)
        try writer["VpcConfig"].write(value.vpcConfig, with: ComprehendClientTypes.VpcConfig.write(value:to:))
    }
}

extension StartEventsDetectionJobInput {

    static func write(value: StartEventsDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DataAccessRoleArn"].write(value.dataAccessRoleArn)
        try writer["InputDataConfig"].write(value.inputDataConfig, with: ComprehendClientTypes.InputDataConfig.write(value:to:))
        try writer["JobName"].write(value.jobName)
        try writer["LanguageCode"].write(value.languageCode)
        try writer["OutputDataConfig"].write(value.outputDataConfig, with: ComprehendClientTypes.OutputDataConfig.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ComprehendClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["TargetEventTypes"].writeList(value.targetEventTypes, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension StartFlywheelIterationInput {

    static func write(value: StartFlywheelIterationInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["FlywheelArn"].write(value.flywheelArn)
    }
}

extension StartKeyPhrasesDetectionJobInput {

    static func write(value: StartKeyPhrasesDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DataAccessRoleArn"].write(value.dataAccessRoleArn)
        try writer["InputDataConfig"].write(value.inputDataConfig, with: ComprehendClientTypes.InputDataConfig.write(value:to:))
        try writer["JobName"].write(value.jobName)
        try writer["LanguageCode"].write(value.languageCode)
        try writer["OutputDataConfig"].write(value.outputDataConfig, with: ComprehendClientTypes.OutputDataConfig.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ComprehendClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VolumeKmsKeyId"].write(value.volumeKmsKeyId)
        try writer["VpcConfig"].write(value.vpcConfig, with: ComprehendClientTypes.VpcConfig.write(value:to:))
    }
}

extension StartPiiEntitiesDetectionJobInput {

    static func write(value: StartPiiEntitiesDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DataAccessRoleArn"].write(value.dataAccessRoleArn)
        try writer["InputDataConfig"].write(value.inputDataConfig, with: ComprehendClientTypes.InputDataConfig.write(value:to:))
        try writer["JobName"].write(value.jobName)
        try writer["LanguageCode"].write(value.languageCode)
        try writer["Mode"].write(value.mode)
        try writer["OutputDataConfig"].write(value.outputDataConfig, with: ComprehendClientTypes.OutputDataConfig.write(value:to:))
        try writer["RedactionConfig"].write(value.redactionConfig, with: ComprehendClientTypes.RedactionConfig.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ComprehendClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension StartSentimentDetectionJobInput {

    static func write(value: StartSentimentDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DataAccessRoleArn"].write(value.dataAccessRoleArn)
        try writer["InputDataConfig"].write(value.inputDataConfig, with: ComprehendClientTypes.InputDataConfig.write(value:to:))
        try writer["JobName"].write(value.jobName)
        try writer["LanguageCode"].write(value.languageCode)
        try writer["OutputDataConfig"].write(value.outputDataConfig, with: ComprehendClientTypes.OutputDataConfig.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ComprehendClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VolumeKmsKeyId"].write(value.volumeKmsKeyId)
        try writer["VpcConfig"].write(value.vpcConfig, with: ComprehendClientTypes.VpcConfig.write(value:to:))
    }
}

extension StartTargetedSentimentDetectionJobInput {

    static func write(value: StartTargetedSentimentDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DataAccessRoleArn"].write(value.dataAccessRoleArn)
        try writer["InputDataConfig"].write(value.inputDataConfig, with: ComprehendClientTypes.InputDataConfig.write(value:to:))
        try writer["JobName"].write(value.jobName)
        try writer["LanguageCode"].write(value.languageCode)
        try writer["OutputDataConfig"].write(value.outputDataConfig, with: ComprehendClientTypes.OutputDataConfig.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ComprehendClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VolumeKmsKeyId"].write(value.volumeKmsKeyId)
        try writer["VpcConfig"].write(value.vpcConfig, with: ComprehendClientTypes.VpcConfig.write(value:to:))
    }
}

extension StartTopicsDetectionJobInput {

    static func write(value: StartTopicsDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ClientRequestToken"].write(value.clientRequestToken)
        try writer["DataAccessRoleArn"].write(value.dataAccessRoleArn)
        try writer["InputDataConfig"].write(value.inputDataConfig, with: ComprehendClientTypes.InputDataConfig.write(value:to:))
        try writer["JobName"].write(value.jobName)
        try writer["NumberOfTopics"].write(value.numberOfTopics)
        try writer["OutputDataConfig"].write(value.outputDataConfig, with: ComprehendClientTypes.OutputDataConfig.write(value:to:))
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ComprehendClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["VolumeKmsKeyId"].write(value.volumeKmsKeyId)
        try writer["VpcConfig"].write(value.vpcConfig, with: ComprehendClientTypes.VpcConfig.write(value:to:))
    }
}

extension StopDominantLanguageDetectionJobInput {

    static func write(value: StopDominantLanguageDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension StopEntitiesDetectionJobInput {

    static func write(value: StopEntitiesDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension StopEventsDetectionJobInput {

    static func write(value: StopEventsDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension StopKeyPhrasesDetectionJobInput {

    static func write(value: StopKeyPhrasesDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension StopPiiEntitiesDetectionJobInput {

    static func write(value: StopPiiEntitiesDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension StopSentimentDetectionJobInput {

    static func write(value: StopSentimentDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension StopTargetedSentimentDetectionJobInput {

    static func write(value: StopTargetedSentimentDetectionJobInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobId"].write(value.jobId)
    }
}

extension StopTrainingDocumentClassifierInput {

    static func write(value: StopTrainingDocumentClassifierInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DocumentClassifierArn"].write(value.documentClassifierArn)
    }
}

extension StopTrainingEntityRecognizerInput {

    static func write(value: StopTrainingEntityRecognizerInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EntityRecognizerArn"].write(value.entityRecognizerArn)
    }
}

extension TagResourceInput {

    static func write(value: TagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["Tags"].writeList(value.tags, memberWritingClosure: ComprehendClientTypes.Tag.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UntagResourceInput {

    static func write(value: UntagResourceInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ResourceArn"].write(value.resourceArn)
        try writer["TagKeys"].writeList(value.tagKeys, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }
}

extension UpdateEndpointInput {

    static func write(value: UpdateEndpointInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DesiredDataAccessRoleArn"].write(value.desiredDataAccessRoleArn)
        try writer["DesiredInferenceUnits"].write(value.desiredInferenceUnits)
        try writer["DesiredModelArn"].write(value.desiredModelArn)
        try writer["EndpointArn"].write(value.endpointArn)
        try writer["FlywheelArn"].write(value.flywheelArn)
    }
}

extension UpdateFlywheelInput {

    static func write(value: UpdateFlywheelInput?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ActiveModelArn"].write(value.activeModelArn)
        try writer["DataAccessRoleArn"].write(value.dataAccessRoleArn)
        try writer["DataSecurityConfig"].write(value.dataSecurityConfig, with: ComprehendClientTypes.UpdateDataSecurityConfig.write(value:to:))
        try writer["FlywheelArn"].write(value.flywheelArn)
    }
}

extension BatchDetectDominantLanguageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchDetectDominantLanguageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchDetectDominantLanguageOutput()
        value.errorList = try reader["ErrorList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.BatchItemError.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.resultList = try reader["ResultList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.BatchDetectDominantLanguageItemResult.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension BatchDetectEntitiesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchDetectEntitiesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchDetectEntitiesOutput()
        value.errorList = try reader["ErrorList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.BatchItemError.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.resultList = try reader["ResultList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.BatchDetectEntitiesItemResult.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension BatchDetectKeyPhrasesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchDetectKeyPhrasesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchDetectKeyPhrasesOutput()
        value.errorList = try reader["ErrorList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.BatchItemError.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.resultList = try reader["ResultList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.BatchDetectKeyPhrasesItemResult.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension BatchDetectSentimentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchDetectSentimentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchDetectSentimentOutput()
        value.errorList = try reader["ErrorList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.BatchItemError.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.resultList = try reader["ResultList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.BatchDetectSentimentItemResult.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension BatchDetectSyntaxOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchDetectSyntaxOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchDetectSyntaxOutput()
        value.errorList = try reader["ErrorList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.BatchItemError.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.resultList = try reader["ResultList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.BatchDetectSyntaxItemResult.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension BatchDetectTargetedSentimentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> BatchDetectTargetedSentimentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = BatchDetectTargetedSentimentOutput()
        value.errorList = try reader["ErrorList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.BatchItemError.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.resultList = try reader["ResultList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.BatchDetectTargetedSentimentItemResult.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ClassifyDocumentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ClassifyDocumentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ClassifyDocumentOutput()
        value.classes = try reader["Classes"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.DocumentClass.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.documentMetadata = try reader["DocumentMetadata"].readIfPresent(with: ComprehendClientTypes.DocumentMetadata.read(from:))
        value.documentType = try reader["DocumentType"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.DocumentTypeListItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.ErrorsListItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.labels = try reader["Labels"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.DocumentLabel.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.warnings = try reader["Warnings"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.WarningsListItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ContainsPiiEntitiesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ContainsPiiEntitiesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ContainsPiiEntitiesOutput()
        value.labels = try reader["Labels"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.EntityLabel.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension CreateDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDatasetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDatasetOutput()
        value.datasetArn = try reader["DatasetArn"].readIfPresent()
        return value
    }
}

extension CreateDocumentClassifierOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateDocumentClassifierOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateDocumentClassifierOutput()
        value.documentClassifierArn = try reader["DocumentClassifierArn"].readIfPresent()
        return value
    }
}

extension CreateEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEndpointOutput()
        value.endpointArn = try reader["EndpointArn"].readIfPresent()
        value.modelArn = try reader["ModelArn"].readIfPresent()
        return value
    }
}

extension CreateEntityRecognizerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateEntityRecognizerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateEntityRecognizerOutput()
        value.entityRecognizerArn = try reader["EntityRecognizerArn"].readIfPresent()
        return value
    }
}

extension CreateFlywheelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> CreateFlywheelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = CreateFlywheelOutput()
        value.activeModelArn = try reader["ActiveModelArn"].readIfPresent()
        value.flywheelArn = try reader["FlywheelArn"].readIfPresent()
        return value
    }
}

extension DeleteDocumentClassifierOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteDocumentClassifierOutput {
        return DeleteDocumentClassifierOutput()
    }
}

extension DeleteEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEndpointOutput {
        return DeleteEndpointOutput()
    }
}

extension DeleteEntityRecognizerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteEntityRecognizerOutput {
        return DeleteEntityRecognizerOutput()
    }
}

extension DeleteFlywheelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteFlywheelOutput {
        return DeleteFlywheelOutput()
    }
}

extension DeleteResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DeleteResourcePolicyOutput {
        return DeleteResourcePolicyOutput()
    }
}

extension DescribeDatasetOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDatasetOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDatasetOutput()
        value.datasetProperties = try reader["DatasetProperties"].readIfPresent(with: ComprehendClientTypes.DatasetProperties.read(from:))
        return value
    }
}

extension DescribeDocumentClassificationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDocumentClassificationJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDocumentClassificationJobOutput()
        value.documentClassificationJobProperties = try reader["DocumentClassificationJobProperties"].readIfPresent(with: ComprehendClientTypes.DocumentClassificationJobProperties.read(from:))
        return value
    }
}

extension DescribeDocumentClassifierOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDocumentClassifierOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDocumentClassifierOutput()
        value.documentClassifierProperties = try reader["DocumentClassifierProperties"].readIfPresent(with: ComprehendClientTypes.DocumentClassifierProperties.read(from:))
        return value
    }
}

extension DescribeDominantLanguageDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeDominantLanguageDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeDominantLanguageDetectionJobOutput()
        value.dominantLanguageDetectionJobProperties = try reader["DominantLanguageDetectionJobProperties"].readIfPresent(with: ComprehendClientTypes.DominantLanguageDetectionJobProperties.read(from:))
        return value
    }
}

extension DescribeEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEndpointOutput()
        value.endpointProperties = try reader["EndpointProperties"].readIfPresent(with: ComprehendClientTypes.EndpointProperties.read(from:))
        return value
    }
}

extension DescribeEntitiesDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEntitiesDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEntitiesDetectionJobOutput()
        value.entitiesDetectionJobProperties = try reader["EntitiesDetectionJobProperties"].readIfPresent(with: ComprehendClientTypes.EntitiesDetectionJobProperties.read(from:))
        return value
    }
}

extension DescribeEntityRecognizerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEntityRecognizerOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEntityRecognizerOutput()
        value.entityRecognizerProperties = try reader["EntityRecognizerProperties"].readIfPresent(with: ComprehendClientTypes.EntityRecognizerProperties.read(from:))
        return value
    }
}

extension DescribeEventsDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeEventsDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeEventsDetectionJobOutput()
        value.eventsDetectionJobProperties = try reader["EventsDetectionJobProperties"].readIfPresent(with: ComprehendClientTypes.EventsDetectionJobProperties.read(from:))
        return value
    }
}

extension DescribeFlywheelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFlywheelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFlywheelOutput()
        value.flywheelProperties = try reader["FlywheelProperties"].readIfPresent(with: ComprehendClientTypes.FlywheelProperties.read(from:))
        return value
    }
}

extension DescribeFlywheelIterationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeFlywheelIterationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeFlywheelIterationOutput()
        value.flywheelIterationProperties = try reader["FlywheelIterationProperties"].readIfPresent(with: ComprehendClientTypes.FlywheelIterationProperties.read(from:))
        return value
    }
}

extension DescribeKeyPhrasesDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeKeyPhrasesDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeKeyPhrasesDetectionJobOutput()
        value.keyPhrasesDetectionJobProperties = try reader["KeyPhrasesDetectionJobProperties"].readIfPresent(with: ComprehendClientTypes.KeyPhrasesDetectionJobProperties.read(from:))
        return value
    }
}

extension DescribePiiEntitiesDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribePiiEntitiesDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribePiiEntitiesDetectionJobOutput()
        value.piiEntitiesDetectionJobProperties = try reader["PiiEntitiesDetectionJobProperties"].readIfPresent(with: ComprehendClientTypes.PiiEntitiesDetectionJobProperties.read(from:))
        return value
    }
}

extension DescribeResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeResourcePolicyOutput()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.policyRevisionId = try reader["PolicyRevisionId"].readIfPresent()
        value.resourcePolicy = try reader["ResourcePolicy"].readIfPresent()
        return value
    }
}

extension DescribeSentimentDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeSentimentDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeSentimentDetectionJobOutput()
        value.sentimentDetectionJobProperties = try reader["SentimentDetectionJobProperties"].readIfPresent(with: ComprehendClientTypes.SentimentDetectionJobProperties.read(from:))
        return value
    }
}

extension DescribeTargetedSentimentDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTargetedSentimentDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTargetedSentimentDetectionJobOutput()
        value.targetedSentimentDetectionJobProperties = try reader["TargetedSentimentDetectionJobProperties"].readIfPresent(with: ComprehendClientTypes.TargetedSentimentDetectionJobProperties.read(from:))
        return value
    }
}

extension DescribeTopicsDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DescribeTopicsDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DescribeTopicsDetectionJobOutput()
        value.topicsDetectionJobProperties = try reader["TopicsDetectionJobProperties"].readIfPresent(with: ComprehendClientTypes.TopicsDetectionJobProperties.read(from:))
        return value
    }
}

extension DetectDominantLanguageOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetectDominantLanguageOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DetectDominantLanguageOutput()
        value.languages = try reader["Languages"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.DominantLanguage.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DetectEntitiesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetectEntitiesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DetectEntitiesOutput()
        value.blocks = try reader["Blocks"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.Block.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.documentMetadata = try reader["DocumentMetadata"].readIfPresent(with: ComprehendClientTypes.DocumentMetadata.read(from:))
        value.documentType = try reader["DocumentType"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.DocumentTypeListItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.entities = try reader["Entities"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.Entity.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.errors = try reader["Errors"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.ErrorsListItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DetectKeyPhrasesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetectKeyPhrasesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DetectKeyPhrasesOutput()
        value.keyPhrases = try reader["KeyPhrases"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.KeyPhrase.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DetectPiiEntitiesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetectPiiEntitiesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DetectPiiEntitiesOutput()
        value.entities = try reader["Entities"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.PiiEntity.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DetectSentimentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetectSentimentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DetectSentimentOutput()
        value.sentiment = try reader["Sentiment"].readIfPresent()
        value.sentimentScore = try reader["SentimentScore"].readIfPresent(with: ComprehendClientTypes.SentimentScore.read(from:))
        return value
    }
}

extension DetectSyntaxOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetectSyntaxOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DetectSyntaxOutput()
        value.syntaxTokens = try reader["SyntaxTokens"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.SyntaxToken.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DetectTargetedSentimentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetectTargetedSentimentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DetectTargetedSentimentOutput()
        value.entities = try reader["Entities"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.TargetedSentimentEntity.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension DetectToxicContentOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> DetectToxicContentOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = DetectToxicContentOutput()
        value.resultList = try reader["ResultList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.ToxicLabels.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ImportModelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ImportModelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ImportModelOutput()
        value.modelArn = try reader["ModelArn"].readIfPresent()
        return value
    }
}

extension ListDatasetsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDatasetsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDatasetsOutput()
        value.datasetPropertiesList = try reader["DatasetPropertiesList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.DatasetProperties.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDocumentClassificationJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDocumentClassificationJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDocumentClassificationJobsOutput()
        value.documentClassificationJobPropertiesList = try reader["DocumentClassificationJobPropertiesList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.DocumentClassificationJobProperties.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDocumentClassifiersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDocumentClassifiersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDocumentClassifiersOutput()
        value.documentClassifierPropertiesList = try reader["DocumentClassifierPropertiesList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.DocumentClassifierProperties.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDocumentClassifierSummariesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDocumentClassifierSummariesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDocumentClassifierSummariesOutput()
        value.documentClassifierSummariesList = try reader["DocumentClassifierSummariesList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.DocumentClassifierSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListDominantLanguageDetectionJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListDominantLanguageDetectionJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListDominantLanguageDetectionJobsOutput()
        value.dominantLanguageDetectionJobPropertiesList = try reader["DominantLanguageDetectionJobPropertiesList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.DominantLanguageDetectionJobProperties.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListEndpointsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEndpointsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEndpointsOutput()
        value.endpointPropertiesList = try reader["EndpointPropertiesList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.EndpointProperties.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListEntitiesDetectionJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEntitiesDetectionJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEntitiesDetectionJobsOutput()
        value.entitiesDetectionJobPropertiesList = try reader["EntitiesDetectionJobPropertiesList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.EntitiesDetectionJobProperties.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListEntityRecognizersOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEntityRecognizersOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEntityRecognizersOutput()
        value.entityRecognizerPropertiesList = try reader["EntityRecognizerPropertiesList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.EntityRecognizerProperties.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListEntityRecognizerSummariesOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEntityRecognizerSummariesOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEntityRecognizerSummariesOutput()
        value.entityRecognizerSummariesList = try reader["EntityRecognizerSummariesList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.EntityRecognizerSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListEventsDetectionJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListEventsDetectionJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListEventsDetectionJobsOutput()
        value.eventsDetectionJobPropertiesList = try reader["EventsDetectionJobPropertiesList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.EventsDetectionJobProperties.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListFlywheelIterationHistoryOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListFlywheelIterationHistoryOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListFlywheelIterationHistoryOutput()
        value.flywheelIterationPropertiesList = try reader["FlywheelIterationPropertiesList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.FlywheelIterationProperties.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListFlywheelsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListFlywheelsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListFlywheelsOutput()
        value.flywheelSummaryList = try reader["FlywheelSummaryList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.FlywheelSummary.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListKeyPhrasesDetectionJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListKeyPhrasesDetectionJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListKeyPhrasesDetectionJobsOutput()
        value.keyPhrasesDetectionJobPropertiesList = try reader["KeyPhrasesDetectionJobPropertiesList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.KeyPhrasesDetectionJobProperties.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.nextToken = try reader["NextToken"].readIfPresent()
        return value
    }
}

extension ListPiiEntitiesDetectionJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListPiiEntitiesDetectionJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListPiiEntitiesDetectionJobsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.piiEntitiesDetectionJobPropertiesList = try reader["PiiEntitiesDetectionJobPropertiesList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.PiiEntitiesDetectionJobProperties.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListSentimentDetectionJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListSentimentDetectionJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListSentimentDetectionJobsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.sentimentDetectionJobPropertiesList = try reader["SentimentDetectionJobPropertiesList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.SentimentDetectionJobProperties.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTagsForResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTagsForResourceOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTagsForResourceOutput()
        value.resourceArn = try reader["ResourceArn"].readIfPresent()
        value.tags = try reader["Tags"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.Tag.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTargetedSentimentDetectionJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTargetedSentimentDetectionJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTargetedSentimentDetectionJobsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.targetedSentimentDetectionJobPropertiesList = try reader["TargetedSentimentDetectionJobPropertiesList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.TargetedSentimentDetectionJobProperties.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ListTopicsDetectionJobsOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> ListTopicsDetectionJobsOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = ListTopicsDetectionJobsOutput()
        value.nextToken = try reader["NextToken"].readIfPresent()
        value.topicsDetectionJobPropertiesList = try reader["TopicsDetectionJobPropertiesList"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.TopicsDetectionJobProperties.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension PutResourcePolicyOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> PutResourcePolicyOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = PutResourcePolicyOutput()
        value.policyRevisionId = try reader["PolicyRevisionId"].readIfPresent()
        return value
    }
}

extension StartDocumentClassificationJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartDocumentClassificationJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartDocumentClassificationJobOutput()
        value.documentClassifierArn = try reader["DocumentClassifierArn"].readIfPresent()
        value.jobArn = try reader["JobArn"].readIfPresent()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        return value
    }
}

extension StartDominantLanguageDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartDominantLanguageDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartDominantLanguageDetectionJobOutput()
        value.jobArn = try reader["JobArn"].readIfPresent()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        return value
    }
}

extension StartEntitiesDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartEntitiesDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartEntitiesDetectionJobOutput()
        value.entityRecognizerArn = try reader["EntityRecognizerArn"].readIfPresent()
        value.jobArn = try reader["JobArn"].readIfPresent()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        return value
    }
}

extension StartEventsDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartEventsDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartEventsDetectionJobOutput()
        value.jobArn = try reader["JobArn"].readIfPresent()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        return value
    }
}

extension StartFlywheelIterationOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartFlywheelIterationOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartFlywheelIterationOutput()
        value.flywheelArn = try reader["FlywheelArn"].readIfPresent()
        value.flywheelIterationId = try reader["FlywheelIterationId"].readIfPresent()
        return value
    }
}

extension StartKeyPhrasesDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartKeyPhrasesDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartKeyPhrasesDetectionJobOutput()
        value.jobArn = try reader["JobArn"].readIfPresent()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        return value
    }
}

extension StartPiiEntitiesDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartPiiEntitiesDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartPiiEntitiesDetectionJobOutput()
        value.jobArn = try reader["JobArn"].readIfPresent()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        return value
    }
}

extension StartSentimentDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartSentimentDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartSentimentDetectionJobOutput()
        value.jobArn = try reader["JobArn"].readIfPresent()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        return value
    }
}

extension StartTargetedSentimentDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartTargetedSentimentDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartTargetedSentimentDetectionJobOutput()
        value.jobArn = try reader["JobArn"].readIfPresent()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        return value
    }
}

extension StartTopicsDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StartTopicsDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StartTopicsDetectionJobOutput()
        value.jobArn = try reader["JobArn"].readIfPresent()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        return value
    }
}

extension StopDominantLanguageDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopDominantLanguageDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopDominantLanguageDetectionJobOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        return value
    }
}

extension StopEntitiesDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopEntitiesDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopEntitiesDetectionJobOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        return value
    }
}

extension StopEventsDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopEventsDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopEventsDetectionJobOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        return value
    }
}

extension StopKeyPhrasesDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopKeyPhrasesDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopKeyPhrasesDetectionJobOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        return value
    }
}

extension StopPiiEntitiesDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopPiiEntitiesDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopPiiEntitiesDetectionJobOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        return value
    }
}

extension StopSentimentDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopSentimentDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopSentimentDetectionJobOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        return value
    }
}

extension StopTargetedSentimentDetectionJobOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopTargetedSentimentDetectionJobOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = StopTargetedSentimentDetectionJobOutput()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        return value
    }
}

extension StopTrainingDocumentClassifierOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopTrainingDocumentClassifierOutput {
        return StopTrainingDocumentClassifierOutput()
    }
}

extension StopTrainingEntityRecognizerOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> StopTrainingEntityRecognizerOutput {
        return StopTrainingEntityRecognizerOutput()
    }
}

extension TagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> TagResourceOutput {
        return TagResourceOutput()
    }
}

extension UntagResourceOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UntagResourceOutput {
        return UntagResourceOutput()
    }
}

extension UpdateEndpointOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateEndpointOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateEndpointOutput()
        value.desiredModelArn = try reader["DesiredModelArn"].readIfPresent()
        return value
    }
}

extension UpdateFlywheelOutput {

    static func httpOutput(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> UpdateFlywheelOutput {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let reader = responseReader
        var value = UpdateFlywheelOutput()
        value.flywheelProperties = try reader["FlywheelProperties"].readIfPresent(with: ComprehendClientTypes.FlywheelProperties.read(from:))
        return value
    }
}

enum BatchDetectDominantLanguageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BatchSizeLimitExceededException": return try BatchSizeLimitExceededException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TextSizeLimitExceededException": return try TextSizeLimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchDetectEntitiesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BatchSizeLimitExceededException": return try BatchSizeLimitExceededException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TextSizeLimitExceededException": return try TextSizeLimitExceededException.makeError(baseError: baseError)
            case "UnsupportedLanguageException": return try UnsupportedLanguageException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchDetectKeyPhrasesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BatchSizeLimitExceededException": return try BatchSizeLimitExceededException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TextSizeLimitExceededException": return try TextSizeLimitExceededException.makeError(baseError: baseError)
            case "UnsupportedLanguageException": return try UnsupportedLanguageException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchDetectSentimentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BatchSizeLimitExceededException": return try BatchSizeLimitExceededException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TextSizeLimitExceededException": return try TextSizeLimitExceededException.makeError(baseError: baseError)
            case "UnsupportedLanguageException": return try UnsupportedLanguageException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchDetectSyntaxOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BatchSizeLimitExceededException": return try BatchSizeLimitExceededException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TextSizeLimitExceededException": return try TextSizeLimitExceededException.makeError(baseError: baseError)
            case "UnsupportedLanguageException": return try UnsupportedLanguageException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum BatchDetectTargetedSentimentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "BatchSizeLimitExceededException": return try BatchSizeLimitExceededException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TextSizeLimitExceededException": return try TextSizeLimitExceededException.makeError(baseError: baseError)
            case "UnsupportedLanguageException": return try UnsupportedLanguageException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ClassifyDocumentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceUnavailableException": return try ResourceUnavailableException.makeError(baseError: baseError)
            case "TextSizeLimitExceededException": return try TextSizeLimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ContainsPiiEntitiesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TextSizeLimitExceededException": return try TextSizeLimitExceededException.makeError(baseError: baseError)
            case "UnsupportedLanguageException": return try UnsupportedLanguageException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateDocumentClassifierOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "KmsKeyValidationException": return try KmsKeyValidationException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            case "UnsupportedLanguageException": return try UnsupportedLanguageException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceUnavailableException": return try ResourceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateEntityRecognizerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "KmsKeyValidationException": return try KmsKeyValidationException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            case "UnsupportedLanguageException": return try UnsupportedLanguageException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum CreateFlywheelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "KmsKeyValidationException": return try KmsKeyValidationException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceUnavailableException": return try ResourceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            case "UnsupportedLanguageException": return try UnsupportedLanguageException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteDocumentClassifierOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceUnavailableException": return try ResourceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteEntityRecognizerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceUnavailableException": return try ResourceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteFlywheelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceUnavailableException": return try ResourceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DeleteResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDatasetOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDocumentClassificationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDocumentClassifierOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeDominantLanguageDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEntitiesDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEntityRecognizerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeEventsDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFlywheelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeFlywheelIterationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeKeyPhrasesDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribePiiEntitiesDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeSentimentDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTargetedSentimentDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DescribeTopicsDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetectDominantLanguageOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TextSizeLimitExceededException": return try TextSizeLimitExceededException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetectEntitiesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceUnavailableException": return try ResourceUnavailableException.makeError(baseError: baseError)
            case "TextSizeLimitExceededException": return try TextSizeLimitExceededException.makeError(baseError: baseError)
            case "UnsupportedLanguageException": return try UnsupportedLanguageException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetectKeyPhrasesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TextSizeLimitExceededException": return try TextSizeLimitExceededException.makeError(baseError: baseError)
            case "UnsupportedLanguageException": return try UnsupportedLanguageException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetectPiiEntitiesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TextSizeLimitExceededException": return try TextSizeLimitExceededException.makeError(baseError: baseError)
            case "UnsupportedLanguageException": return try UnsupportedLanguageException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetectSentimentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TextSizeLimitExceededException": return try TextSizeLimitExceededException.makeError(baseError: baseError)
            case "UnsupportedLanguageException": return try UnsupportedLanguageException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetectSyntaxOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TextSizeLimitExceededException": return try TextSizeLimitExceededException.makeError(baseError: baseError)
            case "UnsupportedLanguageException": return try UnsupportedLanguageException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetectTargetedSentimentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TextSizeLimitExceededException": return try TextSizeLimitExceededException.makeError(baseError: baseError)
            case "UnsupportedLanguageException": return try UnsupportedLanguageException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum DetectToxicContentOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TextSizeLimitExceededException": return try TextSizeLimitExceededException.makeError(baseError: baseError)
            case "UnsupportedLanguageException": return try UnsupportedLanguageException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ImportModelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "KmsKeyValidationException": return try KmsKeyValidationException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceUnavailableException": return try ResourceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDatasetsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidFilterException": return try InvalidFilterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDocumentClassificationJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidFilterException": return try InvalidFilterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDocumentClassifiersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidFilterException": return try InvalidFilterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDocumentClassifierSummariesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListDominantLanguageDetectionJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidFilterException": return try InvalidFilterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEndpointsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEntitiesDetectionJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidFilterException": return try InvalidFilterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEntityRecognizersOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidFilterException": return try InvalidFilterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEntityRecognizerSummariesOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListEventsDetectionJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidFilterException": return try InvalidFilterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListFlywheelIterationHistoryOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidFilterException": return try InvalidFilterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListFlywheelsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidFilterException": return try InvalidFilterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListKeyPhrasesDetectionJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidFilterException": return try InvalidFilterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListPiiEntitiesDetectionJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidFilterException": return try InvalidFilterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListSentimentDetectionJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidFilterException": return try InvalidFilterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTagsForResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTargetedSentimentDetectionJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidFilterException": return try InvalidFilterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum ListTopicsDetectionJobsOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidFilterException": return try InvalidFilterException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum PutResourcePolicyOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartDocumentClassificationJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "KmsKeyValidationException": return try KmsKeyValidationException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceUnavailableException": return try ResourceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartDominantLanguageDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "KmsKeyValidationException": return try KmsKeyValidationException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartEntitiesDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "KmsKeyValidationException": return try KmsKeyValidationException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceUnavailableException": return try ResourceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartEventsDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "KmsKeyValidationException": return try KmsKeyValidationException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartFlywheelIterationOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartKeyPhrasesDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "KmsKeyValidationException": return try KmsKeyValidationException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartPiiEntitiesDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "KmsKeyValidationException": return try KmsKeyValidationException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartSentimentDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "KmsKeyValidationException": return try KmsKeyValidationException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartTargetedSentimentDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "KmsKeyValidationException": return try KmsKeyValidationException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StartTopicsDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "KmsKeyValidationException": return try KmsKeyValidationException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopDominantLanguageDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopEntitiesDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopEventsDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopKeyPhrasesDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopPiiEntitiesDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopSentimentDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopTargetedSentimentDetectionJobOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "JobNotFoundException": return try JobNotFoundException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopTrainingDocumentClassifierOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum StopTrainingEntityRecognizerOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum TagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyTagsException": return try TooManyTagsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UntagResourceOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "ConcurrentModificationException": return try ConcurrentModificationException.makeError(baseError: baseError)
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyTagKeysException": return try TooManyTagKeysException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateEndpointOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "ResourceInUseException": return try ResourceInUseException.makeError(baseError: baseError)
            case "ResourceLimitExceededException": return try ResourceLimitExceededException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "ResourceUnavailableException": return try ResourceUnavailableException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

enum UpdateFlywheelOutputError {

    static func httpError(from httpResponse: SmithyHTTPAPI.HTTPResponse) async throws -> Swift.Error {
        let data = try await httpResponse.data()
        let responseReader = try SmithyJSON.Reader.from(data: data)
        let baseError = try AWSClientRuntime.AWSJSONError(httpResponse: httpResponse, responseReader: responseReader, noErrorWrapping: false)
        if let error = baseError.customError() { return error }
        switch baseError.code {
            case "InternalServerException": return try InternalServerException.makeError(baseError: baseError)
            case "InvalidRequestException": return try InvalidRequestException.makeError(baseError: baseError)
            case "KmsKeyValidationException": return try KmsKeyValidationException.makeError(baseError: baseError)
            case "ResourceNotFoundException": return try ResourceNotFoundException.makeError(baseError: baseError)
            case "TooManyRequestsException": return try TooManyRequestsException.makeError(baseError: baseError)
            default: return try AWSClientRuntime.UnknownAWSHTTPServiceError.makeError(baseError: baseError)
        }
    }
}

extension InternalServerException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InternalServerException {
        let reader = baseError.errorBodyReader
        var value = InternalServerException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension BatchSizeLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> BatchSizeLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = BatchSizeLimitExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TextSizeLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TextSizeLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = TextSizeLimitExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidRequestException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidRequestException {
        let reader = baseError.errorBodyReader
        var value = InvalidRequestException()
        value.properties.detail = try reader["Detail"].readIfPresent(with: ComprehendClientTypes.InvalidRequestDetail.read(from:))
        value.properties.message = try reader["Message"].readIfPresent()
        value.properties.reason = try reader["Reason"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension UnsupportedLanguageException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> UnsupportedLanguageException {
        let reader = baseError.errorBodyReader
        var value = UnsupportedLanguageException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceUnavailableException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceUnavailableException {
        let reader = baseError.errorBodyReader
        var value = ResourceUnavailableException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceLimitExceededException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceLimitExceededException {
        let reader = baseError.errorBodyReader
        var value = ResourceLimitExceededException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyTagsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TooManyTagsException {
        let reader = baseError.errorBodyReader
        var value = TooManyTagsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceInUseException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceInUseException {
        let reader = baseError.errorBodyReader
        var value = ResourceInUseException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyRequestsException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TooManyRequestsException {
        let reader = baseError.errorBodyReader
        var value = TooManyRequestsException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ResourceNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ResourceNotFoundException {
        let reader = baseError.errorBodyReader
        var value = ResourceNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension KmsKeyValidationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> KmsKeyValidationException {
        let reader = baseError.errorBodyReader
        var value = KmsKeyValidationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension JobNotFoundException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> JobNotFoundException {
        let reader = baseError.errorBodyReader
        var value = JobNotFoundException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension InvalidFilterException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> InvalidFilterException {
        let reader = baseError.errorBodyReader
        var value = InvalidFilterException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ConcurrentModificationException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> ConcurrentModificationException {
        let reader = baseError.errorBodyReader
        var value = ConcurrentModificationException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension TooManyTagKeysException {

    static func makeError(baseError: AWSClientRuntime.AWSJSONError) throws -> TooManyTagKeysException {
        let reader = baseError.errorBodyReader
        var value = TooManyTagKeysException()
        value.properties.message = try reader["Message"].readIfPresent()
        value.httpResponse = baseError.httpResponse
        value.requestID = baseError.requestID
        value.message = baseError.message
        return value
    }
}

extension ComprehendClientTypes.BatchDetectDominantLanguageItemResult {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.BatchDetectDominantLanguageItemResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.BatchDetectDominantLanguageItemResult()
        value.index = try reader["Index"].readIfPresent()
        value.languages = try reader["Languages"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.DominantLanguage.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComprehendClientTypes.DominantLanguage {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.DominantLanguage {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.DominantLanguage()
        value.languageCode = try reader["LanguageCode"].readIfPresent()
        value.score = try reader["Score"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.BatchItemError {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.BatchItemError {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.BatchItemError()
        value.index = try reader["Index"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.BatchDetectEntitiesItemResult {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.BatchDetectEntitiesItemResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.BatchDetectEntitiesItemResult()
        value.index = try reader["Index"].readIfPresent()
        value.entities = try reader["Entities"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.Entity.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComprehendClientTypes.Entity {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.Entity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.Entity()
        value.score = try reader["Score"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.text = try reader["Text"].readIfPresent()
        value.beginOffset = try reader["BeginOffset"].readIfPresent()
        value.endOffset = try reader["EndOffset"].readIfPresent()
        value.blockReferences = try reader["BlockReferences"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.BlockReference.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComprehendClientTypes.BlockReference {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.BlockReference {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.BlockReference()
        value.blockId = try reader["BlockId"].readIfPresent()
        value.beginOffset = try reader["BeginOffset"].readIfPresent()
        value.endOffset = try reader["EndOffset"].readIfPresent()
        value.childBlocks = try reader["ChildBlocks"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.ChildBlock.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComprehendClientTypes.ChildBlock {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.ChildBlock {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.ChildBlock()
        value.childBlockId = try reader["ChildBlockId"].readIfPresent()
        value.beginOffset = try reader["BeginOffset"].readIfPresent()
        value.endOffset = try reader["EndOffset"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.BatchDetectKeyPhrasesItemResult {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.BatchDetectKeyPhrasesItemResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.BatchDetectKeyPhrasesItemResult()
        value.index = try reader["Index"].readIfPresent()
        value.keyPhrases = try reader["KeyPhrases"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.KeyPhrase.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComprehendClientTypes.KeyPhrase {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.KeyPhrase {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.KeyPhrase()
        value.score = try reader["Score"].readIfPresent()
        value.text = try reader["Text"].readIfPresent()
        value.beginOffset = try reader["BeginOffset"].readIfPresent()
        value.endOffset = try reader["EndOffset"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.BatchDetectSentimentItemResult {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.BatchDetectSentimentItemResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.BatchDetectSentimentItemResult()
        value.index = try reader["Index"].readIfPresent()
        value.sentiment = try reader["Sentiment"].readIfPresent()
        value.sentimentScore = try reader["SentimentScore"].readIfPresent(with: ComprehendClientTypes.SentimentScore.read(from:))
        return value
    }
}

extension ComprehendClientTypes.SentimentScore {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.SentimentScore {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.SentimentScore()
        value.positive = try reader["Positive"].readIfPresent()
        value.negative = try reader["Negative"].readIfPresent()
        value.neutral = try reader["Neutral"].readIfPresent()
        value.mixed = try reader["Mixed"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.BatchDetectSyntaxItemResult {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.BatchDetectSyntaxItemResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.BatchDetectSyntaxItemResult()
        value.index = try reader["Index"].readIfPresent()
        value.syntaxTokens = try reader["SyntaxTokens"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.SyntaxToken.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComprehendClientTypes.SyntaxToken {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.SyntaxToken {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.SyntaxToken()
        value.tokenId = try reader["TokenId"].readIfPresent()
        value.text = try reader["Text"].readIfPresent()
        value.beginOffset = try reader["BeginOffset"].readIfPresent()
        value.endOffset = try reader["EndOffset"].readIfPresent()
        value.partOfSpeech = try reader["PartOfSpeech"].readIfPresent(with: ComprehendClientTypes.PartOfSpeechTag.read(from:))
        return value
    }
}

extension ComprehendClientTypes.PartOfSpeechTag {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.PartOfSpeechTag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.PartOfSpeechTag()
        value.tag = try reader["Tag"].readIfPresent()
        value.score = try reader["Score"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.BatchDetectTargetedSentimentItemResult {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.BatchDetectTargetedSentimentItemResult {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.BatchDetectTargetedSentimentItemResult()
        value.index = try reader["Index"].readIfPresent()
        value.entities = try reader["Entities"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.TargetedSentimentEntity.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComprehendClientTypes.TargetedSentimentEntity {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.TargetedSentimentEntity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.TargetedSentimentEntity()
        value.descriptiveMentionIndex = try reader["DescriptiveMentionIndex"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readInt(from:), memberNodeInfo: "member", isFlattened: false)
        value.mentions = try reader["Mentions"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.TargetedSentimentMention.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComprehendClientTypes.TargetedSentimentMention {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.TargetedSentimentMention {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.TargetedSentimentMention()
        value.score = try reader["Score"].readIfPresent()
        value.groupScore = try reader["GroupScore"].readIfPresent()
        value.text = try reader["Text"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.mentionSentiment = try reader["MentionSentiment"].readIfPresent(with: ComprehendClientTypes.MentionSentiment.read(from:))
        value.beginOffset = try reader["BeginOffset"].readIfPresent()
        value.endOffset = try reader["EndOffset"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.MentionSentiment {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.MentionSentiment {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.MentionSentiment()
        value.sentiment = try reader["Sentiment"].readIfPresent()
        value.sentimentScore = try reader["SentimentScore"].readIfPresent(with: ComprehendClientTypes.SentimentScore.read(from:))
        return value
    }
}

extension ComprehendClientTypes.DocumentClass {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.DocumentClass {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.DocumentClass()
        value.name = try reader["Name"].readIfPresent()
        value.score = try reader["Score"].readIfPresent()
        value.page = try reader["Page"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.DocumentLabel {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.DocumentLabel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.DocumentLabel()
        value.name = try reader["Name"].readIfPresent()
        value.score = try reader["Score"].readIfPresent()
        value.page = try reader["Page"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.DocumentMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.DocumentMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.DocumentMetadata()
        value.pages = try reader["Pages"].readIfPresent()
        value.extractedCharacters = try reader["ExtractedCharacters"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.ExtractedCharactersListItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComprehendClientTypes.ExtractedCharactersListItem {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.ExtractedCharactersListItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.ExtractedCharactersListItem()
        value.page = try reader["Page"].readIfPresent()
        value.count = try reader["Count"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.DocumentTypeListItem {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.DocumentTypeListItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.DocumentTypeListItem()
        value.page = try reader["Page"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.ErrorsListItem {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.ErrorsListItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.ErrorsListItem()
        value.page = try reader["Page"].readIfPresent()
        value.errorCode = try reader["ErrorCode"].readIfPresent()
        value.errorMessage = try reader["ErrorMessage"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.WarningsListItem {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.WarningsListItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.WarningsListItem()
        value.page = try reader["Page"].readIfPresent()
        value.warnCode = try reader["WarnCode"].readIfPresent()
        value.warnMessage = try reader["WarnMessage"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.EntityLabel {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.EntityLabel {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.EntityLabel()
        value.name = try reader["Name"].readIfPresent()
        value.score = try reader["Score"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.DatasetProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.DatasetProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.DatasetProperties()
        value.datasetArn = try reader["DatasetArn"].readIfPresent()
        value.datasetName = try reader["DatasetName"].readIfPresent()
        value.datasetType = try reader["DatasetType"].readIfPresent()
        value.datasetS3Uri = try reader["DatasetS3Uri"].readIfPresent()
        value.description = try reader["Description"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.numberOfDocuments = try reader["NumberOfDocuments"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        return value
    }
}

extension ComprehendClientTypes.DocumentClassificationJobProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.DocumentClassificationJobProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.DocumentClassificationJobProperties()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobArn = try reader["JobArn"].readIfPresent()
        value.jobName = try reader["JobName"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.submitTime = try reader["SubmitTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.documentClassifierArn = try reader["DocumentClassifierArn"].readIfPresent()
        value.inputDataConfig = try reader["InputDataConfig"].readIfPresent(with: ComprehendClientTypes.InputDataConfig.read(from:))
        value.outputDataConfig = try reader["OutputDataConfig"].readIfPresent(with: ComprehendClientTypes.OutputDataConfig.read(from:))
        value.dataAccessRoleArn = try reader["DataAccessRoleArn"].readIfPresent()
        value.volumeKmsKeyId = try reader["VolumeKmsKeyId"].readIfPresent()
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: ComprehendClientTypes.VpcConfig.read(from:))
        value.flywheelArn = try reader["FlywheelArn"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.VpcConfig {

    static func write(value: ComprehendClientTypes.VpcConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["SecurityGroupIds"].writeList(value.securityGroupIds, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Subnets"].writeList(value.subnets, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.VpcConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.VpcConfig()
        value.securityGroupIds = try reader["SecurityGroupIds"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.subnets = try reader["Subnets"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ComprehendClientTypes.OutputDataConfig {

    static func write(value: ComprehendClientTypes.OutputDataConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.OutputDataConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.OutputDataConfig()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.InputDataConfig {

    static func write(value: ComprehendClientTypes.InputDataConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DocumentReaderConfig"].write(value.documentReaderConfig, with: ComprehendClientTypes.DocumentReaderConfig.write(value:to:))
        try writer["InputFormat"].write(value.inputFormat)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.InputDataConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.InputDataConfig()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.inputFormat = try reader["InputFormat"].readIfPresent()
        value.documentReaderConfig = try reader["DocumentReaderConfig"].readIfPresent(with: ComprehendClientTypes.DocumentReaderConfig.read(from:))
        return value
    }
}

extension ComprehendClientTypes.DocumentReaderConfig {

    static func write(value: ComprehendClientTypes.DocumentReaderConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DocumentReadAction"].write(value.documentReadAction)
        try writer["DocumentReadMode"].write(value.documentReadMode)
        try writer["FeatureTypes"].writeList(value.featureTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ComprehendClientTypes.DocumentReadFeatureTypes>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.DocumentReaderConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.DocumentReaderConfig()
        value.documentReadAction = try reader["DocumentReadAction"].readIfPresent() ?? .sdkUnknown("")
        value.documentReadMode = try reader["DocumentReadMode"].readIfPresent()
        value.featureTypes = try reader["FeatureTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ComprehendClientTypes.DocumentReadFeatureTypes>().read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComprehendClientTypes.DocumentClassifierProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.DocumentClassifierProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.DocumentClassifierProperties()
        value.documentClassifierArn = try reader["DocumentClassifierArn"].readIfPresent()
        value.languageCode = try reader["LanguageCode"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.submitTime = try reader["SubmitTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trainingStartTime = try reader["TrainingStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trainingEndTime = try reader["TrainingEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.inputDataConfig = try reader["InputDataConfig"].readIfPresent(with: ComprehendClientTypes.DocumentClassifierInputDataConfig.read(from:))
        value.outputDataConfig = try reader["OutputDataConfig"].readIfPresent(with: ComprehendClientTypes.DocumentClassifierOutputDataConfig.read(from:))
        value.classifierMetadata = try reader["ClassifierMetadata"].readIfPresent(with: ComprehendClientTypes.ClassifierMetadata.read(from:))
        value.dataAccessRoleArn = try reader["DataAccessRoleArn"].readIfPresent()
        value.volumeKmsKeyId = try reader["VolumeKmsKeyId"].readIfPresent()
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: ComprehendClientTypes.VpcConfig.read(from:))
        value.mode = try reader["Mode"].readIfPresent()
        value.modelKmsKeyId = try reader["ModelKmsKeyId"].readIfPresent()
        value.versionName = try reader["VersionName"].readIfPresent()
        value.sourceModelArn = try reader["SourceModelArn"].readIfPresent()
        value.flywheelArn = try reader["FlywheelArn"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.ClassifierMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.ClassifierMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.ClassifierMetadata()
        value.numberOfLabels = try reader["NumberOfLabels"].readIfPresent()
        value.numberOfTrainedDocuments = try reader["NumberOfTrainedDocuments"].readIfPresent()
        value.numberOfTestDocuments = try reader["NumberOfTestDocuments"].readIfPresent()
        value.evaluationMetrics = try reader["EvaluationMetrics"].readIfPresent(with: ComprehendClientTypes.ClassifierEvaluationMetrics.read(from:))
        return value
    }
}

extension ComprehendClientTypes.ClassifierEvaluationMetrics {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.ClassifierEvaluationMetrics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.ClassifierEvaluationMetrics()
        value.accuracy = try reader["Accuracy"].readIfPresent()
        value.precision = try reader["Precision"].readIfPresent()
        value.recall = try reader["Recall"].readIfPresent()
        value.f1Score = try reader["F1Score"].readIfPresent()
        value.microPrecision = try reader["MicroPrecision"].readIfPresent()
        value.microRecall = try reader["MicroRecall"].readIfPresent()
        value.microF1Score = try reader["MicroF1Score"].readIfPresent()
        value.hammingLoss = try reader["HammingLoss"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.DocumentClassifierOutputDataConfig {

    static func write(value: ComprehendClientTypes.DocumentClassifierOutputDataConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["FlywheelStatsS3Prefix"].write(value.flywheelStatsS3Prefix)
        try writer["KmsKeyId"].write(value.kmsKeyId)
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.DocumentClassifierOutputDataConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.DocumentClassifierOutputDataConfig()
        value.s3Uri = try reader["S3Uri"].readIfPresent()
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        value.flywheelStatsS3Prefix = try reader["FlywheelStatsS3Prefix"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.DocumentClassifierInputDataConfig {

    static func write(value: ComprehendClientTypes.DocumentClassifierInputDataConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AugmentedManifests"].writeList(value.augmentedManifests, memberWritingClosure: ComprehendClientTypes.AugmentedManifestsListItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DataFormat"].write(value.dataFormat)
        try writer["DocumentReaderConfig"].write(value.documentReaderConfig, with: ComprehendClientTypes.DocumentReaderConfig.write(value:to:))
        try writer["DocumentType"].write(value.documentType)
        try writer["Documents"].write(value.documents, with: ComprehendClientTypes.DocumentClassifierDocuments.write(value:to:))
        try writer["LabelDelimiter"].write(value.labelDelimiter)
        try writer["S3Uri"].write(value.s3Uri)
        try writer["TestS3Uri"].write(value.testS3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.DocumentClassifierInputDataConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.DocumentClassifierInputDataConfig()
        value.dataFormat = try reader["DataFormat"].readIfPresent()
        value.s3Uri = try reader["S3Uri"].readIfPresent()
        value.testS3Uri = try reader["TestS3Uri"].readIfPresent()
        value.labelDelimiter = try reader["LabelDelimiter"].readIfPresent()
        value.augmentedManifests = try reader["AugmentedManifests"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.AugmentedManifestsListItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.documentType = try reader["DocumentType"].readIfPresent()
        value.documents = try reader["Documents"].readIfPresent(with: ComprehendClientTypes.DocumentClassifierDocuments.read(from:))
        value.documentReaderConfig = try reader["DocumentReaderConfig"].readIfPresent(with: ComprehendClientTypes.DocumentReaderConfig.read(from:))
        return value
    }
}

extension ComprehendClientTypes.DocumentClassifierDocuments {

    static func write(value: ComprehendClientTypes.DocumentClassifierDocuments?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Uri"].write(value.s3Uri)
        try writer["TestS3Uri"].write(value.testS3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.DocumentClassifierDocuments {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.DocumentClassifierDocuments()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.testS3Uri = try reader["TestS3Uri"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.AugmentedManifestsListItem {

    static func write(value: ComprehendClientTypes.AugmentedManifestsListItem?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnnotationDataS3Uri"].write(value.annotationDataS3Uri)
        try writer["AttributeNames"].writeList(value.attributeNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DocumentType"].write(value.documentType)
        try writer["S3Uri"].write(value.s3Uri)
        try writer["SourceDocumentsS3Uri"].write(value.sourceDocumentsS3Uri)
        try writer["Split"].write(value.split)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.AugmentedManifestsListItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.AugmentedManifestsListItem()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.split = try reader["Split"].readIfPresent()
        value.attributeNames = try reader["AttributeNames"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.annotationDataS3Uri = try reader["AnnotationDataS3Uri"].readIfPresent()
        value.sourceDocumentsS3Uri = try reader["SourceDocumentsS3Uri"].readIfPresent()
        value.documentType = try reader["DocumentType"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.DominantLanguageDetectionJobProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.DominantLanguageDetectionJobProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.DominantLanguageDetectionJobProperties()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobArn = try reader["JobArn"].readIfPresent()
        value.jobName = try reader["JobName"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.submitTime = try reader["SubmitTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.inputDataConfig = try reader["InputDataConfig"].readIfPresent(with: ComprehendClientTypes.InputDataConfig.read(from:))
        value.outputDataConfig = try reader["OutputDataConfig"].readIfPresent(with: ComprehendClientTypes.OutputDataConfig.read(from:))
        value.dataAccessRoleArn = try reader["DataAccessRoleArn"].readIfPresent()
        value.volumeKmsKeyId = try reader["VolumeKmsKeyId"].readIfPresent()
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: ComprehendClientTypes.VpcConfig.read(from:))
        return value
    }
}

extension ComprehendClientTypes.EndpointProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.EndpointProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.EndpointProperties()
        value.endpointArn = try reader["EndpointArn"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.modelArn = try reader["ModelArn"].readIfPresent()
        value.desiredModelArn = try reader["DesiredModelArn"].readIfPresent()
        value.desiredInferenceUnits = try reader["DesiredInferenceUnits"].readIfPresent()
        value.currentInferenceUnits = try reader["CurrentInferenceUnits"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.dataAccessRoleArn = try reader["DataAccessRoleArn"].readIfPresent()
        value.desiredDataAccessRoleArn = try reader["DesiredDataAccessRoleArn"].readIfPresent()
        value.flywheelArn = try reader["FlywheelArn"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.EntitiesDetectionJobProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.EntitiesDetectionJobProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.EntitiesDetectionJobProperties()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobArn = try reader["JobArn"].readIfPresent()
        value.jobName = try reader["JobName"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.submitTime = try reader["SubmitTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.entityRecognizerArn = try reader["EntityRecognizerArn"].readIfPresent()
        value.inputDataConfig = try reader["InputDataConfig"].readIfPresent(with: ComprehendClientTypes.InputDataConfig.read(from:))
        value.outputDataConfig = try reader["OutputDataConfig"].readIfPresent(with: ComprehendClientTypes.OutputDataConfig.read(from:))
        value.languageCode = try reader["LanguageCode"].readIfPresent()
        value.dataAccessRoleArn = try reader["DataAccessRoleArn"].readIfPresent()
        value.volumeKmsKeyId = try reader["VolumeKmsKeyId"].readIfPresent()
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: ComprehendClientTypes.VpcConfig.read(from:))
        value.flywheelArn = try reader["FlywheelArn"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.EntityRecognizerProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.EntityRecognizerProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.EntityRecognizerProperties()
        value.entityRecognizerArn = try reader["EntityRecognizerArn"].readIfPresent()
        value.languageCode = try reader["LanguageCode"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.submitTime = try reader["SubmitTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trainingStartTime = try reader["TrainingStartTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.trainingEndTime = try reader["TrainingEndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.inputDataConfig = try reader["InputDataConfig"].readIfPresent(with: ComprehendClientTypes.EntityRecognizerInputDataConfig.read(from:))
        value.recognizerMetadata = try reader["RecognizerMetadata"].readIfPresent(with: ComprehendClientTypes.EntityRecognizerMetadata.read(from:))
        value.dataAccessRoleArn = try reader["DataAccessRoleArn"].readIfPresent()
        value.volumeKmsKeyId = try reader["VolumeKmsKeyId"].readIfPresent()
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: ComprehendClientTypes.VpcConfig.read(from:))
        value.modelKmsKeyId = try reader["ModelKmsKeyId"].readIfPresent()
        value.versionName = try reader["VersionName"].readIfPresent()
        value.sourceModelArn = try reader["SourceModelArn"].readIfPresent()
        value.flywheelArn = try reader["FlywheelArn"].readIfPresent()
        value.outputDataConfig = try reader["OutputDataConfig"].readIfPresent(with: ComprehendClientTypes.EntityRecognizerOutputDataConfig.read(from:))
        return value
    }
}

extension ComprehendClientTypes.EntityRecognizerOutputDataConfig {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.EntityRecognizerOutputDataConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.EntityRecognizerOutputDataConfig()
        value.flywheelStatsS3Prefix = try reader["FlywheelStatsS3Prefix"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.EntityRecognizerMetadata {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.EntityRecognizerMetadata {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.EntityRecognizerMetadata()
        value.numberOfTrainedDocuments = try reader["NumberOfTrainedDocuments"].readIfPresent()
        value.numberOfTestDocuments = try reader["NumberOfTestDocuments"].readIfPresent()
        value.evaluationMetrics = try reader["EvaluationMetrics"].readIfPresent(with: ComprehendClientTypes.EntityRecognizerEvaluationMetrics.read(from:))
        value.entityTypes = try reader["EntityTypes"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.EntityRecognizerMetadataEntityTypesListItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComprehendClientTypes.EntityRecognizerMetadataEntityTypesListItem {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.EntityRecognizerMetadataEntityTypesListItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.EntityRecognizerMetadataEntityTypesListItem()
        value.type = try reader["Type"].readIfPresent()
        value.evaluationMetrics = try reader["EvaluationMetrics"].readIfPresent(with: ComprehendClientTypes.EntityTypesEvaluationMetrics.read(from:))
        value.numberOfTrainMentions = try reader["NumberOfTrainMentions"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.EntityTypesEvaluationMetrics {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.EntityTypesEvaluationMetrics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.EntityTypesEvaluationMetrics()
        value.precision = try reader["Precision"].readIfPresent()
        value.recall = try reader["Recall"].readIfPresent()
        value.f1Score = try reader["F1Score"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.EntityRecognizerEvaluationMetrics {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.EntityRecognizerEvaluationMetrics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.EntityRecognizerEvaluationMetrics()
        value.precision = try reader["Precision"].readIfPresent()
        value.recall = try reader["Recall"].readIfPresent()
        value.f1Score = try reader["F1Score"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.EntityRecognizerInputDataConfig {

    static func write(value: ComprehendClientTypes.EntityRecognizerInputDataConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Annotations"].write(value.annotations, with: ComprehendClientTypes.EntityRecognizerAnnotations.write(value:to:))
        try writer["AugmentedManifests"].writeList(value.augmentedManifests, memberWritingClosure: ComprehendClientTypes.AugmentedManifestsListItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DataFormat"].write(value.dataFormat)
        try writer["Documents"].write(value.documents, with: ComprehendClientTypes.EntityRecognizerDocuments.write(value:to:))
        try writer["EntityList"].write(value.entityList, with: ComprehendClientTypes.EntityRecognizerEntityList.write(value:to:))
        try writer["EntityTypes"].writeList(value.entityTypes, memberWritingClosure: ComprehendClientTypes.EntityTypesListItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.EntityRecognizerInputDataConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.EntityRecognizerInputDataConfig()
        value.dataFormat = try reader["DataFormat"].readIfPresent()
        value.entityTypes = try reader["EntityTypes"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.EntityTypesListItem.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        value.documents = try reader["Documents"].readIfPresent(with: ComprehendClientTypes.EntityRecognizerDocuments.read(from:))
        value.annotations = try reader["Annotations"].readIfPresent(with: ComprehendClientTypes.EntityRecognizerAnnotations.read(from:))
        value.entityList = try reader["EntityList"].readIfPresent(with: ComprehendClientTypes.EntityRecognizerEntityList.read(from:))
        value.augmentedManifests = try reader["AugmentedManifests"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.AugmentedManifestsListItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComprehendClientTypes.EntityRecognizerEntityList {

    static func write(value: ComprehendClientTypes.EntityRecognizerEntityList?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Uri"].write(value.s3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.EntityRecognizerEntityList {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.EntityRecognizerEntityList()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        return value
    }
}

extension ComprehendClientTypes.EntityRecognizerAnnotations {

    static func write(value: ComprehendClientTypes.EntityRecognizerAnnotations?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Uri"].write(value.s3Uri)
        try writer["TestS3Uri"].write(value.testS3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.EntityRecognizerAnnotations {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.EntityRecognizerAnnotations()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.testS3Uri = try reader["TestS3Uri"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.EntityRecognizerDocuments {

    static func write(value: ComprehendClientTypes.EntityRecognizerDocuments?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InputFormat"].write(value.inputFormat)
        try writer["S3Uri"].write(value.s3Uri)
        try writer["TestS3Uri"].write(value.testS3Uri)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.EntityRecognizerDocuments {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.EntityRecognizerDocuments()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.testS3Uri = try reader["TestS3Uri"].readIfPresent()
        value.inputFormat = try reader["InputFormat"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.EntityTypesListItem {

    static func write(value: ComprehendClientTypes.EntityTypesListItem?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Type"].write(value.type)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.EntityTypesListItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.EntityTypesListItem()
        value.type = try reader["Type"].readIfPresent() ?? ""
        return value
    }
}

extension ComprehendClientTypes.EventsDetectionJobProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.EventsDetectionJobProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.EventsDetectionJobProperties()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobArn = try reader["JobArn"].readIfPresent()
        value.jobName = try reader["JobName"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.submitTime = try reader["SubmitTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.inputDataConfig = try reader["InputDataConfig"].readIfPresent(with: ComprehendClientTypes.InputDataConfig.read(from:))
        value.outputDataConfig = try reader["OutputDataConfig"].readIfPresent(with: ComprehendClientTypes.OutputDataConfig.read(from:))
        value.languageCode = try reader["LanguageCode"].readIfPresent()
        value.dataAccessRoleArn = try reader["DataAccessRoleArn"].readIfPresent()
        value.targetEventTypes = try reader["TargetEventTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComprehendClientTypes.FlywheelProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.FlywheelProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.FlywheelProperties()
        value.flywheelArn = try reader["FlywheelArn"].readIfPresent()
        value.activeModelArn = try reader["ActiveModelArn"].readIfPresent()
        value.dataAccessRoleArn = try reader["DataAccessRoleArn"].readIfPresent()
        value.taskConfig = try reader["TaskConfig"].readIfPresent(with: ComprehendClientTypes.TaskConfig.read(from:))
        value.dataLakeS3Uri = try reader["DataLakeS3Uri"].readIfPresent()
        value.dataSecurityConfig = try reader["DataSecurityConfig"].readIfPresent(with: ComprehendClientTypes.DataSecurityConfig.read(from:))
        value.status = try reader["Status"].readIfPresent()
        value.modelType = try reader["ModelType"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.latestFlywheelIteration = try reader["LatestFlywheelIteration"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.DataSecurityConfig {

    static func write(value: ComprehendClientTypes.DataSecurityConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DataLakeKmsKeyId"].write(value.dataLakeKmsKeyId)
        try writer["ModelKmsKeyId"].write(value.modelKmsKeyId)
        try writer["VolumeKmsKeyId"].write(value.volumeKmsKeyId)
        try writer["VpcConfig"].write(value.vpcConfig, with: ComprehendClientTypes.VpcConfig.write(value:to:))
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.DataSecurityConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.DataSecurityConfig()
        value.modelKmsKeyId = try reader["ModelKmsKeyId"].readIfPresent()
        value.volumeKmsKeyId = try reader["VolumeKmsKeyId"].readIfPresent()
        value.dataLakeKmsKeyId = try reader["DataLakeKmsKeyId"].readIfPresent()
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: ComprehendClientTypes.VpcConfig.read(from:))
        return value
    }
}

extension ComprehendClientTypes.TaskConfig {

    static func write(value: ComprehendClientTypes.TaskConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DocumentClassificationConfig"].write(value.documentClassificationConfig, with: ComprehendClientTypes.DocumentClassificationConfig.write(value:to:))
        try writer["EntityRecognitionConfig"].write(value.entityRecognitionConfig, with: ComprehendClientTypes.EntityRecognitionConfig.write(value:to:))
        try writer["LanguageCode"].write(value.languageCode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.TaskConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.TaskConfig()
        value.languageCode = try reader["LanguageCode"].readIfPresent() ?? .sdkUnknown("")
        value.documentClassificationConfig = try reader["DocumentClassificationConfig"].readIfPresent(with: ComprehendClientTypes.DocumentClassificationConfig.read(from:))
        value.entityRecognitionConfig = try reader["EntityRecognitionConfig"].readIfPresent(with: ComprehendClientTypes.EntityRecognitionConfig.read(from:))
        return value
    }
}

extension ComprehendClientTypes.EntityRecognitionConfig {

    static func write(value: ComprehendClientTypes.EntityRecognitionConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["EntityTypes"].writeList(value.entityTypes, memberWritingClosure: ComprehendClientTypes.EntityTypesListItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.EntityRecognitionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.EntityRecognitionConfig()
        value.entityTypes = try reader["EntityTypes"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.EntityTypesListItem.read(from:), memberNodeInfo: "member", isFlattened: false) ?? []
        return value
    }
}

extension ComprehendClientTypes.DocumentClassificationConfig {

    static func write(value: ComprehendClientTypes.DocumentClassificationConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Labels"].writeList(value.labels, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["Mode"].write(value.mode)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.DocumentClassificationConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.DocumentClassificationConfig()
        value.mode = try reader["Mode"].readIfPresent() ?? .sdkUnknown("")
        value.labels = try reader["Labels"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComprehendClientTypes.FlywheelIterationProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.FlywheelIterationProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.FlywheelIterationProperties()
        value.flywheelArn = try reader["FlywheelArn"].readIfPresent()
        value.flywheelIterationId = try reader["FlywheelIterationId"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.status = try reader["Status"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.evaluatedModelArn = try reader["EvaluatedModelArn"].readIfPresent()
        value.evaluatedModelMetrics = try reader["EvaluatedModelMetrics"].readIfPresent(with: ComprehendClientTypes.FlywheelModelEvaluationMetrics.read(from:))
        value.trainedModelArn = try reader["TrainedModelArn"].readIfPresent()
        value.trainedModelMetrics = try reader["TrainedModelMetrics"].readIfPresent(with: ComprehendClientTypes.FlywheelModelEvaluationMetrics.read(from:))
        value.evaluationManifestS3Prefix = try reader["EvaluationManifestS3Prefix"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.FlywheelModelEvaluationMetrics {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.FlywheelModelEvaluationMetrics {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.FlywheelModelEvaluationMetrics()
        value.averageF1Score = try reader["AverageF1Score"].readIfPresent()
        value.averagePrecision = try reader["AveragePrecision"].readIfPresent()
        value.averageRecall = try reader["AverageRecall"].readIfPresent()
        value.averageAccuracy = try reader["AverageAccuracy"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.KeyPhrasesDetectionJobProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.KeyPhrasesDetectionJobProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.KeyPhrasesDetectionJobProperties()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobArn = try reader["JobArn"].readIfPresent()
        value.jobName = try reader["JobName"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.submitTime = try reader["SubmitTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.inputDataConfig = try reader["InputDataConfig"].readIfPresent(with: ComprehendClientTypes.InputDataConfig.read(from:))
        value.outputDataConfig = try reader["OutputDataConfig"].readIfPresent(with: ComprehendClientTypes.OutputDataConfig.read(from:))
        value.languageCode = try reader["LanguageCode"].readIfPresent()
        value.dataAccessRoleArn = try reader["DataAccessRoleArn"].readIfPresent()
        value.volumeKmsKeyId = try reader["VolumeKmsKeyId"].readIfPresent()
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: ComprehendClientTypes.VpcConfig.read(from:))
        return value
    }
}

extension ComprehendClientTypes.PiiEntitiesDetectionJobProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.PiiEntitiesDetectionJobProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.PiiEntitiesDetectionJobProperties()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobArn = try reader["JobArn"].readIfPresent()
        value.jobName = try reader["JobName"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.submitTime = try reader["SubmitTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.inputDataConfig = try reader["InputDataConfig"].readIfPresent(with: ComprehendClientTypes.InputDataConfig.read(from:))
        value.outputDataConfig = try reader["OutputDataConfig"].readIfPresent(with: ComprehendClientTypes.PiiOutputDataConfig.read(from:))
        value.redactionConfig = try reader["RedactionConfig"].readIfPresent(with: ComprehendClientTypes.RedactionConfig.read(from:))
        value.languageCode = try reader["LanguageCode"].readIfPresent()
        value.dataAccessRoleArn = try reader["DataAccessRoleArn"].readIfPresent()
        value.mode = try reader["Mode"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.RedactionConfig {

    static func write(value: ComprehendClientTypes.RedactionConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["MaskCharacter"].write(value.maskCharacter)
        try writer["MaskMode"].write(value.maskMode)
        try writer["PiiEntityTypes"].writeList(value.piiEntityTypes, memberWritingClosure: SmithyReadWrite.WritingClosureBox<ComprehendClientTypes.PiiEntityType>().write(value:to:), memberNodeInfo: "member", isFlattened: false)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.RedactionConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.RedactionConfig()
        value.piiEntityTypes = try reader["PiiEntityTypes"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosureBox<ComprehendClientTypes.PiiEntityType>().read(from:), memberNodeInfo: "member", isFlattened: false)
        value.maskMode = try reader["MaskMode"].readIfPresent()
        value.maskCharacter = try reader["MaskCharacter"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.PiiOutputDataConfig {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.PiiOutputDataConfig {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.PiiOutputDataConfig()
        value.s3Uri = try reader["S3Uri"].readIfPresent() ?? ""
        value.kmsKeyId = try reader["KmsKeyId"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.SentimentDetectionJobProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.SentimentDetectionJobProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.SentimentDetectionJobProperties()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobArn = try reader["JobArn"].readIfPresent()
        value.jobName = try reader["JobName"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.submitTime = try reader["SubmitTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.inputDataConfig = try reader["InputDataConfig"].readIfPresent(with: ComprehendClientTypes.InputDataConfig.read(from:))
        value.outputDataConfig = try reader["OutputDataConfig"].readIfPresent(with: ComprehendClientTypes.OutputDataConfig.read(from:))
        value.languageCode = try reader["LanguageCode"].readIfPresent()
        value.dataAccessRoleArn = try reader["DataAccessRoleArn"].readIfPresent()
        value.volumeKmsKeyId = try reader["VolumeKmsKeyId"].readIfPresent()
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: ComprehendClientTypes.VpcConfig.read(from:))
        return value
    }
}

extension ComprehendClientTypes.TargetedSentimentDetectionJobProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.TargetedSentimentDetectionJobProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.TargetedSentimentDetectionJobProperties()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobArn = try reader["JobArn"].readIfPresent()
        value.jobName = try reader["JobName"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.submitTime = try reader["SubmitTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.inputDataConfig = try reader["InputDataConfig"].readIfPresent(with: ComprehendClientTypes.InputDataConfig.read(from:))
        value.outputDataConfig = try reader["OutputDataConfig"].readIfPresent(with: ComprehendClientTypes.OutputDataConfig.read(from:))
        value.languageCode = try reader["LanguageCode"].readIfPresent()
        value.dataAccessRoleArn = try reader["DataAccessRoleArn"].readIfPresent()
        value.volumeKmsKeyId = try reader["VolumeKmsKeyId"].readIfPresent()
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: ComprehendClientTypes.VpcConfig.read(from:))
        return value
    }
}

extension ComprehendClientTypes.TopicsDetectionJobProperties {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.TopicsDetectionJobProperties {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.TopicsDetectionJobProperties()
        value.jobId = try reader["JobId"].readIfPresent()
        value.jobArn = try reader["JobArn"].readIfPresent()
        value.jobName = try reader["JobName"].readIfPresent()
        value.jobStatus = try reader["JobStatus"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.submitTime = try reader["SubmitTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.endTime = try reader["EndTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.inputDataConfig = try reader["InputDataConfig"].readIfPresent(with: ComprehendClientTypes.InputDataConfig.read(from:))
        value.outputDataConfig = try reader["OutputDataConfig"].readIfPresent(with: ComprehendClientTypes.OutputDataConfig.read(from:))
        value.numberOfTopics = try reader["NumberOfTopics"].readIfPresent()
        value.dataAccessRoleArn = try reader["DataAccessRoleArn"].readIfPresent()
        value.volumeKmsKeyId = try reader["VolumeKmsKeyId"].readIfPresent()
        value.vpcConfig = try reader["VpcConfig"].readIfPresent(with: ComprehendClientTypes.VpcConfig.read(from:))
        return value
    }
}

extension ComprehendClientTypes.Block {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.Block {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.Block()
        value.id = try reader["Id"].readIfPresent()
        value.blockType = try reader["BlockType"].readIfPresent()
        value.text = try reader["Text"].readIfPresent()
        value.page = try reader["Page"].readIfPresent()
        value.geometry = try reader["Geometry"].readIfPresent(with: ComprehendClientTypes.Geometry.read(from:))
        value.relationships = try reader["Relationships"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.RelationshipsListItem.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComprehendClientTypes.RelationshipsListItem {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.RelationshipsListItem {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.RelationshipsListItem()
        value.ids = try reader["Ids"].readListIfPresent(memberReadingClosure: SmithyReadWrite.ReadingClosures.readString(from:), memberNodeInfo: "member", isFlattened: false)
        value.type = try reader["Type"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.Geometry {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.Geometry {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.Geometry()
        value.boundingBox = try reader["BoundingBox"].readIfPresent(with: ComprehendClientTypes.BoundingBox.read(from:))
        value.polygon = try reader["Polygon"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.Point.read(from:), memberNodeInfo: "member", isFlattened: false)
        return value
    }
}

extension ComprehendClientTypes.Point {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.Point {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.Point()
        value.x = try reader["X"].readIfPresent()
        value.y = try reader["Y"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.BoundingBox {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.BoundingBox {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.BoundingBox()
        value.height = try reader["Height"].readIfPresent()
        value.`left` = try reader["Left"].readIfPresent()
        value.top = try reader["Top"].readIfPresent()
        value.width = try reader["Width"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.PiiEntity {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.PiiEntity {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.PiiEntity()
        value.score = try reader["Score"].readIfPresent()
        value.type = try reader["Type"].readIfPresent()
        value.beginOffset = try reader["BeginOffset"].readIfPresent()
        value.endOffset = try reader["EndOffset"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.ToxicLabels {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.ToxicLabels {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.ToxicLabels()
        value.labels = try reader["Labels"].readListIfPresent(memberReadingClosure: ComprehendClientTypes.ToxicContent.read(from:), memberNodeInfo: "member", isFlattened: false)
        value.toxicity = try reader["Toxicity"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.ToxicContent {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.ToxicContent {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.ToxicContent()
        value.name = try reader["Name"].readIfPresent()
        value.score = try reader["Score"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.DocumentClassifierSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.DocumentClassifierSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.DocumentClassifierSummary()
        value.documentClassifierName = try reader["DocumentClassifierName"].readIfPresent()
        value.numberOfVersions = try reader["NumberOfVersions"].readIfPresent()
        value.latestVersionCreatedAt = try reader["LatestVersionCreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.latestVersionName = try reader["LatestVersionName"].readIfPresent()
        value.latestVersionStatus = try reader["LatestVersionStatus"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.EntityRecognizerSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.EntityRecognizerSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.EntityRecognizerSummary()
        value.recognizerName = try reader["RecognizerName"].readIfPresent()
        value.numberOfVersions = try reader["NumberOfVersions"].readIfPresent()
        value.latestVersionCreatedAt = try reader["LatestVersionCreatedAt"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.latestVersionName = try reader["LatestVersionName"].readIfPresent()
        value.latestVersionStatus = try reader["LatestVersionStatus"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.FlywheelSummary {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.FlywheelSummary {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.FlywheelSummary()
        value.flywheelArn = try reader["FlywheelArn"].readIfPresent()
        value.activeModelArn = try reader["ActiveModelArn"].readIfPresent()
        value.dataLakeS3Uri = try reader["DataLakeS3Uri"].readIfPresent()
        value.status = try reader["Status"].readIfPresent()
        value.modelType = try reader["ModelType"].readIfPresent()
        value.message = try reader["Message"].readIfPresent()
        value.creationTime = try reader["CreationTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.lastModifiedTime = try reader["LastModifiedTime"].readTimestampIfPresent(format: SmithyTimestamps.TimestampFormat.epochSeconds)
        value.latestFlywheelIteration = try reader["LatestFlywheelIteration"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.Tag {

    static func write(value: ComprehendClientTypes.Tag?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Key"].write(value.key)
        try writer["Value"].write(value.value)
    }

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.Tag {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.Tag()
        value.key = try reader["Key"].readIfPresent() ?? ""
        value.value = try reader["Value"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.InvalidRequestDetail {

    static func read(from reader: SmithyJSON.Reader) throws -> ComprehendClientTypes.InvalidRequestDetail {
        guard reader.hasContent else { throw SmithyReadWrite.ReaderError.requiredValueNotPresent }
        var value = ComprehendClientTypes.InvalidRequestDetail()
        value.reason = try reader["Reason"].readIfPresent()
        return value
    }
}

extension ComprehendClientTypes.DatasetInputDataConfig {

    static func write(value: ComprehendClientTypes.DatasetInputDataConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AugmentedManifests"].writeList(value.augmentedManifests, memberWritingClosure: ComprehendClientTypes.DatasetAugmentedManifestsListItem.write(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DataFormat"].write(value.dataFormat)
        try writer["DocumentClassifierInputDataConfig"].write(value.documentClassifierInputDataConfig, with: ComprehendClientTypes.DatasetDocumentClassifierInputDataConfig.write(value:to:))
        try writer["EntityRecognizerInputDataConfig"].write(value.entityRecognizerInputDataConfig, with: ComprehendClientTypes.DatasetEntityRecognizerInputDataConfig.write(value:to:))
    }
}

extension ComprehendClientTypes.DatasetEntityRecognizerInputDataConfig {

    static func write(value: ComprehendClientTypes.DatasetEntityRecognizerInputDataConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Annotations"].write(value.annotations, with: ComprehendClientTypes.DatasetEntityRecognizerAnnotations.write(value:to:))
        try writer["Documents"].write(value.documents, with: ComprehendClientTypes.DatasetEntityRecognizerDocuments.write(value:to:))
        try writer["EntityList"].write(value.entityList, with: ComprehendClientTypes.DatasetEntityRecognizerEntityList.write(value:to:))
    }
}

extension ComprehendClientTypes.DatasetEntityRecognizerEntityList {

    static func write(value: ComprehendClientTypes.DatasetEntityRecognizerEntityList?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Uri"].write(value.s3Uri)
    }
}

extension ComprehendClientTypes.DatasetEntityRecognizerDocuments {

    static func write(value: ComprehendClientTypes.DatasetEntityRecognizerDocuments?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["InputFormat"].write(value.inputFormat)
        try writer["S3Uri"].write(value.s3Uri)
    }
}

extension ComprehendClientTypes.DatasetEntityRecognizerAnnotations {

    static func write(value: ComprehendClientTypes.DatasetEntityRecognizerAnnotations?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["S3Uri"].write(value.s3Uri)
    }
}

extension ComprehendClientTypes.DatasetDocumentClassifierInputDataConfig {

    static func write(value: ComprehendClientTypes.DatasetDocumentClassifierInputDataConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["LabelDelimiter"].write(value.labelDelimiter)
        try writer["S3Uri"].write(value.s3Uri)
    }
}

extension ComprehendClientTypes.DatasetAugmentedManifestsListItem {

    static func write(value: ComprehendClientTypes.DatasetAugmentedManifestsListItem?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["AnnotationDataS3Uri"].write(value.annotationDataS3Uri)
        try writer["AttributeNames"].writeList(value.attributeNames, memberWritingClosure: SmithyReadWrite.WritingClosures.writeString(value:to:), memberNodeInfo: "member", isFlattened: false)
        try writer["DocumentType"].write(value.documentType)
        try writer["S3Uri"].write(value.s3Uri)
        try writer["SourceDocumentsS3Uri"].write(value.sourceDocumentsS3Uri)
    }
}

extension ComprehendClientTypes.TextSegment {

    static func write(value: ComprehendClientTypes.TextSegment?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["Text"].write(value.text)
    }
}

extension ComprehendClientTypes.DatasetFilter {

    static func write(value: ComprehendClientTypes.DatasetFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["DatasetType"].write(value.datasetType)
        try writer["Status"].write(value.status)
    }
}

extension ComprehendClientTypes.DocumentClassificationJobFilter {

    static func write(value: ComprehendClientTypes.DocumentClassificationJobFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobName"].write(value.jobName)
        try writer["JobStatus"].write(value.jobStatus)
        try writer["SubmitTimeAfter"].writeTimestamp(value.submitTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["SubmitTimeBefore"].writeTimestamp(value.submitTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ComprehendClientTypes.DocumentClassifierFilter {

    static func write(value: ComprehendClientTypes.DocumentClassifierFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["DocumentClassifierName"].write(value.documentClassifierName)
        try writer["Status"].write(value.status)
        try writer["SubmitTimeAfter"].writeTimestamp(value.submitTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["SubmitTimeBefore"].writeTimestamp(value.submitTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ComprehendClientTypes.DominantLanguageDetectionJobFilter {

    static func write(value: ComprehendClientTypes.DominantLanguageDetectionJobFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobName"].write(value.jobName)
        try writer["JobStatus"].write(value.jobStatus)
        try writer["SubmitTimeAfter"].writeTimestamp(value.submitTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["SubmitTimeBefore"].writeTimestamp(value.submitTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ComprehendClientTypes.EndpointFilter {

    static func write(value: ComprehendClientTypes.EndpointFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["ModelArn"].write(value.modelArn)
        try writer["Status"].write(value.status)
    }
}

extension ComprehendClientTypes.EntitiesDetectionJobFilter {

    static func write(value: ComprehendClientTypes.EntitiesDetectionJobFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobName"].write(value.jobName)
        try writer["JobStatus"].write(value.jobStatus)
        try writer["SubmitTimeAfter"].writeTimestamp(value.submitTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["SubmitTimeBefore"].writeTimestamp(value.submitTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ComprehendClientTypes.EntityRecognizerFilter {

    static func write(value: ComprehendClientTypes.EntityRecognizerFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["RecognizerName"].write(value.recognizerName)
        try writer["Status"].write(value.status)
        try writer["SubmitTimeAfter"].writeTimestamp(value.submitTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["SubmitTimeBefore"].writeTimestamp(value.submitTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ComprehendClientTypes.EventsDetectionJobFilter {

    static func write(value: ComprehendClientTypes.EventsDetectionJobFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobName"].write(value.jobName)
        try writer["JobStatus"].write(value.jobStatus)
        try writer["SubmitTimeAfter"].writeTimestamp(value.submitTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["SubmitTimeBefore"].writeTimestamp(value.submitTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ComprehendClientTypes.FlywheelIterationFilter {

    static func write(value: ComprehendClientTypes.FlywheelIterationFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ComprehendClientTypes.FlywheelFilter {

    static func write(value: ComprehendClientTypes.FlywheelFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["CreationTimeAfter"].writeTimestamp(value.creationTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["CreationTimeBefore"].writeTimestamp(value.creationTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["Status"].write(value.status)
    }
}

extension ComprehendClientTypes.KeyPhrasesDetectionJobFilter {

    static func write(value: ComprehendClientTypes.KeyPhrasesDetectionJobFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobName"].write(value.jobName)
        try writer["JobStatus"].write(value.jobStatus)
        try writer["SubmitTimeAfter"].writeTimestamp(value.submitTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["SubmitTimeBefore"].writeTimestamp(value.submitTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ComprehendClientTypes.PiiEntitiesDetectionJobFilter {

    static func write(value: ComprehendClientTypes.PiiEntitiesDetectionJobFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobName"].write(value.jobName)
        try writer["JobStatus"].write(value.jobStatus)
        try writer["SubmitTimeAfter"].writeTimestamp(value.submitTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["SubmitTimeBefore"].writeTimestamp(value.submitTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ComprehendClientTypes.SentimentDetectionJobFilter {

    static func write(value: ComprehendClientTypes.SentimentDetectionJobFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobName"].write(value.jobName)
        try writer["JobStatus"].write(value.jobStatus)
        try writer["SubmitTimeAfter"].writeTimestamp(value.submitTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["SubmitTimeBefore"].writeTimestamp(value.submitTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ComprehendClientTypes.TargetedSentimentDetectionJobFilter {

    static func write(value: ComprehendClientTypes.TargetedSentimentDetectionJobFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobName"].write(value.jobName)
        try writer["JobStatus"].write(value.jobStatus)
        try writer["SubmitTimeAfter"].writeTimestamp(value.submitTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["SubmitTimeBefore"].writeTimestamp(value.submitTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ComprehendClientTypes.TopicsDetectionJobFilter {

    static func write(value: ComprehendClientTypes.TopicsDetectionJobFilter?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["JobName"].write(value.jobName)
        try writer["JobStatus"].write(value.jobStatus)
        try writer["SubmitTimeAfter"].writeTimestamp(value.submitTimeAfter, format: SmithyTimestamps.TimestampFormat.epochSeconds)
        try writer["SubmitTimeBefore"].writeTimestamp(value.submitTimeBefore, format: SmithyTimestamps.TimestampFormat.epochSeconds)
    }
}

extension ComprehendClientTypes.UpdateDataSecurityConfig {

    static func write(value: ComprehendClientTypes.UpdateDataSecurityConfig?, to writer: SmithyJSON.Writer) throws {
        guard let value else { return }
        try writer["ModelKmsKeyId"].write(value.modelKmsKeyId)
        try writer["VolumeKmsKeyId"].write(value.volumeKmsKeyId)
        try writer["VpcConfig"].write(value.vpcConfig, with: ComprehendClientTypes.VpcConfig.write(value:to:))
    }
}

public enum ComprehendClientTypes {}
